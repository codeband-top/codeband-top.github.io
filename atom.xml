<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>代码段小站</title>
  <icon>https://www.gravatar.com/avatar/4c71a513a84e4d430b9f9aed224237fc</icon>
  <subtitle>CodeTool - 个人计算机类练手小博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.codetool.top/"/>
  <updated>2020-04-02T15:15:19.473Z</updated>
  <id>https://www.codetool.top/</id>
  
  <author>
    <name>Rhett Peng</name>
    <email>pctdyx@qq.net</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IEEE754浮点数标准和舍入规则</title>
    <link href="https://www.codetool.top/article/IEEE754%E6%B5%AE%E7%82%B9%E6%95%B0%E6%A0%87%E5%87%86%E5%92%8C%E8%88%8D%E5%85%A5%E8%A7%84%E5%88%99/"/>
    <id>https://www.codetool.top/article/IEEE754浮点数标准和舍入规则/</id>
    <published>2020-04-02T13:30:19.000Z</published>
    <updated>2020-04-02T15:15:19.473Z</updated>
    
    <content type="html"><![CDATA[<p>整理一下之前的笔记</p><h1 id="浮点数与定点数">1 浮点数与定点数</h1><h2 id="定点数">1.1 定点数</h2><p>小数点在计算机中通常有两种表示方法，一种是约定所有数值数据的小数点隐含在某一个固定位置上，称为定点表示法，简称定点数。</p><p>其实整数也算是一种特殊的定点数，只是小数点默认处于末尾。</p><p>如何表示一个有符号定点数？例如，我们定义一个八位定点数表示方法，第一位为符号位，小数点位于第三位后面，则对于小数<code>1.375</code>，定点数原码表示为<code>00101100</code>，即小数点前后分别由十进制转二进制：<code>+ 01.011</code>，补码表示则进行对应的处理。</p><p>定点数的缺陷有：</p><ul><li>由于固定的小数点位置决定了整数部分位数和小数部分的位数，导致其能表示的数的范围偏小。</li><li>小数点位置难统一，现代计算机中出现的定点数已经全部规定为<strong>纯小数</strong>了，即默认整数部分是0，小数点位置位于符号位之后。</li></ul><h2 id="浮点数">1.2 浮点数</h2><p>浮点数与定点数对应，它不固定小数点位置，这是怎么做到的呢？</p><p>对应的原理其实就是，一个小数，通过小数点移位，总能将小数点移到一个统一的位置上。例如对于十进制小数<code>0.035 = 3.5 * 10^-2</code>，对于<code>0.000059 = 5.9 * 10^-5</code>。</p><p>那么二进制小数也是这样，例如，<code>0.0101 = 1.01 * 2^-2</code>。浮点数通过统一将小数表示成这种方式，做到不限制小数点的位置。</p><p>具体来说，浮点数把一个二进制数表示成如下图：</p><p><img src="https://api.codetool.top/img/15858348577366.png" alt></p><p>那么根据S、M、E就能唯一确定一个小数。要将S、M、E表示到一起，就出现了IEEE754标准。</p><blockquote><p>IEEE二进制浮点数算术标准（IEEE 754）是20世纪80年代以来最广泛使用的浮点数运算标准，为许多CPU与浮点运算器所采用。这个标准定义了表示浮点数的格式（包括负零-0）与反常值（denormal number）），一些特殊数值（无穷（Inf）与非数值（NaN）），以及这些数值的“浮点数运算符”；它也指明了四种数值舍入规则和五种例外状况（包括例外发生的时机与处理方式）。</p></blockquote><p>IEEE754将一个二进制串表示为上图末尾的那一条，其中S就是符号位，exp对应的是阶码E，而frac对应的是尾数M。</p><p>exp和frac在单精度浮点数和双精度浮点数中的长度如下所示：</p><p><img src="https://api.codetool.top/img/1585837072894.png" alt></p><h1 id="规格化浮点数">2 规格化浮点数</h1><p>那么如何确定exp和frac？</p><p>首先要了解的是，虽然阶码E是有符号的，例如 <code>1.01 * 2^-2</code>中，尾数为<code>1.01</code>，阶码为<code>-2</code>，但IEEE754中会把<strong>exp的范围转移到非负数区域，即它是一个无符号表示。</strong>（不能全为0或者全为1，因为被非规格化浮点数和特殊值占用了）</p><p>而尾数frac，则是M的小数部分，例如<code>1.01 * 2^-2</code>中，M为<code>1.01</code>，frac为<code>01</code>。</p><p><img src="https://api.codetool.top/img/15858373331935.png" alt></p><p>举例如何将十进制数转浮点数：</p><p><img src="https://api.codetool.top/img/15858377951909.png" alt></p><h1 id="非规格化浮点数">3 非规格化浮点数</h1><p>虽然规格化浮点数能表示的范围已经很牛X了，但对于很小的数还是难以表示，比如，单精度数的阶码上限不是127吗，假设我有一个小数<code>0.00...(省略127个0)...111</code>，在小数点后面连续0的个数达到了阶码上限，则通过小数点移位后，阶码会超过127，此时规格化浮点数就无法表示了。</p><p>有没有方法解决这个问题呢？</p><p>IEEE定义了非规格化浮点数，此时就<strong>不要求尾数部分以<code>1.*</code>开头了，而是用<code>0.*</code>表示</strong>。然后阶码域必须最小，即exp全为0，因为尾数域的规则改了，要平滑过渡到规格化浮点数，此时<code>E=-Bias+1</code>，和规格化浮点数的计算有不同。</p><p><img src="https://api.codetool.top/img/15858384367562.png" alt></p><p>这种思想其实就是<strong>用精度换范围</strong>，因为frac的长度本身有限，非规格化浮点数的尾数部分前面用0填充，使得尾数部分有效位个数减少，精度也就对应减少。</p><p><img src="https://api.codetool.top/img/15858385838055.png" alt></p><p>非规格化浮点数可以表示0，并且区分+0和-0（即符号位不同）。</p><h1 id="特殊值">4 特殊值</h1><p>IEEE754还定义了无穷、NaN，它们的exp全为1。</p><p><img src="https://api.codetool.top/img/15858388387642.png" alt></p><p>有意思的是，浮点数运算中，任何数除以0都会等于无穷。</p><h1 id="舍入（Rounding）规则">5 舍入（Rounding）规则</h1><p>因为部分小数在计算机中不能精确表示成浮点数，IEEE754定义了四种舍入规则。它们是：</p><ul><li>向偶数舍入，也称为向最接近的值舍入。它和四舍五入类似，但是四舍五入会遇到问题，比如<code>2.5</code>和2、3之间的差值都为0.5，那么它应该往2舍入还是往3舍入呢？四舍五入是往3舍入，而向偶数舍入确保<strong>舍入后的最低有效数字是偶数。</strong> 则应该往2舍入。 对于二进制而言，就代表舍入后最低有效数字必须为0。<ul><li><strong>向偶数舍入是计算机的默认舍入方式。</strong></li></ul></li><li>向0舍入，对应C/C++的类型转换。<code>(int) 1.324 = 1</code>，<code>(int) -1.324 = -1</code></li><li>向下舍入，C/C++函数floor()。例如：<code>floor(1.324) = 1</code>，<code>floor(-1.324) = -2</code></li><li>向上舍入：C/C++函数ceil()。例如：<code>ceil(1.324) = 2</code>，<code>Ceil(-1.324) = -1</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整理一下之前的笔记&lt;/p&gt;
&lt;h1 id=&quot;浮点数与定点数&quot;&gt;1 浮点数与定点数&lt;/h1&gt;&lt;h2 id=&quot;定点数&quot;&gt;1.1 定点数&lt;/h2&gt;&lt;p&gt;小数点在计算机中通常有两种表示方法，一种是约定所有数值数据的小数点隐含在某一个固定位置上，称为定点表示法，简称定点数。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="计算机相关" scheme="https://www.codetool.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="基础知识" scheme="https://www.codetool.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>leetcode289-生命游戏</title>
    <link href="https://www.codetool.top/article/leetcode289-%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/"/>
    <id>https://www.codetool.top/article/leetcode289-生命游戏/</id>
    <published>2020-04-02T01:38:11.000Z</published>
    <updated>2020-04-02T01:45:02.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>根据 <a href="https://baike.baidu.com/item/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/2926434?fr=aladdin" target="_blank" rel="noopener">百度百科</a> ，生命游戏，简称为生命，是英国数学家约翰·何顿·康威在 1970 年发明的细胞自动机。</p><p>给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞都具有一个初始状态：1 即为活细胞（live），或 0 即为死细胞（dead）。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：</p><p>如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；<br>如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；<br>如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；<br>如果死细胞周围正好有三个活细胞，则该位置死细胞复活；<br>根据当前状态，写一个函数来计算面板上所有细胞的下一个（一次更新后的）状态。下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。</p><p><strong>示例:</strong></p><blockquote><p><strong>输入：</strong><br>[<br>&nbsp;&nbsp;[0,1,0],<br>&nbsp;&nbsp;[0,0,1],<br>&nbsp;&nbsp;[1,1,1],<br>&nbsp;&nbsp;[0,0,0]<br>]<br><strong>输出：</strong><br>[<br>&nbsp;&nbsp;[0,0,0],<br>&nbsp;&nbsp;[1,0,1],<br>&nbsp;&nbsp;[0,1,1],<br>&nbsp;&nbsp;[0,1,0]<br>]</p></blockquote><p><strong>进阶：</strong></p><ul><li>你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。</li><li>本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？</li></ul><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>可以对每一个元素扫描其周围八个元素中1的个数，然后保存下来，这个状态的保存有两种方式，一种是新建一个二维数组保存（空间复杂度<code>O(mn)</code>），另一个则是拓展原数组每个元素值的含义（原地算法）</p><p>时间复杂度：扫描m*n个元素，每次扫描检查周围8个格子。即时间复杂度为<code>O(8mn)=O(mn)</code></p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">maxDepthAfterSplit</span><span class="token punctuation">(</span>String seq<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> seq<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                ans<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span>                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;根据 &lt;a href=&quot;https://baike.baidu.com/item/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/2926434?fr=aladdin&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用OpenResty实现Nginx层面的多级缓存查询响应</title>
    <link href="https://www.codetool.top/article/%E4%BD%BF%E7%94%A8OpenResty%E5%AE%9E%E7%8E%B0Nginx%E5%B1%82%E9%9D%A2%E7%9A%84%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98%E6%9F%A5%E8%AF%A2%E5%93%8D%E5%BA%94/"/>
    <id>https://www.codetool.top/article/使用OpenResty实现Nginx层面的多级缓存查询响应/</id>
    <published>2020-04-01T13:44:35.000Z</published>
    <updated>2020-04-01T17:24:19.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenResty概述">1 OpenResty概述</h1><p>OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。</p><p>OpenResty® 通过<strong>汇聚各种设计精良的 Nginx 模块</strong>（主要由 OpenResty 团队自主开发），从而将 Nginx 有效地变成一个强大的通用 Web 应用平台。这样，Web 开发人员和系统工程师<strong>可以使用 Lua 脚本语言调动 Nginx 支持的各种 C 以及 Lua 模块，快速构造出足以胜任 10K 乃至 1000K 以上单机并发连接的高性能 Web 应用系统。</strong></p><p>OpenResty® 的目标是让你的Web服务直接跑在 Nginx 服务内部，充分利用 Nginx 的非阻塞 I/O 模型，不仅仅对 HTTP 客户端请求,甚至于对远程后端诸如 MySQL、PostgreSQL、Memcached 以及 Redis 等都进行一致的高性能响应。</p><p>以上介绍来自官网：<a href="http://openresty.org/cn/" target="_blank" rel="noopener">http://openresty.org/cn/</a></p><p><a href="https://www.cnblogs.com/huanxiyun/articles/6676972.html" target="_blank" rel="noopener">由Lua 粘合的Nginx生态环境 - 天涯逐梦 - 博客园</a> 是OpenResty作者章亦春在2012年厦门TechClub沙龙上发表的一次关于OpenResty技术介绍的演讲听录。</p><p>下面这个网址则是章亦春用 Perl 生成的一个简单 git 动画，可能就是在这次大会上当作幻灯片使用：</p><p><a href="http://agentzh.org/misc/slides/ngx-openresty-ecosystem" target="_blank" rel="noopener">http://agentzh.org/misc/slides/ngx-openresty-ecosystem</a></p><h1 id="安装">2 安装</h1><p>添加仓库执行命令</p><pre><code>yum install yum-utilsyum-config-manager --add-repo https://openresty.org/package/centos/openresty.repo</code></pre><p>执行安装</p><pre><code>yum install openresty</code></pre><p>安装成功后 会在默认的目录如下：</p><pre><code>/usr/local/openresty</code></pre><p>OpenResty默认已经集成了nginx,在目录：/usr/local/openresty/nginx 下。</p><h1 id="在nginx层面实现多级缓存查询">3 在nginx层面实现多级缓存查询</h1><p><img src="https://api.codetool.top/img/15857443207883.png" alt></p><p>为什么要这样做：</p><p>在Nginx层面响应请求，不用再转发给后端服务器，减少后端服务器的压力</p><h2 id="步骤">3.1 步骤</h2><p>在<code>nginx.conf</code>中定义lua缓存命名空间及其大小：</p><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">user</span>  <span class="token keyword">root</span> <span class="token keyword">root</span><span class="token punctuation">;</span><span class="token keyword">worker_processes</span>  <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">events</span> <span class="token punctuation">{</span>    <span class="token keyword">worker_connections</span>  <span class="token number">1024</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">http</span> <span class="token punctuation">{</span>    <span class="token keyword">include</span>       mime<span class="token punctuation">.</span><span class="token keyword">types</span><span class="token punctuation">;</span>    <span class="token keyword">default_type</span>  application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#定义Nginx缓存模块，模块名字叫dis_cache,容量大小128M</span>    lua_shared_dict dis_cache 128m<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#keepalive_timeout  0;</span>    <span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#gzip  on;</span>    <span class="token keyword">server</span> <span class="token punctuation">{</span>        <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#监听的域名</span>        <span class="token keyword">server_name</span>  localhost<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#表示所有以 localhost/read_content的请求都由该配置处理</span>        <span class="token keyword">location</span> <span class="token operator">/</span>read_content <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">#content_by_lua_file:所有请求都交给指定的lua脚本处理(/root/lua/read_content.lua)</span>            content_by_lua_file <span class="token operator">/</span><span class="token keyword">root</span><span class="token operator">/</span>lua<span class="token operator">/</span>read_content<span class="token punctuation">.</span>lua<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>lua脚本：</p><pre class=" language-lua"><code class="language-lua">ngx<span class="token punctuation">.</span>header<span class="token punctuation">.</span>content_type<span class="token operator">=</span><span class="token string">"application/json;charset=utf8"</span><span class="token keyword">local</span> uri_args <span class="token operator">=</span> ngx<span class="token punctuation">.</span>req<span class="token punctuation">.</span><span class="token function">get_uri_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">local</span> id <span class="token operator">=</span> uri_args<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">--获取本地缓存</span><span class="token keyword">local</span> cache_ngx <span class="token operator">=</span> ngx<span class="token punctuation">.</span>shared<span class="token punctuation">.</span>dis_cache<span class="token comment" spellcheck="true">--根据ID 获取本地缓存数据</span><span class="token keyword">local</span> contentCache <span class="token operator">=</span> cache_ngx<span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'content_cache_'</span><span class="token operator">..</span>id<span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 如果nginx缓存中没有，读取redis缓存</span><span class="token keyword">if</span> contentCache <span class="token operator">==</span> <span class="token string">""</span> <span class="token keyword">or</span> contentCache <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>    <span class="token keyword">local</span> redis <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"resty.redis"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">local</span> red <span class="token operator">=</span> redis<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    red<span class="token punctuation">:</span><span class="token function">set_timeout</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>    red<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"192.168.176.129"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span>    <span class="token keyword">local</span> rescontent<span class="token operator">=</span>red<span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"content_"</span><span class="token operator">..</span>id<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">-- 如果redis缓存中没有，读取mysql数据库</span>    <span class="token keyword">if</span> ngx<span class="token punctuation">.</span>null <span class="token operator">==</span> rescontent <span class="token keyword">then</span>        <span class="token keyword">local</span> cjson <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cjson"</span><span class="token punctuation">)</span>        <span class="token keyword">local</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"resty.mysql"</span><span class="token punctuation">)</span>        <span class="token keyword">local</span> db <span class="token operator">=</span> mysql<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        db<span class="token punctuation">:</span><span class="token function">set_timeout</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>        <span class="token keyword">local</span> props <span class="token operator">=</span> <span class="token punctuation">{</span>            host <span class="token operator">=</span> <span class="token string">"192.168.176.129"</span><span class="token punctuation">,</span>            port <span class="token operator">=</span> <span class="token number">3306</span><span class="token punctuation">,</span>            database <span class="token operator">=</span> <span class="token string">"changgou_content"</span><span class="token punctuation">,</span>            user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">,</span>            password <span class="token operator">=</span> <span class="token string">"123456"</span>        <span class="token punctuation">}</span>        <span class="token keyword">local</span> res <span class="token operator">=</span> db<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>        <span class="token keyword">local</span> select_sql <span class="token operator">=</span> <span class="token string">"select url,pic from tb_content where status ='1' and category_id="</span><span class="token operator">..</span>id<span class="token operator">..</span><span class="token string">" order by sort_order"</span><span class="token punctuation">;</span>        res <span class="token operator">=</span> db<span class="token punctuation">:</span><span class="token function">query</span><span class="token punctuation">(</span>select_sql<span class="token punctuation">)</span>        <span class="token keyword">local</span> responsejson <span class="token operator">=</span> cjson<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">-- 写入redis缓存</span>        red<span class="token punctuation">:</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"content_"</span><span class="token operator">..</span>id<span class="token punctuation">,</span>responsejson<span class="token punctuation">)</span>        ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>responsejson<span class="token punctuation">)</span><span class="token punctuation">;</span>        db<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">-- 如果redis缓存中存在数据，响应数据并写入nginx缓存</span>    <span class="token keyword">else</span>        cache_ngx<span class="token punctuation">:</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'content_cache_'</span><span class="token operator">..</span>id<span class="token punctuation">,</span> rescontent<span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>rescontent<span class="token punctuation">)</span>    <span class="token keyword">end</span>    red<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 如果nginx缓存中存在直接响应</span><span class="token keyword">else</span>    ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>contentCache<span class="token punctuation">)</span><span class="token keyword">end</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OpenResty概述&quot;&gt;1 OpenResty概述&lt;/h1&gt;&lt;p&gt;OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="OpenResty" scheme="https://www.codetool.top/tags/OpenResty/"/>
    
  </entry>
  
  <entry>
    <title>Lua脚本语言概述和基本语法</title>
    <link href="https://www.codetool.top/article/Lua%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0%E5%92%8C%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>https://www.codetool.top/article/Lua脚本语言概述和基本语法/</id>
    <published>2020-04-01T10:06:12.000Z</published>
    <updated>2020-04-01T17:26:04.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lua概述">1 Lua概述</h1><h2 id="介绍">1.1 介绍</h2><p>Lua 是一个小巧的<strong>脚本语言</strong>。它是巴西里约热内卢天主教大学（Pontifical Catholic University of Rio de Janeiro）里的一个由Roberto Ierusalimschy、Waldemar Celes 和 Luiz Henrique de Figueiredo三人所组成的研究小组于1993年开发的。 其设计目的是为了通过灵活嵌入应用程序中从而为应用程序提供灵活的扩展和定制功能。<strong>Lua由标准C编写而成，几乎在所有操作系统和平台上都可以编译，运行。</strong>Lua并没有提供强大的库，这是由它的定位决定的。所以Lua不适合作为开发独立应用程序的语言。Lua 有一个同时进行的JIT项目，提供在特定平台上的即时编译功能。</p><p>简单来说：</p><p>Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放，<strong>其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。</strong></p><h2 id="特性">1.2 特性</h2><ul><li>支持面向过程(procedure-oriented)编程和函数式编程(functional programming)；</li><li>自动内存管理；只提供了一种通用类型的表（table），用它可以实现数组，哈希表，集合，对象；</li><li>语言内置模式匹配；闭包(closure)；函数也可以看做一个值；提供多线程（协同进程，并非操作系统所支持的线程）支持；</li><li>通过闭包和table可以很方便地支持面向对象编程所需要的一些关键机制，比如数据抽象，虚函数，继承和重载等。</li></ul><h2 id="应用场景">1.3 应用场景</h2><ul><li>游戏开发</li><li>独立应用脚本</li><li>Web 应用脚本</li><li>扩展和数据库插件如：MySQL Proxy 和 MySQL WorkBench</li><li>安全系统，如入侵检测系统</li><li>redis中嵌套调用实现类似事务的功能</li><li>web容器中应用处理一些过滤、缓存等等的逻辑，例如nginx。</li></ul><h1 id="安装">2 安装</h1><p>先安装一些依赖</p><pre><code>yum install libtermcap-devel ncurses-devel libevent-devel readline-devel</code></pre><p>下载并编译</p><pre><code>wget http://www.lua.org/ftp/lua-5.3.5.tar.gztar zxf lua-5.3.5.tar.gzcd lua-5.3.5make linux test</code></pre><p>此时再执行lua测试看lua是否安装成功</p><pre><code>[root@localhost ~]# luaLua 5.3.5 Copyright (C) 1994-2008 Lua.org, PUC-Rio</code></pre><h1 id="HelloWorld入门程序">3 HelloWorld入门程序</h1><p>创建hello.lua文件，内容为</p><pre class=" language-lua"><code class="language-lua"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>保存并退出。</p><p>执行命令</p><pre><code>lua hello.lua</code></pre><p>查看输出：</p><pre><code>Hello</code></pre><h1 id="基本语法">4 基本语法</h1><h2 id="注释">4.1 注释</h2><p>一行注释：两个减号是单行注释:</p><pre class=" language-lua"><code class="language-lua"><span class="token comment" spellcheck="true">-- 单行注释</span></code></pre><p>多行注释：</p><pre class=" language-lua"><code class="language-lua"><span class="token comment" spellcheck="true">--[[ 多行注释 多行注释 --]]</span></code></pre><h2 id="定义变量">4.2 定义变量</h2><p>全局变量，默认的情况下，定义一个变量都是全局变量，</p><p>如果要用局部变量 需要声明为local.例如：</p><pre class=" language-lua"><code class="language-lua"><span class="token comment" spellcheck="true">-- 全局变量赋值</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token comment" spellcheck="true">-- 局部变量赋值</span><span class="token keyword">local</span> b<span class="token operator">=</span><span class="token number">2</span> </code></pre><p>如果变量没有初始化，则它的值为nil</p><h2 id="数据类型">4.3 数据类型</h2><p>Lua 是弱类型语言，变量不要类型定义,只需要为变量赋值。 值可以存储在变量中，作为参数传递或结果返回。</p><p>Lua 中有 8 个基本类型分别为：nil、boolean、number、string、userdata、function、thread 和 table。</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>nil</td><td>这个最简单，只有值nil属于该类，表示一个无效值（在条件表达式中相当于false）。</td></tr><tr><td>boolean</td><td>包含两个值：false和true。</td></tr><tr><td>number</td><td>表示双精度类型的实浮点数</td></tr><tr><td>string</td><td>字符串由一对双引号或单引号来表示</td></tr><tr><td>function</td><td>由 C 或 Lua 编写的函数</td></tr><tr><td>userdata</td><td>表示任意存储在变量中的C数据结构</td></tr><tr><td>thread</td><td>表示执行的独立线路，用于执行协同程序</td></tr><tr><td>table</td><td>Lua 中的表（table）其实是一个“关联数组”（associative arrays），数组的索引可以是数字、字符串或表类型。在 Lua 里，table 的创建是通过“构造表达式”来完成，最简单构造表达式是{}，用来创建一个空表。</td></tr></tbody></table><p>实例：</p><pre class=" language-lua"><code class="language-lua"><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">--> string</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token number">10.4</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">--> number</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">--> function</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">--> function</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">--> boolean</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token keyword">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">--> nil</span></code></pre><h2 id="流程控制">4.4 流程控制</h2><h3 id="if">4.4.1 if</h3><p>Lua if 语句 由一个布尔表达式作为条件判断，其后紧跟其他语句组成。</p><pre class=" language-lua"><code class="language-lua"><span class="token keyword">if</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token keyword">then</span>   <span class="token comment" spellcheck="true">--[ 在condition为 true 时执行的语句 --]</span><span class="token keyword">end</span></code></pre><h3 id="if-else语句">4.4.2 if..else语句</h3><p>Lua if 语句可以与 else 语句搭配使用, 在 if 条件表达式为 false 时执行 else 语句代码块。</p><pre class=" language-lua"><code class="language-lua"><span class="token keyword">if</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token keyword">then</span>   <span class="token comment" spellcheck="true">--[ condition为 true 时执行该语句块 --]</span><span class="token keyword">else</span>   <span class="token comment" spellcheck="true">--[ condition为 false 时执行该语句块 --]</span><span class="token keyword">end</span></code></pre><h3 id="while">4.4.3 while</h3><p>Lua 编程语言中 while 循环语句在判断条件为 true 时会重复执行循环体语句。</p><pre class=" language-lua"><code class="language-lua"><span class="token keyword">while</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token keyword">do</span>   statements<span class="token keyword">end</span></code></pre><h3 id="for">4.4.4 for</h3><pre class=" language-lua"><code class="language-lua"><span class="token keyword">for</span> var<span class="token operator">=</span>exp1<span class="token punctuation">,</span>exp2<span class="token punctuation">,</span>exp3 <span class="token keyword">do</span>      <span class="token operator">&lt;</span>执行体<span class="token operator">></span>  <span class="token keyword">end</span>  </code></pre><p>var 从 exp1 变化到 exp2，每次变化以 exp3 为步长递增 var，并执行一次 “执行体”。exp3 是可选的，如果不指定，默认为1。</p><p>例：</p><pre class=" language-lua"><code class="language-lua"><span class="token keyword">for</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token keyword">do</span>   <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">end</span></code></pre><p>代表从1开始循环，循环数据到9结束，每次递增2</p><p>其他语言的逻辑应该是<code>for(int i = 0;i &lt;= 9;i ++)</code></p><h3 id="repeat…until">4.4.5 repeat…until</h3><pre class=" language-lua"><code class="language-lua"><span class="token keyword">repeat</span>   statements<span class="token keyword">until</span><span class="token punctuation">(</span> condition <span class="token punctuation">)</span></code></pre><p>这个有点像其他语言的do…while，但条件判断是反过来的，即do…while not</p><h2 id="函数">4.5 函数</h2><p>lua中也可以定义函数，类似于java中的方法。例如：</p><pre class=" language-lua"><code class="language-lua"><span class="token comment" spellcheck="true">--[[ 函数返回两个值的最大值 --]]</span><span class="token keyword">function</span> <span class="token function">max</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>num1 <span class="token operator">></span> num2<span class="token punctuation">)</span> <span class="token keyword">then</span>      result <span class="token operator">=</span> num1<span class="token punctuation">;</span>   <span class="token keyword">else</span>      result <span class="token operator">=</span> num2<span class="token punctuation">;</span>   <span class="token keyword">end</span>   <span class="token keyword">return</span> result<span class="token punctuation">;</span> <span class="token keyword">end</span><span class="token comment" spellcheck="true">-- 调用函数</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"两值比较最大值为 "</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"两值比较最大值为 "</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="表">4.6 表</h2><p>table 是 Lua 的一种数据结构用来帮助我们创建不同的数据类型，如：数组、字典等。就像PHP具有关联数组和索引数组一样（为PHP上一柱香）</p><p>Lua也是通过table来解决模块（module）、包（package）和对象（Object）的。例如string.format表示使用”format”来索引table string。</p><pre class=" language-lua"><code class="language-lua"><span class="token comment" spellcheck="true">-- 初始化表</span>mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">-- 指定值</span>mytable<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">"Lua"</span>mytable<span class="token punctuation">[</span><span class="token string">"Lua"</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">-- 移除引用</span>mytable <span class="token operator">=</span> <span class="token keyword">nil</span><span class="token comment" spellcheck="true">-- lua 垃圾回收会释放内存</span></code></pre><h2 id="模块">4.7 模块</h2><h3 id="定义模块">4.7.1 定义模块</h3><p>模块类似于一个封装库，从 Lua 5.1 开始，Lua 加入了标准的模块管理机制，<strong>可以把一些公用的代码放在一个文件里，以 API 接口的形式在其他地方调用</strong>，有利于代码的重用和降低代码耦合度。</p><p>创建一个文件叫module.lua，在module.lua中创建一个独立的模块，代码如下：</p><pre class=" language-lua"><code class="language-lua"><span class="token comment" spellcheck="true">-- 文件名为 module.lua</span><span class="token comment" spellcheck="true">-- 定义一个名为 module 的模块</span>module <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">-- 定义一个常量</span>module<span class="token punctuation">.</span>constant <span class="token operator">=</span> <span class="token string">"这是一个常量"</span><span class="token comment" spellcheck="true">-- 定义一个函数</span><span class="token keyword">function</span> module<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"这是一个公有函数"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">local</span> <span class="token keyword">function</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"这是一个私有函数！"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">function</span> module<span class="token punctuation">.</span><span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">return</span> module</code></pre><p>（这熟悉感，仿佛看到了ES6的模块）</p><p>上面的 func2 声明为程序块的局部变量，即表示一个私有函数，因此是不能从外部访问模块里的这个私有函数，必须通过模块里的公有函数来调用。</p><h3 id="引用模块">4.7.2 引用模块</h3><p>require 用于 引入其他的模块，类似于java中的类要引用别的类的效果。</p><pre class=" language-lua"><code class="language-lua"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"&lt;模块名>"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 或者</span>require <span class="token string">"&lt;模块名>"</span></code></pre><p>我们可以将上面定义的module模块引入使用,创建一个test_module.lua文件，代码如下：</p><pre class=" language-lua"><code class="language-lua"><span class="token comment" spellcheck="true">-- test_module.lua 文件</span><span class="token comment" spellcheck="true">-- module 模块为上文提到到 module.lua</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"module"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>constant<span class="token punctuation">)</span>module<span class="token punctuation">.</span><span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Lua概述&quot;&gt;1 Lua概述&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;1.1 介绍&lt;/h2&gt;&lt;p&gt;Lua 是一个小巧的&lt;strong&gt;脚本语言&lt;/strong&gt;。它是巴西里约热内卢天主教大学（Pontifical Catholic University of Rio de
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Lua" scheme="https://www.codetool.top/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>leetcode1111-有效括号的嵌套深度</title>
    <link href="https://www.codetool.top/article/leetcode1111-%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7%E7%9A%84%E5%B5%8C%E5%A5%97%E6%B7%B1%E5%BA%A6/"/>
    <id>https://www.codetool.top/article/leetcode1111-有效括号的嵌套深度/</id>
    <published>2020-04-01T02:12:53.000Z</published>
    <updated>2020-04-02T01:53:17.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p><strong>有效括号字符串</strong> 仅由 <code>&quot;(&quot;</code> 和 <code>&quot;)&quot;</code> 构成，并符合下述几个条件之一：</p><ul><li>空字符串</li><li>连接，可以记作 <code>AB</code>（<code>A</code> 与 <code>B</code> 连接），其中 <code>A</code> 和 <code>B</code> 都是有效括号字符串</li><li>嵌套，可以记作 <code>(A)</code>，其中 <code>A</code> 是有效括号字符串</li></ul><p>类似地，我们可以定义任意有效括号字符串 <code>s</code> 的 <strong>嵌套深度</strong> <code>depth(S)</code>：</p><ul><li><code>s</code> 为空时，<code>depth(&quot;&quot;) = 0</code></li><li><code>s</code> 为 <code>A</code> 与 <code>B</code> 连接时，<code>depth(A + B) = max(depth(A), depth(B))</code>，其中 <code>A</code> 和 <code>B</code> 都是有效括号字符串</li><li><code>s</code> 为嵌套情况，<code>depth(&quot;(&quot; + A + &quot;)&quot;) = 1 + depth(A)</code>，其中 A 是有效括号字符串<br>例如：<code>&quot;&quot;</code>，<code>&quot;()()&quot;</code>，和 <code>&quot;()(()())&quot;</code> 都是有效括号字符串，嵌套深度分别为 0，1，2，而 <code>&quot;)(&quot;</code> 和 <code>&quot;(()&quot;</code> 都不是有效括号字符串。</li></ul><p>给你一个有效括号字符串 <code>seq</code>，将其分成两个不相交的子序列 <code>A</code> 和 <code>B</code>，且 <code>A</code> 和 <code>B</code> 满足有效括号字符串的定义（注意：<code>A.length + B.length = seq.length</code>）。</p><p>现在，你需要从中选出 <strong>任意</strong> 一组有效括号字符串 <code>A</code> 和 <code>B</code>，使 <code>max(depth(A), depth(B))</code> 的可能取值最小。</p><p>返回长度为 <code>seq.length</code> 答案数组 <code>answer</code> ，选择 <code>A</code> 还是 <code>B</code> 的编码规则是：如果 <code>seq[i]</code> 是 <code>A</code> 的一部分，那么 <code>answer[i] = 0</code>。否则，<code>answer[i] = 1</code>。即便有多个满足要求的答案存在，你也只需返回 <strong>一个</strong>。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入：</strong> seq = “(()())”<br><strong>输出：</strong> [0,1,1,1,1,0]   </p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入：</strong> seq = “()(())()”<br><strong>输出：</strong> [0,0,0,1,1,0,1,1]  </p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= text.size &lt;= 10000</code></li></ul><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>如果用栈模拟括号匹配，在栈中只存放左括号，当出现右括号的时候，左括号在栈中的下标（用ArrayList模拟栈）即代表了其在原字符串中的嵌套深度，那么要将深度均分，只需要每次出栈的时候将下标为奇偶的括号均分给A和B。</p><p>时间复杂度：<code>O(n)</code>，n为字符串长度。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">maxDepthAfterSplit</span><span class="token punctuation">(</span>String seq<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> seq<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                ans<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span>                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;有效括号字符串&lt;/strong&gt; 仅由 &lt;code&gt;&amp;quot;(&amp;quot;&lt;/code&gt; 和 &lt;code&gt;&amp;quot;)&amp;quot;&lt;/code&gt; 构成，并符合下述几个条件之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空字符
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>写一下近况</title>
    <link href="https://www.codetool.top/article/%E5%86%99%E4%B8%80%E4%B8%8B%E8%BF%91%E5%86%B5/"/>
    <id>https://www.codetool.top/article/写一下近况/</id>
    <published>2020-03-31T14:27:35.000Z</published>
    <updated>2020-04-01T16:20:15.825Z</updated>
    
    <content type="html"><![CDATA[<p>今天已经是三月份的最后一天了，统计显示我这个月已经发了136篇博客，平均每天发表了4篇以上，总体来说还挺满意的。</p><p><img src="https://api.codetool.top/img/15856649563960.png" alt></p><p>这个月的博客基本上是在写一些java高级技术的使用，基础知识写的少一点，下面是按照时间线划分的这个月写过的博客主题的一个列表：</p><ul><li>Redis</li><li>SQL调优</li><li>日志框架</li><li>SpringBoot</li><li>RabbitMQ</li><li>Netty</li><li>Zookeeper+Dubbo</li><li>SpringCloud</li><li>SpringCloud Alibaba</li><li>Lucene</li><li>docker</li></ul><p>最近忙着在做项目，可能每日的更新更新数达不到之前了，不过还是能保证每天至少两篇，一篇leetcode题解，另一篇的主题其实挺难想的，最近已经有点不知道写什么了，不过做项目这段时间可能写的多的还是Java高级技术的一些使用。再往后可能就会尽量多写一些基础知识，比如计算机相关的，还有源码研究啥的，也很久没更新过了，我还得边复习，好多东西学了又忘，复习的东西也不可能写成博客再发表一次。</p><p>然后，谈谈新冠病毒疫情吧，这东西真的见证历史，今天全球病例数达到80万了，这数字真挺可怕的。不久前宣布东京奥运会延期到2021，然后今天教育部宣布高考延期一个月，真的是出生以来第一次见高考延期，要是秋招能延期一个月该多好啊😂。</p><p>秋招越来越近了，希望自己能扛住压，不要辜负这段时间的努力。</p><p>加油(ง •_•)ง</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天已经是三月份的最后一天了，统计显示我这个月已经发了136篇博客，平均每天发表了4篇以上，总体来说还挺满意的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://api.codetool.top/img/15856649563960.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;这个
      
    
    </summary>
    
    
      <category term="日常/随笔" scheme="https://www.codetool.top/categories/%E6%97%A5%E5%B8%B8-%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="日常" scheme="https://www.codetool.top/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>分布式文件系统FastDFS的了解及Java客户端使用</title>
    <link href="https://www.codetool.top/article/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FFastDFS%E7%9A%84%E4%BA%86%E8%A7%A3%E5%8F%8AJava%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.codetool.top/article/分布式文件系统FastDFS的了解及Java客户端使用/</id>
    <published>2020-03-31T07:38:50.000Z</published>
    <updated>2020-03-31T08:16:27.457Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考于： <a href="https://github.com/tobato/FastDFS_Client" target="_blank" rel="noopener">https://github.com/tobato/FastDFS_Client</a></p><h1 id="FastDFS概述">1 FastDFS概述</h1><p>FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。</p><p>FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p><ul><li>FastDFS是一个轻量级的开源分布式文件系统</li><li>FastDFS主要解决了大容量的文件存储和高并发访问的问题，文件存取时实现了负载均衡</li><li>FastDFS实现了软件方式的RAID，可以使用廉价的IDE硬盘进行存储</li><li>支持存储服务器在线扩容</li><li>支持相同内容的文件只保存一份，节约磁盘空间</li><li>FastDFS只能通过Client API访问，不支持POSIX访问方式</li><li>FastDFS特别适合大中型网站使用，用来存储资源文件（如：图片、文档、音频、视频等等）</li></ul><h2 id="FastDFS架构">1.1 FastDFS架构</h2><p>FastDFS 服务端架构包括 Tracker server 和 Storage server。客户端请求 Tracker server 进行文件上传、下载，通过Tracker server 调度最终由 Storage server 完成文件上传和下载。</p><p>Tracker server 作用是负载均衡和调度，通过 Tracker server 在文件上传时可以根据一些策略找到Storage server 提供文件上传服务。可以将 tracker 称为追踪服务器或调度服务器。</p><p>Storage server 作用是文件存储，客户端上传的文件最终存储在 Storage 服务器上，Storageserver 没有实现自己的文件系统而是利用操作系统的文件系统来管理文件。可以将storage称为存储服务器。同一个组的storage server之间会进行文件的同步，通过数据冗余以做到高可用。</p><p><img src="https://api.codetool.top/img/15855759407947.png" alt></p><h1 id="上传流程">2 上传流程</h1><ul><li>client询问tracker可以上传到哪一个storage,或者指定获取某个组的storage</li><li>tracker返回一台可用的storage</li><li>client直接和storage通讯完成文件上传</li><li>storage保存文件以后给client返回组名(volume)和文件名称</li></ul><p>客户端上传文件后存储服务器将文件 ID 返回给客户端，此文件 ID 用于以后访问该文件的索引信息。文件索引信息包括：组名，虚拟磁盘路径，数据两级目录，文件名。</p><p>例：</p><pre><code>group1/M00/02/44/wKgDrE34E8wAAAAAAAAGkEIYJK42378.sh</code></pre><p>组名：<code>group1</code>，文件上传后所在的 storage 组名称，在文件上传成功后由 storage 服务器返回，需要客户端自行保存。</p><p>虚拟磁盘路径：<code>M00</code>，storage 配置的虚拟路径，与磁盘选项<code>store_path*</code>对应。如果配置了<code>store_path0</code> 则是 M00，如果配置了 store_path1 则是 M01，以此类推。</p><p>配置文件位置：<code>/etc/fdfs/storage.conf</code></p><p>数据两级目录：<code>/02/44</code>，storage 服务器<strong>在每个虚拟磁盘路径下创建的两级目录，用于存储数据文件</strong>。</p><p>文件名：<code>wKgDrE34E8wAAAAAAAAGkEIYJK42378.sh</code>，与文件上传时不同。是由存储服务器根据特定信息生成，文件名包含：源存储服务器 IP 地址、文件创建时间戳、文件大小、随机数和文件拓展名等信息。</p><p>这个例子中就代表了文件存储于group1的storage server中<code>/data/fast_data/data/00/00/</code>目录下</p><h1 id="docker运行fastDFS">3 docker运行fastDFS</h1><p>拉取镜像</p><pre><code>docker pull morunchang/fastdfs</code></pre><p>运行tracker</p><pre><code>docker run -d --name fastdfs-tracker --net=host morunchang/fastdfs sh tracker.sh</code></pre><p>运行storage</p><pre><code>docker run -d --name fastdfs-storage --net=host -e TRACKER_IP=192.168.176.129:22122 -e GROUP_NAME=group1 morunchang/fastdfs sh storage.sh</code></pre><ul><li>使用的网络模式是–net=host, 192.168.176.129是宿主机的IP</li><li>group1是组名，即storage的组</li><li>如果想要增加新的storage服务器，再次运行该命令，注意更换新组名</li></ul><p>设置开机启动</p><pre><code>docker update --restart=always fastdfs-trackerdocker update --restart=always fastdfs-storage</code></pre><h1 id="fastDFS-client使用">4 fastDFS-client使用</h1><p>我使用的是一个最近还在维护的第三方客户端，个人觉得封装得挺好的，很多操作都简化了。（最好搭配SpringBoot使用）</p><p>github地址： <a href="https://github.com/tobato/FastDFS_Client" target="_blank" rel="noopener">https://github.com/tobato/FastDFS_Client</a></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/com.github.tobato/fastdfs-client --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.tobato<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastdfs-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.27.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>然后直接引入配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">fdfs</span><span class="token punctuation">:</span>  <span class="token key atrule">so-timeout</span><span class="token punctuation">:</span> <span class="token number">1500          </span><span class="token comment" spellcheck="true"># 读取超时时间</span>  <span class="token key atrule">connect-timeout</span><span class="token punctuation">:</span> <span class="token number">600      </span><span class="token comment" spellcheck="true"># 连接超时时间</span>  <span class="token key atrule">thumb-image</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true"># 缩略图生成参数</span>    <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">150</span>    <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">150</span>  <span class="token key atrule">tracker-list</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#TrackerList参数,支持多个</span>    <span class="token punctuation">-</span> 192.168.176.129<span class="token punctuation">:</span><span class="token number">22122</span>  <span class="token comment" spellcheck="true"># 这个是自定义配置项</span>  <span class="token key atrule">nginx-url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//192.168.176.129<span class="token punctuation">:</span><span class="token number">8080</span></code></pre><p>就可以使用了</p><p>例，文件上传：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> FastFileStorageClient storageClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${fdfs.nginx-url}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String trackerUrl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 上传文件，返回资源url     * @param file     * @return     */</span>    <span class="token keyword">public</span> String <span class="token function">upload</span><span class="token punctuation">(</span>FastFile file<span class="token punctuation">)</span><span class="token punctuation">{</span>        StorePath storePath <span class="token operator">=</span> storageClient<span class="token punctuation">.</span><span class="token function">uploadFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> trackerUrl<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>storePath<span class="token punctuation">.</span><span class="token function">getFullPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getTrackerUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> trackerUrl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    FileService fileService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 文件上传     * @param file     * @return 资源url     * @throws Exception     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/upload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> MultipartFile file<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取后缀名</span>        String suffix <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>MetaData<span class="token operator">></span> metaDataSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//附带文件名元信息上传</span>        metaDataSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MetaData</span><span class="token punctuation">(</span><span class="token string">"originName"</span><span class="token punctuation">,</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FastFile fastFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastFile</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>file<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>suffix<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//文件上传</span>        String path <span class="token operator">=</span> fileService<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span>fastFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> StatusCode<span class="token punctuation">.</span>OK<span class="token punctuation">,</span><span class="token string">"文件上传成功！"</span><span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://api.codetool.top/img/1585641988416.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文参考于： &lt;a href=&quot;https://github.com/tobato/FastDFS_Client&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/tobato/FastDFS_Client&lt;/a&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="项目/编程理论" scheme="https://www.codetool.top/categories/%E9%A1%B9%E7%9B%AE-%E7%BC%96%E7%A8%8B%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="分布式" scheme="https://www.codetool.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="FastDFS" scheme="https://www.codetool.top/tags/FastDFS/"/>
    
  </entry>
  
  <entry>
    <title>leetcode912-排序数组</title>
    <link href="https://www.codetool.top/article/leetcode912-%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <id>https://www.codetool.top/article/leetcode912-排序数组/</id>
    <published>2020-03-31T01:24:36.000Z</published>
    <updated>2020-03-31T01:35:03.065Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定一个整数数组 <code>nums</code>，将该数组升序排列。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入：</strong> [5,2,3,1]<br><strong>输出：</strong> [1,2,3,5]  </p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入：</strong> [5,1,1,2,0,0]<br><strong>输出：</strong> [0,0,1,1,2,5]  </p></blockquote><p><strong>提示：</strong></p><ol><li><code>1 &lt;= A.length &lt;= 10000</code></li><li><code>-50000 &lt;= A[i] &lt;= 50000</code></li></ol><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>经典排序问题，解法见<a href="../十大排序算法与Java实现">十大排序算法与Java实现</a></p><h2 id="代码">2.2 代码</h2><p>计数排序：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> occur <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">100001</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token operator">:</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>            occur<span class="token punctuation">[</span>num<span class="token operator">+</span><span class="token number">50000</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100001</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>occur<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> n <span class="token operator">&lt;</span> occur<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">-</span><span class="token number">50000</span><span class="token punctuation">;</span>                    index<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>快速排序，这里每次选取中轴元素都是选取的第一个元素：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取中轴元素所处的位置</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//进行分割</span>            arr <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            arr <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//选取中轴元素</span>        <span class="token keyword">int</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 向右找到第一个小于等于 pivot 的元素位置</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 向左找到第一个大于等于 pivot 的元素位置</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> pivot <span class="token punctuation">)</span> j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> j<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//交换两个元素的位置，使得左边的元素不大于pivot,右边的不小于pivot</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使中轴元素处于有序的位置</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> pivot<span class="token punctuation">;</span>        <span class="token keyword">return</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定一个整数数组 &lt;code&gt;nums&lt;/code&gt;，将该数组升序排列。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt; [5,2,3,1
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>国人开发的Mybatis小工具-通用Mapper和PageHelper</title>
    <link href="https://www.codetool.top/article/%E5%9B%BD%E4%BA%BA%E5%BC%80%E5%8F%91%E7%9A%84Mybatis%E5%B0%8F%E5%B7%A5%E5%85%B7-%E9%80%9A%E7%94%A8Mapper%E5%92%8CPageHelper/"/>
    <id>https://www.codetool.top/article/国人开发的Mybatis小工具-通用Mapper和PageHelper/</id>
    <published>2020-03-30T11:07:39.000Z</published>
    <updated>2020-03-30T11:16:34.607Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通用Mapper">1 通用Mapper</h1><p>通用Mapper与Pagehelper是一位国内大神写的简化Mybatis开发的两项技术，通用Mapper配合ORM映射注解可以做到不写sql语句和mapper方法，而Pagehelper可以简化分页操作。</p><p>作者的github： <a href="https://github.com/abel533" target="_blank" rel="noopener">https://github.com/abel533</a></p><p>作者的博客： <a href="https://blog.csdn.net/isea533" target="_blank" rel="noopener">https://blog.csdn.net/isea533</a></p><p>本文参考于作者提供的使用文档。</p><h2 id="使用">1.1 使用</h2><p>依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 通用mapper --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>tk.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mapper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Mybatis-starter --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- JPA注解 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.persistence<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>persistence-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>compile<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ul><li>为所有的mapper接口添加<code>@Mapper</code>注解</li><li>配置类添加<code>@MapperScan</code>注解</li></ul><p>例如：直接在启动类上标注Mapper扫描包</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.rhett.dao"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GoodsApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>GoodsApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="ORM映射注解">1.2 ORM映射注解</h2><p>通用 Mapper 使用一部分 JPA 注解和自己提供的注解来实现对象关系映射</p><h3 id="Id">1.2.1 Id</h3><p>最简单的情况下，只需要一个 <code>@Id</code> 标记字段为主键即可。数据库中的字段名和实体类的字段名是完全相同的，这中情况下实体和表可以直接映射。</p><p>假设有一数据库表：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>country<span class="token punctuation">`</span> <span class="token punctuation">(</span>  <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>countryname<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'名称'</span><span class="token punctuation">,</span>  <span class="token punctuation">`</span>countrycode<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'代码'</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>Id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">10011</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'国家信息'</span><span class="token punctuation">;</span></code></pre><p>对应java实体类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Country</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Id</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String  countryname<span class="token punctuation">;</span>    <span class="token keyword">private</span> String  countrycode<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//省略 getter 和 setter</span><span class="token punctuation">}</span></code></pre><h3 id="NameStyle">1.2.2 NameStyle</h3><p><code>@NameStyle</code>在类上进行配置，表示字段名的映射风格，它的取值在<code>Style</code>中枚举，共有：</p><ul><li><code>normal</code>        原值</li><li><code>camelhump</code>     驼峰转下划线</li><li><code>uppercase</code>       转换为大写</li><li><code>lowercase</code>       转换为小写</li><li><code>camelhumpAndUppercase</code>   驼峰转下划线大写形式</li><li><code>camelhumpAndLowercase</code>   驼峰转下划线小写形式</li></ul><p>例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@NameStyle</span><span class="token punctuation">(</span>Style<span class="token punctuation">.</span>camelhumpAndUppercase<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Country</span></code></pre><h3 id="Table">1.2.3 Table</h3><p>指定对应的表名，没配置时按类名自动转换</p><p>例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Table</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"sys_user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span></code></pre><h3 id="Column">1.2.4 Column</h3><p>指定对应的字段映射名，没配置时默认和字段名相同</p><p>例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Column</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"user_name"</span><span class="token punctuation">)</span><span class="token keyword">private</span> String name<span class="token punctuation">;</span></code></pre><h3 id="Transient">1.2.5 Transient</h3><p>一般情况下，实体中的字段和数据库表中的字段是一一对应的，但是也有很多情况我们会在实体中增加一些额外的属性，这种情况下，就需要使用 <code>@Transient</code> 注解来告诉通用 Mapper 这不是表中的字段。</p><p>默认情况下，只有简单类型会被自动认为是表中的字段。</p><blockquote><p>这里的简单类型不包含 Java 中的8种基本类型：</p><p>byte,short,int,long,float,double,char,boolean</p><p>这是因为在类中，基本类型会有默认值，而 <strong>MyBatis 中经常会需要判断属性值是否为空，所以不要在类中使用基本类型，否则会遇到莫名其妙的错误。</strong></p></blockquote><p>对于类中的复杂对象，以及 Map,List 等属性不需要配置这个注解。</p><h2 id="使用Mapper">1.3 使用Mapper</h2><p>则先写一个Mapper接口，要继承<code>tk.mybatis.mapper.common.Mapper</code>，该类有很多代表数据库操作的方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> tk<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>common<span class="token punctuation">.</span>Mapper<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CountryMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token operator">&lt;</span>Country<span class="token operator">></span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>从 MyBatis 中获取该接口后就可以直接使用：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//从 MyBatis 或者 Spring 中获取 countryMapper，然后调用 selectAll 方法</span>List<span class="token operator">&lt;</span>Country<span class="token operator">></span> countries <span class="token operator">=</span> countryMapper<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//根据主键查询</span>Country country <span class="token operator">=</span> countryMapper<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//或者使用对象传参，适用于1个字段或者多个字段联合主键使用</span>Country query <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Country</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>query<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>country <span class="token operator">=</span> countryMapper<span class="token punctuation">.</span><span class="token function">selectByPrimaryKey</span><span class="token punctuation">(</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="自定义方法实现">1.4 自定义方法实现</h2><p>如果想要增加自己写的方法，可以直接在 CountryMapper 中增加。</p><h3 id="纯接口注解方式">1.4.1 纯接口注解方式</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>Select<span class="token punctuation">;</span><span class="token keyword">import</span> tk<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>common<span class="token punctuation">.</span>Mapper<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CountryMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token operator">&lt;</span>Country<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from country where countryname = #{countryname}"</span><span class="token punctuation">)</span>    Country <span class="token function">selectByCountryName</span><span class="token punctuation">(</span>String countryname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="如果使用-XML-方式，需要提供接口对应的-XML-文件">1.4.2 如果使用 XML 方式，需要提供接口对应的 XML 文件</h3><p>例如提供了 CountryMapper.xml 文件，内容如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tk.mybatis.sample.mapper.CountryMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>selectByCountryName<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tk.mybatis.model.Country<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from country where countryname = #{countryname}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><p>在接口中添加对应的方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> tk<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>mapper<span class="token punctuation">.</span>common<span class="token punctuation">.</span>Mapper<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CountryMapper</span> <span class="token keyword">extends</span> <span class="token class-name">Mapper</span><span class="token operator">&lt;</span>Country<span class="token operator">></span> <span class="token punctuation">{</span>    Country <span class="token function">selectByCountryName</span><span class="token punctuation">(</span>String countryname<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在接口中添加其他方法的时候和只用 MyBatis 是完全一样的，但是需要注意，<strong>在对应的 XML 中，不能出现和继承接口中同名的方法！</strong></p><h1 id="PageHelper">2 PageHelper</h1><h2 id="介绍">2.1 介绍</h2><p>PageHelper是基于Mybatis的插件机制开发的，Mybatis支持编写<strong>拦截器</strong>，在Mybatis的底层方法中进行拦截，如打印执行的SQL语句日志，做一些权限控制，分页等功能。</p><p>PageHelper就是通过拦截了Mybatis中Executor的query方法的执行，来实现查询时分页逻辑的添加。</p><p>拦截器部分源码：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Intercepts</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>type <span class="token operator">=</span> Executor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token punctuation">{</span>MappedStatement<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> RowBounds<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> ResultHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token annotation punctuation">@Signature</span><span class="token punctuation">(</span>type <span class="token operator">=</span> Executor<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token string">"query"</span><span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token punctuation">{</span>MappedStatement<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> RowBounds<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> ResultHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> CacheKey<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> BoundSql<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PageInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">Interceptor</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> Dialect dialect<span class="token punctuation">;</span>    <span class="token keyword">private</span> String countSuffix <span class="token operator">=</span> <span class="token string">"_COUNT"</span><span class="token punctuation">;</span>    <span class="token keyword">protected</span> Cache<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> MappedStatement<span class="token operator">></span> msCountMap <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> String default_dialect_class <span class="token operator">=</span> <span class="token string">"com.github.pagehelper.PageHelper"</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Invocation invocation<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token punctuation">}</span></code></pre><h2 id="PageHelper的使用">2.2 PageHelper的使用</h2><p>引入依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>使用：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//第一个参数为页数，第二个参数为单页的条数</span><span class="token comment" spellcheck="true">//第三个参数这里是根据stu_id降序排序</span>PageHelper<span class="token punctuation">.</span><span class="token function">startPage</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"stu_id desc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在startPage后面紧跟一个查询集合方法</span>List<span class="token operator">&lt;</span>Student<span class="token operator">></span> list <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;通用Mapper&quot;&gt;1 通用Mapper&lt;/h1&gt;&lt;p&gt;通用Mapper与Pagehelper是一位国内大神写的简化Mybatis开发的两项技术，通用Mapper配合ORM映射注解可以做到不写sql语句和mapper方法，而Pagehelper可以简化分页操作。&lt;
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Mybatis" scheme="https://www.codetool.top/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer62-圆圈中最后剩下的数字</title>
    <link href="https://www.codetool.top/article/%E5%89%91%E6%8C%87offer62-%E5%9C%86%E5%9C%88%E4%B8%AD%E6%9C%80%E5%90%8E%E5%89%A9%E4%B8%8B%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>https://www.codetool.top/article/剑指offer62-圆圈中最后剩下的数字/</id>
    <published>2020-03-30T01:54:24.000Z</published>
    <updated>2020-03-30T01:58:59.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题（来源Leetcode）">1 原题（来源Leetcode）</h1><p>0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。</p><p>例如，0、1、2、3、4这5个数字组成一个圆圈，从数字0开始每次删除第3个数字，则删除的前4个数字依次是2、0、4、1，因此最后剩下的数字是3。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> n = 5, m = 3<br><strong>输出:</strong> 3  </p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> n = 10, m = 17<br><strong>输出:</strong> 2</p></blockquote><p><strong>限制：</strong></p><ul><li><code>1 &lt;= n &lt;= 10^5</code></li><li><code>1 &lt;= m &lt;= 10^6</code></li></ul><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>约瑟夫问题，leetcode上面只能用数学解法，否则会超时。</p><p>解法参考：</p><p><a href="https://leetcode-cn.com/problems/yuan-quan-zhong-zui-hou-sheng-xia-de-shu-zi-lcof/solution/chi-jing-stsu-degd-degtsu-tu-jie-yue-se-fu-huan-hu/" target="_blank" rel="noopener">图解约瑟夫环，还送《具体数学》PDF 🐳吃鲸 Σ(っ °Д °;)っ  - 圆圈中最后剩下的数字 - 力扣（LeetCode）</a></p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>m <span class="token operator">+</span> x<span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastRemaining</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题（来源Leetcode）&quot;&gt;1 原题（来源Leetcode）&lt;/h1&gt;&lt;p&gt;0,1,,n-1这n个数字排成一个圆圈，从数字0开始，每次从这个圆圈里删除第m个数字。求出这个圆圈里剩下的最后一个数字。&lt;/p&gt;
&lt;p&gt;例如，0、1、2、3、4这5个数字组成一个圆圈，
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="https://www.codetool.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>docker-compose使用和docker私有仓库搭建</title>
    <link href="https://www.codetool.top/article/docker-compose%E4%BD%BF%E7%94%A8%E5%92%8Cdocker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E6%90%AD%E5%BB%BA/"/>
    <id>https://www.codetool.top/article/docker-compose使用和docker私有仓库搭建/</id>
    <published>2020-03-29T14:11:31.000Z</published>
    <updated>2020-03-29T14:12:22.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker-compose">1 docker-compose</h1><h2 id="介绍与安装">1.1 介绍与安装</h2><p>微服务架构的应用系统中一般包含若干个微服务，每个微服务一般都会部署多个实例，如果每个微服务都要手动启停，维护的工作量会很大。</p><p>Docker Compose是一个编排多容器分布式部署的工具，提供命令集管理容器化应用的完整开发周期，包括服务构建，启动和停止。使用步骤：</p><ol><li>利用 Dockerfile 定义运行环境镜像</li><li>使用 <code>docker-compose.yml</code> 定义组成应用的各服务</li><li>运行 <code>docker-compose up</code> 启动应用</li></ol><p>下载： <a href="https://github.com/docker/compose/releases/" target="_blank" rel="noopener">https://github.com/docker/compose/releases/</a></p><p>这里选择1.25.4版本下载，下载下来的就是一个可执行文件，赋予执行权限，可以将其移动到<code>/usr/bin</code>目录下：</p><pre><code>wget https://github.com/docker/compose/releases/download/1.25.4/docker-compose-Linux-x86_64chmod +x docker-compose-Linux-x86_64mv docker-compose-Linux-x86_64 /usr/bin/docker-compose</code></pre><p>查看版本</p><pre><code>docker-compose -version</code></pre><h2 id="使用">1.2 使用</h2><p>创建一个<code>docker-compose</code>目录用于测试</p><pre><code>mkdir ~/docker-composecd ~/docker-compose</code></pre><p>编写 docker-compose.yml 文件：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3'</span><span class="token key atrule">services</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 代表要启动的容器</span>    <span class="token key atrule">nginx</span><span class="token punctuation">:</span>        <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx        <span class="token key atrule">ports</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token datetime number">80:80</span>        <span class="token key atrule">links</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> app        <span class="token key atrule">volumes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> ./nginx/conf.d<span class="token punctuation">:</span>/etc/nginx/conf.d    <span class="token key atrule">app</span><span class="token punctuation">:</span>        <span class="token key atrule">image</span><span class="token punctuation">:</span> app        <span class="token key atrule">expose</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> <span class="token string">"8080"</span></code></pre><p>执行命令</p><pre><code>docker-compose up</code></pre><p>即可运行。</p><h1 id="docker私有仓库">2 docker私有仓库</h1><p>Docker官方的Docker hub（<a href="https://hub.docker.com）是一个用于管理公共镜像的仓库，我们可以从上面拉取镜像" target="_blank" rel="noopener">https://hub.docker.com）是一个用于管理公共镜像的仓库，我们可以从上面拉取镜像</a> 到本地，也可以把我们自己的镜像推送上去。但是，有时候我们的服务器无法访问互联网，或者你不希望将自己的镜像放到公网当中，那么我们就需要搭建自己的私有仓库来存储和管理自己的镜像。</p><h2 id="私有仓库搭建">2.1 私有仓库搭建</h2><pre class=" language-shell"><code class="language-shell"># 1、拉取私有仓库镜像 docker pull registry# 2、启动私有仓库容器 docker run -id --name=registry -p 5000:5000 registry</code></pre><p>打开浏览器 输入地址 http://私有仓库服务器ip:5000/v2/_catalog ，看到<code>{&quot;repositories&quot;:[]}</code> 表示私有仓库 搭建成功</p><p>3、修改daemon.json   </p><pre><code>vim /etc/docker/daemon.json </code></pre><p>在上述文件中添加一个key，保存退出。此步用于让 docker 信任私有仓库地址；注意将私有仓库服务器ip修改为自己私有仓库服务器真实ip </p><pre><code>{&quot;insecure-registries&quot;:[&quot;私有仓库服务器ip:5000&quot;]} </code></pre><p>4、重启docker 服务 </p><pre><code>systemctl restart dockerdocker start registry</code></pre><h2 id="将镜像上传至私有仓库">2.2 将镜像上传至私有仓库</h2><pre class=" language-shell"><code class="language-shell"># 1、标记镜像为私有仓库的镜像     docker tag centos:7 私有仓库服务器IP:5000/centos:7# 2、上传标记的镜像     docker push 私有仓库服务器IP:5000/centos:7</code></pre><h2 id="从私有仓库拉取镜像">2.3 从私有仓库拉取镜像</h2><pre class=" language-shell"><code class="language-shell"># 拉取镜像 docker pull 私有仓库服务器ip:5000/centos:7</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;docker-compose&quot;&gt;1 docker-compose&lt;/h1&gt;&lt;h2 id=&quot;介绍与安装&quot;&gt;1.1 介绍与安装&lt;/h2&gt;&lt;p&gt;微服务架构的应用系统中一般包含若干个微服务，每个微服务一般都会部署多个实例，如果每个微服务都要手动启停，维护的工作量会很大。&lt;
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="docker" scheme="https://www.codetool.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker镜像原理与dockerfile</title>
    <link href="https://www.codetool.top/article/docker%E9%95%9C%E5%83%8F%E5%8E%9F%E7%90%86%E4%B8%8Edockerfile/"/>
    <id>https://www.codetool.top/article/docker镜像原理与dockerfile/</id>
    <published>2020-03-29T10:20:24.000Z</published>
    <updated>2020-03-29T14:12:24.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-镜像本质是什么？">1 Docker 镜像本质是什么？</h1><p>是一个分层文件系统</p><p><strong>统一文件系统</strong>（Union File System）技术能够将不同的层整合成一个文件系统，为这些层提供了一个统一的视角，这样就隐藏了多层的存在，在用户的角度看来，只存在一个文件系统。 </p><p>一个镜像可以放在另一个镜像的上面。位于下面的镜像称为父镜像，最底部的镜像成为基础镜像。</p><p>当从一个镜像启动容器时，Docker会在最顶层加载一个读写文件系统作为容器</p><h1 id="Docker-中一个centos镜像为什么只有200MB，而一个centos操作系统的iso文件要几个个G？">2 Docker 中一个centos镜像为什么只有200MB，而一个centos操作系统的iso文件要几个个G？</h1><p>Docker镜像是由特殊的文件系统叠加而成，<br>最底端是 <code>bootfs</code>，并使用宿主机的 <code>bootfs</code>。</p><p>第二层是root文件系统<code>rootfs</code>,称为<code>base image</code><br>然后再往上可以叠加其他的镜像文件</p><p><img src="https://api.codetool.top/img/15854771588983.png" alt></p><p>Centos的iso镜像文件包含<code>bootfs</code>和<code>rootfs</code>，而docker的centos镜像复用操作系统的<code>bootfs</code>，只有<code>rootfs</code>和其他镜像层</p><p>Docker 中一个tomcat镜像为什么有500MB，而一个tomcat安装包只有70多MB？</p><p>由于docker中镜像是分层的，tomcat虽然只有70多MB，但他需要依赖于父镜像和基础镜像，所有整个对外暴露的tomcat镜像大小500多MB</p><p>使用<code>docker inspect 镜像名</code>也可以看到<code>layers</code>，即分层镜像。</p><h1 id="dockerfile">3 dockerfile</h1><p>容器转成镜像：</p><pre><code>docker commit 容器id 镜像名称:版本号</code></pre><p>压缩和解压：</p><pre><code>docker save -o 压缩文件名称 镜像名称:版本号docker load -i 压缩文件名称</code></pre><p>除此之外，可以用dockerfile来制作镜像。</p><h2 id="语法">3.1 语法</h2><h3 id="FROM-amp-RUN-amp-USER">3.1.1 FROM &amp; RUN &amp; USER</h3><pre class=" language-dockerfile"><code class="language-dockerfile">From debian:wheezyUSER cowsayRun apt-get update && apt-get install -y cowsay fortune</code></pre><p><code>FROM</code>指令指定初始镜像，这里使用debian，并且指定了wheezy版本</p><p><code>USER</code>指定build或启动的时候，run cmd entrypoint执行时使用的用户。</p><p><code>RUN</code>用于执行指令</p><h3 id="ENTRYPOINT">3.1.2 ENTRYPOINT</h3><pre class=" language-dockerfile"><code class="language-dockerfile">ENTRYPOINT ["/usr/games/cowsay"]</code></pre><p>ENTRYPOINT指定一个可执行文件，传给docker run作参数，一般在制作一些执行就关闭的容器中会使用。</p><h3 id="COPY-amp-ADD">3.1.3 COPY &amp; ADD</h3><pre class=" language-dockerfile"><code class="language-dockerfile">COPY entrypoint.sh /ADD entrypoint.sh /</code></pre><p>把一个文件从主机（可使用dockerfile所在路径的相对路径）复制到镜像的文件系统。COPY指令和ADD指令的唯一区别在于是否支持从远程URL获取资源。COPY指令只能从执行docker build所在的主机上读取资源并复制到镜像中。而ADD指令还支持通过URL从远程服务器读取资源并复制到镜像中。</p><h3 id="ENV-amp-ARG">3.1.4 ENV &amp; ARG</h3><pre class=" language-dockerfile"><code class="language-dockerfile">ENV NGINX_VERSION   1.17.9</code></pre><p>指定环境变量</p><pre class=" language-dockerfile"><code class="language-dockerfile">ARG some_variable_name=default_valueRUN echo "Oh dang look at that $some_variable_name"</code></pre><p>可以用来作为构建的参数（当然也可以使用环境变量）。</p><h3 id="MAINTAINER-amp-LABEL">3.1.5 MAINTAINER &amp; LABEL</h3><pre class=" language-dockerfile"><code class="language-dockerfile">MAINTAINER John Smith <john@smith.com>LABEL maintainer="John Smith <john@smith.com>"</code></pre><p><code>MAINTAINER</code>设定作者的联系信息，可以使用<code>LABEL</code>代替，LABEL设置的属性最终可以在docker image的基本属性中查看</p><h3 id="EXPOSE">3.1.6 EXPOSE</h3><pre class=" language-dockerfile"><code class="language-dockerfile">EXPOSE 80</code></pre><p>暴露端口</p><h3 id="VOLUME-amp-WORKDIR">3.1.7 VOLUME &amp; WORKDIR</h3><pre class=" language-dockerfile"><code class="language-dockerfile">VOLUME /dataWORKDIR /data</code></pre><p><code>VOLUME</code>定义外部可以挂载的数据卷，<code>WORKDIR</code>指定工作目录，如果没有自动创建</p><h3 id="CMD">3.1.8 CMD</h3><p>第一种用法：</p><pre class=" language-dockerfile"><code class="language-dockerfile">CMD java -jar app.jar</code></pre><p>运行一个可执行的文件并提供参数。</p><p>第二种用法：为ENTRYPOINT指定参数。</p><p>第三种用法：</p><pre class=" language-dockerfile"><code class="language-dockerfile">CMD["/bin/bash"]</code></pre><p>设置启动容器默认打开的终端</p><h2 id="使用Dockerfile创建镜像">3.2 使用Dockerfile创建镜像</h2><pre><code>docker build -f ./centos_dockerfile -t vim_centos:1 .</code></pre><p><code>-f Dockerfile</code>指定dockerfile的位置</p><p><code>-t image_name:tag</code>指定镜像的名字及标签</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker-镜像本质是什么？&quot;&gt;1 Docker 镜像本质是什么？&lt;/h1&gt;&lt;p&gt;是一个分层文件系统&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;统一文件系统&lt;/strong&gt;（Union File System）技术能够将不同的层整合成一个文件系统，为这些层提供了一个统一的
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="docker" scheme="https://www.codetool.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>常用软件的docker部署</title>
    <link href="https://www.codetool.top/article/%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E7%9A%84docker%E9%83%A8%E7%BD%B2/"/>
    <id>https://www.codetool.top/article/常用软件的docker部署/</id>
    <published>2020-03-29T06:07:45.000Z</published>
    <updated>2020-03-29T06:15:44.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="docker端口映射">1 docker端口映射</h1><ul><li>容器内的网络服务和外部机器不能直接通信</li><li>外部机器和宿主机可以直接通信</li><li>宿主机和容器可以直接通信</li></ul><p>当容器中的网络服务需要被外部机器访问时，可以将容器中提供服务的端口映射到宿主机的端口上。外部机器访问宿主机的该端口，从而间接访问容器的服务。这种操作称为：端口映射</p><h1 id="Mysql部署">2 Mysql部署</h1><ol><li>搜索mysql镜像</li></ol><pre><code>docker search mysql</code></pre><ol start="2"><li>拉取mysql镜像</li></ol><pre><code>docker pull mysql:5.7</code></pre><ol start="3"><li>创建容器，设置端口映射、目录映射</li></ol><pre class=" language-shell"><code class="language-shell"># 在/root目录下创建mysql目录用于存储mysql数据信息mkdir ~/mysqlcd ~/mysqldocker run -id \-p 3306:3306 \--name=c_mysql \-v $PWD/conf:/etc/mysql/conf.d \-v $PWD/logs:/logs \-v $PWD/data:/var/lib/mysql \-e MYSQL_ROOT_PASSWORD=123456 \mysql:5.7</code></pre><p>参数说明：</p><ul><li><code>-p 3306:3306</code>：将容器的 3306 端口映射到宿主机的 3306 端口。前一个3306是宿主机的端口。</li><li><code>-v $PWD/conf:/etc/mysql/conf.d</code>：将主机当前目录下的 conf/my.cnf 挂载到容器的 /etc/mysql/my.cnf。配置目录</li><li><code>-v $PWD/logs:/logs</code>：将主机当前目录下的 logs 目录挂载到容器的 /logs。日志目录</li><li><code>-v $PWD/data:/var/lib/mysql</code>：将主机当前目录下的data目录挂载到容器的 /var/lib/mysql 。数据目录</li><li><code>-e MYSQL_ROOT_PASSWORD=123456</code>：初始化 root 用户的密码。</li></ul><p>【注】如果提示<code>[Warning] IPv4 forwarding is disabled. Networking will not work.</code>：</p><p>在docker的宿主机中更改文件：</p><pre><code>vim /usr/lib/sysctl.d/00-system.conf</code></pre><p>在文件末尾添加<code>net.ipv4.ip_forward=1</code></p><p>重新启动network服务：<code>systemctl restart network</code></p><ol start="4"><li>进入容器环境</li></ol><pre><code>docker exec -it c_mysql /bin/bash</code></pre><h1 id="Nginx部署">3 Nginx部署</h1><pre><code>docker pull nginx</code></pre><p>下面这个步骤是把nginx.conf文件复制出来：</p><pre><code>mkdir ~/nginxcd ~/nginxmkdir confdocker run -id --name=c_nginx -p 80:80 nginxdocker cp c_nginx:/etc/nginx/nginx.conf ~/nginx/confdocker stop c_nginxdocker rm c_nginx</code></pre><p>重新生成容器，并绑定数据卷：</p><pre><code>docker run -id --name=c_nginx \-p 80:80 \-v $PWD/conf/nginx.conf:/etc/nginx/nginx.conf \-v $PWD/logs:/var/log/nginx \-v $PWD/html:/usr/share/nginx/html \nginx</code></pre><p>在<code>html/</code>下新建index.html：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>hello docker nginx！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>保存并退出，访问宿主机的80端口，可以看见网站成功响应</p><p><img src="https://api.codetool.top/img/15854600337280.png" alt></p><h1 id="redis部署">4 redis部署</h1><pre><code>docker pull redis:5.0docker run -id --name=c_redis -p 6379:6379 redis:5.0</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;docker端口映射&quot;&gt;1 docker端口映射&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;容器内的网络服务和外部机器不能直接通信&lt;/li&gt;
&lt;li&gt;外部机器和宿主机可以直接通信&lt;/li&gt;
&lt;li&gt;宿主机和容器可以直接通信&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当容器中的网络服务需要被外部
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="docker" scheme="https://www.codetool.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker数据挂载-数据卷介绍</title>
    <link href="https://www.codetool.top/article/docker%E6%95%B0%E6%8D%AE%E6%8C%82%E8%BD%BD-%E6%95%B0%E6%8D%AE%E5%8D%B7%E4%BB%8B%E7%BB%8D/"/>
    <id>https://www.codetool.top/article/docker数据挂载-数据卷介绍/</id>
    <published>2020-03-29T04:37:34.000Z</published>
    <updated>2020-03-29T04:37:47.123Z</updated>
    
    <content type="html"><![CDATA[<p>在Docker中，要想实现数据的持久化（所谓Docker的数据持久化即数据不随着Container的结束而结束），需要将数据从宿主机挂载到容器中。目前Docker提供了三种不同的方式将数据从宿主机挂载到容器中：</p><ol><li>volumes：Docker管理宿主机文件系统的一部分，默认位于 /var/lib/docker/volumes 目录中；（最常用的方式）</li><li>bind mounts：意为着可以存储在宿主机系统的任意位置；（比较常用的方式）<br>但是，bind mount在不同的宿主机系统时不可移植的，比如Windows和Linux的目录结构是不一样的，bind mount所指向的host目录也不能一样。这也是为什么bind mount不能出现在Dockerfile中的原因，因为这样Dockerfile就不可移植了。</li><li>tmpfs：挂载存储在宿主机系统的内存中，而不会写入宿主机的文件系统；（一般都不会用的方式）</li></ol><h1 id="Volumes">1 Volumes</h1><h2 id="创建数据卷">1.1 创建数据卷</h2><pre><code>docker volume create edc-nginx-vol # 创建一个自定义容器卷docker volume ls # 查看所有容器卷docker volume inspect edc-nginx-vol # 查看指定容器卷详情信息</code></pre><h2 id="启动容器时挂载数据卷">1.2 启动容器时挂载数据卷</h2><pre><code>docker run -d -it --name=edc-nginx -p 8800:80 -v edc-nginx-vol:/usr/share/nginx/html nginx</code></pre><p>其中，<code>edc-nginx-vol</code>指的是创建数据卷的名称，<code>/usr/share/nginx/html</code>指的是要挂载到的容器中的路径名，如果不填写<code>edc-nginx-vol:</code>即省略数据卷名称，则会分配一个匿名的数据卷。</p><p>需要注意的是：</p><ul><li>数据卷是宿主机中的一个目录或文件</li><li>当容器目录和数据卷目录绑定后，对方的修改会立即同步</li><li>一个数据卷可以被多个容器同时挂载</li><li>一个容器也可以被挂载多个数据卷</li><li>如果目录不存在，会自动创建</li></ul><h2 id="清理卷">1.3 清理卷</h2><pre><code>docker stop edc-nginx # 暂停容器实例docker rm edc-nginx # 移除容器实例docker volume rm edc-nginx-vol # 删除自定义数据卷</code></pre><h1 id="bind-mounts">2 bind mounts</h1><p>bind mounts可以挂载宿主机的任意位置，语法：</p><pre><code>docker run -d -it --name=edc-nginx -v /app/wwwroot:/usr/share/nginx/html nginx</code></pre><p>其中<code>/app/wwwroot</code>指的是宿主机中的路径，<code>/usr/share/nginx/html</code>指的是要挂载到容器中的路径。</p><p>注意： 必须是绝对路径</p><p>通过<code>docker inspect edc-nginx</code>可以看到容器相关信息，包括binds信息。</p><p>数据卷挂载的另一个应用是可以多个容器挂载同一个数据卷从而实现容器间的数据交换。</p><h1 id="数据卷容器">3 数据卷容器</h1><p>为了有效地维护多容器的数据共享，可以维护一个数据卷容器，挂载数据卷，其他容器通过<code>--volumes-from</code>从该容器获取数据卷配置。</p><p><img src="https://api.codetool.top/img/15854548494585.png" alt></p><p>例：</p><pre><code>docker run –it --name=c3 –v /volume centos:7 /bin/bash </code></pre><pre><code>docker run –it --name=c1 --volumes-from c3 centos:7 /bin/bashdocker run –it --name=c2 --volumes-from c3 centos:7 /bin/bash  </code></pre><p>有点像继承c3的数据卷配置，当c3的数据卷配置修改时c1和c2也会修改。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Docker中，要想实现数据的持久化（所谓Docker的数据持久化即数据不随着Container的结束而结束），需要将数据从宿主机挂载到容器中。目前Docker提供了三种不同的方式将数据从宿主机挂载到容器中：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;volumes：Docker管理宿主
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="docker" scheme="https://www.codetool.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>leetcode1162-地图分析</title>
    <link href="https://www.codetool.top/article/leetcode1162-%E5%9C%B0%E5%9B%BE%E5%88%86%E6%9E%90/"/>
    <id>https://www.codetool.top/article/leetcode1162-地图分析/</id>
    <published>2020-03-29T02:56:33.000Z</published>
    <updated>2020-04-02T01:53:17.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>你现在手里有一份大小为 N x N 的『地图』（网格） <code>grid</code>，上面的每个『区域』（单元格）都用 <code>0</code> 和 <code>1</code> 标记好了。其中 <code>0</code> 代表海洋，<code>1</code> 代表陆地，你知道距离陆地区域最远的海洋区域是是哪一个吗？请返回该海洋区域到离它最近的陆地区域的距离。</p><p>我们这里说的距离是『曼哈顿距离』（ Manhattan Distance）：<code>(x0, y0)</code> 和 <code>(x1, y1)</code> 这两个区域之间的距离是 <code>|x0 - x1| + |y0 - y1|</code> 。</p><p>如果我们的地图上只有陆地或者海洋，请返回 <code>-1</code>。</p><p><strong>示例 1:</strong></p><p><img src="https://api.codetool.top/img/15854507938180.jpeg" alt></p><blockquote><p><strong>输入：</strong> [[1,0,1],[0,0,0],[1,0,1]]<br><strong>输出：</strong> 2<br><strong>解释：</strong><br>海洋区域 (1, 1) 和所有陆地区域之间的距离都达到最大，最大距离为 2。</p></blockquote><p><strong>示例 2:</strong></p><p><img src="https://api.codetool.top/img/15854508097755.jpeg" alt></p><blockquote><p><strong>输入：</strong> [[1,0,0],[0,0,0],[0,0,0]]<br><strong>输出：</strong> 4<br><strong>解释：</strong><br>海洋区域 (2, 2) 和所有陆地区域之间的距离都达到最大，最大距离为 4。  </p></blockquote><p><strong>提示：</strong></p><ol><li><code>1 &lt;= grid.length == grid[0].length &lt;= 100</code></li><li><code>grid[i][j]</code> 不是 <code>0</code> 就是 <code>1</code></li></ol><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>左上，右下两遍动态规划。</p><p>时间复杂度：<code>O(4*N^2) = O(N^2)</code></p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span>dp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">int</span> <span class="token punctuation">[</span>grid<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>        <span class="token keyword">int</span> ans<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>grid<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                    dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span>grid<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span>                    dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">)</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>                ans<span class="token operator">=</span>Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>ans<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;你现在手里有一份大小为 N x N 的『地图』（网格） &lt;code&gt;grid&lt;/code&gt;，上面的每个『区域』（单元格）都用 &lt;code&gt;0&lt;/code&gt; 和 &lt;code&gt;1&lt;/code&gt; 标记好了。其中 &lt;code&gt;0&lt;/code
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="https://www.codetool.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>docker概述和相关命令</title>
    <link href="https://www.codetool.top/article/docker%E6%A6%82%E8%BF%B0%E5%92%8C%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/"/>
    <id>https://www.codetool.top/article/docker概述和相关命令/</id>
    <published>2020-03-28T16:13:11.000Z</published>
    <updated>2020-03-28T16:13:36.859Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker概述">1 Docker概述</h1><ul><li>Docker 是一个开源的应用容器引擎，诞生于 2013 年初，基于 Go 语言实现，dotCloud 公司出品（后改名为Docker Inc）。</li><li>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上。</li><li>容器是完全使用沙箱机制，相互隔离</li><li>容器性能开销极低。</li><li>Docker 从 17.03 版本之后分为 CE（Community Edition: 社区版） 和 EE（Enterprise Edition: 企业版）</li></ul><h1 id="安装docker">2 安装docker</h1><pre class=" language-shell"><code class="language-shell"># 1、yum 包更新到最新 yum update# 2、安装需要的软件包， yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的 yum install -y yum-utils device-mapper-persistent-data lvm2# 3、 设置yum源yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo# 4、 安装dockeryum install -y docker-ce# 5、 查看docker版本，验证是否验证成功docker -v</code></pre><h2 id="配置docker镜像加速">2.1 配置docker镜像加速</h2><p>默认情况下，将来从docker hub（<a href="https://hub.docker.com/）上下载docker镜像，太慢。一般都会配置镜像加速器：" target="_blank" rel="noopener">https://hub.docker.com/）上下载docker镜像，太慢。一般都会配置镜像加速器：</a></p><ul><li>USTC：中科大镜像加速器（<a href="https://docker.mirrors.ustc.edu.cn）" target="_blank" rel="noopener">https://docker.mirrors.ustc.edu.cn）</a></li><li>阿里云</li><li>网易云</li><li>腾讯云</li></ul><p>阿里云： <a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors" target="_blank" rel="noopener">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p><h2 id="设置开机启动">2.2 设置开机启动</h2><pre><code>systemctl enable docker</code></pre><h1 id="docker架构">3 docker架构</h1><p><img src="https://api.codetool.top/img/15854049916115.png" alt></p><p>镜像（Image）：Docker 镜像（Image），就相当于是一个 root 文件系统。比如官方镜像 ubuntu:16.04 就包含了完整的一套 Ubuntu16.04 最小系统的 root 文件系统。</p><p>容器（Container）：镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的类和对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等。</p><p>仓库（Repository）：仓库可看成一个代码控制中心，用来保存镜像。</p><h1 id="docker镜像相关命令">4 docker镜像相关命令</h1><p><strong>查看镜像</strong></p><p>查看本地所有的镜像</p><pre><code>docker imagesdocker images –q # 查看所用镜像的id</code></pre><p><strong>搜索镜像</strong></p><pre><code>docker search **</code></pre><p>也可以在 <a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a> 搜索</p><p><strong>拉取镜像</strong></p><pre><code>docker pull **</code></pre><p>可以带上tag指定版本，例如：</p><pre><code>docker pull mysql:5.7</code></pre><p><strong>移除镜像</strong></p><pre><code>docker rmi 镜像id</code></pre><h1 id="docker容器相关命令">5 docker容器相关命令</h1><p><strong>运行容器并在容器中打开命令行</strong></p><pre><code>docker run -it --name=c1 debian /bin/bash</code></pre><p>使用<code>--name=**</code>可以指定容器的名称</p><p>使用<code>exit</code>退出</p><ul><li><code>-i</code>:保持容器运行</li><li><code>-t</code>:为容器分配一个伪输入终端，通常和<code>-i</code>配合使用</li></ul><p><strong>创建后台运行的容器</strong></p><pre><code>docker run -id --name=c2 debian</code></pre><p>运行命令后会显示容器的id</p><p>如果要进入后台运行的容器环境，使用</p><pre><code>docker exec -it c2 /bin/bash</code></pre><p>后台运行的容器使用<code>exit</code>退出不会自动关闭。</p><ul><li><code>-d</code>：以守护模式运行容器</li></ul><p><code>-it</code>创建的容器一般称为交互式容器，<code>-d</code>创建的容器一般称为守护式容器</p><p><strong>查看运行中的容器</strong></p><pre class=" language-shell"><code class="language-shell">docker ps</code></pre><p>运行结果  </p><pre><code>CONTAINER ID    IMAGE       COMMAND         ...     NAMES   00723499fdbf    debian      &quot;/bin/bash&quot;     ...     stupefied_turing</code></pre><p>name可以标识这个容器</p><p>使用<code>docker ps -a</code>可以看到所有容器（包括不在运行的）</p><p><strong>停止运行容器</strong></p><pre><code>docker stop c2</code></pre><p><strong>启动容器</strong></p><pre><code>docker start c2</code></pre><p>和<code>docker run</code>的区别是<code>docker start</code>是重启已存在的容器，而<code>docker run</code>是从镜像创建容器。</p><p><strong>查看容器信息</strong></p><pre><code>docker inspect </code></pre><p><strong>查看容器被改动的文件</strong></p><pre><code>docker diff</code></pre><p><strong>查看容器历史记录</strong></p><pre><code>docker logs</code></pre><p><strong>删除容器</strong></p><p>删除指定容器</p><pre><code>docker rm dockername</code></pre><p>获取所有已停止的容器</p><pre><code>docker ps -aq -f status=exited </code></pre><p>删除所有已停止的容器</p><pre><code>docker rm -v $(docker ps -aq -f status=exited)</code></pre><p><strong>将容器提交为镜像</strong></p><pre><code>docker commit container_name repo/image_name</code></pre><p><code>repo</code>是存放镜像的仓库名称，这个命令将会返回一个镜像的唯一识别码</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker概述&quot;&gt;1 Docker概述&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Docker 是一个开源的应用容器引擎，诞生于 2013 年初，基于 Go 语言实现，dotCloud 公司出品（后改名为Docker Inc）。&lt;/li&gt;
&lt;li&gt;Docker 可以让开发者打包
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="docker" scheme="https://www.codetool.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch概述和常用Rest API使用</title>
    <link href="https://www.codetool.top/article/ElasticSearch%E6%A6%82%E8%BF%B0%E5%92%8C%E5%B8%B8%E7%94%A8Rest-API%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.codetool.top/article/ElasticSearch概述和常用Rest-API使用/</id>
    <published>2020-03-28T11:13:30.000Z</published>
    <updated>2020-03-29T01:30:38.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Elastic-Stack概述">1 Elastic Stack概述</h1><p>如果你没有听说过Elastic Stack，那你一定听说过ELK，实际上ELK是三款软件的简称，分别是Elasticsearch、 Logstash、Kibana组成，在发展的过程中，又有新成员Beats的加入，所以就形成了Elastic Stack。所以说，ELK是旧的称呼，Elastic Stack是新的名字。</p><p><img src="https://api.codetool.top/img/1585363297461.jpg" alt></p><p>全系的Elastic Stack技术栈包括：</p><p><img src="https://api.codetool.top/img/15853635525873.png" alt></p><ul><li>Elasticsearch<br>Elasticsearch 基于java，是个开源分布式搜索引擎，它的特点有：分布式，零配置，自动发现，索引自动分片，索引副本机制，restful风格接口，多数据源，自动搜索负载等。</li><li>Logstash<br>Logstash 基于java，是一个开源的用于收集,分析和存储日志的工具。</li><li>Kibana<br>Kibana 基于nodejs，也是一个开源和免费的工具，Kibana可以为 Logstash 和ElasticSearch 提供的日志分析友好的Web 界面，可以汇总、分析和搜索重要数据日志。</li><li>Beats<br>Beats是elastic公司开源的一款采集系统监控数据的代理agent，是在被监控服务器上以客户端形式运行的数据收集器的统称，可以直接把数据发送给Elasticsearch或者通过Logstash发送给Elasticsearch，然后进行后续的数据分析活动。</li></ul><p>Beats由如下组成:</p><ul><li>Packetbeat：是一个网络数据包分析器，用于监控、收集网络流量信息，Packetbeat嗅探服务器之间的流量，解析应用层协议，并关联到消息的处理，其支 持ICMP (v4 and v6)、DNS、HTTP、Mysql、PostgreSQL、Redis、MongoDB、Memcache等协议。</li><li>Filebeat：用于监控、收集服务器日志文件，其已取代 logstash forwarder。</li><li>Metricbeat：可定期获取外部系统的监控指标信息，其可以监控、收集 Apache、HAProxy、MongoDB、MySQL、Nginx、PostgreSQL、Redis、System、Zookeeper等服务。</li><li>Winlogbeat：用于监控、收集Windows系统的日志信息。</li></ul><h1 id="ElasticSearch概述">2 ElasticSearch概述</h1><p>ElasticSearch是一个<strong>基于Lucene</strong>的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java语言开发的，并作为Apache许可条款下的开放源码发布，是一种流行的企业级搜索引擎。ElasticSearch用于云计算中，能够达到实时搜索，稳定，可靠，快速，安装使用方便。官方客户端在Java、.NET（C#）、PHP、Python、Apache Groovy、Ruby和许多其他语言中都是可用的。</p><h2 id="安装">2.1 安装</h2><p>Elasticsearch的发展是非常快速的，所以在ES5.0之前，ELK的各个版本都不统一，出现了版本号混乱的状态，所以从5.0开始，所有Elastic Stack中的项目全部统一版本号。</p><p>下载地址： <a href="https://www.elastic.co/cn/downloads/elasticsearch" target="_blank" rel="noopener">https://www.elastic.co/cn/downloads/elasticsearch</a></p><p>因为启动Elasticsearch5.0版本及以上需要使用非root用户，需要新建一个用户来启动Elasticsearch</p><pre><code>useradd elkmkdir -pv /opt/elk/{data,logs}chown -R elk:elk /opt/elk/</code></pre><p>将下载后的压缩包解压</p><pre><code>mv elasticsearch-7.6.1-linux-x86_64.tar.gz /opt/tar -xvf elasticsearch-7.6.1-linux-x86_64.tar.gzmv elasticsearch-7.6.1 elasticsearchchown -R elk:elk /opt/elasticsearch/</code></pre><p>修改安装目录下的<code>/conf/elasticsearch.yml</code></p><pre class=" language-yml"><code class="language-yml">network.host: 0.0.0.0path.data: /opt/elk/datapath.logs: /opt/elk/logsdiscovery.seed_hosts: ["127.0.0.1","[::1]"]cluster.initial_master_nodes: ["node-1"]</code></pre><p>在Elasticsearch中如果，network.host不是localhost或者127.0.0.1的话，就会认为是生产环境，会对环境的要求比较高，我们的测试环境不一定能够满足，一般情况下需要修改几处配置：</p><p>修改<code>jvm.options</code></p><pre><code># -Xms1g # -Xmx1g-Xms128m-Xmx128m</code></pre><p>修改<code>/etc/sysctl.conf</code>，添加一行，目的是确保系统有足够的资源启动Elasticsearch：</p><pre class=" language-conf"><code class="language-conf">vm.max_map_count=655360</code></pre><p>执行以下命令确保配置生效：</p><pre><code>sysctl -p</code></pre><p>修改<code>/etc/security/limits.conf</code>，在文件末尾添加下面内容：</p><pre><code>* soft nofile 65536* hard nofile 131072* soft nproc 65536* hard nproc 131072</code></pre><p>修改<code>/etc/security/limits.d/20-nproc.conf</code>，在文件末尾添加下面内容：</p><pre><code>elk soft nproc 65536</code></pre><p>使用elk用户身份启动elastic search</p><pre><code>su elkcd ../bin./elasticsearch 或 ./elasticsearch -d #后台启动</code></pre><p>运行成功后，访问9200端口即可看到一段json输出</p><h2 id="elasticsearch-head使用">2.2 elasticsearch head使用</h2><p>elasticsearch head是第三方开发的ElasticSearch界面管理工具，可以通过chrome插件安装： <a href="https://chrome.google.com/webstore/detail/elasticsearch-head/ffmkiejjmecolpfloofpjologoblkegm/" target="_blank" rel="noopener">https://chrome.google.com/webstore/detail/elasticsearch-head/ffmkiejjmecolpfloofpjologoblkegm/</a></p><p><img src="https://api.codetool.top/img/15853746961730.png" alt></p><h2 id="Elasticsearch基本概念">2.3 Elasticsearch基本概念</h2><h3 id="索引">2.3.1 索引</h3><ul><li>索引（index）是Elasticsearch对逻辑数据的逻辑存储，所以它可以分为更小的部分。</li><li>可以把索引看成关系型数据库的表，索引的结构是为快速有效的全文索引准备的，特别是它不存储原始值。</li><li>Elasticsearch可以把索引存放在一台机器或者分散在多台服务器上，每个索引有一或多个分片（shard），每个分片可以有多个副本（replica）。</li></ul><h3 id="文档">2.3.2 文档</h3><p>就是lucene的底层存储吧。</p><ul><li>存储在Elasticsearch中的主要实体叫文档（document）。用关系型数据库来类比的话，一个文档相当于数据库表中的一行记录。</li><li>Elasticsearch和MongoDB中的文档类似，都可以有不同的结构，但Elasticsearch的文档中，相同字段必须有相同类型。</li><li>文档由多个字段组成，每个字段可能多次出现在一个文档里，这样的字段叫多值字段（multivalued）。</li><li>每个字段的类型，可以是文本、数值、日期等。字段类型也可以是复杂类型，一个字段包含其他子文档或者数组。</li></ul><h3 id="映射">2.3.3 映射</h3><ul><li>所有文档写进索引之前都会先进行分析，如何将输入的文本分割为词条、哪些词条又会被过滤，这种行为叫做映射（mapping）。一般由用户自己定义规则。</li></ul><h3 id="文档类型">2.3.4 文档类型</h3><ul><li>在Elasticsearch中，一个索引对象可以存储很多不同用途的对象。例如，一个博客应用程序可以保存文章和评论。</li><li>每个文档可以有不同的结构。</li><li>不同的文档类型不能为相同的属性设置不同的类型。例如，在同一索引中的所有文档类型中，一个叫title的字段必须具有相同的类型。</li></ul><h1 id="RESTful-API使用">3 RESTful API使用</h1><p>在Elasticsearch中，提供了功能丰富的RESTful API的操作，包括基本的CRUD、创建索引、删除索引等操作。</p><h2 id="创建索引库">3.1 创建索引库</h2><p>创建空索引库：</p><pre class=" language-json"><code class="language-json">PUT /haoke<span class="token punctuation">{</span>    <span class="token property">"settings"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"index"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"number_of_shards"</span><span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span> #分片数            <span class="token property">"number_of_replicas"</span><span class="token operator">:</span> <span class="token string">"0"</span> #副本数        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>#删除索引DELETE /haoke<span class="token punctuation">{</span>    <span class="token property">"acknowledged"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span></code></pre><h2 id="插入文档">3.2 插入文档</h2><p>在Lucene中，创建索引是需要定义字段名称以及字段的类型的，在Elasticsearch中提供了非结构化的索引，就是不需要创建索引结构，即可写入数据到索引中，实际上在Elasticsearch底层会进行结构化操作，此操作对用户是透明的。</p><p><code>POST /{索引库}/{类型}/{id}</code></p><p>这里的id是手动指定文档的id，如果不写会分配一个随机的文档id。</p><pre class=" language-json"><code class="language-json">POST /haoke/user/<span class="token number">1001</span>#数据<span class="token punctuation">{</span>    <span class="token property">"id"</span><span class="token operator">:</span><span class="token number">1001</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>    <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">20</span><span class="token punctuation">,</span>    <span class="token property">"sex"</span><span class="token operator">:</span><span class="token string">"男"</span><span class="token punctuation">}</span>#响应<span class="token punctuation">{</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"haoke"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token property">"result"</span><span class="token operator">:</span> <span class="token string">"created"</span><span class="token punctuation">,</span>    <span class="token property">"_shards"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"total"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"successful"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"failed"</span><span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"_seq_no"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token property">"_primary_term"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">}</span></code></pre><h2 id="更新数据">3.3 更新数据</h2><p>也就是lucene的先删除再创建</p><pre class=" language-json"><code class="language-json">PUT /haoke/user/<span class="token number">1001</span><span class="token punctuation">{</span>    <span class="token property">"id"</span><span class="token operator">:</span><span class="token number">1001</span><span class="token punctuation">,</span>    <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>    <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">21</span><span class="token punctuation">,</span>    <span class="token property">"sex"</span><span class="token operator">:</span><span class="token string">"女"</span><span class="token punctuation">}</span></code></pre><p>可以通过在url后面附上/_update来局部更新</p><pre class=" language-json"><code class="language-json">#注意：这里多了_update标识POST /haoke/user/<span class="token number">1001</span>/_update<span class="token punctuation">{</span>    <span class="token property">"doc"</span><span class="token operator">:</span><span class="token punctuation">{</span>        <span class="token property">"age"</span><span class="token operator">:</span><span class="token number">23</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>响应的<code>_version</code>会加一。</p><h2 id="删除文档">3.4 删除文档</h2><p>在Elasticsearch中，删除文档数据，只需要发起DELETE请求即可。</p><pre><code>DELETE /haoke/user/1001</code></pre><p>删除一个文档也不会立即从磁盘上移除，它只是被标记成已删除。Elasticsearch将会在你之后添加更多索引的时候才会在后台进行删除内容的清理。</p><p>响应的<code>_version</code>会加一。</p><h2 id="普通搜索">3.5 普通搜索</h2><h3 id="根据文档id查询">3.5.1 根据文档id查询</h3><p><code>GET /_index/_type/{id}</code></p><pre class=" language-json"><code class="language-json">GET /haoke/user/BbPe_WcB9cFOnF3uebvr#返回的数据如下<span class="token punctuation">{</span>    <span class="token property">"_index"</span><span class="token operator">:</span> <span class="token string">"haoke"</span><span class="token punctuation">,</span>    <span class="token property">"_type"</span><span class="token operator">:</span> <span class="token string">"user"</span><span class="token punctuation">,</span>    <span class="token property">"_id"</span><span class="token operator">:</span> <span class="token string">"BbPe_WcB9cFOnF3uebvr"</span><span class="token punctuation">,</span>    <span class="token property">"_version"</span><span class="token operator">:</span> <span class="token number">8</span><span class="token punctuation">,</span>    <span class="token property">"found"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token property">"_source"</span><span class="token operator">:</span> <span class="token punctuation">{</span>  #原始数据在这里        <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1002</span><span class="token punctuation">,</span>        <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"李四"</span><span class="token punctuation">,</span>        <span class="token property">"age"</span><span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">,</span>        <span class="token property">"sex"</span><span class="token operator">:</span> <span class="token string">"男"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="获取全部数据">3.5.2 获取全部数据</h3><p>默认返回10条数据</p><pre><code>GET /haoke/user/_search</code></pre><h3 id="关键词搜索">3.5.3 关键词搜索</h3><pre><code>#查询年龄等于20的用户GET /haoke/user/_search?q=age:20</code></pre><h2 id="高级搜索DSL">3.6 高级搜索DSL</h2><p>Elasticsearch提供丰富且灵活的查询语言叫做DSL查询(Query DSL),它允许你构建更加复杂、强大的查询。</p><p>DSL(Domain Specific Language特定领域语言)以JSON请求体的形式出现。</p><h3 id="标准查询">3.6.1 标准查询</h3><pre class=" language-json"><code class="language-json">POST /haoke/user/_search#请求体<span class="token punctuation">{</span>    <span class="token property">"query"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"match"</span> <span class="token operator">:</span> <span class="token punctuation">{</span>  #match只是查询的一种            <span class="token property">"age"</span> <span class="token operator">:</span> <span class="token number">20</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="范围查询">3.6.2 范围查询</h3><pre class=" language-json"><code class="language-json">POST /haoke/user/_search#请求数据<span class="token punctuation">{</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"age"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                        <span class="token property">"gt"</span><span class="token operator">:</span> <span class="token number">30</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"sex"</span><span class="token operator">:</span> <span class="token string">"男"</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>bool</code>又是一个组合查询，对应lucene里面的<code>BooleanQuery</code></p><h3 id="精确匹配">3.6.3 精确匹配</h3><p>使用term或terms</p><h3 id="高亮显示">3.6.4 高亮显示</h3><p>field指定要匹配的域，可以填写要高亮的词。</p><pre class=" language-json"><code class="language-json">POST /haoke/user/_search<span class="token punctuation">{</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"match"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"张三 李四"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"highlight"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"fields"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="聚合">3.6.5 聚合</h3><p>在Elasticsearch中，支持聚合操作，类似SQL中的group by操作。</p><pre class=" language-json"><code class="language-json">POST /haoke/user/_search<span class="token punctuation">{</span>    <span class="token property">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"all_interests"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"terms"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"field"</span><span class="token operator">:</span> <span class="token string">"age"</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这表示使用”age”域进行聚合。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Elastic-Stack概述&quot;&gt;1 Elastic Stack概述&lt;/h1&gt;&lt;p&gt;如果你没有听说过Elastic Stack，那你一定听说过ELK，实际上ELK是三款软件的简称，分别是Elasticsearch、 Logstash、Kibana组成，在发展的过程
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="ElasticSearch" scheme="https://www.codetool.top/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>Lucene高级查询</title>
    <link href="https://www.codetool.top/article/Lucene%E9%AB%98%E7%BA%A7%E6%9F%A5%E8%AF%A2/"/>
    <id>https://www.codetool.top/article/Lucene高级查询/</id>
    <published>2020-03-28T10:48:35.000Z</published>
    <updated>2020-03-28T10:49:05.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="文本搜索">1 文本搜索</h1><p>QueryParser可以指定默认域，<code>queryParser.parse</code>中又可以用<code>域名:关键词</code>来覆盖它。如果parse中没有指定搜索域就使用默认域。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testIndexSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 创建Query搜索对象</span>    <span class="token comment" spellcheck="true">// 创建分词器</span>    Analyzer analyzer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IKAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建搜索解析器，第一个参数：默认Field域，第二个参数：分词器</span>    QueryParser queryParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryParser</span><span class="token punctuation">(</span><span class="token string">"brandName"</span><span class="token punctuation">,</span> analyzer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建搜索对象</span>    Query query <span class="token operator">=</span> queryParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"name:华为手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. 创建Directory流对象,声明索引库位置</span>    Directory directory <span class="token operator">=</span> FSDirectory<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"E:\\dir"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3. 创建索引读取对象IndexReader</span>    IndexReader reader <span class="token operator">=</span> DirectoryReader<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>directory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4. 创建索引搜索对象</span>    IndexSearcher searcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexSearcher</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 5. 使用索引搜索对象，执行搜索，返回结果集TopDocs</span>    <span class="token comment" spellcheck="true">// 第一个参数：搜索对象，第二个参数：返回的数据条数，指定查询结果最顶部的n条数据返回</span>    TopDocs topDocs <span class="token operator">=</span> searcher<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询到的数据总条数是："</span> <span class="token operator">+</span> topDocs<span class="token punctuation">.</span>totalHits<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取查询结果集</span>    ScoreDoc<span class="token punctuation">[</span><span class="token punctuation">]</span> docs <span class="token operator">=</span> topDocs<span class="token punctuation">.</span>scoreDocs<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 6. 解析结果集</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ScoreDoc scoreDoc <span class="token operator">:</span> docs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取文档</span>        <span class="token keyword">int</span> docID <span class="token operator">=</span> scoreDoc<span class="token punctuation">.</span>doc<span class="token punctuation">;</span>        Document doc <span class="token operator">=</span> searcher<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>docID<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"docID:"</span> <span class="token operator">+</span> docID<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id:"</span> <span class="token operator">+</span> doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:"</span> <span class="token operator">+</span> doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"price:"</span> <span class="token operator">+</span> doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"brandName:"</span> <span class="token operator">+</span> doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"brandName"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"image:"</span> <span class="token operator">+</span> doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 7. 释放资源</span>    reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>queryParser.parse更多用法：</p><p>使用AND求并集，使用OR求交集，注意必须大写</p><pre class=" language-java"><code class="language-java">queryParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"华为 AND 手机"</span><span class="token punctuation">)</span>queryParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"华为 OR 手机"</span><span class="token punctuation">)</span></code></pre><h1 id="数值范围查询">2 数值范围查询</h1><p>例如： 查询价格大于等于100, 小于等于1000的商品</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRangeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1. 创建Query搜索对象</span>    Query query <span class="token operator">=</span> FloatPoint<span class="token punctuation">.</span><span class="token function">newRangeQuery</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. 创建Directory流对象,声明索引库位置</span>    Directory directory <span class="token operator">=</span> FSDirectory<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"E:\\dir"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3. 创建索引读取对象IndexReader</span>    IndexReader reader <span class="token operator">=</span> DirectoryReader<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>directory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4. 创建索引搜索对象</span>    IndexSearcher searcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexSearcher</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 5. 使用索引搜索对象，执行搜索，返回结果集TopDocs</span>    <span class="token comment" spellcheck="true">// 第一个参数：搜索对象，第二个参数：返回的数据条数，指定查询结果最顶部的n条数据返回</span>    TopDocs topDocs <span class="token operator">=</span> searcher<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询到的数据总条数是："</span> <span class="token operator">+</span> topDocs<span class="token punctuation">.</span>totalHits<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取查询结果集</span>    ScoreDoc<span class="token punctuation">[</span><span class="token punctuation">]</span> docs <span class="token operator">=</span> topDocs<span class="token punctuation">.</span>scoreDocs<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 6. 解析结果集</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ScoreDoc scoreDoc <span class="token operator">:</span> docs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取文档</span>        <span class="token keyword">int</span> docID <span class="token operator">=</span> scoreDoc<span class="token punctuation">.</span>doc<span class="token punctuation">;</span>        Document doc <span class="token operator">=</span> searcher<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>docID<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"docID:"</span> <span class="token operator">+</span> docID<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id:"</span> <span class="token operator">+</span> doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:"</span> <span class="token operator">+</span> doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"price:"</span> <span class="token operator">+</span> doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"brandName:"</span> <span class="token operator">+</span> doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"brandName"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"image:"</span> <span class="token operator">+</span> doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 7. 释放资源</span>    reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="组合查询">3 组合查询</h1><p>组合查询可以组合多个查询对象，即多个条件，使用<code>BooleanQuery.Builder</code>构造。</p><p>每联系一个Query对象，可以指定：</p><ul><li><code>BooleanClause.Occur.MUST</code> 必须 相当于and, 并且</li><li><code>BooleanClause.Occur.MUST_NOT</code> 不必须 相当于not, 非</li><li><code>BooleanClause.Occur.SHOULD</code> 应该 相当于or, 或者</li></ul><p><strong>注意:</strong> 如果逻辑条件中, 只有<code>MUST_NOT</code>, 或者多个逻辑条件都是<code>MUST_NOT</code>, 无效, 查询不出任何数据。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBooleanSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 创建分词器</span>    Analyzer analyzer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IKAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建数值范围搜索对象</span>    Query query1 <span class="token operator">=</span> FloatPoint<span class="token punctuation">.</span><span class="token function">newRangeQuery</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    QueryParser queryParser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryParser</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> analyzer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建搜索对象</span>    Query query2 <span class="token operator">=</span> queryParser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"华为手机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建组合搜索对象</span>    BooleanQuery<span class="token punctuation">.</span>Builder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BooleanQuery<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BooleanClause</span><span class="token punctuation">(</span>query1<span class="token punctuation">,</span> BooleanClause<span class="token punctuation">.</span>Occur<span class="token punctuation">.</span>MUST<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    builder<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BooleanClause</span><span class="token punctuation">(</span>query2<span class="token punctuation">,</span> BooleanClause<span class="token punctuation">.</span>Occur<span class="token punctuation">.</span>MUST_NOT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2. 创建Directory流对象,声明索引库位置</span>    Directory directory <span class="token operator">=</span> FSDirectory<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"E:\\dir"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 3. 创建索引读取对象IndexReader</span>    IndexReader reader <span class="token operator">=</span> DirectoryReader<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>directory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 4. 创建索引搜索对象</span>    IndexSearcher searcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexSearcher</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 5. 使用索引搜索对象，执行搜索，返回结果集TopDocs</span>    <span class="token comment" spellcheck="true">// 第一个参数：搜索对象，第二个参数：返回的数据条数，指定查询结果最顶部的n条数据返回</span>    TopDocs topDocs <span class="token operator">=</span> searcher<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>builder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询到的数据总条数是："</span> <span class="token operator">+</span> topDocs<span class="token punctuation">.</span>totalHits<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 获取查询结果集</span>    ScoreDoc<span class="token punctuation">[</span><span class="token punctuation">]</span> docs <span class="token operator">=</span> topDocs<span class="token punctuation">.</span>scoreDocs<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 6. 解析结果集</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ScoreDoc scoreDoc <span class="token operator">:</span> docs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取文档</span>        <span class="token keyword">int</span> docID <span class="token operator">=</span> scoreDoc<span class="token punctuation">.</span>doc<span class="token punctuation">;</span>        Document doc <span class="token operator">=</span> searcher<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>docID<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"============================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"docID:"</span> <span class="token operator">+</span> docID<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"id:"</span> <span class="token operator">+</span> doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:"</span> <span class="token operator">+</span> doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"price:"</span> <span class="token operator">+</span> doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"price"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"brandName:"</span> <span class="token operator">+</span> doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"brandName"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"image:"</span> <span class="token operator">+</span> doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 7. 释放资源</span>    reader<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;文本搜索&quot;&gt;1 文本搜索&lt;/h1&gt;&lt;p&gt;QueryParser可以指定默认域，&lt;code&gt;queryParser.parse&lt;/code&gt;中又可以用&lt;code&gt;域名:关键词&lt;/code&gt;来覆盖它。如果parse中没有指定搜索域就使用默认域。&lt;/p&gt;
&lt;pre cl
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Lucene" scheme="https://www.codetool.top/tags/Lucene/"/>
    
  </entry>
  
  <entry>
    <title>leetcode820-单词的压缩编码</title>
    <link href="https://www.codetool.top/article/leetcode820-%E5%8D%95%E8%AF%8D%E7%9A%84%E5%8E%8B%E7%BC%A9%E7%BC%96%E7%A0%81/"/>
    <id>https://www.codetool.top/article/leetcode820-单词的压缩编码/</id>
    <published>2020-03-28T02:25:49.000Z</published>
    <updated>2020-03-28T02:30:58.133Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定一个单词列表，我们将这个列表编码成一个索引字符串 <code>S</code> 与一个索引列表 <code>A</code>。</p><p>例如，如果这个列表是 <code>[&quot;time&quot;, &quot;me&quot;, &quot;bell&quot;]</code>，我们就可以将其表示为 <code>S = &quot;time#bell#&quot;</code> 和 <code>indexes = [0, 2, 5]</code>。</p><p>对于每一个索引，我们可以通过从字符串 <code>S</code> 中索引的位置开始读取字符串，直到 “#” 结束，来恢复我们之前的单词列表。</p><p>那么成功对给定单词列表进行编码的最小字符串长度是多少呢？</p><p><strong>示例:</strong></p><p><strong>输入:</strong> words = [“time”, “me”, “bell”]<br><strong>输出:</strong> 10<br><strong>说明:</strong> S = “time#bell#” ， indexes = [0, 2, 5] 。</p><p><strong>提示:</strong></p><ol><li><code>1 &lt;= words.length &lt;= 2000</code></li><li><code>1 &lt;= words[i].length &lt;= 7</code></li><li>每个单词都是小写字母 。</li></ol><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><ol><li><p>暴力搜索后缀。</p></li><li><p><strong>使用字典树倒序存储字符串。</strong></p></li></ol><h2 id="代码">2.2 代码</h2><p>暴力检查后缀：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minimumLengthEncoding</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String word<span class="token operator">:</span>words<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">boolean</span> noNeedToAdd <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>word<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    list<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>                    noNeedToAdd <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">&amp;&amp;</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token operator">==</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    noNeedToAdd <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>noNeedToAdd<span class="token punctuation">)</span> list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String word<span class="token operator">:</span>list<span class="token punctuation">)</span><span class="token punctuation">{</span>            sum <span class="token operator">+=</span> word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用字典树倒序存储字符串：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minimumLengthEncoding</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TrieNode trie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>TrieNode<span class="token punctuation">,</span> Integer<span class="token operator">></span> nodes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> words<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String word <span class="token operator">=</span> words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            TrieNode cur <span class="token operator">=</span> trie<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            nodes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>TrieNode node<span class="token operator">:</span> nodes<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                ans <span class="token operator">+=</span> words<span class="token punctuation">[</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">TrieNode</span> <span class="token punctuation">{</span>    TrieNode<span class="token punctuation">[</span><span class="token punctuation">]</span> children<span class="token punctuation">;</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token function">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> TrieNode <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>children<span class="token punctuation">[</span>c <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            children<span class="token punctuation">[</span>c <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TrieNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> children<span class="token punctuation">[</span>c <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定一个单词列表，我们将这个列表编码成一个索引字符串 &lt;code&gt;S&lt;/code&gt; 与一个索引列表 &lt;code&gt;A&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;例如，如果这个列表是 &lt;code&gt;[&amp;quot;time&amp;quot;, &amp;quot;m
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>跳表-披着链表外衣的伪搜索树</title>
    <link href="https://www.codetool.top/article/%E8%B7%B3%E8%A1%A8-%E6%8A%AB%E7%9D%80%E9%93%BE%E8%A1%A8%E5%A4%96%E8%A1%A3%E7%9A%84%E4%BC%AA%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <id>https://www.codetool.top/article/跳表-披着链表外衣的伪搜索树/</id>
    <published>2020-03-27T16:06:37.000Z</published>
    <updated>2020-03-27T16:32:41.439Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考资源：</p><p><a href="https://blog.csdn.net/pcwl1206/article/details/83512600" target="_blank" rel="noopener">【数据结构与算法】之跳表（Java实现）—第九篇_Java_震哥聊校招-CSDN博客</a></p><p><a href="https://www.cnblogs.com/lfri/p/9991925.html" target="_blank" rel="noopener">跳表的原理及实例 - Rogn - 博客园</a></p><p><a href="https://blog.csdn.net/gloomysnow/article/details/51510203" target="_blank" rel="noopener">跳表Java实现_Java_偏离的定弦-CSDN博客</a></p><h1 id="跳表概述">1 跳表概述</h1><p>如果说某一种数据结构能达到以logn的速度查找数据，相信大多数人第一反应都是二分查找或是搜索树。</p><p>对于二分查找来说，它通常是一个有序数组，虽然查找效率达到了logn，但插入效率要么就是数组不允许插入，要么就是arraylist为logn。</p><p>对于搜索树，则必须要是自平衡的搜索树才能在插入了很多数据之后依然保持logn的查找效率，这就要求插入涉及到旋转平衡操作，实现较复杂。</p><p>而我们今天要介绍的主角——跳表，相较于红黑树、AVL等自平衡搜索树的实现会更简单些，查找效率和插入效率也都达到了logn。</p><h2 id="跳表的性质">1.1 跳表的性质</h2><ol><li>由很多层结构组成，level是通过一定的概率随机产生的</li><li>每一层都是一个有序的链表，默认是升序</li><li>最底层(Level 1)的链表包含所有元素；</li><li>如果一个元素出现在Level i 的链表中，则它在Level i 之下的链表也都会出现； </li><li>每个节点包含两个指针，一个指向同一链表中的下一个元素，一个指向下面一层的元素。</li></ol><h1 id="跳表原理">2 跳表原理</h1><p>用图片形式来理解跳表:</p><p><img src="https://api.codetool.top/img/15853249172712.jpg" alt></p><p>如下图，对初始链表做一层“索引”，每两个节点提取一个节点到上一层，然后用down指针连接到下一层。</p><p><img src="https://api.codetool.top/img/1585324950553.jpg" alt></p><p>现在我们查询16这个节点。从第一级索引开始，找到13，并且下一个为17，显然16在这两个节点之间，利用down指针下降一层，这次我们遍历2次即可。利用索引后，遍历了5+2=7次，而原始链表需要10次，这里加一层索引遍历次数减少了，效率提高了一点，但还不够，我们继续往上添加索引层。</p><p><img src="https://api.codetool.top/img/15853251665444.jpg" alt></p><p>这里我不再算了，结果是6次，效率又提高了！</p><p>那么这种链表加多级索引就是跳表的结构了。可以看出来最后形成的就是一个类似于搜索树的结构。</p><h1 id="跳表的操作">3 跳表的操作</h1><p>Java中已经有了跳表思想的实现：concurrent包下的<code>ConcurrentSkipListMap</code>(在功能上对应HashTable、HashMap、TreeMap)和 <code>ConcurrentSkipListSet</code>(在功能上对应HashSet)。</p><h2 id="跳表的插入">3.1 跳表的插入</h2><p>跳表插入的时间复杂度为：O(logn)，支持高效的动态插入。</p><p>在单链表中，一旦定位好要插入的位置，插入结点的时间复杂度是很低的，就是O(1)。但是为了保证原始链表中数据的有序性，我们需要先找到要插入的位置，这个查找的操作就会比较耗时。</p><p>对于纯粹的单链表，需要遍历每个结点，来找到插入的位置。但是对于跳表来说，查找的时间复杂度为O(logn)，所以这里查找某个数据应该插入的位置的时间复杂度也是O(logn)，如下图所示：</p><p><img src="https://api.codetool.top/img/15853256465422.png" alt></p><h2 id="跳表的删除">3.2 跳表的删除</h2><p>跳表的删除操作时间复杂度为：O(logn)，支持动态的删除。</p><p>在跳表中删除某个结点时，如果这个结点在索引中也出现了，我们<strong>除了要删除原始链表中的结点，还要删除索引中的</strong>。因为单链表中的删除操作需要拿到删除结点的前驱结点，然后再通过指针操作完成删除。所以在查找要删除的结点的时候，一定要获取前驱结点（双向链表除外）。因此跳表的删除操作时间复杂度即为O(logn)。</p><h2 id="跳表索引动态更新">3.3 跳表索引动态更新</h2><p>当我们不断地往跳表中插入数据时，我们如果不更新索引，就有可能出现某2个索引节点之间的数据非常多的情况，在极端情况下，跳表还会退化成单链表，如下图所示：</p><p><img src="https://api.codetool.top/img/15853257169186.png" alt></p><p>作为一种动态数据结构，我们需要某种手段来维护索引与原始链表大小之间的平衡，也就是说，如果链表中的结点多了，索引结点就相应地增加一些，避免复杂度退化，以及查找、插入和删除操作性能的下降。</p><p>如果你了解红黑树、AVL树这样的平衡二叉树，你就会知道它们是通过左右旋的方式保持左右子树的大小平衡，<strong>而跳表是通过随机函数来维护“平衡性”。</strong></p><p><strong>当我们往跳表中插入数据的时候，我们可以通过一个随机函数，来决定这个结点插入到哪几级索引层中</strong>，比如随机函数生成了值K，那我们就将这个结点添加到第一级到第K级这个K级索引中。如下图中要插入数据为6，K=2的例子：</p><p><img src="https://api.codetool.top/img/15853257588573.png" alt></p><p>随机函数的选择是非常有讲究的，从概率上讲，能够保证跳表的索引大小和数据大小平衡性，不至于性能的过度退化。至于随机函数的选择，见下面的代码实现过程，而且实现过程并不是重点，掌握思想即可。</p><h1 id="跳表的Java实现">4 跳表的Java实现</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 跳表中存储的是正整数，并且存储的数据是不重复的</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SkipList</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_LEVEL <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 结点的个数</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> levelCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 索引的层级数</span>    <span class="token keyword">private</span> Node head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 头结点</span>    <span class="token keyword">private</span> Random random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Node内部类</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Node</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> data <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> Node next<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>MAX_LEVEL<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> maxLevel <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 重写toString方法</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            StringBuilder builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"{data:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"; leves: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>maxLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">" }"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 查找操作</span>    <span class="token keyword">public</span> Node <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>        Node p <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> levelCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">&lt;</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>                p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">==</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> p<span class="token punctuation">.</span>next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 找到，则返回原始链表中的结点</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 插入操作</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token function">randomLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Node newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newNode<span class="token punctuation">.</span>data <span class="token operator">=</span> value<span class="token punctuation">;</span>        newNode<span class="token punctuation">.</span>maxLevel <span class="token operator">=</span> level<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 通过随机函数改变索引层的结点布置</span>        Node update<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>level<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> level<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            update<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Node p <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> level <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">&lt;</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>                p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            update<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> level<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            newNode<span class="token punctuation">.</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> update<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            update<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>levelCount <span class="token operator">&lt;</span> level<span class="token punctuation">)</span><span class="token punctuation">{</span>            levelCount <span class="token operator">=</span> level<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 删除操作</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>        Node<span class="token punctuation">[</span><span class="token punctuation">]</span> update <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">[</span>levelCount<span class="token punctuation">]</span><span class="token punctuation">;</span>        Node p <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> levelCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">&lt;</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>                p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            update<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> p<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span>next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">==</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> levelCount <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>update<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> update<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>data <span class="token operator">==</span> value<span class="token punctuation">)</span><span class="token punctuation">{</span>                    update<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> update<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 随机函数</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">randomLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> level <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> MAX_LEVEL<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                level<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> level<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 显示跳表中的结点</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Node p <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="跳表的应用">5 跳表的应用</h1><ul><li>Lucene3.0版本之前使用跳表结构存储词典，后来换成了FST（有限状态转移机）</li><li>Redis在两个地方用到了跳跃表，一个是实现有序集合键，另一个是在集群节点中用作内部数据结构。</li><li>……</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文参考资源：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/pcwl1206/article/details/83512600&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;【数据结构与算法】之跳表（Java实现）—第九篇_
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
