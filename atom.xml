<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>代码段小站</title>
  <icon>https://www.gravatar.com/avatar/4c71a513a84e4d430b9f9aed224237fc</icon>
  <subtitle>CodeTool - 个人计算机类练手小博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.codetool.top/"/>
  <updated>2020-04-07T16:09:12.249Z</updated>
  <id>https://www.codetool.top/</id>
  
  <author>
    <name>Rhett Peng</name>
    <email>pctdyx@qq.net</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计网复习03-数据链路层.md</title>
    <link href="https://www.codetool.top/article/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A003-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82-md/"/>
    <id>https://www.codetool.top/article/计网复习03-数据链路层-md/</id>
    <published>2020-04-07T13:11:13.000Z</published>
    <updated>2020-04-07T16:09:12.249Z</updated>
    
    <content type="html"><![CDATA[<p>这里的数据链路层指的是原理体系结构的数据链路层，对应OSI七层体系结构中的数据链路层，对应TCP/IP四层体系结构中的网络接口层的一部分。它提供介质访问和链路管理，为网络层提供服务。其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。其主要作用是<strong>加强物理层传输原始比特流的功能</strong>，将物理层提供的可能出错的物理连接改造成为<strong>逻辑上无差错的数据链路</strong>，使之对网络层表现为一条无差错的链路。</p><p>功能：</p><ol><li>为网络层提供服务：<ul><li>无确认无连接服务</li><li>有确认无连接服务</li><li>有确认面向连接服务</li></ul></li><li>链路管理，即连接的建立、维持、释放(用于面向连接的服务)。</li><li>组帧。</li><li>流量控制。</li><li>差错控制(帧错/位错)。</li></ol><h1 id="两种信道">1 两种信道</h1><p><img src="https://api.codetool.top/img/15862651096504.png" alt></p><h1 id="链路和数据链路">2 链路和数据链路</h1><p><img src="https://api.codetool.top/img/15862651334233.png" alt></p><h1 id="协议的三个基本问题">3 协议的三个基本问题</h1><p><img src="https://api.codetool.top/img/15862651514581.png" alt></p><h2 id="封装成帧">3.1 封装成帧</h2><p>封装成帧就是在一段数据的前后部分添加首部和尾部，这样就构成了一个帧。接收端在收到物理层上交的比特流后，就能根据首部和尾部的标记，从收到的比特流中识别帧的开始和结束。</p><p>首部和尾部包含许多的控制信息，他们的一个重要作用是帧定界(确定帧的界限)。</p><p>一个帧分为首部、数据部分、尾部，为了传输效率一般是数据部分占比越大越好。但如果帧过长可能会导致一些传输问题（报文传输没有很好的效果）。所以规定了<strong>最大传输单元MTU，即数据部分不能超过这个长度。</strong></p><p>组帧的四种方法: </p><ol><li>字符计数法：帧首部使用一个计数字段(第一个字节，八位)来标明帧内字符数。容易出错。</li><li>字符(节)填充法：使用SOH和EOT。</li><li>零比特填充法：SOH和EOT都使用<code>01111110</code>，信息字段只要有连续5个1，就立即填入一个0。</li><li>违规编码法。使用违规表示的码元来表示SOH和EOT。</li></ol><p><img src="https://api.codetool.top/img/15862683419459.png" alt></p><h2 id="透明传输">3.2 透明传输</h2><p>透明传输是指不管所传数据是什么样的比特组合，都应当能够在链路上传送。因此，链路层就“看不见”有什么妨碍数据传输的东西。</p><p><strong>当所传数据中的比特组合恰巧与某一个控制信息完全一样时，就必须采取适当的措施，使收方不会将这样的数据误认为是某种控制信息。</strong> 这样才能保证数据链路层的传输是透明的。</p><h2 id="差错控制">3.3 差错控制</h2><p>概括来说，传输中的差错都是由于噪声引起的。</p><p>全局性: 1. 由于线路本身电气特性所产生的<strong>随机噪声</strong>(热噪声)，是信道固有的，随机存在的。<br>解决办法:提高信噪比来减少或避免干扰。(对传感器下手)</p><p>局部性: 2. 外界特定的短暂原因所造成的<strong>冲击噪声</strong>，是产生差错的主要原因。<br>解决办法：通常利用编码技术来解决。</p><p>差错通常分为位错和帧错，假设发来一个<code>[#1]-[#2]-[#3]</code>的帧，帧错又分为：</p><ul><li>帧丢失：<code>[#1]-[#3]</code></li><li>帧重复：<code>[#1]-[#2]-[#2]-[#3]</code></li><li>帧失序：<code>[#1]-[#3]-[#2]</code></li></ul><p>差错控制技术分为差错检测和差错纠正。</p><h3 id="差错检测">3.3.1 差错检测</h3><ul><li><p>奇偶校验码，假设一个信息元共n位，用n-1位来表示数据，剩下一位用于满足整个位串中1个数的奇偶性，<strong>奇校验码要求1的个数为奇数，偶校验码要求1的个数为偶数</strong>。奇偶校验码的检错能力只能说一般，如果偶数个比特同时出现错误，就不能检测出。</p></li><li><p>循环冗余码CRC，发送端将数据划分为组，每组n（约定好的）位冗余码附在数据的最后，和接收端约定一个生成多项式P，这个P必须为n+1位。冗余码的计算方法为<code>M*n/P</code>得到的余数。接收端将得到的组除以R，如果余数为0（除尽），则说明无误，否则有误。</p></li></ul><p>差错检测检测出差错帧就会将其丢弃，保证接收端数据链路层接收的帧均无差错，但这还不是可靠传输。</p><h3 id="差错纠正">3.3.2 差错纠正</h3><p>海明码：能发现双比特错，只能纠正单比特错。</p><p>工作流程：</p><ol><li>确定校验码的位数r</li></ol><p>如何确定r？</p><p><strong>海明不等式：</strong> 2<sup>r</sup>≥k+r+1，k为信息位。例如要发送的数据的位数为6，则满足不等式的最小r为4，也就是校验码应有4位。</p><ol start="2"><li>确定校验码和数据的位置</li></ol><p>校验码只能填在2的几次方的位置，例如这4位校验码只能分别填在第1、2、4、8位。其他位置用于填写数据位。</p><ol start="3"><li>求出校验码的值</li></ol><p><img src="https://api.codetool.top/img/15862739568780.png" alt></p><p>对于任一校验码位，它的位置的二进制表示中有某一位为1，它负责校验的是数据位中位置的二进制表示中该位也为1的数据位。它的任务是令所有要校验的位（包括它本身）异或等于0。</p><p>例如对于校验位P1，它负责校验D1,D2,D4,D5。其中1⊕0⊕1⊕0=1，则它需要为0才能满足加上它后异或的结果等于0。</p><ol start="4"><li>检错并纠错</li></ol><h1 id="局域网">4 局域网</h1><p><img src="https://api.codetool.top/img/15862651714852.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里的数据链路层指的是原理体系结构的数据链路层，对应OSI七层体系结构中的数据链路层，对应TCP/IP四层体系结构中的网络接口层的一部分。它提供介质访问和链路管理，为网络层提供服务。其最基本的服务是将源自网络层来的数据可靠地传输到相邻节点的目标机网络层。其主要作用是&lt;str
      
    
    </summary>
    
    
      <category term="计算机相关" scheme="https://www.codetool.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="计算机网络" scheme="https://www.codetool.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>程序员面试金典01.07-旋转矩阵</title>
    <link href="https://www.codetool.top/article/%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E9%87%91%E5%85%B801-07-%E6%97%8B%E8%BD%AC%E7%9F%A9%E9%98%B5/"/>
    <id>https://www.codetool.top/article/程序员面试金典01-07-旋转矩阵/</id>
    <published>2020-04-07T06:12:39.000Z</published>
    <updated>2020-04-07T06:18:02.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题（来源Leetcode）">1 原题（来源Leetcode）</h1><p>给你一幅由 <code>N × N</code> 矩阵表示的图像，其中每个像素的大小为 4 字节。请你设计一种算法，将图像旋转 90 度。</p><p>不占用额外内存空间能否做到？</p><p><strong>示例 1:</strong></p><pre><code>给定 matrix = [  [1,2,3],  [4,5,6],  [7,8,9]],原地旋转输入矩阵，使其变为:[  [7,4,1],  [8,5,2],  [9,6,3]]</code></pre><p><strong>示例 2:</strong></p><pre><code>给定 matrix =[  [ 5, 1, 9,11],  [ 2, 4, 8,10],  [13, 3, 6, 7],  [15,14,12,16]], 原地旋转输入矩阵，使其变为:[  [15,13, 2, 5],  [14, 3, 4, 1],  [12, 6, 8, 9],  [16, 7,10,11]]</code></pre><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>用翻转代替旋转（先对角线翻转，再水平翻转）</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> tmp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> tmp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题（来源Leetcode）&quot;&gt;1 原题（来源Leetcode）&lt;/h1&gt;&lt;p&gt;给你一幅由 &lt;code&gt;N × N&lt;/code&gt; 矩阵表示的图像，其中每个像素的大小为 4 字节。请你设计一种算法，将图像旋转 90 度。&lt;/p&gt;
&lt;p&gt;不占用额外内存空间能否做到？&lt;
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>git上传到仓库之后大写变小写的问题</title>
    <link href="https://www.codetool.top/article/git%E4%B8%8A%E4%BC%A0%E5%88%B0%E4%BB%93%E5%BA%93%E4%B9%8B%E5%90%8E%E5%A4%A7%E5%86%99%E5%8F%98%E5%B0%8F%E5%86%99%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://www.codetool.top/article/git上传到仓库之后大写变小写的问题/</id>
    <published>2020-04-07T05:46:14.000Z</published>
    <updated>2020-04-07T05:52:45.532Z</updated>
    
    <content type="html"><![CDATA[<p>最近在翻之前的博客的时候发现有几篇博客打开是404状态，不知道怎么回事，以为hexo出bug了。就仔细研究了一下，首先在本地生成的静态文件中是存在的，然后就到远程git仓库里看了一眼，发现对应的文件夹的名字首字母是小写，而本地文件是大写，导致网页文件无法定位。</p><p>具体的原因是我之前将该文件从小写改为了大写，而<strong>git默认是不区分文件名或文件夹名的大小写的</strong>，也就没有同步成大写。</p><p>解决方案：</p><p>查看是否忽略大小写：</p><p><code>git config core.ignorecase</code>，默认是true</p><p>通过 <code>git config core.ignorecase false</code> 设置为区分大小写</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在翻之前的博客的时候发现有几篇博客打开是404状态，不知道怎么回事，以为hexo出bug了。就仔细研究了一下，首先在本地生成的静态文件中是存在的，然后就到远程git仓库里看了一眼，发现对应的文件夹的名字首字母是小写，而本地文件是大写，导致网页文件无法定位。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="日常/随笔" scheme="https://www.codetool.top/categories/%E6%97%A5%E5%B8%B8-%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="网站日志" scheme="https://www.codetool.top/tags/%E7%BD%91%E7%AB%99%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>计网复习02-物理层</title>
    <link href="https://www.codetool.top/article/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A002-%E7%89%A9%E7%90%86%E5%B1%82/"/>
    <id>https://www.codetool.top/article/计网复习02-物理层/</id>
    <published>2020-04-06T14:23:21.000Z</published>
    <updated>2020-04-06T16:14:58.980Z</updated>
    
    <content type="html"><![CDATA[<p>这里的物理层指的是原理体系结构的物理层，对应OSI七层模型的物理层，对应TCP/IP四层模型中的网络接口层中的一部分。它为数据链路层提供服务，为数据传输提供可靠环境。</p><h1 id="基本概念">1 基本概念</h1><p><img src="https://api.codetool.top/img/15861830461240.png" alt></p><p>物理层解决如何在连接各种计算机的传输媒体上<strong>传输数据比特流</strong>，而不是指具体的传输媒体。</p><p>物理层的协议是非常多的，因为这一层是一些硬件设备，不同的硬件设备、不同的品牌之间可能存在着不同的协议。</p><p>物理层的主要任务就是确定与传输媒体接口有关的一些特性：</p><ul><li>机械特性：定义物理连接的特性，规定物理连接时所采用的规格、接口形状、引线数目、引脚数量和排列情况。</li><li>电气特性：规定传输二进制位时，线路上信号的电压范围、阻抗匹配、传输速率和距离限制等。</li><li>工程特性：指明某条线上出现的某一电平表示何种意义，接口部件的信号线的用途。</li><li>规程特性(过程特性)：定义各条物理线路的工作规程和时序关系。</li></ul><h1 id="数据通信的基础知识">2 数据通信的基础知识</h1><p><img src="https://api.codetool.top/img/15861831088122.png" alt></p><h2 id="数据通信系统模型">2.1 数据通信系统模型</h2><p>在传统的电话线（ASDL）上网中，数据需要进行调制解调，数据通信系统模型：</p><ul><li>源系统<ul><li>源点（信源）：产生要传输的数据</li><li>发送器：调制传输的数据从数字信号转换为模拟信号</li></ul></li><li>传输系统：传送模拟信号</li><li>目的系统<ul><li>接收器：接收模拟信号，并解调为数字信号</li><li>终点（信宿）：从接收器获取比特流</li></ul></li></ul><h3 id="基带信号与宽带信号">2.1.1 基带信号与宽带信号</h3><p>基带信号：将数字信号1和0直接用两种不同的电压表示，再送到数字信道上去传输(基带传输)。来自信源的信号，像计算机输出的代表各种文字或图像文件的数据信号都属于基带信号。基带信号就是发出的直接表达了要传输的信息的信号，比如我们说话的声波就是基带信号。</p><p>宽带信号：将基带信号进行调制后形成的频分复用模拟信号，再传送到模拟信道上去传输(宽带传输)。把基带信号经过<strong>载波调制</strong>后，<strong>把信号的频率范围搬移到较高的频段以便在信道中传输</strong>(即仅在一段频率范围内能够通过信道)。</p><h3 id="调制">2.1.2 调制</h3><p>基带调制：（信息-&gt;数字信号）</p><ul><li>不归零制：高1低0，编码容易实现，但没有检错功能，且无法判断一个码元的开始和结束，以至于收发双方难以保持同步。</li><li>归零制：信号电平在一个码元之内都要恢复到零的这种编码成编码方式。</li><li>曼彻斯特编码：信号周期内会发生跳变，向上跳为0，向下跳为1。也可以采用相反的规定。</li><li>差分曼彻斯特编码：首先位中心必跳变，如果该位的前半段（和上一个位的后半段）相反，则为0，相同则为1。</li></ul><p><img src="https://api.codetool.top/img/15861879851932.png" alt></p><p>带通调制：（数字信号-&gt;模拟信号）</p><p><img src="https://api.codetool.top/img/15861883565831.png" alt></p><p>分别对应调幅、调频、调相。</p><p>正交振幅调制QAM：调幅+调相。</p><h2 id="相关概念">2.2 相关概念</h2><h3 id="信道">2.2.1 信道</h3><p><strong>信道:</strong> 信号的传输媒介。一般用来表示向某一个方向传送信息的介质，因此一条通信线路往往包含一条发送信道和一条接收信道。 </p><h3 id="三种通信方式">2.2.2 三种通信方式</h3><ol><li>单工通信（单向通信）只有一个方向的通信而没有反方向的交互，仅需要一条信道。</li><li>半双工通信（双向交替通信）通信的双方都可以发送或接收信息，但任何一方都不能同时发送和接收，需要两条信道。</li><li>全双工通信（双向同时通信）：通信双方可以同时发送和接受信息，也需要两条信道。</li></ol><h3 id="码元">2.2.3 码元</h3><p><strong>码元</strong>是指用一个<strong>固定时长的信号波形(数字脉冲)</strong>，代表不同离散数值的基本波形，是数字通信中数字信号的计量单位，<strong>这个时长内的信号称为k进制码元</strong>，而<strong>该时长称为码元宽度</strong>。当码元的离散状态有M个时(M大于2)，此时码元为M进制码元。</p><p>1码元可以携带多个比特的信息量。例如，<strong>在使用二进制编码时，只有两种不同的码元，一种代表0状态，另一种代表1状态。</strong></p><h3 id="两种速率表示方式">2.2.4 两种速率表示方式</h3><p><strong>速率</strong>也叫数据率，是指数据的传输速率，表示单位时间内传输的数据量。可以用<strong>码元传输速率和信息传输速率</strong>表示。</p><p><strong>码元传输速率:</strong> 别名码元速率、波形速率、调制速率、符号速率等，它表示单位时间内数字通信系统所传输的码元个数(也可称为脉冲个数或信号变化的次数)，单位是波特(Baud) 。<strong>1波特表示数字通信系统每秒传输一个码元</strong>。这里的码元可以是多进制的，也可以是二进制的，但码元速率与进制数无关。</p><p><strong>信息传输速率:</strong> 别名信息速率、比特率等，表示<strong>单位时间内数字通信系统传输的二进制码元个数(即比特数)</strong>，单位是比特/秒(b/s) 。</p><p><strong>对于二进制码元，波特和比特/秒的含义是一样的，因为二进制码元携带的比特量就是1比特</strong></p><h3 id="失真">2.2.5 失真</h3><p>信号在传输过程中，由于实际信道有噪声、干扰、带宽的限制，导致接收端接收的信号和发送端发送的信号不一致，这就是失真现象。所谓失真就是失去了真实性。</p><p>影响失真程度的因素：码元传输速率、信号的传输距离、噪声干扰、传输媒体的质量。</p><p>码元传输速率越大、信号传输距离越远、噪声干扰越大、或传输媒体质量越差，波形失真越严重。</p><h3 id="码间串扰">2.2.6 码间串扰</h3><p>具体的信道所能通过的频率范围是有限的。对于信号带宽小的信号，由于实际信道的干扰等，会使信号衰减导致失真严重。而对于信号带宽过大的信号，如果信号中的<strong>高频分量在传输过程受到衰减</strong>，那么在接收端收到的波形前沿和后沿变得不那么陡峭了，每一个码元所占的时间界限也不再是很明确的。这样，在<strong>接收端接收到的信号波形就失去了码元之间清晰的界限（可以类比一排密集的点快速的移动，点与点之间的界限就会变得很模糊</strong>，就很难分辨有多少个点了，如果点分布的疏，移动慢速，就可以很清晰的分辨每一个点）。</p><p><img src="https://api.codetool.top/img/15861868115257.webp" alt></p><h3 id="奈氏准则">2.2.7 奈氏准则</h3><p>奈氏准则：<strong>在理想低通（无噪声、带宽受限）条件下，为了避免码间串扰，极限码元传输速率为<code>2W Baud</code>，W是信道带宽，单位是HZ。</strong></p><p>通过奈氏准则可知，如果信道的频带越宽，能够通过的信号高频分量越多，那么就可以用更高速率传送码元而不出现码间串扰。由于码元的传输速率受奈氏准则的制约，所以<strong>要提高数据的传输速率，就必须设法使每个码元能携带更多的个比特量的信息，这就需要多元制的调制方法。</strong></p><h3 id="信噪比">2.2.8 信噪比</h3><p>信噪比就是信号的平均功率和噪声的平均功率之比，常记于S/N，并用分贝（dB）作为度量单位。即</p><p><code>信噪比（dB） = 10 lg(S/N) (dB)</code></p><h3 id="香农公式">2.2.9 香农公式</h3><p><strong>在带宽受限且有噪声的信道中</strong>，为了不产生误差，信息的数据传输率有上限值。</p><p>信道的极限数据传输速率 = W log<sub>2</sub>(1+S/N) (b/s)</p><p>总结：</p><ol><li>信道的带宽越大或信道的信噪比越大，则信息的极限传输速率就越高。</li><li>对一定的传输带宽和一定的信噪比，信息传输速率的上限就确定了。</li><li>只要信息的传输速率低于信道的极限传输速率，就一定能找到某种方法来实现无差错传输。</li><li>香农定理得出的是极限信息传输速率，实际信道能达到的传输速率要比它低很多。</li></ol><h1 id="传输媒体">3 传输媒体</h1><p><img src="https://api.codetool.top/img/15861831231734.png" alt></p><h1 id="信道复用技术">4 信道复用技术</h1><p><img src="https://api.codetool.top/img/15861831413598.png" alt></p><h1 id="数字传输系统">5 数字传输系统</h1><p><img src="https://api.codetool.top/img/15861831529164.png" alt></p><h1 id="宽带接入技术">6 宽带接入技术</h1><p><img src="https://api.codetool.top/img/15861831894871.png" alt></p><h1 id="物理层常见设备">7 物理层常见设备</h1><h2 id="中继器">7.1 中继器</h2><p><strong>诞生原因:</strong> 由于存在损耗，在线路上传输的信号功率会逐渐衰减，衰减到一定程度时将造成信号失真，因此会导致接收错误。</p><p><strong>中继器的功能:</strong> 对信号进行再生和还原，对衰减的信号进行放大，保持与原数据相同，以增加信号传输的距离，延长网络的长度。</p><p><strong>中继器的两端:</strong> 两端的网络部分是网段，而不是子网，适用于完全相同的两类网络的互连，且两个网段速率要相同。</p><p>中继器只将任何电缆段上的数据发送到另一段电缆上，它仅作用于信号的电气部分，并不管数据中是<br>否有错误数据或不适于网段的数据。两端可连相同媒体，也可连不同媒体。但是两端的网段一定要是同一个协议。</p><h2 id="集线器">7.2 集线器</h2><p>集线器是一种多口中继器。它也可以对信号进行再生和还原，对衰减的信号进行放大。接着<strong>转发到其他所有(除输入端口外)处于工作状态的端口上</strong>，以增加信号传输的距离，延长网络的长度。<strong>不具备信号的定向传送能力，是一个共享式设备。</strong></p><p><strong>集线器不隔离冲突域，同一集线器下的主机属于同一个冲突域</strong>，所以通过集线器互联的局域网内的主机数到达一定数量之后通信效率会急剧降低。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里的物理层指的是原理体系结构的物理层，对应OSI七层模型的物理层，对应TCP/IP四层模型中的网络接口层中的一部分。它为数据链路层提供服务，为数据传输提供可靠环境。&lt;/p&gt;
&lt;h1 id=&quot;基本概念&quot;&gt;1 基本概念&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://api
      
    
    </summary>
    
    
      <category term="计算机相关" scheme="https://www.codetool.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="计算机网络" scheme="https://www.codetool.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Redis常用数据类型使用的数据结构</title>
    <link href="https://www.codetool.top/article/Redis%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BD%BF%E7%94%A8%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://www.codetool.top/article/Redis常用数据类型使用的数据结构/</id>
    <published>2020-04-06T11:00:07.000Z</published>
    <updated>2020-04-06T12:20:32.018Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考资源：</p><p>[Redis数据结构——压缩列表 - 老於` - 博客园](<a href="https://www.cnblogs.com/hunternet/p/11306690.html" target="_blank" rel="noopener">https://www.cnblogs.com/hunternet/p/11306690.html</a>)</p><p>极客时间《数据结构与算法之美》</p><p>总体来说，Redis的key-value数据存储是通过哈希表实现的，那么具体到某一数据类型，又是使用了什么数据结构呢？这里我们着重看Redis中的五大数据类型：String、Hash、List、Set、Sorted_set。其中String类型非常简单，就是字符串。</p><h1 id="List">1 List</h1><p>我们先来看列表。列表这种数据类型支持存储一组数据。这种数据类型对应两种实现方法，一种是压缩列表（ziplist），另一种是双向循环链表。</p><h2 id="压缩列表（ZipList）">1.1 压缩列表（ZipList）</h2><p>当列表中存储的数据量比较小的时候，列表就可以采用压缩列表的方式实现。具体需要同时满足下面两个条件：</p><ul><li>列表中保存的单个数据（有可能是字符串类型的）小于 64 字节。</li><li>列表中数据个数少于 512 个。</li></ul><p>它不是基础数据结构，而是 Redis 自己设计的一种数据存储结构。它有点儿类似数组，通过一片连续的内存空间，来存储数据。不过，它跟数组不同的一点是，它允许存储的数据大小不同（可以混合存储不同类型，不同大小的数据）。</p><p>听到“压缩”两个字，直观的反应就是节省内存。之所以说这种存储结构节省内存,是相较于数组的存储思路而言的。我们知道,数组要求每个元素的大小相同,如果我们要存储不同长度的字符串,那我们就需要用最大长度的字符串大小作为元素的大小(假设是20个字节)。存储小于 20 个字节长度的字符串的时候，便会浪费部分存储空间。</p><p><img src="https://api.codetool.top/img/15861719516161.png" alt></p><p>数组的优势是占用一片连续的空间可以很好的利用CPU缓存访问数据。如果我们想要保留这种优势，又想节省存储空间我们可以对数组进行压缩。</p><p><img src="https://api.codetool.top/img/158617199613.png" alt></p><p>但是这样有一个问题，我们在遍历它的时候由于不知道每个元素的大小是多少，因此也就无法计算出下一个节点的具体位置。这个时候我们可以给每个节点增加一个length的属性。</p><p><img src="https://api.codetool.top/img/15861720704814.png" alt></p><p>这种设计思想并不少见，java的class文件字节码中涉及到字段表、方法表、属性表，都会先给一个数据项数，然后紧跟的是数据项的列表，每一个数据项开头都会记录数据项的长度。这部分相关内容见<a href="../Java字节码实例探究">Java字节码实例探究</a></p><p>Redis中的压缩列表，构成如下图：</p><p><img src="https://api.codetool.top/img/15861721358278.png" alt></p><p>一个压缩列表可以包含任意多个节点(entry),<strong>每个节点可以保存一个字节数组或者一个整数值</strong>。除了存储节点外，头部还存储了额外的信息：</p><ul><li>zlbytes：列表总长度</li><li>zltail：最后一个节点地址据列表起始地址的偏移量</li><li>zllen：节点个数</li></ul><p>尾部附加了一个<code>zlend</code>作为结束的标识。</p><p>压缩列表相较于数组，虽然节省了空间，但失去了数组的随机访问性，由于每个数据项的大小都可能不同，不能通过计算偏移量来获取某一中间元素的地址，只能顺序访问，这一点就跟链表一样，比链表好的是物理上的存储还是连续的，不必多次寻址。所以数据项较多时压缩列表就不适用了，进而使用双向循环链表。</p><h2 id="双向循环链表">1.2 双向循环链表</h2><p>当不满足压缩列表的使用条件时，就使用双向循环链表，这部分较简单。</p><p><img src="https://api.codetool.top/img/15861730113811.png" alt></p><h1 id="Hash">2 Hash</h1><p>Hash类型又称字典类型，也有两种实现方式。一种是我们刚刚讲到的压缩列表，另一种是散列表。</p><p>同样，只有当存储的数据量比较小的情况下，Redis 才使用压缩列表来实现字典类型。具体需要满足两个条件：</p><ul><li>字典中保存的键和值的大小都要小于 64 字节；</li><li>字典中键值对的个数要小于 512 个。</li></ul><p>当不能同时满足上面两个条件的时候，Redis 就使用散列表来实现字典类型。Redis 使用<code>MurmurHash2</code> 这种运行速度快、随机性好的哈希算法作为哈希函数。<strong>对于哈希冲突问题，Redis 使用链表法（拉链法）来解决。</strong>除此之外，Redis 还支持散列表的动态扩容、缩容。</p><p>当数据动态增加之后，散列表的装载因子会不停地变大。为了避免散列表性能的下降，<strong>当装载因子大于 1 的时候（对于使用拉链法解决哈希冲突的哈希表装载因子是有可能大于1的），Redis 会触发扩容，将散列表扩大为原来大小的 2 倍左右。</strong></p><p>当数据动态减少之后，为了节省内存，<strong>当装载因子小于 0.1 的时候，Redis 就会触发缩容，缩小为字典中数据个数的大约 2 倍大小。</strong></p><p>由于扩容缩容要做大量的数据搬移和哈希值的重新计算，比较耗时。针对这个问题，Redis 使用了渐进式扩容缩容策略，将数据的搬移分批进行，避免了大量数据一次性搬移导致的服务停顿。</p><h1 id="Set">3 Set</h1><p>集合这种数据类型用来存储一组不重复的数据。这种数据类型也有两种实现方法，一种是基于有序数组，另一种是基于散列表。</p><p>当要存储的数据，同时满足下面这样两个条件的时候，Redis 就采用有序数组，来实现集合这种数据类型。</p><ul><li>存储的数据都是整数。</li><li>存储的数据元素个数不超过 512 个。</li></ul><p>当不能同时满足这两个条件的时候，Redis 就使用散列表来存储集合中的数据。</p><h1 id="Sorted-set">4 Sorted_set</h1><p>Sorted_set又称有序集合，它用来存储一组数据，并且每个数据会附带一个得分（权重）。根据得分实现对个数据进行排序。</p><p>它的底层通过跳表实现，相关内容参考<a href="../跳表-披着链表外衣的伪搜索树">跳表-披着链表外衣的伪搜索树</a>。通过得分的大小，我们将数据组织成跳表这样的数据结构，以支持快速地按照得分值、得分区间获取数据。</p><p>实际上，跟 Redis 的其他数据类型一样，有序集合也并不仅仅只有跳表这一种实现方式。当数据量比较小的时候，Redis 会用压缩列表来实现有序集合。具体点说就是，使用压缩列表来实现有序集合的前提，有这样两个：</p><ul><li>所有数据的大小都要小于 64 字节。</li><li>元素个数要小于 128 个。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文参考资源：&lt;/p&gt;
&lt;p&gt;[Redis数据结构——压缩列表 - 老於` - 博客园](&lt;a href=&quot;https://www.cnblogs.com/hunternet/p/11306690.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;h
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="Redis" scheme="https://www.codetool.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>leetcode72-编辑距离</title>
    <link href="https://www.codetool.top/article/leetcode72-%E7%BC%96%E8%BE%91%E8%B7%9D%E7%A6%BB/"/>
    <id>https://www.codetool.top/article/leetcode72-编辑距离/</id>
    <published>2020-04-06T05:23:46.000Z</published>
    <updated>2020-04-06T05:55:00.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给你两个单词 <em>word1</em> 和 <em>word2*，请你计算出将 *word1</em> 转换成 <em>word2</em> 所使用的最少操作数 。</p><p>你可以对一个单词进行如下三种操作：</p><ol><li>插入一个字符</li><li>删除一个字符</li><li>替换一个字符</li></ol><p><strong>示例1:</strong></p><blockquote><p><strong>输入：</strong> word1 = “horse”, word2 = “ros”<br><strong>输出：</strong> 3<br><strong>解释：</strong><br>horse -&gt; rorse (将 ‘h’ 替换为 ‘r’)<br>rorse -&gt; rose (删除 ‘r’)<br>rose -&gt; ros (删除 ‘e’)      </p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入：</strong> word1 = “intention”, word2 = “execution”<br><strong>输出：</strong> 5<br><strong>解释:</strong><br>intention -&gt; inention (删除 ‘t’)<br>inention -&gt; enention (将 ‘i’ 替换为 ‘e’)<br>enention -&gt; exention (将 ‘n’ 替换为 ‘x’)<br>exention -&gt; exection (将 ‘n’ 替换为 ‘c’)<br>exection -&gt; execution (插入 ‘u’)   </p></blockquote><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>编辑距离算法，和KMP算法一样，属于字符串处理里面的经典算法了，KMP算法属于精准模式匹配，而编辑距离算法用于处理两个字符串之间的相似度，也属于一种匹配方式。</p><p>一般来说,编辑距离越小,两个字符串的相似度越大。 并且编辑距离算法广泛运用于生产中，例如搜索引擎通过编辑距离算法来智能识错，word软件通过编辑距离算法做拼写检查。</p><p>思想就是动态规划：</p><p><img src="https://api.codetool.top/img/1586151429724.png" alt></p><p>画一个矩阵，中间的格子代表从一个字符串到另一个字符串的编辑距离。</p><p>对于第一行、第一列，我们提前赋值1~n，代表仅通过插入的方式计算的编辑距离。</p><p>然后，对于任意一个格子，例如图中的红色格子<code>dp[m][n]</code>，它可能由字符串A插入一个字符、字符串B插入一个字符，字符串A修改一个字符得到，对于修改字符，如果两个字符串在该位置上的字符相同，则不用修改，对应的最小编辑距离就是<code>min(dp[m][n-1],dp[m-1][n],dp[m-1][n-1]-1)+1</code>，实际上最小的必是<code>dp[m-1][n-1]-1</code>，即此时编辑距离为<code>dp[m-1][n-1]</code>，如果两个字符串在该位置上的字符不同，则需要修改最后一个字符，此时最小编辑距离为<code>min(dp[m][n-1],dp[m-1][n],dp[m-1][n-1])+1</code></p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minDistance</span><span class="token punctuation">(</span>String word1<span class="token punctuation">,</span> String word2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n1 <span class="token operator">=</span> word1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n2 <span class="token operator">=</span> word2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第一行</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n2<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第一列</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n2<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>word1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> word2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n1<span class="token punctuation">]</span><span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给你两个单词 &lt;em&gt;word1&lt;/em&gt; 和 &lt;em&gt;word2*，请你计算出将 *word1&lt;/em&gt; 转换成 &lt;em&gt;word2&lt;/em&gt; 所使用的最少操作数 。&lt;/p&gt;
&lt;p&gt;你可以对一个单词进行如下三种操作：&lt;/p&gt;
&lt;o
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合模板引擎Thymeleaf</title>
    <link href="https://www.codetool.top/article/SpringBoot%E6%95%B4%E5%90%88%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8EThymeleaf/"/>
    <id>https://www.codetool.top/article/SpringBoot整合模板引擎Thymeleaf/</id>
    <published>2020-04-05T14:48:21.000Z</published>
    <updated>2020-04-05T14:49:09.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-对静态资源的映射规则">1 SpringBoot 对静态资源的映射规则</h1><p>所有 <code>/webjars/**</code>的请求 ，都去 classpath:/META-INF/resources/webjars/ 找资源；</p><p>resources-&gt;webjars引入静态资源</p><p><a href="http://www.webjars.org/" target="_blank" rel="noopener">http://www.webjars.org/</a></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--引入jquery-webjar--></span>在访问的时候只需要写webjars下面资源的名称即可<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.webjars<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jquery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>所有”/**” 请求，会去以下文件夹查找：</p><ul><li><code>&quot;classpath:/META-INF/resources/&quot;</code></li><li><code>&quot;classpath:/resources/&quot;</code></li><li><code>&quot;classpath:/static/&quot;</code></li><li><code>&quot;classpath:/public/&quot;</code> </li><li><code>&quot;/&quot;</code>：当前项目的根路径</li></ul><h1 id="Thymeleaf">2 Thymeleaf</h1><p>Thymeleaf是一个XML/XHTML/HTML5模板引擎，可用于Web与非Web环境中的应用开发。它是一个开源的Java库，基于Apache License 2.0许可，由Daniel Fernández创建，该作者还是Java加密库Jasypt的作者。</p><p>Thymeleaf是SpringBoot官方推荐使用的模板引擎。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="springboot相关配置">2.1 springboot相关配置</h2><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true">#thymeleaf start</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>    <span class="token key atrule">thymeleaf</span><span class="token punctuation">:</span>        <span class="token key atrule">mode</span><span class="token punctuation">:</span> HTML5        <span class="token key atrule">encoding</span><span class="token punctuation">:</span> UTF<span class="token punctuation">-</span><span class="token number">8</span>        <span class="token comment" spellcheck="true"># 开发时关闭缓存,不然没办法实现热刷新</span>        <span class="token key atrule">cache</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>        <span class="token comment" spellcheck="true"># prefix和suffix都是默认的，可不用配置</span>        <span class="token key atrule">prefix</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/templates/ <span class="token comment" spellcheck="true"># 模版存放路径</span>        <span class="token key atrule">suffix</span><span class="token punctuation">:</span> .html <span class="token comment" spellcheck="true"># 模版后缀</span>        <span class="token key atrule">servlet</span><span class="token punctuation">:</span>            <span class="token key atrule">content-type</span><span class="token punctuation">:</span> text/html<span class="token comment" spellcheck="true">#thymeleaf end</span></code></pre><h2 id="简单案例">2.2 简单案例</h2><p>创建springboot工程，配置如上所示</p><p>在<code>/template</code>下新建<code>demo1.html</code>:</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>thymeleaf入门案例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${message}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>新建controller类<code>com.rhett.controller.TestController</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span><span class="token string">"hello thymeleaf!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"demo1"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动程序，访问<code>/hello</code>资源，看到页面正确输出。</p><h2 id="基本语法">2.3 基本语法</h2><p>Thymeleaf语法可以参考 <a href="https://www.cnblogs.com/itdragon/archive/2018/04/13/8724291.html" target="_blank" rel="noopener">https://www.cnblogs.com/itdragon/archive/2018/04/13/8724291.html</a></p><p>基本语法就是在html标签中使用<code>th:**</code>属性，里面使用表达式。</p><h3 id="表达式">2.3.1 表达式</h3><p>Variable Expressions: <code>${...}</code></p><p>Selection Variable Expressions: <code>*{...}</code></p><p>Message Expressions: <code>#{...}</code></p><p>Link URL Expressions: <code>@{...}</code></p><p>Fragment Expressions: <code>~{...}</code></p><h3 id="th-action">2.3.2 th:action</h3><p>定义后台控制器路径，类似<form>标签的action属性。</form></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>login-form<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/test/hello}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>表示提交的请求地址为/test/hello</p><h3 id="th-each">2.3.3 th:each</h3><p>对象遍历，功能类似jstl中的<code>&lt;c:forEach&gt;</code>标签。</p><p>实体类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//..get..set</span><span class="token punctuation">}</span></code></pre><p>Controller添加数据</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** * 访问/test/hello  跳转到demo1页面 * @param model * @return */</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"hello welcome"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//集合数据</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token string">"深圳"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"李四"</span><span class="token punctuation">,</span><span class="token string">"北京"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"王五"</span><span class="token punctuation">,</span><span class="token string">"武汉"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"users"</span><span class="token punctuation">,</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"demo1"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>thymeleaf页面：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>下标<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>编号<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>姓名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>住址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user,userStat:${users}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>            下标:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${userStat.index}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>,        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.id}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.address}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span></code></pre><p>其中<code>user</code>代表当前遍历到的对象，<code>userStat</code>存储了一些遍历的相关信息，例如当前下标。</p><p><code>th:each</code>还可用于遍历Map、数组。</p><h3 id="th-if">2.3.4 th:if</h3><p>后台添加年龄</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//if条件</span>model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>页面输出</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${(age<span class="token punctuation">></span><span class="token punctuation">=</span>18)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>终于长大了！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h3 id="Date输出">2.3.5 Date输出</h3><p>后台添加日期</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//日期</span>model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"now"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>页面输出</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#dates.format(now,<span class="token punctuation">'</span>yyyy-MM-dd hh:ss:mm<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringBoot-对静态资源的映射规则&quot;&gt;1 SpringBoot 对静态资源的映射规则&lt;/h1&gt;&lt;p&gt;所有 &lt;code&gt;/webjars/**&lt;/code&gt;的请求 ，都去 classpath:/META-INF/resources/webjars/ 找资源；
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SpringBoot" scheme="https://www.codetool.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer05-替换空格</title>
    <link href="https://www.codetool.top/article/%E5%89%91%E6%8C%87offer05-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
    <id>https://www.codetool.top/article/剑指offer05-替换空格/</id>
    <published>2020-04-05T04:32:06.000Z</published>
    <updated>2020-04-05T04:33:43.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题（来源Leetcode）">1 原题（来源Leetcode）</h1><p>请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成”%20”。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入：</strong> s = “We are happy.”<br><strong>输出：</strong> “We%20are%20happy.”</p></blockquote><p><strong>限制：</strong></p><p><code>0 &lt;= s 的长度 &lt;= 10000</code></p><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>简单题打卡，没有思想</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">replaceSpace</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> i<span class="token operator">:</span>s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token string">' '</span><span class="token punctuation">)</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"%20"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题（来源Leetcode）&quot;&gt;1 原题（来源Leetcode）&lt;/h1&gt;&lt;p&gt;请实现一个函数，把字符串 &lt;code&gt;s&lt;/code&gt; 中的每个空格替换成”%20”。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例1:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="https://www.codetool.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>一致性哈希算法的介绍</title>
    <link href="https://www.codetool.top/article/%E4%B8%80%E8%87%B4%E6%80%A7%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95%E7%9A%84%E4%BB%8B%E7%BB%8D/"/>
    <id>https://www.codetool.top/article/一致性哈希算法的介绍/</id>
    <published>2020-04-04T15:13:19.000Z</published>
    <updated>2020-04-04T15:41:18.002Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考资源：</p><p><a href="https://zhuanlan.zhihu.com/p/98030096" target="_blank" rel="noopener">一致性Hash算法详解 - 知乎</a></p><h1 id="一致性哈希算法概述">1 一致性哈希算法概述</h1><p>分布式系统中，常常听到一种算法叫<strong>一致性哈希算法</strong>，而最常用的领域相信大家也有所耳闻——负载均衡。负载均衡有许多算法，例如轮询、随机、加权轮询/随机、最小连接数。但是假如我们需要会话粘滞（session sticky）呢？</p><p>什么是会话粘滞：给同一个客户提供服务的服务器永远是同一台，就能实现每次连接都是上次的session。例如我去银行办手续，谈到一半发现自己身份证忘带了，需要回家拿身份证，那么我拿完身份证回来之后希望还是同一个业务员来接待我。</p><p>一致性哈希算法就保证了分布式系统中每次给同一台客户机服务的主机都是同一台，而分辨是否是同一台客户机的依据就是客户机的IP。那么如何根据这个IP来选取同一台服务器来服务呢，如果使用哈希算法获取同一个哈希值，则这个哈希值的生成必须不能和服务器的个数相关，否则一旦服务器增加或者减少，最终生成的哈希值都会变化。</p><h1 id="一致性哈希算法原理">2 一致性哈希算法原理</h1><h2 id="环形hash空间">2.1 环形hash空间</h2><p>按照常用的hash算法来将对应的key哈希到一个具有2^32次方个节点的空间中，即0 ~ (2^32)-1的数字空间中。现在我们可以将这些数字头尾相连，想象成一个闭合的环形。</p><p><img src="https://api.codetool.top/img/15860140974532.jpg" alt></p><h2 id="映射服务器节点">2.2 映射服务器节点</h2><p><strong>将各个服务器进行一个哈希</strong>，具体可以选择服务器的ip或唯一主机名作为关键字进行哈希，这样<strong>每台机器就能确定其在哈希环上的位置</strong>。假设我们将四台服务器使用ip地址哈希后在环空间的位置如下：</p><p><img src="https://api.codetool.top/img/15860141686747.jpg" alt></p><h2 id="映射数据">2.3 映射数据</h2><p>现在我们将objectA、objectB、objectC、objectD四个对象（代表客户机的IP）通过特定的Hash函数计算出对应的key值，然后散列到Hash环上,然后从数据所在位置沿环顺时针“行走”，第一台遇到的服务器就是其应该定位到的服务器。</p><p><img src="https://api.codetool.top/img/15860142379243.jpg" alt></p><h2 id="服务器的删除与添加">2.4 服务器的删除与添加</h2><p>如果此时NodeC宕机了，此时Object A、B、D不会受到影响，只有Object C会重新分配到Node D上面去，而其他数据对象不会发生变化。</p><p>这时可能就有问题了，不是说能保证每次给同一个客户服务的都是同一台服务器吗？那现在把C重新分配给Node D是怎么回事？</p><p>我们只能尽可能地保证每次给同一个客户服务的都是同一台服务器，但是Node C宕机了也没办法啊😂而且影响到的只有之前分配给Node C的客户机，对于A、B、D都没有影响到。</p><p>如果在环境中新增一台服务器Node X，通过hash算法将Node X映射到环中，通过按顺时针迁移的规则，那么Object C被迁移到了Node X中，其它对象还保持这原有的存储位置。</p><h2 id="虚拟节点">2.5 虚拟节点</h2><p>前面部分讲述到的都是节点较多和节点分布较为均衡的情况，当服务器节点比较少的时候，会出现一个问题，就是此时必然造成大量数据集中到一个节点上面，极少数数据集中到另外的节点上面。</p><p><img src="https://api.codetool.top/img/15860147726736.jpg" alt></p><p>为了解决这种数据倾斜问题，一致性哈希算法引入了虚拟节点机制，即<strong>对每一个服务节点计算多个哈希，每个计算结果位置都放置一个此服务节点</strong>，称为虚拟节点。具体做法可以先确定每个物理节点关联的虚拟节点数量，然后在ip或者主机名后面增加编号。例如上面的情况，可以为每台服务器计算三个虚拟节点，于是可以分别计算 “Node A#1”、“Node A#2”、“Node A#3”、“Node B#1”、“Node B#2”、“Node B#3”的哈希值，于是形成六个虚拟节点：</p><p><img src="https://api.codetool.top/img/1586014722278.jpg" alt></p><p>同时数据定位算法不变，只是多了一步虚拟节点到实际节点的映射，例如定位到“Node A#1”、“Node A#2”、“Node A#3”三个虚拟节点的数据均定位到Node A上。这样就解决了服务节点少时数据倾斜的问题。每个物理节点关联的虚拟节点数量就根据具体的生产环境情况在确定。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文参考资源：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/98030096&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;一致性Hash算法详解 - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;一致性哈希算法概述&quot;
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="分布式" scheme="https://www.codetool.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>海量数据-两种方法解决top k问题</title>
    <link href="https://www.codetool.top/article/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE-%E4%B8%A4%E7%A7%8D%E6%96%B9%E6%B3%95%E8%A7%A3%E5%86%B3top%20k%E9%97%AE%E9%A2%98/"/>
    <id>https://www.codetool.top/article/海量数据-两种方法解决top k问题/</id>
    <published>2020-04-04T11:55:19.000Z</published>
    <updated>2020-04-04T14:33:09.376Z</updated>
    
    <content type="html"><![CDATA[<p>假如提供一百万个数据（甚至更大）的无序数组，如何从中获取最大的k个元素？</p><p>最容易想到的是先降序排序然后获取前k个元素，那假设我们用最常用的<code>O(nlogn)</code>级别的排序算法，要获取top k，时间成本也就是排序成本了，为<code>O(nlogn)</code>，而这里的n是百万级别的，那能不能更快一点呢？</p><h1 id="最小堆">1 最小堆</h1><p>假设我们设定一个最小堆，并固定这个最小堆的最大大小为k，那么任何一时刻堆顶元素都是这个堆中的第k大的数据（也是最小的数据）。来一个数据就和堆顶元素比较，如果比堆顶元素大就替换堆顶元素，并堆化。最后当所有数据都走一遍后，堆内的元素就是所有数据中最大的k个元素，而堆顶元素就是第k大的元素。</p><p>那么我们来分析一下它在时间复杂度上优化了多少吧。首先所有数据都要走一遍比较，就是n，其次维护了一个大小为k的堆，也就是说堆化的时间复杂度为<code>O(log k)</code>，那么总的时间复杂度就是<code>O(nlogk)</code> ，乍一看和先排序的时间复杂度<code>O(nlogn)</code>也没差多少，甚至说是一个衡量级别的，但毕竟这里说的是海量数据，n可能很大，k可能比较小，那么时间上就快很多了。</p><p>它的另一个好处是空间复杂度也仅为<code>O(k)</code>，不需要额外维护一个<code>O(n)</code>级别的海量数据存储。</p><p>代码实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">topKByHeap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">></span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    PriorityQueue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> minHeap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        minHeap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> minHeap<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            minHeap<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            minHeap<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>minHeap<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="快排思想">2 快排思想</h1><p><img src="https://api.codetool.top/img/15860045819866.jpg" alt></p><p><code>O(nlogk)</code>好像还是有点不够看，能不能直接优化成<code>O(n)</code>呢？</p><p>我们知道快排的思想是每次随机选取一个pivot把数组划分成相对有序的两部分，那假设第一次随机选取pivot并分区之后，后面这部分的元素数量就正好为k，不就说明后面这部分数据就是最大的k个元素，那最好时间复杂度岂不是<code>O(logn)</code>？</p><p><img src="https://api.codetool.top/img/15860048484250.jpg" alt></p><p>那么问题就成为了选中一个pivot，将数组分为前后两部分，后面部分元素的数量为k的问题。</p><p>虽然很难一次就中，但我们在一次分区后，通过比较k和后面部分元素的数量就知道了，后面部分的元素是分多了还是分少了。</p><p>如果后面的元素数量分多了，就继续在后面这部分数据中随机选取pivot，重复步骤。如果后面的元素分少了，则往前选取pivot，就形成了一种类似二分查找的步骤。</p><p>那么我们来分析一下它的时间复杂度，我们知道快速排序每次分区的时间复杂度就是<code>log(n)</code>，那么我们假设每次分区前后两部分的数量相近，那么时间复杂度就是<code>log(n)+log(n/2)+log(n/4)+...</code>，取极限为<code>log(2n)</code>，即<code>log(n)</code>级别，是不是比一开始的<code>log(nlogn)</code>快很多？特别是在海量数据的情况下。</p><p>代码实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> <span class="token function">topK</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> k <span class="token operator">></span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果是 BottomK 的话就不需要单独处理 k==n 情况了，因为划分是小于等于放在左</span>    <span class="token comment" spellcheck="true">// topK 的话如果是将大于的 k 个放在右边，那么 pivot 就变成了-1，会形成死循环。</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> IntStream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">boxed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> high <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> QuickSort<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>index <span class="token operator">!=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            index <span class="token operator">=</span> QuickSort<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            index <span class="token operator">=</span> QuickSort<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> list<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里的Quicksort得自己实现了，这里不作为重点，可以参考<a href="../十大排序算法与Java实现">十大排序算法与Java实现</a></p><h1 id="如果是找第K大的元素呢？">3 如果是找第K大的元素呢？</h1><p>作为拓展，讨论一下如果要找第K大的数据，仍然可以用这两个方法：</p><ul><li>对于最小堆则是操作一遍之后直接取堆顶元素。</li><li>对于快排思想，则是找一个pivot，使得分区之后它正好处于第<code>arr.length-k+1</code>的位置上。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;假如提供一百万个数据（甚至更大）的无序数组，如何从中获取最大的k个元素？&lt;/p&gt;
&lt;p&gt;最容易想到的是先降序排序然后获取前k个元素，那假设我们用最常用的&lt;code&gt;O(nlogn)&lt;/code&gt;级别的排序算法，要获取top k，时间成本也就是排序成本了，为&lt;code&gt;O(n
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="海量数据" scheme="https://www.codetool.top/tags/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer04-二维数组中的查找</title>
    <link href="https://www.codetool.top/article/%E5%89%91%E6%8C%87offer04-%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
    <id>https://www.codetool.top/article/剑指offer04-二维数组中的查找/</id>
    <published>2020-04-04T06:53:21.000Z</published>
    <updated>2020-04-04T07:10:44.950Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题（来源Leetcode）">1 原题（来源Leetcode）</h1><p>在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。</p><p><strong>示例:</strong></p><p>现有矩阵 matrix 如下：</p><blockquote><p>[<br>&nbsp;&nbsp;[1,&nbsp;&nbsp;&nbsp;4,&nbsp;&nbsp;7,&nbsp;11,&nbsp;15],<br>&nbsp;&nbsp;[2,&nbsp;&nbsp;&nbsp;5,&nbsp;&nbsp;8,&nbsp;12,&nbsp;19],<br>&nbsp;&nbsp;[3,&nbsp;&nbsp;&nbsp;6,&nbsp;&nbsp;9,&nbsp;16,&nbsp;22],<br>&nbsp;&nbsp;[10,&nbsp;13,&nbsp;14,&nbsp;17,&nbsp;24],<br>&nbsp;&nbsp;[18,&nbsp;21,&nbsp;23,&nbsp;26,&nbsp;30]<br>]</p></blockquote><p>给定 target = <code>5</code>，返回 <code>true</code>。</p><p>给定 target = <code>20</code>，返回 <code>false</code>。</p><p><strong>限制：</strong></p><p><code>0 &lt;= n &lt;= 1000</code></p><p><code>0 &lt;= m &lt;= 1000</code></p><p><strong>注意：</strong> 本题与主站 240 题相同：<a href="https://leetcode-cn.com/problems/search-a-2d-matrix-ii/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/search-a-2d-matrix-ii/</a></p><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>我用的dfs..思路比较清晰点。（不推荐）</p><p>官方给的题解思想（减而治之，标识数法）非常巧妙：可以从右上角或左下角开始线性搜索，因为右上角的元素为列开始的最大值，而左下角的元素为行开始的最大值。一旦这个数比要查找的数大，就可以排除这一行/这一列。</p><h2 id="代码">2.2 代码</h2><p>dfs：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrixGlo<span class="token punctuation">;</span>    Boolean<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dfs<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">findNumberIn2DArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>matrix<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        dfs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">[</span>matrix<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        matrixGlo <span class="token operator">=</span> matrix<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">>=</span>matrixGlo<span class="token punctuation">.</span>length<span class="token operator">||</span>y<span class="token operator">>=</span>matrixGlo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dfs<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> dfs<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>matrixGlo<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">></span>target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>matrixGlo<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> result <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token operator">||</span><span class="token function">dfs</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        dfs<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>标识数法:（作者：liweiwei1419）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">findNumberIn2DArray</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> rows <span class="token operator">=</span> matrix<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>rows <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> cols <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cols <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 从左下角开始查找</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> rows <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> cols <span class="token operator">&amp;&amp;</span> matrix<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                y<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> cols <span class="token operator">&amp;&amp;</span> matrix<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            x<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题（来源Leetcode）&quot;&gt;1 原题（来源Leetcode）&lt;/h1&gt;&lt;p&gt;在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。&lt;
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="https://www.codetool.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>操作系统复习01操作系统</title>
    <link href="https://www.codetool.top/article/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%A4%8D%E4%B9%A001%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>https://www.codetool.top/article/操作系统复习01操作系统/</id>
    <published>2020-04-03T14:32:21.000Z</published>
    <updated>2020-04-03T14:35:19.835Z</updated>
    
    <content type="html"><![CDATA[<p>整理一下课程笔记（今天划水）</p><h1 id="现代计算机系统">1 现代计算机系统</h1><p><img src="https://api.codetool.top/img/15859243008726.png" alt></p><h1 id="资源管理技术">2 资源管理技术</h1><p><img src="https://api.codetool.top/img/15859244357201.png" alt></p><h1 id="形成与发展">3 形成与发展</h1><p><img src="https://api.codetool.top/img/15859244561412.png" alt></p><h1 id="基本服务和用户接口">4 基本服务和用户接口</h1><p><img src="https://api.codetool.top/img/15859244747504.png" alt></p><h1 id="结构和运行模型">5 结构和运行模型</h1><p><img src="https://api.codetool.top/img/15859244891359.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整理一下课程笔记（今天划水）&lt;/p&gt;
&lt;h1 id=&quot;现代计算机系统&quot;&gt;1 现代计算机系统&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://api.codetool.top/img/15859243008726.png&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;资源管理技术&quot;&gt;
      
    
    </summary>
    
    
      <category term="计算机相关" scheme="https://www.codetool.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="操作系统" scheme="https://www.codetool.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>leetcode8-字符串转换整数 (atoi)</title>
    <link href="https://www.codetool.top/article/leetcode8-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0atoi/"/>
    <id>https://www.codetool.top/article/leetcode8-字符串转换整数atoi/</id>
    <published>2020-04-03T03:30:46.000Z</published>
    <updated>2020-04-03T03:49:00.063Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>请你来实现一个 <code>atoi</code> 函数，使其能将字符串转换成整数。</p><p>首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：</p><ul><li>如果第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字字符组合起来，形成一个有符号整数。</li><li>假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成一个整数。</li><li>该字符串在有效的整数部分之后也可能会存在多余的字符，那么这些字符可以被忽略，它们对函数不应该造成影响。<br>注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换，即无法进行有效转换。</li></ul><p>在任何情况下，若函数不能进行有效的转换时，请返回 0 。</p><p><strong>提示：</strong></p><ul><li>本题中的空白字符只包括空格字符 <code>&#39; &#39;</code> 。</li><li>假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。</li></ul><p><strong>示例1:</strong></p><blockquote><p><strong>输入：</strong> “42”<br><strong>输出：</strong> 42</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入：</strong> “&nbsp;&nbsp;&nbsp;-42”<br><strong>输出：</strong> -42<br><strong>解释:</strong> 第一个非空白字符为 ‘-‘, 它是一个负号。<br>     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入：</strong> “4193 with words”<br><strong>输出：</strong> 4193<br><strong>解释:</strong> 转换截止于数字 ‘3’ ，因为它的下一个字符不为数字。  </p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入：</strong> “words and 987”<br><strong>输出：</strong> 0<br><strong>解释:</strong> 第一个非空字符是 ‘w’, 但它不是数字或正、负号。<br>     因此无法执行有效的转换。  </p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入：</strong> “-91283472332”<br><strong>输出：</strong> -2147483648<br><strong>解释:</strong> 数字 “-91283472332” 超过 32 位有符号整数范围。<br>     因此返回 INT_MIN (−231) 。  </p></blockquote><p><strong>进阶：</strong></p><ul><li>你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。</li><li>本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？</li></ul><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>其他逻辑都还简单，就是如何判断是否溢出。可以使用运算后的值进行逆运算看是否能回推判断是否溢出。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">myAtoi</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> positive <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span><span class="token string">'+'</span><span class="token operator">||</span>chars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> positive <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>index<span class="token operator">&lt;</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token string">'0'</span><span class="token operator">&amp;&amp;</span>chars<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">&lt;=</span><span class="token string">'9'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> bias <span class="token operator">=</span> chars<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>positive<span class="token punctuation">)</span> bias <span class="token operator">=</span> <span class="token operator">-</span>bias<span class="token punctuation">;</span>                <span class="token keyword">int</span> cache <span class="token operator">=</span> ans<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span>bias<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//判断是否溢出</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cache<span class="token operator">/</span><span class="token number">10</span><span class="token operator">!=</span>ans<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>positive<span class="token punctuation">)</span> <span class="token keyword">return</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>                    <span class="token keyword">else</span> <span class="token keyword">return</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>                <span class="token punctuation">}</span>                ans <span class="token operator">=</span> cache<span class="token punctuation">;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;请你来实现一个 &lt;code&gt;atoi&lt;/code&gt; 函数，使其能将字符串转换成整数。&lt;/p&gt;
&lt;p&gt;首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。接下来的转化规则如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>IEEE754浮点数标准和舍入规则</title>
    <link href="https://www.codetool.top/article/IEEE754%E6%B5%AE%E7%82%B9%E6%95%B0%E6%A0%87%E5%87%86%E5%92%8C%E8%88%8D%E5%85%A5%E8%A7%84%E5%88%99/"/>
    <id>https://www.codetool.top/article/IEEE754浮点数标准和舍入规则/</id>
    <published>2020-04-02T13:30:19.000Z</published>
    <updated>2020-04-02T15:15:19.473Z</updated>
    
    <content type="html"><![CDATA[<p>整理一下之前的笔记</p><h1 id="浮点数与定点数">1 浮点数与定点数</h1><h2 id="定点数">1.1 定点数</h2><p>小数点在计算机中通常有两种表示方法，一种是约定所有数值数据的小数点隐含在某一个固定位置上，称为定点表示法，简称定点数。</p><p>其实整数也算是一种特殊的定点数，只是小数点默认处于末尾。</p><p>如何表示一个有符号定点数？例如，我们定义一个八位定点数表示方法，第一位为符号位，小数点位于第三位后面，则对于小数<code>1.375</code>，定点数原码表示为<code>00101100</code>，即小数点前后分别由十进制转二进制：<code>+ 01.011</code>，补码表示则进行对应的处理。</p><p>定点数的缺陷有：</p><ul><li>由于固定的小数点位置决定了整数部分位数和小数部分的位数，导致其能表示的数的范围偏小。</li><li>小数点位置难统一，现代计算机中出现的定点数已经全部规定为<strong>纯小数</strong>了，即默认整数部分是0，小数点位置位于符号位之后。</li></ul><h2 id="浮点数">1.2 浮点数</h2><p>浮点数与定点数对应，它不固定小数点位置，这是怎么做到的呢？</p><p>对应的原理其实就是，一个小数，通过小数点移位，总能将小数点移到一个统一的位置上。例如对于十进制小数<code>0.035 = 3.5 * 10^-2</code>，对于<code>0.000059 = 5.9 * 10^-5</code>。</p><p>那么二进制小数也是这样，例如，<code>0.0101 = 1.01 * 2^-2</code>。浮点数通过统一将小数表示成这种方式，做到不限制小数点的位置。</p><p>具体来说，浮点数把一个二进制数表示成如下图：</p><p><img src="https://api.codetool.top/img/15858348577366.png" alt></p><p>那么根据S、M、E就能唯一确定一个小数。要将S、M、E表示到一起，就出现了IEEE754标准。</p><blockquote><p>IEEE二进制浮点数算术标准（IEEE 754）是20世纪80年代以来最广泛使用的浮点数运算标准，为许多CPU与浮点运算器所采用。这个标准定义了表示浮点数的格式（包括负零-0）与反常值（denormal number）），一些特殊数值（无穷（Inf）与非数值（NaN）），以及这些数值的“浮点数运算符”；它也指明了四种数值舍入规则和五种例外状况（包括例外发生的时机与处理方式）。</p></blockquote><p>IEEE754将一个二进制串表示为上图末尾的那一条，其中S就是符号位，exp对应的是阶码E，而frac对应的是尾数M。</p><p>exp和frac在单精度浮点数和双精度浮点数中的长度如下所示：</p><p><img src="https://api.codetool.top/img/1585837072894.png" alt></p><h1 id="规格化浮点数">2 规格化浮点数</h1><p>那么如何确定exp和frac？</p><p>首先要了解的是，虽然阶码E是有符号的，例如 <code>1.01 * 2^-2</code>中，尾数为<code>1.01</code>，阶码为<code>-2</code>，但IEEE754中会把<strong>exp的范围转移到非负数区域，即它是一个无符号表示。</strong>（不能全为0或者全为1，因为被非规格化浮点数和特殊值占用了）</p><p>而尾数frac，则是M的小数部分，例如<code>1.01 * 2^-2</code>中，M为<code>1.01</code>，frac为<code>01</code>。</p><p><img src="https://api.codetool.top/img/15858373331935.png" alt></p><p>举例如何将十进制数转浮点数：</p><p><img src="https://api.codetool.top/img/15858377951909.png" alt></p><h1 id="非规格化浮点数">3 非规格化浮点数</h1><p>虽然规格化浮点数能表示的范围已经很牛X了，但对于很小的数还是难以表示，比如，单精度数的阶码上限不是127吗，假设我有一个小数<code>0.00...(省略127个0)...111</code>，在小数点后面连续0的个数达到了阶码上限，则通过小数点移位后，阶码会超过127，此时规格化浮点数就无法表示了。</p><p>有没有方法解决这个问题呢？</p><p>IEEE定义了非规格化浮点数，此时就<strong>不要求尾数部分以<code>1.*</code>开头了，而是用<code>0.*</code>表示</strong>。然后阶码域必须最小，即exp全为0，因为尾数域的规则改了，要平滑过渡到规格化浮点数，此时<code>E=-Bias+1</code>，和规格化浮点数的计算有不同。</p><p><img src="https://api.codetool.top/img/15858384367562.png" alt></p><p>这种思想其实就是<strong>用精度换范围</strong>，因为frac的长度本身有限，非规格化浮点数的尾数部分前面用0填充，使得尾数部分有效位个数减少，精度也就对应减少。</p><p><img src="https://api.codetool.top/img/15858385838055.png" alt></p><p>非规格化浮点数可以表示0，并且区分+0和-0（即符号位不同）。</p><h1 id="特殊值">4 特殊值</h1><p>IEEE754还定义了无穷、NaN，它们的exp全为1。</p><p><img src="https://api.codetool.top/img/15858388387642.png" alt></p><p>有意思的是，浮点数运算中，任何数除以0都会等于无穷。</p><h1 id="舍入（Rounding）规则">5 舍入（Rounding）规则</h1><p>因为部分小数在计算机中不能精确表示成浮点数，IEEE754定义了四种舍入规则。它们是：</p><ul><li>向偶数舍入，也称为向最接近的值舍入。它和四舍五入类似，但是四舍五入会遇到问题，比如<code>2.5</code>和2、3之间的差值都为0.5，那么它应该往2舍入还是往3舍入呢？四舍五入是往3舍入，而向偶数舍入确保<strong>舍入后的最低有效数字是偶数。</strong> 则应该往2舍入。 对于二进制而言，就代表舍入后最低有效数字必须为0。<ul><li><strong>向偶数舍入是计算机的默认舍入方式。</strong></li></ul></li><li>向0舍入，对应C/C++的类型转换。<code>(int) 1.324 = 1</code>，<code>(int) -1.324 = -1</code></li><li>向下舍入，C/C++函数floor()。例如：<code>floor(1.324) = 1</code>，<code>floor(-1.324) = -2</code></li><li>向上舍入：C/C++函数ceil()。例如：<code>ceil(1.324) = 2</code>，<code>Ceil(-1.324) = -1</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整理一下之前的笔记&lt;/p&gt;
&lt;h1 id=&quot;浮点数与定点数&quot;&gt;1 浮点数与定点数&lt;/h1&gt;&lt;h2 id=&quot;定点数&quot;&gt;1.1 定点数&lt;/h2&gt;&lt;p&gt;小数点在计算机中通常有两种表示方法，一种是约定所有数值数据的小数点隐含在某一个固定位置上，称为定点表示法，简称定点数。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="计算机相关" scheme="https://www.codetool.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="基础知识" scheme="https://www.codetool.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>leetcode289-生命游戏</title>
    <link href="https://www.codetool.top/article/leetcode289-%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/"/>
    <id>https://www.codetool.top/article/leetcode289-生命游戏/</id>
    <published>2020-04-02T01:38:11.000Z</published>
    <updated>2020-04-02T01:45:02.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>根据 <a href="https://baike.baidu.com/item/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/2926434?fr=aladdin" target="_blank" rel="noopener">百度百科</a> ，生命游戏，简称为生命，是英国数学家约翰·何顿·康威在 1970 年发明的细胞自动机。</p><p>给定一个包含 m × n 个格子的面板，每一个格子都可以看成是一个细胞。每个细胞都具有一个初始状态：1 即为活细胞（live），或 0 即为死细胞（dead）。每个细胞与其八个相邻位置（水平，垂直，对角线）的细胞都遵循以下四条生存定律：</p><p>如果活细胞周围八个位置的活细胞数少于两个，则该位置活细胞死亡；<br>如果活细胞周围八个位置有两个或三个活细胞，则该位置活细胞仍然存活；<br>如果活细胞周围八个位置有超过三个活细胞，则该位置活细胞死亡；<br>如果死细胞周围正好有三个活细胞，则该位置死细胞复活；<br>根据当前状态，写一个函数来计算面板上所有细胞的下一个（一次更新后的）状态。下一个状态是通过将上述规则同时应用于当前状态下的每个细胞所形成的，其中细胞的出生和死亡是同时发生的。</p><p><strong>示例:</strong></p><blockquote><p><strong>输入：</strong><br>[<br>&nbsp;&nbsp;[0,1,0],<br>&nbsp;&nbsp;[0,0,1],<br>&nbsp;&nbsp;[1,1,1],<br>&nbsp;&nbsp;[0,0,0]<br>]<br><strong>输出：</strong><br>[<br>&nbsp;&nbsp;[0,0,0],<br>&nbsp;&nbsp;[1,0,1],<br>&nbsp;&nbsp;[0,1,1],<br>&nbsp;&nbsp;[0,1,0]<br>]</p></blockquote><p><strong>进阶：</strong></p><ul><li>你可以使用原地算法解决本题吗？请注意，面板上所有格子需要同时被更新：你不能先更新某些格子，然后使用它们的更新后的值再更新其他格子。</li><li>本题中，我们使用二维数组来表示面板。原则上，面板是无限的，但当活细胞侵占了面板边界时会造成问题。你将如何解决这些问题？</li></ul><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>可以对每一个元素扫描其周围八个元素中1的个数，然后保存下来，这个状态的保存有两种方式，一种是新建一个二维数组保存（空间复杂度<code>O(mn)</code>），另一个则是拓展原数组每个元素值的含义（原地算法）</p><p>时间复杂度：扫描m*n个元素，每次扫描检查周围8个格子。即时间复杂度为<code>O(8mn)=O(mn)</code></p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">maxDepthAfterSplit</span><span class="token punctuation">(</span>String seq<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> seq<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                ans<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span>                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;根据 &lt;a href=&quot;https://baike.baidu.com/item/%E7%94%9F%E5%91%BD%E6%B8%B8%E6%88%8F/2926434?fr=aladdin&quot; target=&quot;_blank&quot; re
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用OpenResty实现Nginx层面的多级缓存查询响应</title>
    <link href="https://www.codetool.top/article/%E4%BD%BF%E7%94%A8OpenResty%E5%AE%9E%E7%8E%B0Nginx%E5%B1%82%E9%9D%A2%E7%9A%84%E5%A4%9A%E7%BA%A7%E7%BC%93%E5%AD%98%E6%9F%A5%E8%AF%A2%E5%93%8D%E5%BA%94/"/>
    <id>https://www.codetool.top/article/使用OpenResty实现Nginx层面的多级缓存查询响应/</id>
    <published>2020-04-01T13:44:35.000Z</published>
    <updated>2020-04-01T17:24:19.891Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenResty概述">1 OpenResty概述</h1><p>OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。</p><p>OpenResty® 通过<strong>汇聚各种设计精良的 Nginx 模块</strong>（主要由 OpenResty 团队自主开发），从而将 Nginx 有效地变成一个强大的通用 Web 应用平台。这样，Web 开发人员和系统工程师<strong>可以使用 Lua 脚本语言调动 Nginx 支持的各种 C 以及 Lua 模块，快速构造出足以胜任 10K 乃至 1000K 以上单机并发连接的高性能 Web 应用系统。</strong></p><p>OpenResty® 的目标是让你的Web服务直接跑在 Nginx 服务内部，充分利用 Nginx 的非阻塞 I/O 模型，不仅仅对 HTTP 客户端请求,甚至于对远程后端诸如 MySQL、PostgreSQL、Memcached 以及 Redis 等都进行一致的高性能响应。</p><p>以上介绍来自官网：<a href="http://openresty.org/cn/" target="_blank" rel="noopener">http://openresty.org/cn/</a></p><p><a href="https://www.cnblogs.com/huanxiyun/articles/6676972.html" target="_blank" rel="noopener">由Lua 粘合的Nginx生态环境 - 天涯逐梦 - 博客园</a> 是OpenResty作者章亦春在2012年厦门TechClub沙龙上发表的一次关于OpenResty技术介绍的演讲听录。</p><p>下面这个网址则是章亦春用 Perl 生成的一个简单 git 动画，可能就是在这次大会上当作幻灯片使用：</p><p><a href="http://agentzh.org/misc/slides/ngx-openresty-ecosystem" target="_blank" rel="noopener">http://agentzh.org/misc/slides/ngx-openresty-ecosystem</a></p><h1 id="安装">2 安装</h1><p>添加仓库执行命令</p><pre><code>yum install yum-utilsyum-config-manager --add-repo https://openresty.org/package/centos/openresty.repo</code></pre><p>执行安装</p><pre><code>yum install openresty</code></pre><p>安装成功后 会在默认的目录如下：</p><pre><code>/usr/local/openresty</code></pre><p>OpenResty默认已经集成了nginx,在目录：/usr/local/openresty/nginx 下。</p><h1 id="在nginx层面实现多级缓存查询">3 在nginx层面实现多级缓存查询</h1><p><img src="https://api.codetool.top/img/15857443207883.png" alt></p><p>为什么要这样做：</p><p>在Nginx层面响应请求，不用再转发给后端服务器，减少后端服务器的压力</p><h2 id="步骤">3.1 步骤</h2><p>在<code>nginx.conf</code>中定义lua缓存命名空间及其大小：</p><pre class=" language-nginx"><code class="language-nginx"><span class="token keyword">user</span>  <span class="token keyword">root</span> <span class="token keyword">root</span><span class="token punctuation">;</span><span class="token keyword">worker_processes</span>  <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">events</span> <span class="token punctuation">{</span>    <span class="token keyword">worker_connections</span>  <span class="token number">1024</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">http</span> <span class="token punctuation">{</span>    <span class="token keyword">include</span>       mime<span class="token punctuation">.</span><span class="token keyword">types</span><span class="token punctuation">;</span>    <span class="token keyword">default_type</span>  application<span class="token operator">/</span>octet<span class="token operator">-</span>stream<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#定义Nginx缓存模块，模块名字叫dis_cache,容量大小128M</span>    lua_shared_dict dis_cache 128m<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#keepalive_timeout  0;</span>    <span class="token keyword">keepalive_timeout</span>  <span class="token number">65</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#gzip  on;</span>    <span class="token keyword">server</span> <span class="token punctuation">{</span>        <span class="token keyword">listen</span>       <span class="token number">80</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#监听的域名</span>        <span class="token keyword">server_name</span>  localhost<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#表示所有以 localhost/read_content的请求都由该配置处理</span>        <span class="token keyword">location</span> <span class="token operator">/</span>read_content <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">#content_by_lua_file:所有请求都交给指定的lua脚本处理(/root/lua/read_content.lua)</span>            content_by_lua_file <span class="token operator">/</span><span class="token keyword">root</span><span class="token operator">/</span>lua<span class="token operator">/</span>read_content<span class="token punctuation">.</span>lua<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>lua脚本：</p><pre class=" language-lua"><code class="language-lua">ngx<span class="token punctuation">.</span>header<span class="token punctuation">.</span>content_type<span class="token operator">=</span><span class="token string">"application/json;charset=utf8"</span><span class="token keyword">local</span> uri_args <span class="token operator">=</span> ngx<span class="token punctuation">.</span>req<span class="token punctuation">.</span><span class="token function">get_uri_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">local</span> id <span class="token operator">=</span> uri_args<span class="token punctuation">[</span><span class="token string">"id"</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">--获取本地缓存</span><span class="token keyword">local</span> cache_ngx <span class="token operator">=</span> ngx<span class="token punctuation">.</span>shared<span class="token punctuation">.</span>dis_cache<span class="token comment" spellcheck="true">--根据ID 获取本地缓存数据</span><span class="token keyword">local</span> contentCache <span class="token operator">=</span> cache_ngx<span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'content_cache_'</span><span class="token operator">..</span>id<span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 如果nginx缓存中没有，读取redis缓存</span><span class="token keyword">if</span> contentCache <span class="token operator">==</span> <span class="token string">""</span> <span class="token keyword">or</span> contentCache <span class="token operator">==</span> <span class="token keyword">nil</span> <span class="token keyword">then</span>    <span class="token keyword">local</span> redis <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"resty.redis"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">local</span> red <span class="token operator">=</span> redis<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    red<span class="token punctuation">:</span><span class="token function">set_timeout</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>    red<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"192.168.176.129"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span>    <span class="token keyword">local</span> rescontent<span class="token operator">=</span>red<span class="token punctuation">:</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"content_"</span><span class="token operator">..</span>id<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">-- 如果redis缓存中没有，读取mysql数据库</span>    <span class="token keyword">if</span> ngx<span class="token punctuation">.</span>null <span class="token operator">==</span> rescontent <span class="token keyword">then</span>        <span class="token keyword">local</span> cjson <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"cjson"</span><span class="token punctuation">)</span>        <span class="token keyword">local</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"resty.mysql"</span><span class="token punctuation">)</span>        <span class="token keyword">local</span> db <span class="token operator">=</span> mysql<span class="token punctuation">:</span><span class="token function">new</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        db<span class="token punctuation">:</span><span class="token function">set_timeout</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span>        <span class="token keyword">local</span> props <span class="token operator">=</span> <span class="token punctuation">{</span>            host <span class="token operator">=</span> <span class="token string">"192.168.176.129"</span><span class="token punctuation">,</span>            port <span class="token operator">=</span> <span class="token number">3306</span><span class="token punctuation">,</span>            database <span class="token operator">=</span> <span class="token string">"changgou_content"</span><span class="token punctuation">,</span>            user <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">,</span>            password <span class="token operator">=</span> <span class="token string">"123456"</span>        <span class="token punctuation">}</span>        <span class="token keyword">local</span> res <span class="token operator">=</span> db<span class="token punctuation">:</span><span class="token function">connect</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span>        <span class="token keyword">local</span> select_sql <span class="token operator">=</span> <span class="token string">"select url,pic from tb_content where status ='1' and category_id="</span><span class="token operator">..</span>id<span class="token operator">..</span><span class="token string">" order by sort_order"</span><span class="token punctuation">;</span>        res <span class="token operator">=</span> db<span class="token punctuation">:</span><span class="token function">query</span><span class="token punctuation">(</span>select_sql<span class="token punctuation">)</span>        <span class="token keyword">local</span> responsejson <span class="token operator">=</span> cjson<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">-- 写入redis缓存</span>        red<span class="token punctuation">:</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"content_"</span><span class="token operator">..</span>id<span class="token punctuation">,</span>responsejson<span class="token punctuation">)</span>        ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>responsejson<span class="token punctuation">)</span><span class="token punctuation">;</span>        db<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">-- 如果redis缓存中存在数据，响应数据并写入nginx缓存</span>    <span class="token keyword">else</span>        cache_ngx<span class="token punctuation">:</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'content_cache_'</span><span class="token operator">..</span>id<span class="token punctuation">,</span> rescontent<span class="token punctuation">,</span> <span class="token number">10</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>rescontent<span class="token punctuation">)</span>    <span class="token keyword">end</span>    red<span class="token punctuation">:</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 如果nginx缓存中存在直接响应</span><span class="token keyword">else</span>    ngx<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>contentCache<span class="token punctuation">)</span><span class="token keyword">end</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OpenResty概述&quot;&gt;1 OpenResty概述&lt;/h1&gt;&lt;p&gt;OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="OpenResty" scheme="https://www.codetool.top/tags/OpenResty/"/>
    
  </entry>
  
  <entry>
    <title>Lua脚本语言概述和基本语法</title>
    <link href="https://www.codetool.top/article/Lua%E8%84%9A%E6%9C%AC%E8%AF%AD%E8%A8%80%E6%A6%82%E8%BF%B0%E5%92%8C%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>https://www.codetool.top/article/Lua脚本语言概述和基本语法/</id>
    <published>2020-04-01T10:06:12.000Z</published>
    <updated>2020-04-01T17:26:04.949Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lua概述">1 Lua概述</h1><h2 id="介绍">1.1 介绍</h2><p>Lua 是一个小巧的<strong>脚本语言</strong>。它是巴西里约热内卢天主教大学（Pontifical Catholic University of Rio de Janeiro）里的一个由Roberto Ierusalimschy、Waldemar Celes 和 Luiz Henrique de Figueiredo三人所组成的研究小组于1993年开发的。 其设计目的是为了通过灵活嵌入应用程序中从而为应用程序提供灵活的扩展和定制功能。<strong>Lua由标准C编写而成，几乎在所有操作系统和平台上都可以编译，运行。</strong>Lua并没有提供强大的库，这是由它的定位决定的。所以Lua不适合作为开发独立应用程序的语言。Lua 有一个同时进行的JIT项目，提供在特定平台上的即时编译功能。</p><p>简单来说：</p><p>Lua 是一种轻量小巧的脚本语言，用标准C语言编写并以源代码形式开放，<strong>其设计目的是为了嵌入应用程序中，从而为应用程序提供灵活的扩展和定制功能。</strong></p><h2 id="特性">1.2 特性</h2><ul><li>支持面向过程(procedure-oriented)编程和函数式编程(functional programming)；</li><li>自动内存管理；只提供了一种通用类型的表（table），用它可以实现数组，哈希表，集合，对象；</li><li>语言内置模式匹配；闭包(closure)；函数也可以看做一个值；提供多线程（协同进程，并非操作系统所支持的线程）支持；</li><li>通过闭包和table可以很方便地支持面向对象编程所需要的一些关键机制，比如数据抽象，虚函数，继承和重载等。</li></ul><h2 id="应用场景">1.3 应用场景</h2><ul><li>游戏开发</li><li>独立应用脚本</li><li>Web 应用脚本</li><li>扩展和数据库插件如：MySQL Proxy 和 MySQL WorkBench</li><li>安全系统，如入侵检测系统</li><li>redis中嵌套调用实现类似事务的功能</li><li>web容器中应用处理一些过滤、缓存等等的逻辑，例如nginx。</li></ul><h1 id="安装">2 安装</h1><p>先安装一些依赖</p><pre><code>yum install libtermcap-devel ncurses-devel libevent-devel readline-devel</code></pre><p>下载并编译</p><pre><code>wget http://www.lua.org/ftp/lua-5.3.5.tar.gztar zxf lua-5.3.5.tar.gzcd lua-5.3.5make linux test</code></pre><p>此时再执行lua测试看lua是否安装成功</p><pre><code>[root@localhost ~]# luaLua 5.3.5 Copyright (C) 1994-2008 Lua.org, PUC-Rio</code></pre><h1 id="HelloWorld入门程序">3 HelloWorld入门程序</h1><p>创建hello.lua文件，内容为</p><pre class=" language-lua"><code class="language-lua"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>保存并退出。</p><p>执行命令</p><pre><code>lua hello.lua</code></pre><p>查看输出：</p><pre><code>Hello</code></pre><h1 id="基本语法">4 基本语法</h1><h2 id="注释">4.1 注释</h2><p>一行注释：两个减号是单行注释:</p><pre class=" language-lua"><code class="language-lua"><span class="token comment" spellcheck="true">-- 单行注释</span></code></pre><p>多行注释：</p><pre class=" language-lua"><code class="language-lua"><span class="token comment" spellcheck="true">--[[ 多行注释 多行注释 --]]</span></code></pre><h2 id="定义变量">4.2 定义变量</h2><p>全局变量，默认的情况下，定义一个变量都是全局变量，</p><p>如果要用局部变量 需要声明为local.例如：</p><pre class=" language-lua"><code class="language-lua"><span class="token comment" spellcheck="true">-- 全局变量赋值</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token comment" spellcheck="true">-- 局部变量赋值</span><span class="token keyword">local</span> b<span class="token operator">=</span><span class="token number">2</span> </code></pre><p>如果变量没有初始化，则它的值为nil</p><h2 id="数据类型">4.3 数据类型</h2><p>Lua 是弱类型语言，变量不要类型定义,只需要为变量赋值。 值可以存储在变量中，作为参数传递或结果返回。</p><p>Lua 中有 8 个基本类型分别为：nil、boolean、number、string、userdata、function、thread 和 table。</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>nil</td><td>这个最简单，只有值nil属于该类，表示一个无效值（在条件表达式中相当于false）。</td></tr><tr><td>boolean</td><td>包含两个值：false和true。</td></tr><tr><td>number</td><td>表示双精度类型的实浮点数</td></tr><tr><td>string</td><td>字符串由一对双引号或单引号来表示</td></tr><tr><td>function</td><td>由 C 或 Lua 编写的函数</td></tr><tr><td>userdata</td><td>表示任意存储在变量中的C数据结构</td></tr><tr><td>thread</td><td>表示执行的独立线路，用于执行协同程序</td></tr><tr><td>table</td><td>Lua 中的表（table）其实是一个“关联数组”（associative arrays），数组的索引可以是数字、字符串或表类型。在 Lua 里，table 的创建是通过“构造表达式”来完成，最简单构造表达式是{}，用来创建一个空表。</td></tr></tbody></table><p>实例：</p><pre class=" language-lua"><code class="language-lua"><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">--> string</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token number">10.4</span><span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token comment" spellcheck="true">--> number</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>print<span class="token punctuation">)</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">--> function</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">--> function</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token keyword">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token comment" spellcheck="true">--> boolean</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span><span class="token keyword">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">--> nil</span></code></pre><h2 id="流程控制">4.4 流程控制</h2><h3 id="if">4.4.1 if</h3><p>Lua if 语句 由一个布尔表达式作为条件判断，其后紧跟其他语句组成。</p><pre class=" language-lua"><code class="language-lua"><span class="token keyword">if</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token keyword">then</span>   <span class="token comment" spellcheck="true">--[ 在condition为 true 时执行的语句 --]</span><span class="token keyword">end</span></code></pre><h3 id="if-else语句">4.4.2 if..else语句</h3><p>Lua if 语句可以与 else 语句搭配使用, 在 if 条件表达式为 false 时执行 else 语句代码块。</p><pre class=" language-lua"><code class="language-lua"><span class="token keyword">if</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token keyword">then</span>   <span class="token comment" spellcheck="true">--[ condition为 true 时执行该语句块 --]</span><span class="token keyword">else</span>   <span class="token comment" spellcheck="true">--[ condition为 false 时执行该语句块 --]</span><span class="token keyword">end</span></code></pre><h3 id="while">4.4.3 while</h3><p>Lua 编程语言中 while 循环语句在判断条件为 true 时会重复执行循环体语句。</p><pre class=" language-lua"><code class="language-lua"><span class="token keyword">while</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token keyword">do</span>   statements<span class="token keyword">end</span></code></pre><h3 id="for">4.4.4 for</h3><pre class=" language-lua"><code class="language-lua"><span class="token keyword">for</span> var<span class="token operator">=</span>exp1<span class="token punctuation">,</span>exp2<span class="token punctuation">,</span>exp3 <span class="token keyword">do</span>      <span class="token operator">&lt;</span>执行体<span class="token operator">></span>  <span class="token keyword">end</span>  </code></pre><p>var 从 exp1 变化到 exp2，每次变化以 exp3 为步长递增 var，并执行一次 “执行体”。exp3 是可选的，如果不指定，默认为1。</p><p>例：</p><pre class=" language-lua"><code class="language-lua"><span class="token keyword">for</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token keyword">do</span>   <span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">end</span></code></pre><p>代表从1开始循环，循环数据到9结束，每次递增2</p><p>其他语言的逻辑应该是<code>for(int i = 0;i &lt;= 9;i ++)</code></p><h3 id="repeat…until">4.4.5 repeat…until</h3><pre class=" language-lua"><code class="language-lua"><span class="token keyword">repeat</span>   statements<span class="token keyword">until</span><span class="token punctuation">(</span> condition <span class="token punctuation">)</span></code></pre><p>这个有点像其他语言的do…while，但条件判断是反过来的，即do…while not</p><h2 id="函数">4.5 函数</h2><p>lua中也可以定义函数，类似于java中的方法。例如：</p><pre class=" language-lua"><code class="language-lua"><span class="token comment" spellcheck="true">--[[ 函数返回两个值的最大值 --]]</span><span class="token keyword">function</span> <span class="token function">max</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>num1 <span class="token operator">></span> num2<span class="token punctuation">)</span> <span class="token keyword">then</span>      result <span class="token operator">=</span> num1<span class="token punctuation">;</span>   <span class="token keyword">else</span>      result <span class="token operator">=</span> num2<span class="token punctuation">;</span>   <span class="token keyword">end</span>   <span class="token keyword">return</span> result<span class="token punctuation">;</span> <span class="token keyword">end</span><span class="token comment" spellcheck="true">-- 调用函数</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"两值比较最大值为 "</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"两值比较最大值为 "</span><span class="token punctuation">,</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h2 id="表">4.6 表</h2><p>table 是 Lua 的一种数据结构用来帮助我们创建不同的数据类型，如：数组、字典等。就像PHP具有关联数组和索引数组一样（为PHP上一柱香）</p><p>Lua也是通过table来解决模块（module）、包（package）和对象（Object）的。例如string.format表示使用”format”来索引table string。</p><pre class=" language-lua"><code class="language-lua"><span class="token comment" spellcheck="true">-- 初始化表</span>mytable <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">-- 指定值</span>mytable<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token string">"Lua"</span>mytable<span class="token punctuation">[</span><span class="token string">"Lua"</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token number">1</span><span class="token comment" spellcheck="true">-- 移除引用</span>mytable <span class="token operator">=</span> <span class="token keyword">nil</span><span class="token comment" spellcheck="true">-- lua 垃圾回收会释放内存</span></code></pre><h2 id="模块">4.7 模块</h2><h3 id="定义模块">4.7.1 定义模块</h3><p>模块类似于一个封装库，从 Lua 5.1 开始，Lua 加入了标准的模块管理机制，<strong>可以把一些公用的代码放在一个文件里，以 API 接口的形式在其他地方调用</strong>，有利于代码的重用和降低代码耦合度。</p><p>创建一个文件叫module.lua，在module.lua中创建一个独立的模块，代码如下：</p><pre class=" language-lua"><code class="language-lua"><span class="token comment" spellcheck="true">-- 文件名为 module.lua</span><span class="token comment" spellcheck="true">-- 定义一个名为 module 的模块</span>module <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">-- 定义一个常量</span>module<span class="token punctuation">.</span>constant <span class="token operator">=</span> <span class="token string">"这是一个常量"</span><span class="token comment" spellcheck="true">-- 定义一个函数</span><span class="token keyword">function</span> module<span class="token punctuation">.</span><span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"这是一个公有函数"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">local</span> <span class="token keyword">function</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"这是一个私有函数！"</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">function</span> module<span class="token punctuation">.</span><span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">end</span><span class="token keyword">return</span> module</code></pre><p>（这熟悉感，仿佛看到了ES6的模块）</p><p>上面的 func2 声明为程序块的局部变量，即表示一个私有函数，因此是不能从外部访问模块里的这个私有函数，必须通过模块里的公有函数来调用。</p><h3 id="引用模块">4.7.2 引用模块</h3><p>require 用于 引入其他的模块，类似于java中的类要引用别的类的效果。</p><pre class=" language-lua"><code class="language-lua"><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"&lt;模块名>"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 或者</span>require <span class="token string">"&lt;模块名>"</span></code></pre><p>我们可以将上面定义的module模块引入使用,创建一个test_module.lua文件，代码如下：</p><pre class=" language-lua"><code class="language-lua"><span class="token comment" spellcheck="true">-- test_module.lua 文件</span><span class="token comment" spellcheck="true">-- module 模块为上文提到到 module.lua</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"module"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>constant<span class="token punctuation">)</span>module<span class="token punctuation">.</span><span class="token function">func3</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Lua概述&quot;&gt;1 Lua概述&lt;/h1&gt;&lt;h2 id=&quot;介绍&quot;&gt;1.1 介绍&lt;/h2&gt;&lt;p&gt;Lua 是一个小巧的&lt;strong&gt;脚本语言&lt;/strong&gt;。它是巴西里约热内卢天主教大学（Pontifical Catholic University of Rio de
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Lua" scheme="https://www.codetool.top/tags/Lua/"/>
    
  </entry>
  
  <entry>
    <title>leetcode1111-有效括号的嵌套深度</title>
    <link href="https://www.codetool.top/article/leetcode1111-%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7%E7%9A%84%E5%B5%8C%E5%A5%97%E6%B7%B1%E5%BA%A6/"/>
    <id>https://www.codetool.top/article/leetcode1111-有效括号的嵌套深度/</id>
    <published>2020-04-01T02:12:53.000Z</published>
    <updated>2020-04-02T01:53:17.015Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p><strong>有效括号字符串</strong> 仅由 <code>&quot;(&quot;</code> 和 <code>&quot;)&quot;</code> 构成，并符合下述几个条件之一：</p><ul><li>空字符串</li><li>连接，可以记作 <code>AB</code>（<code>A</code> 与 <code>B</code> 连接），其中 <code>A</code> 和 <code>B</code> 都是有效括号字符串</li><li>嵌套，可以记作 <code>(A)</code>，其中 <code>A</code> 是有效括号字符串</li></ul><p>类似地，我们可以定义任意有效括号字符串 <code>s</code> 的 <strong>嵌套深度</strong> <code>depth(S)</code>：</p><ul><li><code>s</code> 为空时，<code>depth(&quot;&quot;) = 0</code></li><li><code>s</code> 为 <code>A</code> 与 <code>B</code> 连接时，<code>depth(A + B) = max(depth(A), depth(B))</code>，其中 <code>A</code> 和 <code>B</code> 都是有效括号字符串</li><li><code>s</code> 为嵌套情况，<code>depth(&quot;(&quot; + A + &quot;)&quot;) = 1 + depth(A)</code>，其中 A 是有效括号字符串<br>例如：<code>&quot;&quot;</code>，<code>&quot;()()&quot;</code>，和 <code>&quot;()(()())&quot;</code> 都是有效括号字符串，嵌套深度分别为 0，1，2，而 <code>&quot;)(&quot;</code> 和 <code>&quot;(()&quot;</code> 都不是有效括号字符串。</li></ul><p>给你一个有效括号字符串 <code>seq</code>，将其分成两个不相交的子序列 <code>A</code> 和 <code>B</code>，且 <code>A</code> 和 <code>B</code> 满足有效括号字符串的定义（注意：<code>A.length + B.length = seq.length</code>）。</p><p>现在，你需要从中选出 <strong>任意</strong> 一组有效括号字符串 <code>A</code> 和 <code>B</code>，使 <code>max(depth(A), depth(B))</code> 的可能取值最小。</p><p>返回长度为 <code>seq.length</code> 答案数组 <code>answer</code> ，选择 <code>A</code> 还是 <code>B</code> 的编码规则是：如果 <code>seq[i]</code> 是 <code>A</code> 的一部分，那么 <code>answer[i] = 0</code>。否则，<code>answer[i] = 1</code>。即便有多个满足要求的答案存在，你也只需返回 <strong>一个</strong>。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入：</strong> seq = “(()())”<br><strong>输出：</strong> [0,1,1,1,1,0]   </p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入：</strong> seq = “()(())()”<br><strong>输出：</strong> [0,0,0,1,1,0,1,1]  </p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= text.size &lt;= 10000</code></li></ul><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>如果用栈模拟括号匹配，在栈中只存放左括号，当出现右括号的时候，左括号在栈中的下标（用ArrayList模拟栈）即代表了其在原字符串中的嵌套深度，那么要将深度均分，只需要每次出栈的时候将下标为奇偶的括号均分给A和B。</p><p>时间复杂度：<code>O(n)</code>，n为字符串长度。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">maxDepthAfterSplit</span><span class="token punctuation">(</span>String seq<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> seq<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                ans<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span>                ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span>                stack<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;有效括号字符串&lt;/strong&gt; 仅由 &lt;code&gt;&amp;quot;(&amp;quot;&lt;/code&gt; 和 &lt;code&gt;&amp;quot;)&amp;quot;&lt;/code&gt; 构成，并符合下述几个条件之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;空字符
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>写一下近况</title>
    <link href="https://www.codetool.top/article/%E5%86%99%E4%B8%80%E4%B8%8B%E8%BF%91%E5%86%B5/"/>
    <id>https://www.codetool.top/article/写一下近况/</id>
    <published>2020-03-31T14:27:35.000Z</published>
    <updated>2020-04-01T16:20:15.825Z</updated>
    
    <content type="html"><![CDATA[<p>今天已经是三月份的最后一天了，统计显示我这个月已经发了136篇博客，平均每天发表了4篇以上，总体来说还挺满意的。</p><p><img src="https://api.codetool.top/img/15856649563960.png" alt></p><p>这个月的博客基本上是在写一些java高级技术的使用，基础知识写的少一点，下面是按照时间线划分的这个月写过的博客主题的一个列表：</p><ul><li>Redis</li><li>SQL调优</li><li>日志框架</li><li>SpringBoot</li><li>RabbitMQ</li><li>Netty</li><li>Zookeeper+Dubbo</li><li>SpringCloud</li><li>SpringCloud Alibaba</li><li>Lucene</li><li>docker</li></ul><p>最近忙着在做项目，可能每日的更新更新数达不到之前了，不过还是能保证每天至少两篇，一篇leetcode题解，另一篇的主题其实挺难想的，最近已经有点不知道写什么了，不过做项目这段时间可能写的多的还是Java高级技术的一些使用。再往后可能就会尽量多写一些基础知识，比如计算机相关的，还有源码研究啥的，也很久没更新过了，我还得边复习，好多东西学了又忘，复习的东西也不可能写成博客再发表一次。</p><p>然后，谈谈新冠病毒疫情吧，这东西真的见证历史，今天全球病例数达到80万了，这数字真挺可怕的。不久前宣布东京奥运会延期到2021，然后今天教育部宣布高考延期一个月，真的是出生以来第一次见高考延期，要是秋招能延期一个月该多好啊😂。</p><p>秋招越来越近了，希望自己能扛住压，不要辜负这段时间的努力。</p><p>加油(ง •_•)ง</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天已经是三月份的最后一天了，统计显示我这个月已经发了136篇博客，平均每天发表了4篇以上，总体来说还挺满意的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://api.codetool.top/img/15856649563960.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;这个
      
    
    </summary>
    
    
      <category term="日常/随笔" scheme="https://www.codetool.top/categories/%E6%97%A5%E5%B8%B8-%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="日常" scheme="https://www.codetool.top/tags/%E6%97%A5%E5%B8%B8/"/>
    
  </entry>
  
  <entry>
    <title>分布式文件系统FastDFS的了解及Java客户端使用</title>
    <link href="https://www.codetool.top/article/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9FFastDFS%E7%9A%84%E4%BA%86%E8%A7%A3%E5%8F%8AJava%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.codetool.top/article/分布式文件系统FastDFS的了解及Java客户端使用/</id>
    <published>2020-03-31T07:38:50.000Z</published>
    <updated>2020-03-31T08:16:27.457Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考于： <a href="https://github.com/tobato/FastDFS_Client" target="_blank" rel="noopener">https://github.com/tobato/FastDFS_Client</a></p><h1 id="FastDFS概述">1 FastDFS概述</h1><p>FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。</p><p>FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。</p><ul><li>FastDFS是一个轻量级的开源分布式文件系统</li><li>FastDFS主要解决了大容量的文件存储和高并发访问的问题，文件存取时实现了负载均衡</li><li>FastDFS实现了软件方式的RAID，可以使用廉价的IDE硬盘进行存储</li><li>支持存储服务器在线扩容</li><li>支持相同内容的文件只保存一份，节约磁盘空间</li><li>FastDFS只能通过Client API访问，不支持POSIX访问方式</li><li>FastDFS特别适合大中型网站使用，用来存储资源文件（如：图片、文档、音频、视频等等）</li></ul><h2 id="FastDFS架构">1.1 FastDFS架构</h2><p>FastDFS 服务端架构包括 Tracker server 和 Storage server。客户端请求 Tracker server 进行文件上传、下载，通过Tracker server 调度最终由 Storage server 完成文件上传和下载。</p><p>Tracker server 作用是负载均衡和调度，通过 Tracker server 在文件上传时可以根据一些策略找到Storage server 提供文件上传服务。可以将 tracker 称为追踪服务器或调度服务器。</p><p>Storage server 作用是文件存储，客户端上传的文件最终存储在 Storage 服务器上，Storageserver 没有实现自己的文件系统而是利用操作系统的文件系统来管理文件。可以将storage称为存储服务器。同一个组的storage server之间会进行文件的同步，通过数据冗余以做到高可用。</p><p><img src="https://api.codetool.top/img/15855759407947.png" alt></p><h1 id="上传流程">2 上传流程</h1><ul><li>client询问tracker可以上传到哪一个storage,或者指定获取某个组的storage</li><li>tracker返回一台可用的storage</li><li>client直接和storage通讯完成文件上传</li><li>storage保存文件以后给client返回组名(volume)和文件名称</li></ul><p>客户端上传文件后存储服务器将文件 ID 返回给客户端，此文件 ID 用于以后访问该文件的索引信息。文件索引信息包括：组名，虚拟磁盘路径，数据两级目录，文件名。</p><p>例：</p><pre><code>group1/M00/02/44/wKgDrE34E8wAAAAAAAAGkEIYJK42378.sh</code></pre><p>组名：<code>group1</code>，文件上传后所在的 storage 组名称，在文件上传成功后由 storage 服务器返回，需要客户端自行保存。</p><p>虚拟磁盘路径：<code>M00</code>，storage 配置的虚拟路径，与磁盘选项<code>store_path*</code>对应。如果配置了<code>store_path0</code> 则是 M00，如果配置了 store_path1 则是 M01，以此类推。</p><p>配置文件位置：<code>/etc/fdfs/storage.conf</code></p><p>数据两级目录：<code>/02/44</code>，storage 服务器<strong>在每个虚拟磁盘路径下创建的两级目录，用于存储数据文件</strong>。</p><p>文件名：<code>wKgDrE34E8wAAAAAAAAGkEIYJK42378.sh</code>，与文件上传时不同。是由存储服务器根据特定信息生成，文件名包含：源存储服务器 IP 地址、文件创建时间戳、文件大小、随机数和文件拓展名等信息。</p><p>这个例子中就代表了文件存储于group1的storage server中<code>/data/fast_data/data/00/00/</code>目录下</p><h1 id="docker运行fastDFS">3 docker运行fastDFS</h1><p>拉取镜像</p><pre><code>docker pull morunchang/fastdfs</code></pre><p>运行tracker</p><pre><code>docker run -d --name fastdfs-tracker --net=host morunchang/fastdfs sh tracker.sh</code></pre><p>运行storage</p><pre><code>docker run -d --name fastdfs-storage --net=host -e TRACKER_IP=192.168.176.129:22122 -e GROUP_NAME=group1 morunchang/fastdfs sh storage.sh</code></pre><ul><li>使用的网络模式是–net=host, 192.168.176.129是宿主机的IP</li><li>group1是组名，即storage的组</li><li>如果想要增加新的storage服务器，再次运行该命令，注意更换新组名</li></ul><p>设置开机启动</p><pre><code>docker update --restart=always fastdfs-trackerdocker update --restart=always fastdfs-storage</code></pre><h1 id="fastDFS-client使用">4 fastDFS-client使用</h1><p>我使用的是一个最近还在维护的第三方客户端，个人觉得封装得挺好的，很多操作都简化了。（最好搭配SpringBoot使用）</p><p>github地址： <a href="https://github.com/tobato/FastDFS_Client" target="_blank" rel="noopener">https://github.com/tobato/FastDFS_Client</a></p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/com.github.tobato/fastdfs-client --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.tobato<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastdfs-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.27.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>然后直接引入配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">fdfs</span><span class="token punctuation">:</span>  <span class="token key atrule">so-timeout</span><span class="token punctuation">:</span> <span class="token number">1500          </span><span class="token comment" spellcheck="true"># 读取超时时间</span>  <span class="token key atrule">connect-timeout</span><span class="token punctuation">:</span> <span class="token number">600      </span><span class="token comment" spellcheck="true"># 连接超时时间</span>  <span class="token key atrule">thumb-image</span><span class="token punctuation">:</span>             <span class="token comment" spellcheck="true"># 缩略图生成参数</span>    <span class="token key atrule">width</span><span class="token punctuation">:</span> <span class="token number">150</span>    <span class="token key atrule">height</span><span class="token punctuation">:</span> <span class="token number">150</span>  <span class="token key atrule">tracker-list</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#TrackerList参数,支持多个</span>    <span class="token punctuation">-</span> 192.168.176.129<span class="token punctuation">:</span><span class="token number">22122</span>  <span class="token comment" spellcheck="true"># 这个是自定义配置项</span>  <span class="token key atrule">nginx-url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//192.168.176.129<span class="token punctuation">:</span><span class="token number">8080</span></code></pre><p>就可以使用了</p><p>例，文件上传：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> FastFileStorageClient storageClient<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${fdfs.nginx-url}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String trackerUrl<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 上传文件，返回资源url     * @param file     * @return     */</span>    <span class="token keyword">public</span> String <span class="token function">upload</span><span class="token punctuation">(</span>FastFile file<span class="token punctuation">)</span><span class="token punctuation">{</span>        StorePath storePath <span class="token operator">=</span> storageClient<span class="token punctuation">.</span><span class="token function">uploadFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> trackerUrl<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>storePath<span class="token punctuation">.</span><span class="token function">getFullPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getTrackerUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> trackerUrl<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    FileService fileService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 文件上传     * @param file     * @return 资源url     * @throws Exception     */</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/upload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Result<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> MultipartFile file<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取后缀名</span>        String suffix <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Set<span class="token operator">&lt;</span>MetaData<span class="token operator">></span> metaDataSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//附带文件名元信息上传</span>        metaDataSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MetaData</span><span class="token punctuation">(</span><span class="token string">"originName"</span><span class="token punctuation">,</span>file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        FastFile fastFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FastFile</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>file<span class="token punctuation">.</span><span class="token function">getSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>suffix<span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//文件上传</span>        String path <span class="token operator">=</span> fileService<span class="token punctuation">.</span><span class="token function">upload</span><span class="token punctuation">(</span>fastFile<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Result</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> StatusCode<span class="token punctuation">.</span>OK<span class="token punctuation">,</span><span class="token string">"文件上传成功！"</span><span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="https://api.codetool.top/img/1585641988416.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文参考于： &lt;a href=&quot;https://github.com/tobato/FastDFS_Client&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/tobato/FastDFS_Client&lt;/a&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="项目/编程理论" scheme="https://www.codetool.top/categories/%E9%A1%B9%E7%9B%AE-%E7%BC%96%E7%A8%8B%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="分布式" scheme="https://www.codetool.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="FastDFS" scheme="https://www.codetool.top/tags/FastDFS/"/>
    
  </entry>
  
</feed>
