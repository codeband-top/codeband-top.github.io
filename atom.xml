<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>代码段小站</title>
  <icon>https://www.gravatar.com/avatar/4c71a513a84e4d430b9f9aed224237fc</icon>
  <subtitle>CodeTool - 个人计算机类练手小博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.codetool.top/"/>
  <updated>2020-03-15T16:41:30.493Z</updated>
  <id>https://www.codetool.top/</id>
  
  <author>
    <name>Rhett Peng</name>
    <email>pctdyx@qq.net</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>程序员面试金典01.06-字符串压缩</title>
    <link href="https://www.codetool.top/article/%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E9%87%91%E5%85%B801-06-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%8B%E7%BC%A9/"/>
    <id>https://www.codetool.top/article/程序员面试金典01-06-字符串压缩/</id>
    <published>2020-03-15T16:38:54.000Z</published>
    <updated>2020-03-15T16:41:30.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题（来源Leetcode）">1 原题（来源Leetcode）</h1><p>字符串压缩。利用字符重复出现的次数，编写一种方法，实现基本的字符串压缩功能。比如，字符串<code>aabcccccaaa</code>会变为<code>a2b1c5a3</code>。若“压缩”后的字符串没有变短，则返回原先的字符串。你可以假设字符串中只包含大小写英文字母（a至z）。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> “aabcccccaaa”<br><strong>输出:</strong> “a2b1c5a3”</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> “abbccd”<br><strong>输出:</strong> “abbccd”<br><strong>解释:</strong> “abbccd”压缩后为”a1b2c2d1”，比原字符串长度更长。</p></blockquote><p><strong>提示：</strong></p><ol><li>字符串长度在[0, 50000]范围内。</li></ol><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>重复的计数，用StringBuilder字符串拼接就行了。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">compressString</span><span class="token punctuation">(</span>String S<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> S<span class="token punctuation">;</span>        <span class="token keyword">char</span> last <span class="token operator">=</span> chars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> last<span class="token punctuation">)</span><span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>                count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                last <span class="token operator">=</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> S<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题（来源Leetcode）&quot;&gt;1 原题（来源Leetcode）&lt;/h1&gt;&lt;p&gt;字符串压缩。利用字符重复出现的次数，编写一种方法，实现基本的字符串压缩功能。比如，字符串&lt;code&gt;aabcccccaaa&lt;/code&gt;会变为&lt;code&gt;a2b1c5a3&lt;/code&gt;
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Netty心跳检测和基于Websocket协议的服务端开发</title>
    <link href="https://www.codetool.top/article/Netty%E5%BF%83%E8%B7%B3%E6%A3%80%E6%B5%8B%E5%92%8C%E5%9F%BA%E4%BA%8EWebsocket%E5%8D%8F%E8%AE%AE%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    <id>https://www.codetool.top/article/Netty心跳检测和基于Websocket协议的服务端开发/</id>
    <published>2020-03-15T14:47:59.000Z</published>
    <updated>2020-03-15T17:35:27.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="心跳检测">1 心跳检测</h1><p>在 TCP 长连接中，Netty服务端感知客户端（或是客户端感知服务端）断开连接的其中一个方法是handler的channelInactive。但可能会有一些情况，比如线路出现问题，让客户端和服务端虽然是连接状态但事实无法通信。这种情况就通过心跳检测对方是否有响应，心跳检测（心跳包的发送）需要编程人员在客户端和服务端层面实现，而Netty中提供了IdleStateHandler用于处理通道空闲的情况（在心跳机制启用的情况下就代表连接断开）。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//第一个参数没有读事件的时间，第二个参数没有写事件的时间</span><span class="token comment" spellcheck="true">//第三个参数既没有读事件也没有写事件的时间</span><span class="token comment" spellcheck="true">//设置为0代表不限制</span><span class="token comment" spellcheck="true">//满足任意一个则触发IdleStateEvent，可以在userEventTriggered中处理</span>pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IdleStateHandler</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>handler中：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">userEventTriggered</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object evt<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>evt <span class="token keyword">instanceof</span> <span class="token class-name">IdleStateEvent</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        IdleStateEvent event <span class="token operator">=</span> <span class="token punctuation">(</span>IdleStateEvent<span class="token punctuation">)</span>evt<span class="token punctuation">;</span>        String eventType <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> ALL_IDLE<span class="token operator">:</span>                eventType <span class="token operator">=</span> <span class="token string">"读写空闲"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> READER_IDLE<span class="token operator">:</span>                eventType <span class="token operator">=</span> <span class="token string">"读空闲"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> WRITER_IDLE<span class="token operator">:</span>                eventType <span class="token operator">=</span> <span class="token string">"写空闲"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"--超时时间--"</span><span class="token operator">+</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//服务器可以断开该channel连接</span>        <span class="token comment" spellcheck="true">//ctx.channel.close();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="基于Websocket的服务端开发">2 基于Websocket的服务端开发</h1><p>首先Websocket协议是基于Http协议的，它借用了HTTP协议来完成一部分握手，所以连接的请求看起来可能是这样的：</p><pre><code>GET /chat HTTP/1.1Host: server.example.comUpgrade: websocketConnection: UpgradeSec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==Sec-WebSocket-Protocol: chat, superchatSec-WebSocket-Version: 13Origin: http://example.com</code></pre><p>所以首先要给pipeline加一个<code>HttpServerCodec</code>：</p><pre class=" language-java"><code class="language-java">pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"MyHttpServerCodec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">HttpServerCodec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后是Http相关的handler</p><pre class=" language-java"><code class="language-java">pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChunkedWriteHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpObjectAggregator</span><span class="token punctuation">(</span><span class="token number">8192</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后是websocket核心handler：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//将http协议升级为websocket协议，参数代表请求的uri</span>pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebSocketServerProtocolHandler</span><span class="token punctuation">(</span><span class="token string">"/ws"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后写一个处理消息的处理器：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextWebsocketFrameHandler</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleChannelInboundHandler</span><span class="token operator">&lt;</span>TextWebSocketFrame<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">channelRead0</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> TextWebSocketFrame msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端收到消息："</span><span class="token operator">+</span>msg<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//回复消息</span>        ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextWebSocketFrame</span><span class="token punctuation">(</span><span class="token string">"服务器时间【"</span><span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"】:"</span><span class="token operator">+</span>msg<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//连接建立时，handlerAdded被调用</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerAdded</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"handlerAdded被调用"</span><span class="token operator">+</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asLongText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//连接断开时，handlerRemoved被调用</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerRemoved</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"handlerRemoved被调用"</span><span class="token operator">+</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asLongText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常发生"</span><span class="token operator">+</span>cause<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭连接</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个处理器中的<code>channelRead0</code>可以将客户端发来的消息加上服务器时间返回给客户端</p><p>服务器启动类总体看起来是这样的：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebsocketServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        EventLoopGroup bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EventLoopGroup workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            ServerBootstrap serverBootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            serverBootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span>workerGroup<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioServerSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_BACKLOG<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                            ChannelPipeline pipeline <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpServerCodec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChunkedWriteHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpObjectAggregator</span><span class="token punctuation">(</span><span class="token number">8192</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebSocketServerProtocolHandler</span><span class="token punctuation">(</span><span class="token string">"/ws"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextWebsocketFrameHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------服务器正在启动---------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ChannelFuture future <span class="token operator">=</span> serverBootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            future<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            bossGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            workerGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">7000</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">WebsocketServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>编写网页进行测试：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onsubmit</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>return false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>发送消息<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>send(this.form.message.value)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>responseText<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>清空内容<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>document.getElementById(<span class="token punctuation">'</span>responseText<span class="token punctuation">'</span>).value<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">let</span> socket<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>WebSocket<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> rt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"responseText"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://localhost:7000/ws"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//收到消息</span>        socket<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>            rt<span class="token punctuation">.</span>value <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"\n"</span> <span class="token operator">+</span> ev<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//连接开启</span>        socket<span class="token punctuation">.</span>onopen <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>            rt<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"--------连接开启了---------"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        socket<span class="token punctuation">.</span>onclose <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>            rt<span class="token punctuation">.</span>value <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"-------连接关闭了-------"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"当前浏览器不支持websocket"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//发送消息</span>    <span class="token keyword">function</span> <span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>socket<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//先判断socket是否创建好</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span>readyState <span class="token operator">==</span> WebSocket<span class="token punctuation">.</span>OPEN<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//发送消息</span>            socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"连接没有开启"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>测试：</p><p><img src="https://api.codetool.top/img/15842934886547.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;心跳检测&quot;&gt;1 心跳检测&lt;/h1&gt;&lt;p&gt;在 TCP 长连接中，Netty服务端感知客户端（或是客户端感知服务端）断开连接的其中一个方法是handler的channelInactive。但可能会有一些情况，比如线路出现问题，让客户端和服务端虽然是连接状态但事实无法通
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Netty" scheme="https://www.codetool.top/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>Netty基于Http协议的服务端开发</title>
    <link href="https://www.codetool.top/article/Netty%E5%9F%BA%E4%BA%8EHttp%E5%8D%8F%E8%AE%AE%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    <id>https://www.codetool.top/article/Netty基于Http协议的服务端开发/</id>
    <published>2020-03-15T14:14:59.000Z</published>
    <updated>2020-03-15T16:28:11.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单案例">1 简单案例</h1><p>先照常写一个Handler，注意收到的是HttpObject（实际上是一个DefaultHttpRequest）类型。它附带了客户端的请求信息（uri、请求method、请求头）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestHttpServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleChannelInboundHandler</span><span class="token operator">&lt;</span>HttpObject<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//读取事件</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">channelRead0</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> HttpObject msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"msg 类型="</span><span class="token operator">+</span>msg<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端地址"</span> <span class="token operator">+</span> ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//构建HttpResponse</span>            ByteBuf content <span class="token operator">=</span> Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"hello,我是服务器"</span><span class="token punctuation">,</span> CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>            DefaultFullHttpResponse response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultFullHttpResponse</span><span class="token punctuation">(</span>HttpVersion<span class="token punctuation">.</span>HTTP_1_1<span class="token punctuation">,</span> HttpResponseStatus<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置响应头</span>            response<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>HttpHeaderNames<span class="token punctuation">.</span>CONTENT_TYPE<span class="token punctuation">,</span><span class="token string">"text/plain; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>HttpHeaderNames<span class="token punctuation">.</span>CONTENT_LENGTH<span class="token punctuation">,</span>content<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//返回response</span>            ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在ChannelInitializer这里，为channel的pipeline添加上面写的handler。注意在前面添加一个HttpServerCodec，是Netty提供的基于HTTP的编解码器。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServerInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//向管道加入处理器</span>        <span class="token comment" spellcheck="true">//得到管道</span>        ChannelPipeline pipeline <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//加入netty提供的httpServerCodec （coder+decoder）</span>        <span class="token comment" spellcheck="true">//基于HTTP的编解码器</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"MyHttpServerCodec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">HttpServerCodec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"MyTestHttpServerHandler"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TestHttpServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动服务端的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestHttpServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//配置服务器的NIO线程组</span>        EventLoopGroup bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EventLoopGroup workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            ServerBootstrap serverBootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            serverBootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span>workerGroup<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioServerSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_BACKLOG<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TestServerInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------服务器正在启动---------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ChannelFuture future <span class="token operator">=</span> serverBootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//等待服务端监听端口关闭</span>            future<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            bossGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            workerGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">TestHttpServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样一个简单案例就实现了，只要客户端向该服务端的主机、端口发起HTTP请求，就会收到对应的响应，而由于没有判断请求方法、uri，无论什么请求都会收到一样的响应。</p><h1 id="对请求资源（uri）进行过滤">2 对请求资源（uri）进行过滤</h1><p>浏览器在对某网站发起get请求的时候，通常还会发起对该网站<code>/favicon.ico</code>的请求，如果我们不想对这个请求做出404回应，可以这样写：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestHttpServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleChannelInboundHandler</span><span class="token operator">&lt;</span>HttpObject<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//读取事件</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">channelRead0</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> HttpObject msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"msg 类型="</span><span class="token operator">+</span>msg<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端地址"</span> <span class="token operator">+</span> ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取到请求URI</span>            HttpRequest httpRequest <span class="token operator">=</span> <span class="token punctuation">(</span>HttpRequest<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>            URI uri <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span>httpRequest<span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"/favicon.ico"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>uri<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求了图标，返回404"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ByteBuf error <span class="token operator">=</span> Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"该资源不存在"</span><span class="token punctuation">,</span> CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>                DefaultFullHttpResponse response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultFullHttpResponse</span><span class="token punctuation">(</span>HttpVersion<span class="token punctuation">.</span>HTTP_1_1<span class="token punctuation">,</span> HttpResponseStatus<span class="token punctuation">.</span>NOT_FOUND<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>                response<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>HttpHeaderNames<span class="token punctuation">.</span>CONTENT_TYPE<span class="token punctuation">,</span><span class="token string">"text/plain; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                response<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>HttpHeaderNames<span class="token punctuation">.</span>CONTENT_LENGTH<span class="token punctuation">,</span>error<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//构建HttpResponse</span>            ByteBuf content <span class="token operator">=</span> Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"hello,我是服务器"</span><span class="token punctuation">,</span> CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>            DefaultFullHttpResponse response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultFullHttpResponse</span><span class="token punctuation">(</span>HttpVersion<span class="token punctuation">.</span>HTTP_1_1<span class="token punctuation">,</span> HttpResponseStatus<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>HttpHeaderNames<span class="token punctuation">.</span>CONTENT_TYPE<span class="token punctuation">,</span><span class="token string">"text/plain; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>HttpHeaderNames<span class="token punctuation">.</span>CONTENT_LENGTH<span class="token punctuation">,</span>content<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//返回response</span>            ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里通过HttpRequest来获取了客户端请求的uri，除了uri外，通过HttpRequest还可以获取：</p><ul><li><code>httpRequest.method()</code>：获取请求方法，这些方法在HttpMethod中被枚举</li><li><code>httpRequest.protocolVersion()</code>：获取协议版本，是<code>HttpVersion.HTTP_1_0</code>或<code>HttpVersion.HTTP_1_1</code></li><li><code>httpRequest.headers()</code>：请求头，可读可写，使用get/set方法</li></ul><h1 id="其他handler">3 其他handler</h1><p>在简单案例中只用了一个HttpServerCodec作为http编解码器，还有一些自带的handler可以使用：</p><ul><li><code>HttpObjectAggregator</code>，对于POST请求存在请求体，HTTP数据在传输过程中是分段传输的，HttpObjectAggregator可以将多个段聚合。</li><li><code>ChunkedWriteHandler</code>，在简单案例中，我们用了响应头的<code>CONTENT_LENGTH</code>来指定响应体的长度，而有的时候无法确定信息大小，就可以使用Chunked编码传输（分块）。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简单案例&quot;&gt;1 简单案例&lt;/h1&gt;&lt;p&gt;先照常写一个Handler，注意收到的是HttpObject（实际上是一个DefaultHttpRequest）类型。它附带了客户端的请求信息（uri、请求method、请求头）&lt;/p&gt;
&lt;pre class=&quot; langu
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Netty" scheme="https://www.codetool.top/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>Netty解决TCP粘包拆包-四种自带解码器</title>
    <link href="https://www.codetool.top/article/Netty%E8%A7%A3%E5%86%B3TCP%E7%B2%98%E5%8C%85%E6%8B%86%E5%8C%85-%E5%9B%9B%E7%A7%8D%E8%87%AA%E5%B8%A6%E8%A7%A3%E7%A0%81%E5%99%A8/"/>
    <id>https://www.codetool.top/article/Netty解决TCP粘包拆包-四种自带解码器/</id>
    <published>2020-03-15T10:09:30.000Z</published>
    <updated>2020-03-15T10:13:16.274Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考资源：</p><p><a href="https://www.cnblogs.com/crazymakercircle/p/10294745.html" target="_blank" rel="noopener">LengthFieldBasedFrameDecoder 秒懂 - 疯狂创客圈 - 博客园</a></p><p>在TCP协议中，一个完整的包可能会被拆分为多个包进行发送，也有可能把多个小的包封装成一个大的数据包进行发送，这就是所谓的TCP粘包和拆包问题。</p><h1 id="粘包-拆包发生的原因">1 粘包/拆包发生的原因</h1><ol><li>应用程序write写入的字节大小大于套接口发送缓冲区大小</li><li>进行MSS大小的TCP分段（最大报文长度）</li><li>以太网帧的payload大于MTU进行IP分片（链路层的最大传输单元）</li></ol><h2 id="发生粘包问题的时间服务器案例">1.1 发生粘包问题的时间服务器案例</h2><h3 id="服务端">1.1.1 服务端</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//配置服务器的NIO线程组</span>        EventLoopGroup bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EventLoopGroup workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            ServerBootstrap serverBootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            serverBootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span>workerGroup<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioServerSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_BACKLOG<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChildChannelHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//绑定端口，同步等待成功</span>            ChannelFuture future <span class="token operator">=</span> serverBootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//等待服务端监听端口关闭</span>            future<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            bossGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            workerGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ChildChannelHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NettyServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">NettyServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> counter<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ByteBuf buf <span class="token operator">=</span> <span class="token punctuation">(</span>ByteBuf<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>        String body <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The time server receive order: "</span><span class="token operator">+</span> body <span class="token operator">+</span> <span class="token string">"; the counter is: "</span> <span class="token operator">+</span> <span class="token operator">++</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果收到的请求是QUERY TIME ORDER就返回当前时间</span>        String currentTime <span class="token operator">=</span> <span class="token string">"QUERY TIME ORDER"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token operator">?</span><span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span>                System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">"BAD ORDER"</span><span class="token punctuation">;</span>        currentTime <span class="token operator">=</span> currentTime <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteBuf resp <span class="token operator">=</span> Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="客户端">1.1.2 客户端</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span>String host<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//配置客户端NIO线程组</span>        EventLoopGroup group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Bootstrap bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>TCP_NODELAY<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NettyClientHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ChannelFuture future <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            future<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            group<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">NettyClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyClientHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>NettyClientHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> counter<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> req<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">NettyClientHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"QUERY TIME ORDER"</span> <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelActive</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ByteBuf message <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//连续发送一百条QUERY TIME ORDER消息</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            message <span class="token operator">=</span> Unpooled<span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            message<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ByteBuf buf <span class="token operator">=</span> <span class="token punctuation">(</span>ByteBuf<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>        String body <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Now is："</span><span class="token operator">+</span>body<span class="token operator">+</span><span class="token string">"; the counter is: "</span><span class="token operator">+</span> <span class="token operator">++</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token string">"Unexpected exception from downstream: "</span><span class="token operator">+</span>cause<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>分别运行服务端和客户端，预期结果应该是服务端响应100次时间，然而服务端打印：</p><pre><code>The time server receive order: QUERY TIME ORDERQUERY TIME ORDERQUERY TIME ORDERQUERY TIME ORDERQUERY TIME ORDERQUERY TIME ORDER---省略部分，此处共57条QUERY TIME ORDER----QUERY TIME ORDERQUERY TIME ORDER; the counter is: 1The time server receive order: QUERY TIME ORDER---省略部分，此处共43条QUERY TIME ORDER----QUERY TIME ORDERQUERY TIME ORDER; the counter is: 2</code></pre><p>可见发生了粘包问题，自然客户端也没有收到正确的响应：</p><pre><code>Now is：BAD ORDERBAD ORDER; the counter is: 1</code></pre><h1 id="解决策略">2 解决策略</h1><ol><li>消息定长，例如每个报文的大小为固定长度200字节，如果不够，空位补空格;</li><li>在包尾增加回车换行符进行分割，例如FTP协议;</li><li>将消息分为消息头和消息体，消息头中包含表示消息总长度(或者消息体长度)的字段，通常设计思路为消息头的第一个字段使用int32来表示消息的总长度;</li><li>更复杂的应用层协议。</li></ol><h2 id="使用LineBasedFrameDecoder解决TCP粘包问题">2.1 使用LineBasedFrameDecoder解决TCP粘包问题</h2><p>为了解决TCP粘包/拆包导致的半包读写问题，Netty 默认提供了多种编解码器用于处理半包，LineBasedFrameDecoder是其中的一种，通过换行符来分包。</p><h2 id="使用LineBasedFrameDecoder改写后的案例">2.2 使用LineBasedFrameDecoder改写后的案例</h2><p>需要改写的有四个地方：</p><p>在NettyServer中pipeline添加处理器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ChildChannelHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LineBasedFrameDecoder</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NettyServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在NettyServerHandler中把消息当字符串处理</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//转String</span>    String body <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The time server receive order: "</span><span class="token operator">+</span> body <span class="token operator">+</span> <span class="token string">"; the counter is: "</span> <span class="token operator">+</span> <span class="token operator">++</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>    String currentTime <span class="token operator">=</span> <span class="token string">"QUERY TIME ORDER"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token operator">?</span><span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span>            System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">"BAD ORDER"</span><span class="token punctuation">;</span>    currentTime <span class="token operator">=</span> currentTime <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ByteBuf resp <span class="token operator">=</span> Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在NettyClient中pipeline添加处理器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LineBasedFrameDecoder</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NettyClientHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在NettyClientHandler中把消息当字符串处理</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    String body <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Now is："</span><span class="token operator">+</span>body<span class="token operator">+</span><span class="token string">"; the counter is: "</span><span class="token operator">+</span> <span class="token operator">++</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>再次分别运行服务端、客户端，发现问题解决：</p><pre><code>The time server receive order: QUERY TIME ORDER; the counter is: 1The time server receive order: QUERY TIME ORDER; the counter is: 2The time server receive order: QUERY TIME ORDER; the counter is: 3-----------------------省略---------------------------The time server receive order: QUERY TIME ORDER; the counter is: 98The time server receive order: QUERY TIME ORDER; the counter is: 99The time server receive order: QUERY TIME ORDER; the counter is: 100</code></pre><pre><code>Now is：Sun Mar 15 16:39:58 CST 2020; the counter is: 1Now is：Sun Mar 15 16:39:58 CST 2020; the counter is: 2Now is：Sun Mar 15 16:39:58 CST 2020; the counter is: 3-----------------------省略-------------------------Now is：Sun Mar 15 16:39:58 CST 2020; the counter is: 98Now is：Sun Mar 15 16:39:58 CST 2020; the counter is: 99Now is：Sun Mar 15 16:39:58 CST 2020; the counter is: 100</code></pre><h2 id="LineBasedFrameDecoder工作原理">2.3 LineBasedFrameDecoder工作原理</h2><p><code>LineBasedFrameDecoder</code>的工作原理是它<strong>依次遍历ByteBuf中的可读字节，判断看是否有“<code>\n</code>”或者“<code>\r\n</code>”</strong>， 如果有，就以此位置为结束位置，从可读索引到结束位置区间的字节就组成了一行。<strong>它是以换行符为结束标志的解码器</strong>，支持携带结束符或者不携带结束符两种解码方式，同时支持配置单行的最大长度。如果连续读取到最大长度后仍然没有发现换行符，就会抛出异常，同时忽略掉之前读到的异常码流。</p><p><strong>StringDecoder的功能非常简单，就是将接收到的对象转换成字符串，然后继续调用后面的Handler。 <code>LineBasedFrameDecoder + StringDecoder</code> 组合就是按行切换的文本解码器，它被设计用来支持TCP的粘包和拆包。</strong></p><p>如果发送的消息不是以换行符结束的，或者没有回车换行符，希望根据消息头中的长度字段来分包，Netty提供了多种支持TCP粘包/拆包的解码器，用来满足用户的不同诉求。</p><h2 id="其他解码器">2.4 其他解码器</h2><h3 id="DelimiterBasedFrameDecoder">2.4.1 DelimiterBasedFrameDecoder</h3><p>这是一个根据自定义分隔符分包的解码器</p><p>使用：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ChildChannelHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ByteBuf delimiter <span class="token operator">=</span> Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"$_"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第一个参数代表单条消息的最大长度，当达到该长度仍没有查到分隔符抛出异常</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelimiterBasedFrameDecoder</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span>delimiter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NettyServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>发消息的时候也要在消息末尾增加”<code>$_</code>“，和LineBasedFrameDecoder加换行符差不多的做法。</p><h3 id="FixedLengthFrameDecoder">2.4.2 FixedLengthFrameDecoder</h3><p>这是一个按固定长度分包的解码器</p><p>使用：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ChildChannelHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FixedLengthFrameDecoder</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NettyServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>无论一次接收到多少数据报，它都会按照构造函数中设置的固定长度进行解码。适用于数据长度固定的情况，否则在handler中手动填充长度也行。</p><h3 id="LengthFieldBasedFrameDecoder">2.4.3 LengthFieldBasedFrameDecoder</h3><p>这个就是在在数据包中，加了一个长度字段（长度域），保存上层包的长度。解码的时候，会按照这个长度，进行上层ByteBuf应用包的提取。</p><p>使用：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ChildChannelHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LengthFieldBasedFrameDecoder</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NettyServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中五个参数：</p><p>（1）<code>maxFrameLength</code> - 发送的数据包最大长度；</p><p>（2）<code>lengthFieldOffset</code> - 长度域偏移量，指的是长度域位于整个数据包字节数组中的下标；</p><p>（3）<code>lengthFieldLength</code> - 长度域的自己的字节数长度。</p><p>（4）<code>lengthAdjustment</code> – 长度域的偏移量矫正。 如果长度域的值，除了包含有效数据域的长度外，还包含了其他域（如长度域自身）长度，那么，就需要进行矫正。矫正的值为：包长 - 长度域的值 – 长度域偏移 – 长度域长。</p><p>（5）<code>initialBytesToStrip</code> – 丢弃的起始字节数。丢弃处于有效数据前面的字节数量。比如前面有4个节点的长度域，则它的值为4。</p><p><code>LengthFieldBasedFrameDecoder(1024,0,4,0,4)</code>的意思就是，数据包最大长度为1024，长度域占首部的四个字节，在读数据的时候去掉首部四个字节（即长度域）</p><p>在使用的时候handler写ByteBuf数据的时候应该在首部增添一个四个字节的长度域，代表数据长度。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文参考资源：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/crazymakercircle/p/10294745.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LengthFieldBasedFrameDec
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Netty" scheme="https://www.codetool.top/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>Netty使用入门案例</title>
    <link href="https://www.codetool.top/article/Netty%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/"/>
    <id>https://www.codetool.top/article/Netty使用入门案例/</id>
    <published>2020-03-15T07:42:54.000Z</published>
    <updated>2020-03-15T07:43:28.770Z</updated>
    
    <content type="html"><![CDATA[<p>maven依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.netty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>netty-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.42.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h1 id="服务端">1 服务端</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//写服务端的pipeline管道处理器，如果worker group中的NioEventLoop监听到了channel的read/write事件就会触发</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">/**     * 读取数据事件，可以读取客户端发送的消息     * ChannelHandlerContext上下文对象，含有管道pipeline，通道channel，地址     * Object 客户端发送的数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"server ctx = "</span><span class="token operator">+</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将msg转成一个ByteBuf</span>        ByteBuf buf <span class="token operator">=</span> <span class="token punctuation">(</span>ByteBuf<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端发送消息是："</span><span class="token operator">+</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端地址："</span><span class="token operator">+</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//数据读取完毕</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelReadComplete</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//write+flush，将数据写入到缓存，并刷新</span>        ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"hello，客户端~"</span><span class="token punctuation">,</span>CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//处理异常，一般是要关闭通道</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建BossGroup和WorkerGroup</span>        <span class="token comment" spellcheck="true">//1. bossGroup只处理连接请求</span>        <span class="token comment" spellcheck="true">//2. workerGroup处理业务请求</span>        <span class="token comment" spellcheck="true">//两个中都有无限循环的NioEventLoop</span>        NioEventLoopGroup bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        NioEventLoopGroup workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建服务器端的启动类</span>            ServerBootstrap bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//使用链式编程配置</span>            bootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span>workerGroup<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//设置两个线程组</span>                    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioServerSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//使用NioServerSocketChannel作为服务器的通道实现</span>                    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_BACKLOG<span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//设置线程队列得到连接个数</span>                    <span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_KEEPALIVE<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//设置保持活动连接状态</span>                    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//创建一个通道初始化对象</span>                        <span class="token comment" spellcheck="true">//给pipeline设置处理器</span>                        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NettyServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给workerGroup的EventLoop对应的管道设置处理器</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------服务器 is ready-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//sync同步阻塞等待绑定完成，返回一个ChannelFuture用于异步操作的通知回调</span>            <span class="token comment" spellcheck="true">//启动服务器</span>            ChannelFuture cf <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">6668</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//对关闭通道进行监听</span>            cf<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//关闭循环线程组</span>            bossGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            workerGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="客户端">2 客户端</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyClientHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//通道就绪事件</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelActive</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"client "</span> <span class="token operator">+</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"hello,server"</span><span class="token punctuation">,</span> CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//当通道有读取事件时，会触发</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ByteBuf buf <span class="token operator">=</span> <span class="token punctuation">(</span>ByteBuf<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器回复的消息："</span><span class="token operator">+</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器的地址："</span><span class="token operator">+</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        cause<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//客户端只需要一个事件循环组</span>        NioEventLoopGroup eventExecutors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建客户端的启动对象</span>            Bootstrap bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置相关参数</span>            bootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>eventExecutors<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NettyClientHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加入处理器</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------客户端 ok------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//启动客户端去连接服务器</span>            ChannelFuture channelFuture <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6668</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//给关闭通道进行监听</span>            channelFuture<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            eventExecutors<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="异步模型">3 异步模型</h1><p>异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的组件在完成后，通过状态、通知和回调来通知调用者。</p><p>Netty 中的 I/O 操作是异步的，包括 Bind、Write、Connect 等操作会简单的返回一个 ChannelFuture。</p><p><code>public interface ChannelFuture extends Future&lt;Void&gt;</code></p><p>调用者并不能立刻获得结果，而是通过 Future-Listener 机制，用户可以方便的主动获取或者通过通知机制获得 IO 操作结果</p><p><img src="https://api.codetool.top/img/1584256994325.png" alt></p><h1 id="异步任务的支持">4 异步任务的支持</h1><h2 id="TaskQueue">4.1 TaskQueue</h2><p>Handler中可以通过使用NioEventLoopGroup中的TaskQueue来实现异步任务，解决Handler中可能会出现的长时间阻塞问题。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"handling..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"server ctx = "</span><span class="token operator">+</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//将msg转成一个ByteBuf</span>                ByteBuf buf <span class="token operator">=</span> <span class="token punctuation">(</span>ByteBuf<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端发送消息是："</span><span class="token operator">+</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端地址："</span><span class="token operator">+</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="ScheduleTaskQueue">4.2 ScheduleTaskQueue</h2><p>可以使用ScheduleTaskQueue定义一个定时任务</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在指定延迟后执行任务</span>    ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个定时任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"server ctx = "</span><span class="token operator">+</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将msg转成一个ByteBuf</span>    ByteBuf buf <span class="token operator">=</span> <span class="token punctuation">(</span>ByteBuf<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端发送消息是："</span><span class="token operator">+</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端地址："</span><span class="token operator">+</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;maven依赖：&lt;/p&gt;
&lt;pre class=&quot; language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token pun
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Netty" scheme="https://www.codetool.top/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>leetcode695-岛屿的最大面积</title>
    <link href="https://www.codetool.top/article/leetcode695-%E5%B2%9B%E5%B1%BF%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%A2%E7%A7%AF/"/>
    <id>https://www.codetool.top/article/leetcode695-岛屿的最大面积/</id>
    <published>2020-03-14T17:12:35.000Z</published>
    <updated>2020-03-14T17:52:49.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定一个包含了一些 0 和 1的非空二维数组 <code>grid</code> , 一个 <strong>岛屿</strong> 是由四个方向 (水平或垂直) 的 1 (代表土地) 构成的组合。你可以假设二维矩阵的四个边缘都被水包围着。</p><p>找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为0。)</p><p><strong>示例 1:</strong></p><pre><code>[[0,0,1,0,0,0,0,1,0,0,0,0,0], [0,0,0,0,0,0,0,1,1,1,0,0,0], [0,1,1,0,1,0,0,0,0,0,0,0,0], [0,1,0,0,1,1,0,0,1,0,1,0,0], [0,1,0,0,1,1,0,0,1,1,1,0,0], [0,0,0,0,0,0,0,0,0,0,1,0,0], [0,0,0,0,0,0,0,1,1,1,0,0,0], [0,0,0,0,0,0,0,1,1,0,0,0,0]]</code></pre><p>对于上面这个给定矩阵应返回 <code>6</code>。注意答案不应该是11，因为岛屿只能包含水平或垂直的四个方向的‘1’。</p><p><strong>示例 2:</strong></p><pre><code>[[0,0,0,0,0,0,0,0]]</code></pre><p>对于上面这个给定的矩阵, 返回 <code>0</code>。</p><p><strong>注意:</strong> 给定的矩阵<code>grid</code> 的长度和宽度都不超过 50。</p><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>对于每个点dfs搜索四周为1的点，搜索到之后把该点标记为0，防止重复搜索。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxAreaOfIsland</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                     ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> grid<span class="token punctuation">.</span>length <span class="token operator">||</span> j <span class="token operator">>=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">||</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        num <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span>        num <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span>        num <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span>        num <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定一个包含了一些 0 和 1的非空二维数组 &lt;code&gt;grid&lt;/code&gt; , 一个 &lt;strong&gt;岛屿&lt;/strong&gt; 是由四个方向 (水平或垂直) 的 1 (代表土地) 构成的组合。你可以假设二维矩阵的四个边缘都被水包
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="DFS" scheme="https://www.codetool.top/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>Netty概述（线程模型）</title>
    <link href="https://www.codetool.top/article/Netty%E6%A6%82%E8%BF%B0%EF%BC%88%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%EF%BC%89/"/>
    <id>https://www.codetool.top/article/Netty概述（线程模型）/</id>
    <published>2020-03-14T14:26:37.000Z</published>
    <updated>2020-03-14T14:27:25.545Z</updated>
    
    <content type="html"><![CDATA[<p>netty官网： <a href="https://netty.io/" target="_blank" rel="noopener">https://netty.io/</a>  </p><h1 id="原生NIO存在的问题">1 原生NIO存在的问题</h1><ol><li>NIO 的类库和 API 繁杂，使用麻烦：需要熟练掌握 Selector、ServerSocketChannel、SocketChannel、ByteBuffer等。</li><li>需要具备其他的额外技能：要熟悉 Java 多线程编程，因为 NIO 编程涉及到 Reactor 模式，你必须对多线程和网络编程非常熟悉，才能编写出高质量的 NIO 程序。</li><li>开发工作量和难度都非常大：例如客户端面临断连重连、网络闪断、半包读写、失败缓存、网络拥塞和异常流的处理等等。</li><li>JDK NIO 的 Bug：例如臭名昭著的 Epoll Bug，它会导致 Selector 空轮询，最终导致 CPU 100%。直到 JDK 1.7 版本该问题仍旧存在，没有被根本解决。</li></ol><h1 id="Netty特点">2 Netty特点</h1><ol><li>Netty 是由 JBOSS 提供的一个 Java 开源框架，现为 Github上的独立项目。</li><li>Netty 是一个异步的、基于事件驱动的网络应用框架，用以快速开发高性能、高可靠性的网络 IO 程序。</li><li>Netty主要针对在TCP协议下，面向Clients端的高并发应用，或者Peer-to-Peer场景下的大量数据持续传输的应用。</li><li>Netty本质是一个NIO框架，适用于服务器通讯相关的多种应用场景</li></ol><h1 id="Netty线程模型">3 Netty线程模型</h1><p>目前存在的线程模型有：</p><ul><li>传统阻塞 I/O 服务模型 （即一个线程处理一个IO）</li><li>Reactor 模式</li></ul><p>Reactor模式又称反应器模式、分发者模式(Dispatcher) 、通知者模式(notifier)</p><p><img src="https://api.codetool.top/img/15841892584472.png" alt></p><p>Reactor 在一个单独的线程中运行，负责监听和分发事件，分发给适当的处理程序来对 IO 事件做出反应。 它就像公司的电话接线员，它接听来自客户的电话并将线路转移到适当的联系人。</p><p>根据 Reactor 的数量和处理资源池线程的数量不同，有 3 种典型的实现</p><ul><li>单 Reactor 单线程</li><li>单 Reactor 多线程</li><li>主从 Reactor 多线程 </li></ul><p><img src="https://api.codetool.top/img/15841895862658.png" alt="单Reactor单线程"></p><p><img src="https://api.codetool.top/img/15841904345420.png" alt="单Reactor多线程"></p><p><img src="https://api.codetool.top/img/15841907466063.png" alt="主从Reactor多线程"></p><p>mainReactor负责监听server socket，accept新连接，并将建立的socket分派给subReactor。subReactor负责多路分离已连接的socket，读写网 络数据，对业务处理功能，其扔给worker线程池完成。通常，subReactor个数上可与CPU个数等同</p><p>Netty 主要基于主从 Reactor 多线程模型，做了一定的改进，其中主从 Reactor 多线程模型有多个 Reactor</p><h1 id="netty架构">4 netty架构</h1><p><img src="https://api.codetool.top/img/1584193734966.png" alt></p><ol><li>Netty抽象出<strong>两组线程池 <code>BossGroup</code> 专门负责接收客户端的连接, <code>WorkerGroup</code> 专门负责网络的读写。</strong></li><li>BossGroup 和 WorkerGroup 类型都是 NioEventLoopGroup</li><li>NioEventLoopGroup 相当于一个事件循环组, 这个组中含有多个事件循环 ，每一个事件循环是 NioEventLoop</li><li>NioEventLoop 表示一个不断循环的执行处理任务的线程， 每个NioEventLoop 都有一个selector , 用于监听绑定在其上的socket的网络通讯</li><li>NioEventLoopGroup 可以有多个线程, 即可以含有多个NioEventLoop</li><li>每个Boss NioEventLoop 循环执行的步骤有3步<ol><li><code>select</code>: 轮询accept 事件</li><li><code>processSelectedKeys</code>: 处理accept 事件 , 与client建立连接 , 生成NioScocketChannel , 并将其注册到某个worker NIOEventLoop 上的 selector </li><li><code>runAllTasks</code>: 处理任务队列的任务 </li></ol></li><li>每个 Worker NIOEventLoop 循环执行的步骤<ol><li><code>select</code>: 轮询read, write事件</li><li><code>processSelectedKeys</code>: 处理i/o事件， 即read , write 事件，在对应NioSocketChannel处理</li><li><code>runAllTasks</code>: 处理任务队列的任务，即 runAllTasks</li></ol></li><li>每个Worker NIOEventLoop 处理业务时，会使用pipeline(管道), pipeline 中包含了 channel , 即通过pipeline 可以获取到对应通道, 管道中维护了很多的处理器</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;netty官网： &lt;a href=&quot;https://netty.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://netty.io/&lt;/a&gt;  &lt;/p&gt;
&lt;h1 id=&quot;原生NIO存在的问题&quot;&gt;1 原生NIO存在的问题&lt;/h1&gt;&lt;ol&gt;
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Netty" scheme="https://www.codetool.top/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>NIO零拷贝与其系统函数调用</title>
    <link href="https://www.codetool.top/article/NIO%E9%9B%B6%E6%8B%B7%E8%B4%9D%E4%B8%8E%E5%85%B6%E7%B3%BB%E7%BB%9F%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/"/>
    <id>https://www.codetool.top/article/NIO零拷贝与其系统函数调用/</id>
    <published>2020-03-14T11:37:17.000Z</published>
    <updated>2020-03-14T11:44:09.572Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考资源：</p><p><a href="https://blog.csdn.net/u013096088/article/details/79122671" target="_blank" rel="noopener">Java NIO学习笔记四（零拷贝详解）_Java_拿笔小星的博客-CSDN博客</a></p><h1 id="关于Buffer和Channel的注意事项和细节">1 关于Buffer和Channel的注意事项和细节</h1><ul><li>ByteBuffer不止可以存取byte类型的数据，它支持类型化的put和get, put放入的是什么数据类型，get就应该使用相应的数据类型来取出（按照顺序），否则可能有 BufferUnderflowException 异常。</li><li><code>buffer.asReadOnlyBuffer()</code>可以从一个buffer获取一个只读buffer。</li><li>NIO 中提供了<code>DirectBuffer</code>、<code>MappedByteBuffer</code> 以提高IO效率。（使用堆外内存，映射操作系统的内存），使用<code>FileChannel::map</code>返回一个MappedByteBuffer</li></ul><p><img src="https://api.codetool.top/img/1584169757224.png" alt></p><ul><li>NIO 还支持通过多个Buffer (即 Buffer 数组) 完成读写操作，即 Scattering 和 Gathering，依次写入和依次读入。</li></ul><h1 id="零拷贝">2 零拷贝</h1><p>零拷贝从操作系统角度，是指<strong>CPU不执行拷贝数据从一个存储区域到另一个存储区域的任务</strong>，这通常用于通过网络传输一个文件时以减少CPU周期和内存带宽。</p><h2 id="传统IO">2.1 传统IO</h2><p>在Java中，我们可以通过InputStream从源数据中读取数据流到一个缓冲区里，然后再将它们输入到OutputStream里。我们知道，这种IO方式传输效率是比较低的。那么，当使用上面的代码时操作系统会发生什么情况：</p><p><img src="https://api.codetool.top/img/15841726118751.png" alt="传统IO"></p><ol><li>JVM发出<code>read()</code>系统调用。</li><li>OS<strong>上下文切换到内核模式</strong>（第一次上下文切换）并将数据读取到<strong>内核空间缓冲区</strong>。(第一次拷贝：hardware —-&gt; kernel buffer）这里的数据读取是<code>DMA copy</code>，是必经步骤，不能优化掉。</li><li>OS<strong>内核然后将数据复制到用户空间缓冲区</strong>(第二次拷贝: kernel buffer ——&gt; user buffer)，然后read系统调用返回。而<strong>系统调用的返回又会导致一次内核空间到用户空间的上下文切换</strong>(第二次上下文切换)。</li><li>JVM处理代码逻辑并发送<code>write()</code>系统调用。</li><li>OS<strong>上下文切换到内核模式</strong>(第三次上下文切换)，并从用户空间缓冲区复制数据到内核空间缓冲区(第三次拷贝: user buffer ——&gt; kernel buffer)。</li><li><strong><code>write</code>系统调用返回</strong>，导致<strong>内核空间到用户空间的再次上下文切换</strong>(第四次上下文切换)。将内核空间缓冲区中的数据写到hardware(第四次拷贝: kernel buffer ——&gt; hardware)。</li></ol><p>为了减少拷贝和上下文切换的次数，常见的方法有<code>mmap</code>(内存映射)<code>sendFile</code>。</p><h2 id="mmap">2.2 mmap</h2><p>mmap通过内存映射，将文件映射到内核缓冲区，同时，用户空间可以共享内核空间的数据。这样，在进行网络传输时，就可以减少内核空间到用户控件的拷贝次数。</p><p><img src="https://api.codetool.top/img/15841829151018.png" alt="mmap"></p><ol><li><strong>发出mmap系统调用，导致用户空间到内核空间的上下文切换</strong>(第一次上下文切换)。通过DMA引擎<strong>将磁盘文件中的内容拷贝到内核空间缓冲区中</strong>(第一次拷贝: hard drive ——&gt; kernel buffer)。</li><li><strong>mmap系统调用返回，导致内核空间到用户空间的上下文切换</strong>(第二次上下文切换)。<strong>接着用户空间和内核空间共享这个缓冲区，而不需要将数据从内核空间拷贝到用户空间。</strong>因为用户空间和内核空间共享了这个缓冲区数据，所以用户空间就可以像在操作自己缓冲区中数据一般操作这个由内核空间共享的缓冲区数据。</li><li><strong>发出write系统调用，导致用户空间到内核空间的上下文切换</strong>(第三次上下文切换)。将数据从内核空间缓冲区拷贝到内核空间socket相关联的缓冲区(第二次拷贝: kernel buffer ——&gt; socket buffer)。</li><li><strong>write系统调用返回，导致内核空间到用户空间的上下文切换</strong>(第四次上下文切换)。通过DMA引擎将内核空间socket缓冲区中的数据传递到协议引擎(第三次拷贝: socket buffer ——&gt; protocol engine)</li></ol><p>通过mmap实现的零拷贝I/O进行了4次用户空间与内核空间的上下文切换，以及3次数据拷贝。其中3次数据拷贝中包括了2次DMA拷贝和1次CPU拷贝。明显，<strong>它与传统I/O相比仅仅少了1次内核空间缓冲区和用户空间缓冲区之间的CPU拷贝。</strong>这样的好处是，我们可以将整个文件或者整个文件的一部分映射到内存当中，用户直接对内存中对文件进行操作，然后是由操作系统来进行相关的页面请求并将内存的修改写入到文件当中。我们的应用程序只需要处理内存的数据，这样可以实现非常迅速的I/O操作。</p><h2 id="sendFile">2.3 sendFile</h2><p>Linux 2.1版本提供了sendFile函数，其基本原理如下：<strong>数据根本不经过用户态，直接从内核缓冲区进入到 Socket Buffer</strong>，同时，由于和用户态完全无关，就减少了一次上下文切换。</p><p><img src="https://api.codetool.top/img/15841726453552.png" alt="sendfile"></p><ol><li><strong>发出sendfile系统调用，导致用户空间到内核空间的上下文切换</strong>(第一次上下文切换)。通过DMA将磁盘文件中的内容拷贝到内核空间缓冲区中(第一次拷贝: hard driver ——&gt; kernel buffer)。</li><li>然后再<strong>将数据从内核空间缓冲区拷贝到内核中与socket相关的缓冲区中</strong>(第二次拷贝: kernel buffer ——&gt; socket buffer)。</li><li><strong>sendfile系统调用返回，导致内核空间到用户空间的上下文切换</strong>(第二次上下文切换)。通过DMA引擎将内核空间socket缓冲区中的数据传递到协议引擎(第三次拷贝: socket buffer ——&gt; protocol engine)。</li></ol><p><strong>通过sendfile实现的零拷贝I/O只使用了2次用户空间与内核空间的上下文切换，以及3次数据的拷贝。</strong> 你可能会说操作系统仍然需要在内核内存空间中复制数据（kernel buffer —&gt;socket buffer）。 是的，但从操作系统的角度来看，这已经是零拷贝，因为没有数据从内核空间复制到用户空间。 内核需要复制的原因是因为通用硬件DMA访问需要连续的内存空间（因此需要缓冲区）。 但是，如果硬件支持scatter-and-gather，这是可以避免的。</p><p>Linux 在 2.4 版本中，做了一些修改，避免了从内核缓冲区拷贝到 Socket buffer 的操作，直接拷贝到协议栈，从而再一次减少了数据拷贝。</p><p><img src="https://api.codetool.top/img/15841728116351.png" alt="sendfile改进"></p><h1 id="NIO中的零拷贝">3 NIO中的零拷贝</h1><p>NIO中有一个transferTo，它可以在两个FileChannel直接传递数据而不需要经过buffer，这对大文件的读写帮助是很大的，那它究竟使用了什么方法实现呢？我在openjdk1.8下找到了它的源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">long</span> position<span class="token punctuation">,</span> <span class="token keyword">long</span> count<span class="token punctuation">,</span>                        WritableByteChannel target<span class="token punctuation">)</span>    <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>    <span class="token function">ensureOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">.</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClosedChannelException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>readable<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NonReadableChannelException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token keyword">instanceof</span> <span class="token class-name">FileChannelImpl</span> <span class="token operator">&amp;&amp;</span>        <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>FileChannelImpl<span class="token punctuation">)</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span>writable<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NonWritableChannelException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> sz <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">></span> sz<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> icount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sz <span class="token operator">-</span> position<span class="token punctuation">)</span> <span class="token operator">&lt;</span> icount<span class="token punctuation">)</span>        icount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>sz <span class="token operator">-</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> n<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注意这个部分------------------------------------------</span>    <span class="token comment" spellcheck="true">// Attempt a direct transfer, if the kernel supports it</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">transferToDirectly</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> icount<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Attempt a mapped transfer, but only to trusted channel types</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">transferToTrustedChannel</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> icount<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Slow path for untrusted targets</span>    <span class="token keyword">return</span> <span class="token function">transferToArbitraryChannel</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> icount<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注意这个部分------------------------------------------</span><span class="token punctuation">}</span></code></pre><p>可以看出优先使用transferToDirectly，其次是transferToTrustedChannel</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">transferToDirectly</span><span class="token punctuation">(</span><span class="token keyword">long</span> position<span class="token punctuation">,</span> <span class="token keyword">int</span> icount<span class="token punctuation">,</span>                                WritableByteChannel target<span class="token punctuation">)</span>    <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>transferSupported<span class="token punctuation">)</span>        <span class="token keyword">return</span> IOStatus<span class="token punctuation">.</span>UNSUPPORTED<span class="token punctuation">;</span>    FileDescriptor targetFD <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token keyword">instanceof</span> <span class="token class-name">FileChannelImpl</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileSupported<span class="token punctuation">)</span>            <span class="token keyword">return</span> IOStatus<span class="token punctuation">.</span>UNSUPPORTED_CASE<span class="token punctuation">;</span>        targetFD <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>FileChannelImpl<span class="token punctuation">)</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span>fd<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token keyword">instanceof</span> <span class="token class-name">SelChImpl</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Direct transfer to pipe causes EINVAL on some configurations</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>target <span class="token keyword">instanceof</span> <span class="token class-name">SinkChannelImpl</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>pipeSupported<span class="token punctuation">)</span>            <span class="token keyword">return</span> IOStatus<span class="token punctuation">.</span>UNSUPPORTED_CASE<span class="token punctuation">;</span>        targetFD <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>SelChImpl<span class="token punctuation">)</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>targetFD <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> IOStatus<span class="token punctuation">.</span>UNSUPPORTED<span class="token punctuation">;</span>    <span class="token keyword">int</span> thisFDVal <span class="token operator">=</span> IOUtil<span class="token punctuation">.</span><span class="token function">fdVal</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> targetFDVal <span class="token operator">=</span> IOUtil<span class="token punctuation">.</span><span class="token function">fdVal</span><span class="token punctuation">(</span>targetFD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>thisFDVal <span class="token operator">==</span> targetFDVal<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Not supported on some configurations</span>        <span class="token keyword">return</span> IOStatus<span class="token punctuation">.</span>UNSUPPORTED<span class="token punctuation">;</span>    <span class="token keyword">long</span> n <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ti <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ti <span class="token operator">=</span> threads<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注意这个部分------------------------------------------</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            n <span class="token operator">=</span> <span class="token function">transferTo0</span><span class="token punctuation">(</span>thisFDVal<span class="token punctuation">,</span> position<span class="token punctuation">,</span> icount<span class="token punctuation">,</span> targetFDVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">==</span> IOStatus<span class="token punctuation">.</span>INTERRUPTED<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注意这个部分------------------------------------------</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> IOStatus<span class="token punctuation">.</span>UNSUPPORTED_CASE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token keyword">instanceof</span> <span class="token class-name">SinkChannelImpl</span><span class="token punctuation">)</span>                pipeSupported <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token keyword">instanceof</span> <span class="token class-name">FileChannelImpl</span><span class="token punctuation">)</span>                fileSupported <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> IOStatus<span class="token punctuation">.</span>UNSUPPORTED_CASE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> IOStatus<span class="token punctuation">.</span>UNSUPPORTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Don't bother trying again</span>            transferSupported <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> IOStatus<span class="token punctuation">.</span>UNSUPPORTED<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> IOStatus<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        threads<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>ti<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">end</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在WINDOWS下：</p><pre class=" language-c"><code class="language-c">JNIEXPORT jlong JNICALL<span class="token function">Java_sun_nio_ch_FileChannelImpl_transferTo0</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject this<span class="token punctuation">,</span>                                            jint srcFD<span class="token punctuation">,</span>                                            jlong position<span class="token punctuation">,</span> jlong count<span class="token punctuation">,</span>                                            jint dstFD<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> IOS_UNSUPPORTED<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>即Windows不支持transferToDirectly。</p><p>在unix系操作系统下：</p><pre class=" language-c"><code class="language-c">JNIEXPORT jlong JNICALL<span class="token function">Java_sun_nio_ch_FileChannelImpl_transferTo0</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject this<span class="token punctuation">,</span>                                            jint srcFD<span class="token punctuation">,</span>                                            jlong position<span class="token punctuation">,</span> jlong count<span class="token punctuation">,</span>                                            jint dstFD<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">if</span> defined(__linux__)</span>    off64_t offset <span class="token operator">=</span> <span class="token punctuation">(</span>off64_t<span class="token punctuation">)</span>position<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注意 linux -> sendfile ---------------------------------</span>    jlong n <span class="token operator">=</span> <span class="token function">sendfile64</span><span class="token punctuation">(</span>dstFD<span class="token punctuation">,</span> srcFD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>offset<span class="token punctuation">,</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EAGAIN<span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_UNAVAILABLE<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>errno <span class="token operator">==</span> EINVAL<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ssize_t<span class="token punctuation">)</span>count <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_UNSUPPORTED_CASE<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> IOS_INTERRUPTED<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">JNU_ThrowIOExceptionWithLastError</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">"Transfer failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> IOS_THROWN<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">elif</span> defined (__solaris__)</span>    sendfilevec64_t sfv<span class="token punctuation">;</span>    size_t numBytes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    jlong result<span class="token punctuation">;</span>    sfv<span class="token punctuation">.</span>sfv_fd <span class="token operator">=</span> srcFD<span class="token punctuation">;</span>    sfv<span class="token punctuation">.</span>sfv_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    sfv<span class="token punctuation">.</span>sfv_off <span class="token operator">=</span> <span class="token punctuation">(</span>off64_t<span class="token punctuation">)</span>position<span class="token punctuation">;</span>    sfv<span class="token punctuation">.</span>sfv_len <span class="token operator">=</span> count<span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token function">sendfilev64</span><span class="token punctuation">(</span>dstFD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sfv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>numBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Solaris sendfilev() will return -1 even if some bytes have been     * transferred, so we check numBytes first.     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>numBytes <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> numBytes<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EAGAIN<span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_UNAVAILABLE<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EOPNOTSUPP<span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_UNSUPPORTED_CASE<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>errno <span class="token operator">==</span> EINVAL<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ssize_t<span class="token punctuation">)</span>count <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_UNSUPPORTED_CASE<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_INTERRUPTED<span class="token punctuation">;</span>        <span class="token function">JNU_ThrowIOExceptionWithLastError</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">"Transfer failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> IOS_THROWN<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">elif</span> defined(__APPLE__)</span>    off_t numBytes<span class="token punctuation">;</span>    <span class="token keyword">int</span> result<span class="token punctuation">;</span>    numBytes <span class="token operator">=</span> count<span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token function">sendfile</span><span class="token punctuation">(</span>srcFD<span class="token punctuation">,</span> dstFD<span class="token punctuation">,</span> position<span class="token punctuation">,</span> <span class="token operator">&amp;</span>numBytes<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>numBytes <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> numBytes<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EAGAIN<span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_UNAVAILABLE<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EOPNOTSUPP <span class="token operator">||</span> errno <span class="token operator">==</span> ENOTSOCK <span class="token operator">||</span> errno <span class="token operator">==</span> ENOTCONN<span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_UNSUPPORTED_CASE<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>errno <span class="token operator">==</span> EINVAL<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ssize_t<span class="token punctuation">)</span>count <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_UNSUPPORTED_CASE<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_INTERRUPTED<span class="token punctuation">;</span>        <span class="token function">JNU_ThrowIOExceptionWithLastError</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">"Transfer failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> IOS_THROWN<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">elif</span> defined(_AIX)</span>    jlong max <span class="token operator">=</span> <span class="token punctuation">(</span>jlong<span class="token punctuation">)</span>java_lang_Integer_MAX_VALUE<span class="token punctuation">;</span>    <span class="token keyword">struct</span> sf_parms sf_iobuf<span class="token punctuation">;</span>    jlong result<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">></span> max<span class="token punctuation">)</span>        <span class="token keyword">return</span> IOS_UNSUPPORTED_CASE<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> max<span class="token punctuation">)</span>        count <span class="token operator">=</span> max<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sf_iobuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sf_iobuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sf_iobuf<span class="token punctuation">.</span>file_descriptor <span class="token operator">=</span> srcFD<span class="token punctuation">;</span>    sf_iobuf<span class="token punctuation">.</span>file_offset <span class="token operator">=</span> <span class="token punctuation">(</span>off_t<span class="token punctuation">)</span>position<span class="token punctuation">;</span>    sf_iobuf<span class="token punctuation">.</span>file_bytes <span class="token operator">=</span> count<span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token function">send_file</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dstFD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sf_iobuf<span class="token punctuation">,</span> SF_SYNC_CACHE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* AIX send_file() will return 0 when this operation complete successfully,     * return 1 when partial bytes transfered and return -1 when an error has     * Occured.     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EWOULDBLOCK<span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_UNAVAILABLE<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>errno <span class="token operator">==</span> EINVAL<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ssize_t<span class="token punctuation">)</span>count <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_UNSUPPORTED_CASE<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_INTERRUPTED<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> ENOTSOCK<span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_UNSUPPORTED<span class="token punctuation">;</span>        <span class="token function">JNU_ThrowIOExceptionWithLastError</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">"Transfer failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> IOS_THROWN<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sf_iobuf<span class="token punctuation">.</span>bytes_sent <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>jlong<span class="token punctuation">)</span>sf_iobuf<span class="token punctuation">.</span>bytes_sent<span class="token punctuation">;</span>    <span class="token keyword">return</span> IOS_UNSUPPORTED_CASE<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>    <span class="token keyword">return</span> IOS_UNSUPPORTED_CASE<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token punctuation">}</span></code></pre><p>sendfile64就是linux2.4改进后的sendfile，具体可以参考 <a href="https://linux.die.net/man/2/sendfile64" target="_blank" rel="noopener">https://linux.die.net/man/2/sendfile64</a></p><p>而<code>transferToTrustedChannel</code>就和FileChannel的map方法原理一致了，使用的是mmap，这里就不贴源码跟踪了，在windows下使用的是系统函数<code>CreateFileMapping</code>，在linux下使用的是系统函数<code>mmap64</code></p><h1 id="总结">4 总结</h1><ul><li>mmap 适合小数据量读写，sendFile 适合大文件传输。</li><li>mmap 需要 4 次上下文切换，3 次数据拷贝；sendFile 需要 3 次上下文切换，最少 2 次数据拷贝。</li><li>sendFile 可以利用 DMA 方式，减少 CPU 拷贝，mmap 则不能（必须从内核拷贝到 Socket 缓冲区）。</li><li>在Java中可以使用FileChannel的transferTo方法实现零拷贝，在windows下使用的是mmap方式，调用系统函数<code>CreateFileMapping</code>，在linux下优先使用改进后的sendFile，调用系统函数<code>sendFile64</code>。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文参考资源：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/u013096088/article/details/79122671&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java NIO学习笔记四（零拷贝详解）_Ja
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="java" scheme="https://www.codetool.top/tags/java/"/>
    
      <category term="IO" scheme="https://www.codetool.top/tags/IO/"/>
    
      <category term="NIO" scheme="https://www.codetool.top/tags/NIO/"/>
    
      <category term="操作系统" scheme="https://www.codetool.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>leetcode300-最长上升子序列</title>
    <link href="https://www.codetool.top/article/leetcode300-%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>https://www.codetool.top/article/leetcode300-最长上升子序列/</id>
    <published>2020-03-13T16:33:27.000Z</published>
    <updated>2020-03-13T16:43:58.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定一个无序的整数数组，找到其中最长上升子序列的长度。</p><p><strong>示例：</strong></p><blockquote><p><strong>输入:</strong> [10,9,2,5,3,7,101,18]<br><strong>输出:</strong> 4<br><strong>解释:</strong> 最长的上升子序列是 [2,3,7,101]，它的长度是 4。   </p></blockquote><p><strong>说明：</strong></p><ul><li>可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。</li><li>你算法的时间复杂度应该为 O(n<sup>2</sup>) 。</li></ul><p><strong>进阶:</strong> 你能将算法的时间复杂度降低到 O(n log n) 吗?</p><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>动态规划，对于某个元素，其dp值应该等于左边比其小的元素中最大的dp值+1。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> maxval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> maxval <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxval<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> maxval <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            maxCount <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxCount<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> maxCount<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定一个无序的整数数组，找到其中最长上升子序列的长度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; [10,9,2,5,3,7,101,1
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="https://www.codetool.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Spring整合RabbitMQ及其各组件介绍</title>
    <link href="https://www.codetool.top/article/Spring%E6%95%B4%E5%90%88RabbitMQ%E5%8F%8A%E5%85%B6%E5%90%84%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D/"/>
    <id>https://www.codetool.top/article/Spring整合RabbitMQ及其各组件介绍/</id>
    <published>2020-03-13T14:54:21.000Z</published>
    <updated>2020-03-13T15:42:56.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-rabbit">1 Spring-rabbit</h1><p>使用Spring-rabbit，maven依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-rabbit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>各组件介绍：</p><h2 id="RabbitAdmin">1.1 RabbitAdmin</h2><p>编写配置类，RabbitAdmin为核心操作RabbitMQ的类，我们要注入一个它的bean：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ConnectionFactory <span class="token function">connectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        CachingConnectionFactory connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CachingConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setAddresses</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> connectionFactory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RabbitAdmin <span class="token function">rabbitAdmin</span><span class="token punctuation">(</span>ConnectionFactory connectionFactory<span class="token punctuation">)</span><span class="token punctuation">{</span>        RabbitAdmin rabbitAdmin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RabbitAdmin</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitAdmin<span class="token punctuation">.</span><span class="token function">setAutoStartup</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//必须设置为true</span>        <span class="token keyword">return</span> rabbitAdmin<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>RabbitAdmin可以声明队列、交换器、绑定等。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> SpringConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RabbitAdmin rabbitAdmin<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//声明</span>        rabbitAdmin<span class="token punctuation">.</span><span class="token function">declareExchange</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">"test.direct"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitAdmin<span class="token punctuation">.</span><span class="token function">declareExchange</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TopicExchange</span><span class="token punctuation">(</span><span class="token string">"test.topic"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitAdmin<span class="token punctuation">.</span><span class="token function">declareQueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"test.direct.queue"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitAdmin<span class="token punctuation">.</span><span class="token function">declareQueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"test.topic.queue"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitAdmin<span class="token punctuation">.</span><span class="token function">declareBinding</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"test.direct.queue"</span><span class="token punctuation">,</span>Binding<span class="token punctuation">.</span>DestinationType<span class="token punctuation">.</span>QUEUE<span class="token punctuation">,</span>                <span class="token string">"test.direct"</span><span class="token punctuation">,</span><span class="token string">"direct"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitAdmin<span class="token punctuation">.</span><span class="token function">declareBinding</span><span class="token punctuation">(</span>                BindingBuilder                        <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"test.topic.queue"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//队列</span>                        <span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TopicExchange</span><span class="token punctuation">(</span><span class="token string">"test.topic"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//交换机</span>                        <span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"user.#"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指定路由key</span>        <span class="token comment" spellcheck="true">//清空队列数据</span>        rabbitAdmin<span class="token punctuation">.</span><span class="token function">purgeQueue</span><span class="token punctuation">(</span><span class="token string">"test.topic.queue"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>也可以把Queue、Exchange、Binding注入到IoC容器中，再使用。</p><h2 id="RabbitTemplate">1.2 RabbitTemplate</h2><p>该类提供了丰富的发送消息方法，包括可靠性投递消息方法、回调监听消息接口ConfirmCallback、返回值确认接口ReturnCallback等等。 同样我们需要进行注入到Spring容器中，然后直接使用。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ConnectionFactory <span class="token function">connectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        CachingConnectionFactory connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CachingConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setAddresses</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> connectionFactory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RabbitAdmin <span class="token function">rabbitAdmin</span><span class="token punctuation">(</span>ConnectionFactory connectionFactory<span class="token punctuation">)</span><span class="token punctuation">{</span>        RabbitAdmin rabbitAdmin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RabbitAdmin</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitAdmin<span class="token punctuation">.</span><span class="token function">setAutoStartup</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//必须设置为true</span>        <span class="token keyword">return</span> rabbitAdmin<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RabbitTemplate <span class="token function">rabbitTemplate</span><span class="token punctuation">(</span>ConnectionFactory connectionFactory<span class="token punctuation">)</span><span class="token punctuation">{</span>        RabbitTemplate rabbitTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RabbitTemplate</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rabbitTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    MessageProperties messageProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    messageProperties<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"desc"</span><span class="token punctuation">,</span> <span class="token string">"信息描述.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    messageProperties<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"自定义消息类型.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Message message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"Hello RabbitMQ"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> messageProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"test.topic"</span><span class="token punctuation">,</span><span class="token string">"user.template"</span><span class="token punctuation">,</span>message<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">MessagePostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Message <span class="token function">postProcessMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span> <span class="token keyword">throws</span> AmqpException <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----添加额外的设置------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"desc"</span><span class="token punctuation">,</span> <span class="token string">"额外修改的信息描述"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"attr"</span><span class="token punctuation">,</span> <span class="token string">"额外新加的信息描述"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> message<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>send或convertAndSend用来发送消息，MessagePostProcessor可以帮我们在消息发送前再对消息做一些处理。</p><p><img src="https://api.codetool.top/img/1584107981686.png" alt></p><p>convertAndSend可以传的消息是一个Object对象，如果不是Message类型，会帮我们用转换器转换成消息对象，默认的Converter是<code>SimpleMessageConverter</code>，可以自定义Converter然后使用setMessageConverter设置转换器。</p><p>其他自带可用的Converter还有<code>Jackson2MessageConvertor</code>、<code>SerializerMessageConverter</code>等等。</p><p>SimpleMessageConverter如何将Java对象转成消息：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> Message <span class="token function">createMessage</span><span class="token punctuation">(</span>Object object<span class="token punctuation">,</span> MessageProperties messageProperties<span class="token punctuation">)</span> <span class="token keyword">throws</span> MessageConversionException <span class="token punctuation">{</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果是字节数组，直接设置成消息体</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        bytes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> object<span class="token punctuation">;</span>        messageProperties<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>MessageProperties<span class="token punctuation">.</span>CONTENT_TYPE_BYTES<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果是String，转成字节数组设置消息体，默认以UTF-8编码</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            bytes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> object<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultCharset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MessageConversionException</span><span class="token punctuation">(</span>                    <span class="token string">"failed to convert to Message content"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        messageProperties<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>MessageProperties<span class="token punctuation">.</span>CONTENT_TYPE_TEXT_PLAIN<span class="token punctuation">)</span><span class="token punctuation">;</span>        messageProperties<span class="token punctuation">.</span><span class="token function">setContentEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultCharset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果是可序列化的，就将对象序列化</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">Serializable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            bytes <span class="token operator">=</span> SerializationUtils<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MessageConversionException</span><span class="token punctuation">(</span>                    <span class="token string">"failed to convert to serialized Message content"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        messageProperties<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>MessageProperties<span class="token punctuation">.</span>CONTENT_TYPE_SERIALIZED_OBJECT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        messageProperties<span class="token punctuation">.</span><span class="token function">setContentLength</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> messageProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//否则就是不支持的类型</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token string">" only supports String, byte[] and Serializable payloads, received: "</span> <span class="token operator">+</span> object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="SimpleMessageListenerContainer">1.3 SimpleMessageListenerContainer</h2><p>SimpleMessageListenerContainer是一个消息监听容器（就是消费者的容器，可以监听多个队列上的消息）</p><ul><li>这个类非常的强大，我们可以对它进行很多设置，对于消费者的配置项，这个类都可以满足</li><li>监听队列(多个队列)、自动启动、自动声明功能</li><li>设置事务特性、事务管理器、事务属性、事务容量(并发)、是否开启事务、回滚消息等</li><li>设置消费者数量、最小最大数量、批量消费</li><li>设置消息确认和自动确认模式、是否重回队列、异常捕获handler函数。</li><li>设置消费者标签生成策略、是否独占模式、消费者属性等</li><li>设置具体的监听器、消息转换器等等。</li></ul><p>注意: <code>SimpleMessageListenerContainer</code>可以进行动态设置， 比如在运行中的应用可以动态的修改其消费者数量的大小、接收消息的模式等。</p><p>很多基于RabbitMQ的自制定化后端管控台在进行动态设置的时候，也是根据这一特性去实现的。可以看出SpringAMQP非常的强大。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//略。。。</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">directQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"test.direct.queue"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">topicQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"test.topic.queue"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> SimpleMessageListenerContainer <span class="token function">simpleMessageListenerContainer</span><span class="token punctuation">(</span>ConnectionFactory connectionFactory<span class="token punctuation">)</span><span class="token punctuation">{</span>        SimpleMessageListenerContainer container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMessageListenerContainer</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setQueues</span><span class="token punctuation">(</span><span class="token function">directQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">topicQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setConcurrentConsumers</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setDefaultRequeueRejected</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setAcknowledgeMode</span><span class="token punctuation">(</span>AcknowledgeMode<span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setConsumerTagStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConsumerTagStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">createConsumerTag</span><span class="token punctuation">(</span>String queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> queue<span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelAwareMessageListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> Channel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------消费者："</span> <span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> container<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>只要它在IoC容器中，就保持监听注册队列上的消息，监听到消息就可以通过内部的MessageListener来处理消息。如果收到的消息是序列化的、json等其他类型，可以使用Converter转换。或写一个MessageListenerAdapter，它可以注册Converter。</p><h2 id="MessageListenerAdapter">1.4 MessageListenerAdapter</h2><p>MessageListenerAdapter</p><ol><li>可以把一个没有实现MessageListener和ChannelAwareMessageListener接口的类适配成一个可以处理消息的处理器</li><li>默认的方法名称为：handleMessage，可以通过setDefaultListenerMethod设置新的消息处理方法</li><li>MessageListenerAdapter支持不同的队列交给不同的方法去执行。使用setQueueOrTagToMethodName方法设置，当根据queue名称没有找到匹配的方法的时候，就会交给默认的方法去处理。</li></ol><blockquote><p>作者：二月_春风<br>链接：<a href="https://www.jianshu.com/p/d21bafe3b9fd" target="_blank" rel="noopener">https://www.jianshu.com/p/d21bafe3b9fd</a></p></blockquote><p>MessageListenerAdapter还可以通过MessageConverter将收到的消息转换成其他类型的数据，从而给Delegate中的方法处理。</p><h2 id="MessageConverter">1.5 MessageConverter</h2><p>Java对象和Message互转。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MessageConverter</span> <span class="token punctuation">{</span>    Message <span class="token function">toMessage</span><span class="token punctuation">(</span>Object object<span class="token punctuation">,</span> MessageProperties messageProperties<span class="token punctuation">)</span> <span class="token keyword">throws</span> MessageConversionException<span class="token punctuation">;</span>    Object <span class="token function">fromMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span> <span class="token keyword">throws</span> MessageConversionException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="SpringBoot整合RabbitMQ">2 SpringBoot整合RabbitMQ</h1><p>maven依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>使用SpringBoot就不用我们手动去注入组件了，显然这些本来是应该在ConnectionFactory中配置的东西现在都可以拿出来，SpringBoot预先帮我们注入各种组件bean。</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#RABBITMQ START</span><span class="token attr-name">spring.rabbitmq.host</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1</span><span class="token attr-name">spring.rabbitmq.port</span><span class="token punctuation">=</span><span class="token attr-value">5672</span><span class="token attr-name">spring.rabbitmq.username</span><span class="token punctuation">=</span><span class="token attr-value">guest</span><span class="token attr-name">spring.rabbitmq.password</span><span class="token punctuation">=</span><span class="token attr-value">guest</span><span class="token comment" spellcheck="true"># 消息确认机制：none不启用，simple使用waitForConfirms，correlated使用CorrelationData</span><span class="token attr-name">spring.rabbitmq.publisher-confirm-type</span><span class="token punctuation">=</span><span class="token attr-value">none</span><span class="token comment" spellcheck="true"># 自定义的属性，定义了两个队列的名称</span><span class="token attr-name">rabbitmq.queue.msg</span><span class="token punctuation">=</span><span class="token attr-value">spring-boot-queue-msg</span><span class="token attr-name">rabbitmq.queue.user</span><span class="token punctuation">=</span><span class="token attr-value">spring-boot-queue-user</span><span class="token comment" spellcheck="true">#RABBITMQ END</span></code></pre><p>先配置<code>@EnableRabbit</code>，可以使用<code>@RabbitListener(queues={})</code>来给方法注册一个<code>MessageListenerContainer</code>，这个<code>MessageListenerContainer</code>是从SpringBoot默认注入的<code>MessageListenerContainerFactory</code>获取的，如果要修改默认的Converter，就要自己注入<code>MessageListenerContainerFactory</code>，然后更改converter。</p><p>更多的注解相关见：<a href="https://blog.csdn.net/u012129558/article/details/85099861" target="_blank" rel="noopener">使用@RabbitListener注解消费消息_Java_思考、总结、专注-CSDN博客</a></p><p>其他的用法就没有很大区别了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-rabbit&quot;&gt;1 Spring-rabbit&lt;/h1&gt;&lt;p&gt;使用Spring-rabbit，maven依赖：&lt;/p&gt;
&lt;pre class=&quot; language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://www.codetool.top/tags/Spring/"/>
    
      <category term="RabbitMQ" scheme="https://www.codetool.top/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ消息积压解决方案-TTL与死信队列</title>
    <link href="https://www.codetool.top/article/RabbitMQ%E6%B6%88%E6%81%AF%E7%A7%AF%E5%8E%8B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-TTL%E4%B8%8E%E6%AD%BB%E4%BF%A1%E9%98%9F%E5%88%97/"/>
    <id>https://www.codetool.top/article/RabbitMQ消息积压解决方案-TTL与死信队列/</id>
    <published>2020-03-13T10:57:19.000Z</published>
    <updated>2020-03-13T10:58:10.092Z</updated>
    
    <content type="html"><![CDATA[<p>消息积压的场景有很多，如果发送的消息没有得到及时回复，则会导致持久化消息不断积压而得不到释放，从而堵塞消息队列。对于这种情况，可以通过配置消息的过期时间和死信队列处理来预防。</p><h1 id="TTL消息">1 TTL消息</h1><p>RabbitMQ支持消息的过期时间，即之前某篇博客在消息属性中设置的<code>expiration(&quot;10000&quot;)</code>，也支持在队列层面配置队列中消息的过期时间，从消息入队列开始计算，只要超过了队列的超时时间配置，那么消息会自动地清除。</p><p>配置队列的消息过期时间：在声明队列的时候配置队列参数<code>x-message-ttl</code>：</p><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="死信队列">2 死信队列</h1><h2 id="概述">2.1 概述</h2><p>DLX，Dead-Letter-Exchange</p><p>利用DLX，当消息在一个队列中变成死信 (dead message)之后，它能被重新publish到另一个Exchange，这个Exchange就是DLX</p><p>消息变成死信有以下几种情况</p><ul><li>消息被拒绝(basic.reject/basic.nack)，并且requeue=false</li><li>消息TTL过期</li><li>队列达到最大长度</li></ul><p>DLX特点：</p><ul><li>DLX也是一个正常的Exchange, 和一般的Exchange没有区别， 它能在任何的队列上被指定，实际上就是设置某个队列的属性。</li><li>当这个队列中有死信时，RabbitMQ就会自动的将这个消息重新发布到设置的Exchange上去，进而被路由到另一个队列。</li><li>可以监听这个队列中消息做相应的处理，这个特性可以弥补RabbitMQ3.0以前支持的immediate参数的功能。</li></ul><p>声明队列时添加参数<code>x-dead-letter-exchange</code>，值为死信队列交换机的名字。</p><h2 id="示例">2.2 示例</h2><p>消费端：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Comsumer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ConnectionFactory connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String exchange <span class="token operator">=</span> <span class="token string">"test_dlx_exchange"</span><span class="token punctuation">;</span>        String routingKey <span class="token operator">=</span> <span class="token string">"dlx.#"</span><span class="token punctuation">;</span>        String queueName <span class="token operator">=</span> <span class="token string">"test_consumer_queue"</span><span class="token punctuation">;</span>        String dlxName <span class="token operator">=</span> <span class="token string">"dlx.exchange"</span><span class="token punctuation">;</span>        String dlxQueueName <span class="token operator">=</span> <span class="token string">"dlx.queue"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//声明并绑定死信队列到交换器上</span>        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>dlxName<span class="token punctuation">,</span> <span class="token string">"topic"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>dlxQueueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>dlxQueueName<span class="token punctuation">,</span> dlxName<span class="token punctuation">,</span> <span class="token string">"#"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> arguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置队列消息ttl</span>        arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-message-ttl"</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置死信队列交换器</span>        arguments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"x-dead-letter-exchange"</span><span class="token punctuation">,</span>dlxName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//声明一个正常接收消息的队列和交换机</span>        channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span> <span class="token string">"topic"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span>routingKey<span class="token punctuation">)</span><span class="token punctuation">;</span>        com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Consumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token comment" spellcheck="true">//消费消息</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span>                                       Envelope envelope<span class="token punctuation">,</span>                                       AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span>                                       <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span>                    <span class="token keyword">throws</span> IOException            <span class="token punctuation">{</span>                String routingKey <span class="token operator">=</span> envelope<span class="token punctuation">.</span><span class="token function">getRoutingKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String contentType <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费的路由键："</span><span class="token operator">+</span>routingKey<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费的内容类型："</span><span class="token operator">+</span>contentType<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">long</span> deliveryTag <span class="token operator">=</span> envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 确认消息</span>                channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费的消息体内容："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String bodyStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bodyStr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//直接接收死信队列内的消息，这样正常队列没有消费者，过了10s后消息就会被转发到死信队列中。</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>dlxQueueName<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>生产端：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ConnectionFactory connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Connection connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String exchange <span class="token operator">=</span> <span class="token string">"test_dlx_exchange"</span><span class="token punctuation">;</span>        String routingKey <span class="token operator">=</span> <span class="token string">"dlx.save"</span><span class="token punctuation">;</span>        String msg <span class="token operator">=</span> <span class="token string">"Hello RabbitMQ "</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span>exchange<span class="token punctuation">,</span>routingKey<span class="token punctuation">,</span>null<span class="token punctuation">,</span>msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>先运行消费端，暂停消费端应用，再运行生产端，观察到一开始消息在正常队列中</p><p><img src="https://api.codetool.top/img/15840968203071.png" alt></p><p>过了十秒，消息进入死信队列</p><p><img src="https://api.codetool.top/img/15840969404135.png" alt></p><p>再次运行消费端应用，看到控制台输出消息</p><pre><code>消费的路由键：dlx.save消费的内容类型：null消费的消息体内容：Hello RabbitMQ </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;消息积压的场景有很多，如果发送的消息没有得到及时回复，则会导致持久化消息不断积压而得不到释放，从而堵塞消息队列。对于这种情况，可以通过配置消息的过期时间和死信队列处理来预防。&lt;/p&gt;
&lt;h1 id=&quot;TTL消息&quot;&gt;1 TTL消息&lt;/h1&gt;&lt;p&gt;RabbitMQ支持消息的过期
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="消息队列" scheme="https://www.codetool.top/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="RabbitMQ" scheme="https://www.codetool.top/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>RabbitMQ可靠投递和消费确认</title>
    <link href="https://www.codetool.top/article/RabbitMQ%E5%8F%AF%E9%9D%A0%E6%8A%95%E9%80%92%E5%92%8C%E6%B6%88%E8%B4%B9%E7%A1%AE%E8%AE%A4/"/>
    <id>https://www.codetool.top/article/RabbitMQ可靠投递和消费确认/</id>
    <published>2020-03-13T07:29:35.000Z</published>
    <updated>2020-03-13T07:40:23.531Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考资源：</p><p><a href="https://blog.csdn.net/anumbrella/article/details/80686445" target="_blank" rel="noopener">RabbitMQ学习(五)——消息确认机制(AMQP事务)_大数据_Anumbrella-CSDN博客</a></p><h1 id="可靠投递">1 可靠投递</h1><p>生产端负责的任务有：</p><ul><li>保障消息的成功发出</li><li>保障MQ节点的成功接收，并收到来自MQ节点的确认应答</li><li>完善的消息补偿机制</li></ul><p>那么如何确保MQ（Broker）收到了消息？就要讲到RabbitMQ对消息确认机制的支持</p><h2 id="消息确认机制">1.1 消息确认机制</h2><h3 id="AMQP事务机制">1.1.1 AMQP事务机制</h3><p>在AMQP中当把信道设置成了事务模式之后，生产者和Broker之间会有一种发送/响应机制判断当前命令操作是否可以继续。</p><p>AMQP-client中与事务有关的主要有三个方法：</p><ul><li><code>txSelect()</code>：开启事务</li><li><code>txCommit()</code>：提交事务</li><li><code>txRollback()</code>：回滚事务</li></ul><p>当我们使用txSelect开始事务之后，我们就可以发送消息给Broker，<strong>如果txCommit提交成功了，则消息一定到达了Broker了</strong>，如果在txCommit执行之前Broker出现异常崩溃或者由于其他原因抛出异常，这个时候我们便可以捕获异常通过txRollback方法进行回滚事务。</p><p><strong>但是事务模式要求生产者同步等待Broker的返回结果，所以性能不好，一般不使用。</strong></p><h3 id="发送方确认机制">1.1.2 发送方确认机制</h3><p>发送方确认机制是RabbitMQ对AMQP的拓展实现，发送方确认模式是RabbitMQ对AMQP的扩展实现，把信道设置成确认模式之后，在该信道上发布的所有消息都会被分配一个唯一ID, <strong>一旦消息被投递到所有匹配的队列中，该信道就会向生产者发送确认消息，在确认消息中包含了之前的唯一ID</strong>，从而让生产者知道消息已到达目的队列。<strong>发送方确认模式的最大优势是异步，生产者发送完一条消息后可继续发送下一条消息，当生产者收到确认消息后调用回调方法处理。</strong>由于没有事务回滚的概念，这种方式比事务模式轻了许多，其对Broker的性能影响相对来说也小了很多。</p><p>AMQP-client中与发送方确认有关的主要有三个方法：</p><ul><li><code>confirmSelect()</code>：开启确认模式</li><li><code>waitForConfirms()</code>：阻塞等待Broker确认</li><li><code>addConfirmListener()</code>：这是支持异步确认的关键，可以让发送方在收到确认消息后调用接口内的回调方法。</li></ul><pre class=" language-java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">addConfirmListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConfirmListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//收到确认后的回调，deliveryTag每发送一条消息+1（id）</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleAck</span><span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> multiple<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//收到NACK后的回调</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleNack</span><span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> multiple<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>需要注意 <code>handleNack</code> 方法只在比如磁盘写满了，MQ出现了一些异常，或者Queue容量到达上限了这类情况下调用，如果因为网络或宕机原因消息传递过程中丢失等情况不会受到NACK，这个时候就得考虑发送端这边定时判断是否收到ACK从而判断Broker是否收到消息。</p><h2 id="路由退回">1.2 路由退回</h2><p>如果Broker收到了消息，但没有可路由的队列，或是队列已满，也不能实现可靠投递。针对这个情况RabbitMQ提供了ReturnListener，和ConfirmListener差不多的用法。但是发消息的时候使用</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">basicPublish</span><span class="token punctuation">(</span>String exchange<span class="token punctuation">,</span> String routingKey<span class="token punctuation">,</span> <span class="token keyword">boolean</span> mandatory<span class="token punctuation">,</span> BasicProperties props<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span>            <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span></code></pre><p>重载，其中Mandotory这个属性如果为true代表如果没有路由成功，则退回给生产段，如果为false则直接删除，这里必须设置为true。</p><pre class=" language-java"><code class="language-java">channel<span class="token punctuation">.</span><span class="token function">addReturnListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ReturnListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">//如果无法路由，退回</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleReturn</span><span class="token punctuation">(</span><span class="token keyword">int</span> replyCode<span class="token punctuation">,</span> String replyText<span class="token punctuation">,</span> String exchange<span class="token punctuation">,</span> String routingKey<span class="token punctuation">,</span> AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="消费确认">2 消费确认</h1><h2 id="消费者ACK">2.1 消费者ACK</h2><p>有的时候不仅要保证发送端100%将消息发送到了Broker，还需要确认消费端是否收到消息或是是否消费了消息。</p><p>RabbitMQ支持消费端的两种消息回执机制：</p><ul><li>自动回执：Broker发送消息给接收端后立即删除该消息，不等待消费端回执。</li><li>手动回执：Broker发送消息给接收端后暂不删除该消息，等待消费端回执后再删除。如果没有等到消费者的ACK，会将消息转发给其他消费者。</li></ul><p>是否开启自动回执模式由消费端的basicConsume方法的autoAck参数决定，手动回执需要在自定义消费者中实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span>                            Envelope envelope<span class="token punctuation">,</span>                            AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span>                            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>    String routingKey <span class="token operator">=</span> envelope<span class="token punctuation">.</span><span class="token function">getRoutingKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String contentType <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费的路由键："</span><span class="token operator">+</span>routingKey<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费的内容类型："</span><span class="token operator">+</span>contentType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> deliveryTag <span class="token operator">=</span> envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 手动回执</span>    channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费的消息体内容："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String bodyStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bodyStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="拒绝消息">2.2 拒绝消息</h2><p>当消费者目前不能处理该消息时，可以选择给Broker发送一个拒绝消息的指令，并且可以要求Broker将该消息丢弃或重新放入队列中。对应channel中的两个方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//退回一条消息，deliveryTag指定消息的deliveryTag，requeue为true重新放入队列，否则销毁</span><span class="token keyword">void</span> <span class="token function">basicReject</span><span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> requeue<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//退回多条消息，如果multiple为true代表除了已应答的消息，否则比当前deliveryTag小的消息全部拒绝</span><span class="token keyword">void</span> <span class="token function">basicNack</span><span class="token punctuation">(</span><span class="token keyword">long</span> deliveryTag<span class="token punctuation">,</span> <span class="token keyword">boolean</span> multiple<span class="token punctuation">,</span> <span class="token keyword">boolean</span> requeue<span class="token punctuation">)</span>            <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span></code></pre><h2 id="消息预取（消费端限流）">2.3 消息预取（消费端限流）</h2><p>在实际场景中，如果对每条消息的处理时间不同，则可能导致有些消费者一直很忙，而有些消费者处理很快并一直空闲。这时可通过设置预取数量(PrefetchCount)限制每个消费者在收到下一个确认回执前一次最多可以接收多少条消息。例如，设置prefetchCount为1，则表示RabbitMQ服务器每次给每个消费者发送一条消息，在收到该消息的消费者ACK指令之前RabbitMQ不会再向该消费者发送新的消息。可以通过channel中的<code>basicQos</code>方法设置预取数量：</p><p>要使用这个策略，必须使用手动回执，否则Broker不会等待ACK消息。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//prefetchSize指的是以字节度量的最大大小，0代表不限制，通常不用这个参数</span><span class="token keyword">void</span> <span class="token function">basicQos</span><span class="token punctuation">(</span><span class="token keyword">int</span> prefetchSize<span class="token punctuation">,</span> <span class="token keyword">int</span> prefetchCount<span class="token punctuation">,</span> <span class="token keyword">boolean</span> global<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//常用版本，global决定是生效于Channel还是Consumer</span><span class="token keyword">void</span> <span class="token function">basicQos</span><span class="token punctuation">(</span><span class="token keyword">int</span> prefetchCount<span class="token punctuation">,</span> <span class="token keyword">boolean</span> global<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span></code></pre><h1 id="总结">3 总结</h1><p>有了以上技术支撑，就可以通过一系列的措施来实现消息100%能从生产端到达消费端，具体业务解决方案可以参考：</p><p><a href="https://blog.csdn.net/eluanshi12/article/details/88959856" target="_blank" rel="noopener">RabbitMQ消息100%可靠性投递的解决方案实现(一)_大数据_eluanshi12的博客-CSDN博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文参考资源：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/anumbrella/article/details/80686445&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RabbitMQ学习(五)——消息确认机制(A
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="消息队列" scheme="https://www.codetool.top/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="RabbitMQ" scheme="https://www.codetool.top/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer03-数组中重复的数字</title>
    <link href="https://www.codetool.top/article/%E5%89%91%E6%8C%87offer03-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>https://www.codetool.top/article/剑指offer03-数组中重复的数字/</id>
    <published>2020-03-12T17:29:19.000Z</published>
    <updated>2020-03-12T17:32:13.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题（来源Leetcode）">1 原题（来源Leetcode）</h1><p>找出数组中重复的数字。</p><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong><br>[2, 3, 1, 0, 2, 5, 3]<br><strong>输出:</strong> 2 或 3   </p></blockquote><p><strong>限制：</strong></p><p><code>2 &lt;= n &lt;= 100000</code></p><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>限定了范围，就用bitmap去重的思想</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> exist<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>exist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>            exist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题（来源Leetcode）&quot;&gt;1 原题（来源Leetcode）&lt;/h1&gt;&lt;p&gt;找出数组中重复的数字。&lt;/p&gt;
&lt;p&gt;在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="https://www.codetool.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>AMQP协议介绍和使用AMQP-client操作RabbitMQ</title>
    <link href="https://www.codetool.top/article/AMQP%E5%8D%8F%E8%AE%AE%E4%BB%8B%E7%BB%8D%E5%92%8CRabbitMQ%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/"/>
    <id>https://www.codetool.top/article/AMQP协议介绍和RabbitMQ入门案例/</id>
    <published>2020-03-12T14:08:39.000Z</published>
    <updated>2020-03-13T07:01:40.639Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考资源：</p><p><a href="https://blog.csdn.net/weixin_37641832/article/details/83270778" target="_blank" rel="noopener">深入理解AMQP协议_网络_My Blogs-CSDN博客</a></p><p>推荐阅读：</p><p><a href="../消息队列概述与JMS使用">消息队列概述与JMS使用</a></p><h1 id="RabbitMQ概述">1 RabbitMQ概述</h1><p>RabbitMQ是一个由Erlang语言开发的基于AMQP标准的开源实现。RabbitMQ 最初起源于金融系统，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。其具体特点包括:</p><ul><li>保证可靠性(Reliability)。RabbitMQ 使用一些机制来保证可靠性，如持久化、传输确认、发布确认等。</li><li>具有灵活的路由(Flexible Routing)功能。在消息进入队列之前，是通过Exchange(交换器)来路由消息的。对于典型的路由功能，RabbitMQ已经提供了一些内置的Exchange来实现。针对更复杂的路由功能，可以将多个Exchange绑定在一起，也可以通过插件机制来实现自己的Exchange。</li><li>支持消息集群(Clustering)。 多台RabbitMQ服务器可以组成一个集群，形成一个逻辑Broker。</li><li>具有高可用性(Highly Available)。队列可以在集群中的机器上进行镜像，使得在部分节点出现问题的情况下队列仍然可用。</li><li>支持多种协议(Multi-protocol)。RabbitMQ 除支持AMQP协议之外，还通过插件的方式支持其他消息队列协议，比如STOMP、MQTT等。</li></ul><h1 id="AMQP协议">2 AMQP协议</h1><h2 id="AMQP核心概念">2.1 AMQP核心概念</h2><p><code>Server</code>，服务器，又称Broker，接收客户端的连接，实现AMQP实体服务</p><p><code>Connection</code>，连接，应用程序和Broker的网络连接</p><p><code>Channel</code>，网络信道，几乎所有的操作都在Channel中进行，客户端可建立多个Channel，每个Channel代表一个会话任务。有点像JMS的Session。</p><p><code>Message</code>，消息，由Properties和Body组成，Properties可以对消息进行修饰（类似于Http的请求头），Body就是消息体内容。</p><p><code>Exchange</code>，交换机，用来接收生产者发送的消息并将这些消息路由给服务器中的队列</p><p><code>Queue</code>，消息队列，用来保存消息直到发送给消费者。</p><p><code>Routing Key</code>，路由键，虚拟机可以用它来确定如何路由一个特定消息</p><p><code>Binding</code>，绑定，用于Exchange和Queue之间的关联。一个Binding路由规则就是一个RoutingKey和Queue的对应关系。</p><p><code>Virtual host</code>：虚拟主机，用于进行逻辑隔离，最上层的消息路由。每个Virtual host类似于一个mini版的消息服务器。一个Virtual host里面可以有若干个Exchange和Queue，同一个Virtual Host里面不能有相同名称的Exchange和Queue。</p><p><img src="https://api.codetool.top/img/15840050706893.png" alt></p><p>在Server内部是可以有多个Exchange和Queue的。</p><h2 id="核心组件的生命周期">2.2 核心组件的生命周期</h2><h3 id="消息的生命周期">2.2.1 消息的生命周期</h3><ol><li><p>Publisher产生一条数据，发送到Broker。</p></li><li><p><strong>Broker中的Exchange根据RoutingKey查询投递的目标Queue</strong>（Broker从消息属性中获取Routing Key，如果不能完成路由会将消息丢弃或返回给生产者，一条消息可以路由到多个队列）。</p></li><li><p>Consumer向Broker告知自己监听哪个队列，当有数据到达Queue，Broker会推送给Consumer。如果没有消费者，消息队列通过AMQP将消息返回给生产者。</p></li></ol><h3 id="交换器的生命周期">2.2.2 交换器的生命周期</h3><p>每台AMQP服务器都预先创建了许多交换器实例，它们在服务器启动时就存在并且不能被销毁。如果你的应用程序有特殊要求，则可以选择自己创建交换器，并在完成工作后进行销毁。</p><h3 id="队列的生命周期">2.2.3 队列的生命周期</h3><p>主要有两种消息队列，即持久化消息队列和临时消息队列。持久化消息队列可被多个消费者共享，不管是否有消费者接收，它们都可以独立存在。临时消息队列对某个消费者是私有的，只能绑定到此消费者，当消费者断开连接时，该消息队列将被删除。</p><h2 id="功能命令">2.3 功能命令</h2><p>AMQP协议文本是分层描述的，0-9版本分为<strong>功能层和传输层</strong>。</p><ul><li><p>功能层：定义了一系列的命令，这些命令按功能逻辑组合成不同的类（Class），客户端应用可以利用它们来实现自己的业务功能。</p></li><li><p>传输层：将功能层接收的消息传递给服务器经过相应处理后再返回，处理的事情包括信道复用、帧同步、内容编码、心跳检测、数据表示和错误处理等。</p></li></ul><p>0-10版本分为<strong>模型层、会话层和传输层。</strong></p><ul><li><p>模型层：原来的功能层，定义了一系列的命令，利用它们来实现业务功能。</p></li><li><p>会话层：负责将命令从客户端应用传递给服务器，再将服务端的响应返回给客户端应用，会话层为这个过程提供了可靠性、同步机制和错误处理。</p></li><li><p>传输层：提供信道复用、帧同步、错误检测和数据表示。</p></li></ul><h2 id="消息数据格式">2.4 消息数据格式</h2><p>AMQP是二进制协议，所有的消息数据被组织成各种类型的帧，以0-9-1版本为例，帧的格式：</p><p>帧头（header，7个字节），包含帧类型type（一个字节）、信道（Channel）、size（帧负载的大小）</p><p>帧类型包括：</p><ul><li>1，<code>“METHOD”</code>，方法帧</li><li>2，<code>“HEADER”</code>，内容头帧</li><li>3，<code>“BODY”</code>，内容体帧</li><li>4，<code>“HEARTBEAT”</code>，心跳帧</li></ul><p>任意大小的帧负载（格式依赖于帧类型）</p><h2 id="交换器类型">2.5 交换器类型</h2><p>不同类型的交换器分发消息的策略是不同的，目前交换器有四种类型：Direct，Fanout，Topic，Headers，其中Headers基本不用了。</p><h3 id="Direct交换器">2.5.1 Direct交换器</h3><p>如果<strong>消息中的路由键和Binding中的绑定键一致</strong>，交换器就把消息发送到对应的队列中。</p><h3 id="Fanout交换器">2.5.2 Fanout交换器</h3><p>Fanout交换器不处理路由键，它把消息转发给所有与其绑定的队列，类似于子网转发。</p><h3 id="Topic交换器">2.5.3 Topic交换器</h3><p>Topic交换器通过模式匹配分配消息的路由键属性，将路由键和某种模式进行匹配，每个队列都绑定了一种模式，有两种通配符：“<code>#</code>”匹配0个或多个单词，“<code>*</code>”匹配一个单词</p><p><img src="https://api.codetool.top/img/1584012259364.png" alt="RabbitMQ默认提供的Exchanges"></p><h1 id="RabbitMQ使用">3 RabbitMQ使用</h1><p>RabbitMQ的安装这里不做介绍。<del>（不太会）</del></p><p>默认端口号5672</p><p>启动RabbitMQ服务：<code>rabbitmq-server start &amp;</code></p><p>服务的停止：<code>rabbitmqctl stop_app</code></p><p>启用网页可视化管理插件： <code>rabbitmq-plugins enable rabbitmq_management</code></p><p>安装完之后在<code>/usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin</code>下面更改<code>rabbit.app</code>中的loop_users，把[]里面的内容去掉。（默认用户是guest，密码guest，这里允许guest远程访问，或者你添加一个用户，赋予权限）</p><p>访问地址：<a href="http://localhost:15672/" target="_blank" rel="noopener">http://localhost:15672/</a></p><h2 id="命令行操作">3.1 命令行操作</h2><p><code>rabbitmqctl stop_app</code>：关闭应用</p><p><code>rabbitmqctl start_app</code>：开启应用</p><p><code>rabbitmqctl status</code>：节点状态</p><p><code>rabbitmqctl add_user username password</code>：添加用户</p><p><code>rabbitmqctl change_password username newpassword</code>：修改密码</p><p><code>rabbitmqctl list_users</code>：列出所有用户</p><p><code>rabbitmqctl delete_user username</code>：删除用户</p><p><code>rabbitmqctl list_user_permissions username</code>：列出用户权限</p><p><code>rabbitmqctl clear_permissions -p vhostpath username</code>：清除用户权限</p><p><code>rabbitmqctl set_permissions -p vhostpath username &quot;.*&quot; &quot;.*&quot; &quot;. *&quot;</code>：清除用户权限</p><p><code>rabbitmqctl add_vhost vhostpath</code>：创建虚拟主机</p><p><code>rabbitmqctl delete_vhost vhostpath</code>：删除虚拟主机</p><p><code>rabbitmqctl list_vhosts</code>：列出所有虚拟主机</p><p><code>rabbitmqctl list_permissions -p vhostpath</code>：列出虚拟主机权限</p><p><code>rabbitmqctl list_queues</code>：查看所有队列信息</p><p><code>rabbitmqctl -p vhostpath purge_queue blue</code>：清除队列里的消息</p><p><code>rabbitmqctl reset</code>：移除所有数据，要在<code>rabbitmqctl stop_app</code>之后使用</p><h2 id="AMQP-clinet使用">3.2 AMQP-clinet使用</h2><p>maven依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.rabbitmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>amqp-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>这里的AMQP指的是一套操控rabbitMQ的API，类似于JMS</p><p>需要注意的是<strong>JMS需要通过session去创建消费者和生产者，AMQP只需要通过channel去创建消费者。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> TimeoutException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建一个ConnectionFactory</span>        ConnectionFactory connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.创建一个连接</span>        Connection connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.通过connection创建一个Channel</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String msg <span class="token operator">=</span> <span class="token string">"Hello RabbitMQ!"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.通过Channel发送数据，四个参数：exchange，routingKey，props，body</span>            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"test001"</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//5. 关闭连接</span>        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Comsumer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> TimeoutException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建一个ConnectionFactory</span>        ConnectionFactory connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.创建一个连接</span>        Connection connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.通过connection创建一个Channel</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.声明一个队列</span>        String queueName <span class="token operator">=</span> <span class="token string">"test001"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//五个参数：queue队列名、durable是否持久化、exclusive保证顺序独占锁</span>        <span class="token comment" spellcheck="true">//autoDelete如果队列不再被使用（绑定）就自动删除、arguments附带的参数</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.创建消费者</span>        com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Consumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token comment" spellcheck="true">//消费消息</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span>                                       Envelope envelope<span class="token punctuation">,</span>                                       AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span>                                       <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span>                    <span class="token keyword">throws</span> IOException            <span class="token punctuation">{</span>                String routingKey <span class="token operator">=</span> envelope<span class="token punctuation">.</span><span class="token function">getRoutingKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String contentType <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费的路由键："</span><span class="token operator">+</span>routingKey<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费的内容类型："</span><span class="token operator">+</span>contentType<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">long</span> deliveryTag <span class="token operator">=</span> envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 确认消息</span>                channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费的消息体内容："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String bodyStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bodyStr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 6.设置Channel，三个参数：queue队列名，autoAck自动签收，Callback一个Consumer对象</span>        channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>要注意amqp-client老版本有一个QueueingConsumer，会造成内存溢出，已经被废弃了。</p><p>在这个案例中，生产者的basicPublish没有指定任何交换器，此时使用的是默认交换器AMQP DEFAULT，此交换器默认绑定所有队列，传routingKey给它的时候，它会找有没有队列名和该key相同的队列，有则路由消息给该队列。</p><p>其他相关API：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 声明交换机，后面两个参数可省略，第二个参数声明类型，参考上面关于交换器类型的介绍</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>String exchange<span class="token punctuation">,</span> String type<span class="token punctuation">,</span> <span class="token keyword">boolean</span> durable<span class="token punctuation">,</span> <span class="token keyword">boolean</span> autoDelete<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 绑定队列到交换机，为队列分配一个key</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>String queue<span class="token punctuation">,</span> String exchange<span class="token punctuation">,</span> String routingKey<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Exchange除了和Queue绑定，还可以和另一个Exchange进行绑定，就可以把消息经多次路由。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//destination被绑定的交换机，source发起绑定的交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeBind</span><span class="token punctuation">(</span>String destination<span class="token punctuation">,</span> String source<span class="token punctuation">,</span> String routingKey<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span></code></pre><p>消息由Properties和Payload组成，Payload就是消息体，而Properties包含：</p><ul><li><code>Delivery mode</code>：消息是否持久化，1：否，2：是</li><li><code>Headers</code>：头信息，是由一个或多个键值对组成的</li></ul><p>还包含一些预定义属性，如下：</p><ul><li><code>content_type</code>：消息类型</li><li><code>content_encoding</code>:消息编码</li><li><code>priority</code>：消息优先级（0-9），但不保证遵从</li><li><code>message-id</code>和<code>correlation-id</code>：表示唯一消息标识和消息响应标识，用于在工作流程中实现消息跟踪</li><li><code>timestamp</code>：表示消息创建时间</li><li><code>expiration</code>：表示消息的过期时间</li><li><code>reply-to</code>：实现响应消息的路由（构建一个用来恢复消息的私有响应队列）</li></ul><p>Java示例，把消息属性传入：</p><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>headers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"my1"</span><span class="token punctuation">,</span> <span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>headers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"my2"</span><span class="token punctuation">,</span> <span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义属性</span>AMQP<span class="token punctuation">.</span>BasicProperties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">deliveryMode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">contentEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">expiration</span><span class="token punctuation">(</span><span class="token string">"10000"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String msg <span class="token operator">=</span> <span class="token string">"Hello RabbitMQ!"</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"test001"</span><span class="token punctuation">,</span>properties<span class="token punctuation">,</span>msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文参考资源：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_37641832/article/details/83270778&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深入理解AMQP协议_网络_My B
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="消息队列" scheme="https://www.codetool.top/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="RabbitMQ" scheme="https://www.codetool.top/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>消息队列概述与JMS使用</title>
    <link href="https://www.codetool.top/article/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E6%A6%82%E8%BF%B0%E4%B8%8EJMS%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.codetool.top/article/消息队列概述与JMS使用/</id>
    <published>2020-03-12T08:38:35.000Z</published>
    <updated>2020-03-12T09:03:08.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统间通信概述">1 系统间通信概述</h1><p>一般来说，大型应用通常会被拆分成多个子系统，这些子系统可能会部署在多台机器上，也可能只是一台机器的多个进程中，这样的应用就是分布式应用。而分布式应用的子系统之间并不是完全独立的，它们需要相互通信来共同完成某个功能，这就涉及系统间通信了。</p><p>通常有两种方式来实现系统间通信，一种是基于<strong>远程过程调用（RPC）</strong>的方式，客户端不需要知道调用的具体实现细节，只需直接调用实际存在于远程计算机上的某个对象即可，但调用方式看起来和调用本地应用程序中的对象一样。典型的RPC实现包括Dubbo、Thrift、GRPC等，甚至Rest API。</p><p><img src="https://api.codetool.top/img/15839934987792.jpg" alt></p><p>另一种是基于消息队列的方式。消息队列的方式是指由<strong>应用中的某个系统负责发送信息，由关心这条消息的相应系统负责接收消息</strong>，并在收到消息后进行各自系统内的业务处理。消息可以非常简单，比如只包含文本字符串;也可以很复杂，比如包含字节流、字节数组，还可能包含嵌入对象，甚至是Java对象(经过序列化的对象)。</p><p>消息发布者只负责将消息发布到消息队列，消息使用者只负责从消息队列中取消息，由消息队列来负责消息的传递，这样发布者和使用者都不用知道对方的存在。</p><h1 id="消息队列概述">2 消息队列概述</h1><h2 id="为什么要使用消息队列">2.1 为什么要使用消息队列</h2><h3 id="解耦">2.1.1 解耦</h3><p>各模块之间如果存在互相调用的关系，应尽可能解耦合，消息队列就是在模块之间增加了一个中间层来实现解耦，使任何一个模块只关心自己的核心流程，不必关注数据来源或结果。</p><h3 id="流量削峰">2.1.2 流量削峰</h3><p>在系统运行中，可能会出现某一时刻网站请求量爆涨（例如业务活动或DDos攻击），很难在同一时刻处理这么多请求，如果处理不当给数据库带来巨大压力可能会导致雪崩效应。使用消息队列可以将短时间高并发的请求持久化，然后逐步处理，从而改善系统性能。</p><h3 id="异步">2.1.3 异步</h3><p>很多公司会构建一个日志收集系统，由它来统一收集业务日志数据，供离线和在线的分析系统使用。如果每个业务处理请求后都同步处理写日志，可能会造成延迟，甚至出现异常会影响业务服务阻塞，这时候引入消息队列可以异步处理日志消息。</p><h3 id="分布式事务">2.1.4 分布式事务</h3><p>在大型系统中数据库可能会分库分表，分布在多台服务器上，如果一个事务涉及多张表、甚至是多个库分布在不同的机器上，如何处理这个事务呢？一种方法是业界引入的一个处理分布式事务的规范——XA（全局事务管理器），它在事务管理器和资源管理器之间形成通信桥梁，目前主流数据库都提供对XA规范的支持。</p><p>但XA的问题是性能不算很好，所以通常使用消息队列来解决这个问题，分布式事务的本质是系统间的通信，配合事件表能实现分布式事务，具体实现这里不做详述。</p><h2 id="消息队列的特点">2.2 消息队列的特点</h2><p>消息队列的思想就是生产者消费者模式，组成就是生产者、阻塞队列、消费者，其中最重要的就是阻塞队列，消息队列也就是一种阻塞队列，JDK中也存在不少该模式体现，例如线程池中就使用了BlockingQueue，关于JDK中的BlockingQueue之前也写过一篇博客研究，可以参考<a href="../阻塞队列BlockingQueue详解">阻塞队列BlockingQueue详解</a></p><p>而生产环境下要求的消息队列就不止JDK中的BlockingQueue这么简单了，在不同的业务场景中，需要消息队列产品能解决诸如消息堆积、消息持久化、可靠投递、消息重复、严格有序、集群等各种问题。</p><h3 id="消息堆积">2.2.1 消息堆积</h3><p>因为生产者和消费者是两个分开处理消息的系统，无法预知两者对消息处理速度的快慢，一旦在某个时间段消费者处理消息的速度没有跟上生产者发送消息的速度，必将导致消息在处理中心逐渐积压而得不到释放。因此，有时需要给消息队列设置一个阈值，将超过阈值的消息不再放入处理，以防止系统资源被耗尽，导致机器挂掉甚至整个消息队列不可用。<strong>这就类似于JDK中线程池的拒绝策略。</strong></p><h3 id="消息持久化">2.2.2 消息持久化</h3><p>在消息被放入消息队列后需要将消息暂存下来，消息暂存可以选择将消息放在内存中，也可以选择放到文件、数据库等地方。将消息放在内存中存在的最大问题是，一旦机器宕掉消息将丢失。如果场景需要消息不能丢失，那么势必要将消息持久化。持久化方案有很多种, 比如将消息存到本地文件、分布式文件系统、数据库系统中等。</p><h3 id="可靠投递">2.2.3 可靠投递</h3><p>有些场景必须保证消息不能丢失。这种情况可能发生在出现网络问题、系统宕机等情况下。</p><h3 id="消息重复">2.2.4 消息重复</h3><p>有些消息队列为了支持消息可靠投递，会选择在接收到消息后先持久化到本地，然后发送给消费者。当消息发送失败或者不知道是否发送成功时(比如超时)，消息的状态是待发送，定时任务不停地轮询所有的待发送消息，最终保证消息不会丢失，这就带来了消息可能会重复的问题。</p><h3 id="严格有序">2.2.5 严格有序</h3><p>在某些场景中会有需要按照生产消息的顺序来消费的情形,这就要消息队列提供有序消息的保证.</p><h3 id="集群">2.2.6 集群</h3><p>消息队列服务器也可能出现宕机问题，要保证高可用需要集群支持。</p><h2 id="消息队列协议">2.3 消息队列协议</h2><p>常见的消息队列：RabbitMQ, ActiveMQ, Kafka, RocketMQ</p><p>消息队列的规范协议有AMQP、MQTT、STOMP、XMPP四种，这些协议是类似于HTTP的比较底层的通信协议，而Java引入了JMS（Java Message Service，Java消息服务）为这些协议提供了更高一层的抽象，给Java开发者提供了一个使用消息队列一致的接口。下面主要介绍JMS的体系模型。</p><h3 id="JMS点对点模型">2.3.1 JMS点对点模型</h3><p>JMS按其规范分为点对点(Point-to-Point)和发布订阅(Publish/Subscribe)两种形式。点对点就是将一个系统的消息发布到指定的另外一个系统，这样另外一个系统就能获得消息，从而处理对应的业务逻辑。</p><p>注意点对点模型在JMS中体现为QueueConneciton</p><p>点对点模型的特点：</p><ul><li>每条消息只有一个接收者，消息一旦被接收就不再保留在消息队列中了。一个队列中可能会有多个接收者在监听，但是消息只能被队列中的一个接收者接收。</li><li>发送者和接收者之间在时间上没有依赖，当消息被发送之后，不管接收者有没有在运行，都不会影响消息被发送到队列中</li><li>消息存在先后顺序。一个队列会按照消息服务器将消息放入队列中的顺序把它们传送给接收者。当消息已经被接收时就会从队列头部将它们删除(除非使用了消息优先级)。</li><li>当接收者收到消息时，会发送确认收到通知。</li></ul><h3 id="JMS发布-订阅模型">2.3.2 JMS发布/订阅模型</h3><p>发布订阅模式是一个系统约定将消息发布到一个主题(Topic)中，然后各个系统就能够通过订阅这个主题，根据发送过来的信息处理对应的业务。在更多的时候，开发者往往更多地使用发布订阅模式，因为可以进行更多的扩展，使得更多的系统能够监控得到消息。</p><p>注意点对点模型在JMS中体现为TopicConneciton</p><p>发布/订阅模型的特点：</p><ul><li>每条消息可以有多个订阅者。</li><li>发布者和订阅者之间有时间上的依赖。一般情况下，某个主题的订阅者需要在创建了订阅之后才能接收到消息，而且为了接收消息订阅者必须保持运行的状态。</li><li>JMS允许订阅者创建一个可持久化的订阅，这样即使订阅者没有运行也能接收到所订阅的消息。</li><li>每条消息都会传送给该主题下的所有订阅者。</li><li>通常发布者不会知道也意识不到哪一个订阅者正在接收消息。</li></ul><h1 id="JMS使用">3 JMS使用</h1><p>JMS在编程中体现了不同的接口：</p><h2 id="JMS1-1">3.1 JMS1.1</h2><h3 id="ConnectionFactory">3.1.1 ConnectionFactory</h3><p>是创建Connection的工厂，根据不同的消息类型用户可选择用QueueConnectionFactory和TopicConnectionFactory。</p><h3 id="Destination">3.1.2 Destination</h3><p>指消息目的地，要么是队列（Queue）要么是主题（Topic）</p><h3 id="Connection">3.1.3 Connection</h3><p>客户端与JMS系统之间建立的连接，分为QueueConnection和TopicConnectionFactory。一个Connection可以产生多个Session。</p><h3 id="Session">3.1.4 Session</h3><p>实际操作消息的接口，表示一个单线程的上下文（会话）。可以通过Session创建生产者、消费者、消息，还提供了事务操作。Session也分为QueueSession和TopicSession。</p><h3 id="MessageProducer">3.1.5 MessageProducer</h3><p>消息生产者，由Session创建，将消息发送到Destination。消费者可以同步或异步接收这些消息，<br>消息生产者也分为QueueSender和TopicSender。</p><h3 id="MessageComsumer">3.1.6 MessageComsumer</h3><p>消息消费者，由Session创建，接收来自Destination的消息。分为QueueReceiver和TopicReceiver。</p><h3 id="Message">3.1.7 Message</h3><p>消息，就是被传送的对象</p><h3 id="MessageListener">3.1.8 MessageListener</h3><p>消息监听器，在消息到达时自动调用onMessage方法。</p><h2 id="JMS2-0">3.2 JMS2.0</h2><p>JMS2.0对API做了简化：</p><p>JMSContext替换Connection和Session</p><p>JMSProducer替换MessageProducer，支持链式操作传递消息。</p><p>JMSConsumer替换MessageComsumer。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;系统间通信概述&quot;&gt;1 系统间通信概述&lt;/h1&gt;&lt;p&gt;一般来说，大型应用通常会被拆分成多个子系统，这些子系统可能会部署在多台机器上，也可能只是一台机器的多个进程中，这样的应用就是分布式应用。而分布式应用的子系统之间并不是完全独立的，它们需要相互通信来共同完成某个功能
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="消息队列" scheme="https://www.codetool.top/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>leetcode1071-字符串的最大公因子</title>
    <link href="https://www.codetool.top/article/leetcode1071-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E5%AD%90/"/>
    <id>https://www.codetool.top/article/leetcode1071-字符串的最大公因子/</id>
    <published>2020-03-11T16:52:34.000Z</published>
    <updated>2020-03-11T17:00:26.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>对于字符串 <code>S</code> 和 <code>T</code>，只有在 <code>S = T + ... + T</code>（T 与自身连接 1 次或多次）时，我们才认定 “<code>T</code> 能除尽 <code>S</code>”。</p><p>返回最长字符串 <code>X</code>，要求满足 <code>X</code> 能除尽 <code>str1</code> 且 <code>X</code> 能除尽 <code>str2</code>。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> str1 = “ABCABC”, str2 = “ABC”<br><strong>输出:</strong> “ABC”  </p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> str1 = “ABABAB”, str2 = “ABAB”<br><strong>输出:</strong> “AB”      </p></blockquote><p><strong>示例 3:</strong></p><blockquote><p><strong>输入:</strong> str1 = “LEET”, str2 = “CODE”<br><strong>输出:</strong> “”  </p></blockquote><p><strong>提示：</strong></p><ol><li><code>1 &lt;= str1.length &lt;= 1000</code></li><li><code>1 &lt;= str2.length &lt;= 1000</code></li><li><code>str1[i] 和 str2[i] 为大写英文字母</code></li></ol><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>这道题我之前想得很复杂！结果一看题解：卧槽还能这样。给大佬们跪了。</p><p>确实好久没接触这样的数学知识了：辗转相除法。</p><p>首先如果str1和str2有最大公因子，那么str1+str2就会等于str2+str1。</p><p>然后就是考虑怎么把最大公因子子字符串取出来，说实话辗转相除法我是没想到的，百度百科：</p><blockquote><p>欧几里德算法又称辗转相除法，是指用于计算两个正整数a，b的最大公约数。应用领域有数学和计算机两个方面。计算公式gcd(a,b) = gcd(b,a mod b)。</p></blockquote><p>这样求出两个字符串的长度的最大公因数，就是子字符串的长度，然后用substring取出来。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">gcdOfStrings</span><span class="token punctuation">(</span>String str1<span class="token punctuation">,</span> String str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>str1<span class="token operator">+</span>str2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str2<span class="token operator">+</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> str1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">gcd</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> x<span class="token operator">%</span>y<span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span>y<span class="token operator">:</span><span class="token function">gcd</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token operator">%</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;对于字符串 &lt;code&gt;S&lt;/code&gt; 和 &lt;code&gt;T&lt;/code&gt;，只有在 &lt;code&gt;S = T + ... + T&lt;/code&gt;（T 与自身连接 1 次或多次）时，我们才认定 “&lt;code&gt;T&lt;/code&gt; 能除尽 &lt;c
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合Redis使用</title>
    <link href="https://www.codetool.top/article/SpringBoot%E6%95%B4%E5%90%88Redis%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.codetool.top/article/SpringBoot整合Redis使用/</id>
    <published>2020-03-11T15:40:34.000Z</published>
    <updated>2020-03-11T15:41:57.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringDataRedis中的RedisTemplate介绍">1 SpringDataRedis中的RedisTemplate介绍</h1><p>maven依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>默认使用的是lettuce作为redis的客户端，Spring Data Redis封装了其API，<code>RedisTemplate</code>是它的核心类。引入commons-pool2的原因是 lettuce 需要使用 commons-pool 2 创建 Redis 连接池。</p><p>Spring Data Redis通过<code>LettuceConnection</code>来操作Redis，而这个对象通过<code>LettuceConnectionFactory</code>获得，因为letture可以帮我们创建连接池，我们也不需要关注创建连接池部分，需要关注的是<code>LettuceConnectionConfiguration</code>中的配置信息。（如果是Jedis就得我们手动代码创建线程池了）</p><h2 id="序列化器">1.1 序列化器</h2><p><strong>可以通过Redis来存取对象，实际上是RedisTemplate通过序列化器RedisSerializer进行了序列化。</strong></p><p><img src="https://api.codetool.top/img/15839338843311.png" alt></p><p>RedisSerializer有两个主要方法：<code>serialize</code>（序列化）和<code>deserialize</code>（反序列化）。这里JdkSerializationRedisSerializer是RedisTemplate默认的序列化器，基本用的就是jdk序列化的方法，jdk中的序列化可以看我以前的文章<a href="../对象的输入输出-java序列化机制">对象的输入输出-java序列化机制</a>。</p><p>RedisTemplate可以配置它使用的序列化器，如下表</p><table><thead><tr><th>属性</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>defaultSerializer</td><td>默认序列化器</td><td>如果没有设置，则使用JdkSerializationRedisSerializer</td></tr><tr><td>keySerializer</td><td>Redis键序列化器</td><td>如果没有设置，则使用默认序列化器</td></tr><tr><td>valueSerializer</td><td>Redis值序列化器</td><td>如果没有设置，则使用默认序列化器</td></tr><tr><td>hashKeySerializer</td><td>Redis散列结构field序列化器</td><td>如果没有设置，则使用默认序列化器</td></tr><tr><td>hashValueSerializer</td><td>Redis散列结构value序列化器</td><td>如果没有设置，则使用默认序列化器</td></tr><tr><td>stringSerializer</td><td>字符串序列化器</td><td>RedisTemplate自动赋值为StringRedisSerializer对象</td></tr></tbody></table><p>注意如果是使用默认的序列化器，在存键的时候RedisTemplate会把键也当成一个Java对象进行序列化，所以如果想RedisTemplate把键当成普通字符串，得配置为stringRedisSerializer。我们采用下面的注入方式：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// RedisTemplate会自动初始化StringSerializer，这里直接获取</span>        RedisSerializer stringRedisSerializer <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getStringSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置字符串序列化器</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>或者，在springboot中，由于会自动注入RedisTemplate对象，可以在获取之后更改它的属性</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> RedisTemplate redisTemplate <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token annotation punctuation">@PostConstruct</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">initRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    RedisSerializer stringRedisSerializer <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getStringSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="对Redis数据类型操作的封装">1.2 对Redis数据类型操作的封装</h2><table><thead><tr><th>操作接口</th><th>功能</th></tr></thead><tbody><tr><td>GeoOperations</td><td>地理位置操作接口</td></tr><tr><td>HashOperations</td><td>散列操作接口</td></tr><tr><td>HyperLogLogOperations</td><td>基数操作接口</td></tr><tr><td>ListOperations</td><td>列表(链表)操作接口</td></tr><tr><td>SetOperations</td><td>集合操作接口</td></tr><tr><td>ValueOperations</td><td>字符串操作接口</td></tr><tr><td>ZSetOperations</td><td>有序集合操作接口</td></tr></tbody></table><p>获取：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//字符串操作接口</span>ValueOperations valueOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SetOperations setOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>HashOperations hashOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ListOperations listOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ZSetOperations zSetOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这些接口下的方法名就跟redis的操作指令一样了。需要注意的是在这些不同的接口中操作的实际上不是在同一个redis连接中完成的，默认每种类型的数据操作都使用了一条新连接。</p><p>RedisTemplate还可以绑定一个key，对这个key做连续的操作，如：</p><pre class=" language-java"><code class="language-java">BoundValueOperations stringKeyOps <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">boundValueOps</span><span class="token punctuation">(</span><span class="token string">"stringKey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="SessionCallback和RedisCallback">1.3 SessionCallback和RedisCallback</h2><p>如果我们想在一个连接中执行多个Redis命令，就可能需要这两个接口，其中SessionCallback封装得更完善，推荐使用。</p><pre class=" language-java"><code class="language-java">redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SessionCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">execute</span><span class="token punctuation">(</span>RedisOperations operations<span class="token punctuation">)</span> <span class="token keyword">throws</span> DataAccessException <span class="token punctuation">{</span>        operations<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        operations<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span><span class="token string">"field"</span><span class="token punctuation">,</span><span class="token string">"hvalue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="SpringBoot中操作Redis">2 SpringBoot中操作Redis</h1><h2 id="使用RedisTemplate">2.1 使用RedisTemplate</h2><p>常用配置：</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 连接池中的最小空闲连接 默认 0</span><span class="token attr-name">spring.redis.lettuce.pool.min-idle</span><span class="token punctuation">=</span> <span class="token attr-value">5</span><span class="token comment" spellcheck="true"># 连接池最大连接数（使用负值表示没有限制） 默认 8</span><span class="token attr-name">spring.redis.lettuce.pool.max-active</span><span class="token punctuation">=</span> <span class="token attr-value">10</span><span class="token comment" spellcheck="true"># 连接池中的最大空闲连接 默认 8</span><span class="token attr-name">spring.redis.lettuce.pool.max-idle</span><span class="token punctuation">=</span> <span class="token attr-value">10</span><span class="token comment" spellcheck="true"># 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1</span><span class="token attr-name">spring.redis.lettuce.pool.max-wait</span><span class="token punctuation">=</span> <span class="token attr-value">2000</span><span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1</span><span class="token attr-name">spring.redis.password</span><span class="token punctuation">=</span><span class="token comment" spellcheck="true"># Redis连接超时时间，单位毫秒</span><span class="token attr-name">spring.redis.timeout</span><span class="token punctuation">=</span> <span class="token attr-value">1000</span></code></pre><p>然后获取RedisTemplate就行了，这个是在IoC容器中的。</p><p>下面讲一种更简单的方法，Spring提供了缓存注解，使用这些注解可以有效简化编程过程。</p><h2 id="缓存管理器">2.2 缓存管理器</h2><p>Spring支持多种缓存的使用，它提供了接口CacheManager，有许多实现类</p><p><img src="https://api.codetool.top/img/15839398052935.png" alt></p><p>在Spring Boot中，我们可以通过配置文件生成缓存管理器，如下：</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># Spring Cache Start</span><span class="token comment" spellcheck="true"># 默认情况下Spring会根据上下文探测</span><span class="token attr-name">spring.cache.type</span><span class="token punctuation">=</span><span class="token attr-value">redis</span><span class="token comment" spellcheck="true"># 缓存名称，配合注解使用</span><span class="token attr-name">spring.cache.cache-names</span><span class="token punctuation">=</span> <span class="token attr-value">redisCache</span><span class="token comment" spellcheck="true"># 是否允许Redis缓存空值</span><span class="token attr-name">spring.cache.redis.cache-null-values</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 是否启用Redis的键前缀</span><span class="token attr-name">spring.cache.redis.use-key-prefix</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true"># Redis的键前缀</span><span class="token attr-name">spring.cache.redis.key-prefix</span><span class="token punctuation">=</span><span class="token comment" spellcheck="true"># 缓存超时时间戳，配置为0则不设置超时时间</span><span class="token attr-name">spring.cache.redis.time-to-live</span><span class="token punctuation">=</span><span class="token attr-value">0ms</span><span class="token comment" spellcheck="true"># Spring Cache End</span></code></pre><p>为了使用缓存管理器，首先在配置类中加入注解<code>@EnableCaching</code></p><p>然后在Service层（而不是DAO层）的方法上加上如下注解：</p><ul><li><code>@Cacheable</code> 通常应用到读取数据的方法上，如查找方法：先从缓存中读取，如果没有再调用方法获取数据，然后把数据查询结果添加到缓存中。如果缓存中查找到数据，被注解的方法将不会执行。属性：<ul><li><code>value</code>：缓存的名称，这个是之前在配置文件中定义的<code>spring.cache.cache-names</code></li><li><code>key</code>：缓存的key，可以使用SpEL表达式，如<code>key = &quot;&#39;redis_user_&#39;+#id&quot;</code></li><li><code>condition</code>：缓存的条件，使用SpEL表达式，返回true则缓存</li></ul></li></ul><ul><li><p><code>@CachePut</code> 通常应用于保存和修改方法配置，能够根据方法的请求参数对其结果进行缓存，和 @Cacheable 不同的是，它每次都会触发被注解方法的调用。属性：</p><ul><li><code>value</code>：缓存的名称</li><li><code>key</code>：缓存的key</li><li><code>condition</code>：缓存的条件</li></ul></li><li><p><code>@CachEvict</code> 通常应用于删除方法配置，能够根据一定的条件对缓存进行清空。可以清除一条或多条缓存。属性：</p><ul><li><code>value</code>：缓存的名称</li><li><code>key</code>：缓存的key</li><li><code>condition</code>：缓存的条件</li><li><code>allEntries</code>：是否清空所有缓存内容，默认为false</li><li><code>beforeInvocation</code>：是否在方法执行前就清空，默认为false</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringDataRedis中的RedisTemplate介绍&quot;&gt;1 SpringDataRedis中的RedisTemplate介绍&lt;/h1&gt;&lt;p&gt;maven依赖：&lt;/p&gt;
&lt;pre class=&quot; language-xml&quot;&gt;&lt;code class=&quot;lan
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Redis" scheme="https://www.codetool.top/tags/Redis/"/>
    
      <category term="SpringBoot" scheme="https://www.codetool.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot对定时任务的支持</title>
    <link href="https://www.codetool.top/article/SpringBoot%E5%AF%B9%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E6%94%AF%E6%8C%81/"/>
    <id>https://www.codetool.top/article/SpringBoot对定时任务的支持/</id>
    <published>2020-03-11T10:27:13.000Z</published>
    <updated>2020-03-11T11:41:52.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述">1 概述</h1><p>在企业的实践生产中,可能需要使用一些定时任务。例如，在月末、季末和年末需要统计各种各样的报表，月表需要月末跑批量生成，季表需要季末跑批量生成，这样就需要制定不同的定时任务。</p><h1 id="使用">2 使用</h1><p>在Spring中配置定时任务的方法：</p><p>首先在配置类中加入<code>@EnableScheduling</code>，然后通过注解<code>@Scheduled</code>去配置如何定时。</p><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduleService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//计数器</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//每隔一秒执行一次</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//使用异步执行</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scheduledTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"scheduledTask执行第"</span><span class="token operator">+</span>count<span class="token operator">+</span><span class="token string">"次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动SpringBoot程序，可以观察到控制台打印信息：</p><pre><code>2020-03-11 19:00:03.436  INFO 7360 --- [l-thread-pool-1] c.rhett.bootweb.service.ScheduleService  : scheduledTask执行第1次2020-03-11 19:00:04.432  INFO 7360 --- [l-thread-pool-2] c.rhett.bootweb.service.ScheduleService  : scheduledTask执行第2次2020-03-11 19:00:05.433  INFO 7360 --- [l-thread-pool-3] c.rhett.bootweb.service.ScheduleService  : scheduledTask执行第3次2020-03-11 19:00:06.432  INFO 7360 --- [l-thread-pool-4] c.rhett.bootweb.service.ScheduleService  : scheduledTask执行第4次2020-03-11 19:00:07.433  INFO 7360 --- [l-thread-pool-5] c.rhett.bootweb.service.ScheduleService  : scheduledTask执行第5次...</code></pre><p>这说明每秒钟Spring都会运行这个标注了<code>@Scheduled</code>的方法，并且使用了线程池（在<a href="../SpringBoot对异步任务的支持">SpringBoot对异步任务的支持</a>中配置的）。</p><h1 id="cron表达式">3 cron表达式</h1><p>上面的<code>@Scheduled</code>只是按照时间间隔执行,如果需要指定某个时间执行，就需要一些其他属性配置了，下面列出了<code>@Scheduled</code>的一些属性：</p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>cron</td><td>String</td><td>使用表达式的方式定义任务执行时间</td></tr><tr><td>zone</td><td>String</td><td>可以通过它设定区域时间</td></tr><tr><td>fixedDelay</td><td>long</td><td>表示从上一个任务完成开始到下一个任务开始的间隔,单位为毫秒</td></tr><tr><td>fixedDelayString</td><td>String</td><td>与fixedDelay相同,只是使用字符串,这样可以使用SpEL来引入配置文件的配置</td></tr><tr><td>initialDelay</td><td>long</td><td>在Spring IoC容器完成初始化后,首次任务执行延迟时间,单位为毫秒</td></tr><tr><td>initialDelayString</td><td>String</td><td>与initialDelay相同,只是使用字符串,这样可以使用SpEL来引入配置文件的配置</td></tr><tr><td>fixedRate</td><td>long</td><td>从上一个任务开始到下一个任务开始的间隔,单位为毫秒</td></tr><tr><td>fixedRateString</td><td>String</td><td>与fixedRate相同,只是使用字符串,这样可以使用SpEL来引入配置文件的配置</td></tr></tbody></table><p>看到这些属性是不是有种莫名的熟悉？（假设你是我博客的忠实读者，虽然概率为0%，或者你也对jdk比较了解）</p><p>没错，在我之前写的一篇<a href="../Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E8%AF%A6%E8%A7%A3/#toc-heading-16">Java线程池详解</a>中介绍了任务调度线程池ScheduledExecutorService有接近的功能，而在<code>org.springframework.scheduling.ScheduledTaskRegistrar</code>这个类下面，也看到了有一个成员属性localExecutor，它的类型就是<code>ScheduledExecutorService</code>。</p><p>所以fixedRate和fixedDelay就对应着ScheduledExecutorService接口的<code>scheduleAtFixedRate</code>和<code>scheduleWithFixedDelay</code>，delay要等到上一个任务完成才开始计算间隔时间，rate不用。</p><p>而cron这个属性在<code>ScheduledExecutorService</code>中就没见过了，它是一个用来匹配时间表达式，方便我们定义在某个时间规则执行任务。cron的语法是：“秒 分 时 天 月 星期 年”，其中年可以省略。它们的取值都很接近自然表达，比如说分的取值<code>0-59</code>，天的取值<code>1-31</code>，月的取值<code>1-12</code>，星期的取值<code>1-7</code>，代表星期日到星期六（这点需要注意），也可以写英文缩写<code>SUN-SAT</code>。</p><p>除了写具体的取值，还可以写通配符：</p><table><thead><tr><th>通配符</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>表示任意值</td></tr><tr><td>?</td><td>不指定值，用于处理天和星期配置的冲突</td></tr><tr><td>-</td><td>指定时间区间，如对于星期，2-6代表的是星期一到星期五</td></tr><tr><td>/</td><td>指定时间间隔执行，/前面是开始值，/后面是步长，例如对于分钟，0/3代表从0分开始，每隔三分执行一次</td></tr><tr><td>L</td><td>代表最后的，如对于星期，4L代表最后一个星期三</td></tr><tr><td>#</td><td>前面是值，后面是第几个，如对于星期，6#3代表第三个星期五</td></tr><tr><td>,</td><td>列举多个项，例如对于月份，<code>3,5,7</code>代表每个3月、5月、7月</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;1 概述&lt;/h1&gt;&lt;p&gt;在企业的实践生产中,可能需要使用一些定时任务。例如，在月末、季末和年末需要统计各种各样的报表，月表需要月末跑批量生成，季表需要季末跑批量生成，这样就需要制定不同的定时任务。&lt;/p&gt;
&lt;h1 id=&quot;使用&quot;&gt;2 使用&lt;/h1&gt;&lt;p&gt;在
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SpringBoot" scheme="https://www.codetool.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot对异步任务的支持</title>
    <link href="https://www.codetool.top/article/SpringBoot%E5%AF%B9%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E7%9A%84%E6%94%AF%E6%8C%81/"/>
    <id>https://www.codetool.top/article/SpringBoot对异步任务的支持/</id>
    <published>2020-03-11T10:26:19.000Z</published>
    <updated>2020-03-11T15:42:17.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异步方法">1 异步方法</h1><p>在配置类上配置 <code>@EnableAsync</code> 注解开启异步处理。</p><p>在方法上加上注解<code>@Async</code>将该方法标记为异步任务。</p><p>用法和FutureTask+Callable差不多，可以返回AsyncResult类型，它是Future的一个实现类。</p><p>例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Async</span><span class="token keyword">public</span> Future<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">asyncTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">{</span>    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"任务完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="异步线程池">2 异步线程池</h1><p>如果一直使用<code>@Async</code>不配合线程池，会消耗很多资源，效率变低，Spring中有一个AsyncConfigurer接口，可以通过它配置线程池。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AsyncConfigurer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取线程池</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">default</span> Executor <span class="token function">getAsyncExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//异步异常处理器</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">default</span> AsyncUncaughtExceptionHandler <span class="token function">getAsyncUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>于是我们可以创建一个配置类，在这里面写实现,<code>@EnableAsync</code> 注解放到这个配置类上面可以增加可读性。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncConfig</span> <span class="token keyword">implements</span> <span class="token class-name">AsyncConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Executor <span class="token function">getAsyncExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"正在创建线程池"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ThreadPoolTaskExecutor executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">"global-thread-pool-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样创建的线程池是全局的，也就是说默认使用<code>@Async</code>标注的方法都会从这个线程池中取线程，我们可以测试一下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Async</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出：</p><pre><code>global-thread-pool-1</code></pre><p>如果我们想让它灵活度更高一点，可以往IoC容器中注入一些Executor，使用<code>@Async(&quot;&quot;)</code>的value来指定一个要使用的线程池的bean名称。</p><p>例如，给配置类中添加注入Executor bean的方法：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncConfig</span> <span class="token keyword">implements</span> <span class="token class-name">AsyncConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Executor <span class="token function">getAsyncExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"正在创建线程池"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ThreadPoolTaskExecutor executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">"global-thread-pool-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"bigExecutor"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Executor <span class="token function">getBigExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"正在创建线程池"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ThreadPoolTaskExecutor executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">"big-thread-pool-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>指定使用线程池：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Async</span><span class="token punctuation">(</span><span class="token string">"bigExecutor"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBigPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;异步方法&quot;&gt;1 异步方法&lt;/h1&gt;&lt;p&gt;在配置类上配置 &lt;code&gt;@EnableAsync&lt;/code&gt; 注解开启异步处理。&lt;/p&gt;
&lt;p&gt;在方法上加上注解&lt;code&gt;@Async&lt;/code&gt;将该方法标记为异步任务。&lt;/p&gt;
&lt;p&gt;用法和FutureTask+
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SpringBoot" scheme="https://www.codetool.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Java之UDP编程</title>
    <link href="https://www.codetool.top/article/Java%E4%B9%8BUDP%E7%BC%96%E7%A8%8B/"/>
    <id>https://www.codetool.top/article/Java之UDP编程/</id>
    <published>2020-03-11T04:24:16.000Z</published>
    <updated>2020-03-11T06:11:33.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DatagramSocket概述">1 DatagramSocket概述</h1><p>上次在<a href="Java网络套接字Socket编程">Java网络套接字Socket编程</a>那篇博客里只写了Socket和ServerSocket，即TCP通信，这次来补充一下UDP通信。</p><p>和Socket类似的，Java中也存在一个<code>DatagramSocket</code>类，它就是面向UDP中的数据报包的概念传输，对应java.net包下面有一个类<code>DatagramPacket</code>就是用来描述数据报包。</p><p>因为UDP是无连接的，不分客户端和服务端，在单次通信中，只有发送端和接收端，因此也没有什么<code>DatagramServerSocket</code>。</p><h1 id="DatagramSocket使用">2 DatagramSocket使用</h1><p><code>DatagramSocket()</code>：建立一个udp socket，它实际上是调用了<code>DatagramSocket(new InetSocketAddress(0))</code>，即指定端口号为0，0的含义是这个端口号是根据系统指定动态生成的。</p><p>其他构造函数就是和<code>Socket</code>类似的传一个端口号进去、传一个SocketAddress进去。</p><p><code>bind</code>：绑定端口</p><p><code>connect</code>：虽然udp是无连接的，但可以只与同一台机器通信，这种情况也称它为connect，connect之后所有的send和receive操作都与指定的主机通信。</p><p><code>send</code>：发送一个<code>DatagramPacket</code>数据报包</p><p><code>receive</code>：接收一个数据报包，这个方法是阻塞的。</p><p><code>close</code>：释放socket</p><p>需要注意的是<code>receive</code>方法需要传入一个数据报包对象，这个数据报包对象由一个空的字节数组构造，而字节数组的长度值得考虑，如果过小可能会造成数据截断，所以发送方和接收方最好对数据包的大小制定约定规范。</p><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    DatagramSocket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> msg <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DatagramPacket packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">12306</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testReceive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    DatagramSocket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">12306</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    DatagramPacket packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>packet<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>packet<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="DatagramChannel">3 DatagramChannel</h1><p>需要了解的是，UDP本身就不存在什么阻塞，不需要连接，只在<code>receive</code>的时候会阻塞等待数据报。使用DatagramChannel可以设置非阻塞，则在从DatagramChannel中读数据报的时候如果没有数据报，就可以立即返回null。</p><p>相关API：<code>public abstract SocketAddress receive(ByteBuffer dst) throws IOException;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DatagramSocket概述&quot;&gt;1 DatagramSocket概述&lt;/h1&gt;&lt;p&gt;上次在&lt;a href=&quot;Java网络套接字Socket编程&quot;&gt;Java网络套接字Socket编程&lt;/a&gt;那篇博客里只写了Socket和ServerSocket，即TCP通信，这
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="java" scheme="https://www.codetool.top/tags/java/"/>
    
      <category term="IO" scheme="https://www.codetool.top/tags/IO/"/>
    
      <category term="网络编程" scheme="https://www.codetool.top/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
