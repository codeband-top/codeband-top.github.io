<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>代码段小站</title>
  <icon>https://www.gravatar.com/avatar/4c71a513a84e4d430b9f9aed224237fc</icon>
  <subtitle>CodeTool - 个人计算机类练手小博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.codetool.top/"/>
  <updated>2020-03-12T17:32:13.776Z</updated>
  <id>https://www.codetool.top/</id>
  
  <author>
    <name>Rhett Peng</name>
    <email>pctdyx@qq.net</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>剑指offer03-数组中重复的数字</title>
    <link href="https://www.codetool.top/article/%E5%89%91%E6%8C%87offer03-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>https://www.codetool.top/article/剑指offer03-数组中重复的数字/</id>
    <published>2020-03-12T17:29:19.000Z</published>
    <updated>2020-03-12T17:32:13.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题（来源Leetcode）">1 原题（来源Leetcode）</h1><p>找出数组中重复的数字。</p><p>在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong><br>[2, 3, 1, 0, 2, 5, 3]<br><strong>输出:</strong> 2 或 3   </p></blockquote><p><strong>限制：</strong></p><p><code>2 &lt;= n &lt;= 100000</code></p><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>限定了范围，就用bitmap去重的思想</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> exist<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span>nums<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>exist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>            exist<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题（来源Leetcode）&quot;&gt;1 原题（来源Leetcode）&lt;/h1&gt;&lt;p&gt;找出数组中重复的数字。&lt;/p&gt;
&lt;p&gt;在一个长度为 n 的数组 nums 里的所有数字都在 0～n-1 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="https://www.codetool.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>AMQP协议介绍和使用AMQP-client操作RabbitMQ</title>
    <link href="https://www.codetool.top/article/AMQP%E5%8D%8F%E8%AE%AE%E4%BB%8B%E7%BB%8D%E5%92%8CRabbitMQ%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/"/>
    <id>https://www.codetool.top/article/AMQP协议介绍和RabbitMQ入门案例/</id>
    <published>2020-03-12T14:08:39.000Z</published>
    <updated>2020-03-12T16:50:43.307Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考资源：</p><p><a href="https://blog.csdn.net/weixin_37641832/article/details/83270778" target="_blank" rel="noopener">深入理解AMQP协议_网络_My Blogs-CSDN博客</a></p><p>推荐阅读：</p><p><a href="../消息队列概述与JMS使用">消息队列概述与JMS使用</a></p><h1 id="RabbitMQ概述">1 RabbitMQ概述</h1><p>RabbitMQ是一个由Erlang语言开发的基于AMQP标准的开源实现。RabbitMQ 最初起源于金融系统，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。其具体特点包括:</p><ul><li>保证可靠性(Reliability)。RabbitMQ 使用一些机制来保证可靠性，如持久化、传输确认、发布确认等。</li><li>具有灵活的路由(Flexible Routing)功能。在消息进入队列之前，是通过Exchange(交换器)来路由消息的。对于典型的路由功能，RabbitMQ已经提供了一些内置的Exchange来实现。针对更复杂的路由功能，可以将多个Exchange绑定在一起，也可以通过插件机制来实现自己的Exchange。</li><li>支持消息集群(Clustering)。 多台RabbitMQ服务器可以组成一个集群，形成一个逻辑Broker。</li><li>具有高可用性(Highly Available)。队列可以在集群中的机器上进行镜像，使得在部分节点出现问题的情况下队列仍然可用。</li><li>支持多种协议(Multi-protocol)。RabbitMQ 除支持AMQP协议之外，还通过插件的方式支持其他消息队列协议，比如STOMP、MQTT等。</li></ul><h1 id="AMQP协议">2 AMQP协议</h1><h2 id="AMQP核心概念">2.1 AMQP核心概念</h2><p><code>Server</code>，服务器，又称Broker，接收客户端的连接，实现AMQP实体服务</p><p><code>Connection</code>，连接，应用程序和Broker的网络连接</p><p><code>Channel</code>，网络信道，几乎所有的操作都在Channel中进行，客户端可建立多个Channel，每个Channel代表一个会话任务。有点像JMS的Session。</p><p><code>Message</code>，消息，由Properties和Body组成，Properties可以对消息进行修饰（类似于Http的请求头），Body就是消息体内容。</p><p><code>Exchange</code>，交换机，用来接收生产者发送的消息并将这些消息路由给服务器中的队列</p><p><code>Queue</code>，消息队列，用来保存消息直到发送给消费者。</p><p><code>Routing Key</code>，路由键，虚拟机可以用它来确定如何路由一个特定消息</p><p><code>Binding</code>，绑定，用于Exchange和Queue之间的关联。一个Binding路由规则就是一个RoutingKey和Queue的对应关系。</p><p><code>Virtual host</code>：虚拟主机，用于进行逻辑隔离，最上层的消息路由。每个Virtual host类似于一个mini版的消息服务器。一个Virtual host里面可以有若干个Exchange和Queue，同一个Virtual Host里面不能有相同名称的Exchange和Queue。</p><p><img src="https://api.codetool.top/img/15840050706893.png" alt></p><p>在Server内部是可以有多个Exchange和Queue的。</p><h2 id="核心组件的生命周期">2.2 核心组件的生命周期</h2><h3 id="消息的生命周期">2.2.1 消息的生命周期</h3><ol><li><p>Publisher产生一条数据，发送到Broker。</p></li><li><p><strong>Broker中的Exchange根据RoutingKey查询投递的目标Queue</strong>（Broker从消息属性中获取Routing Key，如果不能完成路由会将消息丢弃或返回给生产者，一条消息可以路由到多个队列）。</p></li><li><p>Consumer向Broker告知自己监听哪个队列，当有数据到达Queue，Broker会推送给Consumer。如果没有消费者，消息队列通过AMQP将消息返回给生产者。</p></li></ol><h3 id="交换器的生命周期">2.2.2 交换器的生命周期</h3><p>每台AMQP服务器都预先创建了许多交换器实例，它们在服务器启动时就存在并且不能被销毁。如果你的应用程序有特殊要求，则可以选择自己创建交换器，并在完成工作后进行销毁。</p><h3 id="队列的生命周期">2.2.3 队列的生命周期</h3><p>主要有两种消息队列，即持久化消息队列和临时消息队列。持久化消息队列可被多个消费者共享，不管是否有消费者接收，它们都可以独立存在。临时消息队列对某个消费者是私有的，只能绑定到此消费者，当消费者断开连接时，该消息队列将被删除。</p><h2 id="功能命令">2.3 功能命令</h2><p>AMQP协议文本是分层描述的，0-9版本分为<strong>功能层和传输层</strong>。</p><ul><li><p>功能层：定义了一系列的命令，这些命令按功能逻辑组合成不同的类（Class），客户端应用可以利用它们来实现自己的业务功能。</p></li><li><p>传输层：将功能层接收的消息传递给服务器经过相应处理后再返回，处理的事情包括信道复用、帧同步、内容编码、心跳检测、数据表示和错误处理等。</p></li></ul><p>0-10版本分为<strong>模型层、会话层和传输层。</strong></p><ul><li><p>模型层：原来的功能层，定义了一系列的命令，利用它们来实现业务功能。</p></li><li><p>会话层：负责将命令从客户端应用传递给服务器，再将服务端的响应返回给客户端应用，会话层为这个过程提供了可靠性、同步机制和错误处理。</p></li><li><p>传输层：提供信道复用、帧同步、错误检测和数据表示。</p></li></ul><h2 id="消息数据格式">2.4 消息数据格式</h2><p>AMQP是二进制协议，所有的消息数据被组织成各种类型的帧，以0-9-1版本为例，帧的格式：</p><p>帧头（header，7个字节），包含帧类型type（一个字节）、信道（Channel）、size（帧负载的大小）</p><p>帧类型包括：</p><ul><li>1，<code>“METHOD”</code>，方法帧</li><li>2，<code>“HEADER”</code>，内容头帧</li><li>3，<code>“BODY”</code>，内容体帧</li><li>4，<code>“HEARTBEAT”</code>，心跳帧</li></ul><p>任意大小的帧负载（格式依赖于帧类型）</p><h2 id="交换器类型">2.5 交换器类型</h2><p>不同类型的交换器分发消息的策略是不同的，目前交换器有四种类型：Direct，Fanout，Topic，Headers，其中Headers基本不用了。</p><h3 id="Direct交换器">2.5.1 Direct交换器</h3><p>如果<strong>消息中的路由键和Binding中的绑定键一致</strong>，交换器就把消息发送到对应的队列中。</p><h3 id="Fanout交换器">2.5.2 Fanout交换器</h3><p>Fanout交换器不处理路由键，它把消息转发给所有与其绑定的队列，类似于子网转发。</p><h3 id="Topic交换器">2.5.3 Topic交换器</h3><p>Topic交换器通过模式匹配分配消息的路由键属性，将路由键和某种模式进行匹配，每个队列都绑定了一种模式，有两种通配符：“<code>#</code>”匹配0个或多个单词，“<code>*</code>”匹配一个单词</p><p><img src="https://api.codetool.top/img/1584012259364.png" alt="RabbitMQ默认提供的Exchanges"></p><h1 id="RabbitMQ使用">3 RabbitMQ使用</h1><p>RabbitMQ的安装这里不做介绍。<del>（不太会）</del></p><p>默认端口号5672</p><p>启动RabbitMQ服务：<code>rabbitmq-server start &amp;</code></p><p>服务的停止：<code>rabbitmqctl stop_app</code></p><p>启用网页可视化管理插件： <code>rabbitmq-plugins enable rabbitmq_management</code></p><p>安装完之后在<code>/usr/lib/rabbitmq/lib/rabbitmq_server-3.6.5/ebin</code>下面更改<code>rabbit.app</code>中的loop_users，把[]里面的内容去掉。（默认用户是guest，密码guest，这里允许guest远程访问，或者你添加一个用户，赋予权限）</p><p>访问地址：<a href="http://localhost:15672/" target="_blank" rel="noopener">http://localhost:15672/</a></p><h2 id="命令行操作">3.1 命令行操作</h2><p><code>rabbitmqctl stop_app</code>：关闭应用</p><p><code>rabbitmqctl start_app</code>：开启应用</p><p><code>rabbitmqctl status</code>：节点状态</p><p><code>rabbitmqctl add_user username password</code>：添加用户</p><p><code>rabbitmqctl change_password username newpassword</code>：修改密码</p><p><code>rabbitmqctl list_users</code>：列出所有用户</p><p><code>rabbitmqctl delete_user username</code>：删除用户</p><p><code>rabbitmqctl list_user_permissions username</code>：列出用户权限</p><p><code>rabbitmqctl clear_permissions -p vhostpath username</code>：清除用户权限</p><p><code>rabbitmqctl set_permissions -p vhostpath username &quot;.*&quot; &quot;.*&quot; &quot;. *&quot;</code>：清除用户权限</p><p><code>rabbitmqctl add_vhost vhostpath</code>：创建虚拟主机</p><p><code>rabbitmqctl delete_vhost vhostpath</code>：删除虚拟主机</p><p><code>rabbitmqctl list_vhosts</code>：列出所有虚拟主机</p><p><code>rabbitmqctl list_permissions -p vhostpath</code>：列出虚拟主机权限</p><p><code>rabbitmqctl list_queues</code>：查看所有队列信息</p><p><code>rabbitmqctl -p vhostpath purge_queue blue</code>：清除队列里的消息</p><p><code>rabbitmqctl reset</code>：移除所有数据，要在<code>rabbitmqctl stop_app</code>之后使用</p><h2 id="AMQP-clinet使用">3.2 AMQP-clinet使用</h2><p>maven依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.rabbitmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>amqp-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>这里的AMQP指的是一套操控rabbitMQ的API，类似于JMS</p><p>需要注意的是<strong>JMS需要通过session去创建消费者和生产者，AMQP只需要通过channel去创建消费者。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> TimeoutException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建一个ConnectionFactory</span>        ConnectionFactory connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.创建一个连接</span>        Connection connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.通过connection创建一个Channel</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String msg <span class="token operator">=</span> <span class="token string">"Hello RabbitMQ!"</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.通过Channel发送数据，四个参数：exchange，routingKey，props，body</span>            channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"test001"</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//5. 关闭连接</span>        channel<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Comsumer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> TimeoutException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.创建一个ConnectionFactory</span>        ConnectionFactory connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setHost</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPort</span><span class="token punctuation">(</span><span class="token number">5672</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.创建一个连接</span>        Connection connection <span class="token operator">=</span> connectionFactory<span class="token punctuation">.</span><span class="token function">newConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.通过connection创建一个Channel</span>        Channel channel <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">createChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.声明一个队列</span>        String queueName <span class="token operator">=</span> <span class="token string">"test001"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//五个参数：queue队列名、durable是否持久化、exclusive保证顺序独占锁</span>        <span class="token comment" spellcheck="true">//autoDelete如果队列不再被使用（绑定）就自动删除、arguments附带的参数</span>        channel<span class="token punctuation">.</span><span class="token function">queueDeclare</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.创建消费者</span>        com<span class="token punctuation">.</span>rabbitmq<span class="token punctuation">.</span>client<span class="token punctuation">.</span>Consumer consumer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultConsumer</span><span class="token punctuation">(</span>channel<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token comment" spellcheck="true">//消费消息</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleDelivery</span><span class="token punctuation">(</span>String consumerTag<span class="token punctuation">,</span>                                       Envelope envelope<span class="token punctuation">,</span>                                       AMQP<span class="token punctuation">.</span>BasicProperties properties<span class="token punctuation">,</span>                                       <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> body<span class="token punctuation">)</span>                    <span class="token keyword">throws</span> IOException            <span class="token punctuation">{</span>                String routingKey <span class="token operator">=</span> envelope<span class="token punctuation">.</span><span class="token function">getRoutingKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String contentType <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费的路由键："</span><span class="token operator">+</span>routingKey<span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费的内容类型："</span><span class="token operator">+</span>contentType<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">long</span> deliveryTag <span class="token operator">=</span> envelope<span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 确认消息</span>                channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>deliveryTag<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费的消息体内容："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String bodyStr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>body<span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bodyStr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 6.设置Channel，三个参数：queue队列名，autoAck自动签收，Callback一个Consumer对象</span>            channel<span class="token punctuation">.</span><span class="token function">basicConsume</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span>consumer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>要注意amqp-client老版本有一个QueueingConsumer，会造成内存溢出，已经被废弃了。</p><p>在这个案例中，生产者的basicPublish没有指定任何交换器，此时使用的是默认交换器AMQP DEFAULT，此交换器默认绑定所有队列，传routingKey给它的时候，它会找有没有队列名和该key相同的队列，有则路由消息给该队列。</p><p>其他相关API：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 声明交换机，后面两个参数可省略，第二个参数声明类型，参考上面关于交换器类型的介绍</span>channel<span class="token punctuation">.</span><span class="token function">exchangeDeclare</span><span class="token punctuation">(</span>String exchange<span class="token punctuation">,</span> String type<span class="token punctuation">,</span> <span class="token keyword">boolean</span> durable<span class="token punctuation">,</span> <span class="token keyword">boolean</span> autoDelete<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 绑定队列到交换机，为队列分配一个key</span>channel<span class="token punctuation">.</span><span class="token function">queueBind</span><span class="token punctuation">(</span>String queue<span class="token punctuation">,</span> String exchange<span class="token punctuation">,</span> String routingKey<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Exchange除了和Queue绑定，还可以和另一个Exchange进行绑定，就可以把消息经多次路由。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//destination被绑定的交换机，source发起绑定的交换机</span>channel<span class="token punctuation">.</span><span class="token function">exchangeBind</span><span class="token punctuation">(</span>String destination<span class="token punctuation">,</span> String source<span class="token punctuation">,</span> String routingKey<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">;</span></code></pre><p>消息由Properties和Payload组成，Payload就是消息体，而Properties包含：</p><ul><li><code>Delivery mode</code>：消息是否持久化，1：否，2：是</li><li><code>Headers</code>：头信息，是由一个或多个键值对组成的</li></ul><p>还包含一些预定义属性，如下：</p><ul><li><code>content_type</code>：消息类型</li><li><code>content_encoding</code>:消息编码</li><li><code>priority</code>：消息优先级（0-9），但不保证遵从</li><li><code>message-id</code>和<code>correlation-id</code>：表示唯一消息标识和消息响应标识，用于在工作流程中实现消息跟踪</li><li><code>timestamp</code>：表示消息创建时间</li><li><code>expiration</code>：表示消息的过期时间</li><li><code>reply-to</code>：实现响应消息的路由（构建一个用来恢复消息的私有响应队列）</li></ul><p>Java示例，把消息属性传入：</p><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>headers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"my1"</span><span class="token punctuation">,</span> <span class="token string">"111"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>headers<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"my2"</span><span class="token punctuation">,</span> <span class="token string">"222"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义属性</span>AMQP<span class="token punctuation">.</span>BasicProperties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AMQP<span class="token punctuation">.</span>BasicProperties<span class="token punctuation">.</span>Builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">deliveryMode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">contentEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">expiration</span><span class="token punctuation">(</span><span class="token string">"10000"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span>headers<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String msg <span class="token operator">=</span> <span class="token string">"Hello RabbitMQ!"</span><span class="token punctuation">;</span>channel<span class="token punctuation">.</span><span class="token function">basicPublish</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"test001"</span><span class="token punctuation">,</span>properties<span class="token punctuation">,</span>msg<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文参考资源：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_37641832/article/details/83270778&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深入理解AMQP协议_网络_My B
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="消息队列" scheme="https://www.codetool.top/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
      <category term="RabbitMQ" scheme="https://www.codetool.top/tags/RabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>消息队列概述与JMS使用</title>
    <link href="https://www.codetool.top/article/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E6%A6%82%E8%BF%B0%E4%B8%8EJMS%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.codetool.top/article/消息队列概述与JMS使用/</id>
    <published>2020-03-12T08:38:35.000Z</published>
    <updated>2020-03-12T09:03:08.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="系统间通信概述">1 系统间通信概述</h1><p>一般来说，大型应用通常会被拆分成多个子系统，这些子系统可能会部署在多台机器上，也可能只是一台机器的多个进程中，这样的应用就是分布式应用。而分布式应用的子系统之间并不是完全独立的，它们需要相互通信来共同完成某个功能，这就涉及系统间通信了。</p><p>通常有两种方式来实现系统间通信，一种是基于<strong>远程过程调用（RPC）</strong>的方式，客户端不需要知道调用的具体实现细节，只需直接调用实际存在于远程计算机上的某个对象即可，但调用方式看起来和调用本地应用程序中的对象一样。典型的RPC实现包括Dubbo、Thrift、GRPC等，甚至Rest API。</p><p><img src="https://api.codetool.top/img/15839934987792.jpg" alt></p><p>另一种是基于消息队列的方式。消息队列的方式是指由<strong>应用中的某个系统负责发送信息，由关心这条消息的相应系统负责接收消息</strong>，并在收到消息后进行各自系统内的业务处理。消息可以非常简单，比如只包含文本字符串;也可以很复杂，比如包含字节流、字节数组，还可能包含嵌入对象，甚至是Java对象(经过序列化的对象)。</p><p>消息发布者只负责将消息发布到消息队列，消息使用者只负责从消息队列中取消息，由消息队列来负责消息的传递，这样发布者和使用者都不用知道对方的存在。</p><h1 id="消息队列概述">2 消息队列概述</h1><h2 id="为什么要使用消息队列">2.1 为什么要使用消息队列</h2><h3 id="解耦">2.1.1 解耦</h3><p>各模块之间如果存在互相调用的关系，应尽可能解耦合，消息队列就是在模块之间增加了一个中间层来实现解耦，使任何一个模块只关心自己的核心流程，不必关注数据来源或结果。</p><h3 id="流量削峰">2.1.2 流量削峰</h3><p>在系统运行中，可能会出现某一时刻网站请求量爆涨（例如业务活动或DDos攻击），很难在同一时刻处理这么多请求，如果处理不当给数据库带来巨大压力可能会导致雪崩效应。使用消息队列可以将短时间高并发的请求持久化，然后逐步处理，从而改善系统性能。</p><h3 id="异步">2.1.3 异步</h3><p>很多公司会构建一个日志收集系统，由它来统一收集业务日志数据，供离线和在线的分析系统使用。如果每个业务处理请求后都同步处理写日志，可能会造成延迟，甚至出现异常会影响业务服务阻塞，这时候引入消息队列可以异步处理日志消息。</p><h3 id="分布式事务">2.1.4 分布式事务</h3><p>在大型系统中数据库可能会分库分表，分布在多台服务器上，如果一个事务涉及多张表、甚至是多个库分布在不同的机器上，如何处理这个事务呢？一种方法是业界引入的一个处理分布式事务的规范——XA（全局事务管理器），它在事务管理器和资源管理器之间形成通信桥梁，目前主流数据库都提供对XA规范的支持。</p><p>但XA的问题是性能不算很好，所以通常使用消息队列来解决这个问题，分布式事务的本质是系统间的通信，配合事件表能实现分布式事务，具体实现这里不做详述。</p><h2 id="消息队列的特点">2.2 消息队列的特点</h2><p>消息队列的思想就是生产者消费者模式，组成就是生产者、阻塞队列、消费者，其中最重要的就是阻塞队列，消息队列也就是一种阻塞队列，JDK中也存在不少该模式体现，例如线程池中就使用了BlockingQueue，关于JDK中的BlockingQueue之前也写过一篇博客研究，可以参考<a href="../阻塞队列BlockingQueue详解">阻塞队列BlockingQueue详解</a></p><p>而生产环境下要求的消息队列就不止JDK中的BlockingQueue这么简单了，在不同的业务场景中，需要消息队列产品能解决诸如消息堆积、消息持久化、可靠投递、消息重复、严格有序、集群等各种问题。</p><h3 id="消息堆积">2.2.1 消息堆积</h3><p>因为生产者和消费者是两个分开处理消息的系统，无法预知两者对消息处理速度的快慢，一旦在某个时间段消费者处理消息的速度没有跟上生产者发送消息的速度，必将导致消息在处理中心逐渐积压而得不到释放。因此，有时需要给消息队列设置一个阈值，将超过阈值的消息不再放入处理，以防止系统资源被耗尽，导致机器挂掉甚至整个消息队列不可用。<strong>这就类似于JDK中线程池的拒绝策略。</strong></p><h3 id="消息持久化">2.2.2 消息持久化</h3><p>在消息被放入消息队列后需要将消息暂存下来，消息暂存可以选择将消息放在内存中，也可以选择放到文件、数据库等地方。将消息放在内存中存在的最大问题是，一旦机器宕掉消息将丢失。如果场景需要消息不能丢失，那么势必要将消息持久化。持久化方案有很多种, 比如将消息存到本地文件、分布式文件系统、数据库系统中等。</p><h3 id="可靠投递">2.2.3 可靠投递</h3><p>有些场景必须保证消息不能丢失。这种情况可能发生在出现网络问题、系统宕机等情况下。</p><h3 id="消息重复">2.2.4 消息重复</h3><p>有些消息队列为了支持消息可靠投递，会选择在接收到消息后先持久化到本地，然后发送给消费者。当消息发送失败或者不知道是否发送成功时(比如超时)，消息的状态是待发送，定时任务不停地轮询所有的待发送消息，最终保证消息不会丢失，这就带来了消息可能会重复的问题。</p><h3 id="严格有序">2.2.5 严格有序</h3><p>在某些场景中会有需要按照生产消息的顺序来消费的情形,这就要消息队列提供有序消息的保证.</p><h3 id="集群">2.2.6 集群</h3><p>消息队列服务器也可能出现宕机问题，要保证高可用需要集群支持。</p><h2 id="消息队列协议">2.3 消息队列协议</h2><p>常见的消息队列：RabbitMQ, ActiveMQ, Kafka, RocketMQ</p><p>消息队列的规范协议有AMQP、MQTT、STOMP、XMPP四种，这些协议是类似于HTTP的比较底层的通信协议，而Java引入了JMS（Java Message Service，Java消息服务）为这些协议提供了更高一层的抽象，给Java开发者提供了一个使用消息队列一致的接口。下面主要介绍JMS的体系模型。</p><h3 id="JMS点对点模型">2.3.1 JMS点对点模型</h3><p>JMS按其规范分为点对点(Point-to-Point)和发布订阅(Publish/Subscribe)两种形式。点对点就是将一个系统的消息发布到指定的另外一个系统，这样另外一个系统就能获得消息，从而处理对应的业务逻辑。</p><p>注意点对点模型在JMS中体现为QueueConneciton</p><p>点对点模型的特点：</p><ul><li>每条消息只有一个接收者，消息一旦被接收就不再保留在消息队列中了。一个队列中可能会有多个接收者在监听，但是消息只能被队列中的一个接收者接收。</li><li>发送者和接收者之间在时间上没有依赖，当消息被发送之后，不管接收者有没有在运行，都不会影响消息被发送到队列中</li><li>消息存在先后顺序。一个队列会按照消息服务器将消息放入队列中的顺序把它们传送给接收者。当消息已经被接收时就会从队列头部将它们删除(除非使用了消息优先级)。</li><li>当接收者收到消息时，会发送确认收到通知。</li></ul><h3 id="JMS发布-订阅模型">2.3.2 JMS发布/订阅模型</h3><p>发布订阅模式是一个系统约定将消息发布到一个主题(Topic)中，然后各个系统就能够通过订阅这个主题，根据发送过来的信息处理对应的业务。在更多的时候，开发者往往更多地使用发布订阅模式，因为可以进行更多的扩展，使得更多的系统能够监控得到消息。</p><p>注意点对点模型在JMS中体现为TopicConneciton</p><p>发布/订阅模型的特点：</p><ul><li>每条消息可以有多个订阅者。</li><li>发布者和订阅者之间有时间上的依赖。一般情况下，某个主题的订阅者需要在创建了订阅之后才能接收到消息，而且为了接收消息订阅者必须保持运行的状态。</li><li>JMS允许订阅者创建一个可持久化的订阅，这样即使订阅者没有运行也能接收到所订阅的消息。</li><li>每条消息都会传送给该主题下的所有订阅者。</li><li>通常发布者不会知道也意识不到哪一个订阅者正在接收消息。</li></ul><h1 id="JMS使用">3 JMS使用</h1><p>JMS在编程中体现了不同的接口：</p><h2 id="JMS1-1">3.1 JMS1.1</h2><h3 id="ConnectionFactory">3.1.1 ConnectionFactory</h3><p>是创建Connection的工厂，根据不同的消息类型用户可选择用QueueConnectionFactory和TopicConnectionFactory。</p><h3 id="Destination">3.1.2 Destination</h3><p>指消息目的地，要么是队列（Queue）要么是主题（Topic）</p><h3 id="Connection">3.1.3 Connection</h3><p>客户端与JMS系统之间建立的连接，分为QueueConnection和TopicConnectionFactory。一个Connection可以产生多个Session。</p><h3 id="Session">3.1.4 Session</h3><p>实际操作消息的接口，表示一个单线程的上下文（会话）。可以通过Session创建生产者、消费者、消息，还提供了事务操作。Session也分为QueueSession和TopicSession。</p><h3 id="MessageProducer">3.1.5 MessageProducer</h3><p>消息生产者，由Session创建，将消息发送到Destination。消费者可以同步或异步接收这些消息，<br>消息生产者也分为QueueSender和TopicSender。</p><h3 id="MessageComsumer">3.1.6 MessageComsumer</h3><p>消息消费者，由Session创建，接收来自Destination的消息。分为QueueReceiver和TopicReceiver。</p><h3 id="Message">3.1.7 Message</h3><p>消息，就是被传送的对象</p><h3 id="MessageListener">3.1.8 MessageListener</h3><p>消息监听器，在消息到达时自动调用onMessage方法。</p><h2 id="JMS2-0">3.2 JMS2.0</h2><p>JMS2.0对API做了简化：</p><p>JMSContext替换Connection和Session</p><p>JMSProducer替换MessageProducer，支持链式操作传递消息。</p><p>JMSConsumer替换MessageComsumer。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;系统间通信概述&quot;&gt;1 系统间通信概述&lt;/h1&gt;&lt;p&gt;一般来说，大型应用通常会被拆分成多个子系统，这些子系统可能会部署在多台机器上，也可能只是一台机器的多个进程中，这样的应用就是分布式应用。而分布式应用的子系统之间并不是完全独立的，它们需要相互通信来共同完成某个功能
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="消息队列" scheme="https://www.codetool.top/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>leetcode1071-字符串的最大公因子</title>
    <link href="https://www.codetool.top/article/leetcode1071-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%9C%80%E5%A4%A7%E5%85%AC%E5%9B%A0%E5%AD%90/"/>
    <id>https://www.codetool.top/article/leetcode1071-字符串的最大公因子/</id>
    <published>2020-03-11T16:52:34.000Z</published>
    <updated>2020-03-11T17:00:26.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>对于字符串 <code>S</code> 和 <code>T</code>，只有在 <code>S = T + ... + T</code>（T 与自身连接 1 次或多次）时，我们才认定 “<code>T</code> 能除尽 <code>S</code>”。</p><p>返回最长字符串 <code>X</code>，要求满足 <code>X</code> 能除尽 <code>str1</code> 且 <code>X</code> 能除尽 <code>str2</code>。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> str1 = “ABCABC”, str2 = “ABC”<br><strong>输出:</strong> “ABC”  </p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> str1 = “ABABAB”, str2 = “ABAB”<br><strong>输出:</strong> “AB”      </p></blockquote><p><strong>示例 3:</strong></p><blockquote><p><strong>输入:</strong> str1 = “LEET”, str2 = “CODE”<br><strong>输出:</strong> “”  </p></blockquote><p><strong>提示：</strong></p><ol><li><code>1 &lt;= str1.length &lt;= 1000</code></li><li><code>1 &lt;= str2.length &lt;= 1000</code></li><li><code>str1[i] 和 str2[i] 为大写英文字母</code></li></ol><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>这道题我之前想得很复杂！结果一看题解：卧槽还能这样。给大佬们跪了。</p><p>确实好久没接触这样的数学知识了：辗转相除法。</p><p>首先如果str1和str2有最大公因子，那么str1+str2就会等于str2+str1。</p><p>然后就是考虑怎么把最大公因子子字符串取出来，说实话辗转相除法我是没想到的，百度百科：</p><blockquote><p>欧几里德算法又称辗转相除法，是指用于计算两个正整数a，b的最大公约数。应用领域有数学和计算机两个方面。计算公式gcd(a,b) = gcd(b,a mod b)。</p></blockquote><p>这样求出两个字符串的长度的最大公因数，就是子字符串的长度，然后用substring取出来。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">gcdOfStrings</span><span class="token punctuation">(</span>String str1<span class="token punctuation">,</span> String str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>str1<span class="token operator">+</span>str2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str2<span class="token operator">+</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> str1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token function">gcd</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">gcd</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> x<span class="token operator">%</span>y<span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span>y<span class="token operator">:</span><span class="token function">gcd</span><span class="token punctuation">(</span>y<span class="token punctuation">,</span>x<span class="token operator">%</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;对于字符串 &lt;code&gt;S&lt;/code&gt; 和 &lt;code&gt;T&lt;/code&gt;，只有在 &lt;code&gt;S = T + ... + T&lt;/code&gt;（T 与自身连接 1 次或多次）时，我们才认定 “&lt;code&gt;T&lt;/code&gt; 能除尽 &lt;c
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot整合Redis使用</title>
    <link href="https://www.codetool.top/article/SpringBoot%E6%95%B4%E5%90%88Redis%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.codetool.top/article/SpringBoot整合Redis使用/</id>
    <published>2020-03-11T15:40:34.000Z</published>
    <updated>2020-03-11T15:41:57.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringDataRedis中的RedisTemplate介绍">1 SpringDataRedis中的RedisTemplate介绍</h1><p>maven依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-pool2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>默认使用的是lettuce作为redis的客户端，Spring Data Redis封装了其API，<code>RedisTemplate</code>是它的核心类。引入commons-pool2的原因是 lettuce 需要使用 commons-pool 2 创建 Redis 连接池。</p><p>Spring Data Redis通过<code>LettuceConnection</code>来操作Redis，而这个对象通过<code>LettuceConnectionFactory</code>获得，因为letture可以帮我们创建连接池，我们也不需要关注创建连接池部分，需要关注的是<code>LettuceConnectionConfiguration</code>中的配置信息。（如果是Jedis就得我们手动代码创建线程池了）</p><h2 id="序列化器">1.1 序列化器</h2><p><strong>可以通过Redis来存取对象，实际上是RedisTemplate通过序列化器RedisSerializer进行了序列化。</strong></p><p><img src="https://api.codetool.top/img/15839338843311.png" alt></p><p>RedisSerializer有两个主要方法：<code>serialize</code>（序列化）和<code>deserialize</code>（反序列化）。这里JdkSerializationRedisSerializer是RedisTemplate默认的序列化器，基本用的就是jdk序列化的方法，jdk中的序列化可以看我以前的文章<a href="../对象的输入输出-java序列化机制">对象的输入输出-java序列化机制</a>。</p><p>RedisTemplate可以配置它使用的序列化器，如下表</p><table><thead><tr><th>属性</th><th>描述</th><th>备注</th></tr></thead><tbody><tr><td>defaultSerializer</td><td>默认序列化器</td><td>如果没有设置，则使用JdkSerializationRedisSerializer</td></tr><tr><td>keySerializer</td><td>Redis键序列化器</td><td>如果没有设置，则使用默认序列化器</td></tr><tr><td>valueSerializer</td><td>Redis值序列化器</td><td>如果没有设置，则使用默认序列化器</td></tr><tr><td>hashKeySerializer</td><td>Redis散列结构field序列化器</td><td>如果没有设置，则使用默认序列化器</td></tr><tr><td>hashValueSerializer</td><td>Redis散列结构value序列化器</td><td>如果没有设置，则使用默认序列化器</td></tr><tr><td>stringSerializer</td><td>字符串序列化器</td><td>RedisTemplate自动赋值为StringRedisSerializer对象</td></tr></tbody></table><p>注意如果是使用默认的序列化器，在存键的时候RedisTemplate会把键也当成一个Java对象进行序列化，所以如果想RedisTemplate把键当成普通字符串，得配置为stringRedisSerializer。我们采用下面的注入方式：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RedisConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory redisConnectionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        RedisTemplate<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span>Object<span class="token operator">></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// RedisTemplate会自动初始化StringSerializer，这里直接获取</span>        RedisSerializer stringRedisSerializer <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getStringSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置字符串序列化器</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>redisConnectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>或者，在springboot中，由于会自动注入RedisTemplate对象，可以在获取之后更改它的属性</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token keyword">private</span> RedisTemplate redisTemplate <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token annotation punctuation">@PostConstruct</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">initRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    RedisSerializer stringRedisSerializer <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getStringSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>    redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="对Redis数据类型操作的封装">1.2 对Redis数据类型操作的封装</h2><table><thead><tr><th>操作接口</th><th>功能</th></tr></thead><tbody><tr><td>GeoOperations</td><td>地理位置操作接口</td></tr><tr><td>HashOperations</td><td>散列操作接口</td></tr><tr><td>HyperLogLogOperations</td><td>基数操作接口</td></tr><tr><td>ListOperations</td><td>列表(链表)操作接口</td></tr><tr><td>SetOperations</td><td>集合操作接口</td></tr><tr><td>ValueOperations</td><td>字符串操作接口</td></tr><tr><td>ZSetOperations</td><td>有序集合操作接口</td></tr></tbody></table><p>获取：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//字符串操作接口</span>ValueOperations valueOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>SetOperations setOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>HashOperations hashOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ListOperations listOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ZSetOperations zSetOperations <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForZSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这些接口下的方法名就跟redis的操作指令一样了。需要注意的是在这些不同的接口中操作的实际上不是在同一个redis连接中完成的，默认每种类型的数据操作都使用了一条新连接。</p><p>RedisTemplate还可以绑定一个key，对这个key做连续的操作，如：</p><pre class=" language-java"><code class="language-java">BoundValueOperations stringKeyOps <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">boundValueOps</span><span class="token punctuation">(</span><span class="token string">"stringKey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="SessionCallback和RedisCallback">1.3 SessionCallback和RedisCallback</h2><p>如果我们想在一个连接中执行多个Redis命令，就可能需要这两个接口，其中SessionCallback封装得更完善，推荐使用。</p><pre class=" language-java"><code class="language-java">redisTemplate<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SessionCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">execute</span><span class="token punctuation">(</span>RedisOperations operations<span class="token punctuation">)</span> <span class="token keyword">throws</span> DataAccessException <span class="token punctuation">{</span>        operations<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"key1"</span><span class="token punctuation">,</span><span class="token string">"value1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        operations<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hash"</span><span class="token punctuation">,</span><span class="token string">"field"</span><span class="token punctuation">,</span><span class="token string">"hvalue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="SpringBoot中操作Redis">2 SpringBoot中操作Redis</h1><h2 id="使用RedisTemplate">2.1 使用RedisTemplate</h2><p>常用配置：</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 连接池中的最小空闲连接 默认 0</span><span class="token attr-name">spring.redis.lettuce.pool.min-idle</span><span class="token punctuation">=</span> <span class="token attr-value">5</span><span class="token comment" spellcheck="true"># 连接池最大连接数（使用负值表示没有限制） 默认 8</span><span class="token attr-name">spring.redis.lettuce.pool.max-active</span><span class="token punctuation">=</span> <span class="token attr-value">10</span><span class="token comment" spellcheck="true"># 连接池中的最大空闲连接 默认 8</span><span class="token attr-name">spring.redis.lettuce.pool.max-idle</span><span class="token punctuation">=</span> <span class="token attr-value">10</span><span class="token comment" spellcheck="true"># 连接池最大阻塞等待时间（使用负值表示没有限制） 默认 -1</span><span class="token attr-name">spring.redis.lettuce.pool.max-wait</span><span class="token punctuation">=</span> <span class="token attr-value">2000</span><span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1</span><span class="token attr-name">spring.redis.password</span><span class="token punctuation">=</span><span class="token comment" spellcheck="true"># Redis连接超时时间，单位毫秒</span><span class="token attr-name">spring.redis.timeout</span><span class="token punctuation">=</span> <span class="token attr-value">1000</span></code></pre><p>然后获取RedisTemplate就行了，这个是在IoC容器中的。</p><p>下面讲一种更简单的方法，Spring提供了缓存注解，使用这些注解可以有效简化编程过程。</p><h2 id="缓存管理器">2.2 缓存管理器</h2><p>Spring支持多种缓存的使用，它提供了接口CacheManager，有许多实现类</p><p><img src="https://api.codetool.top/img/15839398052935.png" alt></p><p>在Spring Boot中，我们可以通过配置文件生成缓存管理器，如下：</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># Spring Cache Start</span><span class="token comment" spellcheck="true"># 默认情况下Spring会根据上下文探测</span><span class="token attr-name">spring.cache.type</span><span class="token punctuation">=</span><span class="token attr-value">redis</span><span class="token comment" spellcheck="true"># 缓存名称，配合注解使用</span><span class="token attr-name">spring.cache.cache-names</span><span class="token punctuation">=</span> <span class="token attr-value">redisCache</span><span class="token comment" spellcheck="true"># 是否允许Redis缓存空值</span><span class="token attr-name">spring.cache.redis.cache-null-values</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 是否启用Redis的键前缀</span><span class="token attr-name">spring.cache.redis.use-key-prefix</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true"># Redis的键前缀</span><span class="token attr-name">spring.cache.redis.key-prefix</span><span class="token punctuation">=</span><span class="token comment" spellcheck="true"># 缓存超时时间戳，配置为0则不设置超时时间</span><span class="token attr-name">spring.cache.redis.time-to-live</span><span class="token punctuation">=</span><span class="token attr-value">0ms</span><span class="token comment" spellcheck="true"># Spring Cache End</span></code></pre><p>为了使用缓存管理器，首先在配置类中加入注解<code>@EnableCaching</code></p><p>然后在Service层（而不是DAO层）的方法上加上如下注解：</p><ul><li><code>@Cacheable</code> 通常应用到读取数据的方法上，如查找方法：先从缓存中读取，如果没有再调用方法获取数据，然后把数据查询结果添加到缓存中。如果缓存中查找到数据，被注解的方法将不会执行。属性：<ul><li><code>value</code>：缓存的名称，这个是之前在配置文件中定义的<code>spring.cache.cache-names</code></li><li><code>key</code>：缓存的key，可以使用SpEL表达式，如<code>key = &quot;&#39;redis_user_&#39;+#id&quot;</code></li><li><code>condition</code>：缓存的条件，使用SpEL表达式，返回true则缓存</li></ul></li></ul><ul><li><p><code>@CachePut</code> 通常应用于保存和修改方法配置，能够根据方法的请求参数对其结果进行缓存，和 @Cacheable 不同的是，它每次都会触发被注解方法的调用。属性：</p><ul><li><code>value</code>：缓存的名称</li><li><code>key</code>：缓存的key</li><li><code>condition</code>：缓存的条件</li></ul></li><li><p><code>@CachEvict</code> 通常应用于删除方法配置，能够根据一定的条件对缓存进行清空。可以清除一条或多条缓存。属性：</p><ul><li><code>value</code>：缓存的名称</li><li><code>key</code>：缓存的key</li><li><code>condition</code>：缓存的条件</li><li><code>allEntries</code>：是否清空所有缓存内容，默认为false</li><li><code>beforeInvocation</code>：是否在方法执行前就清空，默认为false</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringDataRedis中的RedisTemplate介绍&quot;&gt;1 SpringDataRedis中的RedisTemplate介绍&lt;/h1&gt;&lt;p&gt;maven依赖：&lt;/p&gt;
&lt;pre class=&quot; language-xml&quot;&gt;&lt;code class=&quot;lan
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Redis" scheme="https://www.codetool.top/tags/Redis/"/>
    
      <category term="SpringBoot" scheme="https://www.codetool.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot对定时任务的支持</title>
    <link href="https://www.codetool.top/article/SpringBoot%E5%AF%B9%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1%E7%9A%84%E6%94%AF%E6%8C%81/"/>
    <id>https://www.codetool.top/article/SpringBoot对定时任务的支持/</id>
    <published>2020-03-11T10:27:13.000Z</published>
    <updated>2020-03-11T11:41:52.926Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述">1 概述</h1><p>在企业的实践生产中,可能需要使用一些定时任务。例如，在月末、季末和年末需要统计各种各样的报表，月表需要月末跑批量生成，季表需要季末跑批量生成，这样就需要制定不同的定时任务。</p><h1 id="使用">2 使用</h1><p>在Spring中配置定时任务的方法：</p><p>首先在配置类中加入<code>@EnableScheduling</code>，然后通过注解<code>@Scheduled</code>去配置如何定时。</p><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduleService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//计数器</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//每隔一秒执行一次</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedRate <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//使用异步执行</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">scheduledTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"scheduledTask执行第"</span><span class="token operator">+</span>count<span class="token operator">+</span><span class="token string">"次"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动SpringBoot程序，可以观察到控制台打印信息：</p><pre><code>2020-03-11 19:00:03.436  INFO 7360 --- [l-thread-pool-1] c.rhett.bootweb.service.ScheduleService  : scheduledTask执行第1次2020-03-11 19:00:04.432  INFO 7360 --- [l-thread-pool-2] c.rhett.bootweb.service.ScheduleService  : scheduledTask执行第2次2020-03-11 19:00:05.433  INFO 7360 --- [l-thread-pool-3] c.rhett.bootweb.service.ScheduleService  : scheduledTask执行第3次2020-03-11 19:00:06.432  INFO 7360 --- [l-thread-pool-4] c.rhett.bootweb.service.ScheduleService  : scheduledTask执行第4次2020-03-11 19:00:07.433  INFO 7360 --- [l-thread-pool-5] c.rhett.bootweb.service.ScheduleService  : scheduledTask执行第5次...</code></pre><p>这说明每秒钟Spring都会运行这个标注了<code>@Scheduled</code>的方法，并且使用了线程池（在<a href="../SpringBoot对异步任务的支持">SpringBoot对异步任务的支持</a>中配置的）。</p><h1 id="cron表达式">3 cron表达式</h1><p>上面的<code>@Scheduled</code>只是按照时间间隔执行,如果需要指定某个时间执行，就需要一些其他属性配置了，下面列出了<code>@Scheduled</code>的一些属性：</p><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>cron</td><td>String</td><td>使用表达式的方式定义任务执行时间</td></tr><tr><td>zone</td><td>String</td><td>可以通过它设定区域时间</td></tr><tr><td>fixedDelay</td><td>long</td><td>表示从上一个任务完成开始到下一个任务开始的间隔,单位为毫秒</td></tr><tr><td>fixedDelayString</td><td>String</td><td>与fixedDelay相同,只是使用字符串,这样可以使用SpEL来引入配置文件的配置</td></tr><tr><td>initialDelay</td><td>long</td><td>在Spring IoC容器完成初始化后,首次任务执行延迟时间,单位为毫秒</td></tr><tr><td>initialDelayString</td><td>String</td><td>与initialDelay相同,只是使用字符串,这样可以使用SpEL来引入配置文件的配置</td></tr><tr><td>fixedRate</td><td>long</td><td>从上一个任务开始到下一个任务开始的间隔,单位为毫秒</td></tr><tr><td>fixedRateString</td><td>String</td><td>与fixedRate相同,只是使用字符串,这样可以使用SpEL来引入配置文件的配置</td></tr></tbody></table><p>看到这些属性是不是有种莫名的熟悉？（假设你是我博客的忠实读者，虽然概率为0%，或者你也对jdk比较了解）</p><p>没错，在我之前写的一篇<a href="../Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E8%AF%A6%E8%A7%A3/#toc-heading-16">Java线程池详解</a>中介绍了任务调度线程池ScheduledExecutorService有接近的功能，而在<code>org.springframework.scheduling.ScheduledTaskRegistrar</code>这个类下面，也看到了有一个成员属性localExecutor，它的类型就是<code>ScheduledExecutorService</code>。</p><p>所以fixedRate和fixedDelay就对应着ScheduledExecutorService接口的<code>scheduleAtFixedRate</code>和<code>scheduleWithFixedDelay</code>，delay要等到上一个任务完成才开始计算间隔时间，rate不用。</p><p>而cron这个属性在<code>ScheduledExecutorService</code>中就没见过了，它是一个用来匹配时间表达式，方便我们定义在某个时间规则执行任务。cron的语法是：“秒 分 时 天 月 星期 年”，其中年可以省略。它们的取值都很接近自然表达，比如说分的取值<code>0-59</code>，天的取值<code>1-31</code>，月的取值<code>1-12</code>，星期的取值<code>1-7</code>，代表星期日到星期六（这点需要注意），也可以写英文缩写<code>SUN-SAT</code>。</p><p>除了写具体的取值，还可以写通配符：</p><table><thead><tr><th>通配符</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>表示任意值</td></tr><tr><td>?</td><td>不指定值，用于处理天和星期配置的冲突</td></tr><tr><td>-</td><td>指定时间区间，如对于星期，2-6代表的是星期一到星期五</td></tr><tr><td>/</td><td>指定时间间隔执行，/前面是开始值，/后面是步长，例如对于分钟，0/3代表从0分开始，每隔三分执行一次</td></tr><tr><td>L</td><td>代表最后的，如对于星期，4L代表最后一个星期三</td></tr><tr><td>#</td><td>前面是值，后面是第几个，如对于星期，6#3代表第三个星期五</td></tr><tr><td>,</td><td>列举多个项，例如对于月份，<code>3,5,7</code>代表每个3月、5月、7月</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;1 概述&lt;/h1&gt;&lt;p&gt;在企业的实践生产中,可能需要使用一些定时任务。例如，在月末、季末和年末需要统计各种各样的报表，月表需要月末跑批量生成，季表需要季末跑批量生成，这样就需要制定不同的定时任务。&lt;/p&gt;
&lt;h1 id=&quot;使用&quot;&gt;2 使用&lt;/h1&gt;&lt;p&gt;在
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SpringBoot" scheme="https://www.codetool.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot对异步任务的支持</title>
    <link href="https://www.codetool.top/article/SpringBoot%E5%AF%B9%E5%BC%82%E6%AD%A5%E4%BB%BB%E5%8A%A1%E7%9A%84%E6%94%AF%E6%8C%81/"/>
    <id>https://www.codetool.top/article/SpringBoot对异步任务的支持/</id>
    <published>2020-03-11T10:26:19.000Z</published>
    <updated>2020-03-11T15:42:17.663Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异步方法">1 异步方法</h1><p>在配置类上配置 <code>@EnableAsync</code> 注解开启异步处理。</p><p>在方法上加上注解<code>@Async</code>将该方法标记为异步任务。</p><p>用法和FutureTask+Callable差不多，可以返回AsyncResult类型，它是Future的一个实现类。</p><p>例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Async</span><span class="token keyword">public</span> Future<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">asyncTask</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException<span class="token punctuation">{</span>    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AsyncResult</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"任务完成"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="异步线程池">2 异步线程池</h1><p>如果一直使用<code>@Async</code>不配合线程池，会消耗很多资源，效率变低，Spring中有一个AsyncConfigurer接口，可以通过它配置线程池。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AsyncConfigurer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取线程池</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">default</span> Executor <span class="token function">getAsyncExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//异步异常处理器</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">default</span> AsyncUncaughtExceptionHandler <span class="token function">getAsyncUncaughtExceptionHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>于是我们可以创建一个配置类，在这里面写实现,<code>@EnableAsync</code> 注解放到这个配置类上面可以增加可读性。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncConfig</span> <span class="token keyword">implements</span> <span class="token class-name">AsyncConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Executor <span class="token function">getAsyncExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"正在创建线程池"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ThreadPoolTaskExecutor executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">"global-thread-pool-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样创建的线程池是全局的，也就是说默认使用<code>@Async</code>标注的方法都会从这个线程池中取线程，我们可以测试一下：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Async</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>输出：</p><pre><code>global-thread-pool-1</code></pre><p>如果我们想让它灵活度更高一点，可以往IoC容器中注入一些Executor，使用<code>@Async(&quot;&quot;)</code>的value来指定一个要使用的线程池的bean名称。</p><p>例如，给配置类中添加注入Executor bean的方法：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncConfig</span> <span class="token keyword">implements</span> <span class="token class-name">AsyncConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Executor <span class="token function">getAsyncExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"正在创建线程池"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ThreadPoolTaskExecutor executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">"global-thread-pool-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"bigExecutor"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Executor <span class="token function">getBigExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"正在创建线程池"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ThreadPoolTaskExecutor executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setCorePoolSize</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setMaxPoolSize</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setQueueCapacity</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">setThreadNamePrefix</span><span class="token punctuation">(</span><span class="token string">"big-thread-pool-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        executor<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> executor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>指定使用线程池：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Async</span><span class="token punctuation">(</span><span class="token string">"bigExecutor"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testBigPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;异步方法&quot;&gt;1 异步方法&lt;/h1&gt;&lt;p&gt;在配置类上配置 &lt;code&gt;@EnableAsync&lt;/code&gt; 注解开启异步处理。&lt;/p&gt;
&lt;p&gt;在方法上加上注解&lt;code&gt;@Async&lt;/code&gt;将该方法标记为异步任务。&lt;/p&gt;
&lt;p&gt;用法和FutureTask+
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SpringBoot" scheme="https://www.codetool.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Java之UDP编程</title>
    <link href="https://www.codetool.top/article/Java%E4%B9%8BUDP%E7%BC%96%E7%A8%8B/"/>
    <id>https://www.codetool.top/article/Java之UDP编程/</id>
    <published>2020-03-11T04:24:16.000Z</published>
    <updated>2020-03-11T06:11:33.415Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DatagramSocket概述">1 DatagramSocket概述</h1><p>上次在<a href="Java网络套接字Socket编程">Java网络套接字Socket编程</a>那篇博客里只写了Socket和ServerSocket，即TCP通信，这次来补充一下UDP通信。</p><p>和Socket类似的，Java中也存在一个<code>DatagramSocket</code>类，它就是面向UDP中的数据报包的概念传输，对应java.net包下面有一个类<code>DatagramPacket</code>就是用来描述数据报包。</p><p>因为UDP是无连接的，不分客户端和服务端，在单次通信中，只有发送端和接收端，因此也没有什么<code>DatagramServerSocket</code>。</p><h1 id="DatagramSocket使用">2 DatagramSocket使用</h1><p><code>DatagramSocket()</code>：建立一个udp socket，它实际上是调用了<code>DatagramSocket(new InetSocketAddress(0))</code>，即指定端口号为0，0的含义是这个端口号是根据系统指定动态生成的。</p><p>其他构造函数就是和<code>Socket</code>类似的传一个端口号进去、传一个SocketAddress进去。</p><p><code>bind</code>：绑定端口</p><p><code>connect</code>：虽然udp是无连接的，但可以只与同一台机器通信，这种情况也称它为connect，connect之后所有的send和receive操作都与指定的主机通信。</p><p><code>send</code>：发送一个<code>DatagramPacket</code>数据报包</p><p><code>receive</code>：接收一个数据报包，这个方法是阻塞的。</p><p><code>close</code>：释放socket</p><p>需要注意的是<code>receive</code>方法需要传入一个数据报包对象，这个数据报包对象由一个空的字节数组构造，而字节数组的长度值得考虑，如果过小可能会造成数据截断，所以发送方和接收方最好对数据包的大小制定约定规范。</p><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    DatagramSocket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> msg <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DatagramPacket packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>length<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InetSocketAddress</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span> <span class="token number">12306</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testReceive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    DatagramSocket socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramSocket</span><span class="token punctuation">(</span><span class="token number">12306</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    DatagramPacket packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatagramPacket</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span> buffer<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span><span class="token function">receive</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>packet<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>packet<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>packet<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="DatagramChannel">3 DatagramChannel</h1><p>需要了解的是，UDP本身就不存在什么阻塞，不需要连接，只在<code>receive</code>的时候会阻塞等待数据报。使用DatagramChannel可以设置非阻塞，则在从DatagramChannel中读数据报的时候如果没有数据报，就可以立即返回null。</p><p>相关API：<code>public abstract SocketAddress receive(ByteBuffer dst) throws IOException;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DatagramSocket概述&quot;&gt;1 DatagramSocket概述&lt;/h1&gt;&lt;p&gt;上次在&lt;a href=&quot;Java网络套接字Socket编程&quot;&gt;Java网络套接字Socket编程&lt;/a&gt;那篇博客里只写了Socket和ServerSocket，即TCP通信，这
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="java" scheme="https://www.codetool.top/tags/java/"/>
    
      <category term="IO" scheme="https://www.codetool.top/tags/IO/"/>
    
      <category term="网络编程" scheme="https://www.codetool.top/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>leetcode1013-将数组分成和相等的三个部分</title>
    <link href="https://www.codetool.top/article/leetcode1013-%E5%B0%86%E6%95%B0%E7%BB%84%E5%88%86%E6%88%90%E5%92%8C%E7%9B%B8%E7%AD%89%E7%9A%84%E4%B8%89%E4%B8%AA%E9%83%A8%E5%88%86/"/>
    <id>https://www.codetool.top/article/leetcode1013-将数组分成和相等的三个部分/</id>
    <published>2020-03-10T17:49:43.000Z</published>
    <updated>2020-03-10T17:54:39.324Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给你一个整数数组 <code>A</code>，只有可以将其划分为三个和相等的非空部分时才返回 <code>true</code>，否则返回 <code>false</code>。</p><p>形式上，如果可以找出索引 <code>i+1 &lt; j</code> 且满足 <code>(A[0] + A[1] + ... + A[i] == A[i+1] + A[i+2] + ... + A[j-1] == A[j] + A[j-1] + ... + A[A.length - 1])</code> 就可以将数组三等分。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> [0,2,1,-6,6,-7,9,1,2,0,1]<br><strong>输出:</strong> true<br><strong>解释:</strong> 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1  </p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> [0,2,1,-6,6,7,9,-1,2,0,1]<br><strong>输出:</strong> false    </p></blockquote><p><strong>示例 3:</strong></p><blockquote><p><strong>输入:</strong> [3,3,6,5,-2,2,5,1,-9,4]<br><strong>输出:</strong> true<br><strong>解释:</strong> 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4   </p></blockquote><p><strong>提示：</strong></p><ol><li><code>3 &lt;= A.length &lt;= 50000</code></li><li><code>-10^4 &lt;= A[i] &lt;= 10^4</code></li></ol><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>这道题的思想就是一个数组如果能分成三个和相等的部分，首先获取这个均分的值是多少，假设是x，然后从左往右第一个和为x的区间必须要算入，第二个和为x的区间也必须要算入，剩下的元素就必须是第三个区间，即和必须为x。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canThreePartsEqualSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span>A<span class="token punctuation">)</span> sum<span class="token operator">+=</span>i<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">%</span><span class="token number">3</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> single <span class="token operator">=</span> sum<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>A<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            cur<span class="token operator">+=</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token operator">==</span>single <span class="token operator">&amp;&amp;</span> count<span class="token operator">!=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>count<span class="token operator">==</span><span class="token number">2</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">==</span>A<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> count<span class="token operator">==</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span> cur<span class="token operator">==</span>single<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给你一个整数数组 &lt;code&gt;A&lt;/code&gt;，只有可以将其划分为三个和相等的非空部分时才返回 &lt;code&gt;true&lt;/code&gt;，否则返回 &lt;code&gt;false&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;形式上，如果可以找出索引 &lt;code
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>十大排序算法与Java实现</title>
    <link href="https://www.codetool.top/article/%E5%8D%81%E5%A4%A7%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B8%8EJava%E5%AE%9E%E7%8E%B0/"/>
    <id>https://www.codetool.top/article/十大排序算法与Java实现/</id>
    <published>2020-03-10T17:08:02.000Z</published>
    <updated>2020-03-10T17:11:23.691Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考资源：</p><p><a href="https://github.com/iTimeTraveler/SortAlgorithms" target="_blank" rel="noopener">https://github.com/iTimeTraveler/SortAlgorithms</a></p><p><a href="https://www.cnblogs.com/itsharehome/p/11058010.html" target="_blank" rel="noopener">十大经典排序算法 - 冰狼爱魔 - 博客园</a></p><p><a href="https://blog.csdn.net/wq_1995/article/details/81937926" target="_blank" rel="noopener">十大经典排序算法总结（Java语言实现）_Java_wang的博客-CSDN博客</a></p><h1 id="排序算法概述">1 排序算法概述</h1><p><img src="https://api.codetool.top/img/15838522844492.png" alt></p><p>可以看到时间复杂度低的算法空间复杂度通常较高，这就是常说的“用空间换时间”，越往后越不接近人的自然思想，可能就会更难理解，毕竟人通常是不会在脑子里排序的时候为这个数组开辟出一块新区域用空间换时间的。</p><h1 id="插入排序">2 插入排序</h1><p>插入排序把数组分为已排序的部分和未排序的部分，这种算法通常采用原地策略，将每个元素与之前的元素交换，直到找到合适的位置。</p><p><img src="https://api.codetool.top/img/15838525846674.gif" alt></p><p>Java代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertionSort2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//交换操作</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="选择排序">3 选择排序</h1><p>选择排序也是很接近人的自然思想的一种排序方法，也分为已排序的部分和未排序的部分，直接在未排序的序列中找到最小值，附加到已排序的序列末尾（和未排序序列的第一个元素交换）</p><p><img src="https://api.codetool.top/img/15838550309678.gif" alt></p><p>Java代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insertionSort2</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span> arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//交换操作</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="冒泡排序">4 冒泡排序</h1><p>冒泡排序的思想也很容易理解，每次遍历比较相邻的两个元素，将它们的顺序排好，这样一直遍历直到所有元素被正确排序。</p><p><img src="https://api.codetool.top/img/15838554703095.gif" alt></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 冒泡排序 * * ①. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。 * ②. 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。 * ③. 针对所有的元素重复以上的步骤，除了最后一个。 * ④. 持续每次对越来越少的元素重复上面的步骤①~③，直到没有任何一对数字需要比较。 * @param arr  待排序数组 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//外层循环移动游标</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//内层循环遍历游标及之后(或之前)的元素</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sorting: "</span> <span class="token operator">+</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="归并排序">5 归并排序</h1><p><img src="https://api.codetool.top/img/15838562535799.gif" alt></p><p>这个的思想就是分治啦，先把数组拆分成一个一个元素的子序列，然后一直在合并两个子序列（双指针法），直到合并回一个完整的数组。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 归并排序，递归方法** @param array* @return*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">MergeSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> array<span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> array<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> left <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> right <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> array<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token function">MergeSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">MergeSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*** 归并排序——将两段排序好的数组结合成一个排序数组** @param left* @param right* @return*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>left<span class="token punctuation">.</span>length <span class="token operator">+</span> right<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> result<span class="token punctuation">.</span>length<span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> left<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            result<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> right<span class="token punctuation">.</span>length<span class="token punctuation">)</span>            result<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> right<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>            result<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> right<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            result<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> left<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="堆排序">6 堆排序</h1><p>这个之前已经写过啦，见<a href="../带有优先级的完全二叉树-堆/">带有优先级的完全二叉树-堆</a></p><h1 id="快速排序">7 快速排序</h1><p>快速排序的思想也是分治，我们从数组中选择一个元素，我们把这个元素称之为中轴元素（基准）吧，然后把数组中所有小于中轴元素的元素放在其左边，所有大于或等于中轴元素的元素放在其右边，显然，此时中轴元素所处的位置的是有序的。也就是说，我们无需再移动中轴元素的位置。</p><p>从中轴元素那里开始把大的数组切割成两个小的数组(两个数组都不包含中轴元素)，接着我们通过递归的方式，让中轴元素左边的数组和右边的数组也重复同样的操作，直到数组的大小为1，此时每个元素都处于有序的位置。</p><p><img src="https://api.codetool.top/img/15838577818086.gif" alt></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuickSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//获取中轴元素所处的位置</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token function">partition</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//进行分割</span>            arr <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> left<span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            arr <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//每次都假设第一个元素是中轴元素，但分成两个序列块之后要把中轴元素交换到中间</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//选取中轴元素</span>        <span class="token keyword">int</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 向右找到第一个小于等于 pivot 的元素位置</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> pivot<span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 向左找到第一个大于等于 pivot 的元素位置</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> j <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">>=</span> pivot <span class="token punctuation">)</span> j<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> j<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//交换两个元素的位置，使得左边的元素不大于pivot,右边的不小于pivot</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        arr<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使中轴元素处于有序的位置</span>        arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> pivot<span class="token punctuation">;</span>        <span class="token keyword">return</span> j<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>快速排序的最坏情况还是蛮恐怖的，如果每一次选取的中轴元素都是当前序列最大/最小的元素。</p><h1 id="希尔排序">8 希尔排序</h1><p>希尔排序是插入排序的改进算法，它按按一定的间隔为逻辑分组进行插入排序，这个间隔会慢慢缩小。</p><p>先让数组中任意间隔为 h 的元素有序，刚开始 h 的大小可以是 h = n / 2,接着让 h = n / 4，让 h 一直缩小，当 h = 1 时，也就是此时数组中任意间隔为1的元素有序，此时的数组就是有序的了。</p><p>希尔排序难得在时间复杂度为<code>O(nlogn)</code>的算法之中还维持着原地排序<code>O(1)</code>的时间复杂度，其思想值得学习。</p><p><img src="https://api.codetool.top/img/15838570447262.jpg" alt></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShellSort</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">shellSort</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr <span class="token operator">==</span> null <span class="token operator">||</span> arr<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr<span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 对每组间隔为 h的分组进行排序，刚开始 h = n / 2;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> h <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> h <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> h <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//对各个局部分组进行插入排序</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> h<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 将arr[i] 插入到所在分组的正确位置上</span>            <span class="token function">insertI</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> h<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>     <span class="token punctuation">}</span>     <span class="token keyword">return</span> arr<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将arr[i]插入到所在分组的正确位置上     * arr[i]] 所在的分组为 ... arr[i-2*h],arr[i-h], arr[i+h] ...     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">insertI</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> i <span class="token operator">-</span> h<span class="token punctuation">;</span> k <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span> k <span class="token operator">-=</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>            arr<span class="token punctuation">[</span>k <span class="token operator">+</span> h<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        arr<span class="token punctuation">[</span>k <span class="token operator">+</span> h<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="计数排序">9 计数排序</h1><p>计数排序就很像bitmap了（见<a href="海量数据算法-BitMap介绍和实现">海量数据算法-BitMap介绍和实现</a>），如果回想bitmap，它的排序效率是极高的，但元素不能重复，如果要解决元素不能重复的问题，就可以将bit（表示是否存在）转为int（表示出现了多少次）。</p><p>这种算法的问题就很明显了，首先得知道元素取值的范围，如果范围太大还得用int存储空间复杂度极高。所以它适用于取值范围不大的数组排序。然后元素只能是整数，否则无法和数组的下标关联起来。</p><h1 id="桶排序">10 桶排序</h1><p>桶排序也得知道元素的取值范围，它是把所有元素按取值范围划分为若干个区间（桶），桶的个数通常就等于数组的大小，按<code>(array[i] - min)  * (bucketNum-1) / d</code>将元素划分到桶中（即按取值范围均分）。然后在每个桶内按归并排序或快速排序算法排序，由于桶之间本来就是有序的，再把它们按桶的顺序连接起来即可。</p><h1 id="基数排序">11 基数排序</h1><p>基数排序的排序思路是这样的：先以个位数的大小来对数据进行排序，接着以十位数的大小来多数进行排序，接着以百位数的大小……</p><p>排到最后，就是一组有序的元素了。不过，它在以某位数进行排序的时候，是用“桶”来排序的。</p><p>由于某位数（个位/十位….，不是一整个数）的大小范围为0-9，所以我们需要10个桶，然后把具有相同数值的数放进同一个桶里，之后再把桶里的数按照0号桶到9号桶的顺序取出来，这样一趟下来，按照某位数的排序就完成了</p><p><img src="https://api.codetool.top/img/1583859855328.gif" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文参考资源：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/iTimeTraveler/SortAlgorithms&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/iTimeTraveler/
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot开发RESTful API</title>
    <link href="https://www.codetool.top/article/SpringBoot%E5%BC%80%E5%8F%91RESTful%20API/"/>
    <id>https://www.codetool.top/article/SpringBoot开发RESTful API/</id>
    <published>2020-03-10T13:43:20.000Z</published>
    <updated>2020-03-10T13:44:12.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RESTful-API">1 RESTful API</h1><p>RESTful API是面向<strong>资源</strong>的，他认为一切URI皆资源，所以URI一定要是名词而不是动词，动词的含义通过请求方法来表达。有了资源还需要确定如何表现这个资源，例如JSON、XML，这就称为<strong>表现层。</strong></p><p><code>GET /getUserInfo?id=15</code>-&gt;<code>GET /users/15</code></p><p>也不要在URI中加入版本号，例如<code>/v1/users</code>，如果需要多版本的API，请在请求中带上版本号，例如<code>Accept: version = 1.0</code>。</p><p>概括：</p><ul><li>看URL就知道要什么资源</li><li>看http method就知道针对资源干什么</li><li>看http status code就知道结果如何</li></ul><p>常用请求方法：</p><ul><li>GET ： 获取、读取资源</li><li>POST ： 添加资源</li><li>PUT ： 修改资源</li><li>DELETE ： 删除资源</li></ul><p>基础状态码：</p><ul><li><code>200</code> OK </li><li><code>400</code> Bad Request </li><li><code>500</code> Internal Server Error</li></ul><p>通常200表示成功，400表示客户端错误（请求格式），500表示服务端错误（服务内部异常）</p><p>其他常用状态码：</p><ul><li><code>201</code> 已创建。成功请求并创建了新的资源</li><li><code>3xx</code> 代表的是重定向，例如301（永久移动）、303重定向、302（暂时移动）</li><li><code>401</code> 未通过身份认证</li><li><code>403</code> 拒绝服务该请求</li><li><code>409</code> 服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</li><li><code>410</code> 资源曾经存在，但目前被永久删除。</li><li><code>502</code> 作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</li><li><code>504</code> 充当网关或代理的服务器，未及时从远端服务器获取请求</li></ul><p>其他状态码可以参考：</p><p><a href="https://www.runoob.com/http/http-status-codes.html" target="_blank" rel="noopener">HTTP状态码 | 菜鸟教程</a></p><h1 id="RESTful-API相关注解">2 RESTful API相关注解</h1><ul><li><code>@RestController</code>：代替<code>@Controller</code>+<code>@ResponseBody</code></li><li><code>@xxxMapping</code><ul><li><code>@GetMapping</code>：代替<code>@RequestMapping(...,method=GET)</code></li><li><code>@PostMapping</code>：代替<code>@RequestMapping(...,method=POST)</code></li><li><code>@PutMapping</code>：代替<code>@RequestMapping(...,method=PUT)</code></li><li><code>@DeleteMapping</code>：代替<code>@RequestMapping(...,method=DELETE)</code></li></ul></li><li><code>@PathVariable</code>：接收URL上的参数</li><li><code>@RequestParam</code>：接收请求体上的参数</li></ul><p>在<code>@xxxMapping</code>和<code>@RequestMapping</code>中，有两个属性需要关注：consumes和produces，可以为它们指定<code>MediaType</code>中的值来限定该方法接收什么类型的请求体和返回什么类型。</p><p><code>@PathVariable</code>示例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//请求的url例如“/article/1”</span><span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/article/{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> AjaxResponse <span class="token function">deleteArticle</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span></code></pre><ul><li><code>@RequestBody</code>：接收请求体中的复杂数据并转为java对象</li></ul><p>JSON数据和Java对象自动通过HttpMessageConverter（这是一个接口，具体到JSON有Jackson提供的实现类）完成转换。</p><h1 id="处理HTTP状态码、异常和响应头">3 处理HTTP状态码、异常和响应头</h1><p>如果只用<code>@RestController</code>搭配方法返回String，那么显然只能关注响应体，如果需要处理HTTP状态码、方法中可能出现的异常和响应头，就需要额外的操作。</p><p>Spring提供了实体封装类<code>ResponseEntity</code>和注解<code>@ResponseStatus</code>。</p><p><code>ResponseEntity</code>可以有效地封装错误消息、响应头和状态码，<code>@ResponseStatus</code>相对功能更少，可以配置指定的状态码返回给客户端。（<code>HttpStatus</code>中枚举了许多状态码）</p><p>示例：（使用了lombok）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/article"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleRestController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//增加一篇Article ，使用POST方法</span>    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>CREATED<span class="token punctuation">)</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> POST<span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">saveArticle</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Article article<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"saveArticle：{}"</span><span class="token punctuation">,</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{\"status\":1,\"msg\":\"success\"}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取一篇Article ，使用GET方法</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/{id}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> GET<span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>Article<span class="token operator">></span> <span class="token function">getArticle</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Article article <span class="token operator">=</span> Article<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">"456"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">createTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"789"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpHeaders headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">,</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>article<span class="token punctuation">,</span>headers<span class="token punctuation">,</span>HttpStatus<span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>至于处理异常，需要两个注解：<code>@ControllerAdvice</code>和<code>@ExceptionHandler</code>。</p><p><code>@ControllerAdvice</code>的作用是给控制器增加通知，作用于类上，定义了一个控制器的通知类。</p><p><code>@ExceptionHandler</code>配合<code>@ControllerAdvice</code>使用定义控制器发生异常后的操作，一般来说，发生异常后，可以跳转到指定的错误页面，以避免用户使用的不友好。</p><p>示例（在MVC中）：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token punctuation">(</span>        <span class="token comment" spellcheck="true">//指定拦截的包</span>        basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.rhett.bootweb.controller.*"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//被标注为@Controller的类才拦截</span>        annotations <span class="token operator">=</span> Controller<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorControllerAdvice</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span>    <span class="token keyword">public</span> String <span class="token function">exception</span><span class="token punctuation">(</span>Model model<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//给数据模型增加异常信息</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"exception_message"</span><span class="token punctuation">,</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回异常视图</span>        <span class="token keyword">return</span> <span class="token string">"exception"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>示例（在RESTful API中）：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token punctuation">(</span>        basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.rhett.bootweb.controller.*"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        annotations <span class="token operator">=</span> Controller<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorControllerAdvice</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token comment" spellcheck="true">//返回错误状态码</span>    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>INTERNAL_SERVER_ERROR<span class="token punctuation">)</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">exception</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> msgMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取异常信息</span>        msgMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        msgMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cause"</span><span class="token punctuation">,</span>ex<span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> msgMap<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>@ExceptionHandler</code>还可以指定一个value，为某一个具体Excepetion的class对象，只针对某一具体异常进行拦截。</p><p><code>@ControllerAdvice</code>还可以配合<code>@InitBinder</code>使用（在控制器参数转换前被执行的代码）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RESTful-API&quot;&gt;1 RESTful API&lt;/h1&gt;&lt;p&gt;RESTful API是面向&lt;strong&gt;资源&lt;/strong&gt;的，他认为一切URI皆资源，所以URI一定要是名词而不是动词，动词的含义通过请求方法来表达。有了资源还需要确定如何表现这个资源，例
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SpringBoot" scheme="https://www.codetool.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Spring声明式事务管理介绍</title>
    <link href="https://www.codetool.top/article/Spring%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E4%BB%8B%E7%BB%8D/"/>
    <id>https://www.codetool.top/article/Spring声明式事务管理介绍/</id>
    <published>2020-03-10T11:23:43.000Z</published>
    <updated>2020-03-10T11:34:33.255Z</updated>
    
    <content type="html"><![CDATA[<p>为了减少手动编写管理事务的语句，Spring利用AOP为我们提供了一个数据库事务的约定流程。</p><p>spring 框架为我们提供了一组事务控制的接口。这组接口是在<code>spring-tx-5.0.2.RELEASE.jar</code> 中。</p><p>对于事务,需要通过标注告诉Spring在什么地方启用数据库事务功能。对于声明式事务,是使用<code>@Transactional</code>进行标注的。这个注解可以标注在类或者方法上，<strong>当它标注在类上时，代表这个类所有公共(public)非静态的方法都将启用事务功能。</strong> 在<code>@Transactional</code>中,还允许配置许多的属性,如事务的隔离级别和传播行为、异常类型,从而确定方法发生什么异常下回滚事务或者发生什么异常下不回滚事务等。这些配置内容,是在 Spring IoC容器在加载时就会将这些配置信息解析出来,然后把这些信息存到事务定义器(TransactionDefinition接口的实现类）里,并且记录哪些类或者方法需要启动事务功能,采取什么策略去执行事务。这个过程中,我们所需要做的只是给需要事务的类或者方法标注<code>@Transactional</code>和配置其属性而已,并不是很复杂。</p><h1 id="Spring中的事务控制API介绍">1 Spring中的事务控制API介绍</h1><p>maven依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>如果使用springboot可以配合jpa、mybatis，或者导入jdbc-starter，都会包含：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="PlatformTransactionManager">1.1 PlatformTransactionManager</h2><p>此接口是 spring 的事务管理器，它里面提供了我们常用的操作事务的方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PlatformTransactionManager</span> <span class="token keyword">extends</span> <span class="token class-name">TransactionManager</span> <span class="token punctuation">{</span>    TransactionStatus <span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> TransactionDefinition definition<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*提交事务*/</span>    <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span>TransactionStatus status<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*回滚事务*/</span>    <span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span>TransactionStatus status<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们在开发中都是使用它的实现类，对于Mybatis，我们用的就是<code>org.springframework.jdbc.datasource.DataSourceTransactionManager</code></p><h2 id="TransactionDefinition">1.2 TransactionDefinition</h2><p>它是事务的定义信息对象：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransactionDefinition</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//传播行为</span>    <span class="token keyword">int</span> PROPAGATION_REQUIRED <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> PROPAGATION_SUPPORTS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> PROPAGATION_MANDATORY <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> PROPAGATION_REQUIRES_NEW <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> PROPAGATION_NOT_SUPPORTED <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> PROPAGATION_NEVER <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> PROPAGATION_NESTED <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//事务隔离级别</span>    <span class="token comment" spellcheck="true">//默认级别，可能是四个隔离级别中的一种</span>    <span class="token keyword">int</span> ISOLATION_DEFAULT <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//读未提交</span>    <span class="token keyword">int</span> ISOLATION_READ_UNCOMMITTED <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//读已提交</span>    <span class="token keyword">int</span> ISOLATION_READ_COMMITTED <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//重复读</span>    <span class="token keyword">int</span> ISOLATION_REPEATABLE_READ <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//串行化</span>    <span class="token keyword">int</span> ISOLATION_SERIALIZABLE <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> TIMEOUT_DEFAULT <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取事务传播行为</span>    <span class="token keyword">default</span> <span class="token keyword">int</span> <span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取事务隔离级别</span>    <span class="token keyword">default</span> <span class="token keyword">int</span> <span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取事务超时时间</span>    <span class="token keyword">default</span> <span class="token keyword">int</span> <span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取事务是否只读</span>    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">isReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取事务对象名称</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">default</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> TransactionDefinition <span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> StaticTransactionDefinition<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>具体事务的隔离级别介绍见：<a href="../数据库理论之事务与恢复技术">数据库理论之事务与恢复技术</a></p><p>对于事务的传播行为，有：</p><ul><li><code>REQUIRED</code>:如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。一般的选择（默认值）</li><li><code>SUPPORTS</code>:支持当前事务，如果当前没有事务，就以非事务方式执行（没有事务）</li><li><code>MANDATORY</code>：使用当前的事务，如果当前没有事务，就抛出异常</li><li><code>REQUERS_NEW</code>:新建事务，如果当前在事务中，把当前事务挂起。</li><li><code>NOT_SUPPORTED</code>:以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</li><li><code>NEVER</code>:以非事务方式运行，如果当前存在事务，抛出异常</li><li><code>NESTED</code>:如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行 REQUIRED 类似的操作。</li></ul><h2 id="TransactionStatus">1.3 TransactionStatus</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransactionStatus</span> <span class="token keyword">extends</span> <span class="token class-name">TransactionExecution</span><span class="token punctuation">,</span> SavepointManager<span class="token punctuation">,</span> Flushable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//是否有存储点</span>    <span class="token keyword">boolean</span> <span class="token function">hasSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//刷新事务</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对于TransactionExecution，还具有<code>isNewTransaction()</code>：是不是新的事务，<code>setRollbackOnly()</code>：设置事务回滚，<code>isRollbackOnly()</code>：事务是否回滚等方法。</p><h1 id="XML配置事务管理">2 XML配置事务管理</h1><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/aophttp://www.springframework.org/schema/aop/spring-aop.xsdhttp://www.springframework.org/schema/txhttp://www.springframework.org/schema/tx/spring-tx.xsdhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 省去DataSource配置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 事务的配置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 指定方法名称：是业务核心方法    read-only：是否是只读事务。默认 false，不只读。    isolation：指定事务的隔离级别。默认值是使用数据库的默认隔离级别。    propagation：指定事务的传播行为。    timeout：指定超时时间。默认值为：-1。永不超时。    rollback-for：用于指定一个异常，当执行产生该异常时，事务回滚。产生其他异常，事务不回滚。    没有默认值，任何异常都回滚。    no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时，事务回    滚。没有默认值，任何异常都回滚。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>find*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SUPPORTS<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 配置 aop --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 配置切入点表达式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.rhett.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 在 aop:config 标签内部：建立事务的通知和切入点表达式的关系 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h1 id="注解配置事务管理">3 注解配置事务管理</h1><ol><li><p>首先注入事务管理器bean，可以通过注解<code>@Bean</code>，如果使用spring-boot，无论是<code>mybatis-spring-boot-starter</code>还是jpa-starter，都会自动帮我们注入一个相关的实例对象，我们只需要使用注解<code>@Transactional</code>即可。</p></li><li><p>在配置类上开启注解事务支持：<code>@EnableTransactionManagement</code>，当然也得开启<code>@EnableAspectJAutoProxy</code>AOP支持</p></li><li><p>在业务层使用<code>@Transactional</code>注解，属性和xml中的类似。</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>readOnly<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>propagation<span class="token operator">=</span>Propagation<span class="token punctuation">.</span>SUPPORTS<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> IAccountDao accountDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Account <span class="token function">findAccountById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> accountDao<span class="token punctuation">.</span><span class="token function">findAccountById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>readOnly<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span>propagation<span class="token operator">=</span>Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>String sourceName<span class="token punctuation">,</span> String targeName<span class="token punctuation">,</span> Float money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.根据名称查询两个账户</span>        Account source <span class="token operator">=</span> accountDao<span class="token punctuation">.</span><span class="token function">findAccountByName</span><span class="token punctuation">(</span>sourceName<span class="token punctuation">)</span><span class="token punctuation">;</span>        Account target <span class="token operator">=</span> accountDao<span class="token punctuation">.</span><span class="token function">findAccountByName</span><span class="token punctuation">(</span>targeName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.修改两个账户的金额</span>        source<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转出账户减钱</span>        target<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转入账户加钱</span>        <span class="token comment" spellcheck="true">//3.更新两个账户</span>        accountDao<span class="token punctuation">.</span><span class="token function">updateAccount</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//int i=1/0;</span>        accountDao<span class="token punctuation">.</span><span class="token function">updateAccount</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="注意">4 注意</h1><p>因为Spring是通过AOP来实现管理事务的，如果某个类使用了<code>@Transactional</code>，但如果在这个类中的其他方法调用了该方法，称为”自调用”，没有经过代理对象，这种情况<code>@Transactional</code>就失效了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了减少手动编写管理事务的语句，Spring利用AOP为我们提供了一个数据库事务的约定流程。&lt;/p&gt;
&lt;p&gt;spring 框架为我们提供了一组事务控制的接口。这组接口是在&lt;code&gt;spring-tx-5.0.2.RELEASE.jar&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;对
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://www.codetool.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot日志框架的使用</title>
    <link href="https://www.codetool.top/article/SpringBoot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.codetool.top/article/SpringBoot日志框架的使用/</id>
    <published>2020-03-09T18:46:53.000Z</published>
    <updated>2020-03-09T18:59:46.148Z</updated>
    
    <content type="html"><![CDATA[<p>前置知识：</p><ul><li><a href="日志门面SLF4J介绍和使用">日志门面SLF4J介绍和使用（日志系列03）</a></li><li><a href="../Java日志框架Logback介绍和使用">Java日志框架Logback介绍和使用（日志系列04）</a></li></ul><p>推荐阅读：</p><ul><li><a href="../Java日志框架JUL和Log4j介绍">Java日志框架JUL和Log4j介绍（日志系列01）</a></li><li><a href="../日志门面介绍和JCL使用">日志门面介绍和JCL使用（日志系列02）</a></li><li><a href="../Java日志框架LOG4J2的介绍和使用">Java日志框架LOG4J2的介绍和使用（日志系列05）</a></li></ul><p>（Java日志系列到这篇算是完结了吧，完结撒花<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。）</p><h1 id="logging-starter概述">1 logging-starter概述</h1><p>SpringBoot使用日志功能依赖于</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>实际上，不需要导入这个依赖，因为springboot的核心spring-boot-starter存在对spring-boot-starter-logging的传递依赖。</p><p><img src="https://api.codetool.top/img/15837774833693.png" alt="logging-stater依赖"></p><ul><li><code>jul-to-slf4j</code>：将JUL转为SLF4J（使用SLF4J作为日志门面）</li><li><code>log4j-to-slf4j</code>：将LOG4J2日志门面转为SLF4J</li><li><code>logback-classic</code>：使用logback作为默认日志实现</li></ul><p>SpringBoot 2.0 之前还会有一个<code>log4j-over-slf4j</code>用来转换log4j，<strong>2.0之后就取消了对log4j的支持。</strong>（虽然可以通过starter使用log4j，但已经不推荐了）</p><p>可以看出，SpringBoot使用SLF4J作为日志门面，logback作为默认日志实现。</p><p>如果是其他日志门面和日志框架会自动桥接至SLF4J。</p><h1 id="日志相关配置">2 日志相关配置</h1><h2 id="SpringBoot配置">2.1 SpringBoot配置</h2><p>这里使用properties语法，yaml也只是转换一下格式</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 设置自定义logger的日志级别</span><span class="token attr-name">logging.level.com.rhett.FileLogger</span><span class="token punctuation">=</span><span class="token attr-value">trace</span><span class="token comment" spellcheck="true"># 设置console appender的pattern</span><span class="token attr-name">logging.pattern.console</span><span class="token punctuation">=</span><span class="token attr-value">[%-5level] %d{yyyy-MM-dd HH:mm:ss} %c [%thread] --- %m%n</span><span class="token comment" spellcheck="true"># 指定日志文件存放的目录，默认的文件名是spring.log</span><span class="token attr-name">logging.file.path</span><span class="token punctuation">=</span><span class="token attr-value">logs/springboot/</span><span class="token comment" spellcheck="true"># 设置file appender的pattern</span><span class="token attr-name">logging.pattern.file</span><span class="token punctuation">=</span><span class="token attr-value">[%-5level] %d{yyyy-MM-dd HH:mm:ss} %c [%thread] --- %m%n</span></code></pre><h2 id="指定配置">2.2 指定配置</h2><p>如果想配置一些高级功能，可以需要导入具体某个日志框架的配置，SpringBoot会自动查找遵循如下命名的配置文件：</p><table><thead><tr><th>日志实现</th><th>文件命名</th></tr></thead><tbody><tr><td>Logback</td><td>logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy</td></tr><tr><td>Log4j2</td><td>log4j2-spring.xml , log4j2.xml</td></tr><tr><td>JUL</td><td>logging.properties</td></tr></tbody></table><p>对于logback来说，logback-spring还可以使用profile功能：</p><ul><li><code>logback.xml</code>：直接就被日志框架识别了；</li><li><code>logback-spring.xml</code>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的Profile功能</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>console<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.PatternLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} ----> [%thread] ---> %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} ==== [%thread] ==== %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span></code></pre><p>在springboot配置中切换profile环境：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">dev</span></code></pre><h1 id="将日志实现切换为log4j2">3 将日志实现切换为log4j2</h1><p>禁用logback、启用log4j2，然后就可以正常使用log4j2了。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 禁用logback--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 添加log4j2 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-log4j2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前置知识：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;日志门面SLF4J介绍和使用&quot;&gt;日志门面SLF4J介绍和使用（日志系列03）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../Java日志框架Logback介绍和使用&quot;&gt;Java日志框架Logback介绍和使用（日志
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="日志" scheme="https://www.codetool.top/tags/%E6%97%A5%E5%BF%97/"/>
    
      <category term="SpringBoot" scheme="https://www.codetool.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>leetcode543-二叉树的直径</title>
    <link href="https://www.codetool.top/article/leetcode543-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/"/>
    <id>https://www.codetool.top/article/leetcode543-二叉树的直径/</id>
    <published>2020-03-09T17:57:29.000Z</published>
    <updated>2020-03-09T19:00:01.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过根结点。</p><p><strong>示例:</strong></p><p>给定二叉树</p><pre><code>          1         / \        2   3       / \           4   5    </code></pre><p>返回 <strong>3</strong>, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。</p><p><strong>注意:</strong> 两结点之间的路径长度是以它们之间边的数目表示。</p><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>自底向上dfs，首先要了解这个最长边不一定经过根节点，对于每个结点，经过它的最长直径为左边的最长边和右边的最长边之和。这个结点的深度为左边最长边和右边最长边的最大值+1。这样获取出所有经过某节点的最长直径，比较出最大值。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> left <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过根结点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定二叉树&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="DFS" scheme="https://www.codetool.top/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>Java日志框架LOG4J2的介绍和使用</title>
    <link href="https://www.codetool.top/article/Java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6LOG4J2%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.codetool.top/article/Java日志框架LOG4J2的介绍和使用/</id>
    <published>2020-03-09T17:35:20.000Z</published>
    <updated>2020-03-09T18:49:48.554Z</updated>
    
    <content type="html"><![CDATA[<p>前置知识： <a href="../日志门面SLF4J介绍和使用">日志门面SLF4J介绍和使用</a></p><p>推荐阅读： <a href="../Java日志框架Logback介绍和使用/">Java日志框架Logback介绍和使用</a></p><h1 id="log4j2概述">1 log4j2概述</h1><p>Apache Log4j2是对Log4j的升级版，参考了logback的一些优秀的设计，并且修复了一些问题，因此带来了一些重大的提升,主要有:</p><ul><li>异常处理，在logback中, Appender中的异常不会被应用感知到,但是在log4j2中,提供了一些异常处理机制。</li><li>性能提升，log4j2相较于log4j和logback都具有很明显的性能提升。</li><li>自动重载配置，参考了logback的设计，当然会提供自动刷新参数配置，最实用的就是我们在生产上可以动态地修改日志的级别而不需要重启应用。</li><li>无垃圾机制，log4j2在大部分情况下，都可以使用其设计的一套无垃圾机制，避免频繁的日志收集导致的jvm gc。</li></ul><p>Log4j2其实也是一个日志门面，但slf4j已经足够优秀，较少人把Log4j2用作日志门面，通常还是把它当成一个日志实现搭配slf4j使用。</p><h1 id="log4j2日志门面">2 log4j2日志门面</h1><p>简要介绍一下log4j2作为日志门面的使用</p><p>maven依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.12.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.12.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>这样使用的就是Log4j2日志门面+本身的实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LogManager<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>LOG4J2Test<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    LOGGER<span class="token punctuation">.</span><span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"fatal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"warn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"debug"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"trace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="log4j2-slf4j使用">3 log4j2+slf4j使用</h1><p>maven配置</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- slf4j日志门面 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- log4j2适配器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-slf4j-impl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.13.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- log4j2 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.13.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>这是最简单的写法，<code>log4j-slf4j-impl</code>依赖于<code>log4j-api</code>，它更像是桥接Log4j2日志门面。</p><p>使用就是SLF4J的使用方法（假设你没跳前置知识🌚）</p><h1 id="log4j2配置">4 log4j2配置</h1><p>log4j2默认加载classpath下的<code>log4j2.xml</code>文件中的配置</p><p>它和logback实在是太像了，毕竟本来就是抄袭的logback（这是可以说的吗🌚）</p><p>logback的配置见<a href="../Java日志框架Logback介绍和使用/">Java日志框架Logback介绍和使用</a></p><p>所以我把配置贴出来应该就能看懂：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token comment" spellcheck="true">&lt;!-- status，代表日志框架本身的输出日志级别；monitorInterval，配置为120，单位为秒。类似于logback的scanPeriod --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Configuration</span> <span class="token attr-name">status</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WARN<span class="token punctuation">"</span></span> <span class="token attr-name">monitorInterval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 类似于logback的property，但是放入了properties节点 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOG_HOME<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/logs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 将所有Appender放入了Appenders节点 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Appenders</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--Console节点就直接指定了这个appender使用的类是logback自带的，name是自己命名的,target=SYSTEM_OUT表示输出到控制台。--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Console</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SYSTEM_OUT<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--pattern和logback几乎也没有区别--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%d{HH:mm:ss.SSS} [%t] [%-5level] %c{36}:%L --- %m%n<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Console</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--File节点就直接指定了这个appender使用的类是logback自带的，fileName指定文件路径，可以使用属性值${}，append="true"追加到文件末尾--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>File</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${LOG_HOME}/test.log<span class="token punctuation">"</span></span> <span class="token attr-name">append</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%d{HH:mm:ss.SSS} [%t] [%-5level] %c{36}:%L --- %m%n<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>File</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--RandomAccessFile，文件随机读写流Appender，比File性能较好--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RandomAccessFile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${LOG_HOME}/test.log<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%d{HH:mm:ss.SSS} [%t] [%-5level] %c{36}:%L --- %m%n<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RandomAccessFile</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--RollingFile或使用RollingRandomAccessFile，自动拆分的文件随机读写流Appender， filePattern：历史日志封存路径。log4j2也自动识别zip等后缀，表示历史日志需要压缩。--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RollingRandomAccessFile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>File<span class="token punctuation">"</span></span> <span class="token attr-name">immediateFlush</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${LOG_HOME}/today.log<span class="token punctuation">"</span></span>                                 <span class="token attr-name">filePattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${LOG_HOME}/$${date:yyyy-MM-dd}/myrollog-%d{yyyy-MM-dd}-%i.log<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 和logback的过滤器类似，onMatch、onMismatch可以为NEUTRAL表示中立 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Filters</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 日志级别过滤器 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThresholdFilter</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Filters</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%d{HH:mm:ss.SSS} [%t] [%-5level] %c{36}:%L --- %m%n<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!--                也可以是类似于logback的HTMLLayout                &lt;HTMLLayout pattern="%d{HH:mm:ss.SSS}%t%-5level%c{36}%L%m%n" />            --></span>            <span class="token comment" spellcheck="true">&lt;!--RollingRandomAccessFile的必配项,TriggeringPolicy(触发策略) --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Policies</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--在系统启动时，触发拆分规则，产生一个新的日志文件--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OnStartupTriggeringPolicy</span> <span class="token punctuation">/></span></span>                <span class="token comment" spellcheck="true">&lt;!--按时间划分日志文件，单位是filePattern中配置的 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TimeBasedTriggeringPolicy</span> <span class="token punctuation">/></span></span>                <span class="token comment" spellcheck="true">&lt;!--按大小划分日志文件--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SizeBasedTriggeringPolicy</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10 MB<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Policies</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--覆盖策略，限定同一个目录下日志文件的最大数量--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DefaultRolloverStrategy</span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RollingRandomAccessFile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Appenders</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置Root Logger和自定义logger --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Loggers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>trace<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Root</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Loggers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Configuration</span><span class="token punctuation">></span></span></code></pre><h1 id="异步日志">5 异步日志</h1><p>Log4j2提供了AsyncAppender和AsyncLogger，通过BlockingQueue来实现异步。（比logback做的更全面一点）</p><p>通常使用AsyncLogger。</p><p>使用异步日志需要配置依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.lmax<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>disruptor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="使用AsyncAppender">5.1 使用AsyncAppender</h2><p>这种方式和logback类似</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Appenders</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Async</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Async<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Async</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Appenders</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Loggers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>trace<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Async<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Loggers</span><span class="token punctuation">></span></span></code></pre><h2 id="使用AsyncLogger">5.2 使用AsyncLogger</h2><p>这种方法异步性能更高一点</p><h3 id="全局异步">5.2.1 全局异步</h3><p>所有日志都异步，在配置文件上不用做任何改动，只需要添加一个<code>log4j2.component.properties</code>配置：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">Log4jContextSelector</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.logging.log4j.core.async.AsyncLoggerContextSelector</span></code></pre><h3 id="混合异步">5.2.2 混合异步</h3><p>可以在应用中同时使用同步日志和异步日志，这使得日志的配置方式更加灵活。</p><p>需要配置自定义logger：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Loggers</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- includeLocation关闭文件信息、行号信息，这些信息影响性能 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AsyncLogger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.rhett.AsyncLogger<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>trace<span class="token punctuation">"</span></span> <span class="token attr-name">includeLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AsyncLogger</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Loggers</span><span class="token punctuation">></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前置知识： &lt;a href=&quot;../日志门面SLF4J介绍和使用&quot;&gt;日志门面SLF4J介绍和使用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;推荐阅读： &lt;a href=&quot;../Java日志框架Logback介绍和使用/&quot;&gt;Java日志框架Logback介绍和使用&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="java" scheme="https://www.codetool.top/tags/java/"/>
    
      <category term="日志" scheme="https://www.codetool.top/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>Java日志框架Logback介绍和使用</title>
    <link href="https://www.codetool.top/article/Java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6Logback%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.codetool.top/article/Java日志框架Logback介绍和使用/</id>
    <published>2020-03-09T15:07:24.000Z</published>
    <updated>2020-03-09T15:55:54.323Z</updated>
    
    <content type="html"><![CDATA[<p>前置知识：</p><p><a href="../日志门面SLF4J介绍和使用">日志门面SLF4J介绍和使用</a></p><h1 id="Logback概述">1 Logback概述</h1><p>Logback是由log4j、slf4j创始人Ceki Gülcü设计的另一个开源日志组件，性能比log4j要好。它自然地实现了slf4j规范。</p><p>Logback主要分为三个模块：</p><ul><li><code>logback-core</code>：logback的核心模块，也是其它两个模块的基础模块</li><li><code>logback-classic</code>：它是log4j的一个改良版本,同时它完整实现了slf4jAPI</li><li><code>logback-access</code>: 访问模块与Servlet容器集成提供通过Http来访问日志的功能</li></ul><p>Logback的核心组件：</p><ul><li>Logger：日志的记录器,把它关联到应用的对应的context上后，主要用于存放日志对象,也可以定义日志类型、级别。</li><li>Appender：用于指定日志输出的目的地,目的地可以是控制台、文件、数据库等等。</li><li>Layout：负责把事件转换成字符串,格式化的日志信息的输出。在 logbackLayoutencoder中对象被封装在中。</li></ul><h1 id="Logback使用">2 Logback使用</h1><p>maven依赖：</p><p>这里使用slf4j来管理</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h1 id="Logback配置">3 Logback配置</h1><p>logback会依次读取以下类型配置文件：</p><ul><li>logback.groovy</li><li>logback-test.xml</li><li>logback.xml</li></ul><p>如果均不存在会采用默认配置</p><p>logback官方提供的log4j配置转logback配置工具：<a href="http://logback.qos.ch/translator/" target="_blank" rel="noopener">http://logback.qos.ch/translator/</a></p><h2 id="基本配置">3.1 基本配置</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} %c %M %L [%thread] %m%n<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log_dir<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/logs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 控制台日志输出的 appender--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>console<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 控制输出流对象，默认System.out改为System.err--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>System.err<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 日志消息格式配置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.encoder.PatternLayoutEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>${pattern}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 日志文件输出的 appender--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.FileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 日志文件保存路径 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${log_dir}/logback.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 日志消息格式配置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.encoder.PatternLayoutEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>${pattern}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- root logger 配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ALL<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>console<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender-ref</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender-ref</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>pattern常用转换符：</p><ul><li><code>%c/%logger</code>：输出日志的logger名，可有一个整形参数，功能是缩短logger名，例如%logger{5}</li><li><code>%cn</code>：输出上下文名称。</li><li><code>%d{pattern}</code>：输出日志的打印日志，模式语法与<code>java.text.SimpleDateFormat</code>兼容。</li><li><code>%p/%le/%level</code>：输出日志级别。</li><li><code>%t/%thread</code>:    输出产生日志的线程名。</li><li><code>%n</code>：输出平台相关的分行符“\n”或者“\r\n”。</li><li><code>%m/%msg/%message</code>：输出应用程序提供的信息。</li><li><code>%L/%line</code>：输出执行日志请求的行号。</li></ul><p>使用HTML格式输出：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 日志文件输出的 appender--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>htmlFile<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.FileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 日志文件保存路径 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${log_dir}/logback.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 日志消息格式配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.encoder.LayoutWrappingEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.html.HTMLLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%level%d{yyyy-MM-dd HH:mm:ss.SSS}%c%M%L%thread%m<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span></code></pre><h2 id="动态刷新配置">3.2 动态刷新配置</h2><p>根节点<code>configuration</code>可以配置两个属性：</p><ul><li><code>scan</code>: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</li><li><code>scanPeriod</code>: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。</li></ul><p>通过配置这两个属性，可以在系统运行时修改logback的配置而不需要重写部署，例如修改日志级别</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">scan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">scanPeriod</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60 seconds<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- ... --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h2 id="日志拆分和归档压缩的appender">3.3 日志拆分和归档压缩的appender</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rollFile<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 日志文件保存路径 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${log_dir}/roll_logback.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 日志消息格式配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.encoder.PatternLayoutEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>${pattern}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 指定拆分规则 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 按照时间和压缩格式声明拆分的文件名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${log_dir}/rolling.%d{yyyy-MM-dd}.log%i.gz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 按照文件大小拆分 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>1MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span></code></pre><h2 id="过滤器">3.4 过滤器</h2><p>写在Appender中</p><p>级别过滤器：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 日志过滤规则 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span></code></pre><p>其他的还有ThresholdFilter（临界值过滤器）、EvaluatorFilter（求值过滤器）等。</p><h2 id="异步日志">3.5 异步日志</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>async<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.AsyncAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 指定某个具体的appender --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender-ref</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span></code></pre><h2 id="自定义Logger">3.6 自定义Logger</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 自定义logger对象    additivity：是否继承自rootLogger--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.rhett.consoleLogger<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>console<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender-ref</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span></code></pre><h1 id="logback-access的使用">4 logback-access的使用</h1><p>logback-access模块与Servlet容器(如Tomcat和Jetty)集成,以提供HTTP访问日志功能。我们可以使用logback-acces模块来替换tomcat的访问日志。</p><p>步骤：</p><ol><li>将<code>logback-access.jar</code>与<code>logback-core.jar</code>复制到<code>$TOMCAT_HOME/lib/</code>目录下</li><li>在<code>$TOMCAT_HOME/conf/server.xml</code>中的Host元素中添加：</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Value</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.access.tomcat.LogbackValue<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><ol start="3"><li>logback默认会在<code>$TOMCAT_HOME/conf</code>下查找文件<code>logback-access.xml</code></li></ol><p>示例配置：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- always a good activate OnConsoleStatusListener--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>statusListener</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.status.OnConsoleStatusListener<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOG_DIR<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${catalina.base}/logs<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${LOG_DIR}/access.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>access.%d{yyyy-MM-dd).log.zip<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>combined<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前置知识：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../日志门面SLF4J介绍和使用&quot;&gt;日志门面SLF4J介绍和使用&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Logback概述&quot;&gt;1 Logback概述&lt;/h1&gt;&lt;p&gt;Logback是由log4j、slf4j创始人Ceki Gülcü设计
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="java" scheme="https://www.codetool.top/tags/java/"/>
    
      <category term="日志" scheme="https://www.codetool.top/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>日志门面SLF4J介绍和使用</title>
    <link href="https://www.codetool.top/article/%E6%97%A5%E5%BF%97%E9%97%A8%E9%9D%A2SLF4J%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.codetool.top/article/日志门面SLF4J介绍和使用/</id>
    <published>2020-03-09T12:43:21.000Z</published>
    <updated>2020-03-09T16:11:37.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SLF4j概述">1 SLF4j概述</h1><p>上篇文章写了<a href="../日志门面介绍和JCL使用">日志门面介绍和JCL使用</a>，作为一个曾经的主流日志门面技术，JCL终究因为设计时的产生问题所限，导致至今已没什么人使用，而一款优秀的日志门面技术SLF4j，吸取了JCL的教训与经验，出现在java开发者的视野中，开始被广泛关注和使用。</p><p>这里如果谈谈历史还蛮好玩的，涉及到一位Java日志领域知名人物Ceki Gülcü，log4j、slf4j、logback都是出自他之手，在Apache组织开发的log4j，后来离开了apache开发了logback，apache反而又推出了log4j2与之竞争，感兴趣的可以去看看<a href="https://segmentfault.com/a/1190000021121882" target="_blank" rel="noopener">Java日志系统历史从入门到崩溃 - 个人文章 - SegmentFault 思否</a></p><p>SLF4J，即<strong>简单日志门面</strong>（Simple Logging Facade for Java）,也为Java日志访问提供了一套标准、规范的API框架，它支持了log4j和logback，它本身也提供了功能较简单的日志实现，但一般很少用到，它的设计思想和JCL较为不同，要么遵循slf4j规范开发，要么使用<strong>适配器</strong>来完成slf-api与具体日志实现框架的整合。</p><h1 id="SLF4j使用">2 SLF4j使用</h1><h2 id="maven依赖">2.1 maven依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- slf4j日志门面 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- slf4j内置的简单实现 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-simple<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="日志绑定">2.2 日志绑定</h2><p>SLF4J使用指定的日志框架需要通过“日志绑定”，通过一些jar文件实现。</p><p>绑定具体的日志实现框架：</p><ol><li>绑定已经实现了sf4的日志框架直接添加对应依赖</li><li>绑定没有实现sf4的日志框架先添加日志的适配器再添加实现类的依赖</li></ol><p>logback、slf4j-simple遵循了slf4j-api的开发，只需要导入对应依赖。</p><p>slf4j-nop是关闭日志功能。</p><p>如果绑定了多个日志实现，使用第一个找到的日志实现。</p><p><img src="https://api.codetool.top/img/15837539283526.png" alt></p><p>例：绑定log4j</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="桥接">2.3 桥接</h2><p>slf4j的强大之处还在于它对遗留代码的支持，如果项目之前使用的是例如Log4j等日志框架实现，可以通过slf4j提供的“桥接器”将其转移至slf4j使用。甚至还可以桥接JCL。</p><p><img src="https://api.codetool.top/img/15837554998133.png" alt></p><p>例如：log4j代码通过桥接器转移至logback实现，首先移除log4j依赖，然后添加桥接器：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-over-slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>这里会出现一个问题比如<code>log4j-over-slf4j</code>与<code>slf4j-log4j12</code>共存出现stack overflow，就是因为slf4j&lt;-&gt;log4j死循环</p><h2 id="特性">2.4 特性</h2><p><strong>核心类：</strong></p><ul><li>Logger：日志记录器，用于写日志</li><li>LoggerFactory：日志记录器的工厂类，用于获取日志记录器。</li></ul><p><strong>日志级别：</strong></p><ul><li>trace</li><li>debug</li><li>info</li><li>warn</li><li>error</li></ul><p>比JCL还少一个fatal级别。</p><p><strong>使用占位符输出日志信息：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>SLF4JTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String name <span class="token operator">=</span> <span class="token string">"rhett"</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"名字：{}"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>将系统异常信息输出：</strong></p><p>Logger提供了带throwable参数的方法重载，可以便捷地输出错误信息：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>SLF4JTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"出现异常："</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="SLF4J原理">3 SLF4J原理</h1><p>这个阶段推荐自己进行源码跟踪，我大概把方法栈贴一下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Logger <span class="token function">getLogger</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Logger logger <span class="token operator">=</span> <span class="token function">getLogger</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//!!!</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>DETECT_LOGGER_NAME_MISMATCH<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> autoComputedCallingClass <span class="token operator">=</span> Util<span class="token punctuation">.</span><span class="token function">getCallingClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>autoComputedCallingClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">nonMatchingClasses</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> autoComputedCallingClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Util<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Detected logger name mismatch. Given name: \"%s\"; computed name: \"%s\"."</span><span class="token punctuation">,</span> logger<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            autoComputedCallingClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Util<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">"See "</span> <span class="token operator">+</span> LOGGER_NAME_MISMATCH_URL <span class="token operator">+</span> <span class="token string">" for an explanation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> logger<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Logger <span class="token function">getLogger</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ILoggerFactory iLoggerFactory <span class="token operator">=</span> <span class="token function">getILoggerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> iLoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ILoggerFactory <span class="token function">getILoggerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>INITIALIZATION_STATE <span class="token operator">==</span> UNINITIALIZED<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LoggerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>INITIALIZATION_STATE <span class="token operator">==</span> UNINITIALIZED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                INITIALIZATION_STATE <span class="token operator">=</span> ONGOING_INITIALIZATION<span class="token punctuation">;</span>                <span class="token function">performInitialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通往bind方法</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>INITIALIZATION_STATE<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> SUCCESSFUL_INITIALIZATION<span class="token operator">:</span>        <span class="token keyword">return</span> StaticLoggerBinder<span class="token punctuation">.</span><span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLoggerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> NOP_FALLBACK_INITIALIZATION<span class="token operator">:</span>        <span class="token keyword">return</span> NOP_FALLBACK_FACTORY<span class="token punctuation">;</span>    <span class="token keyword">case</span> FAILED_INITIALIZATION<span class="token operator">:</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>UNSUCCESSFUL_INIT_MSG<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> ONGOING_INITIALIZATION<span class="token operator">:</span>        <span class="token comment" spellcheck="true">// support re-entrant behavior.</span>        <span class="token comment" spellcheck="true">// See also http://jira.qos.ch/browse/SLF4J-97</span>        <span class="token keyword">return</span> SUBST_FACTORY<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Unreachable code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>URL<span class="token operator">></span> staticLoggerBinderPathSet <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// skip check under android, see also</span>        <span class="token comment" spellcheck="true">// http://jira.qos.ch/browse/SLF4J-328</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isAndroid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            staticLoggerBinderPathSet <span class="token operator">=</span> <span class="token function">findPossibleStaticLoggerBinderPathSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//!!!</span>            <span class="token function">reportMultipleBindingAmbiguity</span><span class="token punctuation">(</span>staticLoggerBinderPathSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// the next line does the binding</span>        StaticLoggerBinder<span class="token punctuation">.</span><span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        INITIALIZATION_STATE <span class="token operator">=</span> SUCCESSFUL_INITIALIZATION<span class="token punctuation">;</span>        <span class="token function">reportActualBinding</span><span class="token punctuation">(</span>staticLoggerBinderPathSet<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoClassDefFoundError</span> ncde<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String msg <span class="token operator">=</span> ncde<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">messageContainsOrgSlf4jImplStaticLoggerBinder</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            INITIALIZATION_STATE <span class="token operator">=</span> NOP_FALLBACK_INITIALIZATION<span class="token punctuation">;</span>            Util<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">"Failed to load class \"org.slf4j.impl.StaticLoggerBinder\"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Util<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">"Defaulting to no-operation (NOP) logger implementation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Util<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">"See "</span> <span class="token operator">+</span> NO_STATICLOGGERBINDER_URL <span class="token operator">+</span> <span class="token string">" for further details."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">failedBinding</span><span class="token punctuation">(</span>ncde<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> ncde<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>NoSuchMethodError</span> nsme<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String msg <span class="token operator">=</span> nsme<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"org.slf4j.impl.StaticLoggerBinder.getSingleton()"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            INITIALIZATION_STATE <span class="token operator">=</span> FAILED_INITIALIZATION<span class="token punctuation">;</span>            Util<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">"slf4j-api 1.6.x (or later) is incompatible with this binding."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Util<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">"Your binding is version 1.5.5 or earlier."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Util<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">"Upgrade your binding to version 1.6.x."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> nsme<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">failedBinding</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Unexpected initialization failure"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token function">postBindCleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> Set<span class="token operator">&lt;</span>URL<span class="token operator">></span> <span class="token function">findPossibleStaticLoggerBinderPathSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// use Set instead of list in order to deal with bug #138</span>    <span class="token comment" spellcheck="true">// LinkedHashSet appropriate here because it preserves insertion order</span>    <span class="token comment" spellcheck="true">// during iteration</span>    Set<span class="token operator">&lt;</span>URL<span class="token operator">></span> staticLoggerBinderPathSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span>URL<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        ClassLoader loggerFactoryClassLoader <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Enumeration<span class="token operator">&lt;</span>URL<span class="token operator">></span> paths<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loggerFactoryClassLoader <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            paths <span class="token operator">=</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemResources</span><span class="token punctuation">(</span>STATIC_LOGGER_BINDER_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            paths <span class="token operator">=</span> loggerFactoryClassLoader<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>STATIC_LOGGER_BINDER_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>paths<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            URL path <span class="token operator">=</span> paths<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            staticLoggerBinderPathSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ioe<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Util<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">"Error getting resources from path"</span><span class="token punctuation">,</span> ioe<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> staticLoggerBinderPathSet<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> String STATIC_LOGGER_BINDER_PATH <span class="token operator">=</span> <span class="token string">"org/slf4j/impl/StaticLoggerBinder.class"</span><span class="token punctuation">;</span></code></pre><p><strong>注意:</strong> 虽然<code>StaticLoggerBinder</code>是在<code>org.slf4j.impl</code>包下,但日志门面jar包中并无此类,此类是由桥接器实现的。</p><p>桥接器的原理其实就是在其jar包中存在StaticLoggerBinder.class,这样就可在运行时动态绑定底层的日志实现框架。</p><p>然后回到bind方法：</p><pre class=" language-java"><code class="language-java">StaticLoggerBinder<span class="token punctuation">.</span><span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>获取了一个<code>StaticLoggerBinder</code>的单例对象</p><p>然后返回getILoggerFactory方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">case</span> SUCCESSFUL_INITIALIZATION<span class="token operator">:</span>    <span class="token keyword">return</span> StaticLoggerBinder<span class="token punctuation">.</span><span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLoggerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>总结：桥接器会调用的日志框架实现的相关代码生成其内部的Logger(此Logger与org.slf4j.Logger)不兼容,再通过适配器包装日志框架实现内部的Logger.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SLF4j概述&quot;&gt;1 SLF4j概述&lt;/h1&gt;&lt;p&gt;上篇文章写了&lt;a href=&quot;../日志门面介绍和JCL使用&quot;&gt;日志门面介绍和JCL使用&lt;/a&gt;，作为一个曾经的主流日志门面技术，JCL终究因为设计时的产生问题所限，导致至今已没什么人使用，而一款优秀的日志门面技
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="java" scheme="https://www.codetool.top/tags/java/"/>
    
      <category term="日志" scheme="https://www.codetool.top/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>日志门面介绍和JCL使用</title>
    <link href="https://www.codetool.top/article/%E6%97%A5%E5%BF%97%E9%97%A8%E9%9D%A2%E4%BB%8B%E7%BB%8D%E5%92%8CJCL%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.codetool.top/article/日志门面介绍和JCL使用/</id>
    <published>2020-03-09T09:45:50.000Z</published>
    <updated>2020-03-09T10:59:29.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日志门面概述">1 日志门面概述</h1><p>之前有写过<a href="../Java日志框架JUL和Log4j介绍/">Java日志框架JUL和Log4j介绍</a>，可以对比发现它们之间的使用还是有一些区别的，比如有一些类名是不同的、日志的输出级别也不完全一致。</p><p>那么实际上是增大了日志框架与程序的耦合性，使得难以更换日志框架。<br>甚至会造成一些优秀的框架强制性依赖某一个具体的日志实现类，为了解决这个问题，日志门面技术就诞生了。</p><p>日志门面实质上就是提供了一套通用的日志API技术，和JDBC的思想类似，使用日志门面，就可以轻松地更换日志实现。</p><p>我们为什么要使用日志门面：</p><ol><li>面向接口开发,不再依赖具体的实现类减少代码的耦合</li><li>项目通过导入不同的日志实现类,可以灵活的切换日志框架</li><li>统一API,方便开发者学习和使用</li><li>统一配置便于项目日志的管理</li></ol><p>常见的日志门面：JCL、slf4j</p><h1 id="JCL">2 JCL</h1><h2 id="JCL介绍">2.1 JCL介绍</h2><p>JCL全称为<code>Jakarta Commons Logging</code>，是 Apache提供的一个<strong>通用日志API</strong></p><p>它是为“所有的Java日志实现”提供一个统一的接口,它自身也提供一个日志的实现,但是功能非常常弱<br>(SimpleLog)。所以一般不会单独使用它。他允许开发人员使用不同的具体日志实现工具:Log4j、jdk自带的日志(JUL)。</p><h2 id="JCL使用">2.2 JCL使用</h2><p>maven依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>如果要使用log4j还需加上log4j的依赖</p><p>核心类：</p><ul><li>Log：日志记录器，用于写日志</li><li>LogFactory：日志记录器的工厂类，用于获取日志记录器。</li></ul><p>JCL的日志级别：</p><ul><li>trace</li><li>debug</li><li>info</li><li>warn</li><li>error</li><li>fatal</li></ul><p>可以看出和log4j的日志级别一致，但它把JUL的日志级别也适配到了这套日志级别上。</p><p>对于配置文件，如果使用JUL就添加JUL的配置文件，如果使用log4j就添加Log4j的配置文件。</p><p>JCL默认会根据如下顺序查找日志的实现类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> classesToDiscover <span class="token operator">=</span> <span class="token punctuation">{</span>        LOGGING_IMPL_LOG4J_LOGGER<span class="token punctuation">,</span>        <span class="token string">"org.apache.commons.logging.impl.Jdk14Logger"</span><span class="token punctuation">,</span>        <span class="token string">"org.apache.commons.logging.impl.Jdk13LumberjackLogger"</span><span class="token punctuation">,</span>        <span class="token string">"org.apache.commons.logging.impl.SimpleLog"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>classesToDiscover<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> result <span class="token operator">==</span> null<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token function">createLogFromClass</span><span class="token punctuation">(</span>classesToDiscover<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> logCategory<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中<code>LOGGING_IMPL_LOG4J_LOGGER</code>代表的是log4j的<code>org.apache.commons.logging.impl.Log4JLogger</code>，可以看到JCL支持的日志实现有：</p><ul><li>log4j</li><li>jdk1.4的日志（JUL）</li><li>jdk1.3前的LumberjackLogger（已经淘汰）</li><li>JCL自带的SimpleLog</li></ul><p>如果用户不指定使用哪个日志实现类，JCL会按这个顺序查找，使用最先找到的实现类。</p><p>如果需要指定，还需要添加一个配置文件<code>commons-logging.properties</code>在类路径下：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">org.apache.commons.logging.Log</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.commons.logging.impl.SimpleLog</span></code></pre><p>此后就可以使用了：</p><pre class=" language-java"><code class="language-java">Log log <span class="token operator">=</span> LogFactory<span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span>JCLTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello JCL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="JCL的问题">2.3 JCL的问题</h2><p>JCL的问题是，当初设计的时候只考虑到了在当时比较主流的日志框架log4j、JUL，也只支持这几个日志框架，导致后面如果出现了更强大的日志框架，比如说logback出现后，如果需要使用logback，JCL需要通过修改代码的方式来适配，当然这会造成很大的麻烦。</p><p>JCL获取日志工厂的过程中使用了classLoader来寻找日志工厂实现，进而导致了其他组件，如若使用自己的classloader，则不能获取具体的日志工厂对象，则导致启动失败。（即无法动态查找）</p><p>于是不久commons-logging就退出了人们的视线，更好的日志门面技术slf4j诞生以取代它的位置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;日志门面概述&quot;&gt;1 日志门面概述&lt;/h1&gt;&lt;p&gt;之前有写过&lt;a href=&quot;../Java日志框架JUL和Log4j介绍/&quot;&gt;Java日志框架JUL和Log4j介绍&lt;/a&gt;，可以对比发现它们之间的使用还是有一些区别的，比如有一些类名是不同的、日志的输出级别也不完全
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="java" scheme="https://www.codetool.top/tags/java/"/>
    
      <category term="日志" scheme="https://www.codetool.top/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>leetcode121-买卖股票的最佳时机</title>
    <link href="https://www.codetool.top/article/leetcode121-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/"/>
    <id>https://www.codetool.top/article/leetcode121-买卖股票的最佳时机/</id>
    <published>2020-03-08T16:12:45.000Z</published>
    <updated>2020-03-08T16:22:43.537Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p><p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p><p>注意你不能在买入股票前卖出股票。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> [7,1,5,3,6,4]<br><strong>输出:</strong> 5<br><strong>解释:</strong> 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。<br>     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。  </p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> [7,6,4,3,1]<br><strong>输出:</strong> 0<br><strong>解释:</strong> 在这种情况下, 没有交易完成, 所以最大利润为 0。  </p></blockquote><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>从左往右记录最低点，记录下当前价格与最低点的差值的最大值。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> minprice <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">int</span> maxprofit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minprice<span class="token punctuation">)</span>                minprice <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> minprice <span class="token operator">></span> maxprofit<span class="token punctuation">)</span>                maxprofit <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> minprice<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> maxprofit<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。&lt;/p&gt;
&lt;p&gt;如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。&lt;/p&gt;
&lt;p&gt;注意你不能在买入股票前卖出股票。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot自动配置原理与自定义配置介绍</title>
    <link href="https://www.codetool.top/article/SpringBoot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D/"/>
    <id>https://www.codetool.top/article/SpringBoot自动配置原理与自定义配置介绍/</id>
    <published>2020-03-08T13:34:46.000Z</published>
    <updated>2020-03-10T14:27:21.277Z</updated>
    
    <content type="html"><![CDATA[<p>SpringBoot配置与自动配置原理</p><h1 id="自动配置原理">1 自动配置原理</h1><p>SpringBoot启动的时候加载主配置类，开启了自动配置功能 <code>@EnableAutoConfiguration</code>：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@SpringBootConfiguration</span> <span class="token annotation punctuation">@EnableAutoConfiguration</span> <span class="token comment" spellcheck="true">//!!!</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> TypeExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> AutoConfigurationExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootApplication</span></code></pre><p><code>@EnableAutoConfiguration</code> 的作用：</p><ul><li>利用<code>EnableAutoConfigurationImportSelector</code>给容器中导入一些组件</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@AutoConfigurationPackage</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>AutoConfigurationImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//!!!</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableAutoConfiguration</span></code></pre><ul><li>可以查看<code>AutoConfigurationImportSelector.selectImports()</code>方法的内容；</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span>AnnotationMetadata annotationMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> NO_IMPORTS<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    AutoConfigurationMetadata autoConfigurationMetadata <span class="token operator">=</span> AutoConfigurationMetadataLoader            <span class="token punctuation">.</span><span class="token function">loadMetadata</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    AutoConfigurationEntry autoConfigurationEntry <span class="token operator">=</span> <span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span>autoConfigurationMetadata<span class="token punctuation">,</span>            annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//!!!</span>    <span class="token keyword">return</span> StringUtils<span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span>autoConfigurationEntry<span class="token punctuation">.</span><span class="token function">getConfigurations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><code>getAutoConfigurationEntry()</code>方法：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> AutoConfigurationEntry <span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span>AutoConfigurationMetadata autoConfigurationMetadata<span class="token punctuation">,</span>        AnnotationMetadata annotationMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> EMPTY_ENTRY<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    AnnotationAttributes attributes <span class="token operator">=</span> <span class="token function">getAttributes</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> configurations <span class="token operator">=</span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//!!!</span>    configurations <span class="token operator">=</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> exclusions <span class="token operator">=</span> <span class="token function">getExclusions</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkExcludedClasses</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>    configurations<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>    configurations <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> autoConfigurationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fireAutoConfigurationImportEvents</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AutoConfigurationEntry</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><code>getCandidateConfigurations()</code>方法：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>AnnotationMetadata metadata<span class="token punctuation">,</span> AnnotationAttributes attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> configurations <span class="token operator">=</span> SpringFactoriesLoader<span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span><span class="token function">getSpringFactoriesLoaderFactoryClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Assert<span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> <span class="token string">"No auto configuration classes found in META-INF/spring.factories. If you "</span>            <span class="token operator">+</span> <span class="token string">"are using a custom packaging, make sure that file is correct."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> configurations<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从META-INF下面找<code>spring.factories</code>文件，将里面配置的所有EnableAutoConfiguration的值加入到了容器中</p><p><img src="https://api.codetool.top/img/15836660223144.png" alt></p><p>每一个这样的<code>xxxAutoConfiguration</code>类都是容器中的一个组件，都加入到容器中；用他们来做自动配置。</p><p>例如：自动配置类<code>DispatcherServletAutoConfiguration</code></p><p>（节选内部类DispatcherServletConfiguration）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//配置文件</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//配置条件满足类DefaultDispatcherServletCondition的验证</span><span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>DefaultDispatcherServletCondition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果存在ServletRegistration类则进行配置</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>ServletRegistration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果存在对应的属性配置（WebMvcProperties对应的是spring.mvc.*）则启用配置</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span> HttpProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> WebMvcProperties<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DispatcherServletConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DEFAULT_DISPATCHER_SERVLET_BEAN_NAME<span class="token punctuation">)</span>    <span class="token keyword">public</span> DispatcherServlet <span class="token function">dispatcherServlet</span><span class="token punctuation">(</span>HttpProperties httpProperties<span class="token punctuation">,</span> WebMvcProperties webMvcProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DispatcherServlet dispatcherServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注意</span>        dispatcherServlet<span class="token punctuation">.</span><span class="token function">setDispatchOptionsRequest</span><span class="token punctuation">(</span>webMvcProperties<span class="token punctuation">.</span><span class="token function">isDispatchOptionsRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dispatcherServlet<span class="token punctuation">.</span><span class="token function">setDispatchTraceRequest</span><span class="token punctuation">(</span>webMvcProperties<span class="token punctuation">.</span><span class="token function">isDispatchTraceRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dispatcherServlet<span class="token punctuation">.</span><span class="token function">setThrowExceptionIfNoHandlerFound</span><span class="token punctuation">(</span>webMvcProperties<span class="token punctuation">.</span><span class="token function">isThrowExceptionIfNoHandlerFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dispatcherServlet<span class="token punctuation">.</span><span class="token function">setPublishEvents</span><span class="token punctuation">(</span>webMvcProperties<span class="token punctuation">.</span><span class="token function">isPublishRequestHandledEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dispatcherServlet<span class="token punctuation">.</span><span class="token function">setEnableLoggingRequestDetails</span><span class="token punctuation">(</span>httpProperties<span class="token punctuation">.</span><span class="token function">isLogRequestDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dispatcherServlet<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token comment" spellcheck="true">//如果存在类定义则配置</span>    <span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>MultipartResolver<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//判断如果不存在bean名称为DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME，则配置 bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DispatcherServlet<span class="token punctuation">.</span>MULTIPART_RESOLVER_BEAN_NAME<span class="token punctuation">)</span>    <span class="token keyword">public</span> MultipartResolver <span class="token function">multipartResolver</span><span class="token punctuation">(</span>MultipartResolver resolver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Detect if the user has created a MultipartResolver but named it incorrectly</span>        <span class="token keyword">return</span> resolver<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过上面的代码,可以看到这个自动配置类使用了许多<code>@Conditional**</code>注解来条件性地加载配置（比如说是否存在指定的类），配置的默认值从一个<code>**Properties</code>类中取出，如果用户配置了自定义属性，会覆盖掉<code>**Properties</code>中的默认值。</p><p>到这里,应该明白为什么几乎在没有任何配置下就能用Spring Boot启动 Spring MVC项目。但是有时候,我们需要对这些默认的环境进行修改以适应个性化的要求,这些在 Spring Boot中也是非常简单的,正如<code>@EnableConfigurationProperties</code>注解那样，它允许读入配置文件的内容来自定义自动初始化所需的内容。</p><h1 id="Spring-Boot配置文件">2 Spring Boot配置文件</h1><p>Spring Boot的所有的AutoConfiguration属性项可以在 <a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#common-application-properties</a> 看到。这一节我们主要介绍自定义配置。</p><h2 id="yaml语法">2.1 yaml语法</h2><p>配置文件推荐使用yaml语法来写，通过缩进来表达数据关系。</p><h2 id="字符串">2.2 字符串</h2><p>字符串​可以不加引号，如果加引号：</p><ul><li><code>&quot;&quot;</code>：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思<ul><li><code>name: &quot;zhangsan \n lisi&quot;</code>：<code>\n</code>会解析为回车</li></ul></li><li><code>&#39;&#39;</code>：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据<ul><li><code>name: &#39;zhangsan \n lisi&#39;</code>：<code>\n</code>不会解析为回车</li></ul></li></ul><h2 id="对象、Map">2.3 对象、Map</h2><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">friends</span><span class="token punctuation">:</span>    <span class="token key atrule">lastName</span><span class="token punctuation">:</span> zhangsan    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">20</span></code></pre><p>行内写法：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">friends</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">lastName</span><span class="token punctuation">:</span> zhangsan<span class="token punctuation">,</span><span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span></code></pre><h3 id="数组（List、Set）">2.3.1 数组（List、Set）</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">pets</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> cat    <span class="token punctuation">-</span> dog    <span class="token punctuation">-</span> pig</code></pre><p>行内写法：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">pets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>cat<span class="token punctuation">,</span>dog<span class="token punctuation">,</span>pig<span class="token punctuation">]</span></code></pre><h2 id="自定义属性配置">2.4 自定义属性配置</h2><p>可以在类上加上<code>@ConfigurationProperties(prefix=&quot;&quot;)</code>注解，把本类中所有属性和配置文件中相关的配置进行绑定。</p><p>只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能。</p><p>例：</p><p>JavaBean</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Boolean boss<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> maps<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> lists<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//getter and setter...</span><span class="token punctuation">}</span></code></pre><p>配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>    <span class="token key atrule">lastName</span><span class="token punctuation">:</span> hello    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span>    <span class="token key atrule">boss</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">birth</span><span class="token punctuation">:</span> 2000/01/01    <span class="token key atrule">maps</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">k1</span><span class="token punctuation">:</span> v1<span class="token punctuation">,</span><span class="token key atrule">k2</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">}</span>    <span class="token key atrule">lists</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> lisi      <span class="token punctuation">-</span> zhaoliu    <span class="token key atrule">dog</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> 小狗      <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">7</span></code></pre><p>它默认从全局配置中获取值，可以使用<code>@PropertySource(value={})</code>来指定配置文件。</p><p>还有一种方法是使用<code>@Value</code>，它必须配合SpEL来指定对应配置的名称，不支持松散语法绑定（即大小写等不匹配）。</p><h2 id="配置文件占位符">2.5 配置文件占位符</h2><h3 id="随机数">2.5.1 随机数</h3><ul><li><code>${random.value}</code></li><li><code>${random.int}</code></li><li><code>${random.long}</code></li><li><code>${random.int(10)}</code></li><li><code>${random.int[1024,65536]}</code></li></ul><h3 id="占位符获取之前配置的值，如果没有可以是用-指定默认值">2.5.2 占位符获取之前配置的值，如果没有可以是用:指定默认值</h3><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">person.last-name</span><span class="token punctuation">=</span><span class="token attr-value">张三${random.uuid}</span><span class="token attr-name">person.age</span><span class="token punctuation">=</span><span class="token attr-value">${random.int}</span><span class="token attr-name">person.birth</span><span class="token punctuation">=</span><span class="token attr-value">2017/12/15</span><span class="token attr-name">person.boss</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">person.maps.k1</span><span class="token punctuation">=</span><span class="token attr-value">v1</span><span class="token attr-name">person.maps.k2</span><span class="token punctuation">=</span><span class="token attr-value">14</span><span class="token attr-name">person.lists</span><span class="token punctuation">=</span><span class="token attr-value">a,b,c</span><span class="token attr-name">person.dog.name</span><span class="token punctuation">=</span><span class="token attr-value">${person.hello:hello}_dog</span><span class="token attr-name">person.dog.age</span><span class="token punctuation">=</span><span class="token attr-value">15</span></code></pre><h2 id="配置文件加载位置">2.6 配置文件加载位置</h2><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p><ul><li><code>file:./config/</code></li><li><code>file:./</code></li><li><code>classpath:/config/</code></li><li><code>classpath:/</code></li></ul><p>优先级由高到底，高优先级的配置会覆盖低优先级的配置</p><p>SpringBoot会从这四个位置全部加载主配置文件，<strong>互补配置</strong></p><p>我们还可以通过<code>spring.config.location</code>来改变默认的配置文件位置。</p><p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</strong></p><pre class=" language-shell"><code class="language-shell">java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --spring.config.location=G:/application.properties</code></pre><p>SpringBoot支持的所有的外部配置文件加载方法见：</p><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config</a></p><h2 id="ImportResource注解">2.7 @ImportResource注解</h2><p><code>@ImportResource</code>可以帮助导入传统xml类型的配置，例如springcontext配置，直接将它写在启动类上就行了。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//导入Spring的配置文件让其生效</span><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"classpath:beans.xml"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BootHelloworldApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>BootHelloworldApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="多环境化配置Profile">2.8 多环境化配置Profile</h2><h3 id="properties">2.8.1 properties</h3><p>在真实的应用中，常常会有多个环境（如：开发，测试，生产等），不同的环境数据库连接都不一样，这个时候就需要用到spring.profile.active的强大功能了，它的格式为 <code>application-{profile}.properties</code>，这里的 application 为前缀不能改，<code>{profile}</code>是我们自己定义的。</p><p>application.properties就是默认的配置文件。</p><p>在 <code>application.properties</code> 配置文件中写入 <code>spring.profiles.active=dev</code>，就可以指定使用profile为dev的配置文件。</p><p>也可以使用虚拟机参数<code>-Dspring.profiles.active=dev</code>指定</p><h3 id="yaml文档块">2.8.2 yaml文档块</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># document 1</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> prod<span class="token punctuation">---</span><span class="token comment" spellcheck="true"># document 2</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8083</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev<span class="token punctuation">---</span><span class="token comment" spellcheck="true"># document 3</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8084</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> prod  <span class="token comment" spellcheck="true">#指定属于哪个环境</span></code></pre><p>文档块之间使用<code>---</code>分隔，第一个文档块为默认使用的配置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SpringBoot配置与自动配置原理&lt;/p&gt;
&lt;h1 id=&quot;自动配置原理&quot;&gt;1 自动配置原理&lt;/h1&gt;&lt;p&gt;SpringBoot启动的时候加载主配置类，开启了自动配置功能 &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt;：&lt;/p&gt;
&lt;pre c
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SpringBoot" scheme="https://www.codetool.top/tags/SpringBoot/"/>
    
  </entry>
  
</feed>
