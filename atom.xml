<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>代码段小站</title>
  <icon>https://www.gravatar.com/avatar/4c71a513a84e4d430b9f9aed224237fc</icon>
  <subtitle>CodeTool - 个人计算机类练手小博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.codetool.top/"/>
  <updated>2020-03-02T14:59:40.726Z</updated>
  <id>https://www.codetool.top/</id>
  
  <author>
    <name>Rhett Peng</name>
    <email>pctdyx@qq.net</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Redis持久化方式RDB和AOF介绍</title>
    <link href="https://www.codetool.top/article/Redis%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8FRDB%E5%92%8CAOF%E4%BB%8B%E7%BB%8D/"/>
    <id>https://www.codetool.top/article/Redis持久化方式RDB和AOF介绍/</id>
    <published>2020-03-02T14:58:43.000Z</published>
    <updated>2020-03-02T14:59:40.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="持久化简介">1 持久化简介</h1><p>将内存中的数据隔段时间在硬盘中做备份，防止数据突然丢失</p><ul><li>快照方法 RDB</li><li>日志方法 AOF</li></ul><h1 id="RDB">2 RDB</h1><h2 id="启动方式">2.1 启动方式</h2><h3 id="指令：save">2.1.1 指令：save</h3><ul><li>谁：redis操作者（用户）</li><li>什么时间：即时（随时进行）</li><li>干什么事情：保存数据</li></ul><p>手动执行一次保存一次数据，产生在日志文件夹下的rdb文件(二进制)</p><p>save指令会阻塞当前redis服务器，线上环境不推荐使用。</p><h3 id="指令：bgsave">2.1.2 指令：bgsave</h3><ul><li>谁：redis操作者（用户）发起指令；redis服务器控制指令执行</li><li>什么时间：即时（发起）；合理的时间（执行）</li><li>干什么事情：保存数据</li></ul><pre><code>127.0.0.1:6379&gt; bgsaveBackground saving started</code></pre><p>原理：调用linux的fork函数生成子进程，由这个子进程负责创建rdb文件。</p><h3 id="自动执行">2.1.3 自动执行</h3><ul><li>谁：redis服务器发起指令（基于条件）</li><li>什么时间：满足条件</li><li>干什么事情：保存数据</li></ul><p>发起的还是bgsave</p><p>配置：</p><p><code>save second changes</code>：满足限定时间范围内key的变化数量达到指定数量即进行持久化。</p><p>示例：</p><pre class=" language-conf"><code class="language-conf">save 900 1save 300 10save 60 10000</code></pre><h3 id="其他启动方式">2.1.4 其他启动方式</h3><ol><li>全量复制</li><li>服务器运行过程中重启 <code>debug reload</code></li><li>关闭服务器时指定保存数据 <code>shutdown save</code></li></ol><h2 id="相关配置">2.2 相关配置</h2><ul><li><code>dbfilename dump.rdb</code><ul><li>说明：设置本地数据库文件名，默认值为 dump.rdb</li><li>经验：通常设置为dump-端口号.rdb</li></ul></li><li><code>dir</code><ul><li>说明：设置存储.rdb文件的路径</li><li>经验：通常设置成存储空间较大的目录中，目录名称data</li></ul></li><li><code>rdbcompression yes</code><ul><li>说明：<strong>设置存储至本地数据库时是否压缩数据</strong>，默认为 yes，采用 LZF 压缩</li><li>经验：通常默认为开启状态，如果设置为no，可以节省 CPU 运行时间，但会使存储的文件变大（巨大）</li></ul></li><li><code>rdbchecksum yes</code><ul><li>说明：<strong>设置是否进行RDB文件格式校验</strong>，该校验过程在写文件和读文件过程均进行</li><li>经验：通常默认为开启状态，如果设置为no，可以节约读写性过程约10%时间消耗，但是存储一定的数据损坏风险</li></ul></li><li><code>stop-writes-on-bgsave-error yes</code><ul><li>说明：后台存储过程中如果出现错误现象，是否停止保存操作</li><li>经验：通常默认为开启状态</li></ul></li></ul><h2 id="优点">2.3 优点</h2><ul><li>RDB是一个紧凑压缩的二进制文件，存储效率较高</li><li>RDB内部存储的是redis在某个时间点的数据快照，非常适合用于数据备份，全量复制等场景</li><li>RDB恢复数据的速度要比AOF快很多</li><li>应用：服务器中每X小时执行bgsave备份，并将RDB文件拷贝到远程机器中，用于灾难恢复。</li></ul><h2 id="缺点">2.4 缺点</h2><ul><li>RDB方式无论是执行指令还是利用配置，无法做到实时持久化，具有较大的可能性丢失数据</li><li>bgsave指令每次运行要执行fork操作创建子进程，要牺牲掉一些性能</li><li>Redis的众多版本中未进行RDB文件格式的版本统一，有可能出现各版本服务之间数据格式无法兼容现象</li></ul><h1 id="AOF">3 AOF</h1><h2 id="概述">3.1 概述</h2><p>AOF（append-only-file）:以独立日志的方式记录每次写命令，重启时再重新执行AOF文件中命令<br>达到恢复数据的目的。与RDB相比可以简单描述为<strong>改记录数据为记录数据产生的过程</strong></p><p>AOF的主要作用是解决了数据持久化的实时性，目前已经是Redis持久化的主流方式</p><p>这个文件是一个文本文件</p><h2 id="AOF写数据三种策略">3.2 AOF写数据三种策略</h2><ul><li>always（每次）<br>每次写入操作均同步到AOF文件中，数据零误差，性能较低，命令写入到aof_buf后，会调用系统fsync操作同步到文件中。  </li><li>everysec（每秒）<br>每秒将缓冲区中的指令同步到AOF文件中，数据准确性较高，性能较高，是默认配置。只调用系统write操作，fsync同步文件操作由专门进程每秒调用一次。<br>在系统突然宕机的情况下丢失1秒内的数据</li><li>no（系统控制）<br>由操作系统控制每次同步到AOF文件的周期，整体过程不可控，只调用系统write操作，不对AOF文件做fsync操作。</li></ul><h2 id="相关配置-1">3.3 相关配置</h2><ul><li><code>appendonly yes|no</code> 开启AOF</li><li><code>appendfsync always|everysec|no</code> 写数据策略</li></ul><h2 id="AOF重写">3.4 AOF重写</h2><p>随着命令不断写入AOF，文件会越来越大，为了解决这个问题，Redis引入了AOF重写机制压缩文件体积。AOF文件重写是将Redis进程内的数据转化为写命令同步到新AOF文件的过程。简单说就是将<strong>对同一个数据的若干个条命令执行结果转化成最终结果数据对应的指令</strong>进行记录。</p><h3 id="作用">3.4.1 作用</h3><ul><li>降低磁盘占用量，提高磁盘利用率</li><li>提高持久化效率，降低持久化写时间，提高IO性能</li><li>降低数据恢复用时，提高数据恢复效率</li></ul><h3 id="重写规则">3.4.2 重写规则</h3><ul><li>进程内已超时的数据不再写入文件</li><li>忽略无效指令，重写时使用进程内数据直接生成，这样新的AOF文件只保留最终数据的写入命令如del key1、hdel key2、srem key3、set key4 111、set key4 222等</li><li>对同一数据的多条写命令合并为一条命令，如<code>lpush list1 a</code>、<code>lpush list1 b</code>、 <code>lpush list1 c</code> 可以转化为：<code>lpush list1 a b c</code>。</li><li>为防止数据量过大造成客户端缓冲区溢出，对list、set、hash、zset等类型，每条指令最多写入64个元素</li></ul><h3 id="重写方式">3.4.3 重写方式</h3><p>手动重写：<code>bgrewriteaof</code></p><p>自动重写：</p><pre class=" language-conf"><code class="language-conf"># aof_current_size达到最小size开始重写auto-aof-rewrite-min-size size# (aof_current_size-aof_base_size)/aof_base_size>percentage开始重写auto-aof-rewrite-percentage percentage</code></pre><p>配置自动重写要了解两个参数：</p><pre><code>aof_current_sizeaof_base_size</code></pre><p><code>aof_current_size</code>表示当前AOF文件大小，<code>aof_base_size</code>指的就是上一次重写后AOF文件的大小。这两个参数可以通过运行指令<code>info Persistence</code>查看。</p><p>原理和bgsave类似，也是用子进程去重写。</p><h1 id="RDB与AOF区别">4 RDB与AOF区别</h1><table><thead><tr><th>持久化方式</th><th>RDB</th><th>AOF</th></tr></thead><tbody><tr><td>占用存储空间</td><td>小（数据级：压缩）</td><td>大（指令级：重写）</td></tr><tr><td>存储速度</td><td>慢</td><td>快</td></tr><tr><td>恢复速度</td><td>快</td><td>慢</td></tr><tr><td>数据安全性</td><td>会丢失数据</td><td>依据策略决定</td></tr><tr><td>资源消耗</td><td>高/重量级</td><td>低/轻量级</td></tr><tr><td>启动优先级</td><td>低</td><td>高</td></tr></tbody></table><p>如何选择？</p><ul><li>对数据非常敏感，建议使用默认的AOF持久化方案<ul><li>AOF持久化策略使用everysecond，每秒钟fsync一次。该策略redis仍可以保持很好的处理性能，当出现问题时，最多丢失0-1秒内的数据。</li><li>注意：由于AOF文件存储体积较大，且恢复速度较慢</li></ul></li><li>数据呈现阶段有效性，建议使用RDB持久化方案<ul><li>数据可以良好的做到阶段内无丢失（该阶段是开发者或运维人员手工维护的），且恢复速度较快，阶段点数据恢复通常采用RDB方案</li><li>注意：利用RDB实现紧凑的数据持久化会使Redis降的很低，慎重总结：</li></ul></li><li>综合比对<ul><li>RDB与AOF的选择实际上是在做一种权衡，每种都有利有弊</li><li>如不能承受数分钟以内的数据丢失，对业务数据非常敏感，选用AOF</li><li>如能承受数分钟以内的数据丢失，且追求大数据集的恢复速度，选用RDB</li><li>灾难恢复选用RDB</li><li>双保险策略，同时开启 RDB 和 AOF，重启后，Redis优先使用 AOF 来恢复数据，降低丢失数据的量</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;持久化简介&quot;&gt;1 持久化简介&lt;/h1&gt;&lt;p&gt;将内存中的数据隔段时间在硬盘中做备份，防止数据突然丢失&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快照方法 RDB&lt;/li&gt;
&lt;li&gt;日志方法 AOF&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;RDB&quot;&gt;2 RDB&lt;/h1&gt;&lt;h2 id=&quot;
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Redis" scheme="https://www.codetool.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>MySQL回顾-存储过程与触发器</title>
    <link href="https://www.codetool.top/article/MySQL%E5%9B%9E%E9%A1%BE-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E4%B8%8E%E8%A7%A6%E5%8F%91%E5%99%A8/"/>
    <id>https://www.codetool.top/article/MySQL回顾-存储过程与触发器/</id>
    <published>2020-03-02T12:04:21.000Z</published>
    <updated>2020-03-02T12:04:47.110Z</updated>
    
    <content type="html"><![CDATA[<h1 id="存储过程">1 存储过程</h1><h2 id="概述">1.1 概述</h2><p>存储过程是一组为了完成特定功能的 SQL 语句集合。使用存储过程的目的是将常用或复杂的工作预先用 SQL 语句写好并用一个指定名称存储起来，这个过程经编译和优化后存储在数据库服务器中，因此称为存储过程。当以后需要数据库提供与已定义好的存储过程的功能相同的服务时，只需调用“CALL存储过程名字”即可自动完成。</p><p>一个存储过程是一个可编程的函数，它在数据库中创建并保存，一般由 SQL 语句和一些特殊的控制结构组成。当希望在不同的应用程序或平台上执行相同的特定功能时，存储过程尤为合适。</p><h2 id="优点">1.2 优点</h2><p>存储过程通常有如下优点：</p><ol><li>封装性<br>存储过程被创建后，可以在程序中被多次调用，而不必重新编写该存储过程的 SQL 语句，并且数据库专业人员可以随时对存储过程进行修改，而不会影响到调用它的应用程序源代码。</li><li>可增强 SQL 语句的功能和灵活性<br>存储过程可以用流程控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。</li><li>可减少网络流量<br>由于存储过程是在服务器端运行的，且执行速度快，因此当客户计算机上调用该存储过程时，网络中传送的只是该调用语句，从而可降低网络负载。</li><li>高性能<br>存储过程执行一次后，产生的二进制代码就驻留在缓冲区，在以后的调用中，只需要从缓冲区中执行二进制代码即可，从而提高了系统的效率和性能。</li><li>提高数据库的安全性和数据的完整性<br>使用存储过程可以完成所有数据库操作，并且可以通过编程的方式控制数据库信息访问的权限。</li></ol><h2 id="编写">1.3 编写</h2><h3 id="基本的存储过程">1.3.1 基本的存储过程</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> productpricing<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">BEGIN</span>        <span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">as</span> priceaverage <span class="token keyword">FROM</span> products<span class="token punctuation">;</span>    <span class="token keyword">END</span><span class="token punctuation">;</span></code></pre><p>创建名为 productpricing 的储存过程。如果存储过程中需要传递参数，则将他们在括号中列举出来即可。括号必须有。<strong>BEGIN 和 END 关键字用来限制存储过程体。</strong>上述存储过程体本身是一个简单的 select 语句。注意这里只是创建存储过程并没有进行调用。</p><p>储存过程的使用：<br><code>Call productpring();</code></p><h3 id="使用参数的存储过程">1.3.2 使用参数的存储过程</h3><p>一般存储过程并不显示结果，而是把结果返回给你指定的变量上。</p><p>变量：内存中一个特定的位置，用来临时存储数据。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> prod<span class="token punctuation">(</span>    <span class="token keyword">OUT</span> pl <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">OUT</span> ph <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">OUT</span> pa <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token keyword">BEGIN</span>        <span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">INTO</span> pl <span class="token keyword">FROM</span> products<span class="token punctuation">;</span>        <span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">INTO</span> ph <span class="token keyword">FROM</span> products<span class="token punctuation">;</span>        <span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">INTO</span> pa <span class="token keyword">FROM</span> products<span class="token punctuation">;</span>    <span class="token keyword">END</span><span class="token punctuation">;</span></code></pre><p>关键字 OUT 指出相应的参数用来从存储过程传出一个值(返回给调用者)。</p><p>MySQL 支持 <strong>in(传递给存储过程)、out(从存储过程传出，这里所用)和 inout(对存储过程传入和传出)</strong>类型的参数。存储过程的代码位于 begin 和 end 语句内。他们是一系列 select 语句，用来检索值。然后<strong>保存到相对应的变量(通过 INTO 关键字)。</strong>存储过程的参数允许的数据类型与表中使用的类型相同。注意记录集是不被允许的类型，因此，不能通过一个参数返回多个行和列，这也是上面为什么要使用 3 个参数和 3 条 select语句的原因。</p><p>使用：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">call</span> <span class="token keyword">PROCEDURE</span><span class="token punctuation">(</span><span class="token variable">@pricelow</span><span class="token punctuation">,</span><span class="token variable">@pricehigh</span><span class="token punctuation">,</span><span class="token variable">@priceaverage</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token variable">@pricelow</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token variable">@pricehigh</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token variable">@pricelow</span><span class="token punctuation">,</span><span class="token variable">@pricehigh</span><span class="token punctuation">,</span><span class="token variable">@priceaverage</span><span class="token punctuation">;</span></code></pre><p>为调用此存储过程，必须指定 3 个变量名。如上所示。3 个参数是存储过程保存结果的 3 个变量的名字。调用时，语句并不显示任何数据，它返回以后可以显示的变量(或在其他处理中使用)。</p><p>注意：所有的 MySQL 变量都是以@开头。</p><p>使用IN的示例：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> ordertotal<span class="token punctuation">(</span>    <span class="token operator">IN</span> innumber <span class="token keyword">int</span><span class="token punctuation">,</span>    <span class="token keyword">OUT</span> outtotal <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token keyword">BEGIN</span>        <span class="token keyword">SELECT</span> <span class="token function">Sum</span><span class="token punctuation">(</span>item_price <span class="token operator">*</span> quantity<span class="token punctuation">)</span> <span class="token keyword">FROM</span> orderitems <span class="token keyword">WHERE</span> order_num <span class="token operator">=</span>        innumber <span class="token keyword">INTO</span> outtotal<span class="token punctuation">;</span>    <span class="token keyword">END</span><span class="token punctuation">;</span> <span class="token keyword">CALL</span> ordertotal<span class="token punctuation">(</span><span class="token number">20005</span><span class="token punctuation">,</span><span class="token variable">@total</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token variable">@total</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 得到 20005 订单的合计</span><span class="token keyword">CALL</span> ordertotal<span class="token punctuation">(</span><span class="token number">20009</span><span class="token punctuation">,</span><span class="token variable">@total</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token variable">@total</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//得到 20009 订单的合计</span></code></pre><h3 id="带有控制语句的存储过程">1.3.3 带有控制语句的存储过程</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> ordertotal<span class="token punctuation">(</span>    <span class="token operator">IN</span> onumber <span class="token keyword">INT</span><span class="token punctuation">,</span>    <span class="token operator">IN</span> taxable <span class="token keyword">BOOLEAN</span><span class="token punctuation">,</span>    <span class="token keyword">OUT</span> ototal <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'Obtain order total, optionally adding tax'</span>    <span class="token keyword">BEGIN</span>        <span class="token comment" spellcheck="true">-- declear variable for total</span>        <span class="token keyword">DECLARE</span> total <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">-- declear tax percentage</span>        <span class="token keyword">DECLARE</span> taxrate <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">6</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">-- get the order total</span>        <span class="token keyword">SELECT</span> <span class="token function">Sum</span><span class="token punctuation">(</span>item_price <span class="token operator">*</span> quantity<span class="token punctuation">)</span> <span class="token keyword">FROM</span> orderitems <span class="token keyword">WHERE</span> order_num <span class="token operator">=</span>        onumber <span class="token keyword">INTO</span> total<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">-- IS this taxable?</span>        <span class="token keyword">IF</span> taxable <span class="token keyword">THEN</span>            <span class="token comment" spellcheck="true">-- yes ,so add taxrate to the total</span>            <span class="token keyword">SELECT</span> total<span class="token operator">+</span><span class="token punctuation">(</span>total<span class="token operator">/</span><span class="token number">100</span><span class="token operator">*</span>taxrate<span class="token punctuation">)</span><span class="token keyword">INTO</span> total<span class="token punctuation">;</span>        <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">-- finally ,save to out variable</span>        <span class="token keyword">SELECT</span> total <span class="token keyword">INTO</span> ototal<span class="token punctuation">;</span>    <span class="token keyword">END</span><span class="token punctuation">;</span></code></pre><p>在存储过程中我们使用了 DECLARE 语句，他们表示定义两个局部变量，DECLARE 要求指定变量名和数据类型。它也支持可选的默认值(taxrate 默认 6%)，因为后期我们还要判断要不要增加税，所以，我们把 SELECT 查询的结果存储到局部变量 total 中，然后在 IF 和 THEN 的配合下，检查 taxable 是否为真，然后在真的情况下，我们利用另一条 SELECT 语句增加营业税到局部变量 total 中，然后我们再利用 SELECT 语句将 total(增加税或者不增加税的结果)保存到总的 ototal 中。</p><p>上面的 COMMENT 关键字可以给出或者不给出，如果给出，将在 <code>SHOW PROCEDURE STATUS</code> 的结果中显示。</p><h2 id="修改存储过程">1.4 修改存储过程</h2><p>MySQL 中修改存储过程的语法格式如下：</p><p><code>ALTER PROCEDURE 存储过程名 [ 特征 ... ]</code></p><p>特征指定了存储过程的特性，可能的取值有：</p><ul><li><code>CONTAINS SQL</code> 表示子程序包含 SQL 语句，但不包含读或写数据的语句。</li><li><code>NO SQL</code> 表示子程序中不包含 SQL 语句。</li><li><code>READS SQL DATA</code> 表示子程序中包含读数据的语句。</li><li><code>MODIFIES SQL DATA</code> 表示子程序中包含写数据的语句。</li><li><code>SQL SECURITY { DEFINER |INVOKER }</code> 指明谁有权限来执行。<ul><li><code>DEFINER</code> 表示只有定义者自己才能够执行。</li><li><code>INVOKER</code> 表示调用者可以执行。</li></ul></li><li><code>COMMENT &#39;string&#39;</code> 表示注释信息。</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">PROCEDURE</span> showstuscore <span class="token keyword">MODIFIES SQL DATA</span> SQL SECURITY <span class="token keyword">INVOKER</span><span class="token punctuation">;</span></code></pre><p>提示：<code>ALTER PROCEDURE</code> 语句用于修改存储过程的某些特征。如果要修改存储过程的内容，可以先删除原存储过程，再以相同的命名创建新的存储过程；如果要修改存储过程的名称，可以先删除原存储过程，再以不同的命名创建新的存储过程。</p><h2 id="删除存储过程">1.5 删除存储过程</h2><p>MySQL 中使用 <code>DROP PROCEDURE</code> 语句来删除数据库中已经存在的存储过程。语法格式如下：</p><p><code>DROP { PROCEDURE | FUNCTION } [ IF EXISTS ] &lt;过程名&gt;</code></p><p>IF EXISTS：指定这个关键字用于防止因删除不存在的存储过程而引发的错误。</p><h1 id="触发器">2 触发器</h1><h2 id="概述-1">2.1 概述</h2><p>MySQL 数据库中触发器是一个特殊的存储过程，不同的是执行存储过程要使用 CALL 语句来调用，而触发器的执行不需要使用 CALL 语句来调用，也不需要手工启动，只要一个预定义的事件发生就会被 MySQL自动调用。</p><p>触发程序的优点如下：</p><ul><li>触发程序的执行是自动的，当对触发程序相关表的数据做出相应的修改后立即执行。</li><li>触发程序可以通过数据库中相关的表层叠修改另外的表。</li><li>触发程序可以实施比 <code>FOREIGN KEY</code> 约束、<code>CHECK</code> 约束更为复杂的检查和操作。</li></ul><p>在 MySQL 中，只有执行 <code>INSERT</code>、<code>UPDATE</code> 和 <code>DELETE</code> 操作时才能激活触发器。</p><h2 id="创建触发器">2.2 创建触发器</h2><p>在创建触发器时，需要给出 4 条语句（规则）：</p><ol><li>唯一的触发器名；</li><li>触发器关联的表；</li><li>触发器应该响应的活动；</li><li>触发器何时执行(处理之前或者之后)</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> newproduct <span class="token keyword">AFTER</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> products <span class="token keyword">FOR EACH ROW</span> <span class="token keyword">SELECT</span><span class="token string">'Product added'</span> <span class="token keyword">INTO</span> <span class="token variable">@info</span><span class="token punctuation">;</span></code></pre><p>CREATE TRIGGER 用来创建名为 newproduct 的新触发器。触发器可以在一个操作发生前或<br>者发生后执行，这里 AFTER INSERT 是指此触发器在 INSERT 语句成功执行后执行。这个触<br>发器还指定 FOR EACH ROW ， 因此代码对每个插入行都会执行。文本 Product added 将<br>对每个插入的行显示一次</p><h2 id="INSERT-触发器">2.3 INSERT 触发器</h2><p>是在 insert 语句执行之前或者执行之后被执行的触发器。</p><ol><li>在 insert 触发器代码中，可引入一个名为 new 的虚拟表，访问被插入的行（普通插入语句之后也存在这个表）</li><li><strong>在 before insert 触发器中，new 中的值也可以被更新(允许更改被插入的值)</strong></li><li>对于 auto_increment 列，new 在 insert 执行之前包含 0，在 insert 执行之后包含新的自动生成值</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> neworder <span class="token keyword">AFTER</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> orders <span class="token keyword">FOR EACH ROW</span> <span class="token keyword">SELECT</span>NEW<span class="token punctuation">.</span>order_num<span class="token punctuation">;</span></code></pre><p>该语句创建一个名为 neworder 的触发器，按照 <code>AFTER INSERT ON orders</code> 执行。在插入一个新订单到 orders 表时，MySQL 生成一个新的订单号并保存到 order_num 中。触发器从NEW.order_num 取得这个值并返回它。此触发器必须按照 AFTER INSERT 执行，<strong>因为在BEFORE INSERT 语句执行之前，新 order_num 还没有生成。</strong> 对于 orders 的每次插入使用这个触发器总是返回新的订单号。</p><h2 id="DELETE-触发器">2.4 DELETE 触发器</h2><p>Delete 触发器在 delete 语句执行之前或者之后执行。</p><ol><li>在 delete 触发器的代码内,可以引用一个名为 OLD 的虚拟表，用来访问被删除的行。</li><li>OLD 中的值全为只读，不能更新。</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> deleteorder BEFORE <span class="token keyword">DELETE</span> <span class="token keyword">ON</span> orders <span class="token keyword">FOR EACH ROW</span><span class="token keyword">BEGIN</span>    <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> archive_orders<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span>order_date<span class="token punctuation">,</span>cust_id<span class="token punctuation">)</span> <span class="token keyword">values</span>    <span class="token punctuation">(</span>OLD<span class="token punctuation">.</span>order_num<span class="token punctuation">,</span>OLD<span class="token punctuation">.</span>order_date<span class="token punctuation">,</span>OLD<span class="token punctuation">.</span>cust_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span></code></pre><p>在任意订单被删除前将执行此触发器，它使用一条 INSERT 语句将 OLD 中的值(要被删除的订单) 保存到一个名为 archive_orders 的存档表中(为实际使用这个例子，我们需要用与orders 相同的列创建一个名为 archive_orders 的表)</p><p><strong>使用 BEFORE DELETE 触发器的优点(相对于 AFTER DELETE 触发器来说)为，如果由于某种原因，订单不能存档，delete 本身将被放弃。</strong></p><p>我们在这个触发器使用了 BEGIN 和 END 语句标记触发器体。这在此例子中并不是必须的，只是为了说明使用BEGIN END 块的好处是触发器能够容纳多条SQL 语句(在BEGIN END块中一条挨着一条)。</p><h2 id="UPDATE-触发器">2.5 UPDATE 触发器</h2><p>在 update 语句执行之前或者之后执行</p><ol><li>在 update 触发器的代码内,可以引用一个名为 OLD 的虚拟表，用来访问以前(UPDATE 语句之前)的值，引用一个名为 NEW 的虚拟表访问新更新的值。</li><li>在 BEFORE UPDATE 触发器中，NEW 中的值可能也被用于更新(允许更改将要用于 UPDATE语句中的值)</li><li>OLD 中的值全为只读，不能更新。</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> updatevendor BEFORE <span class="token keyword">UPDATE</span> <span class="token keyword">ON</span> vendors <span class="token keyword">FOR EACH ROW</span> <span class="token keyword">SET</span>NEW<span class="token punctuation">.</span>vend_state <span class="token operator">=</span> Upper<span class="token punctuation">(</span>NEW<span class="token punctuation">.</span>vemd_state<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>保证州名缩写总是大写(不管 UPFATE 语句中是否给出了大写)，每次更新一行时，NEW.vend_state 中的值(将用来更新表行的值)都用 Upper(NEW.vend_state)替换。</p><h2 id="总结">2.6 总结</h2><ol><li>与其他 DBMS 相比，MySQL 5 中支持的触发器相当初级，未来的 MySQL 版本中估计会存在一些改进和增强触发器的支持。</li><li>通常 before 用于数据的验证和净化(为了保证插入表中的数据确实是需要的数据) 也适用于 update 触发器。</li><li>创建触发器可能需要特殊的安全访问权限，但是触发器的执行时自动的，如果 insert，update，或者 delete 语句能够执行，则相关的触发器也能执行。</li><li>用触发器来保证数据的一致性(大小写，格式等)。在触发器中执行这种类型的处理的优点就是它总是进行这种处理，而且透明的进行，与客户机应用无关。</li><li>触发器的一种非常有意义的使用就是创建审计跟踪。使用触发器，把更改(如果需要，甚至还有之前和之后的状态)记录到另外一个表是非常容易的。</li><li>MySQL 触发器不支持 call 语句，无法从触发器内调用存储过程。</li></ol><p>总体来说，触发器使用的过程中，MySQL 会按照以下方式来处理错误。</p><p>若对于事务性表，如果触发程序失败，以及由此导致的整个语句失败，那么该语句所执行的所有更改将回滚；对于非事务性表，则不能执行此类回滚，即使语句失败，失败之前所做的任何更改依然有效。</p><p>若 BEFORE 触发程序失败，则 MySQL 将不执行相应行上的操作。</p><p>若在 BEFORE 或 AFTER 触发程序的执行过程中出现错误，则将导致调用触发程序的整个语句失败。</p><p>仅当 BEFORE 触发程序和行操作均已被成功执行，MySQL 才会执行AFTER触发程序。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;存储过程&quot;&gt;1 存储过程&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;1.1 概述&lt;/h2&gt;&lt;p&gt;存储过程是一组为了完成特定功能的 SQL 语句集合。使用存储过程的目的是将常用或复杂的工作预先用 SQL 语句写好并用一个指定名称存储起来，这个过程经编译和优化后存储在数据库服务
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="数据库" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://www.codetool.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL回顾-约束、常用函数和视图</title>
    <link href="https://www.codetool.top/article/MySQL%E5%9B%9E%E9%A1%BE-%E7%BA%A6%E6%9D%9F%E3%80%81%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%92%8C%E8%A7%86%E5%9B%BE/"/>
    <id>https://www.codetool.top/article/MySQL回顾-约束、常用函数和视图/</id>
    <published>2020-03-02T10:35:41.000Z</published>
    <updated>2020-03-02T15:04:04.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="约束">1 约束</h1><ul><li>主键约束：不允许重复记录，避免数据冗余</li><li>外键约束：保证本事务所关联的其他事务是存在的（主键表中的这个字段）<ul><li>实际开发中通常不使用外键约束，影响效率。</li></ul></li><li>check约束：限制值在某一个范围之内</li><li>default约束： 确定默认值( 可以更改) 保证事务的某个属性一定会有一个值</li><li>unique约束：唯一键，不可重复，但允许为空<ul><li>unique 和 not null 可以组合使用，顺序任意。</li><li>主键和唯一键的关系：不要用业务逻辑字段当做主键，应添加一个没有任何实际意义的字段（代理主键）当做主键。</li></ul></li><li>not null约束 要求用户必须为该字段赋一个值，否则出错</li></ul><h1 id="MySQL常用函数">2 MySQL常用函数</h1><h2 id="文本处理函数">2.1 文本处理函数</h2><ul><li><code>LEFT(x,len)</code> 返回串左边指定长度的字串（长度为 len）</li><li><code>RIGHT(x,len)</code> 返回串右边指定长度的字串（长度为 len）</li><li><code>LENGTH(x)/CHAR_LENGTH(str)</code> – 返回串的长度</li><li><code>LOCATE(x,sub_x)</code> – 找出串的一个子串</li><li><code>SUBSTRING(x, from, to)</code> 返回子字符串</li><li><code>LOWER(x)</code> 全部转小写</li><li><code>UPPER(x)</code> 全部转大写</li><li><code>LTRIM(x)</code> 左边所有的空格被删除</li><li><code>RTRIM(x)</code> 右边所有的空格被删除</li><li><code>TRIM(x)</code> 删除两边的空格</li><li><code>CONCAT(s1,s2…sn)</code> 字符串 s1,s2 等多个字符串合并为一个字符串</li></ul><h2 id="日期时间处理函数">2.2 日期时间处理函数</h2><ul><li><code>CURDATE()</code>/<code>CURRENT_DATE()</code> 返回当前日期，格式<code>2019-02-19</code></li><li><code>CURTIME()</code>/<code>CURRENT_TIME()</code> 返回当前时间，格式<code>11:40:45</code></li><li><code>CURRENT_TIMESTAMP()</code> 返回当前日期和时间，格式<code>2019-02-19 11:41:32</code></li><li><code>ADDDATE(d,n)</code> 计算起始日期 d 加上 n 天的日期</li><li><code>ADDTIME(t,n)</code> 时间 t 加上 n 秒的时间</li><li><code>DATE(str)</code> 从日期或日期时间表达式中提取日期值</li><li><code>DAY(d)</code> 返回日期值 d 的日期部分，也可以使用<code>EXTRACT(type FROM d)</code> type可以取MONTH,DAY,HOUR,MINUTE等</li><li><code>DATEDIFF(d1,d2)</code> 计算日期d1-&gt;d2之间相隔的天数</li><li><code>DATE_FORMAT(d,f)</code> DATE_FORMAT按表达式 f的要求显示日期 d</li><li><code>DAYOFMONTH(d)</code> 计算日期 d 是本月的第几天</li><li><code>DAYOFWEEK(d)</code> 日期 d 今天是星期几，1 星期日，2 星期一，以此类推</li><li><code>DAYOFYEAR(d)</code> 计算日期 d 是本年的第几天</li><li><code>UNIX_TIMESTAMP()</code> 得到时间戳</li><li><code>FROM_UNIXTIME()</code> 时间戳转日期</li></ul><h2 id="数值处理函数">2.3 数值处理函数</h2><ul><li><code>ABS(x)</code> 返回绝对值</li><li><code>AVG(expression)</code> 返回一个表达式的平均值，expression是一个字段</li><li><code>EXP(x)</code> 返回e的x次方</li><li><code>CEIL(x)</code>/<code>FLOOR(x)</code> 向上取整、向下取整</li><li><code>MOD()</code>（取余）</li><li><code>PI()</code> 圆周率</li><li><code>RAND()</code> 返回0到1的随机数</li><li><code>SQRT(x)</code> 返回x的平方根</li><li><code>ROUND(x)</code> 返回离 x 最近的整数</li></ul><h1 id="视图">3 视图</h1><p>视图是虚拟的表，与包含数据的表不同，视图只包含使用时动态检索数据的查询,主要是用于查询。</p><h2 id="为什么使用视图">3.1 为什么使用视图</h2><ul><li>重用 sql 语句</li><li>简化复杂的 sql 操作，在编写查询后，可以方便地重用它而不必知道他的基本查询细节。</li><li>使用表的组成部分而不是整个表。</li><li>保护数据。可以给用户授予表的特定部分的访问权限而不是整个表的访问权限。</li><li>更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。</li></ul><p>注意：</p><ul><li>在视图创建之后，可以用与表基本相同的方式利用它们。可以对视图执行 select 操作，过滤和排序数据，将视图联结到其他视图或表，甚至能添加和更新数据。</li><li>重要的是知道视图仅仅是用来查看存储在别处的数据的一种设施。视图本身不包含数据，因此它们返回的数据时从其他表中检索出来的。在添加和更改这些表中的数据时，视图将返回改变过的数据。</li><li>因为视图不包含数据，所以每次使用视图时，都必须处理查询执行时所需的任一检索。如果你使用多个连接和过滤创建了复杂的视图或者嵌套了视图，可能会发现性能下降得很厉害。因此，在部署使用了大量视图的应用前，应该进行测试。</li></ul><h2 id="视图的规则和限制">3.2 视图的规则和限制</h2><ul><li>与表一样，视图必须唯一命名；</li><li>可以创建任意多的视图；</li><li>为了创建视图，必须具有足够的访问权限。这些限制通常由数据库管理人员授予。</li><li>视图可以嵌套，可以利用从其他视图中检索数据的查询来构造一个视图。</li><li>Order by 可以在视图中使用，但如果从该视图检索数据 select 中也是含有 order by，那么该视图的 order by 将被覆盖。</li><li>视图不能索引，也不能有关联的触发器或默认值</li><li>视图可以和表一起使用 </li></ul><h2 id="视图操作的SQL语句">3.3 视图操作的SQL语句</h2><ul><li>利用 <code>create view view_name as 查询语句</code> 语句来进行创建视图</li><li>使用 <code>show create view view_name</code> 来查看创建视图的语句</li><li>用 <code>drop view view_name</code> 来删除视图</li><li>更新视图可以先 drop 再 create，也可以使用 <code>create or replace view_name as ...</code>。</li></ul><h2 id="视图的更新">3.4 视图的更新</h2><p>视图是否可以更新，要视情况而定。</p><p>通常情况下视图是可以更新的，可以对他们进行 insert，update 和 delete。更新视图就是更新其基表(视图本身没有数据)。如果你对视图进行增加或者删除行，实际上就是对基表进行增加或者删除行。</p><p>但是，如果 MySQL 不能正确的确定更新的基表数据，则不允许更新(包括插入和删除)，这<br>就意味着视图中如果存在以下操作则不能对视图进行更新：</p><ol><li>分组(使用 group by 和having )</li><li>联结</li><li>子查询</li><li>并</li><li>聚集函数</li><li>dictinct</li><li>导出(计算)列</li></ol><p>不推荐更改视图，会使得业务逻辑混淆。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;约束&quot;&gt;1 约束&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;主键约束：不允许重复记录，避免数据冗余&lt;/li&gt;
&lt;li&gt;外键约束：保证本事务所关联的其他事务是存在的（主键表中的这个字段）&lt;ul&gt;
&lt;li&gt;实际开发中通常不使用外键约束，影响效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="数据库" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://www.codetool.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>leetcode35-搜索插入位置</title>
    <link href="https://www.codetool.top/article/leetcode35-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/"/>
    <id>https://www.codetool.top/article/leetcode35-搜索插入位置/</id>
    <published>2020-03-01T17:09:30.000Z</published>
    <updated>2020-03-01T17:11:17.677Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。</p><p>你可以假设数组中无重复元素。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> [1,3,5,6], 5<br><strong>输出:</strong> 2</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> [1,3,5,6], 2<br><strong>输出:</strong> 1</p></blockquote><p><strong>示例 3:</strong></p><blockquote><p><strong>输入:</strong> [1,3,5,6], 7<br><strong>输出:</strong> 4</p></blockquote><p><strong>示例 4:</strong></p><blockquote><p><strong>输入:</strong> [1,3,5,6], 0<br><strong>输出:</strong> 0</p></blockquote><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>二分查找</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">searchInsert</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> mid<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            mid <span class="token operator">=</span> <span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token keyword">return</span> mid<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> left <span class="token operator">=</span> mid<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> right <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token operator">>=</span>target<span class="token punctuation">)</span> <span class="token keyword">return</span> left<span class="token punctuation">;</span>        <span class="token keyword">return</span> left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。&lt;/p&gt;
&lt;p&gt;你可以假设数组中无重复元素。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="二分查找" scheme="https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>Redis通用指令和Jedis使用</title>
    <link href="https://www.codetool.top/article/Redis%E9%80%9A%E7%94%A8%E6%8C%87%E4%BB%A4%E5%92%8CJedis%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.codetool.top/article/Redis通用指令和Jedis使用/</id>
    <published>2020-03-01T15:48:46.000Z</published>
    <updated>2020-03-02T14:59:11.948Z</updated>
    
    <content type="html"><![CDATA[<h1 id="key通用指令">1 key通用指令</h1><p>常用操作</p><ul><li><code>del key</code> 删除指定key</li><li><code>exists key</code> 获取key是否存在</li><li><code>type key</code> 获取key的类型</li></ul><p>key 时效性控制</p><ul><li><p><code>expire key seconds</code> 设置过期时间</p></li><li><p><code>pexpire key milliseconds</code> （毫秒版）</p></li><li><p><code>expireat key timestamp</code>（使用时间戳版）</p></li><li><p><code>pexpireat key milliseconds-timestamp</code> </p></li><li><p><code>ttl key</code> 获取过期时间（不存在返回-2，永久返回-1）</p></li><li><p><code>pttl key</code> （毫秒版）</p></li><li><p><code>persist key</code> 将key从时效性转换为永久性</p></li></ul><p>key 查询操作</p><ul><li><code>keys pattern</code>：查询符合条件的所有key，pattern的规则：<ul><li><code>*</code>匹配任意数量的任意符号</li><li><code>?</code>匹配一个任意符号</li><li><code>[]</code>匹配括号内的任意一个符号</li></ul></li></ul><p>key 其他操作</p><ul><li><p><code>renane key newkey</code> 重命名key</p></li><li><p><code>renamenx key newkey</code> 如果新名字不存在才会重命名</p></li><li><p><code>sort</code> 对集合中所有value排序，只能排list或set</p></li></ul><h1 id="数据库通用操作">2 数据库通用操作</h1><p>redis为每个服务提供有16个数据库，编号从0到15，每个数据库之间的数据相互独立</p><ul><li><p><code>select index</code> 切换数据库</p></li><li><p><code>move key db</code> 将某个键移入其他数据库中</p></li><li><p><code>dbsize</code> 当前db键的个数</p></li><li><p><code>flushdb</code> 清空当前数据库</p></li><li><p><code>flushall</code> 清空所有数据库</p></li></ul><h1 id="Jedis">3 Jedis</h1><h2 id="基本使用">3.1 基本使用</h2><p>方法名和指令名一致。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.连接redis</span>Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.操作redis</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"rhett"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String name <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意方法的返回值</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1.连接redis</span>Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2.操作redis</span><span class="token comment" spellcheck="true">//字符串</span>jedis<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"rhett"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String name <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//list</span>jedis<span class="token punctuation">.</span><span class="token function">lpush</span><span class="token punctuation">(</span><span class="token string">"list1"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"c"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">rpush</span><span class="token punctuation">(</span><span class="token string">"list1"</span><span class="token punctuation">,</span><span class="token string">"d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> list1 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">lrange</span><span class="token punctuation">(</span><span class="token string">"list1"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//set</span>jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"hash1"</span><span class="token punctuation">,</span><span class="token string">"a1"</span><span class="token punctuation">,</span><span class="token string">"a1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"hash1"</span><span class="token punctuation">,</span><span class="token string">"a2"</span><span class="token punctuation">,</span><span class="token string">"a2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">hset</span><span class="token punctuation">(</span><span class="token string">"hash1"</span><span class="token punctuation">,</span><span class="token string">"a3"</span><span class="token punctuation">,</span><span class="token string">"a3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//hash</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> hash1 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">hgetAll</span><span class="token punctuation">(</span><span class="token string">"hash1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hash1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> keys <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>keys<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//set</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"set1"</span><span class="token punctuation">,</span><span class="token string">"50"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"set1"</span><span class="token punctuation">,</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">sadd</span><span class="token punctuation">(</span><span class="token string">"set1"</span><span class="token punctuation">,</span><span class="token string">"30"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set1 <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">smembers</span><span class="token punctuation">(</span><span class="token string">"set1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set1<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>e<span class="token operator">-</span><span class="token operator">></span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//3.关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>incr</code>操作返回的是Long</p><h2 id="连接池">3.2 连接池</h2><p><code>JedisPool</code>:Jedis提供的连接池技术</p><p>基于连接池的工厂类的编写：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JedisUtils</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> JedisPool jp <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String host<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> maxTotal<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> maxIdle<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        ResourceBundle rb <span class="token operator">=</span> ResourceBundle<span class="token punctuation">.</span><span class="token function">getBundle</span><span class="token punctuation">(</span><span class="token string">"redis"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        host <span class="token operator">=</span> rb<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"redis.host"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        port <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"redis.port"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        maxTotal <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"redis.maxTotal"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        maxIdle <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>rb<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"redis.maxIdle"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        JedisPoolConfig jpc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPoolConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jpc<span class="token punctuation">.</span><span class="token function">setMaxTotal</span><span class="token punctuation">(</span>maxTotal<span class="token punctuation">)</span><span class="token punctuation">;</span>        jpc<span class="token punctuation">.</span><span class="token function">setMaxIdle</span><span class="token punctuation">(</span>maxIdle<span class="token punctuation">)</span><span class="token punctuation">;</span>        jp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>jpc<span class="token punctuation">,</span>host<span class="token punctuation">,</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Jedis <span class="token function">getJedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> jp<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>redis.properties:</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">redis.host</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1</span><span class="token attr-name">redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span><span class="token attr-name">redis.maxTotal</span><span class="token punctuation">=</span><span class="token attr-value">30</span><span class="token attr-name">redis.maxIdle</span><span class="token punctuation">=</span><span class="token attr-value">10</span></code></pre><h1 id="Redis可视化管理工具">4 Redis可视化管理工具</h1><p>Redis Desktop Manager</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;key通用指令&quot;&gt;1 key通用指令&lt;/h1&gt;&lt;p&gt;常用操作&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;del key&lt;/code&gt; 删除指定key&lt;/li&gt;
&lt;li&gt;&lt;code&gt;exists key&lt;/code&gt; 获取key是否存在&lt;/li&gt;
&lt;li&gt;&lt;code&gt;t
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Redis" scheme="https://www.codetool.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯试题-翻硬币</title>
    <link href="https://www.codetool.top/article/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98-%E7%BF%BB%E7%A1%AC%E5%B8%81/"/>
    <id>https://www.codetool.top/article/蓝桥杯试题-翻硬币/</id>
    <published>2020-03-01T14:36:17.000Z</published>
    <updated>2020-03-01T14:39:44.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p><strong>资源限制</strong></p><p>时间限制：1.0s   内存限制：256.0MB</p><p><strong>问题描述</strong></p><p>小明正在玩一个“翻硬币”的游戏。</p><p>桌上放着排成一排的若干硬币。我们用 * 表示正面，用 o 表示反面（是小写字母，不是零）。</p><p>比如，可能情形是：<code>**oo***oooo</code></p><p>如果同时翻转左边的两个硬币，则变为：<code>oooo***oooo</code></p><p>现在小明的问题是：如果已知了初始状态和要达到的目标状态，每次只能同时翻转相邻的两个硬币,那么对特定的局面，最少要翻动多少次呢？</p><p>我们约定：把翻动相邻的两个硬币叫做一步操作，那么要求：</p><p><strong>输入格式</strong></p><p>两行等长的字符串，分别表示初始状态和要达到的目标状态。每行的长度&lt;1000</p><p><strong>输出格式</strong></p><p>一个整数，表示最小操作步数。</p><p><strong>样例输入1</strong></p><p><code>**********</code><br><code>o****o****</code></p><p><strong>样例输出1</strong></p><p>5</p><p><strong>样例输入2</strong></p><p><code>*o**o***o***</code><br><code>*o***o**o***</code></p><p><strong>样例输出2</strong></p><p>1</p><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>如果翻动的次数最少，一定是从左翻到右，这道题符合贪心法</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> source <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> target <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>source<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">!=</span>target<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'*'</span><span class="token punctuation">)</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'o'</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'o'</span><span class="token punctuation">)</span>source<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'*'</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'*'</span><span class="token punctuation">)</span>source<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'o'</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'o'</span><span class="token punctuation">)</span>source<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'*'</span><span class="token punctuation">;</span>                ans<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;资源限制&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;时间限制：1.0s   内存限制：256.0MB&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;小明正在玩一个“翻硬币”的游戏。&lt;/p&gt;
&lt;p&gt;桌上
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="贪心法" scheme="https://www.codetool.top/tags/%E8%B4%AA%E5%BF%83%E6%B3%95/"/>
    
      <category term="蓝桥杯" scheme="https://www.codetool.top/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯试题-哈夫曼树</title>
    <link href="https://www.codetool.top/article/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98-%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/"/>
    <id>https://www.codetool.top/article/蓝桥杯试题-哈夫曼树/</id>
    <published>2020-03-01T14:28:31.000Z</published>
    <updated>2020-03-01T14:32:29.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p><strong>Description</strong></p><p>Huffman树在编码中有着广泛的应用。在这里，我们只关心Huffman树的构造过程。</p><p>给出一列数{pi}={p0, p1, …, pn-1}，用这列数构造Huffman树的过程如下：</p><ol><li><p>找到{pi}中最小的两个数，设为pa和pb，将pa和pb从{pi}中删除掉，然后将它们的和加入到{pi}中。这个过程的费用记为pa+ pb。</p></li><li><p>重复步骤1，直到{pi}中只剩下一个数。</p></li></ol><p>在上面的操作过程中，把所有的费用相加，就得到了构造Huffman树的总费用。</p><p>本题任务：对于给定的一个数列，现在请你求出用该数列构造Huffman树的总费用。</p><p>例如，对于数列{pi}={5, 3, 8, 2, 9}，Huffman树的构造过程如下：</p><ol><li><p>找到{5, 3, 8, 2, 9}中最小的两个数，分别是2和3，从{pi}中删除它们并将和5加入，得到{5, 8, 9, 5}，费用为5。</p></li><li><p>找到{5, 8, 9, 5}中最小的两个数，分别是5和5，从{pi}中删除它们并将和10加入，得到{8, 9, 10}，费用为10。</p></li><li><p>找到{8, 9, 10}中最小的两个数，分别是8和9，从{pi}中删除它们并将和17加入，得到{10, 17}，费用为17。</p></li><li><p>找到{10, 17}中最小的两个数，分别是10和17，从{pi}中删除它们并将和27加入，得到{27}，费用为27。</p></li><li><p>现在，数列中只剩下一个数27，构造过程结束，总费用为5+10+17+27=59。</p></li></ol><p><strong>Input</strong></p><p>输入的第一行包含一个正整数n（n&lt;=100）。</p><p>接下来是n个正整数，表示p0, p1, …, pn-1，每个数不超过1000。</p><p><strong>Output</strong></p><p>输出用这些数构造Huffman树的总费用。</p><p><strong>Sample Input 1</strong></p><blockquote><p>5<br>5 3 8 2 9</p></blockquote><p><strong>Sample Output 1</strong></p><blockquote><p>59</p></blockquote><p><strong>Hint</strong></p><blockquote><p>HINT:时间限制：1.0s 内存限制：512.0MB</p></blockquote><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>用一个最小堆，每次弹出两个两个最小数然后把和再放入堆中。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>count<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> cost <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> cost<span class="token punctuation">;</span>            queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Huffman树在编码中有着广泛的应用。在这里，我们只关心Huffman树的构造过程。&lt;/p&gt;
&lt;p&gt;给出一列数{pi}={p0, p1, …, pn-1}，用
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="堆" scheme="https://www.codetool.top/tags/%E5%A0%86/"/>
    
      <category term="蓝桥杯" scheme="https://www.codetool.top/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>leetcode99-恢复二叉搜索树</title>
    <link href="https://www.codetool.top/article/leetcode99-%E6%81%A2%E5%A4%8D%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <id>https://www.codetool.top/article/leetcode99-恢复二叉搜索树/</id>
    <published>2020-03-01T08:33:53.000Z</published>
    <updated>2020-03-01T09:16:59.194Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>二叉搜索树中的两个节点被错误地交换。</p><p>请在不改变其结构的情况下，恢复这棵树。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> [1,3,null,null,2]   </p><p>&nbsp;&nbsp;&nbsp;1<br>&nbsp;&nbsp;/<br>&nbsp;3<br>&nbsp;&nbsp;\<br>&nbsp;&nbsp;&nbsp;2  </p><p><strong>输出:</strong> [3,1,null,null,2]</p><p>&nbsp;&nbsp;&nbsp;3<br>&nbsp;&nbsp;/<br>&nbsp;1<br>&nbsp;&nbsp;\<br>&nbsp;&nbsp;&nbsp;2  </p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> [3,1,4,null,null,2]  </p><p>&nbsp;&nbsp;3<br>&nbsp;/&nbsp;\<br>1&nbsp;&nbsp;&nbsp;4<br>&nbsp;&nbsp;&nbsp;/<br>&nbsp;&nbsp;2  </p><p><strong>输出:</strong> [2,1,4,null,null,3]  </p><p>&nbsp;&nbsp;2<br>&nbsp;/&nbsp;\<br>1&nbsp;&nbsp;&nbsp;4<br>&nbsp;&nbsp;&nbsp;/<br>&nbsp;&nbsp;3  </p></blockquote><p><strong>进阶:</strong></p><ul><li>使用 O(<em>n</em>) 空间复杂度的解法很容易实现。</li><li>你能想出一个只使用常数空间的解决方案吗？</li></ul><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>这道题可以使用中序遍历得到一个序列，这个序列的特征是一个有序序列中的两个元素被交换了，那么问题就变成如何找到这两个元素。</p><p>看一个例子： <code>1 2 8 6 7 4 9</code> ，有序序列中的两个元素被交换了一定会造成一个较大的元素交换到了前面(8)，一个较小的元素交换到了后面(4)，体现在序列中就是两个异常的情况：6比8小，4比7小。所以可以判断：第一次出现的某节点比前驱节点的值要小的情况，前驱节点就是一个被交换了的节点，而第二次出现的某节点比前驱节点的值要小的情况，该节点就是第二个被交换了的节点。</p><p>而还有一种可能是，两个连续的元素被交换了，如：<code>1 3 2 4</code>，出现的情况就是只出现一次某节点比前驱节点的值要小的情况，那么两个被交换的节点就分别是当前节点(2)和其前驱节点(3)。</p><p>找到了这两个节点，就可以使用值交换将二叉搜索树恢复回来。</p><h2 id="代码">2.2 代码</h2><p>递归中序遍历：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    TreeNode pred<span class="token punctuation">;</span>    TreeNode former<span class="token punctuation">,</span>latter<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recoverTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">recurTree</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cache <span class="token operator">=</span> former<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        former<span class="token punctuation">.</span>val <span class="token operator">=</span> latter<span class="token punctuation">.</span>val<span class="token punctuation">;</span>        latter<span class="token punctuation">.</span>val <span class="token operator">=</span> cache<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recurTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token function">recurTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pred <span class="token operator">==</span> null<span class="token punctuation">)</span> pred <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>val <span class="token operator">&lt;</span> pred<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>former <span class="token operator">==</span> null<span class="token punctuation">)</span> former <span class="token operator">=</span> pred<span class="token punctuation">;</span>            latter <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        pred <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token function">recurTree</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;二叉搜索树中的两个节点被错误地交换。&lt;/p&gt;
&lt;p&gt;请在不改变其结构的情况下，恢复这棵树。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt;
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="搜索树" scheme="https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer46-把数字翻译成字符串</title>
    <link href="https://www.codetool.top/article/%E5%89%91%E6%8C%87offer46-%E6%8A%8A%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://www.codetool.top/article/剑指offer46-把数字翻译成字符串/</id>
    <published>2020-02-29T15:55:26.000Z</published>
    <updated>2020-02-29T16:05:26.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入：</strong> 12258<br><strong>输出：</strong> 5<br><strong>解释：</strong> 12258有5种不同的翻译，分别是”bccfi”, “bwfi”, “bczi”, “mcfi”和”mzi”  </p></blockquote><p><strong>提示:</strong></p><ul><li>0 &lt;= num &lt; 2<sup>31</sup></li></ul><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>动态规划：</p><p>可以使用<a href="../leetcode70-爬楼梯/">leetcode70-爬楼梯</a>的思想，每次翻译一位数看成跳一步，翻译两位数看成跳两步，那么对于任意要跳的一个位置来说，例如<code>12258</code>中的8，由于最后两位是58不能翻译，也就是只能由<code>1225</code>跳过来，此时<code>f(12258)==f(1225)</code>，而对于<code>1225</code>，由于最后两位是25可以翻译，所以可以从<code>12</code>跳过来，也可以从<code>122</code>跳过来，此时<code>f(1225) == f(12)+f(122)</code>。将这两种情况一般化就能得出结论：</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">translateNum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//去除最后一位数的last</span>        <span class="token keyword">int</span> last <span class="token operator">=</span> num<span class="token operator">/=</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//计算出最后两位数的大小</span>        left <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">*</span><span class="token punctuation">(</span>num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">+</span>left<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//去除最后两位数的lastOfLast</span>        <span class="token keyword">int</span> lastOfLast <span class="token operator">=</span> num <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>left<span class="token operator">></span><span class="token number">25</span><span class="token operator">||</span>left<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">translateNum</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">translateNum</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">translateNum</span><span class="token punctuation">(</span>lastOfLast<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。&lt;
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="https://www.codetool.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
      <category term="剑指offer" scheme="https://www.codetool.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>Redis概述和使用</title>
    <link href="https://www.codetool.top/article/Redis%E6%A6%82%E8%BF%B0%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.codetool.top/article/Redis概述和使用/</id>
    <published>2020-02-29T14:50:38.000Z</published>
    <updated>2020-03-02T14:59:20.773Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NoSQL">1 NoSQL</h1><p>not only SQL</p><p>优势：</p><ul><li>High Performance</li><li>Huge Storage</li><li>High Scalability &amp; High Availibility</li></ul><table align="left" border="1" cellspacing="0"><tbody><tr><td><p><span>类型</span></p></td><td><p><span>部分代表</span></p></td><td><p><span>特点</span></p></td></tr><tr><td><p><span>列存储</span></p></td><td><p><strong><span>Hbase</span></strong></p><p><span>Cassandra</span></p><p><span>Hypertable</span></p></td><td><p><span>顾名思义，是按列存储数据的。最大的特点是方便存储结构化和半结构化数据，方便做数据压缩，对针对某一列或者某几列的查询有非常大的IO优势。</span></p></td></tr><tr><td><p><span>文档存储</span></p></td><td><p><strong><span>MongoDB</span></strong></p><p><span>CouchDB</span></p></td><td><p><span>文档存储一般用类似json的格式存储，存储的内容是文档型的。这样也就有有机会对某些字段建立索引，实现关系数据库的某些功能。</span></p></td></tr><tr><td><p><span>key-value</span><span>存储</span></p></td><td><p><span>Tokyo&nbsp;Cabinet/Tyrant</span></p><p><span>Berkeley&nbsp;DB</span></p><p><span>MemcacheDB</span></p><p><strong><span>Redis</span></strong></p></td><td><p><span>可以通过key快速查询到其value。一般来说，存储不管value的格式，照单全收。（Redis包含了其他功能）</span></p></td></tr><tr><td><p><span>图存储</span></p></td><td><p><strong><span>Neo4J</span></strong></p><p><span>FlockDB</span></p></td><td><p><span>图形关系的最佳存储。使用传统关系数据库来解决的话性能低下，而且设计使用不方便。</span></p></td></tr><tr><td><p><span>对象存储</span></p></td><td><p><span>db4o</span></p><p><span>Versant</span></p></td><td><p><span>通过类似面向对象语言的语法操作数据库，通过对象的方式存取数据。</span></p></td></tr><tr><td><p><span>xml</span><span>数据库</span></p></td><td><p><span>Berkeley DB XML</span></p><p><span>BaseX</span></p></td><td><p><span>高效的存储XML数据，并支持XML的内部查询语法，比如XQuery,Xpath。</span></p></td></tr></tbody></table><h1 id="Redis概述">2 Redis概述</h1><p>Redis是一种键值对数据库。</p><h2 id="特征">2.1 特征</h2><ol><li>数据间没有必然的关联关系</li><li>内部采用单线程机制进行工作</li><li>高性能。官方提供测试数据，50个并发执行100000 个请求,读的速度是110000 次/s,写的速度是81000次/s。</li><li>多数据类型支持<ul><li>字符串类型 string</li><li>列表类型 list</li><li>散列类型 hash</li><li>集合类型 set</li><li>有序集合类型 sorted_set</li></ul></li><li>持久化支持。可以进行数据灾难恢复</li></ol><h2 id="应用">2.2 应用</h2><ul><li>为热点数据加速查询（主要场景），如热点商品、热点新闻、热点资讯、推广类等高访问量信息等</li><li>任务队列，如秒杀、抢购、购票排队等</li><li>即时信息查询，如各位排行榜、各类网站访问统计、公交到站信息、在线人数信息（聊天室、网站）、设备信号等</li><li>时效性信息控制，如验证码控制、投票控制等</li><li>分布式数据共享，如分布式集群架构中的 session 分离</li><li>消息队列</li><li>分布式锁</li></ul><h2 id="安装">2.3 安装</h2><p>安装之后修改安装目录下的redis.conf，将<code>daemonize no</code>改为<code>daemonize yes</code></p><p>基本配置：</p><pre class=" language-conf"><code class="language-conf">port 6379 #启动端口daemonize yes #守护进程logfile "6379.log" #日志文件名dir /usr/local/redis/data #日志文件、持久化文件目录</code></pre><p>启动redis的方式：</p><pre class=" language-shell"><code class="language-shell">src/redis-server redis.conf</code></pre><p>更改端口启动：</p><pre class=" language-shell"><code class="language-shell">redis-server --port 6380</code></pre><p>或者更改配置文件的port：（可在一台主机上启动多个服务）</p><p>连接时使用：</p><pre><code>redis-cli -p 6380</code></pre><p>配置服务：</p><pre class=" language-shell"><code class="language-shell">mkdir /etc/rediscp redis.conf /etc/redis/6379.confcp utils/redis_init_script /etc/init.d/redis</code></pre><p>启动服务：</p><pre class=" language-shell"><code class="language-shell">service redis start</code></pre><p>默认端口：6379</p><h1 id="Redis基本操作">3 Redis基本操作</h1><p><a href="http://doc.redisfans.com/" target="_blank" rel="noopener">Redis 命令参考 — Redis 命令参考</a></p><p>清除屏幕信息：<code>clear</code></p><p>查看命令帮助：<code>help 命令</code></p><h2 id="String类型">3.1 String类型</h2><p>String的最大存储量是512MB</p><p>String的用途之一是存json数据</p><p>键名通常有规范，例如<code>user:id:xxxxxxx:fans</code>（表名:主键名:主键值:字段名）</p><pre><code>set key value [EX seconds] [DX miliseconds]</code></pre><p>新增、更新键值对。它相当于 <code>setex key seconds value</code> 和 <code>psetex key milliseconds value</code>。</p><pre><code>get key</code></pre><p>获取值</p><pre><code>del key</code></pre><p>删除键值对</p><pre><code>ttl key</code></pre><p>查看ttl（剩余生存）时间</p><pre><code>expire key seconds</code></pre><p>设置过期时间</p><pre><code>keys *</code></pre><p>查看所有的key</p><pre><code>mset key1 value1 key2 value2...</code></pre><p>同时设置多个键值对，对应还有mget，可以同时取多个值</p><pre><code>getset key</code></pre><p>更新值的同时返回旧值。</p><pre><code>incr key</code></pre><p>自增value（只对纯数字的字符串有效）</p><pre><code>decr value</code></pre><p>自减value</p><pre><code>incrby key num</code></pre><p>以num值自增（decrby同理），类似的还有incrbyfloat（增加小数）</p><p><strong>注意：</strong> </p><ul><li>redis所有的操作都是原子性的，采用单线程处理所有业务，命令是一个一个执行的，因此无需考虑并发带来的数据影响。</li><li>能获取的最大整数范围是java中long的最大值。 </li></ul><pre><code>append key toAppend </code></pre><p>将一段字符串附加到旧值上。</p><pre><code>strlen key</code></pre><p>计算值的长度</p><pre><code>setnx key value</code></pre><p>(set not exist)如果key不存在则设置并返回1，如果key存在不更新返回0</p><h2 id="Hash类型">3.2 Hash类型</h2><ul><li>新的存储需求：对一系列存储的数据进行编组，方便管理，典型应用存储对象信息</li><li>需要的存储结构：一个存储空间保存多个键值对数据</li></ul><p>hash类型实际上值存的还是一个类似于哈希表的结构，里面的键值对叫field-value</p><p>hash存储结构优化</p><ul><li>如果field数量较少，存储结构优化为类数组结构</li><li>如果field数量较多，存储结构使用HashMap结构</li></ul><p>注意事项</p><ul><li>hash类型下的value只能存储字符串，不允许存储其他数据类型</li><li>每个hash可以存储2<sup>32</sup>-1个键值对</li><li>hgetall 操作可以获取全部属性，如果内部field过多，遍历整体数据效率就很会低，有可能成为数据访问瓶颈</li></ul><pre><code>hset hashname field value</code></pre><p>设置对应hash的键值对</p><pre><code>hget hashname field</code></pre><p>获取对应的哈希中对应的键对应的值</p><pre><code>hmset hashname field1 value1 field2 value2... </code></pre><p>多重设置</p><pre><code>hmget hashname field1 field2...</code></pre><p>多重获取</p><pre><code>hdel hashname</code></pre><p>删除键</p><pre><code>hsetnx hashname field value</code></pre><p>类似setnx，只有不存在才添加。</p><pre><code>hlen hashname</code></pre><p><strong>获取哈希中field的个数</strong></p><pre><code>hexists hashname field</code></pre><p>判断field是否存在，存在返回1</p><pre><code>hkeys hashname</code></pre><p>获取某哈希所有的field名</p><pre><code>hvals hashname</code></pre><p>获取某哈希所有的value</p><pre><code>hgetall hashname</code></pre><p>获取所有的field名和value</p><pre><code>hincrby hashname field increment</code></pre><p>注意这个只有hincrby没有hincr</p><h2 id="List类型">3.3 List类型</h2><ul><li>数据存储需求：存储多个数据，并对数据进入存储空间的顺序进行区分</li><li>需要的存储结构：一个存储空间保存多个数据，且通过数据可以体现进入顺序</li><li>list类型：保存多个数据，底层使用双向链表存储结构实现</li></ul><p>list的元素可以重复</p><pre><code>lpush listname val1 val2...rpush listname val1 val2...</code></pre><p>lpush从左边插入，rpush从右边插入。如果list不存在，会先创建list，然后插入。</p><pre><code>lrange listname start stop</code></pre><p>从左边数的范围，start和stop索引允许负值，-1代表最后一个元素，-2代表倒数第二个元素……</p><pre><code>lpop listname rpop listname</code></pre><p>从左边（右边）弹出元素</p><pre><code>blpop listname timeoutbrpop listname timeout</code></pre><p>阻塞版本的lpop/rpop，如果此时列表中没有元素则阻塞，可以设置最长等待时间</p><pre><code>llen listname</code></pre><p>返回列表的长度</p><pre><code>lset listname index value</code></pre><p>修改列表中索引index对应的值</p><pre><code>lindex listname index </code></pre><p>获取索引index对应的value</p><pre><code>lrem listname count value</code></pre><p>移除值等于指定值的元素count个</p><pre><code>linsert listname before/after pivot value</code></pre><p>这个pivot代表的是list中一个元素的值</p><h2 id="Set类型">3.4 Set类型</h2><ul><li>新的存储需求：存储大量的数据，在查询方面提供更高的效率</li><li>需要的存储结构：能够保存大量的数据，高效的内部存储机制，便于查询</li><li>set类型：与hash存储结构完全相同，仅存储键，不存储值（nil），并且值是不允许重复的</li></ul><pre><code>sadd setname member</code></pre><p>向集合中添加元素</p><pre><code>smembers setname</code></pre><p>返回集合的全部成员</p><pre><code>srem setname member</code></pre><p>移除元素</p><pre><code>scard setname</code></pre><p>返回集合中元素的个数</p><pre><code>sismember setname member</code></pre><p>判断是否在集合里。</p><pre><code>srandmember setname [count]</code></pre><p>随机获取集合中指定数量的数据</p><pre><code>spop setname</code></pre><p>返回并移除随机一个元素</p><pre><code>sinter setname1 setname2sunion setname1 setname2sdiff setname1 setname2</code></pre><p>求两个集合的交、并、差集。</p><p>还有sinterstore等指令可以把结果存储到指定集合中。</p><pre><code>smove source destination member</code></pre><p>将元素从source集合中移动到destination中。</p><h2 id="Sorted-set类型">3.5 Sorted_set类型</h2><ul><li>新的存储需求：数据排序有利于数据的有效展示，需要提供一种可以根据自身特征进行排序的方式</li><li>需要的存储结构：新的存储模型，可以保存可排序的数据</li><li>sorted_set类型：在set的存储结构基础上添加可排序字段</li></ul><pre><code>zadd setname score1 member1 [score2 member2]</code></pre><p>添加元素，注意要带上一个用于排序的数据（相当于权）。</p><pre><code>zrange setname start end [withscores]zrevrange setname start stop [WITHSCORES]</code></pre><p>zrange从小到大显示指定元素范围，如果带有withscores则会连着score一起返回。<br>zrevrange相反，从大到小。</p><pre><code>zcard setnamezcount setname min max</code></pre><p>zcard显示集合中有多少个元素<br>zcount显示在min-max之间的元素有多少个</p><pre><code>zrem setname member</code></pre><p>移除member</p><pre><code>zrangebyscore setname min max [WITHSCORES] [LIMIT];zrevrangebyscore setname [WITHSCORES];</code></pre><p>按条件获取处于min-max之间的数据</p><pre><code>zremrangebyrank setname start stopzremrangebyscore setname min max</code></pre><p>zremrangebyrank按排名删除元素  </p><p>zremrangebyscore删除值在min-max之间的元素</p><pre><code>zrank setname memberzrevrank setname member</code></pre><p>查看元素的正序或倒序排名</p><pre><code>zscore setname memberzincrby setname increment member</code></pre><p>score值获取与修改</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;NoSQL&quot;&gt;1 NoSQL&lt;/h1&gt;&lt;p&gt;not only SQL&lt;/p&gt;
&lt;p&gt;优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;High Performance&lt;/li&gt;
&lt;li&gt;Huge Storage&lt;/li&gt;
&lt;li&gt;High Scalability &amp;amp; Hi
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Redis" scheme="https://www.codetool.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>leetcode12-整数转罗马数字</title>
    <link href="https://www.codetool.top/article/leetcode12-%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/"/>
    <id>https://www.codetool.top/article/leetcode12-整数转罗马数字/</id>
    <published>2020-02-29T08:25:42.000Z</published>
    <updated>2020-02-29T08:31:44.735Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>罗马数字包含以下七种字符： <code>I</code>， <code>V</code>， <code>X</code>， <code>L</code>，<code>C</code>，<code>D</code> 和 <code>M</code>。</p><pre><code>字符          数值I             1V             5X             10L             50C             100D             500M             1000</code></pre><p>例如， 罗马数字 2 写做 <code>II</code> ，即为两个并列的 1。12 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 27 写做  <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p><ul><li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li><li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。 </li><li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li></ul><p>给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> 3<br><strong>输出:</strong> “III”  </p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> 4<br><strong>输出:</strong> “IV”   </p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> 9<br><strong>输出:</strong> “IX”  </p></blockquote><p><strong>示例4:</strong></p><blockquote><p><strong>输入:</strong> 58<br><strong>输出:</strong> “LVIII”<br><strong>解释:</strong> L = 50, V = 5, III = 3.</p></blockquote><p><strong>示例5:</strong></p><blockquote><p><strong>输入:</strong> 1994<br><strong>输出:</strong> “MCMXCIV”<br><strong>解释:</strong> M = 1000, CM = 900, XC = 90, IV = 4.  </p></blockquote><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>每一位的数字+所在位决定了在罗马数字中用什么表示。</p><h2 id="代码">2.2 代码</h2><p>简单粗暴</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">intToRoman</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> thous <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"M"</span><span class="token punctuation">,</span><span class="token string">"MM"</span><span class="token punctuation">,</span><span class="token string">"MMM"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> hundr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"C"</span><span class="token punctuation">,</span><span class="token string">"CC"</span><span class="token punctuation">,</span><span class="token string">"CCC"</span><span class="token punctuation">,</span><span class="token string">"CD"</span><span class="token punctuation">,</span><span class="token string">"D"</span><span class="token punctuation">,</span><span class="token string">"DC"</span><span class="token punctuation">,</span><span class="token string">"DCC"</span><span class="token punctuation">,</span><span class="token string">"DCCC"</span><span class="token punctuation">,</span><span class="token string">"CM"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> ten <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"X"</span><span class="token punctuation">,</span><span class="token string">"XX"</span><span class="token punctuation">,</span><span class="token string">"XXX"</span><span class="token punctuation">,</span><span class="token string">"XL"</span><span class="token punctuation">,</span><span class="token string">"L"</span><span class="token punctuation">,</span><span class="token string">"LX"</span><span class="token punctuation">,</span><span class="token string">"LXX"</span><span class="token punctuation">,</span><span class="token string">"LXXX"</span><span class="token punctuation">,</span><span class="token string">"XC"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> one <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">"I"</span><span class="token punctuation">,</span><span class="token string">"II"</span><span class="token punctuation">,</span><span class="token string">"III"</span><span class="token punctuation">,</span><span class="token string">"IV"</span><span class="token punctuation">,</span><span class="token string">"V"</span><span class="token punctuation">,</span><span class="token string">"VI"</span><span class="token punctuation">,</span><span class="token string">"VII"</span><span class="token punctuation">,</span><span class="token string">"VIII"</span><span class="token punctuation">,</span><span class="token string">"IX"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>thous<span class="token punctuation">[</span>num<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>hundr<span class="token punctuation">[</span>num<span class="token operator">/</span><span class="token number">100</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>ten<span class="token punctuation">[</span>num<span class="token operator">/</span><span class="token number">10</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>one<span class="token punctuation">[</span>num<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;罗马数字包含以下七种字符： &lt;code&gt;I&lt;/code&gt;， &lt;code&gt;V&lt;/code&gt;， &lt;code&gt;X&lt;/code&gt;， &lt;code&gt;L&lt;/code&gt;，&lt;code&gt;C&lt;/code&gt;，&lt;code&gt;D&lt;/code&gt; 和 &lt;code&gt;M
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯试题-小数第n位</title>
    <link href="https://www.codetool.top/article/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98-%E5%B0%8F%E6%95%B0%E7%AC%ACn%E4%BD%8D/"/>
    <id>https://www.codetool.top/article/蓝桥杯试题-小数第n位/</id>
    <published>2020-02-28T16:24:46.000Z</published>
    <updated>2020-02-28T16:29:05.127Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>资源限制</p><p>时间限制：1.0s  内存限制：256.0MB</p><hr><p>问题描述</p><p>　　我们知道，整数做除法时，有时得到有限小数，有时得到无限循环小数。<br>　　如果我们把有限小数的末尾加上无限多个0，它们就有了统一的形式。</p><p>　　本题的任务是：在上面的约定下，求整数除法小数点后的第n位开始的3位数。</p><hr><p>输入格式</p><p>　　一行三个整数：a b n，用空格分开。a是被除数，b是除数，n是所求的小数后位置（0&lt;a,b,n&lt;1000000000）</p><hr><p>输出格式</p><p>　　一行3位数字，表示：a除以b，小数后第n位开始的3位数字。</p><hr><p>样例输入</p><p>1 8 1</p><hr><p>样例输出</p><p>125</p><hr><p>样例输入</p><p>1 8 3</p><hr><p>样例输出</p><p>500</p><hr><p>样例输入</p><p>282866 999000 6</p><hr><p>样例输出</p><p>914</p><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>一开始想把被除数给乘以10的多少次幂之后再除以除数，然后发现会溢出，这道题还是模拟除法规则求解</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> divide <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> divideBy <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> begin <span class="token operator">=</span> divide<span class="token operator">%</span>divideBy<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>start<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            begin <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span>start<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>begin<span class="token operator">/</span>divideBy<span class="token punctuation">)</span><span class="token punctuation">;</span>            begin <span class="token operator">%=</span> divideBy<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;资源限制&lt;/p&gt;
&lt;p&gt;时间限制：1.0s  内存限制：256.0MB&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;问题描述&lt;/p&gt;
&lt;p&gt;　　我们知道，整数做除法时，有时得到有限小数，有时得到无限循环小数。&lt;br&gt;　　如果我们把有限小数的末尾加上无限
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="蓝桥杯" scheme="https://www.codetool.top/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯试题-大小写转换</title>
    <link href="https://www.codetool.top/article/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98-%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2/"/>
    <id>https://www.codetool.top/article/蓝桥杯试题-大小写转换/</id>
    <published>2020-02-28T16:04:17.000Z</published>
    <updated>2020-02-28T16:09:13.662Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>资源限制</p><p>时间限制：1.0s   内存限制：256.0MB</p><hr><p><strong>问题描述</strong>  </p><p>　　输入一个字符串，将大写字符变成小写、小写变成大写，然后输出</p><hr><p><strong>输入格式</strong></p><p>acbAB</p><hr><p><strong>输出格式</strong></p><p>ACBab</p><hr><p><strong>样例输入</strong></p><p>一个满足题目要求的输入范例。<br>例：<br>acbAB  </p><hr><p><strong>样例输出</strong></p><p>与上面的样例输入对应的输出。<br>例：<br>ACBab  </p><hr><p><strong>数据规模和约定</strong></p><p>输入数据中每一个数的范围。<br>例：0&lt;n,m&lt;100, 0&lt;=矩阵中的每个数&lt;=1000。  </p><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>加减ascii码值。。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        String origin <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> i<span class="token operator">:</span>origin<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span><span class="token string">'a'</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">&lt;=</span><span class="token string">'z'</span><span class="token punctuation">)</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token operator">-</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;资源限制&lt;/p&gt;
&lt;p&gt;时间限制：1.0s   内存限制：256.0MB&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问题描述&lt;/strong&gt;  &lt;/p&gt;
&lt;p&gt;　　输入一个字符串，将大写字符变成小写、小写变成大写，然后输出&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="蓝桥杯" scheme="https://www.codetool.top/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>蓝桥杯试题-黑色星期五</title>
    <link href="https://www.codetool.top/article/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98-%E9%BB%91%E8%89%B2%E6%98%9F%E6%9C%9F%E4%BA%94/"/>
    <id>https://www.codetool.top/article/蓝桥杯试题-黑色星期五/</id>
    <published>2020-02-28T15:32:59.000Z</published>
    <updated>2020-02-28T15:47:00.477Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>资源限制</p><p>时间限制：1.0s   内存限制：512.0MB</p><hr><p><strong>问题描述</strong><br>　　有些西方人比较迷信，如果某个月的13号正好是星期五，他们就会觉得不太吉利，用古人的说法，就是“诸事不宜”。请你编写一个程序，统计出在某个特定的年份中，出现了多少次既是13号又是星期五的情形，以帮助你的迷信朋友解决难题。<br>　　说明：（1）一年有365天，闰年有366天，所谓闰年，即能被4整除且不能被100整除的年份，或是既能被100整除也能被400整除的年份；（2）已知1998年1月1日是星期四，用户输入的年份肯定大于或等于1998年。<br>　　输入格式：输入只有一行，即某个特定的年份（大于或等于1998年）。<br>　　输出格式：输出只有一行，即在这一年中，出现了多少次既是13号又是星期五的情形。<br><strong>输入输出样例</strong></p><hr><p>样例输入</p><p>1998</p><hr><p>样例输出</p><p>3</p><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>可以偷懒使用Calendar类或者被废弃的Date，不过要求对Calendar类比较熟悉。。</p><p>不然就按闰年的情况去处理日期吧。。</p><h2 id="代码">2.2 代码</h2><p>java api:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Calendar<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> year <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        Calendar calendar <span class="token operator">=</span> Calendar<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">12</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>MONTH<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DATE<span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>Calendar<span class="token punctuation">.</span>DAY_OF_WEEK<span class="token punctuation">)</span><span class="token operator">==</span>Calendar<span class="token punctuation">.</span>FRIDAY<span class="token punctuation">)</span> count <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>硬算：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> year <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> firstDay <span class="token operator">=</span> <span class="token function">getFirstDay</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isLeap <span class="token operator">=</span> <span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>year<span class="token operator">%</span><span class="token number">100</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">100</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>year<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">12</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                    firstDay <span class="token operator">=</span> <span class="token punctuation">(</span>firstDay<span class="token operator">+</span><span class="token number">12</span><span class="token operator">%</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">7</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>firstDay <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                    firstDay <span class="token operator">=</span> <span class="token punctuation">(</span>firstDay<span class="token operator">+</span><span class="token punctuation">(</span>isLeap<span class="token operator">?</span><span class="token number">29</span><span class="token operator">:</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">7</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>firstDay <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>                <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>                <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>                <span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span>                    firstDay <span class="token operator">=</span> <span class="token punctuation">(</span>firstDay<span class="token operator">+</span><span class="token number">30</span><span class="token operator">%</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">7</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>firstDay <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    firstDay <span class="token operator">=</span> <span class="token punctuation">(</span>firstDay<span class="token operator">+</span><span class="token number">31</span><span class="token operator">%</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">7</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>firstDay <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getFirstDay</span><span class="token punctuation">(</span><span class="token keyword">int</span> year<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>year <span class="token operator">==</span> <span class="token number">1998</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> lastYear <span class="token operator">=</span> year <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>lastYear<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>lastYear<span class="token operator">%</span><span class="token number">100</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">||</span><span class="token punctuation">(</span>lastYear<span class="token operator">%</span><span class="token number">100</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>lastYear<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">getFirstDay</span><span class="token punctuation">(</span>lastYear<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">366</span><span class="token operator">%</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">7</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">getFirstDay</span><span class="token punctuation">(</span>lastYear<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">365</span><span class="token operator">%</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">7</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;资源限制&lt;/p&gt;
&lt;p&gt;时间限制：1.0s   内存限制：512.0MB&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;问题描述&lt;/strong&gt;&lt;br&gt;　　有些西方人比较迷信，如果某个月的13号正好是星期五，他们就会觉得不太吉利，用古人
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="蓝桥杯" scheme="https://www.codetool.top/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>海量数据去重-由BitMap引出的布隆过滤器</title>
    <link href="https://www.codetool.top/article/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%8E%BB%E9%87%8D-%E7%94%B1BitMap%E5%BC%95%E5%87%BA%E7%9A%84%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <id>https://www.codetool.top/article/海量数据去重-由BitMap引出的布隆过滤器/</id>
    <published>2020-02-28T02:51:06.000Z</published>
    <updated>2020-02-28T08:56:36.902Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://api.codetool.top/img/15828582713241.jpg" alt="布隆过滤器（图文无关）"></p><p>本文参考资源：</p><p><a href="https://blog.csdn.net/xinzhongtianxia/article/details/81294922" target="_blank" rel="noopener">那些惊艳的算法们（一）——布隆过滤器_C/C++_xinzhongtianxia的博客-CSDN博客</a></p><p><a href="https://www.jianshu.com/p/2104d11ee0a2" target="_blank" rel="noopener">详解布隆过滤器的原理、使用场景和注意事项 - 简书</a></p><h1 id="概述">1 概述</h1><p>昨天学习了BitMap这种数据结构（算法），链接：<a href="../海量数据算法-BitMap介绍和实现">海量数据算法-BitMap介绍和实现</a></p><p>然而BitMap也存在着一些问题：</p><ol><li>当样本分布极度不均匀的时候，BitMap会造成很大空间上的浪费。</li></ol><p>举个例子，比如你有10个数，分别是1、2、3、4、5、6、7、8、99999999999；那么你不得不用99999999999个bit位去实现你的BitMap,而这个BitMap的中间绝大多数位置都是0，并且永远不会用到，这显然是极度不划算的。</p><ol start="2"><li>当元素不是整型的时候，BitMap就不适用了。<br>想想看，你拿到的是一堆url，然后如果你想用BitMap做去重的话，先得把url转换成int型，在转换的过程中难免某些url会计算出相同的int值，于是BitMap的准确性就会降低。</li></ol><p>那针对这两种情况有没有解决办法呢？</p><p>第一种分布不均匀的情况可以通过hash函数，将元素都映射到一个区间范围内，减少大段区间闲置造成的浪费，这很简单，取模就好了，难的是取模之后的值保证不相同，即不发生hash冲突。</p><p>第二种情况，把字符串映射成整数是必要的，那么唯一要做的就是保证我们的hash函数尽可能的减少hash冲突，一次不行我就多hash几次，hash还是容易碰撞，那我就扩大数组的范围，使hash值尽可能的均匀分布，减少hash冲突的概率。</p><p>基于这种思想，BloomFilter（布隆过滤器）诞生了。</p><h1 id="原理">2 原理</h1><p>比如现在有10000个字符串，要进行去重操作，如果用bitmap的方法将字符串的哈希值对应到一个bit，由于字符串的哈希值不是唯一的，可能出现哈希冲突，而若两个字符串哈希冲突了，就会对应到同一个bit上，bitmap就会误判这两个字符串相等。</p><p>解决的方法就是，使用多个哈希函数，例如使用三个哈希函数，每个字符串可以计算出三个哈希映射，将所有映射的位标为1，而判断有没有重复的方法是，只要得到的三个映射位不是都已为1了，就认为该字符串没有重复。</p><p><img src="https://api.codetool.top/img/15828775056258.webp" alt></p><p><img src="https://api.codetool.top/img/15828777396459.webp" alt></p><p>可见布隆过滤器相较于BitMap功能较单一，无法根据已有的位倒推回原始数据，只能用作查询去重功能。</p><p>但这也不意味着布隆过滤器就不会误判，假如一个新的无重复的字符串，映射的位在之前就被其他字符串得到的哈希映射都标为了1，那么布隆过滤器也认为它是重复的。不过误判的概率较小（比BitMap小多了），在大部分生产环境下是可以接受的（因为有的时候不重复的字符串没多少，反而重复的字符串占了大多数，主要目的只是不用反复处理重复的字符串）。</p><h1 id="参数调优">3 参数调优</h1><p>由上面的原理可知，对于布隆过滤器性能最重要的参数有两个：</p><ul><li>bit数组的大小，bit越多且哈希映射分布均匀的条件下，哈希冲突的概率是越低的。</li><li>哈希函数的个数，哈希函数的个数如果太少，更容易冲突，而如果哈希函数的个数太多，则将bit数组内的元素标为1的进度也会加快，从而造成哈希冲突。所以哈希函数的个数需要均衡。</li></ul><p><img src="https://api.codetool.top/img/15828799829838.png" alt="误判率和数组bit个数的关系"></p><p>关于具体的误判率计算维基百科给出了计算过程：<a href="https://en.wikipedia.org/wiki/Bloom_filter#Probability_of_false_positives" target="_blank" rel="noopener">Bloom filter - Wikipedia</a></p><p>对于一个期望的误判率p，期望的插入元素个数n，最佳数组bit个数m和哈希函数数量k的计算公式如下：</p><p><img src="https://api.codetool.top/img/15828794672024.svg" alt="最佳数组bit个数"></p><p><img src="https://api.codetool.top/img/15828794845896.svg" alt="最佳哈希函数数量"></p><p>所以当构造一个布隆过滤器的时候并且希望误判率可控时通常要传入期望的误判率、期望的插入元素个数等参数。</p><p>谷歌有java中BloomFilter的实现，有兴趣的可以自己去研究一下：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.google.guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>guava<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>25.1-jre<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h1 id="应用">4 应用</h1><ul><li>重复URL的过滤</li><li>邮箱黑名单的去重</li><li>推荐去重</li></ul><p>Redis防止缓存穿透就使用了布隆过滤器，日后再谈。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://api.codetool.top/img/15828582713241.jpg&quot; alt=&quot;布隆过滤器（图文无关）&quot;&gt;&lt;/p&gt;
&lt;p&gt;本文参考资源：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/xinzho
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="海量数据" scheme="https://www.codetool.top/tags/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>leetcode9-回文数</title>
    <link href="https://www.codetool.top/article/leetcode9-%E5%9B%9E%E6%96%87%E6%95%B0/"/>
    <id>https://www.codetool.top/article/leetcode9-回文数/</id>
    <published>2020-02-27T17:58:40.000Z</published>
    <updated>2020-02-27T18:03:18.927Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入：</strong> 121<br><strong>输出：</strong> true  </p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入：</strong> -121<br><strong>输出：</strong> false<br><strong>解释：</strong> 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。   </p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入：</strong> 10<br><strong>输出：</strong> false<br><strong>解释：</strong> 从右向左读, 为 01 。因此它不是一个回文数。</p></blockquote><p><strong>进阶:</strong></p><p>你能不将整数转为字符串来解决这个问题吗？</p><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>除10得余可以得到末位，除10<sup>n</sup>则可以得到首位（n为数字长度）。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> div <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">/</span> div <span class="token operator">>=</span> <span class="token number">10</span><span class="token punctuation">)</span> div <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> left <span class="token operator">=</span> x <span class="token operator">/</span> div<span class="token punctuation">;</span>            <span class="token keyword">int</span> right <span class="token operator">=</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">!=</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            x <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> div<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>            div <span class="token operator">/=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例1:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt; 1
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC使用-续</title>
    <link href="https://www.codetool.top/article/SpringMVC%E4%BD%BF%E7%94%A8-%E7%BB%AD/"/>
    <id>https://www.codetool.top/article/SpringMVC使用-续/</id>
    <published>2020-02-27T15:35:47.000Z</published>
    <updated>2020-02-27T15:37:39.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="转发和重定向">1 转发和重定向</h1><p>除了视图解析器配合返回字符串的方法：</p><h2 id="使用request和response">1.1 使用request和response</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRedir</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//使用request转向页面</span>    request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/pages/success.jsp"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用response重定向</span>    response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"testRetrunString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用response指定响应结果</span>    response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"json 串"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="使用返回字符串关键字">1.2 使用返回字符串关键字</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testForward"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">testForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AccountController 的 testForward 方法执行了。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"forward:/WEB-INF/pages/success.jsp"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testRedirect"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">testRedirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AccountController 的 testRedirect 方法执行了。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:testReturnModelAndView"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="ResponseBody-响应-json-数据">2 ResponseBody 响应 json 数据</h1><p>该注解用于将 Controller 的方法返回的对象，通过 HttpMessageConverter 接口转换为指定格式的数据如：<code>json,xml</code> 等，通过 Response 响应给客户端</p><p>Springmvc 默认用 MappingJacksonHttpMessageConverter 对 json 数据进行转换，需要加入<br>jackson 的包。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-annotations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testResponseJson"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> Account <span class="token function">testResponseJson</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Account account<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异步请求："</span><span class="token operator">+</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> account<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>前一个<code>@ResponseBody</code>返回的时候转换为json，后一个<code>@ResponseBody</code>接收请求时转换为对象。</p><h1 id="文件上传和下载">3 文件上传和下载</h1><h2 id="文件上传">3.1 文件上传</h2><p>这里的文件上传用的是<code>multipart/form-data</code></p><p>当 form 表单的 enctype 取值为 Mutilpart/form-data 时，请求正文内容就变成：<br>每一部分都是 MIME 类型描述的正文</p><pre><code>-----------------------------7de1a433602ac 分界符Content-Disposition: form-data; name=&quot;userName&quot; 协议头aaa 协议的正文-----------------------------7de1a433602acContent-Disposition: form-data; name=&quot;file&quot;;filename=&quot;C:\Users\admin\Desktop\fileupload_demofile\b.txt&quot;Content-Type: text/plain 协议的类型（MIME 类型）bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb-----------------------------7de1a433602ac--</code></pre><p><strong>Apache Commoms里的两个工具类</strong></p><ul><li>commons-fileupload-xxx.jar</li><li>commons-io-xxx.jar</li></ul><p>（如果是maven项目只需要添加commons-fileupload依赖）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>配置文件上传处理Bean</strong>  </p><p>spring-mvc.xml配置  </p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置文件上传解析器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span>    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 设置上传文件的最大尺寸为 5MB --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &lt;   value>5242880<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p><strong>文件上传处理Controller</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/file"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/initFileUpload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">initFileUpload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"FileUpload"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">fileUpLoad</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span>CommonsMultipartFile file<span class="token punctuation">,</span> HttpSession session<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String path <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String fileName <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String fileType <span class="token operator">=</span> fileName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            File targetFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>fileType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                file<span class="token punctuation">.</span><span class="token function">getFileItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>targetFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"FileUpload"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="文件下载">3.2 文件下载</h2><p>可先获取下载文件的输入流，并将输入流读入缓冲流<code>BufferedInputStream</code>，最后将缓冲流通过循环的方式写入到response的输出流实现文件下载功能。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fileDownLoad</span><span class="token punctuation">(</span>HttpSession session<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span>String fileName<span class="token punctuation">,</span><span class="token keyword">boolean</span> isOnline<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    String path <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>fileName<span class="token punctuation">;</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span><span class="token string">"您要下载的文件没找到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    BufferedInputStream bufIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isOnline<span class="token punctuation">)</span><span class="token punctuation">{</span>        URL u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"file:///"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span><span class="token string">"inline;filename="</span><span class="token operator">+</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/x-msdownload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment;filename="</span><span class="token operator">+</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    OutputStream out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>bufIn<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    bufIn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="异常处理">4 异常处理</h1><p>系统的 dao、service、controller 出现都通过 throws Exception 向上抛出，最后由 SpringMVC 前端控制器交由异常处理器进行异常处理。</p><p><img src="https://api.codetool.top/img/15828125028214.png" alt></p><ol><li>编写自定义异常类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//存储提示信息</span>    <span class="token keyword">private</span> String message<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">SysException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>编写异常处理器</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysExceptionResolver</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerExceptionResolver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ModelAndView <span class="token function">resolveException</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取异常对象</span>        SysException e <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">SysException</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            e <span class="token operator">=</span> <span class="token punctuation">(</span>SysException<span class="token punctuation">)</span> ex<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SysException</span><span class="token punctuation">(</span><span class="token string">"系统正在维护"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ModelAndView mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"errorMsg"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>配置异常处理器（跳转到提示页面）</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置异常处理器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sysExceptionResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.rhett.exception.SysExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h1 id="SpringMVC中的拦截器">5 SpringMVC中的拦截器</h1><ul><li>过滤器是 servlet 规范中的一部分，任何 java web 工程都可以使用。</li><li>拦截器是 SpringMVC 框架自己的，只有使用了 SpringMVC 框架的工程才能用。</li><li>过滤器在 url-pattern 中配置了/*之后，可以对所有要访问的资源拦截。</li><li>拦截器它是只会拦截访问的控制器方法，如果访问的是 jsp，html,css,image 或者 js 是不会进行拦截的。</li></ul><p>它也是 AOP 思想的具体应用。</p><p>我们要想自定义拦截器， 要求必须实现 <code>HandlerInterceptor</code> 接口。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HandlerInterceptorDemo1</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>     HttpServletResponse response<span class="token punctuation">,</span>     Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"preHandle 拦截器拦截了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>     HttpServletResponse response<span class="token punctuation">,</span>    Object handler<span class="token punctuation">,</span>ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"postHandle 方法执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>     HttpServletResponse response<span class="token punctuation">,</span>     Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"afterCompletion 方法执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>HandlerInterceptor接口中的方法：</p><ol><li>preHandle方法是controller方法执行前拦截的方法<ol><li>可以使用request或者response跳转到指定的页面</li><li>return true放行，执行下一个拦截器，如果没有拦截器，执行controller中的方法。</li><li>return false不放行，不会执行controller中的方法。</li></ol></li><li>postHandle是controller方法执行后执行的方法，在JSP视图执行前。<ol><li>可以使用request或者response跳转到指定的页面</li><li>如果指定了跳转的页面，那么controller方法跳转的页面将不会显示。</li></ol></li><li>postHandle方法是在JSP执行后执行<ol><li>request或者response不能再跳转页面了</li></ol></li></ol><p>配置拦截器：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置拦截器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 要拦截的方法 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 不要拦截的方法 --></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;mvc:exclude-mapping path=""/> --></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置拦截器对象--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handlerInterceptorDemo1<span class="token punctuation">"</span></span>                <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.rhett.interceptor.MyInterceptor1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span></code></pre><p>若配置多个拦截器形成拦截器链，按配置顺序执行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;转发和重定向&quot;&gt;1 转发和重定向&lt;/h1&gt;&lt;p&gt;除了视图解析器配合返回字符串的方法：&lt;/p&gt;
&lt;h2 id=&quot;使用request和response&quot;&gt;1.1 使用request和response&lt;/h2&gt;&lt;pre class=&quot; language-java&quot;&gt;&lt;c
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SpringMVC" scheme="https://www.codetool.top/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>海量数据算法-BitMap介绍和实现</title>
    <link href="https://www.codetool.top/article/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95-BitMap%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%AE%9E%E7%8E%B0/"/>
    <id>https://www.codetool.top/article/海量数据算法-BitMap介绍和实现/</id>
    <published>2020-02-27T09:22:49.000Z</published>
    <updated>2020-02-27T11:48:23.430Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个有素质的程序员，<del>在面试中（不是）</del> 难免会遇到海量数据相关的问题，之前有注意过java.util下面有一个BitSet数据结构，但不是很明白是做什么用的。今天就来研究一下它背后的算法——BitMap（位图）算法。</p><h1 id="BitMap的概念">1 BitMap的概念</h1><p>关于BitMap的介绍和实现有一篇微信文章已经讲的很清楚了：</p><p><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653191272&idx=1&sn=9bbcd172b611b455ebfc4b7fb9a6a55e&chksm=8c990eb2bbee87a486c55572a36c577a48df395e13e74314846d221cbcfd364d44c280250234&scene=21#wechat_redirect" target="_blank" rel="noopener">漫画：Bitmap算法 整合版</a></p><p>主要的思想就是把数据对应到bit位中，从而可以实现去重、查找、排序等功能。</p><p>我这篇文章就不复制粘贴了 <del>（全是图片粘贴个锤子）</del>，主要看看java中BitMap的实现-BitSet</p><h1 id="BitSet实现">2 BitSet实现</h1><h2 id="重要内部字段">2.1 重要内部字段</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//用于存储数据</span><span class="token keyword">private</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">;</span></code></pre><p>这个字段说明了底层是long数组，而一个long是8个字节也就是64位。而且在BitSet中，把这样一个long单元称为“字”（word）。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> wordsInUse <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre><p>这个字段代表目前long数组中不为0的元素的最大的下标。（就是目前实际用了多少个字）</p><h2 id="构造方法">2.2 构造方法</h2><h3 id="BitSet">2.2.1 BitSet()</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">BitSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">initWords</span><span class="token punctuation">(</span>BITS_PER_WORD<span class="token punctuation">)</span><span class="token punctuation">;</span>    sizeIsSticky <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>initWords</code>，看方法名就是初始化words数组了，而后面的BITS_PER_WORD应该就是默认容量。<code>sizeIsSticky</code>的java doc描述大概意思是判断这个bitset是不是用户指定容量创建的，如果是用户指定了容量，后面就尽可能会保有这个容量。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ADDRESS_BITS_PER_WORD <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> BITS_PER_WORD <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> ADDRESS_BITS_PER_WORD<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initWords</span><span class="token punctuation">(</span><span class="token keyword">int</span> nbits<span class="token punctuation">)</span> <span class="token punctuation">{</span>    words <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">long</span><span class="token punctuation">[</span><span class="token function">wordIndex</span><span class="token punctuation">(</span>nbits<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">wordIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> bitIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> bitIndex <span class="token operator">>></span> ADDRESS_BITS_PER_WORD<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>ADDRESS_BITS_PER_WORD</code>的意思就是一个字的地址占多少位，因为是64位是2的6次方，这里就是6。<br>而<code>BITS_PER_WORD</code>就是一个字占多少位，这里就是<code>1&lt;&lt;6</code>即64位。</p><p><code>initWords</code>的时候，我们传进去的默认容量为<code>BITS_PER_WORD</code>，这里看形参可以知道这个容量的单位是bit，那么也就是说默认构造函数只会创建一个能容纳64位的bitSet。</p><p>而BitSet怎么知道64位需要多少个字(long)呢？就是通过<code>wordIndex</code>去计算，将位值除以64，并向上取整。</p><p>后面<code>wordIndex</code>还会在索引的时候用到。</p><h3 id="public-BitSet-int-nbits">2.2.2 public BitSet(int nbits)</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">BitSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> nbits<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// nbits can't be negative; size 0 is OK</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nbits <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NegativeArraySizeException</span><span class="token punctuation">(</span><span class="token string">"nbits &lt; 0: "</span> <span class="token operator">+</span> nbits<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initWords</span><span class="token punctuation">(</span>nbits<span class="token punctuation">)</span><span class="token punctuation">;</span>    sizeIsSticky <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个构造方法就是用户自己指定初始容量了，过程和默认构造方法一样，只是把<code>sizeIsSticky</code>设为了true。</p><h2 id="重要方法">2.3 重要方法</h2><h3 id="set">2.3.1 set</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> bitIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bitIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"bitIndex &lt; 0: "</span> <span class="token operator">+</span> bitIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//计算出字的下标</span>    <span class="token keyword">int</span> wordIndex <span class="token operator">=</span> <span class="token function">wordIndex</span><span class="token punctuation">(</span>bitIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expandTo</span><span class="token punctuation">(</span>wordIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    words<span class="token punctuation">[</span>wordIndex<span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token punctuation">(</span>1L <span class="token operator">&lt;&lt;</span> bitIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Restores invariants</span>    <span class="token comment" spellcheck="true">//保证一些条件</span>    <span class="token function">checkInvariants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个方法的作用就是把相应的位设置为true（1）。而<code>expandTo()</code>就是扩容了，要保证数组大小要大于这个字的下标。这个扩容方法我们放到后面再看。然后就是<code>words[wordIndex] |= (1L &lt;&lt; bitIndex);</code> ，这里的<code>1L &lt;&lt; bitIndex</code>是什么呢，java当左移超出一定范围的时候，对于long类型就是当左移位数大于等于1000000(64)的时候，只会取最后七位，也就是<code>1L &lt;&lt; bitIndex</code>实际上就是<code>bitIndex%64</code>，算出了该位在字中的位置。然后用位或运算将该位置为1。</p><h3 id="clear">2.3.2 clear</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token keyword">int</span> bitIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bitIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"bitIndex &lt; 0: "</span> <span class="token operator">+</span> bitIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> wordIndex <span class="token operator">=</span> <span class="token function">wordIndex</span><span class="token punctuation">(</span>bitIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>wordIndex <span class="token operator">>=</span> wordsInUse<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    words<span class="token punctuation">[</span>wordIndex<span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>1L <span class="token operator">&lt;&lt;</span> bitIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">recalculateWordsInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkInvariants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个方法的作用就是把相应的位设置为false（0）。和set方法过程很像，用位与运算将对应的位置为0。</p><h3 id="set-int-fromIndex-int-toIndex">2.3.3 set(int fromIndex, int toIndex)</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//检查范围是否有效</span>    <span class="token function">checkRange</span><span class="token punctuation">(</span>fromIndex<span class="token punctuation">,</span> toIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fromIndex <span class="token operator">==</span> toIndex<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Increase capacity if necessary</span>    <span class="token comment" spellcheck="true">// 获取起始位置和结束位置对应的字的下标，必要时扩容</span>    <span class="token keyword">int</span> startWordIndex <span class="token operator">=</span> <span class="token function">wordIndex</span><span class="token punctuation">(</span>fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> endWordIndex   <span class="token operator">=</span> <span class="token function">wordIndex</span><span class="token punctuation">(</span>toIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expandTo</span><span class="token punctuation">(</span>endWordIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> firstWordMask <span class="token operator">=</span> WORD_MASK <span class="token operator">&lt;&lt;</span> fromIndex<span class="token punctuation">;</span>    <span class="token keyword">long</span> lastWordMask  <span class="token operator">=</span> WORD_MASK <span class="token operator">>>></span> <span class="token operator">-</span>toIndex<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>startWordIndex <span class="token operator">==</span> endWordIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Case 1: One word</span>        words<span class="token punctuation">[</span>startWordIndex<span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token punctuation">(</span>firstWordMask <span class="token operator">&amp;</span> lastWordMask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Case 2: Multiple words</span>        <span class="token comment" spellcheck="true">// Handle first word</span>        words<span class="token punctuation">[</span>startWordIndex<span class="token punctuation">]</span> <span class="token operator">|=</span> firstWordMask<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Handle intermediate words, if any</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startWordIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> endWordIndex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            words<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> WORD_MASK<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Handle last word (restores invariants)</span>        words<span class="token punctuation">[</span>endWordIndex<span class="token punctuation">]</span> <span class="token operator">|=</span> lastWordMask<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">checkInvariants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>WORD_MASK是什么呢：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* Used to shift left or right for a partial word mask */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> WORD_MASK <span class="token operator">=</span> 0xffffffffffffffffL<span class="token punctuation">;</span></code></pre><p>就是一个全1的long型，这个函数先将起始位置中的起始位往后的位置1，然后将中间的字全部设为全1的，最后将结束位置中的结束位往前的位置置1。</p><h3 id="intersects">2.3.4 intersects</h3><p>有了上面那些基础方法，就可以进行一些逻辑判断了：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">intersects</span><span class="token punctuation">(</span>BitSet set<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>wordsInUse<span class="token punctuation">,</span> set<span class="token punctuation">.</span>wordsInUse<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> set<span class="token punctuation">.</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>比较两个BitSet是否有相同的位被置1了。</p><h3 id="and">2.3.5 and</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">and</span><span class="token punctuation">(</span>BitSet set<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> set<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>wordsInUse <span class="token operator">></span> set<span class="token punctuation">.</span>wordsInUse<span class="token punctuation">)</span>        words<span class="token punctuation">[</span><span class="token operator">--</span>wordsInUse<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Perform logical AND on words in common</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> wordsInUse<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        words<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;=</span> set<span class="token punctuation">.</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">recalculateWordsInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkInvariants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>非常常用的与运算，求两个集合的交集，需要两个bitset中对应的位都被置1。这里就是逐字做与运算。</p><h3 id="or">2.3.6 or</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">or</span><span class="token punctuation">(</span>BitSet set<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> set<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> wordsInCommon <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>wordsInUse<span class="token punctuation">,</span> set<span class="token punctuation">.</span>wordsInUse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>wordsInUse <span class="token operator">&lt;</span> set<span class="token punctuation">.</span>wordsInUse<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ensureCapacity</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span>wordsInUse<span class="token punctuation">)</span><span class="token punctuation">;</span>        wordsInUse <span class="token operator">=</span> set<span class="token punctuation">.</span>wordsInUse<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Perform logical OR on words in common</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> wordsInCommon<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        words<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">|=</span> set<span class="token punctuation">.</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Copy any remaining words</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>wordsInCommon <span class="token operator">&lt;</span> set<span class="token punctuation">.</span>wordsInUse<span class="token punctuation">)</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span>words<span class="token punctuation">,</span> wordsInCommon<span class="token punctuation">,</span>                            words<span class="token punctuation">,</span> wordsInCommon<span class="token punctuation">,</span>                            wordsInUse <span class="token operator">-</span> wordsInCommon<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// recalculateWordsInUse() is unnecessary</span>    <span class="token function">checkInvariants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>非常常用的或运算，求两个集合的并集，需要两个bitset中任意一位被置1。这里就是逐字做或运算。</p><h3 id="xor">2.3.7 xor</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">xor</span><span class="token punctuation">(</span>BitSet set<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> wordsInCommon <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>wordsInUse<span class="token punctuation">,</span> set<span class="token punctuation">.</span>wordsInUse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>wordsInUse <span class="token operator">&lt;</span> set<span class="token punctuation">.</span>wordsInUse<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ensureCapacity</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span>wordsInUse<span class="token punctuation">)</span><span class="token punctuation">;</span>        wordsInUse <span class="token operator">=</span> set<span class="token punctuation">.</span>wordsInUse<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Perform logical XOR on words in common</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> wordsInCommon<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        words<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> set<span class="token punctuation">.</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Copy any remaining words</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>wordsInCommon <span class="token operator">&lt;</span> set<span class="token punctuation">.</span>wordsInUse<span class="token punctuation">)</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span>words<span class="token punctuation">,</span> wordsInCommon<span class="token punctuation">,</span>                            words<span class="token punctuation">,</span> wordsInCommon<span class="token punctuation">,</span>                            set<span class="token punctuation">.</span>wordsInUse <span class="token operator">-</span> wordsInCommon<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">recalculateWordsInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkInvariants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>异或运算。求不同时在两个集合内的元素。</p><h2 id="扩容">2.4 扩容</h2><p>最后来看扩容</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">expandTo</span><span class="token punctuation">(</span><span class="token keyword">int</span> wordIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> wordsRequired <span class="token operator">=</span> wordIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>wordsInUse <span class="token operator">&lt;</span> wordsRequired<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ensureCapacity</span><span class="token punctuation">(</span>wordsRequired<span class="token punctuation">)</span><span class="token punctuation">;</span>        wordsInUse <span class="token operator">=</span> wordsRequired<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>expandTo更新了wordsInUse，真正的扩容在ensureCapacity里面</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> wordsRequired<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> wordsRequired<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 分配两倍数组大小或需要的数组大小中较大的那个。</span>        <span class="token keyword">int</span> request <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> words<span class="token punctuation">.</span>length<span class="token punctuation">,</span> wordsRequired<span class="token punctuation">)</span><span class="token punctuation">;</span>        words <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>words<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>        sizeIsSticky <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="使用实例">3 使用实例</h1><p>这样看来，BitSet好像只能存储数值类型的数据，实际上<strong>非数值类型可以使用哈希码或自定的哈希映射存储，但要保证哈希码只能唯一确定一个元素。</strong></p><h2 id="去重">3.1 去重</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">containChars</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    BitSet used <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        used<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// set bit for char</span>    StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> used<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> i <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>used<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">containChars</span><span class="token punctuation">(</span><span class="token string">"abcdfadsaomdosmdfodsingodsbnafgudbgiub"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>(通常是遍历bitset中所有的位进行去重，这里因为字母有限可以遍历字母)</p><h2 id="排序">3.2 排序</h2><p>排序也是遍历bitset中所有的位，但是对于哈希码存储的并没有排序作用。实际上就是用空间换时间。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    BitSet used <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    used<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    used<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    used<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    used<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    used<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    used<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    used<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>used<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>used<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="查询">3.3 查询</h2><p>给40亿个不重复的unsigned int的整数，没有排过序，然后再给一个数，如果快速判断这个数是否在那40亿个数当中？</p><p>一个一个set进去，然后用get判断有没有。</p><p>（set完之后这个数据结构就可复用了）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一个有素质的程序员，&lt;del&gt;在面试中（不是）&lt;/del&gt; 难免会遇到海量数据相关的问题，之前有注意过java.util下面有一个BitSet数据结构，但不是很明白是做什么用的。今天就来研究一下它背后的算法——BitMap（位图）算法。&lt;/p&gt;
&lt;h1 id=&quot;BitM
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="海量数据" scheme="https://www.codetool.top/tags/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC概述和使用入门</title>
    <link href="https://www.codetool.top/article/SpringMVC%E6%A6%82%E8%BF%B0%E5%92%8C%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    <id>https://www.codetool.top/article/SpringMVC概述和使用入门/</id>
    <published>2020-02-27T09:05:01.000Z</published>
    <updated>2020-02-27T09:08:52.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述">1 概述</h1><h2 id="SpringMVC的概念">1.1 SpringMVC的概念</h2><p>SpringMVC 是一种基于 Java 的实现 MVC 设计模型的请求驱动类型的轻量级 Web 框架，属于 Spring FrameWork 的后续产品，已经融合在 Spring Web Flow 里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。使用 Spring 可插入的 MVC 架构，从而在使用 Spring 进行 WEB 开发时，可以选择使用 Spring 的 Spring MVC 框架或集成其他 MVC 开发框架，如 Struts1(现在一般不用)，Struts2 等。</p><p>它通过一套注解，让一个简单的 Java 类成为处理请求的控制器，而无须实现任何接口。同时它还支持RESTful 编程风格的请求。</p><h2 id="SpringMVC的优势">1.2 SpringMVC的优势</h2><ol><li>清晰的角色划分：<ul><li>前端控制器（DispatcherServlet）</li><li>请求到处理器映射（HandlerMapping）</li><li>处理器适配器（HandlerAdapter）</li><li>视图解析器（ViewResolver）</li><li>处理器或页面控制器（Controller）</li><li>验证器（Validator）</li><li>命令对象（Command 请求参数绑定到的对象就叫命令对象）</li><li>表单对象（Form Object 提供给表单展示和提交到的对象就叫表单对象）。</li></ul></li><li>分工明确，而且扩展点相当灵活，可以很容易扩展，虽然几乎不需要。</li><li>由于命令对象就是一个 POJO，无需继承框架特定 API，可以使用命令对象直接作为业务对象。</li><li>和 Spring 其他框架无缝集成，是其它 Web 框架所不具备的。</li><li>可适配，通过 HandlerAdapter 可以支持任意的类作为处理器。</li><li>可定制性，HandlerMapping、ViewResolver 等能够非常简单的定制。</li><li>功能强大的数据验证、格式化、绑定机制。</li><li>利用 Spring 提供的 Mock 对象能够非常简单的进行 Web 层单元测试。</li><li>本地化、主题的解析的支持，使我们更容易进行国际化和主题的切换。</li><li>强大的 JSP 标签库，使 JSP 编写更容易。</li></ol><p>………………还有比如RESTful风格的支持、简单的文件上传、约定大于配置的契约式编程支持、基于注解的零配置支持等等。</p><h2 id="SpringMVC和Struts2的优劣分析">1.3 SpringMVC和Struts2的优劣分析</h2><p>共同点：</p><ul><li>它们都是表现层框架，都是基于 MVC 模型编写的。</li><li>它们的底层都离不开原始 ServletAPI。</li><li>它们处理请求的机制都是一个核心控制器。</li></ul><p>区别：</p><ul><li>Spring MVC 的入口是 Servlet, 而 Struts2 是 Filter</li><li>Spring MVC 是基于方法设计的，而 Struts2 是基于类，Struts2 每次执行都会创建一个动作类。所以 Spring MVC 会稍微比 Struts2 快些。</li><li>Spring MVC 使用更加简洁,同时还支持 JSR303, 处理 ajax 的请求更方便<blockquote><p>(JSR303 是一套 JavaBean 参数校验的标准，它定义了很多常用的校验注解，我们可以直接将这些注解加在我们 JavaBean 的属性上面，就可以在需要校验的时候进行校验了。)</p></blockquote></li><li>Struts2 的 OGNL 表达式使页面的开发效率相比 Spring MVC 更高些，但执行效率并没有比 JSTL 提升，尤其是 struts2 的表单标签，远没有 html 执行效率高。</li></ul><h1 id="入门案例">2 入门案例</h1><h2 id="maven配置">2.1 maven配置</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>5.2.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="web-xml配置">2.2 web.xml配置</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:spring-mvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre><p>DispatcherServlet就是用于分发请求的，这里可以视为过滤器。它配合Controller中的<code>@RequestMapping</code>分发请求。</p><p>init-param里面的<code>contextConfigLocation</code>指引springmvc去加载spring配置</p><h2 id="Spring配置文件">2.3 Spring配置文件</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd      http://www.springframework.org/schema/context      http://www.springframework.org/schema/context/spring-context.xsd      http://www.springframework.org/schema/mvc      http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--启用组件扫描--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.test.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--启动SpringMVC的注解功能，完成请求和注解POJO的映射--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置视图解析器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/pages/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h2 id="控制类编写">2.4 控制类编写</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/showUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">ShowUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"ShowUser"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里的<code>@RequestMapping</code>代表要访问项目目录下的<code>/user/showUser</code>才会被分发到该Controller类</p><p>注意返回的字符串配合视图解析器会跳转到<code>/WEB-INF/pages/ShowUser.jsp</code></p><h1 id="入门案例涉及的组件">3 入门案例涉及的组件</h1><p><img src="https://api.codetool.top/img/15827432872340.png" alt></p><h2 id="DispatcherServlet">3.1 DispatcherServlet</h2><p>前端控制器：用户请求到达前端控制器，它就相当于 mvc 模式中的 c，dispatcherServlet 是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet 的存在降低了组件之间的耦合性。</p><h2 id="HandlerMapping">3.2 HandlerMapping</h2><p>处理器映射器：HandlerMapping 负责根据用户请求找到 Handler 即处理器，SpringMVC 提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</p><h2 id="Handler">3.3 Handler</h2><p>处理器：它就是我们开发中要编写的具体业务控制器。由 DispatcherServlet 把用户请求转发到 Handler。由Handler 对具体的用户请求进行处理。</p><h2 id="HandlerAdapter">3.4 HandlerAdapter</h2><p>处理器适配器：通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</p><h2 id="View-Resolver">3.5 View Resolver</h2><p>视图解析器：View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。</p><h2 id="View">3.6 View</h2><p>SpringMVC 框架提供了很多的 View 视图类型的支持，包括：jstlView、freemarkerView、pdfView等。我们最常用的视图就是 jsp。</p><p>一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。</p><h2 id="总结">3.7 总结</h2><p>在 SpringMVC 的各个组件中，处理器映射器、处理器适配器、视图解析器称为 SpringMVC 的三大组件。</p><p>使用 <code>&lt;mvc:annotation-driven&gt;</code> 自动加载 HandlerMapping（处理映射器）和HandlerAdapter（处理适配器），可用在 <code>SpringMVC.xml</code> 配置文件中使用<code>&lt;mvc:annotation-driven&gt;</code>替代注解处理器和适配器的配置。</p><h1 id="RequestMapping注解">4 RequestMapping注解</h1><h2 id="value属性">4.1 value属性</h2><p>value属性就是path属性的别名，填需要指定请求的地址，可以填写：</p><ol><li><p>普通的具体值<br><code>@RequestMapping(&quot;/user&quot;)</code></p></li><li><p>含有某一变量的一类值</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/{userId}/deleteUser"</span><span class="token punctuation">,</span>method<span class="token operator">=</span>RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span> <span class="token keyword">public</span> String <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String userId<span class="token punctuation">)</span><span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"delete:"</span><span class="token operator">+</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token string">"ShowUser"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>含正值表达式的一类值</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/{userBirth:\\d{4}-\\d{2}-\\d{2}}/updateUser"</span><span class="token punctuation">,</span>method<span class="token operator">=</span>RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span> <span class="token keyword">public</span> String <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String userBirth<span class="token punctuation">)</span><span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"userBirth:"</span><span class="token operator">+</span>userBirth<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token string">"ShowUser"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h2 id="method属性">4.2 method属性</h2><p>GET\POST\PUT\DELETE…</p><h2 id="consumes属性">4.3 consumes属性</h2><p>指定处理请求的提交内容类型，例如<code>application/json</code>、<code>text/html</code></p><h2 id="produces属性">4.4 produces属性</h2><p>指定返回的内容类型，仅当request请求头中的Accept类型中包含该指定类型才返回。</p><h2 id="params属性">4.5 params属性</h2><p>指定request中必须包含某些参数值时才让该方法处理请求</p><h2 id="headers属性">4.6 headers属性</h2><p>指定request中必须包含某些指定的header值时才让该方法处理请求</p><h1 id="spring前后台交互">5 spring前后台交互</h1><h2 id="Controller获取前台传递的参数">5.1 Controller获取前台传递的参数</h2><p>（GET参数、POST参数等）</p><h3 id="直接通过形参获取">5.1.1 直接通过形参获取</h3><p>形参的名字必须和前端传递的数据名一样</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/addUser"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">ShowUser</span><span class="token punctuation">(</span>Model model<span class="token punctuation">,</span>String name<span class="token punctuation">,</span>Integer age<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"age:"</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"ShowUser"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果不一致可以使用<code>@ModelAttribute</code>或<code>@RequestParam</code>来指定形参要接受的参数的值。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/addUser"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">ShowUser</span><span class="token punctuation">(</span>Model model<span class="token punctuation">,</span> <span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String nickname<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token operator">+</span>nickname<span class="token operator">+</span><span class="token string">"age:"</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"ShowUser"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="使用对象接受前台传递的参数">5.1.2 使用对象接受前台传递的参数</h3><p>前台传递的参数名必须和对象的属性名一致</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/addUser"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">ShowUser</span><span class="token punctuation">(</span>Model model<span class="token punctuation">,</span> User user<span class="token punctuation">,</span><span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>String nickname<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token operator">+</span>nickname<span class="token operator">+</span><span class="token string">"age:"</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"ShowUser"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>当<code>@ModelAttribute</code>注解应用在方法前的时候，<strong>SpringMVC在调用目标处理方法前，会先逐个调用在方法级上标注了<code>@ModelAttribute</code>的方法（把它看成获取必要属性的前置方法）</strong></p></blockquote><p>如下面的代码可以实现在每次调用处理方法前获取request response session</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseController</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> HttpServletRequest request<span class="token punctuation">;</span>    <span class="token keyword">protected</span> HttpServletResponse request<span class="token punctuation">;</span>    <span class="token keyword">protected</span> HttpSession session<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ModelAttribute</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setReqAndRes</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>HttpServletResponse response<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>request <span class="token operator">=</span> request<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>response <span class="token operator">=</span> response<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="使用集合接受前台传递的参数">5.1.3 使用集合接受前台传递的参数</h3><p>如果是list则前台传递的参数名是<code>list[index].propName</code>（index下标，propName属性名）</p><p>如果是Map则前台传递的参数名是<code>map[&#39;key&#39;].propName</code>（key键名，propName属性名）</p><h2 id="Controller传递参数到前台">5.2 Controller传递参数到前台</h2><h3 id="直接通过request对象传递">5.2.1 直接通过request对象传递</h3><p>直接通过获取的request的setAttribute方法传递。</p><h3 id="直接通过返回值ModelAndView对象传递">5.2.2 直接通过返回值ModelAndView对象传递</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/showUser"</span><span class="token punctuation">)</span><span class="token keyword">public</span> ModelAndView <span class="token function">ShowUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">"ShowUser"</span><span class="token punctuation">,</span><span class="token string">"message"</span><span class="token punctuation">,</span><span class="token string">"test message!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>第一个参数是<strong>逻辑视图字符串</strong></li><li>第二个参数是要往ShowUser视图上<strong>传递参数的名称</strong>。</li><li>第三个参数是要往ShowUser视图上<strong>传递参数的值</strong>。</li></ul><p>当要传递多个参数时可以多次调用<code>ModelAndView.addObject(&quot;attributeName&quot;,attributeValue)</code>。</p><p><strong>这些数据也是存放在request中的。</strong></p><h3 id="直接通过参数列表中添加形参ModelMap传递">5.2.3 直接通过参数列表中添加形参ModelMap传递</h3><p>写成接口Model也行</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/addUser"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">ShowUser</span><span class="token punctuation">(</span>ModelMap map<span class="token punctuation">)</span><span class="token punctuation">{</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span><span class="token string">"test message!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"attributeName"</span><span class="token punctuation">,</span><span class="token string">"attributeValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"showUser"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="配置解决中文乱码的过滤器">5.3 配置解决中文乱码的过滤器</h2><p>web.xml:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre><h2 id="自定义类型转换器">5.4 自定义类型转换器</h2><p>第一步：定义一个类，实现 Converter 接口，该接口有两个泛型参数。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Converter</span><span class="token operator">&lt;</span>S<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//S:表示接受的类型，T：表示目标类型</span>    <span class="token comment" spellcheck="true">/**    * 实现类型转换的方法    */</span>    <span class="token annotation punctuation">@Nullable</span>    T <span class="token function">convert</span><span class="token punctuation">(</span>S source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToDateConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Date<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * 用于把 String 类型转成日期类型    */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Date <span class="token function">convert</span><span class="token punctuation">(</span>String source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DateFormat format <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"请输入要转换的日期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Date date <span class="token operator">=</span> format<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> date<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"输入日期有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>第二步：在 spring 配置文件中配置类型转换器。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置类型转换器工厂 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>converterService<span class="token punctuation">"</span></span><span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.context.support.ConversionServiceFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 给工厂注入一个新的类型转换器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>converters<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 配置自定义类型转换器 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.web.converter.StringToDateConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token attr-name">conversion-service</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>converterService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span></code></pre><h1 id="SpringMVC常用注解">6 SpringMVC常用注解</h1><h2 id="Controller">6.1 @Controller</h2><p>控制器负责处理由DispatcherServlet分发过来的请求，它把用户请求的数据经过业务处理层处理之后封装成一个Model，然后再把该Model返回给对应的View进行展示。SpringMVC使用@Controller定义控制器，它还允许自动检测定义在类路径下的组件并自动注册。</p><h2 id="RequestMapping">6.2 @RequestMapping</h2><p>将URL映射到整个类或特定的处理方法上。</p><h2 id="PathVariable">6.3 @PathVariable</h2><p>将注解方法参数绑定到URI模板遍历的值上。”/{userId}/deleteUser”</p><p>url 支持占位符是 spring3.0 之后加入的。是 springmvc 支持 rest 风格 URL 的一个重要标志。</p><p>实例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/usePathVariable/{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">usePathVariable</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="RequestParam">6.4 @RequestParam</h2><p>将请求的参数绑定到方法中的参数上。</p><p>属性：</p><ul><li>value：请求参数中的名称。</li><li>required：请求参数中是否必须提供此参数。默认值：true。表示必须提供，如果不提供将报错。</li></ul><h2 id="RequestBody">6.5 @RequestBody</h2><p>方法参数应该被绑定到HTTP的Body上。直接使用得到是 key=value&amp;key=value…结构的数据。<br>get 请求方式不适用。</p><p>属性：</p><ul><li>required：是否必须有请求体。默认值是:true。当取值为 true 时,get 请求方式会报错。如果取值为 false，get 请求得到是 null。</li></ul><h2 id="RequestHeader">6.6 @RequestHeader</h2><p>用于获取请求消息头。</p><p>属性：</p><ul><li>value：提供消息头名称</li><li>required：是否必须有此消息头</li></ul><h2 id="CookieValue">6.7 @CookieValue</h2><p>用于把指定 cookie 名称的值传入控制器方法参数。</p><p><strong>属性：</strong><br>value：指定 cookie 的名称。<br>required：是否必须有此 cookie。</p><h2 id="SessionAttribute">6.8 @SessionAttribute</h2><p>用于多次执行控制器方法间的参数共享。</p><p>用在方法参数上。</p><p>属性：</p><ul><li>value：用于指定存入的属性名称。</li></ul><h2 id="SessionAttributes">6.9 @SessionAttributes</h2><p>用于多次执行控制器方法间的参数共享。</p><p>用在类上。</p><p>属性：</p><ul><li>value：用于指定存入的属性名称</li><li>type：用于指定存入的数据类型。</li></ul><p>实例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@SessionAttributes</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">,</span>types <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/addUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">ShowUser</span><span class="token punctuation">(</span>ModelMap map<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> userAge<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"age:"</span><span class="token operator">+</span>userAge<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span>userAge<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"ShowUser"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>调用<code>map.put(&quot;age&quot;,userAge);</code>的时候就会同步存到session域中。</p><h2 id="RestController">6.10 @RestController</h2><p>创建REST类型的控制器（RESTFUL API）</p><h2 id="HttpEntity（不是注解）">6.11 HttpEntity（不是注解）</h2><p>能获得request请求和response响应，还能访问请求和请求头</p><h2 id="ModelAttribute">6.12 @ModelAttribute</h2><p>可以作用在方法或方法参数上。作用在方法上时，表明该方法的目的时添加一个或多个模型属性。</p><p><code>@ModelAttribute</code>一共具有如下三个作用：</p><ol><li><p>绑定请求参数到命令对象：放在功能处理方法的入参上时，用于将多个请求参数绑定到一个命令对象，从而简化绑定流程，而且自动暴露为模型数据用于视图页面展示时使用；</p></li><li><p>暴露表单引用对象为模型数据：放在处理器的一般方法（非功能处理方法）上时，是为表单准备要展示的表单引用对象，如注册时需要选择的所在城市等，而且在执行功能处理方法（@RequestMapping注解的方法）之前，自动添加到模型对象中，用于视图页面展示时使用；</p></li><li><p>暴露@RequestMapping方法返回值为模型数据：放在功能处理方法的返回值上时，是暴露功能处理方法的返回值为模型数据，用于视图页面展示时使用。</p></li></ol><h1 id="HiddentHttpMethodFilter">7 HiddentHttpMethodFilter</h1><h2 id="作用">7.1 作用</h2><p>由于浏览器 form 表单只支持 GET 与 POST 请求，而 DELETE、PUT 等 method 并不支持，Spring3.0 添加了一个过滤器，可以将浏览器请求改为指定的请求方式，发送给我们的控制器方法，使得支持 GET、POST、PUT与 DELETE 请求。</p><h2 id="使用方法">7.2 使用方法</h2><ol><li>在 web.xml 中配置该过滤器。</li><li>请求方式必须使用 post 请求。</li><li>按照要求提供_method 请求参数，该参数的取值就是我们需要的请求方式。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;1 概述&lt;/h1&gt;&lt;h2 id=&quot;SpringMVC的概念&quot;&gt;1.1 SpringMVC的概念&lt;/h2&gt;&lt;p&gt;SpringMVC 是一种基于 Java 的实现 MVC 设计模型的请求驱动类型的轻量级 Web 框架，属于 Spring FrameWork 的
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SpringMVC" scheme="https://www.codetool.top/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>leetcode11-盛最多水的容器</title>
    <link href="https://www.codetool.top/article/leetcode11-%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <id>https://www.codetool.top/article/leetcode11-盛最多水的容器/</id>
    <published>2020-02-26T17:17:55.000Z</published>
    <updated>2020-02-26T17:26:42.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定 n 个非负整数 a<sub>1</sub>，a<sub>2</sub>，…，a<sub>n</sub>，每个数代表坐标中的一个点 (i, a<sub>i</sub>) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, a<sub>i</sub>) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p><strong>说明：</strong> 你不能倾斜容器，且 n 的值至少为 2。</p><p><img src="https://api.codetool.top/img/1582737645282.jpg" alt><br>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p><p><strong>示例:</strong></p><blockquote><p><strong>输入:</strong> [1,8,6,2,5,4,8,3,7]<br><strong>输出:</strong> 49</p></blockquote><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>两个线段之间形成的区域始终受较短长度的限制。 另外，两个线段之间的距离越大，获得的面积越大。</p><p>我们在数组中使用两个指针，一个在开头，一个在末尾。 每次移动将较短的线段向较长的线段移动一步。并在过程中记录出现的最大面积。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxArea</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> height<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定 n 个非负整数 a&lt;sub&gt;1&lt;/sub&gt;，a&lt;sub&gt;2&lt;/sub&gt;，…，a&lt;sub&gt;n&lt;/sub&gt;，每个数代表坐标中的一个点 (i, a&lt;sub&gt;i&lt;/sub&gt;) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="双指针技巧" scheme="https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
</feed>
