<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>代码段小站</title>
  <icon>https://www.gravatar.com/avatar/4c71a513a84e4d430b9f9aed224237fc</icon>
  <subtitle>CodeTool - 个人计算机类练手小博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.codetool.top/"/>
  <updated>2020-03-25T07:56:15.720Z</updated>
  <id>https://www.codetool.top/</id>
  
  <author>
    <name>Rhett Peng</name>
    <email>pctdyx@qq.net</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决浏览器的跨域问题-CORS</title>
    <link href="https://www.codetool.top/article/%E8%A7%A3%E5%86%B3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98-CORS/"/>
    <id>https://www.codetool.top/article/解决浏览器的跨域问题-CORS/</id>
    <published>2020-03-25T07:53:56.000Z</published>
    <updated>2020-03-25T07:56:15.720Z</updated>
    
    <content type="html"><![CDATA[<p>为了防止XSS攻击、CSRF攻击等跨域脚本调用问题，浏览器通常具有同源策略，同源意味着：</p><ul><li>协议相同</li><li>域名相同</li><li>端口相同</li></ul><p>而同源策略限制了：</p><ol><li>不能向工作在不同源的的服务请求数据（client to server）。</li><li>无法获取不同源的 document/cookie 等 BOM 和 DOM，可以说任何有关另外一个源的<br>信息都无法得到 （client to client）。</li></ol><p>存在例外情况（scrpit,img等标签）</p><h1 id="CORS概述">1 CORS概述</h1><p>较早较主流解决跨域问题的方法是JSONP，它利用的就是script-src不会有跨域问题，将回调函数名传给后端，让后端把包裹着响应数据的回调函数（一条js语句）传回来，实现动态回调的效果。</p><p>JSONP的限制是，服务端首先要支持，即能接受客户端传来的回调函数名，并且JSONP只能发起GET请求。</p><p>CORS是一种规范化的跨域请求解决方案，安全可靠，是目前的主流跨域方案。</p><p>只要浏览器检测到响应头带上了 CORS，并且允许的源包括了本网站，那么就不会拦截请求<br>响应。</p><p>CORS 把请求分为两种，一种是简单请求，另一种是需要触发预检请求，这两者是相对的，怎样才算“不简单”？只要属于下面的其中一种就不是简单请求：</p><ol><li>使用了除 <code>GET/POST/HEAD</code> 之外的请求方式，如 PUT/DELETE</li><li>使用了除 <code>Content-Type/Accept</code> 等几个常用的 http 头这个时候就认为需要<strong>先发个预检请求</strong></li></ol><h1 id="简单请求">2 简单请求</h1><p>对于简单请求，浏览器直接发出 CORS 请求。具体来说，<strong>就是在请求头之中，增加一个 Origin字段。</strong></p><p>下面是一个例子，浏览器发现这次跨源 AJAX 请求是简单请求，就自动在头信息之中，添加<br>一个 Origin 字段。</p><pre><code>GET /cors HTTP/1.1Origin: http://api.bob.comHost: api.alice.comAccept-Language: en-USConnection: keep-aliveUser-Agent: Mozilla/5.0...</code></pre><p>上面的头信息中，Origin 字段用来说明，本次请求来自哪个源（协议 + 域名 + 端口）。<strong>服务器根据这个值，决定是否同意这次请求。</strong></p><p>如果 Origin 指定的源，不在许可范围内，服务器会返回一个正常的 HTTP 回应。浏览器发现，这个回应的头信息没有包含 <code>Access-Control-Allow-Origin</code> 字段（详见下文），就知道出错了，从而抛出一个错误，被 XMLHttpRequest 的 onerror 回调函数捕获。注意，这种错误无法通过状态码识别，因为 HTTP 回应的状态码有可能是 200。</p><p>如果 Origin 指定的域名在许可范围内，服务器返回的响应，会多出几个头信息字段。</p><pre><code>Access-Control-Allow-Origin: http://api.bob.comAccess-Control-Allow-Credentials: trueAccess-Control-Expose-Headers: FooBarContent-Type: text/html; charset=utf-8</code></pre><p>上面的头信息之中，有三个与 CORS 请求相关的字段，都以 Access-Control-开头。</p><ol><li><p><code>Access-Control-Allow-Origin</code><br>该字段是必须的。它的值要么是<strong>请求时 Origin 字段的值</strong>，要么是<strong>一个*，表示接受任意域名的请求。</strong></p></li><li><p><code>Access-Control-Allow-Credentials</code><br>该字段可选。它的值是一个布尔值，表示<strong>是否允许发送 Cookie。</strong>默认情况下，Cookie 不包括在 CORS 请求之中。设为 true，即表示服务器明确许可，Cookie 可以包含在请求中，一起发给服务器。<strong>这个值也只能设为 true，如果服务器不要浏览器发送 Cookie，删除该字段即可。</strong></p></li><li><p><code>Access-Control-Expose-Headers</code><br>该字段可选。CORS 请求时，XMLHttpRequest 对象的 <code>getResponseHeader()</code>方法只能拿到 6个基本字段：Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。<strong>如果想拿到其他字段，就必须在 <code>Access-Control-Expose-Headers</code> 里面指定。</strong>上面的例子指定，getResponseHeader(‘FooBar’) 可以返回 FooBar 字段的值。</p></li></ol><h1 id="非简单请求">3 非简单请求</h1><p>简单请求是那种对服务器有特殊要求的请求，比如请求方法是 PUT 或 DELETE，或者Content-Type 字段的类型是 application/json。</p><p>非简单请求的 CORS 请求，会在正式通信之前，增加一次 HTTP 查询请求，称为<strong>“预检”请求</strong>（preflight）。</p><p><strong>浏览器先询问服务器，当前网页所在的域名是否在服务器的许可名单之中，以及可以使用哪些 HTTP 动词和头信息字段。</strong>只有得到肯定答复，浏览器才会发出正式 XMLHttpRequest 请求，否则就报错。</p><p><strong>“预检”请求用的请求方法是 <code>OPTIONS</code></strong>，表示这个请求是用来询问的。头信息里面，关键字段是 Origin，表示请求来自哪个源。</p><p>除了 Origin 字段，”预检”请求的头信息包括两个特殊字段。</p><ol><li><code>Access-Control-Request-Method</code></li></ol><p>该字段是必须的，用来列出浏览器的 CORS 请求会用到哪些 HTTP 方法</p><ol start="2"><li><code>Access-Control-Request-Headers</code></li></ol><p>该字段是一个逗号分隔的字符串，指定浏览器 CORS 请求会额外发送的头信息字段</p><p>服务器收到”预检”请求以后，检查了Origin 、Access-Control-Request-Method 和Access-Control-Request-Headers 字段以后，确认允许跨源请求，就可以做出回应。<strong>如果浏览器否定了”预检”请求，会返回一个正常的 HTTP 回应，但是没有任何 CORS 相关的头信息字段。</strong>这时，浏览器就会认定，服务器不同意预检请求，因此触发一个错误，被XMLHttpRequest 对象的 onerror 回调函数捕获。</p><p>一旦服务器通过了”预检”请求，以后每次浏览器正常的 CORS 请求，就都跟简单请求一样，会有一个 Origin 头信息字段。服务器的回应，也都会有一个 <code>Access-Control-Allow-Origin</code> 头信息字段。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了防止XSS攻击、CSRF攻击等跨域脚本调用问题，浏览器通常具有同源策略，同源意味着：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;协议相同&lt;/li&gt;
&lt;li&gt;域名相同&lt;/li&gt;
&lt;li&gt;端口相同&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而同源策略限制了：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不能向工作在不同源
      
    
    </summary>
    
    
      <category term="项目/编程理论" scheme="https://www.codetool.top/categories/%E9%A1%B9%E7%9B%AE-%E7%BC%96%E7%A8%8B%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="基础知识" scheme="https://www.codetool.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>Http请求的幂等性</title>
    <link href="https://www.codetool.top/article/Http%E8%AF%B7%E6%B1%82%E7%9A%84%E5%B9%82%E7%AD%89%E6%80%A7/"/>
    <id>https://www.codetool.top/article/Http请求的幂等性/</id>
    <published>2020-03-25T04:50:46.000Z</published>
    <updated>2020-03-25T04:51:26.583Z</updated>
    
    <content type="html"><![CDATA[<p>对 HTTP 协议的使用实际上存在着两种不同的方式：一种是 RESTful 的，它把 HTTP 当成应用层协议，比较忠实地遵守了 HTTP 协议的各种规定；另一种是 SOA 的，它并没有完全把HTTP 当成应用层协议，而是把 HTTP 协议作为了传输层协议，然后在 HTTP 之上建立了自己的应用层协议。这里所讨论的 HTTP 幂等性主要针对 RESTful 风格的，但<strong>幂等性并不属于特定的协议，它是分布式系统的一种特性</strong>；所以，不论是 SOA 还是 RESTful 的 Web API 设计都应该考虑幂等性。下面将介绍 HTTP GET、DELETE、PUT、POST 四种主要方法的语义和幂等性。</p><h1 id="GET">1 GET</h1><p>HTTP GET 方法用于获取资源，不应有副作用，所以是幂等的。</p><p>比如：<code>GET http://www.bank.com/account/123456</code>，不会改变资源的状态，不论调用一次还是 N 次都没有副作用。请注意，这里强调的是<strong>一次和 N 次具有相同的副作用，而不是每次GET 的结果相同。</strong> <code>GET http://www.news.com/latest-news</code> 这个 HTTP 请求可能会每次得到不同的结果，但它本身并没有产生任何副作用，因而是满足幂等性的。</p><h1 id="DELETE">2 DELETE</h1><p>HTTP DELETE 方法用于删除资源，有副作用，但它应该满足幂等性。</p><p>比如：DELETE <a href="http://www.forum.com/article/4231，**调用一次和" target="_blank" rel="noopener">http://www.forum.com/article/4231，**调用一次和</a> N 次对系统产生的副作用是相同的**（重复删除也不会引起错误），即删掉 id 为 4231 的帖子；因此，调用者可以多次调用或刷新页面而不必担心引起错误。</p><h1 id="POST-amp-PUT">3 POST &amp; PUT</h1><p>比较容易混淆的是 HTTP POST 和 PUT。POST 和 PUT 的区别容易被简单地误认为“POST 表示创建资源，PUT 表示更新资源”；而实际上，二者均可用于创建资源，更为本质的差别是在幂等性方面。在 HTTP 规范中对 POST 和 PUT 是这样定义的：POST 所对应的 URI 并非创建的资源本身，而是资源的接收者。比如：<code>POST http://www.forum.com/articles</code> 的语义是在 <a href="http://www.forum.com/articles" target="_blank" rel="noopener">http://www.forum.com/articles</a> 下创建一篇帖子，HTTP 响应中应包含帖子的创建状态以及帖子的 URI。<strong>两次相同的 POST 请求会在服务器端创建两份资源，它们具有不同的 URI；所以，POST 方法不具备幂等性。</strong>而 PUT 所对应的 URI 是要创建或更新的资源本身。比如：<code>PUT http://www.forum/articles/4231</code> 的语义是创建或更新 ID 为 4231 的帖子。<strong>对同一 URI 进行多次 PUT 的副作用和一次 PUT 是相同的；因此，PUT 方法具有幂等性。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对 HTTP 协议的使用实际上存在着两种不同的方式：一种是 RESTful 的，它把 HTTP 当成应用层协议，比较忠实地遵守了 HTTP 协议的各种规定；另一种是 SOA 的，它并没有完全把HTTP 当成应用层协议，而是把 HTTP 协议作为了传输层协议，然后在 HTTP
      
    
    </summary>
    
    
      <category term="项目/编程理论" scheme="https://www.codetool.top/categories/%E9%A1%B9%E7%9B%AE-%E7%BC%96%E7%A8%8B%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="计算机网络" scheme="https://www.codetool.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>数据库技术之分库分表</title>
    <link href="https://www.codetool.top/article/%E6%95%B0%E6%8D%AE%E5%BA%93%E6%8A%80%E6%9C%AF%E4%B9%8B%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8/"/>
    <id>https://www.codetool.top/article/数据库技术之分库分表/</id>
    <published>2020-03-25T02:49:39.000Z</published>
    <updated>2020-03-25T02:52:55.129Z</updated>
    
    <content type="html"><![CDATA[<p>推荐阅读：</p><p><a href="../MySQL之分区表介绍">MySQL之分区表介绍</a></p><p>区别于分区的是，分区一般都是放在单机里的，用的比较多的是时间范围分区，方便归档。只不过分库分表需要代码实现，分区则是mysql内部实现。分库分表和分区并不冲突，可以结合使用。</p><h1 id="分库">1 分库</h1><p>需要分库的情形：</p><ol><li>随着单库中的数据量越来越大，相应的，查询所需要的时间也越来越多，这个时候，数据的处理效率遇到了瓶颈</li><li>单库发生意外的时候，需要修复的是所有的数据，而多库中的一个库发生意外的时候，只需要修复一个库（当然，也可以用物理分区的方式处理这种问题）</li></ol><p>通常，在读写分离之后，数据库的性能再次遇到瓶颈，就考虑分库。</p><p>我们通常称分库为垂直的，因为它相对水平分表、垂直分表的概念来说是垂直的，即<strong>按业务划分，通常是将库中的表按照功能模块、关系密切程度划分出来，部署到不同库上。</strong></p><p>比如用户一个库,商品一个库,订单一个库。 一个购物网站对外提供服务时,会同时对用户、商品、订单表进行操作。没拆分之前, 全部都是落到单一的库上的,这会让数据库的单库处理能力成为瓶颈。如果垂直分库后还是将用户、商品、订单放到同一个服务器上,只是分到了不同的库,这样虽然会减少单库的压力,但是随着用户量增大,这会让整个数据库的处理能力成为瓶颈,还有单个服务器的磁盘空间、内存也会受非常大的影响。 所以我们要将其拆分到多个服务器上，这样上面的问题都解决了，以后也不会面对单机资源问题。</p><h1 id="分表">2 分表</h1><p>分表分为水平分表和垂直分表，和我们之前介绍的水平分区和垂直分区的概念类似，mysql不支持垂直分区，但我们可以手动垂直分表，更可能是借助数据库中间件进行分库分表。</p><p><img src="https://api.codetool.top/img/15851036602761.png" alt="垂直分表"> </p><p><strong>垂直分表解决的是一些非热点字段影响查询性能的问题</strong>，通常将热点字段和非热点字段划分开。而<strong>水平分表解决的是单表数据量（行数）大的问题</strong>。水平分表的方法和我们上次介绍的水平分区的方法很相似，可以通过range、list、hash等方法分表。</p><p>水平分表和垂直分表可以结合使用，<strong>分表配合分库使用还可以将表分到不同的数据库中。（我们称作分库分表）</strong></p><h1 id="常用的分库分表中间件">3 常用的分库分表中间件</h1><p>简单易用的组件：</p><ul><li>当当sharding-jdbc</li><li>蘑菇街TSharding</li></ul><p>强悍重量级的中间件：</p><ul><li>sharding</li><li>TDDL Smart Client的方式（淘宝）</li><li>Atlas(Qihoo 360)</li><li>alibaba.cobar(是阿里巴巴（B2B）部门开发)</li><li>MyCAT（基于阿里开源的Cobar产品而研发）</li><li>Oceanus(58同城数据库中间件)</li><li>OneProxy(支付宝首席架构师楼方鑫开发)</li><li>vitess（谷歌开发的数据库中间件）</li></ul><h1 id="分库分表引起的问题">4 分库分表引起的问题</h1><ul><li>分布式事务的问题，数据的完整性和一致性问题。</li><li>数据操作维度问题：用户、交易、订单各个不同的维度，用户查询维度、产品数据分析维度的不同对比分析角度。</li><li>跨库联合查询的问题，可能需要两次查询</li><li>跨节点的 count、order by、group by 以及聚合函数问题，可能需要分别在各个节点上得到结果后在应用程序端进行合并</li><li>额外的数据管理负担，如：访问数据表的导航定位</li><li>额外的数据运算压力，如：需要在多个节点执行，然后再合并计算</li><li>程序编码开发难度提升，没有太好的框架解决，更多依赖业务看如何分，如何合，是个难题</li></ul><p>水平分表会影响索引查询，特别是分到了不同的库中，查询效率会变得较低，所以不要轻易地水平分表。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;推荐阅读：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../MySQL之分区表介绍&quot;&gt;MySQL之分区表介绍&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;区别于分区的是，分区一般都是放在单机里的，用的比较多的是时间范围分区，方便归档。只不过分库分表需要代码实现，分区则是mysql内部实现。分库分表和分区并
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="优化" scheme="https://www.codetool.top/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="数据库" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>leetcode111-二叉树的最小深度</title>
    <link href="https://www.codetool.top/article/leetcode111-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/"/>
    <id>https://www.codetool.top/article/leetcode111-二叉树的最小深度/</id>
    <published>2020-03-25T01:48:36.000Z</published>
    <updated>2020-03-25T01:55:40.782Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定一个二叉树，找出其最小深度。</p><p>最小深度是从根节点到最近叶子节点的最短路径上的节点数量。</p><p><strong>说明:</strong> 叶子节点是指没有子节点的节点。</p><p><strong>示例:</strong></p><p>给定二叉树 <code>[3,9,20,null,null,15,7]</code>,</p><pre><code>    3   / \  9  20    /  \   15   7</code></pre><p>返回它的最小深度  2.</p><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>BFS肯定是比DFS快的（最好情况），DFS需要搜索所有节点，BFS只要搜到哪一层有叶子节点就行了（虽然时间复杂度是一个量级的）</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> depth <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            TreeNode node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> depth<span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">{</span>                    depth<span class="token operator">++</span><span class="token punctuation">;</span>                    queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">==</span> null <span class="token operator">&amp;&amp;</span> node<span class="token punctuation">.</span>right <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> depth<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定一个二叉树，找出其最小深度。&lt;/p&gt;
&lt;p&gt;最小深度是从根节点到最近叶子节点的最短路径上的节点数量。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明:&lt;/strong&gt; 叶子节点是指没有子节点的节点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例:&lt;
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="BFS" scheme="https://www.codetool.top/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>谈谈对称加密、非对称加密、消息摘要以及数字签名</title>
    <link href="https://www.codetool.top/article/%E8%B0%88%E8%B0%88%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E3%80%81%E9%9D%9E%E5%AF%B9%E7%A7%B0%E5%8A%A0%E5%AF%86%E3%80%81%E6%B6%88%E6%81%AF%E6%91%98%E8%A6%81%E4%BB%A5%E5%8F%8A%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D/"/>
    <id>https://www.codetool.top/article/谈谈对称加密、非对称加密、消息摘要以及数字签名/</id>
    <published>2020-03-24T16:46:22.000Z</published>
    <updated>2020-03-24T16:46:53.092Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对称加密">1 对称加密</h1><p>加密方和解密方通过相同的密钥和算法进行加密和解密，所以双方事先知道密钥，并且密钥必须严格保密。</p><p>常见的对称加密算法：</p><p>DES、3DES、TDEA、RC5、Blowfish、IDEA</p><p>DES 的保密性仅取决于对密钥的保密，而算法是公开的。尽管人们在破译 DES 方面取得了许多进展，但至今仍未能找到比穷举搜索密钥更有效的方法。</p><p>DES 是世界上第一个公认的实用密码算法标准，它曾对密码学的发展做出了重大贡献。目前较为严重的问题是 DES 的密钥的长度。现在已经设计出来搜索 DES 密钥的专用芯片。</p><p><strong>对称加密的加密和解密需要使用相同的密钥，所以需要解决密钥配送问题，传输的过程必须安全。密钥管理也比较麻烦。</strong></p><h1 id="非对称加密">2 非对称加密</h1><p>需要两个密钥，公钥和私钥是一对，公钥加密的只能用私钥解，私钥加密的只能用公钥解，<strong>保护私钥，公开公钥。</strong></p><p>常见的非对称加密算法：</p><p>RSA</p><p><img src="https://api.codetool.top/img/15850665402329.png" alt></p><ul><li>若密钥能够实现安全交换，那么有可能会考虑仅使用公开密钥加密来通信。但是公开密钥加密与共享密钥加密相比，其处理速度要慢。</li><li>任何加密方法的安全性取决于密钥的长度，以及攻破密文所需的计算量。在这方面，公钥密码体制并不比传统加密体制更加优越</li><li>由于目前公钥加密算法的开销较大，在可见的将来还不会放弃传统的加密方法</li><li>公钥需要密钥分配协议，具体的分配过程并不比采用传统加密方法时更简单</li></ul><h1 id="消息摘要">3 消息摘要</h1><p>将信息以某种算法加密后就不可以解密，只有相同的文本以同样的方法加密可以得到同样的密文。</p><p>常见的摘要算法：</p><p>MD5、SHA-1、SHA-256</p><p>消息摘要算法使用的是一个<strong>单向散列函数</strong>，也称为消息摘要函数（message digest function)、哈希函数，<strong>适用于检查消息完整性的加密技术。</strong></p><p>单向散列函数有一个输入和一个输出，其中输入称为信息，输出称为散列值。单向散列函数可以根据消息的内容计算出散列值，篡改后的信息的散列值计算结果会不一样，所以散列值可以被用来检查消息的完整性。</p><p>消息摘要算法存在<strong>哈希冲突</strong>，即不同的消息经消息摘要算法加密后，可能是相同的密文，所以不能说密文一致源数据就一致。</p><p>尽管消息摘要不能解密，但只要知道该消息摘要的算法，使用足量的数据进行加密操作，可以得到<strong>字典（或彩虹表）</strong>，即能知道由哪些信息可以通过消息摘要获取该密文。但是好的消息摘要算法会尽可能避免碰撞，并且难以让攻击者根据密文找到能发生哈希冲突的信息。（消息摘要算法越复杂越难使用这种方法解密）</p><p>sha 比 md5 更安全一些，sha 比 md5 哈希碰撞的概率更小一些。</p><p><strong>消息摘要算法的应用：</strong></p><h2 id="密码">3.1 密码</h2><p>利用单向散列加密的特性，可以进行密码加密保存，即用户注册时输入的密码不直接保存到数据库，而是对密码进行单向散列加密，将密文存入数据库，用户登录时，进行密码验证，同样计算得到输入密码的密文，并和数据库中的密文比较，如果一致，则密码验证成功。</p><p>这样保存在数据库中的是用户输入的密码的密文，而且不可逆地计算得到密码的明文，因此即使数据库被拖库（指网站遭到入侵后，黑客窃取其数据库），也不会泄露用户的密码信息。</p><p>为了加强单向散列计算的安全性，<strong>还会给散列算法加点盐，salt 相当于加密的密钥，增加破解的难度。盐一般都是跟 hash 一起保存在数据库里，或者作为 hash 字符串的一部分。salt是由系统随机生成的，并且只有系统知道。</strong> 这样，即便两个用户使用了同一个密码，由于系统为它们生成的 salt 值不同，他们的散列值也是不同的。</p><h2 id="数字签名">3.2 数字签名</h2><p>理解该部分的概念很重要，它就是HTTPS的原理。</p><p>参考链接： <a href="http://www.ruanyifeng.com/blog/2011/08/what_is_a_digital_signature.html" target="_blank" rel="noopener">数字签名是什么？ - 阮一峰的网络日志</a></p><p>数字签名的特性是：</p><ul><li>别人不能冒充我的签名（不可伪造）</li><li>我也不能否认上面的签名是我的（不可抵赖）</li></ul><p>数字签名又是靠什么保证不可伪造和不可抵赖两个特性呢？</p><p>答案是利用公钥加密系统。（非对称加密）</p><p>这样，如果你生成了一对 RSA 密钥，你把公钥公布出去，并告诉全世界人这个公钥是你的。之后你只要在发送的消息，比如“123456”，后面加上用私钥加密过的密文，其他人拿公钥解密，看解密得到的内容是不是“123456”就可以知道这个“123456”是不是你发的。</p><p>其他人因为没有对应的私钥，所以没法生成公钥可以解密的密文，所以是不可伪造的。</p><p>又因为公钥对应的私钥只有一个，所以只要能成功解密，那么发消息的一定是你，不会是其他人，所以是不可抵赖的。</p><p><strong>由于直接对原消息进行签名有安全性问题，而且原消息往往比较大，直接使用 RSA 算法进行签名速度会比较慢，所以我们一般对消息计算其摘要（使用 SHA-256 等安全的摘要算法），然后对摘要进行签名。只要使用的摘要算法是安全的（MD5、SHA-1 已经不安全了），那么这种方式的数字签名就是安全的。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对称加密&quot;&gt;1 对称加密&lt;/h1&gt;&lt;p&gt;加密方和解密方通过相同的密钥和算法进行加密和解密，所以双方事先知道密钥，并且密钥必须严格保密。&lt;/p&gt;
&lt;p&gt;常见的对称加密算法：&lt;/p&gt;
&lt;p&gt;DES、3DES、TDEA、RC5、Blowfish、IDEA&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="计算机相关" scheme="https://www.codetool.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="安全" scheme="https://www.codetool.top/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Web安全之CSRF攻击</title>
    <link href="https://www.codetool.top/article/Web%E5%AE%89%E5%85%A8%E4%B9%8BCSRF%E6%94%BB%E5%87%BB/"/>
    <id>https://www.codetool.top/article/Web安全之CSRF攻击/</id>
    <published>2020-03-24T15:49:03.000Z</published>
    <updated>2020-03-24T15:49:14.950Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考资源：</p><p><a href="https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html" target="_blank" rel="noopener">浅谈CSRF攻击方式 - hyddd - 博客园</a></p><p><a href="https://blog.csdn.net/hxpjava1/article/details/81011445" target="_blank" rel="noopener">面试问题如何预防csrf攻击_网络_mark’s technic world-CSDN博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/98062456" target="_blank" rel="noopener">Web安全之CSRF攻击 - 知乎</a></p><h1 id="概述">1 概述</h1><p>CSRF（Cross-site request forgery）跨站请求伪造，<strong>利用跨站请求，在用户不知情的情况下，以用户的身份伪造请求，其核心是利用了浏览器 Cookie 或者 Session，盗取用户身份。</strong></p><p>下面是 CSRF 的常见特性：</p><ul><li>依靠用户标识危害网站</li><li>利用网站对用户标识的信任，欺骗用户的浏览器发送 HTTP 请求给目标站点</li></ul><h1 id="原理">2 原理</h1><p>要完成一次CSRF攻击，受害者必须依次完成两个步骤：</p><ol><li>登录受信任网站A，并在本地生成Cookie。</li><li>在不登出A的情况下，访问危险网站B。</li></ol><p><img src="https://api.codetool.top/img/15850637269803.jpg" alt></p><p>当用户第一次访问网站A时，网站A为用户设置了含有用户身份信息的Cookie，而用户在网站A的cookie未过期的时间内，访问了网站B，而网站B可能有多种方式令用户在不知情的情况下向网站A发起请求，例如</p><ul><li>使用<code>&lt;script&gt;</code>以类似jsonp的方式发送get请求</li><li>使用<code>&lt;img&gt;</code>的src属性发起get请求</li><li>js脚本静默发起请求（要解决跨域问题）</li><li>在网站B上含有通往网站A的超链接，诱骗用户点击发起请求。(有些还伪装成短域名，用户无法分辨)</li></ul><p>攻击者可以盗用你的登陆信息，以你的身份模拟发送各种请求。例如，当用户登录网络银行去查看其存款余额，在他没有退出时，就点击了一个 QQ 好友发来的链接，那么该用户银行帐户中的资金就有可能被转移到攻击者指定的帐户中。</p><p>所以遇到 CSRF 攻击时，将对终端用户的数据和操作指令构成严重的威胁。当受攻击的终端用户具有管理员帐户的时候，CSRF 攻击将危及整个 Web 应用程序。</p><h1 id="预防">3 预防</h1><p>防御手段主要是识别请求者身份。</p><ol><li>重要数据交互采用 POST 进行接收，<strong>当然是用 POST 也不是万能的，伪造一个 form 表单即可破解。</strong></li><li>使用验证码，只要是涉及到数据交互就先进行验证码验证，这个方法可以完全解决 CSRF。但是出于用户体验考虑，网站不能给所有的操作都加上验证码。因此<strong>验证码只能作为一种辅助手段，不能作为主要解决方案。</strong></li><li><strong>验证请求头中的 <code>Referer</code> 字段，该字段记录了此次 HTTP 请求的来源地址</strong>，最常见的应用是图片防盗链。但有些场景不适合将来源URL暴露给服务器，所以可以设置不用上传，并且referer属性是可以修改的，所以在服务器端校验referer属性并没有那么可靠。</li><li><strong>验证请求头中的 <code>origin</code> 字段，通过XMLHttpRequest、Fetch发起的跨站请求或者Post方法发送请求时，都会带上origin</strong>,所以服务器可以优先判断Origin属性，再根据实际情况判断是否使用referer判断。</li></ol><p>还有一种非常可靠的方法是使用token验证用户身份：</p><ul><li>在浏览器向服务器发起请求时，服务器生成一个CSRF Token（字符串）发送给浏览器，然后将该字符串放入页面中</li><li>浏览器请求时（如表单提交）需要带上这个CSRF Token。(可以存放在headers中)服务器收到请求后，验证CSRF是否合法，如果不合法拒绝即可。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文参考资源：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈CSRF攻击方式 - hyddd 
      
    
    </summary>
    
    
      <category term="计算机相关" scheme="https://www.codetool.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="安全" scheme="https://www.codetool.top/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Web安全之XSS攻击</title>
    <link href="https://www.codetool.top/article/Web%E5%AE%89%E5%85%A8%E4%B9%8BXSS%E6%94%BB%E5%87%BB/"/>
    <id>https://www.codetool.top/article/Web安全之XSS攻击/</id>
    <published>2020-03-24T15:16:34.000Z</published>
    <updated>2020-03-24T15:21:52.358Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考资源：</p><p><a href="https://www.jianshu.com/p/36b3578a6629" target="_blank" rel="noopener">XSS攻击常识及常见的XSS攻击脚本汇总 - 简书</a><br><a href="https://baike.baidu.com/item/XSS%E6%94%BB%E5%87%BB/954065?fr=aladdin" target="_blank" rel="noopener">XSS攻击_百度百科</a></p><h1 id="XSS概述">1 XSS概述</h1><p>跨站脚本攻击（Cross Site Scripting）,因为避免和CSS混淆，通常称之为XSS。</p><p>XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法<strong>注入恶意指令代码到网页</strong>，使用户加载并执行攻击者恶意制造的网页程序。比如运行在用户浏览器上的富文本编辑器脚本，如果不过滤用户输入的数据直接显示用户输入的 HTML 内容的话，就会有可能运行恶意的 JavaScript 脚本，导致页面结构错乱，Cookies 信息被窃取等问题。</p><p>XSS的原理是恶意攻击者往 Web 页面里插入恶意可执行网页脚本代码，<strong>当用户浏览该页之时，嵌入其中 Web 里面的脚本代码会被执行，从而可以达到攻击者盗取用户信息或其他侵犯用户安全隐私的目的。</strong></p><h1 id="类型">2 类型</h1><p>常见的 XSS 攻击类型有两种，一种是反射型，一种是持久型。</p><h2 id="反射型">2.1 反射型</h2><p>发出请求时，XSS代码出现在URL中，作为输入提交到服务器端，服务器端解析后响应，XSS代码随响应内容一起传回给浏览器，最后浏览器解析执行XSS代码。这个过程像一次反射，故叫反射型XSS。</p><p><strong>攻击者诱使用户点击一个嵌入恶意脚本的链接</strong>，达到攻击的目的。</p><p>比如新浪微博中，攻击者发布的微博中含有一个恶意脚本的 URL（URL 中包含脚本的链接），用户点击该 URL，脚本会自动关注攻击者的新浪微博 ID，发布含有恶意脚本 URL 的微博，攻击就被扩散了。</p><p><img src="https://api.codetool.top/img/15850628336666.jpg" alt></p><p>现实中，攻击者可以采用 XSS 攻击，偷取用户 Cookie、密码等重要数据，进而伪造交易、盗窃用户财产、窃取情报。</p><h2 id="持久型-存储型">2.2 持久型(存储型)</h2><p>存储型XSS和反射型XSS的差别仅在于，提交的代码会存储在服务器端（数据库，内存，文件系统等），下次请求目标页面时不用再提交XSS代码</p><p><img src="https://api.codetool.top/img/15850629151908.png" alt></p><p>最典型的例子是留言板XSS，<strong>用户提交一条包含XSS代码的留言存储到数据库，目标用户查看留言板时，那些留言的内容会从数据库查询出来并显示，浏览器发现有XSS代码，就当做正常的HTML与Js解析执行，于是触发了XSS攻击。</strong></p><h1 id="预防">3 预防</h1><p>Web 页面渲染的所有内容或者渲染的数据都必须来自于服务端。</p><p><strong>后端在入库前应该选择不相信任何前端数据，将所有的字段统一进行转义处理。</strong></p><p><strong>后端在输出给前端数据统一进行转义处理。</strong></p><p><strong>前端在渲染页面 DOM 的时候应该选择不相信任何后端数据，任何字段都需要做转义处理。</strong></p><h2 id="消毒-转义">3.1 消毒(转义)</h2><p>XSS 攻击者一般都是在请求中嵌入恶意脚本达到攻击的目的，这些脚本是一般在用户输入中<br>不常用的，如果进行过滤和消毒处理，即对某些 HTML 危险字符转义，如”&gt;”转义为”&gt;”，<br>就可以防止大部分的攻击。为了避免对不必要的内容错误转义，如”3&lt;5”中的”&lt;”需要进行文<br>本匹配后再转义，如”&lt;img src=”这样上下文中的”&lt;”才转义。</p><h2 id="HttpOnly">3.2 HttpOnly</h2><p>如果cookie中设置了HttpOnly属性，那么通过js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击，窃取cookie内容，这样就增加了cookie的安全性，即便是这样，也不要将重要信息存入cookie。</p><p><strong>浏览器禁止页面 JavaScript 访问带有 HttpOnly 属性的 Cookie。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文参考资源：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/36b3578a6629&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;XSS攻击常识及常见的XSS攻击脚本汇总 - 简书&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="计算机相关" scheme="https://www.codetool.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="安全" scheme="https://www.codetool.top/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Sentinel中的blockHandler和fallback以及规则持久化配置</title>
    <link href="https://www.codetool.top/article/Sentinel%E4%B8%AD%E7%9A%84blockHandler%E5%92%8Cfallback%E4%BB%A5%E5%8F%8A%E8%A7%84%E5%88%99%E6%8C%81%E4%B9%85%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
    <id>https://www.codetool.top/article/Sentinel中的blockHandler和fallback以及规则持久化配置/</id>
    <published>2020-03-24T12:13:38.000Z</published>
    <updated>2020-03-24T12:13:56.561Z</updated>
    
    <content type="html"><![CDATA[<h1 id="热点规则">1 热点规则</h1><p>何为热点？热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的 Top K 数据，并对其访问进行限制。比如：</p><ul><li>商品 ID 为参数，统计一段时间内最常购买的商品 ID 并进行限制</li><li>用户 ID 为参数，针对一段时间内频繁访问的用户 ID 进行限制</li></ul><p>热点参数限流会统计传入参数中的热点参数，并根据配置的限流阈值与模式，对包含热点参数的资源调用进行限流。热点参数限流可以看做是一种特殊的流量控制，仅对包含热点参数的资源调用生效。</p><p><img src="https://api.codetool.top/img/15850178478179.png" alt></p><p>Sentinel 利用 LRU 策略统计最近最常访问的热点参数，结合令牌桶算法来进行参数级别的流控。热点参数限流支持集群模式。</p><h2 id="实例">1.1 实例</h2><p>我们在模块<code>cloudalibaba-sentinel-service8401</code>的controller中新建方法：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testHotKey"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"testHotKey"</span><span class="token punctuation">,</span> blockHandler <span class="token operator">=</span> <span class="token string">"dealTestHotKey"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">testHotKey</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"p1"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> String p1<span class="token punctuation">,</span>                            <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"p2"</span><span class="token punctuation">,</span> required <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> String p2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"testHotKey -----"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> String <span class="token function">dealTestHotKey</span><span class="token punctuation">(</span>String p1<span class="token punctuation">,</span> String p2<span class="token punctuation">,</span> BlockException blockException<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"dealTestHotKey---------"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>它的含义是<code>/testHotKey</code>在sentinel中的资源名为<code>testHotKey</code>，如果被限流，则使用dealTestHotKey方法进行处理。</p><p>下面新建热点规则：</p><p><img src="https://api.codetool.top/img/15850278802044.png" alt></p><p>这里的参数索引对应的是方法中的参数索引，即p1，该配置的含义为，带p1参数的请求QPS不能超过1。否则会使用自己定义的<code>dealTestHotKey</code>方法进行处理。</p><p><img src="https://api.codetool.top/img/15850279959742.png" alt></p><h3 id="参数例外项">1.1.1 参数例外项</h3><p>如果热点key的取值为某个指定的取值，可以特殊地进行放行，将上面配置的热点规则进行编辑，选择高级选项，配置如下参数例外项：</p><p><img src="https://api.codetool.top/img/15850281122764.png" alt></p><p>该配置的含义为，如果p1的取值为5，则QPS的阈值可以提高至200。</p><h1 id="系统自适应限流">2 系统自适应限流</h1><p>Sentinel 系统自适应限流从整体维度对应用入口流量进行控制，结合应用的 Load、CPU 使用率、总体平均 RT、入口 QPS 和并发线程数等几个维度的监控指标，通过自适应的流控策略，让系统的入口流量和系统的负载达到一个平衡，让系统尽可能跑在最大吞吐量的同时保证系统整体的稳定性。</p><p><img src="https://api.codetool.top/img/15850287415415.png" alt></p><p>系统规则支持以下的模式：</p><ul><li>Load 自适应（仅对 Linux/Unix-like 机器生效）：系统的 load1 作为启发指标，进行自适应系统保护。当<strong>系统 load1 超过设定的启发值</strong>，且<strong>系统当前的并发线程数超过估算的系统容量</strong>时才会触发系统保护（BBR 阶段）。系统容量由系统的 <code>maxQps * minRt</code> 估算得出。设定参考值一般是 <code>CPU cores * 2.5</code>。</li><li>平均 RT(响应时间)：当单台机器上所有入口流量的平均 RT 达到阈值即触发系统保护，单位是毫秒。</li><li>并发线程数：当单台机器上所有入口流量的并发线程数达到阈值即触发系统保护。</li><li>入口 QPS：当单台机器上所有入口流量的 QPS 达到阈值即触发系统保护。</li><li>CPU 使用率（1.5.0+ 版本）：当系统 CPU 使用率超过阈值即触发系统保护（取值范围 0.0-1.0），比较灵敏。</li></ul><p>该功能的限流粒度为整个系统，需要谨慎配置。</p><h1 id="SentinelResource注解">3 SentinelResource注解</h1><p>关于<code>@SentinelResource</code>，最基本的使用就是：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateLimitController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/byResource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"byResource"</span><span class="token punctuation">,</span> blockHandler <span class="token operator">=</span> <span class="token string">"handleException"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> CommonResult <span class="token function">byResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"按资源名称限流测试OK"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>2020L<span class="token punctuation">,</span> IdUtil<span class="token punctuation">.</span><span class="token function">simpleUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> CommonResult <span class="token function">handleException</span><span class="token punctuation">(</span>BlockException blockException<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">,</span> blockException<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t服务不可用"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>它定义了资源名和<code>BlockException</code>的处理器，这个自定义的处理器<strong>参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为 <code>BlockException</code>。</strong></p><p>然而这样的使用存在着问题，例如没有默认的处理器，对每个方法都得配置，另外是把降级方法写进了controller，造成耦合。</p><h2 id="自定义限流处理类">3.1 自定义限流处理类</h2><p>将限流处理的方法提出来可以解耦。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomerBlockHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> CommonResult <span class="token function">handlerException1</span><span class="token punctuation">(</span>BlockException exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">"客户自定义，global handlerException---1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> CommonResult <span class="token function">handlerException2</span><span class="token punctuation">(</span>BlockException exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">444</span><span class="token punctuation">,</span> <span class="token string">"客户自定义，global handlerException---2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意内部的处理方法必须是static的。</p><p>那么在controller中可以写：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RateLimitController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/byResource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@SentinelResource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"byResource"</span><span class="token punctuation">,</span> blockHandlerClass <span class="token operator">=</span> CustomerBlockHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> blockHandler <span class="token operator">=</span> <span class="token string">"handlerException1"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> CommonResult <span class="token function">byResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CommonResult</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">"按资源名称限流测试OK"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Payment</span><span class="token punctuation">(</span>2020L<span class="token punctuation">,</span> IdUtil<span class="token punctuation">.</span><span class="token function">simpleUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="fallback和defaultFallback">3.2 fallback和defaultFallback</h2><p>blockHandler只能处理<code>BlockException</code>异常，即通过限流、熔断、降级配置的请求拦截抛出的异常，而对于服务本身抛出的异常不会处理，<strong>可以使用fallback函数来处理某个方法抛出的所有类型的异常（包括BlockException）</strong></p><p>相关的<code>@SentinelResource</code>的三个属性：</p><ul><li>fallback：fallback 函数名称，可选项，用于在抛出异常的时候提供 fallback 处理逻辑。fallback 函数可以针对所有类型的异常（除了 <code>exceptionsToIgnore</code> 里面排除掉的异常类型）进行处理。fallback 函数签名和位置要求：<ul><li>返回值类型必须与原函数返回值类型一致；</li><li>方法参数列表需要和原函数一致，或者可以额外多一个 Throwable 类型的参数用于接收对应的异常。</li><li>fallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定 <code>fallbackClass</code> 为对应的类的 Class 对象，注意对应的函数必需为 <code>static</code> 函数，否则无法解析。</li></ul></li><li><code>defaultFallback</code>：<strong>默认的 fallback 函数名称</strong>，可选项，通常用于通用的 fallback 逻辑（即可以用于很多服务或方法）。默认 fallback 函数可以针对所有类型的异常（除了 <code>exceptionsToIgnore</code> 里面排除掉的异常类型）进行处理。<strong>若同时配置了 fallback 和 defaultFallback，则只有 fallback 会生效。</strong></li><li><code>exceptionsToIgnore</code>：用于<strong>指定哪些异常被排除掉</strong>，不会计入异常统计中，也<strong>不会进入 fallback 逻辑中，而是会原样抛出</strong>。这个属性的值是一个class对象的集合：<code>exceptionsToIgnore={xxx.class,xxx.class}</code></li></ul><h1 id="规则持久化">4 规则持久化</h1><p>sentinel中的服务如果一下线，配置过的规则都会消失，生产环境需要将配置规则进行持久化。</p><p>如何持久化？</p><p>不得不说这部分确实有点迷，官方对这部分的描述感觉这个功能不是很成熟😔。</p><p>我是这样做的：</p><p>首先保证引入依赖（之前已经引入）：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>修改配置：（待会从nacos拉取配置）</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8401</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloudalibaba<span class="token punctuation">-</span>sentinel<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>      <span class="token key atrule">transport</span><span class="token punctuation">:</span>        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span>        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8719</span>      <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">ds1</span><span class="token punctuation">:</span>          <span class="token key atrule">nacos</span><span class="token punctuation">:</span>            <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span>            <span class="token key atrule">dataId</span><span class="token punctuation">:</span> $<span class="token punctuation">{</span>spring.application.name<span class="token punctuation">}</span><span class="token punctuation">-</span>flow<span class="token punctuation">-</span>rules            <span class="token key atrule">groupId</span><span class="token punctuation">:</span> SENTINEL_GROUP            <span class="token key atrule">data-type</span><span class="token punctuation">:</span> json            <span class="token key atrule">rule-type</span><span class="token punctuation">:</span> flow<span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span></code></pre><p>因为要用push模式，大概原理是sentinel-dashboard直接把配置推到nacos上面，而sentinel客户端监听该配置的修改，动态获取该配置。</p><p>所以还得修改sentinel-dashboard，先去github上把sentinel的源码下下来，然后将<br><code>sentinel-dashboard\src\test\java\com\alibaba\csp\sentinel\dashboard\rule\nacos</code>复制到<code>sentinel-dashboard\src\main\java\com\alibaba\csp\sentinel\dashboard\rule</code>下面。</p><p>修改<code>sentinel-dashboard\</code>下面的pom.xml文件，将</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>中的<code>&lt;scope&gt;test&lt;/scope&gt;</code>去掉。</p><p>然后修改<code>entinel-dashboard\src\main\java\com\alibaba\csp\sentinel\dashboard\controller\v2</code>下面的<code>FlowControllerV2.java</code>：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token comment" spellcheck="true">// @Qualifier("flowRuleDefaultProvider")修改为</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"flowRuleNacosProvider"</span><span class="token punctuation">)</span><span class="token keyword">private</span> DynamicRuleProvider<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>FlowRuleEntity<span class="token operator">>></span> ruleProvider<span class="token punctuation">;</span><span class="token annotation punctuation">@Autowired</span><span class="token comment" spellcheck="true">// @Qualifier("flowRuleDefaultPublisher")修改为</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"flowRuleNacosPublisher"</span><span class="token punctuation">)</span><span class="token keyword">private</span> DynamicRulePublisher<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>FlowRuleEntity<span class="token operator">>></span> rulePublisher<span class="token punctuation">;</span></code></pre><p>然后修改<code>sentinel-dashboard\src\main\webapp\resources\app\scripts\directives\sidebar</code>下面的<code>sidebar.html</code>文件：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">ui-sref-active</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span> <span class="token attr-name">ng-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>!entry.isGateway<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- &lt;a ui-sref="dashboard.flowV1({app: entry.app})"> 修改为--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">ui-sref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dashboard.flow({app: entry.app})<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>glyphicon glyphicon-filter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token entity" title="&nbsp;">&amp;nbsp;</span><span class="token entity" title="&nbsp;">&amp;nbsp;</span>流控规则V2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></code></pre><p>之后，进入<code>sentinel-dashbord</code>目录，重新打包：</p><pre><code>mvn clean package</code></pre><p>然后在<code>target/</code>目录下运行重新生成的包，试试看配置能不能持久化。</p><p>附上官方文档： <a href="https://github.com/alibaba/Sentinel/wiki/Sentinel-%E6%8E%A7%E5%88%B6%E5%8F%B0%EF%BC%88%E9%9B%86%E7%BE%A4%E6%B5%81%E6%8E%A7%E7%AE%A1%E7%90%86%EF%BC%89#%E8%A7%84%E5%88%99%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/wiki/Sentinel-%E6%8E%A7%E5%88%B6%E5%8F%B0%EF%BC%88%E9%9B%86%E7%BE%A4%E6%B5%81%E6%8E%A7%E7%AE%A1%E7%90%86%EF%BC%89#%E8%A7%84%E5%88%99%E9%85%8D%E7%BD%AE</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;热点规则&quot;&gt;1 热点规则&lt;/h1&gt;&lt;p&gt;何为热点？热点即经常访问的数据。很多时候我们希望统计某个热点数据中访问频次最高的 Top K 数据，并对其访问进行限制。比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;商品 ID 为参数，统计一段时间内最常购买的商品 ID 并进行限制&lt;/
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="微服务" scheme="https://www.codetool.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Sentinel" scheme="https://www.codetool.top/tags/Sentinel/"/>
    
  </entry>
  
  <entry>
    <title>Sentinel流控规则与降级规则</title>
    <link href="https://www.codetool.top/article/Sentinel%E6%B5%81%E6%8E%A7%E8%A7%84%E5%88%99%E4%B8%8E%E9%99%8D%E7%BA%A7%E8%A7%84%E5%88%99/"/>
    <id>https://www.codetool.top/article/Sentinel流控规则与降级规则/</id>
    <published>2020-03-24T02:40:47.000Z</published>
    <updated>2020-03-24T05:10:42.792Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sentinel概述">1 Sentinel概述</h1><h2 id="Sentinel-是什么？">1.1 Sentinel 是什么？</h2><blockquote><p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 以流量为切入点，从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p></blockquote><p>Sentinel具有以下特性：</p><ul><li><strong>丰富的应用场景：</strong> Sentinel 承接了阿里巴巴近 10 年的双十一大促流量的核心场景，例如秒杀（即突发流量控制在系统容量可以承受的范围）、消息削峰填谷、集群流量控制、实时熔断下游不可用应用等。</li><li><strong>完备的实时监控：</strong> Sentinel 同时提供实时的监控功能。您可以在控制台中看到接入应用的单台机器秒级数据，甚至 500 台以下规模的集群的汇总运行情况。</li><li><strong>广泛的开源生态：</strong> Sentinel 提供开箱即用的与其它开源框架/库的整合模块，例如与 Spring Cloud、Dubbo、gRPC 的整合。您只需要引入相应的依赖并进行简单的配置即可快速地接入 Sentinel。</li><li><strong>完善的 SPI 扩展点：</strong> Sentinel 提供简单易用、完善的 SPI 扩展接口。您可以通过实现扩展接口来快速地定制逻辑。例如定制规则管理、适配动态数据源等。</li></ul><p><img src="https://api.codetool.top/img/15849747574114.png" alt></p><p>可以代替Hystrix、Sleuth</p><h1 id="下载和运行">2 下载和运行</h1><p>下载地址：<a href="https://github.com/alibaba/Sentinel/releases" target="_blank" rel="noopener">https://github.com/alibaba/Sentinel/releases</a></p><p>这里选择 <code>sentinel-dashboard-1.7.1.jar</code> 下载</p><p>下载成功后直接运行：</p><pre><code>java -jar .\sentinel-dashboard-1.7.1.jar</code></pre><p><img src="https://api.codetool.top/img/15849766257513.png" alt></p><p>启动成功后直接访问 <a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a> 即可看到管理界面，默认用户名和密码都是sentinel。</p><h1 id="构建测试模块">3 构建测试模块</h1><p>新建模块<code>cloudalibaba-sentinel-service8401</code>，依赖如下：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--     sentinel-datasource-nacos 后续持久化用   --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.csp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sentinel-datasource-nacos<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-sentinel<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-openfeign<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.rhett<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>yaml配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8401</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloudalibaba<span class="token punctuation">-</span>sentinel<span class="token punctuation">-</span>service  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">1111</span>    <span class="token key atrule">sentinel</span><span class="token punctuation">:</span>      <span class="token key atrule">transport</span><span class="token punctuation">:</span>        <span class="token key atrule">dashboard</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8080</span>        <span class="token comment" spellcheck="true"># 默认8719端口，如果被占用会从8719开始依次+1扫描，直到找到未被占用的端口</span>        <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8719</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span></code></pre><p>启动类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApp8401</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>MainApp8401<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>controller:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlowLimitController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testA"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"testA-----"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testB"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"...testB "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"testB   -----"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>至此该模块构建完成，访问一次 <a href="http://localhost:8401/testA" target="_blank" rel="noopener">http://localhost:8401/testA</a> ，即至少调用一次该服务，就可以在sentinel的控制界面上看到该服务了。</p><p><img src="https://api.codetool.top/img/15849779763713.png" alt></p><h1 id="实时监控">4 实时监控</h1><p><img src="https://api.codetool.top/img/15849783302548.png" alt></p><h1 id="流控规则">5 流控规则</h1><p><img src="https://api.codetool.top/img/15849786056398.png" alt></p><ul><li>资源名：唯一名称,默认请求路径</li><li>针对来源: Sentine可以<strong>针对调用者进行限流，填写微服务名</strong>,默认default (不区分来源)</li><li>阈值类型/单机阈值:<ul><li>QPS (每秒钟的请求数量) :当调用该api的QPS达到阈值的时候,进行限流</li><li>线程数:当调用该api的线程数达到阈值的时候，进行限流</li></ul></li><li>是否集群：不需要集群</li><li>流控模式<ul><li>直接: api达到限流条件时，直接限流</li><li>关联: 当关联的资源达到阈值时，就限流自己</li><li>链路: 只记录指定链路上的流量(指定资源从入口资源进来的流量,如果达到阈值,就进行限流) 【api级别的针对来源】</li></ul></li><li>流控效果:<ul><li>快速失败：直接失败,抛异常</li><li>Warm Up：根据codeFactor(冷加载因子，默认3)的值，从阈值/codeFactor, 经过预热时长，才达到设置的QPS阈值</li><li>排队等待：匀速排队,让请求以匀速的速度通过，阈值类型必须设置为QPS，否则无效</li></ul></li></ul><h2 id="流控模式">5.1 流控模式</h2><h3 id="直接">5.1.1 直接</h3><p>我们新建如下流控规则：</p><p><img src="https://api.codetool.top/img/15849790458189.png" alt></p><p>即QPS最高为1。</p><p>设置完成之后频繁访问 <a href="http://localhost:8401/testA" target="_blank" rel="noopener">http://localhost:8401/testA</a> 可见超过QPS的请求网页响应：</p><pre><code>Blocked by Sentinel (flow limiting)</code></pre><p>而如果设置阈值为线程数最高为1，因为请求处理的很快看不出效果，可以做如下修改：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/testA"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">testA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//等待0.8秒</span>    TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"testA-----"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>再次频繁访问网页，就可以看到部分请求被阻拦。</p><h3 id="关联">5.1.2 关联</h3><p>当两个资源之间具有资源争抢或者依赖关系的时候，这两个资源便具有了关联。比如对数据库同一个字段的读操作和写操作存在争抢，读的速度过高会影响写得速度，写的速度过高会影响读的速度。如果放任读写操作争抢资源，则争抢本身带来的开销会降低整体的吞吐量。可使用关联限流来避免具有关联关系的资源之间过度的争抢。</p><p>新建如下流控规则：</p><p><img src="https://api.codetool.top/img/15849799882974.png" alt></p><p>该流控规则的意思是，如果对<code>/testB</code>的QPS大于1，则对<code>/testA</code>进行限流</p><p>该流控规则通常用于两个资源存在优先级，优先级低的给优先级高的让资源。</p><h3 id="链路">5.1.3 链路</h3><p>资源中是存在着调用关系的，Sentinel 允许只根据某个入口的统计信息对资源限流。比如下面这棵调用树：</p><pre><code>                machine-root                 /       \                /         \            Entrance1     Entrance2              /             \             /               \    DefaultNode(nodeA)   DefaultNode(nodeA)</code></pre><p>nodeA资源可以通过<code>Entrance1</code>或者<code>Entrance2</code>资源得到，我们可以对nodeA进行限流，指定流控规则为链路，并指定入口资源为<code>/Entrance1</code>，就可以只对来自<code>/Entrance1</code>的调用限流，而不对来自<code>/Entrance2</code>的调用限流</p><h2 id="流控效果">5.2 流控效果</h2><h3 id="warm-up">5.2.1 warm up</h3><p>上面的案例中我们都是使用的流控效果中的快速失败，而流控效果中的warm up，即预热/冷启动方式。<strong>当系统长期处于低水位的情况下，当流量突然增加时，直接把系统拉升到高水位可能瞬间把系统压垮。通过”冷启动”，让通过的流量缓慢增加，在一定时间内逐渐增加到阈值上限，给冷系统一个预热的时间，避免冷系统被压垮。</strong>（通常和此时系统中没有足量的缓存数有关）</p><p>根据codeFactor(冷加载因子，默认3)的值，请求QPS从<code>阈值/codeFactor</code>开始, 经过预热时长，逐渐升至设置的QPS阈值。</p><p>我们建立如下配置：</p><p><img src="https://api.codetool.top/img/15849817817619.png" alt></p><p>它的意思则是QPS从<code>300/3=100</code>开始，在10秒内逐渐升至300</p><h3 id="排队等待">5.2.2 排队等待</h3><p>匀速排队方式会严格控制请求通过的间隔时间，也即是让请求以均匀的速度通过，对应的是漏桶算法。</p><p>该方式的作用如下图所示：</p><p><img src="https://api.codetool.top/img/15850156146103.png" alt></p><p>排队等待可以设置超时时间：</p><p><img src="https://api.codetool.top/img/15850157234989.png" alt></p><p>该规则的效果是，QPS上限为2，超过QPS的请求排队等待，排队时间超过10秒则快速失败。</p><h1 id="降级规则">6 降级规则</h1><p>选择新建降级规则，可以看到如下配置窗</p><p><img src="https://api.codetool.top/img/15850160889068.png" alt></p><p>它支持三种降级策略，而Hystrix似乎只有异常比例。</p><p>Sentinel断路器没有半开状态，时间窗口过了就直接打开。（而hystrix中的时间窗口概念是一个统计失败率的时间范围）</p><h2 id="RT">6.1 RT</h2><p>RT（平均响应时间）：当 1s 内持续进入 5 个请求，对应时刻的平均响应时间（秒级）均超过阈值（count，以 ms 为单位），那么<strong>在接下的时间窗口之内，对这个方法的调用都会自动地熔断（抛出 DegradeException）。</strong>注意 Sentinel 默认统计的 RT 上限是 <code>4900 ms</code>，超出此阈值的都会算作 4900 ms，若需要变更此上限可以通过启动配置项 <code>-Dcsp.sentinel.statistic.max.rt=xxx</code> 来配置。</p><h2 id="异常比例">6.2 异常比例</h2><p>异常比例：<strong>当资源的每秒请求量 &gt;= 5，并且每秒异常总数占通过量的比值超过阈值（DegradeRule 中的 count）之后，资源进入降级状态</strong>，即在接下的时间窗口之内，对这个方法的调用都会自动地返回。异常比率的阈值范围是 [0.0, 1.0]，代表 0% - 100%。</p><h2 id="异常数">6.3 异常数</h2><p>异常数：<strong>当资源近 1 分钟的异常数目超过阈值之后会进行熔断。</strong> 注意由于统计时间窗口是分钟级别的，若 timeWindow 小于 60s，则结束熔断状态后仍可能再进入熔断状态。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Sentinel概述&quot;&gt;1 Sentinel概述&lt;/h1&gt;&lt;h2 id=&quot;Sentinel-是什么？&quot;&gt;1.1 Sentinel 是什么？&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 以流量为切
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="微服务" scheme="https://www.codetool.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Sentinel" scheme="https://www.codetool.top/tags/Sentinel/"/>
    
  </entry>
  
  <entry>
    <title>程序员面试金典17.16-按摩师</title>
    <link href="https://www.codetool.top/article/%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E9%87%91%E5%85%B817.16-%E6%8C%89%E6%91%A9%E5%B8%88/"/>
    <id>https://www.codetool.top/article/程序员面试金典17.16-按摩师/</id>
    <published>2020-03-24T01:53:36.000Z</published>
    <updated>2020-03-24T01:59:04.198Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题（来源Leetcode）">1 原题（来源Leetcode）</h1><p>一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约时间最长），返回总的分钟数。</p><p><strong>注意：</strong> 本题相对原题稍作改动</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入：</strong> [1,2,3,1]<br><strong>输出：</strong> 4<br><strong>解释：</strong> 选择 1 号预约和 3 号预约，总时长 = 1 + 3 = 4。</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> [2,7,9,3,1]<br><strong>输出:</strong> 12<br><strong>解释:</strong> 选择 1 号预约、 3 号预约和 5 号预约，总时长 = 2 + 9 + 1 = 12。</p></blockquote><p><strong>示例 3:</strong></p><blockquote><p><strong>输入:</strong> [2,1,4,5,3,1,1,3]<br><strong>输出:</strong> 12<br><strong>解释:</strong> 选择 1 号预约、 3 号预约、 5 号预约和 8 号预约，总时长 = 2 + 4 + 3 + 3 = 12。  </p></blockquote><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>动态规划，为了避免重复计算，可以使用自顶向下+记忆，或者是自底向上。</p><h2 id="代码">2.2 代码</h2><p>自顶向下+记忆：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> numsGlo<span class="token punctuation">;</span>    Integer<span class="token punctuation">[</span><span class="token punctuation">]</span> dp<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">massage</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        numsGlo <span class="token operator">=</span> nums<span class="token punctuation">;</span>        dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">dp</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> numsGlo<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token function">dp</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span>numsGlo<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token function">dp</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         dp<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>自底向上：（作者：sweetiee）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">massage</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>自底向上，不需要存储：（作者：sweetiee）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">massage</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            a <span class="token operator">=</span> b<span class="token punctuation">;</span>            b <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题（来源Leetcode）&quot;&gt;1 原题（来源Leetcode）&lt;/h1&gt;&lt;p&gt;一个有名的按摩师会收到源源不断的预约请求，每个预约都可以选择接或不接。在每次预约服务之间要有休息时间，因此她不能接受相邻的预约。给定一个预约请求序列，替按摩师找到最优的预约集合（总预约
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="https://www.codetool.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Nacos集群搭建实操</title>
    <link href="https://www.codetool.top/article/Nacos%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA%E5%AE%9E%E6%93%8D/"/>
    <id>https://www.codetool.top/article/Nacos集群搭建实操/</id>
    <published>2020-03-23T13:57:00.000Z</published>
    <updated>2020-03-23T14:39:53.681Z</updated>
    
    <content type="html"><![CDATA[<h1 id="将数据存储切换为mysql">1 将数据存储切换为mysql</h1><p>默认Nacos使用嵌入式数据库derby实现数据的存储。所以，如果启动多个默认配置下的Nacos节点，数据存储是存在一致性问题的。<br>为了解决这个问题，Nacos采用了集中式存储的方式来支持集群化部署,目前只支持MySQL的存储。</p><p>在nacos安装目录下的<code>conf/</code>文件夹下有一个<code>nacos-mysql.sql</code>文件，使用mysql执行该sql文件，如果没有建database可以先新建database：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> nacos_config<span class="token punctuation">;</span><span class="token keyword">use</span> nacos_config<span class="token punctuation">;</span></code></pre><p>执行成功之后可以看到下面这些表：</p><p><img src="https://api.codetool.top/img/15849642006561.png" alt></p><p>然后修改<code>conf/application.properties</code>，添加mysql相关配置：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.datasource.platform</span><span class="token punctuation">=</span><span class="token attr-value">mysql</span><span class="token attr-name">db.num</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token attr-name">db.url.0</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/nacos_config?characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true</span><span class="token attr-name">db.user</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">db.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span></code></pre><p>重启nacos，进入控制页面可以看到数据全部没了。。</p><h1 id="集群部署">2 集群部署</h1><p>如果更改完了数据存储到mysql就可以开始部署集群了，这里还是搭建伪集群，但是会很麻烦，有机器条件的可以直接尝试真刀实枪上集群……</p><h2 id="首先让nacos能指定端口启动">2.1 首先让nacos能指定端口启动</h2><p>修改<code>bin/startup.sh</code>中的下面两个地方：</p><pre class=" language-shell"><code class="language-shell">#################添加p:（即可以带-p参数）57 while getopts ":m:f:s:p:" opt58 do59     case $opt in60         m)61             MODE=$OPTARG;;62         f)63             FUNCTION_MODE=$OPTARG;;64         s)65             SERVER=$OPTARG;;################添加下面两行66         p)67             PORT=$OPTARG;;</code></pre><pre class=" language-shell"><code class="language-shell">83 if [[ "${MODE}" == "standalone" ]]; then84     JAVA_OPT="${JAVA_OPT} -Xms512m -Xmx512m -Xmn256m"85     JAVA_OPT="${JAVA_OPT} -Dnacos.standalone=true"### 集群模式添加jvm启动参数86 else87     JAVA_OPT="${JAVA_OPT} -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m"88     JAVA_OPT="${JAVA_OPT} -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${BASE_DIR    }/logs/java_heapdump.hprof"89     JAVA_OPT="${JAVA_OPT} -XX:-UseLargePages"### 添加这一行90     JAVA_OPT="${JAVA_OPT} -DServer.port=${PORT}"91 fi</code></pre><h2 id="修改集群配置文件">2.2 修改集群配置文件</h2><p>将<code>conf/cluster.conf.example</code>复制出来：</p><pre class=" language-shell"><code class="language-shell">cp cluster.conf.example cluster.conf</code></pre><p>然后修改<code>cluster.conf</code>文件，添加下面这几行，注意ip不能填写127.0.0.1，必须是<code>hostname -i</code>显示的ip（因为内部raft是通过网卡ip进行通信的）</p><pre><code>192.168.91.1:3333192.168.91.1:4444192.168.91.1:5555</code></pre><h2 id="使用nginx做负载均衡">2.3 使用nginx做负载均衡</h2><p>nginx.conf添加以下配置：</p><pre><code>upstream cluster{    server 127.0.0.1:3333;    server 127.0.0.1:4444;    server 127.0.0.1:5555;}server{    listen 1111;    server_name localhost;    location / {        proxy_pass http://cluster;    }}</code></pre><h2 id="启动集群：">2.4 启动集群：</h2><p>启动三个nacos实例和nginx：</p><pre><code>root@DESKTOP-TTLFG6F:~/nacos/bin# bash startup.sh -p 3333root@DESKTOP-TTLFG6F:~/nacos/bin# bash startup.sh -p 4444root@DESKTOP-TTLFG6F:~/nacos/bin# bash startup.sh -p 5555root@DESKTOP-TTLFG6F:/usr/sbin# ./nginx -c /etc/nginx/nginx.conf</code></pre><p>访问 <a href="http://192.168.91.1:1111/nacos" target="_blank" rel="noopener">http://192.168.91.1:1111/nacos</a> 即可看到熟悉的nacos界面了……</p><h1 id="微服务注册进nacos集群">3 微服务注册进nacos集群</h1><p>我们以模块<code>cloudalibaba-provider-payment9001</code>为例，直接将配置文件中的<code>spring.cloud.nacos.discovery.addr</code> 修改为nginx代理的vip</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9001</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>provider  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">1111</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span></code></pre><p>然后启动服务就可以正常注册了。</p><h1 id="伪集群可能会踩的坑">4 伪集群可能会踩的坑</h1><p>因为伪集群的原因，可能造成实例之间无法通信，注册服务的时候就会看到这种情况：</p><pre><code>java.lang.IllegalStateException: failed to req API:/nacos/v1/ns/instance after all servers([192.168.91.1:1111]) tried        at com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:335)        at com.alibaba.nacos.client.naming.net.NamingProxy.reqAPI(NamingProxy.java:267)        at com.alibaba.nacos.client.naming.net.NamingProxy.registerService(NamingProxy.java:167)        at com.alibaba.nacos.client.naming.NacosNamingService.registerInstance(NacosNamingService.java:170)        at org.springframework.cloud.alibaba.nacos.registry.NacosServiceRegistry.register(NacosServiceRegistry.java:56)        at org.springframework.cloud.alibaba.nacos.registry.NacosServiceRegistry.register(NacosServiceRegistry.java:29)</code></pre><p>但nacos服务后台三台机器均启动成功，且后台能正常进入，通过URL访问/nacos/v1/ns/instance，也是能正常访问。</p><p>实际上是跟通过主机名获取本机ip地址的原因有关（因为我是用的WSL可能会存在一些问题），这种情况还是修改<code>bin/startup.sh</code>，加一个虚拟机参数：</p><pre class=" language-shell"><code class="language-shell">83 if [[ "${MODE}" == "standalone" ]]; then84     JAVA_OPT="${JAVA_OPT} -Xms512m -Xmx512m -Xmn256m"85     JAVA_OPT="${JAVA_OPT} -Dnacos.standalone=true"86 else87     JAVA_OPT="${JAVA_OPT} -server -Xms2g -Xmx2g -Xmn1g -XX:MetaspaceSize=128m -XX:MaxMetaspaceSize=320m"88     JAVA_OPT="${JAVA_OPT} -XX:-OmitStackTraceInFastThrow -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${BASE_DIR    }/logs/java_heapdump.hprof"89     JAVA_OPT="${JAVA_OPT} -XX:-UseLargePages"90     JAVA_OPT="${JAVA_OPT} -DServer.port=${PORT}"### 将cluster.conf中配置的ip地址加上91     JAVA_OPT="${JAVA_OPT} -Dnacos.server.ip=192.168.91.1"92 fi</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;将数据存储切换为mysql&quot;&gt;1 将数据存储切换为mysql&lt;/h1&gt;&lt;p&gt;默认Nacos使用嵌入式数据库derby实现数据的存储。所以，如果启动多个默认配置下的Nacos节点，数据存储是存在一致性问题的。&lt;br&gt;为了解决这个问题，Nacos采用了集中式存储的方式
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="微服务" scheme="https://www.codetool.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Nacos" scheme="https://www.codetool.top/tags/Nacos/"/>
    
  </entry>
  
  <entry>
    <title>Nacos作为配置中心的简单使用</title>
    <link href="https://www.codetool.top/article/Nacos%E4%BD%9C%E4%B8%BA%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.codetool.top/article/Nacos作为配置中心的简单使用/</id>
    <published>2020-03-23T11:33:25.000Z</published>
    <updated>2020-03-23T11:33:51.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单实例">1 简单实例</h1><p>新建模块<code>cloudalibaba-config-nacos-client3377</code></p><h2 id="依赖">1.1 依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- nacos --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="yaml配置">1.2 yaml配置</h2><p>Nacos同springcloud-config一样,在项目初始化时，要保证先从配置中心进行配置拉取,拉取配置之后，才能保证项目的正常启动，所以这里本地的配置文件名还是使用<code>bootstrap.yml</code>：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3377</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>config<span class="token punctuation">-</span>client  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848 </span><span class="token comment" spellcheck="true"># 注册中心</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848 </span><span class="token comment" spellcheck="true"># 配置中心</span>        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml <span class="token comment" spellcheck="true"># 这里指定的文件格式需要和nacos上新建的配置文件后缀相同，否则读不到</span></code></pre><h3 id="dataId的命名规则">1.2.1 dataId的命名规则</h3><p>spring.application.name是构成 Nacos 配置管理 <code>dataId</code> 字段的一部分。</p><p>在 Nacos Spring Cloud 中，dataId 的完整格式如下：</p><p><code>${prefix}-${spring.profile.active}.${file-extension}</code></p><ul><li><code>prefix</code> 默认为 <code>spring.application.name</code> 的值，也可以通过配置项 <code>spring.cloud.nacos.config.prefix</code> 来配置。</li><li><code>spring.profile.active</code> 即为<strong>当前环境对应的 profile</strong>，详情可以参考 Spring Boot文档。 注意：当 spring.profile.active 为空时，对应的连接符 - 也将不存在，dataId 的拼接格式变成 ${prefix}.${file-extension}</li><li><code>file-exetension</code> 为配置内容的数据格式，可以通过配置项 <code>spring.cloud.nacos.config.file-extension</code> 来配置。目前只支持 properties 和 yaml 类型。</li></ul><p>为了指定默认profile，我们这里再新建一个application.yml，内容为：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> dev <span class="token comment" spellcheck="true"># 开发环境</span></code></pre><p>我们在nacos界面上面选择新建配置，按下图操作</p><p><img src="https://api.codetool.top/img/15849575492680.png" alt></p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">config</span><span class="token punctuation">:</span>    <span class="token key atrule">info</span><span class="token punctuation">:</span> <span class="token string">"config info for dev, from nacos config center"</span></code></pre><p>是我们用于测试的远程配置</p><h2 id="启动类">1.3 启动类</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NacosConfigClientMain3377</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>NacosConfigClientMain3377<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="controller">1.4 controller</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RefreshScope</span> <span class="token comment" spellcheck="true">// 支持nacos的动态刷新</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${config.info}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String configInfo<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/config/info"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> configInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行模块，访问 <a href="http://localhost:3377/config/info" target="_blank" rel="noopener">http://localhost:3377/config/info</a> 可以看到配置被正常读取。</p><h1 id="分类管理">2 分类管理</h1><p>Nacos上面的配置文件由namespace（命名空间）+group（分组）+dataId唯一确定。</p><p>最外层的namespace是可以用于区分部署环境的，Group和DataId逻辑上区分两个目标对象。</p><p>namespace默认为public，group默认为DEFAULT_GROUP</p><p>比方说我们现在有三个环境：开发、测试、生产环境，我们就可以创建三个Namespace，不同的Namespace之间是隔离的。</p><h2 id="dataId方案">2.1 dataId方案</h2><p>我们再在nacos上默认命名空间默认分组新建一个配置<code>nacos-config-client-test.yaml</code>，内容为</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">config</span><span class="token punctuation">:</span>    <span class="token key atrule">info</span><span class="token punctuation">:</span> <span class="token string">"config info for test, from nacos config center"</span></code></pre><p>然后将application.yml改为</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> test <span class="token comment" spellcheck="true"># 测试环境</span></code></pre><p>模块重启，再次访问 <a href="http://localhost:3377/config/info" target="_blank" rel="noopener">http://localhost:3377/config/info</a> ，可以看到已正确读取<code>nacos-config-client-test.yaml</code>的配置，并且可以尝试修改<code>nacos-config-client-test.yaml</code>的内容，可以验证nacos能动态刷新读取配置。</p><h2 id="group方案">2.2 group方案</h2><p>新建配置文件，dataId为<code>nacos-config-client-info.yaml</code>，group填写<code>DEV_GROUP</code>，内容为：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">config</span><span class="token punctuation">:</span>    <span class="token key atrule">info</span><span class="token punctuation">:</span> <span class="token string">"nacos-config-client-info.yaml, DEV_GROUP"</span></code></pre><p>再新建一个配置文件，dataId也为<code>nacos-config-client-info.yaml</code>，group填写<code>TEST_GROUP</code>，内容为：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">config</span><span class="token punctuation">:</span>    <span class="token key atrule">info</span><span class="token punctuation">:</span> <span class="token string">"nacos-config-client-info.yaml, TEST_GROUP"</span></code></pre><p>之后可以在bootstrap.yml中指定group：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3377</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>config<span class="token punctuation">-</span>client  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848 </span><span class="token comment" spellcheck="true"># 注册中心</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848 </span><span class="token comment" spellcheck="true"># 配置中心</span>        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml <span class="token comment" spellcheck="true"># 这里指定的文件格式需要和nacos上新建的配置文件后缀相同，否则读不到</span>        <span class="token key atrule">group</span><span class="token punctuation">:</span> TEST_GROUP <span class="token comment" spellcheck="true"># 指定group </span></code></pre><h2 id="命名空间方案">2.3 命名空间方案</h2><p>nacos界面-&gt;命名空间-&gt;新建命名空间。新建两个名为dev和test的命名空间。然后可以看到它们的命名空间ID</p><p><img src="https://api.codetool.top/img/15849630826024.png" alt></p><p>然后可以在配置文件中配置命名空间：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3377</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>config<span class="token punctuation">-</span>client  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848 </span><span class="token comment" spellcheck="true"># 注册中心</span>      <span class="token key atrule">config</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848 </span><span class="token comment" spellcheck="true"># 配置中心</span>        <span class="token key atrule">file-extension</span><span class="token punctuation">:</span> yaml <span class="token comment" spellcheck="true"># 这里指定的文件格式需要和nacos上新建的配置文件后缀相同，否则读不到</span>        <span class="token key atrule">group</span><span class="token punctuation">:</span> TEST_GROUP <span class="token comment" spellcheck="true"># 指定group </span>        <span class="token key atrule">namespace</span><span class="token punctuation">:</span> 4ccc4c4c<span class="token punctuation">-</span>51ec<span class="token punctuation">-</span>4bd1<span class="token punctuation">-</span>8280<span class="token punctuation">-</span>9e70942c0d0c  <span class="token comment" spellcheck="true"># 指定命名空间ID</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简单实例&quot;&gt;1 简单实例&lt;/h1&gt;&lt;p&gt;新建模块&lt;code&gt;cloudalibaba-config-nacos-client3377&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;依赖&quot;&gt;1.1 依赖&lt;/h2&gt;&lt;pre class=&quot; language-xml&quot;&gt;&lt;cod
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="微服务" scheme="https://www.codetool.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Nacos" scheme="https://www.codetool.top/tags/Nacos/"/>
    
  </entry>
  
  <entry>
    <title>Nacos作为注册中心的简单使用</title>
    <link href="https://www.codetool.top/article/Nacos%E4%BD%9C%E4%B8%BA%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.codetool.top/article/Nacos作为注册中心的简单使用/</id>
    <published>2020-03-23T09:38:58.000Z</published>
    <updated>2020-03-23T09:39:47.405Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Cloud-Alibaba概述">1 Spring Cloud Alibaba概述</h1><p>2018.10.31, Spring Cloud Alibaba 正式入驻了Spring Cloud官方孵化器，并在Maven中央仓库发布了第一个版本。</p><p>Spring Cloud Alibaba支持：</p><ul><li>服务限流降级：默认支持Servlet、Feign. RestTemplate、 Dubbo 和RocketMQ限流降级功能的接入，可以在运行时通过控制台实时修改限流降级规则,还支持查看限流降级Metrics监控。</li><li>服务注册与发现：适配Spring Cloud服务注册与发现标准，默认集成了Ribbon的支持。</li><li>分布式配置管理：支持分布式系统中的外部化配置,配置更改时自动刷新。</li><li>消息驱动能力：基于Spring Cloud Stream为微服务应用构建消息驱动能力.</li><li>阿里云对象存储：阿里云提供的海量、安全、低成本、可靠的云存储服务。支持在任何应用、任何时间、任何地点存储和访问任意类型的数据。</li><li>分布式任务调度：提供秒级、精准、可靠高可用的定时(基于Cron表达式)任务调度服务。同时提供分布式的任务执行模型，如网格任务。网格任务支持海量子任务均匀分配到所有Worker (schedulerx-client). 上执行。</li></ul><h1 id="Nacos概述">2 Nacos概述</h1><p>为什么叫Nacos：前四个字母分别为Naming和Configuration的前两个字母，最后的s为Service。</p><p>是一个服务发现、配置管理和服务管理平台。可以替代eureka+config+bus</p><h2 id="各注册中心比较">2.1 各注册中心比较</h2><table><thead><tr><th>-</th><th>Nacos</th><th>Eureka</th><th>Consul</th><th>CoreDNS</th><th>ZooKeeper</th></tr></thead><tbody><tr><td>一致性协议</td><td>CP+AP</td><td>AP</td><td>CP</td><td>/</td><td>CP</td></tr><tr><td>健康检查</td><td>TCP/HTTP/MySQL/Client Beat</td><td>Client Beat</td><td>TCP/HTTP/gRPC/Cmd</td><td>/</td><td>Client Beat</td></tr><tr><td>负载均衡</td><td>权重/DSL/metadata/CMDB</td><td>Ribbon</td><td>Fabio</td><td>RR</td><td>/</td></tr><tr><td>雪崩保护</td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td><td>不支持</td></tr><tr><td>自动注销实例</td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>访问协议</td><td>HTTP/DNS/UDP</td><td>HTTP</td><td>HTTP/DNS</td><td>DNS</td><td>TCP</td></tr><tr><td>监听支持</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td><td>支持</td></tr><tr><td>多数据中心</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>跨注册中心</td><td>支持</td><td>不支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>SpringCloud集成</td><td>支持</td><td>支持</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>Dubbo集成</td><td>支持</td><td>不支持</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>K8s集成</td><td>支持</td><td>不支持</td><td>支持</td><td>支持</td><td>不支持</td></tr></tbody></table><h1 id="使用">3 使用</h1><h2 id="Nacos-server下载和运行">3.1 Nacos server下载和运行</h2><p>Nacos-server下载： <a href="https://github.com/alibaba/nacos/releases" target="_blank" rel="noopener">https://github.com/alibaba/nacos/releases</a></p><p>这里选择nacos-server-1.1.4.tar.gz下载并解压：</p><pre class=" language-shell"><code class="language-shell">wget https://github.com/alibaba/nacos/releases/download/1.1.4/nacos-server-1.1.4.ziptar -xvf nacos-server-1.1.4.tar.gz</code></pre><p>启动服务器（非集群模式）：</p><pre class=" language-shell"><code class="language-shell">cd nacos/binsh startup.sh -m standalone</code></pre><p>ubuntu可以使用：</p><pre class=" language-shell"><code class="language-shell">bash startup.sh -m standalone</code></pre><p>启动成功后，访问 <a href="http://localhost:8848/nacos" target="_blank" rel="noopener">http://localhost:8848/nacos</a> 即可看到图形界面，默认账号和密码都是nacos</p><h2 id="构建服务提供者模块">3.2 构建服务提供者模块</h2><p>新建模块<code>cloudalibaba-provider-payment9001</code>，依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- nacos-discovery --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>因为父工程已经引入</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Spring cloud alibaba 2.1.0.RELEASE--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-alibaba-dependencies<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.cloud.alibaba.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>type</span><span class="token punctuation">></span></span>pom<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>type</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>import<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>这里不再引入</p><p>yaml配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9002</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>provider  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'*'</span></code></pre><p>启动类:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentMain9002</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>PaymentMain9002<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>controller:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PaymentController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String serverPort<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/nacos/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getPayment</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"nacos registry, serverPort: "</span> <span class="token operator">+</span> serverPort<span class="token operator">+</span><span class="token string">"\t id:"</span> <span class="token operator">+</span>id<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>运行该模块，可以查看到该服务被注册到nacos上面了，再建立一个内容相同的9002模块并启动，可以看到该服务存在两个实例：</p><p><img src="https://api.codetool.top/img/15849428997279.png" alt></p><h2 id="服务调用者模块搭建">3.3 服务调用者模块搭建</h2><p>新建模块<code>cloudalibaba-consumer-nacos-order83</code>，依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.rhett<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>yaml配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">83</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> nacos<span class="token punctuation">-</span>order<span class="token punctuation">-</span>consumer  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">nacos</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">server-addr</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">8848</span><span class="token comment" spellcheck="true"># 消费者将要去访问的微服务名称，这是自定义配置项</span><span class="token key atrule">service-url</span><span class="token punctuation">:</span>  <span class="token key atrule">nacos-user-service</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//nacos<span class="token punctuation">-</span>payment<span class="token punctuation">-</span>provider</code></pre><p>启动类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableDiscoveryClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderNacosMain83</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>OrderNacosMain83<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>配置RestTemplate：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ApplicationContextConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@LoadBalanced</span>    <span class="token keyword">public</span> RestTemplate <span class="token function">getRestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RestTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>controller:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderNacosController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> RestTemplate restTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${service-url.nacos-user-service}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String serverUrl<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/payment/nacos/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">paymentInfo</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>serverUrl <span class="token operator">+</span> <span class="token string">"/payment/nacos/"</span> <span class="token operator">+</span> id<span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>访问 <a href="http://localhost:83/consumer/payment/nacos/13" target="_blank" rel="noopener">http://localhost:83/consumer/payment/nacos/13</a> 即可看到9001、9002交替提供服务，是因为nacos已经继承了ribbon负载均衡：</p><p><img src="https://api.codetool.top/img/15849440797948.png" alt></p><h1 id="Nacos-AP和CP的切换">4 Nacos AP和CP的切换</h1><p>一般来说，如果不需要存储服务级别的信息且服务实例是通过nacos-client注册，并能够保持心跳上报，那么就可以选择AP模式。当前主流的服务如Spring cloud和Dubbo服务,都适用于AP模式，AP模式为了服务的可能性而减弱了一致性， 因此AP模式下只支持注册临时实例。</p><p>如果需要在服务级别编辑或者存储配置信息，那么CP是必须，K8S服务和DNS服务则适用于CP模式。CP模式下则支持注册持久化实例，此时则是以Raft协议为集群运行模式，该模式下注册实例之前必须先注册服务,如果服务不存在,则会返回错误。</p><p>切换方法：向 <code>$NACOS_SERVER:8848/nacos/v1/ns/operator/switches?entry=serverMode&amp;value=CP</code> 发送POST请求</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Cloud-Alibaba概述&quot;&gt;1 Spring Cloud Alibaba概述&lt;/h1&gt;&lt;p&gt;2018.10.31, Spring Cloud Alibaba 正式入驻了Spring Cloud官方孵化器，并在Maven中央仓库发布了第一个版本。
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="微服务" scheme="https://www.codetool.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Nacos" scheme="https://www.codetool.top/tags/Nacos/"/>
    
  </entry>
  
  <entry>
    <title>分布式链路跟踪解决方案-SpringCloud Sleuth</title>
    <link href="https://www.codetool.top/article/%E5%88%86%E5%B8%83%E5%BC%8F%E9%93%BE%E8%B7%AF%E8%B7%9F%E8%B8%AA%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-SpringCloud%20Sleuth/"/>
    <id>https://www.codetool.top/article/分布式链路跟踪解决方案-SpringCloud Sleuth/</id>
    <published>2020-03-23T03:12:13.000Z</published>
    <updated>2020-03-23T03:14:04.699Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Sleuth概述">1 Sleuth概述</h1><p>在微服务框架中，一个由客户端发起的请求在后端系统中会经过多个不同的的服务节点调用来协同产生最后的请求结果，每一个前段请求都会形成一条复杂的分布式服务调用链路， 链路中的任何一环出现高延时或错误都会引起整个请求最后的失败。</p><p>Spring Cloud Sleuth提供了一套完整的服务跟踪的解决方案，并且兼容支持了zipkin</p><h1 id="完整的调用链路">2 完整的调用链路</h1><p>一条链路通过Trace Id唯一标识，Span标识发起的请求信息</p><ul><li>Trace:类似于树结构的Span集合,表示一条调用链路,存在唯一标识</li><li>span:表示调用链路来源,通俗的理解span就是一次请求信息</li></ul><p><img src="https://api.codetool.top/img/15849290755080.png" alt></p><p>各span通过parent id关联起来，下图展示了span的父子关系：</p><p><img src="https://api.codetool.top/img/15849291558396.png" alt></p><h1 id="使用示例">3 使用示例</h1><h2 id="zipkin的下载和运行">3.1 zipkin的下载和运行</h2><p>SpringCloud从F版起已不需要自己构建Zipkin Server了，只需调用jar包即可</p><p>下载地址： <a href="https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/" target="_blank" rel="noopener">https://dl.bintray.com/openzipkin/maven/io/zipkin/java/zipkin-server/</a></p><p>这里选择<code>2.12.9/zipkin-server-2.12.9-exec.jar</code>下载。</p><p>下载完成之后直接运行：</p><p><img src="https://api.codetool.top/img/15849289118046.png" alt></p><p>运行成功之后，浏览器访问 <a href="http://localhost:9411/" target="_blank" rel="noopener">http://localhost:9411/</a> 就能看到管理界面了</p><h2 id="创建项目">3.2 创建项目</h2><p>在之前的<code>cloud-provider-payment8001</code>和<code>cloud-consumer-order80</code>中添加依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-zipkin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>两个模块配置添加：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">zipkin</span><span class="token punctuation">:</span>    <span class="token key atrule">base-url</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">9411</span>  <span class="token key atrule">sleuth</span><span class="token punctuation">:</span>    <span class="token key atrule">sampler</span><span class="token punctuation">:</span>      <span class="token comment" spellcheck="true"># 采样率，1代表全部采集</span>      <span class="token key atrule">probability</span><span class="token punctuation">:</span> <span class="token number">1</span></code></pre><p>8001添加一个controller方法：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/payment/zipkin"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">paymentZipkin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"payment zipkin invoke"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>80添加一个controller方法：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/consumer/payment/zipkin"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">paymentZipkin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> restTemplate<span class="token punctuation">.</span><span class="token function">getForObject</span><span class="token punctuation">(</span>PAYMENT_URL<span class="token operator">+</span><span class="token string">"/payment/zipkin"</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>访问 <a href="http://localhost/consumer/payment/zipkin" target="_blank" rel="noopener">http://localhost/consumer/payment/zipkin</a> ，查看zipkin界面显示</p><p><img src="https://api.codetool.top/img/1584932861336.png" alt></p><p>可以查看到相关的调用，发生错误的情况也能看到</p><p><img src="https://api.codetool.top/img/15849329241929.png" alt></p><p>查看详细信息：</p><p><img src="https://api.codetool.top/img/15849330161456.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Sleuth概述&quot;&gt;1 Sleuth概述&lt;/h1&gt;&lt;p&gt;在微服务框架中，一个由客户端发起的请求在后端系统中会经过多个不同的的服务节点调用来协同产生最后的请求结果，每一个前段请求都会形成一条复杂的分布式服务调用链路， 链路中的任何一环出现高延时或错误都会引起整个请求
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="微服务" scheme="https://www.codetool.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="SpringCloud Sleuth" scheme="https://www.codetool.top/tags/SpringCloud-Sleuth/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud Stream的了解及使用</title>
    <link href="https://www.codetool.top/article/SpringCloud%20Stream%E7%9A%84%E4%BA%86%E8%A7%A3%E5%8F%8A%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.codetool.top/article/SpringCloud Stream的了解及使用/</id>
    <published>2020-03-23T01:42:31.000Z</published>
    <updated>2020-03-23T01:43:40.910Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是SpringCloud-Stream">1 什么是SpringCloud Stream</h1><p>官方定义Spring Cloud Stream是一个构建消息驱动微服务的框架，它的目标是屏蔽底层消息中间件的差异,降低切换成本，统一消息的编程模型。</p><p><strong>应用程序通过<code>inputs</code>或者<code>outputs</code>与Spring Cloud Stream中binder对象交互。</strong> 通过我们配置来binding(绑定)，而Spring Cloud Stream的binder对象负责与消息中间件交互。目前仅支持RabbitMQ、Kafka。</p><p>所以,我们只需要搞清楚如何与Spring Cloud Stream交互就可以方便使用消息驱动的方式。通过使用<code>Spring Integration</code>来连接消息代理中间件以实现消息事件驱动。</p><p>Spring Cloud Stream为一些供应商的消息中间件产品提供了个性化的自动化配置实现，引用了<strong>发布-订阅、消费组、分区</strong>的三个核心概念。</p><p><strong>目前仅支持RabbitMQ、Kafka</strong></p><p><img src="https://api.codetool.top/img/15848860507579.png" alt></p><h1 id="编码API">2 编码API</h1><table><thead><tr><th>组成</th><th>说明</th></tr></thead><tbody><tr><td>Middleware</td><td>中间件，目前只支持RabbitMQ和Kafka</td></tr><tr><td>Binder</td><td>是应用与消息中间件之间的封装，目前实行了Kafka和RabitMQ的Binder,通过Binder可以很方便的连接中间件,可以动态的改变消息类型(对应于Kafka的topic，RabitMQ的exchange)，这些都可以通过配置文件来实现</td></tr><tr><td>Channel</td><td>通道,是队列Queue的一种抽象,在消息通讯系统中就是实现存储和转发的媒介,通过Channel对队列进行配置</td></tr><tr><td>Source和Sink</td><td>简单的可理解为参考对象是Spring Cloud Stream的自身,从Stream发布信息就是输出,接受消息就是输入</td></tr><tr><td>@Input</td><td>注解标识输入通道，通过该输入通道接收到的消息进入应用程序</td></tr><tr><td>@Output</td><td>注解标识输出通道，发布的消息将通过该通道离开应用程序</td></tr><tr><td>@StreamListener</td><td>监听队列，用于消费者的队列的消息接收</td></tr><tr><td>@EnableBinding</td><td>指信道channel和exchange绑定在一起</td></tr></tbody></table><h1 id="简单使用实例">3 简单使用实例</h1><h2 id="消息生产者">3.1 消息生产者</h2><p>新建模块<code>cloud-stream-rabbitmq-provider8801</code>，依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- spring-cloud-starter-stream-rabbit --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-stream-rabbit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>yaml配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8801</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>stream<span class="token punctuation">-</span>provider  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">stream</span><span class="token punctuation">:</span>      <span class="token key atrule">binders</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#在此配置要绑定的rabbitmq的服务信息</span>        <span class="token key atrule">defaultRabbit</span><span class="token punctuation">:</span>          <span class="token key atrule">type</span><span class="token punctuation">:</span> rabbit <span class="token comment" spellcheck="true"># 消息组件类型</span>          <span class="token key atrule">environment</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 可实现多环境配置</span>            <span class="token key atrule">spring</span><span class="token punctuation">:</span>              <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>                <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost                <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>                <span class="token key atrule">username</span><span class="token punctuation">:</span> guest                <span class="token key atrule">password</span><span class="token punctuation">:</span> guest      <span class="token key atrule">bindings</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#服务的整合处理</span>        <span class="token key atrule">output</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#这个名字是一个通道的名称</span>          <span class="token key atrule">destination</span><span class="token punctuation">:</span> studyExchange <span class="token comment" spellcheck="true"># 表示要使用的exchange名称定义</span>          <span class="token key atrule">content-type</span><span class="token punctuation">:</span> application/json <span class="token comment" spellcheck="true"># 设置消息类型，本次为json，文本则设置“text/plain”</span>          <span class="token key atrule">binder</span><span class="token punctuation">:</span> defaultRabbit<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">lease-renewal-interval-in-seconds</span><span class="token punctuation">:</span> <span class="token number">2 </span><span class="token comment" spellcheck="true">#设置心跳的时间间隔</span>    <span class="token key atrule">lease-expiration-duration-in-seconds</span><span class="token punctuation">:</span> <span class="token number">5 </span><span class="token comment" spellcheck="true"># 如果现在超过了5秒的间隔</span>    <span class="token key atrule">instance-id</span><span class="token punctuation">:</span> send<span class="token punctuation">-</span>8801.com    <span class="token key atrule">prefer-ip-address</span><span class="token punctuation">:</span> <span class="token boolean important">true </span><span class="token comment" spellcheck="true">#访问的路径变为ip地址</span></code></pre><p>启动类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamMQMain8801</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>StreamMQMain8801<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>发送消息接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IMessageProvider</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> com<span class="token punctuation">.</span>rhett<span class="token punctuation">.</span>springcloud<span class="token punctuation">.</span>service<span class="token punctuation">.</span>IMessageProvider<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>EnableBinding<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>cloud<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span>Source<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>integration<span class="token punctuation">.</span>support<span class="token punctuation">.</span>MessageBuilder<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>messaging<span class="token punctuation">.</span>MessageChannel<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Resource<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>UUID<span class="token punctuation">;</span><span class="token annotation punctuation">@EnableBinding</span><span class="token punctuation">(</span>Source<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//定义消息的推送管道</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MessageProviderImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IMessageProvider</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> MessageChannel output<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//消息发送管道</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String serial <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        output<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>MessageBuilder<span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>serial<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*******serial:"</span><span class="token operator">+</span>serial<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>controller:</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SendMessageController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> IMessageProvider messageProvider<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/sendMessage"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> messageProvider<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="消息消费者">3.2 消息消费者</h2><p>新建<code>cloud-stream-rabbitmq-consumer8802</code>模块，依赖和<code>cloud-stream-rabbitmq-provider8801</code>一样。</p><p>yaml配置也很类似：</p><pre class=" language-yml"><code class="language-yml">server:  port: 8802spring:  application:    name: cloud-stream-consumer  rabbitmq:    host: localhost    port: 5672    username: guest    password: guest  cloud:    stream:      binders: # 在此处配置要绑定的rabbitMQ的服务信息        defaultRabbit: # 表示定义的名称，用于binding的整合          type: rabbit # 消息中间件类型          environment: # 设置rabbitMQ的相关环境配置            spring:              rabbitmq:                host: localhost                port: 5672                username: guest                password: guest      bindings: # 服务的整合处理        input: # 这个名字是一个通道的名称          destination: studyExchange # 表示要使用的exchange名称定义          content-type: application/json # 设置消息类型，本次为json，文本则设为text/plain          binder: defaultRabbit # 设置要绑定的消息服务的具体设置eureka:  client:    service-url:      defaultZone: http://eureka7001.com:7001/eureka  instance:    lease-renewal-interval-in-seconds: 2 # 设置心跳的间隔时间，默认30    lease-expiration-duration-in-seconds: 5 # 超过5秒间隔，默认90    instance-id: receive-8802.com    prefer-ip-address: true</code></pre><p>启动类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StreamMQMain8802</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>StreamMQMain8802<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>消费消息业务类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@EnableBinding</span><span class="token punctuation">(</span>Sink<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReceiveMessageListenerController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${server.port}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String serverPort<span class="token punctuation">;</span>    <span class="token annotation punctuation">@StreamListener</span><span class="token punctuation">(</span>Sink<span class="token punctuation">.</span>INPUT<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">input</span><span class="token punctuation">(</span>Message<span class="token operator">&lt;</span>String<span class="token operator">></span> message<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"消费者1号，----->接收到的消息："</span><span class="token operator">+</span>message<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\t port:"</span><span class="token operator">+</span>serverPort<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="分组消费">4 分组消费</h1><p>上面搭建的简单使用实例仍然存在着问题，我们新建一个内容和<code>cloud-stream-rabbitmq-consumer8802</code>一样的模块<code>cloud-stream-rabbitmq-consumer8803</code>，作为消息的第二个消息消费者。运行8801、8802、8803后发现，8801发送一条消息后，8802和8803都处理了该消息，这就是重复消费的问题（实际上并不是重复消费，而是<strong>对每个分组都存在一个绑定到exchange的队列，消息会被发送到每条队列</strong>）。可以利用分组的特性来解决。在cloud stream中处于同一个group中的多个消费者是竞争关系（即监听同一条队列），就能够保证消息只会被其中一个应用消费一次。</p><p><img src="https://api.codetool.top/img/15849265108647.png" alt></p><p>并且注意到默认配置的队列具有AutoDelete属性，在消费者应用停止运行后就会自动删除队列，可能会导致消息丢失的情况。</p><p>在8802中配置<code>spring.cloud.stream.bindings.input.group=spectrumrpcA</code>,8803配置<code>spring.cloud.stream.bindings.input.group=spectrumrpcB</code>，再次查看rabbitmq控制界面，可见队列名发生变化</p><p><img src="https://api.codetool.top/img/15849269157417.png" alt></p><p><strong>并且自定义group后生成的队列具有durable属性，即队列是持久化的，即使消费者应用重启，也不会丢失消息。</strong></p><p>我们把8802和8803的group都配置成<code>spectrumrpcA</code>，再次运行应用，消息就不会被多处消费了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是SpringCloud-Stream&quot;&gt;1 什么是SpringCloud Stream&lt;/h1&gt;&lt;p&gt;官方定义Spring Cloud Stream是一个构建消息驱动微服务的框架，它的目标是屏蔽底层消息中间件的差异,降低切换成本，统一消息的编程模型。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="微服务" scheme="https://www.codetool.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="SpringCloud Stream" scheme="https://www.codetool.top/tags/SpringCloud-Stream/"/>
    
  </entry>
  
  <entry>
    <title>leetcode876-链表的中间结点</title>
    <link href="https://www.codetool.top/article/leetcode876-%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E7%BB%93%E7%82%B9/"/>
    <id>https://www.codetool.top/article/leetcode876-链表的中间结点/</id>
    <published>2020-03-23T00:51:39.000Z</published>
    <updated>2020-03-23T00:54:58.558Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定一个带有头结点 <code>head</code> 的非空单链表，返回链表的中间结点。</p><p>如果有两个中间结点，则返回第二个中间结点。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入：</strong> [1,2,3,4,5]<br><strong>输出：</strong> 此列表中的结点 3 (序列化形式：[3,4,5])<br>返回的结点值为 3 。 (测评系统对该结点序列化表述是 [3,4,5])。<br>注意，我们返回了一个 ListNode 类型的对象 ans，这样：<br>ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, 以及 ans.next.next.next = NULL.  </p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入：</strong> [1,2,3,4,5,6]<br><strong>输出：</strong> 此列表中的结点 4 (序列化形式：[4,5,6])<br>由于该列表有两个中间结点，值分别为 3 和 4，我们返回第二个结点。  </p></blockquote><p><strong>提示：</strong></p><ul><li>给定链表的结点数介于 <code>1</code> 和 <code>100</code> 之间。</li></ul><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>快慢指针</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">middleNode</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode fast<span class="token punctuation">,</span>slow<span class="token punctuation">;</span>        fast <span class="token operator">=</span> slow <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>fast<span class="token operator">!=</span>null <span class="token operator">&amp;&amp;</span> fast<span class="token punctuation">.</span>next<span class="token operator">!=</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> slow<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定一个带有头结点 &lt;code&gt;head&lt;/code&gt; 的非空单链表，返回链表的中间结点。&lt;/p&gt;
&lt;p&gt;如果有两个中间结点，则返回第二个中间结点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;blockq
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用SpringCloud Bus完善Config的动态刷新</title>
    <link href="https://www.codetool.top/article/%E4%BD%BF%E7%94%A8SpringCloud%20Bus%E5%AE%8C%E5%96%84Config%E7%9A%84%E5%8A%A8%E6%80%81%E5%88%B7%E6%96%B0/"/>
    <id>https://www.codetool.top/article/使用SpringCloud Bus完善Config的动态刷新/</id>
    <published>2020-03-22T13:49:10.000Z</published>
    <updated>2020-03-22T13:50:17.880Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloud-Bus概述">1 SpringCloud Bus概述</h1><p>Spring Cloud Bus是将分布式系统的节点与轻量级消息系统链接起来的框架，它整合了Java的事件处理机制和消息中间件的功能。</p><p><strong>Bus 目前只支持RabbitMQ和Kafka</strong></p><h2 id="什么是总线">1.1 什么是总线</h2><p>在微服务架构的系统中，通常会<strong>使用轻量级的消息代理来构建一个共用的消息主题, 并让系统中所有微服务实例都连接上来</strong>。由于该主题中产生的消息会被所有实例监听和消费，所以称它为消息总线。<strong>在总线上的各个实例，都可以方便地广播一些需要让其他连接在该主题上的实例都知道的消息。</strong></p><h2 id="基本原理">1.2 基本原理</h2><p>ConfigClient实例都监听MQ中同一个topic(默认是<code>springCloudBus</code>)。 当-个服务刷新数据的时候,它会把这个信息放入到Topic中,这样其它监听同一Topic的服务就能得到通知，然后去更新自身的配置。</p><h1 id="使用SpringCloud-Bus解决Config的动态刷新问题">2 使用SpringCloud Bus解决Config的动态刷新问题</h1><p>在上篇文章<a href="../SpringCloud%20Config配置中心的使用">SpringCloud Config配置中心的使用</a>中留下了一个问题，如果有多个config的使用者，如何在配置修改的时候通知它们？</p><p>设计思路：</p><ul><li>利用消息总线触发一个客户端<code>/bus/refresh</code>，而刷新所有客户端的配置</li><li>利用消息总线触发一个服务端ConfigServer的<code>/bus/refresh</code>端点，而刷新所有客户端的配置</li></ul><p>显然第二种思想会更好，原因有：</p><ul><li>打破了微服务的职责单一性，因为微服务本身是业务模块，它本不应该承担配置刷新的职责。</li><li>破坏了微服务各节点的对等性。</li><li>有一定的局限性。例如，微服务在迁移时，它的网络地址常常会发生变化，此时如果想要做到自动刷新，那就会增加更多的修改</li></ul><p>我们新建模块<code>cloud-config-client3366</code>作为config的第二个使用者，将它和<code>cloud-config-client3355</code>的pom依赖都修改为如下（为config服务器也添加<code>spring-cloud-starter-bus-amqp</code>依赖）：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 添加rabbitmq 总线支持 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-bus-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>yaml配置：（文件名也要是<code>bootstrap.yml</code>）</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3366</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>client  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">label</span><span class="token punctuation">:</span> master <span class="token comment" spellcheck="true"># 分支名称</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> config <span class="token comment" spellcheck="true"># 配置文件名称</span>      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev <span class="token comment" spellcheck="true"># 读取的profile</span>      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">3344 </span><span class="token comment" spellcheck="true">#配置中心的地址</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#rabbitmq相关配置，请为3355也添加这一部分</span>    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka</code></pre><p>启动类和controller的写法和3355一样。</p><p><code>cloud-config-center-3344</code>的yaml配置修改为：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3344</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>center  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">server</span><span class="token punctuation">:</span>        <span class="token key atrule">git</span><span class="token punctuation">:</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//git.codetool.top/RhettPeng/springcloud<span class="token punctuation">-</span>config.git <span class="token comment" spellcheck="true"># 仓库地址</span>          <span class="token key atrule">search-paths</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> springcloud<span class="token punctuation">-</span>config      <span class="token key atrule">label</span><span class="token punctuation">:</span> master   <span class="token comment" spellcheck="true"># 读取分支</span>  <span class="token comment" spellcheck="true"># 添加rabbitmq相关</span>  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">host</span><span class="token punctuation">:</span> localhost    <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> guest    <span class="token key atrule">password</span><span class="token punctuation">:</span> guest<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka<span class="token comment" spellcheck="true"># 暴露bus刷新的端点</span><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">'bus-refresh'</span></code></pre><p>到此配置成功，只要git仓库中的配置文件修改的时候向 <a href="http://localhost:3344/actuator/bus-refresh" target="_blank" rel="noopener">http://localhost:3344/actuator/bus-refresh</a> 发出post请求（可以使用webhook），就能通知所有的配置使用者刷新配置。</p><p>查看rabbitmq的exchange：</p><p><img src="https://api.codetool.top/img/15848841263639.png" alt></p><p><strong>补充：定点通知</strong></p><p>bus可以指定通知具体一个实例而不是全部。只需要在 <a href="http://localhost:3344/actuator/bus-refresh" target="_blank" rel="noopener">http://localhost:3344/actuator/bus-refresh</a> 后面加上 <code>/destination</code>，其中destination为服务ID。之前有介绍可以通过<code>eureka.instance.instance-id</code>指定。</p><p>例如post <a href="http://localhost:3344/actuator/bus-refresh/config-client:3355" target="_blank" rel="noopener">http://localhost:3344/actuator/bus-refresh/config-client:3355</a> 即可只通知3355，而不通知其他使用者。 <img src="https://api.codetool.top/img/15848848825797.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SpringCloud-Bus概述&quot;&gt;1 SpringCloud Bus概述&lt;/h1&gt;&lt;p&gt;Spring Cloud Bus是将分布式系统的节点与轻量级消息系统链接起来的框架，它整合了Java的事件处理机制和消息中间件的功能。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Bus
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="微服务" scheme="https://www.codetool.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="SpringCloud Bus" scheme="https://www.codetool.top/tags/SpringCloud-Bus/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud Config配置中心的使用</title>
    <link href="https://www.codetool.top/article/SpringCloud%20Config%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.codetool.top/article/SpringCloud Config配置中心的使用/</id>
    <published>2020-03-22T13:03:47.000Z</published>
    <updated>2020-03-22T13:04:36.360Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述">1 概述</h1><p>SpringCloud Config为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为各个不同微服务应用的所有环境提供了一个中心化的外部配置。</p><p>SpringCloud Config默认使用Git来存储配置文件(也有其它方式,比如支持SVN和本地文件)，<br>但最推荐的还是Git，而且使用的是http/https访问的形式</p><h2 id="作用">1.1 作用</h2><ul><li>集中管理配置文件</li><li>不同环境不同配置,动态化的配置更新,分环境部署比如dev/test/prod/beta/release</li><li>运行期间动态调整配置，不再需要在每个服务部署的机器上编写配置文件，服务会向配置中心统一拉取配置自己的信息</li><li>当配置发生变动时，服务不需要重启即可感知到配置的变化并应用新的配置</li><li>将配置信息以REST接口的形式暴露</li></ul><h1 id="使用">2 使用</h1><h2 id="配置中心服务器搭建">2.1 配置中心服务器搭建</h2><p>先建一个git仓库用于存放配置，参考仓库地址： <a href="http://git.codetool.top/RhettPeng/springcloud-config" target="_blank" rel="noopener">http://git.codetool.top/RhettPeng/springcloud-config</a></p><p><img src="https://api.codetool.top/img/15848783464100.png" alt></p><p>新建模块<code>cloud-config-center-3344</code></p><p>依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- config server --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-config-server<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>yaml：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3344</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>config<span class="token punctuation">-</span>center  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">server</span><span class="token punctuation">:</span>        <span class="token key atrule">git</span><span class="token punctuation">:</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//git.codetool.top/RhettPeng/springcloud<span class="token punctuation">-</span>config.git <span class="token comment" spellcheck="true"># 仓库地址</span>          <span class="token key atrule">search-paths</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> springcloud<span class="token punctuation">-</span>config      <span class="token key atrule">label</span><span class="token punctuation">:</span> master   <span class="token comment" spellcheck="true"># 读取分支</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>7001/eureka</code></pre><p>启动类：这里要使用<code>@EnableConfigServer</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableConfigServer</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainAppConfigServer3344</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>MainAppConfigServer3344<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样一个配置中心服务器就搭建完了，可以进行测试。</p><h2 id="url映射规则">2.2 url映射规则</h2><p>如何通过配置中心服务器访问git仓库中的配置文件？映射规则如下所示：</p><ul><li><code>/{application}/{profile}[/{label}]</code>(可省略拓展名，但响应的配置格式可能是json形式的，和源文件不相同)</li><li><code>/{application}-{profile}.yml</code></li><li><code>/{label}/{application}-{profile}.yml</code>（label指定分支，<code>spring.cloud.config.label</code>可配置默认分支）</li><li><code>/{application}-{profile}.properties</code></li><li><code>/{label}/{application}-{profile}.properties</code></li></ul><p>以上面搭建的配置中心服务器为例，可以访问 <a href="http://localhost:3344/master/config-dev.yml" target="_blank" rel="noopener">http://localhost:3344/master/config-dev.yml</a> 来获取 <code>config-dev.yml</code> 配置。还有另外两种写法：</p><ul><li><code>http://localhost:3344/config-dev.yml</code>（已配置默认分支）</li><li><code>http://localhost:3344/master/config-dev</code> (省略拓展名)</li></ul><h2 id="加载顺序和分歧管理">2.3 加载顺序和分歧管理</h2><p><code>applicaiton.yml</code>是用户级的资源配置项</p><p><code>bootstrap.yml</code>是系统级的，优先级更加高</p><p>Spring Cloud会创建一个<code>&quot;Bootstrap Context&quot;</code>，作为Spring应用的Application Context的父上下文。初始化的时候，<code>Bootstrap Context</code>负责从外部源加载配置属性并解析配置。这两个上下文共享一个从外部获取的Environment。</p><p><strong>Bootstrap属性有高优先级，默认情况下，它们不会被本地配置覆盖。</strong>Bootstrap context和Application Context有着不同的约定，所以新增了一个bootstrap.yml文件, 保证Bootstrap Context和Application Context配置的分离。</p><p><strong>要将Client模块下的application.yml文件改为bootstrap.yml,这是很关键的。</strong></p><p>因为<code>bootstrap.yml</code>是比<code>application.yml</code>先加载的。<code>bootstrap.yml</code>优先级高于<code>application.yml</code>（让本地配置的优先级更高）</p><h2 id="搭建配置使用端">2.4 搭建配置使用端</h2><p>新建模块<code>cloud-config-client3355</code>，依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- config client --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-config<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>yaml配置：文件名为<code>bootstrap.yml</code>，这里spring.cloud.config下面配置的是读取哪个配置文件，对应url映射中的参数。</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">3355</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> config<span class="token punctuation">-</span>client  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">config</span><span class="token punctuation">:</span>      <span class="token key atrule">label</span><span class="token punctuation">:</span> master <span class="token comment" spellcheck="true"># 分支名称</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> config <span class="token comment" spellcheck="true"># 配置文件名称</span>      <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev <span class="token comment" spellcheck="true"># 读取的profile</span>      <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">3344 </span><span class="token comment" spellcheck="true">#配置中心的地址</span><span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka</code></pre><p>编写一个可以获取配置的controller测试，这里的<code>config.info</code>是在配置中心中的配置项：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${config.info}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String configInfo<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/configInfo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> configInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动该模块，访问 <a href="http://localhost:3355/configInfo" target="_blank" rel="noopener">http://localhost:3355/configInfo</a> ，可以看到浏览器输出：</p><pre><code>master branch,springcloud-config/config-dev.yml version=1</code></pre><p>对应的就是master下的config-dev配置文件</p><h2 id="如何动态获取配置修改">2.5 如何动态获取配置修改</h2><p>如果git仓库中的配置文件发生修改，配置中心能立即获得修改，但配置使用端确无法对修改的配置立即生效，除非重启。那么如何让配置使用端动态获取配置的修改？</p><p>首先，保证配置使用端引入了actuator依赖（上面已经引入）：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-actuator<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>然后，在配置文件中暴露监控端点：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">management</span><span class="token punctuation">:</span>  <span class="token key atrule">endpoints</span><span class="token punctuation">:</span>    <span class="token key atrule">web</span><span class="token punctuation">:</span>      <span class="token key atrule">exposure</span><span class="token punctuation">:</span>        <span class="token key atrule">include</span><span class="token punctuation">:</span> <span class="token string">"*"</span></code></pre><p>然后，在业务类上加上<code>@RefreshScope</code>注解：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RefreshScope</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConfigClientController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${config.info}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String configInfo<span class="token punctuation">;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/configInfo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getConfigInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> configInfo<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>此后，当配置修改后，可以向 <a href="http://localhost:3355/actuator/refresh" target="_blank" rel="noopener">http://localhost:3355/actuator/refresh</a> 发送一个 POST 请求，使得模块主动刷新配置（这个请求可以利用webhook实现）</p><p>但是，倘若有多个配置使用方，难道需要给每个主机发送一个POST请求？有没有更好的方法？这就需要SpringCloud Bus了。。。（见下篇）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;1 概述&lt;/h1&gt;&lt;p&gt;SpringCloud Config为微服务架构中的微服务提供集中化的外部配置支持，配置服务器为各个不同微服务应用的所有环境提供了一个中心化的外部配置。&lt;/p&gt;
&lt;p&gt;SpringCloud Config默认使用Git来存储配置文件
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="微服务" scheme="https://www.codetool.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="SpringCloud Config" scheme="https://www.codetool.top/tags/SpringCloud-Config/"/>
    
  </entry>
  
  <entry>
    <title>新一代网关SpringCloud Gateway概述和简单使用</title>
    <link href="https://www.codetool.top/article/%E6%96%B0%E4%B8%80%E4%BB%A3%E7%BD%91%E5%85%B3Spring%20Cloud%20Gateway%E6%A6%82%E8%BF%B0%E5%92%8C%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.codetool.top/article/新一代网关Spring Cloud Gateway概述和简单使用/</id>
    <published>2020-03-22T02:40:36.000Z</published>
    <updated>2020-03-22T03:18:32.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gateway概述">1 Gateway概述</h1><p>Gateway是在Spring生态系统之上构建的API网关服务,基于Spring 5, Spring Boot 2和Project Reactor等技术。</p><p>Gateway旨在提供一种简单而有效的方式来对API进行路由,以及基于Filter链提供一些强大的过滤器功能，例如熔断、限流、重试等。</p><p>SpringCloud Gateway作为Spring Cloud生态系统中的网关，目标是替代Zuul，在Spring Cloud 2.0以上版本中，没有对新版本的Zuul 2.0以上最新高性能版本进行集成，仍然还是使用的Zuul 1.x非Reactor模式的老版本。而为了提升网关的性能，<strong>SpringCloud Gateway是基于WebFlux框架实现的，而WebFlux框架底层则使用了高性能的Reactor模式通信框架Netty。</strong></p><h2 id="为什么选用Gateway而不是zuul">1.1 为什么选用Gateway而不是zuul</h2><p>一方面因为Zuul1.0已经进入了维护阶段，且Gateway是SpringCloud团队研发的，是亲儿子产品，值得信赖。而且很多功能Zuul都没有，用起来也非常的简单便捷。</p><ul><li>Zuul 1.x, 是一个基于阻塞I/O的API Gateway</li><li>Zuul 1.x <strong>基于Servlet 2.5使用阻塞架构</strong> 它不支持任何长连接(如WebSocket) Zuul的设计模式和Nginx较像，每次I/O操作都是从工作线程中选择一个执行，请求线程被阻塞到工作线程完成，但是差别是Nginx用C++实现，Zuul用Java实现，而JVM本身会有第一次加载较慢的情况，使得Zuul的性能相对较差。</li><li>Zuul 2.x 理念更先进，想基于Netty非阻塞和支持长连接，但SpringCloud目前还没有整合。Zuul 2.x的性能较Zuul 1.x在性能方面有较大提升，根据官方提供的基准测试，Spring Cloud Gateway的RPS (每秒请求数)是Zuul的1.6倍。</li></ul><p>Gateway是基于异步非阻塞模型上进行开发的，性能方面不需要担心。虽然Netflix早就发布了最新的Zuul 2.x，但Spring Cloud貌似没有整合计划。而且Netflix相关组件都宣布进入维护期; 不知前景如何?</p><p><strong>Gateway特性</strong></p><ul><li>基于Spring Framework 5, Project Reactor和Spring Boot 2.0进行构建; </li><li>动态路由：能够匹配任何请求属性;</li><li>可以对路由指定Predicate (断言)和Filter (过滤器) ;</li><li>集成Hystrix的断路器功能;</li><li>集成Spring Cloud服务发现功能;</li><li>易于编写的Predicate (断言)和Filter (过滤器) ;</li><li>请求限流功能;</li><li>支持路径重写。</li></ul><p>多方面综合考虑Gateway是很理想的网关选择。</p><h2 id="什么是webflux">1.2 什么是webflux</h2><p>传统的Web框架,此如说: struts2, springmvc等都是基于Servlet API与Servlet容器基础之上运行的。</p><p>但是:</p><p>在Servlet3.1之后有了异步非阻塞的支持。而WebFlux是一个典型非阻塞异步的框架，它的核心是基于Reactor的相关API实现的。相对于传统的web框架来说，它可以运行在诸如Netty, Undertow及支持Servlet3.1的容器上。非阻塞式+函数式编程（Spring5必须使用java8）</p><p>Spring WebFlux是Spring 5.0 引入的新的响应式框架，区别于Spring MVC,它不需要依赖Servlet API，它是完全异步非阻塞的，并且基于Reactor来实现响应式流规范。</p><h2 id="三大核心概念">1.3 三大核心概念</h2><ul><li>Route(路由)：路由是构建网关的基本模块，<strong>它由ID、目标URI、一系列的断言和过滤器组成</strong>,如断言为true则匹配该路由</li><li>Predicate(断言)：参考的是Java8的<code>java.util.function.Predicate</code>，开发人员可以匹配HTTP请求中的所有内容(例如请求头或请求参数)，<strong>如果请求与断言相匹配则进行路由</strong></li><li>Filter(过滤)：指的是Spring框架中GatewayFilter的实例,使用过滤器,可以在请求被路由前或者之后<strong>对请求进行修改</strong></li></ul><h2 id="Gateway工作流程">1.4 Gateway工作流程</h2><p><img src="https://api.codetool.top/img/15848042562424.png" alt></p><p>客户端向Spring Cloud Gateway发出请求。然后<strong>在Gateway Handler Mapping中找到与请求相匹配的路由，将其发送到Gateway Web Handler。</strong></p><p><strong>Handler再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑</strong>，然后返回。过滤器之间用虚线分开是因为<strong>过滤器可能会在发送代理请求之前( “pre” )或之后( “post” )执行业务逻辑。</strong></p><p>Filter在”pre” 类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等,<br>在”post”类型的过滤器中可以做响应内容、响应头的修改，日志的输出，流量监控等有着非常重要的作用。</p><h1 id="使用">2 使用</h1><h2 id="使用文件配置">2.1 使用文件配置</h2><p>新建模块<code>cloud-gateway-gateway9527</code>，依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-gateway<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--gateway无需web和actuator--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-netflix-eureka-client<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.rhett<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cloud-api-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${project.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><p>yaml配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">9527</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>gateway  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> payment_routh           <span class="token comment" spellcheck="true"># 路由的ID，没有固定规则但要求唯一，建议配合服务名</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8001  </span><span class="token comment" spellcheck="true"># 匹配后提供服务的路由地址</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/payment/**        <span class="token comment" spellcheck="true"># 断言，路径相匹配的进行路由</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> payment_routh2          <span class="token key atrule">uri</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span><span class="token number">8001</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/payment/lb/**<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>gateway<span class="token punctuation">-</span>service  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka</code></pre><p>启动类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@EnableEurekaClient</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GatewayMain9527</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>GatewayMain9527<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动模块<code>cloud-eureka-server7001</code>、<code>cloud-provider-payment8001</code>，再启动网关，就能通过 <a href="http://localhost:9527/payment/1" target="_blank" rel="noopener">http://localhost:9527/payment/1</a> 、 <a href="http://localhost:9527/payment/lb" target="_blank" rel="noopener">http://localhost:9527/payment/lb</a>  去访问8001上的 payment service了。</p><h2 id="编码配置">2.2 编码配置</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Gateway</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RouteLocator <span class="token function">routes</span><span class="token punctuation">(</span>RouteLocatorBuilder builder<span class="token punctuation">)</span><span class="token punctuation">{</span>        RouteLocatorBuilder<span class="token punctuation">.</span>Builder routes <span class="token operator">=</span> builder<span class="token punctuation">.</span><span class="token function">routes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        routes<span class="token punctuation">.</span><span class="token function">route</span><span class="token punctuation">(</span><span class="token string">"path_route_baidu"</span><span class="token punctuation">,</span>                r<span class="token operator">-</span><span class="token operator">></span>r<span class="token punctuation">.</span><span class="token function">path</span><span class="token punctuation">(</span><span class="token string">"/guonei"</span><span class="token punctuation">)</span>                        <span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token string">"http://news.baidu.com/guonei"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> routes<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="动态路由">2.3 动态路由</h2><p>更改为以下配置，即可实现从注册中心创建路由：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">application</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>gateway  <span class="token key atrule">cloud</span><span class="token punctuation">:</span>    <span class="token key atrule">gateway</span><span class="token punctuation">:</span>      <span class="token key atrule">discovery</span><span class="token punctuation">:</span>        <span class="token key atrule">locator</span><span class="token punctuation">:</span>          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true               </span><span class="token comment" spellcheck="true"># 开启从注册中心动态创建路由的功能，利用微服务名进行路由</span>      <span class="token key atrule">routes</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> payment_routh           <span class="token comment" spellcheck="true"># 路由的ID，没有固定规则但要求唯一，建议配合服务名</span>          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//CLOUD<span class="token punctuation">-</span>PAYMENT<span class="token punctuation">-</span>SERVICE      <span class="token comment" spellcheck="true"># 匹配后提供服务的路由地址</span>          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/payment/**        <span class="token comment" spellcheck="true"># 断言，路径相匹配的进行路由</span>        <span class="token punctuation">-</span> <span class="token key atrule">id</span><span class="token punctuation">:</span> payment_routh2          <span class="token key atrule">uri</span><span class="token punctuation">:</span> lb<span class="token punctuation">:</span>//CLOUD<span class="token punctuation">-</span>PAYMENT<span class="token punctuation">-</span>SERVICE          <span class="token key atrule">predicates</span><span class="token punctuation">:</span>            <span class="token punctuation">-</span> Path=/payment/lb/**<span class="token key atrule">eureka</span><span class="token punctuation">:</span>  <span class="token key atrule">instance</span><span class="token punctuation">:</span>    <span class="token key atrule">hostname</span><span class="token punctuation">:</span> cloud<span class="token punctuation">-</span>gateway<span class="token punctuation">-</span>service  <span class="token key atrule">client</span><span class="token punctuation">:</span>    <span class="token key atrule">register-with-eureka</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">fetch-registry</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">service-url</span><span class="token punctuation">:</span>      <span class="token key atrule">defaultZone</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//eureka7001.com<span class="token punctuation">:</span>7001/eureka</code></pre><h1 id="断言、过滤器">3 断言、过滤器</h1><h2 id="常用Predicate">3.1 常用Predicate</h2><p><img src="https://api.codetool.top/img/15848420974387.png" alt></p><p>具体使用请参考官方文档： <a href="https://cloud.spring.io/spring-cloud-gateway/reference/html/#gateway-request-predicates-factories" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-gateway/reference/html/#gateway-request-predicates-factories</a></p><p>对于Before、After、Between断言</p><p><code>- After=2017-01-20T17:42:47.789-07:00[America/Denver]</code> 所用的时间字符串是Java8中<code>ZonedDateTime</code>生成的时间字符串</p><h2 id="Filter">3.2 Filter</h2><p>可配置的过滤器参见官方文档： <a href="https://cloud.spring.io/spring-cloud-gateway/reference/html/#gatewayfilter-factories" target="_blank" rel="noopener">https://cloud.spring.io/spring-cloud-gateway/reference/html/#gatewayfilter-factories</a></p><p>这里主要提一下自定义过滤器的写法：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLogGatewayFilter</span> <span class="token keyword">implements</span> <span class="token class-name">GlobalFilter</span><span class="token punctuation">,</span> Ordered <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Mono<span class="token operator">&lt;</span>Void<span class="token operator">></span> <span class="token function">filter</span><span class="token punctuation">(</span>ServerWebExchange exchange<span class="token punctuation">,</span> GatewayFilterChain chain<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"**********come in MyLogGatewayFilter:"</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String uname <span class="token operator">=</span> exchange<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueryParams</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFirst</span><span class="token punctuation">(</span><span class="token string">"uname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>uname <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"*********用户名为null，非法用户"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setStatusCode</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>NOT_ACCEPTABLE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> exchange<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> chain<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>exchange<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Gateway概述&quot;&gt;1 Gateway概述&lt;/h1&gt;&lt;p&gt;Gateway是在Spring生态系统之上构建的API网关服务,基于Spring 5, Spring Boot 2和Project Reactor等技术。&lt;/p&gt;
&lt;p&gt;Gateway旨在提供一种简单而有
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="微服务" scheme="https://www.codetool.top/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Gateway" scheme="https://www.codetool.top/tags/Gateway/"/>
    
  </entry>
  
  <entry>
    <title>leetcode945-使数组唯一的最小增量</title>
    <link href="https://www.codetool.top/article/leetcode945-%E4%BD%BF%E6%95%B0%E7%BB%84%E5%94%AF%E4%B8%80%E7%9A%84%E6%9C%80%E5%B0%8F%E5%A2%9E%E9%87%8F/"/>
    <id>https://www.codetool.top/article/leetcode945-使数组唯一的最小增量/</id>
    <published>2020-03-22T00:41:07.000Z</published>
    <updated>2020-03-22T00:44:44.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定整数数组 A，每次 <em>move</em> 操作将会选择任意 <code>A[i]</code>，并将其递增 <code>1</code>。</p><p>返回使 <code>A</code> 中的每个值都是唯一的最少操作次数。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入：</strong> [1,2,2]<br><strong>输出：</strong> 1<br><strong>解释：</strong> 经过一次 move 操作，数组将变为 [1, 2, 3]。</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入：</strong> [3,2,1,2,1,7]<br><strong>输出：</strong> 6<br><strong>解释：</strong> 经过 6 次 move 操作，数组将变为 [3, 4, 1, 2, 5, 7]。<br>可以看出 5 次或 5 次以下的 move 操作是不能让数组的每个值唯一的。</p></blockquote><p><strong>提示：</strong></p><ol><li><code>0 &lt;= A.length &lt;= 40000</code></li><li><code>0 &lt;= A[i] &lt; 40000</code></li></ol><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>先排序，然后保证每个数字都大于前面的数字。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minIncrementForUnique</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> last <span class="token operator">=</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>A<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;=</span>last<span class="token punctuation">)</span><span class="token punctuation">{</span>                sum <span class="token operator">+=</span> last<span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span>A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                last <span class="token operator">=</span> last<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                last <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定整数数组 A，每次 &lt;em&gt;move&lt;/em&gt; 操作将会选择任意 &lt;code&gt;A[i]&lt;/code&gt;，并将其递增 &lt;code&gt;1&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;返回使 &lt;code&gt;A&lt;/code&gt; 中的每个值都是唯一的最少操作次
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
