<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>代码段小站</title>
  <icon>https://www.gravatar.com/avatar/4c71a513a84e4d430b9f9aed224237fc</icon>
  <subtitle>CodeTool - 个人计算机类练手小博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.codetool.top/"/>
  <updated>2020-03-06T14:24:03.550Z</updated>
  <id>https://www.codetool.top/</id>
  
  <author>
    <name>Rhett Peng</name>
    <email>pctdyx@qq.net</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MySQL之表锁、行锁、MVCC详解</title>
    <link href="https://www.codetool.top/article/MySQL%E4%B9%8B%E8%A1%A8%E9%94%81%E3%80%81%E8%A1%8C%E9%94%81%E3%80%81MVCC%E8%AF%A6%E8%A7%A3/"/>
    <id>https://www.codetool.top/article/MySQL之表锁、行锁、MVCC详解/</id>
    <published>2020-03-06T14:10:34.000Z</published>
    <updated>2020-03-06T14:24:03.550Z</updated>
    
    <content type="html"><![CDATA[<p>该文建议配合<a href="../数据库理论之并发控制/">数据库理论之并发控制</a>阅读。</p><h1 id="概述">1 概述</h1><p>锁是计算机协调多个进程或线程并发访问某一资源的机制（避免争抢）。</p><p>在数据库中，除传统的计算资源（如 CPU、RAM、I/O 等）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p><h2 id="锁分类">1.1 锁分类</h2><p>从对数据操作的粒度分 ： </p><ol><li>表锁：操作时，会锁定整个表。</li><li>行锁：操作时，会锁定当前操作行。</li></ol><p>从对数据操作的类型分：</p><ol><li>读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响。</li><li>写锁（排它锁）：当前操作没有完成之前，它会阻断其他写锁和读锁。</li></ol><h2 id="MySQL中的锁">1.2 MySQL中的锁</h2><p>相对其他数据库而言，MySQL的锁机制比较简单，其最显著的特点是不同的存储引擎支持不同的锁机制。下表中罗列出了各存储引擎对锁的支持情况：</p><table><thead><tr><th>存储引擎</th><th>表级锁</th><th>行级锁</th><th>页面锁</th></tr></thead><tbody><tr><td>MyISAM</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>InnoDB</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>MEMORY</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>BDB</td><td>支持</td><td>不支持</td><td>支持</td></tr></tbody></table><p>MySQL这3种锁的特性可大致归纳如下 ：</p><table><thead><tr><th>锁类型</th><th>特点</th></tr></thead><tbody><tr><td>表级锁</td><td>偏向MyISAM 存储引擎，开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。</td></tr><tr><td>行级锁</td><td>偏向InnoDB 存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。</td></tr><tr><td>页面锁</td><td>开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</td></tr></tbody></table><p>从上述特点可见，很难笼统地说哪种锁更好，只能就具体应用的特点来说哪种锁更合适。</p><p>仅从锁的角度来说：</p><ul><li>表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如Web 应用</li><li>行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有并查询的应用，如一些在线事务处理（OLTP）系统。</li></ul><p><strong>所有的存储引擎都以自己的方式实现了锁机制</strong>，服务器层完全不了解存储引擎中的锁实现。但服务器层也会使用各种有效的表锁来实现不同的目的。</p><p>对于 MySQL 而言，事务机制更多是靠底层的存储引擎实现的，<strong>在服务器层面只有表锁。支持事务的 InnoDB 存储引擎实现了行锁。</strong></p><h1 id="MyISAM-表锁">2 MyISAM 表锁</h1><p>偏向 MyISAM 存储引擎，开销小，加锁快，无死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。</p><p>在特定的场景中，表锁也可能有良好的性能。比如，READ LOCAL 表锁支持某些类型的并发写操作；另外，写锁也比读锁有更高的优先级，因此一个写锁请求可以会被插入到读锁队列的前面。</p><p>尽管存储引擎可以管理自己的锁，服务器还是会使用各种有效的表锁来实现不同的目的。比如<strong>服务器在 ALTER TABLE 时使用表锁，而忽略存储引擎的锁机制。MyISAM 在读表前自动对表加读锁，在写表前自动对表加写锁。</strong></p><h2 id="SQL语法">2.1 SQL语法</h2><p>添加表锁：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">lock</span> <span class="token keyword">table</span> table1 <span class="token keyword">read</span><span class="token operator">/</span><span class="token keyword">write</span> <span class="token punctuation">,</span> table2 <span class="token keyword">read</span><span class="token operator">/</span><span class="token keyword">write</span> <span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>read为读锁，共享锁；write为写锁，独占锁。</p><p>显示加过锁的表：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">open</span> <span class="token keyword">tables</span><span class="token punctuation">;</span></code></pre><ul><li><code>In_use</code> : 表当前被查询使用的次数。如果该数为零，则表是打开的，但是当前没有被使用。为1代表已加锁。</li><li><code>Name_locked</code>：表名称是否被锁定。名称锁定用于取消表或对表进行重命名等操作。</li></ul><p>释放表锁：</p><pre class=" language-sql"><code class="language-sql">unlock <span class="token keyword">tables</span><span class="token punctuation">;</span></code></pre><h2 id="总结">2.2 总结</h2><ol><li>对 MyISAM 表的读操作（加读锁），不会阻塞其他进程对同一表的读请求，但会阻塞对同一表的写请求。只有当读锁释放后，才会执行其它进程的写操作。</li><li>对 MyISAM 表的写操作（加写锁），会阻塞其他进程对同一表的读和写操作，只有当写锁释放后，才会执行其它进程的读写操作。</li></ol><p>简而言之，就是读锁会阻塞写，但是不会堵塞读。而写锁则会把读和写都堵塞。这也是MyISAM不适合做写为主表的引擎的原因。因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞。</p><h1 id="InnoDB-行锁">3 InnoDB 行锁</h1><p><strong>特点：</strong></p><ul><li>锁粒度小，并发度高；开销大，加锁慢，会出现死锁</li><li>支持事务</li></ul><p>InnoDB也实现了共享锁和排他锁两种类型的行锁。</p><p>InnoDB也支持意向锁，可以对表级别上意向锁。</p><p><strong>对于<code>UPDATE</code>、<code>DELETE</code>和<code>INSERT</code>语句，InnoDB会自动给涉及的数据集加排他锁</strong></p><p><strong>对于普通<code>SELECT</code>语句，InnoDB不会加任何锁，使用一致性非锁定读</strong></p><h2 id="了解：一致性非锁定读">3.1 了解：一致性非锁定读</h2><p>一致性非锁定读是指InnoDB存储引擎通过行多版本控制（MVCC）的方式来读取当前执行时间数据库中行的数据。如果读取的行正在执行DELETE或UPDATE，这时读取操作不会因此去等待行上锁的释放，而是去读取行的一个快照数据。</p><p><img src="https://api.codetool.top/img/15835025427688.png" alt></p><p>快照数据是该行的之前版本的数据，实现是通过undo段来完成（即为了回滚事务而产生的重做日志）。</p><p>通过读取不同的快照版本实现不同的事务隔离级别：</p><ul><li>读已提交：一致性非锁定读总是读取被锁定行的最新一份快照数据。产生了不可重复读的问题。</li><li>重复读：一致性非锁定读总是读取事务开始时的行数据版本. 解决不可重复读的问题。</li></ul><p>一致性非锁定读是InnoDB默认的读取方式，不会占用和等待表上的锁。</p><h2 id="一致性锁定读">3.2 一致性锁定读</h2><p>某些情况下，用户需要显式地对数据库读取操作进行加锁以保证数据逻辑的一致性。可以通过以下语句显示给记录集加共享锁或排他锁（一致性锁定读）。</p><pre class=" language-sql"><code class="language-sql">共享锁（S）：<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">LOCK</span> <span class="token operator">IN</span> <span class="token keyword">SHARE MODE</span>排他锁（X<span class="token punctuation">)</span> ：<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span></code></pre><p>当事务提交了，锁就释放了。</p><p>可以使用<code>show status like &#39;innodb_row_lock%&#39;;</code>查看innodb行锁的争用情况</p><ul><li><p><code>Innodb_row_lock_current_waits</code>: 当前正在等待锁定的数量</p></li><li><p><code>Innodb_row_lock_time</code>: 从系统启动到现在锁定总时间长度</p></li><li><p><code>Innodb_row_lock_time_avg</code>:每次等待所花平均时长</p></li><li><p><code>Innodb_row_lock_time_max</code>:从系统启动到现在等待最长的一次所花的时间</p></li><li><p><code>Innodb_row_lock_waits</code>: 系统启动后到现在总共等待的次数</p></li></ul><h2 id="行锁的三种算法">3.3 行锁的三种算法</h2><h3 id="record-lock">3.3.1 record lock</h3><p>InnoDB 里的行锁（record lock）是索引记录的锁。</p><p>record lock 锁住的是索引记录，即使该表上没有任何索引，那么 innodb会在后台创建一个隐藏的聚集主键索引，那么锁住的就是这个隐藏的聚集主键索引。所以说<strong>当一条 sql 没有走任何索引时，那么将会在每一条聚簇索引后面加 X 锁，这个类似于表锁</strong>，但原理上和表锁应该是完全不同的。</p><h3 id="gap-lock">3.3.2 gap lock</h3><p>当我们用范围条件，而不是使用相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据进行加锁； 对于键值在条件范围内但并不存在的记录，叫做 “间隙（GAP）”，InnoDB也会对这个 “间隙” 加锁，这种锁机制就是所谓的间隙锁（gap lock），它<strong>锁定一个范围的记录,但不包括记录本身</strong>。锁加在未使用的空闲空间上,可能是两个索引记录之间，也可能是第一个索引记录之前或最后一个索引之后的空间。间隙锁针对事务隔离级别为可重复读或以上级别。</p><h3 id="next-key-lock">3.3.3 next-key lock</h3><p>行锁与间隙锁组合起来用就叫做 Next-Key Lock。<strong>锁定一个范围，并且锁定记录本身</strong>。对于行的查询，都是采用该方法，主要目的是阻止多个事务将记录插入到同一范围内，解决幻读的问题。</p><p>InnoDB 工作在可重复读隔离级别下，并且会以 Next-Key Lock 的方式对数据行进行加锁，这样可以有效防止幻读的发生。Next-Key Lock 是行锁和间隙锁的组合，当 InnoDB 扫描索引记录的时候，会首先对索引记录加上行锁（Record Lock），再对索引记录两边的间隙加上间隙锁（Gap Lock）。加上间隙锁之后，其他事务就不能在这个间隙修改或者插入记录。</p><p>如果一个索引有10，11，13和20这四个值，那么该索引可能被Next-key Locking的区间为：</p><pre><code>(-∞,10](10,11](11,13](13,20](20,＋∞]</code></pre><p>若事务T1已经锁定了如下范围：</p><p><code>(10,11]</code>，<code>(11,13]</code></p><p>则插入新的记录12时，锁定的范围会变成：</p><p><code>(10,11]</code>，<code>(11,12]</code>，<code>(12,13]</code></p><p>当查询的索引含有唯一属性时，InnoDB存储引擎会对Next-key Lock进行优化，将其降级为Record lock，即仅锁住索引本身，而不是范围。</p><h3 id="如何理解三种算法">3.3.4 如何理解三种算法</h3><p>我这里谈谈我自己的理解：</p><p>对于唯一索引（比如主键），只要保证锁住该索引记录，就不可能出现幻读，这对应的就是Record Lock</p><p>比如对于sql查询</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">5</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span></code></pre><p>这种情况就只会加一个Record Lock，第一次查询数据之后锁住了该记录，此后在同一事务内一直到第二次查询不可能会出现其他事务也将其他记录插入到id = 5这个位置。</p><p>而如果不是唯一索引，第一次查询数据之后即使所住了该记录，但可能还会有记录被插到id = 5这个位置，所以此时需要范围索引，锁住索引为5这个值，对于范围查询，范围索引更重要。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;该文建议配合&lt;a href=&quot;../数据库理论之并发控制/&quot;&gt;数据库理论之并发控制&lt;/a&gt;阅读。&lt;/p&gt;
&lt;h1 id=&quot;概述&quot;&gt;1 概述&lt;/h1&gt;&lt;p&gt;锁是计算机协调多个进程或线程并发访问某一资源的机制（避免争抢）。&lt;/p&gt;
&lt;p&gt;在数据库中，除传统的计算资源（如 CPU
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="数据库" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://www.codetool.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL之并发参数调整</title>
    <link href="https://www.codetool.top/article/MySQL%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%8F%82%E6%95%B0%E8%B0%83%E6%95%B4/"/>
    <id>https://www.codetool.top/article/MySQL之并发参数调整/</id>
    <published>2020-03-06T08:56:08.000Z</published>
    <updated>2020-03-06T09:23:45.404Z</updated>
    
    <content type="html"><![CDATA[<p>从实现上来说，MySQL Server 是多线程结构，包括后台线程和客户服务线程。多线程可以有效利用服务器资源，提高数据库的并发性能。在Mysql中，控制并发连接和线程的主要参数包括 <code>max_connections</code>、<code>back_log</code>、<code>thread_cache_size</code>、<code>table_open_cahce</code>。</p><h1 id="max-connections">1 max_connections</h1><p>采用max_connections 控制允许连接到MySQL数据库的最大数量，默认值是 151。<strong>如果状态变量 <code>connection_errors_max_connections</code> 不为零，并且一直增长，则说明不断有连接请求因数据库连接数已达到允许最大值而失败</strong>，这时可以考虑增大<code>max_connections</code> 的值。</p><p>Mysql 最大可支持的连接数，取决于很多因素，包括给定操作系统平台的线程库的质量、内存大小、每个连接的负荷、CPU的处理速度，期望的响应时间等。在Linux 平台下，性能好的服务器，支持 500-1000 个连接不是难事，需要根据服务器性能进行评估设定。</p><h1 id="back-log">2 back_log</h1><p><code>back_log</code> 参数控制MySQL监听TCP端口时设置的积压请求栈大小。<strong>如果MySql的连接数达到<code>max_connections</code>时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即<code>back_log</code></strong>，如果等待连接的数量超过back_log，将不被授予连接资源，将会报错。5.6.6 版本之前默认值为 50 ， 之后的版本默认为 <code>50 + （max_connections / 5）</code>， 但最大不超过900。</p><p>如果需要数据库在较短的时间内处理大量连接请求， 可以考虑适当增大back_log 的值。</p><h1 id="table-open-cache">3 table_open_cache</h1><p>该参数用来控制所有SQL语句执行线程可打开表缓存的数量， 而在执行SQL语句时，每一个SQL执行线程至少要打开 1 个表缓存。该参数的值应该根据设置的最大连接数 max_connections 以及每个连接执行关联查询中涉及的表的最大数量来设定 ：</p><p>​<code>max_connections x N</code></p><h1 id="thread-cache-size">4 thread_cache_size</h1><p>为了加快连接数据库的速度，MySQL 会<strong>缓存一定数量的客户服务线程</strong>以备重用，通过参数 <code>thread_cache_size</code> 可控制 MySQL 缓存客户服务线程的数量。</p><h1 id="innodb-lock-wait-timeout">5 innodb_lock_wait_timeout</h1><p>该参数是用来设置InnoDB 事务<strong>等待行锁的时间</strong>，默认值是50ms ， 可以根据需要进行动态设置。对于需要快速反馈的业务系统来说，可以将行锁的等待时间调小，以避免事务长时间挂起； 对于后台运行的批量处理程序来说， 可以将行锁的等待时间调大， 以避免发生大的回滚操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从实现上来说，MySQL Server 是多线程结构，包括后台线程和客户服务线程。多线程可以有效利用服务器资源，提高数据库的并发性能。在Mysql中，控制并发连接和线程的主要参数包括 &lt;code&gt;max_connections&lt;/code&gt;、&lt;code&gt;back_log&lt;/
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="优化" scheme="https://www.codetool.top/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="数据库" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://www.codetool.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL之内存管理和优化</title>
    <link href="https://www.codetool.top/article/MySQL%E4%B9%8B%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%92%8C%E4%BC%98%E5%8C%96/"/>
    <id>https://www.codetool.top/article/MySQL之内存管理和优化/</id>
    <published>2020-03-06T08:55:28.000Z</published>
    <updated>2020-03-06T09:26:59.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内存优化原则">1 内存优化原则</h1><ol><li><p>将尽量多的内存分配给MySQL做缓存，但要给操作系统和其他程序预留足够内存。</p></li><li><p>MyISAM 存储引擎的数据文件读取依赖于操作系统自身的IO缓存，因此，如果有MyISAM表，就要预留更多的内存给操作系统做IO缓存。</p></li><li><p>排序区、连接区等缓存是分配给每个数据库会话（session）专用的，其默认值的设置要根据最大连接数合理分配，如果设置太大，不但浪费资源，而且在并发连接较高时会导致物理内存耗尽。</p></li></ol><h1 id="MyISAM-内存优化">2 MyISAM 内存优化</h1><p>MyISAM存储引擎使用 <code>key_buffer</code> 缓存<strong>索引块</strong>，加速MyISAM索引的读写速度。<strong>对于MyISAM表的数据块，mysql没有特别的缓存机制，完全依赖于操作系统的IO缓存。</strong></p><h2 id="key-buffer-size">2.1 key_buffer_size</h2><p><strong><code>key_buffer_size</code>决定MyISAM索引块缓存区的大小，直接影响到MyISAM表的存取效率。</strong>可以在MySQL参数文件中设置<code>key_buffer_size</code>的值，对于一般MyISAM数据库，建议至少将<code>1/4</code>可用内存分配给<code>key_buffer_size</code>。</p><p>在配置文件中做如下配置：</p><pre><code>key_buffer_size=512M</code></pre><h2 id="read-buffer-size">2.2 read_buffer_size</h2><p>为需要全表扫描的MYISAM数据表线程指定缓存。</p><p>如果需要经常顺序扫描MyISAM表，可以通过增大<code>read_buffer_size</code>的值来改善性能。但需要注意的是<code>read_buffer_size</code>是每个session独占的，如果默认值设置太大，就会造成内存浪费。</p><h2 id="read-rnd-buffer-size">2.3 read_rnd_buffer_size</h2><p>对于需要做排序的MyISAM表的查询，如带有order by子句的sql，适当增加 <code>read_rnd_buffer_size</code> 的值，可以改善此类的sql性能。但需要注意的是 <code>read_rnd_buffer_size</code> 是每个session独占的，如果默认值设置太大，就会造成内存浪费。</p><h1 id="InnoDB-内存优化">3 InnoDB 内存优化</h1><p>InnoDB用一块内存区做IO缓存池，该缓存池不仅用来缓存InnoDB的索引块，而且也用来缓存InnoDB的数据块。</p><h2 id="innodb-buffer-pool-size">3.1 innodb_buffer_pool_size</h2><p>该变量决定了 <strong>InnoDB 存储引擎表数据和索引数据的最大缓存区大小</strong>。在保证操作系统及其他程序有足够内存可用的情况下，<code>innodb_buffer_pool_size</code> 的值越大，缓存命中率越高，访问InnoDB表需要的磁盘I/O 就越少，性能也就越高。</p><pre><code>innodb_buffer_pool_size=512M</code></pre><h2 id="innodb-log-buffer-size">3.2 innodb_log_buffer_size</h2><p>决定了<strong>InnoDB重做日志缓存的大小</strong>，对于可能产生大量更新记录的大事务，增加<code>innodb_log_buffer_size</code> 的大小，可以避免InnoDB在事务提交前就执行不必要的日志写入磁盘操作。</p><pre><code>innodb_log_buffer_size=10M</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内存优化原则&quot;&gt;1 内存优化原则&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;将尽量多的内存分配给MySQL做缓存，但要给操作系统和其他程序预留足够内存。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MyISAM 存储引擎的数据文件读取依赖于操作系统自身的IO缓存，因此，如果有MyIS
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="优化" scheme="https://www.codetool.top/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="数据库" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://www.codetool.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL之查询缓存优化</title>
    <link href="https://www.codetool.top/article/MySQL%E4%B9%8B%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96/"/>
    <id>https://www.codetool.top/article/MySQL之查询缓存优化/</id>
    <published>2020-03-06T08:53:20.000Z</published>
    <updated>2020-03-06T09:27:09.142Z</updated>
    
    <content type="html"><![CDATA[<p>开启Mysql的查询缓存，当执行完全相同的SQL语句的时候，服务器就会直接从缓存中读取结果，当数据被修改，之前的缓存会失效，修改比较频繁的表不适合做查询缓存。</p><p><img src="https://api.codetool.top/img/1583475530312.png" alt></p><h1 id="查询缓存配置">1 查询缓存配置</h1><p>查看当前的MySQL数据库是否支持查询缓存：</p><pre><code>mysql&gt; SHOW VARIABLES LIKE &#39;have_query_cache&#39;;+------------------+-------+| Variable_name    | Value |+------------------+-------+| have_query_cache | YES   |+------------------+-------+1 row in set (0.01 sec)</code></pre><p>查看当前MySQL是否开启了查询缓存 ：</p><pre><code>mysql&gt; SHOW VARIABLES LIKE &#39;query_cache_type&#39;;+------------------+-------+| Variable_name    | Value |+------------------+-------+| query_cache_type | OFF   |+------------------+-------+1 row in set (0.01 sec)</code></pre><p>查看查询缓存的占用大小 ：</p><pre><code>mysql&gt; SHOW VARIABLES LIKE &#39;query_cache_size&#39;;+------------------+----------+| Variable_name    | Value    |+------------------+----------+| query_cache_size | 16777216 |+------------------+----------+1 row in set (0.00 sec)</code></pre><p>查看查询缓存的状态变量：</p><pre><code>mysql&gt; SHOW STATUS LIKE &#39;Qcache%&#39;;+-------------------------+----------+| Variable_name           | Value    |+-------------------------+----------+| Qcache_free_blocks      | 1        || Qcache_free_memory      | 16760152 || Qcache_hits             | 0        || Qcache_inserts          | 0        || Qcache_lowmem_prunes    | 0        || Qcache_not_cached       | 1        || Qcache_queries_in_cache | 0        || Qcache_total_blocks     | 1        |+-------------------------+----------+8 rows in set (0.00 sec)</code></pre><p>各个变量的含义如下：</p><table><thead><tr><th>参数</th><th>含义</th></tr></thead><tbody><tr><td>Qcache_free_blocks</td><td>查询缓存中的可用内存块数</td></tr><tr><td>Qcache_free_memory</td><td>查询缓存的可用内存量</td></tr><tr><td>Qcache_hits</td><td>查询缓存命中数</td></tr><tr><td>Qcache_inserts</td><td>添加到查询缓存的查询数</td></tr><tr><td>Qcache_lowmen_prunes</td><td>由于内存不足而从查询缓存中删除的查询数</td></tr><tr><td>Qcache_not_cached</td><td>非缓存查询的数量（由于 query_cache_type 设置而无法缓存或未缓存）</td></tr><tr><td>Qcache_queries_in_cache</td><td>查询缓存中注册的查询数</td></tr><tr><td>Qcache_total_blocks</td><td>查询缓存中的块总数</td></tr></tbody></table><h1 id="开启查询缓存">2 开启查询缓存</h1><p>MySQL的查询缓存默认是关闭的，需要手动配置参数 query_cache_type ， 来开启查询缓存。query_cache_type 该参数的可取值有三个：</p><table><thead><tr><th>值</th><th>含义</th></tr></thead><tbody><tr><td>OFF 或 0</td><td>查询缓存功能关闭</td></tr><tr><td>ON 或 1</td><td>查询缓存功能打开，SELECT的结果符合缓存条件即会缓存，否则，不予缓存，显式指定 SQL_NO_CACHE，不予缓存</td></tr><tr><td>DEMAND 或 2</td><td>查询缓存功能按需进行，显式指定 SQL_CACHE 的SELECT语句才会缓存；其它均不予缓存</td></tr></tbody></table><p><img src="https://api.codetool.top/img/15834798798264.png" alt="配置缓存相关参数"></p><p>配置完毕之后，重启服务既可生效 ；</p><p>然后就可以在命令行执行SQL语句进行验证 ，执行一条比较耗时的SQL语句，然后再多执行几次，查看后面几次的执行时间；获取通过查看查询缓存的缓存命中数，来判定是否走查询缓存。</p><h1 id="查询缓存SELECT选项">3 查询缓存SELECT选项</h1><p>可以在SELECT语句中指定两个与查询缓存相关的选项 ：</p><p><code>SQL_CACHE</code> : 如果查询结果是可缓存的，并且 query_cache_type 系统变量的值为ON或 DEMAND ，则缓存查询结果 。</p><p><code>SQL_NO_CACHE</code> : 服务器不使用查询缓存。它既不检查查询缓存，也不检查结果是否已缓存，也不缓存查询结果。</p><p>例子：</p><pre class=" language-SQL"><code class="language-SQL">SELECT SQL_CACHE id, name FROM customer;SELECT SQL_NO_CACHE id, name FROM customer;</code></pre><h1 id="查询缓存失效的情况">4 查询缓存失效的情况</h1><h2 id="SQL-语句不一致">4.1 SQL 语句不一致</h2><p>要想命中查询缓存，查询的SQL语句必须一致。</p><pre class=" language-SQL"><code class="language-SQL">SQL1 : select count(*) from tb_item;SQL2 : Select count(*) from tb_item;</code></pre><p>区分大小写</p><h2 id="当查询语句中用到了函数">4.2 当查询语句中用到了函数</h2><pre class=" language-SQL"><code class="language-SQL">SQL1 : select * from tb_item where updatetime < now() limit 1;SQL2 : select user();SQL3 : select database();</code></pre><p>这些自带函数每次查询都是不确定的，不会使用缓存。</p><h2 id="不使用任何表查询语句">4.3 不使用任何表查询语句</h2><pre class=" language-SQL"><code class="language-SQL">select 'A';</code></pre><h2 id="查询系统数据库">4.4 查询系统数据库</h2><p>查询 mysql， information_schema或  performance_schema 数据库中的表时，不会走查询缓存。</p><pre class=" language-SQL"><code class="language-SQL">select * from information_schema.engines;</code></pre><h2 id="在存储的函数，触发器或事件的主体内执行的查询">4.5 在存储的函数，触发器或事件的主体内执行的查询</h2><h2 id="表更改">4.6 表更改</h2><p>如果表更改，则使用该表的所有高速缓存查询都将变为无效并从高速缓存中删除。这包括使用<code>MERGE</code>映射到已更改表的表的查询。一个表可以被许多类型的语句改变, 如 <code>INSERT</code>， <code>UPDATE</code>， <code>DELETE</code>， <code>TRUNCATE TABLE</code>， <code>ALTER TABLE</code>， <code>DROP TABLE</code>，或 <code>DROP DATABASE</code> 。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开启Mysql的查询缓存，当执行完全相同的SQL语句的时候，服务器就会直接从缓存中读取结果，当数据被修改，之前的缓存会失效，修改比较频繁的表不适合做查询缓存。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://api.codetool.top/img/15834755303
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="优化" scheme="https://www.codetool.top/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="数据库" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://www.codetool.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer57-和为s的连续正数序列</title>
    <link href="https://www.codetool.top/article/%E5%89%91%E6%8C%87offer57-%E5%92%8C%E4%B8%BAs%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B0%E5%BA%8F%E5%88%97/"/>
    <id>https://www.codetool.top/article/剑指offer57-和为s的连续正数序列/</id>
    <published>2020-03-05T17:01:12.000Z</published>
    <updated>2020-03-05T17:04:48.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>输入一个正整数 <code>target</code> ，输出所有和为 <code>target</code> 的连续正整数序列（至少含有两个数）。</p><p>序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> target = 9<br><strong>输出:</strong> [[2,3,4],[4,5]] </p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> target = 15<br><strong>输出:</strong> [[1,2,3,4,5],[4,5,6],[7,8]]  </p></blockquote><p><strong>限制：</strong></p><ul><li><code>1 &lt;= target &lt;= 10^5</code></li></ul><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>这道题最大的坑就是用二维数组做返回值吧。。确实语法上挺麻烦的，解法就是滑动窗口，一个prev一个next，如果当前区间内的所有值的和小于目标值，next后移一位，如果大于目标值，prev后移一位，如果等于目标值，把当前区间内的所有数放入数组中再放入一个list中。</p><p>这样下去直到prev大于目标值的一半，就可以结束循环了，然后将list中所有的数组再搞进一个数组里去。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">findContinuousSequence</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> prev <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>next <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>next<span class="token operator">&lt;=</span><span class="token punctuation">(</span>target<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">></span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>                sum <span class="token operator">=</span> sum<span class="token operator">-</span>prev<span class="token punctuation">;</span>                prev<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">==</span> target<span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>next<span class="token operator">-</span>prev<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>next<span class="token operator">-</span>prev<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">+</span>prev<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                next<span class="token operator">++</span><span class="token punctuation">;</span>                sum <span class="token operator">=</span> sum<span class="token operator">+</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;输入一个正整数 &lt;code&gt;target&lt;/code&gt; ，输出所有和为 &lt;code&gt;target&lt;/code&gt; 的连续正整数序列（至少含有两个数）。&lt;/p&gt;
&lt;p&gt;序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="https://www.codetool.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>SQL优化-从执行策略上提高数据库性能</title>
    <link href="https://www.codetool.top/article/SQL%E4%BC%98%E5%8C%96-%E4%BB%8E%E6%89%A7%E8%A1%8C%E7%AD%96%E7%95%A5%E4%B8%8A%E6%8F%90%E9%AB%98%E6%95%B0%E6%8D%AE%E5%BA%93%E6%80%A7%E8%83%BD/"/>
    <id>https://www.codetool.top/article/SQL优化-从执行策略上提高数据库性能/</id>
    <published>2020-03-05T15:17:38.000Z</published>
    <updated>2020-03-05T15:42:55.808Z</updated>
    
    <content type="html"><![CDATA[<p>该文前置知识：</p><ul><li><a href="../SQL优化前置知识之优化前分析/">SQL优化前置知识之优化前分析</a></li><li><a href="../SQL优化前置知识之索引的正确使用姿势/">SQL优化前置知识之索引的正确使用姿势</a></li></ul><p>数据库的性能在系统中非常重要，在前面了解了Redis高可用的背景下也了解到了许多问题都会给数据库施加非常大的压力，一旦数据库崩溃会带来非常严重的后果乃至整个系统崩溃，对数据库性能的优化主要方法是：</p><ol><li>SQL 语句及索引的优化</li><li>数据库表结构的优化</li><li>系统配置的优化</li><li>硬件的优化</li></ol><p>从效果上第一条影响最大，后面越来越小。这篇文章就主要来阐述SQL的优化方法。</p><p>注：在本篇文章的编写过程中，我发现mysql5.7版本对某些sql语句已经有了自动优化机制，但还是建议了解sql语句的优化，毕竟版本的事总不如脑子里的东西稳。</p><h1 id="优化load-data">1 优化load data</h1><p>当使用load data infile命令导入数据的时候，适当的设置可以提高导入的效率。</p><p><img src="https://api.codetool.top/img/15834130168834.png" alt="load data infile"></p><h2 id="主键顺序插入">1.1 主键顺序插入</h2><p>因为聚簇索引的关系，如果主键的值是顺序的，那么 InnoDB 会把每一条记录都存储在上一条记录的后面，填充的是同一个页，减少了IO页的次数。如果InnoDB表没有主键，那么系统会自动默认创建一个内部列作为主键，所以如果可以给表创建一个主键，将可以利用这点，来提高导入数据的效率。</p><h2 id="关闭唯一性校验">1.2 关闭唯一性校验</h2><p>如果可以确定插入的数据满足唯一性约束，可以在导入数据前执行 <code>SET UNIQUE_CHECKS=0</code>，关闭唯一性校验，在导入结束后执行<code>SET UNIQUE_CHECKS=1</code>，恢复唯一性校验，可以提高导入的效率。</p><h2 id="手动提交事务">1.3 手动提交事务</h2><p>如果应用使用自动提交的方式，建议在导入前执行 SET AUTOCOMMIT=0，关闭自动提交，导入结束后再执行 SET AUTOCOMMIT=1，打开自动提交，也可以提高导入的效率。</p><h1 id="优化insert语句">2 优化insert语句</h1><p>当进行数据的insert操作的时候，可以考虑采用以下几种优化方案。</p><h2 id="合并insert语句">2.1 合并insert语句</h2><p>如果需要同时对一张表插入很多行数据时，应该尽量使用多个值的insert语句，这种方式将大大的缩减客户端与数据库之间的连接、关闭等消耗。使得效率比分开执行的单个insert语句快。</p><p>示例， 原始方式为：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>优化后的方案为 ： </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'Cat'</span><span class="token punctuation">)</span>，<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="在事务中进行数据插入">2.2 在事务中进行数据插入</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">start</span> <span class="token keyword">transaction</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Tom'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'Cat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">insert</span> <span class="token keyword">into</span> tb_test <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Jerry'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">commit</span><span class="token punctuation">;</span></code></pre><h2 id="数据有序插入">2.3 数据有序插入</h2><p>和load data一样的原理</p><h1 id="优化join">3 优化join</h1><p>这部分的内容在<a href="../数据库理论之查询处理和查询优化/">数据库理论之查询处理和查询优化</a>谈得比较详细，总的来说是要先选择再连接。</p><h1 id="小表驱动大表">4 小表驱动大表</h1><p>如果有两张表连接，类似于二重循环</p><p>外层的表应该是小表，内层的应该是大表。</p><p>虽然总的遍历次数是一样的，但是频繁切换数据表是影响效率的（IO 次数），应该尽可能减少切换表的次数。</p><p>这方面内容可以参考：<a href="https://www.cnblogs.com/chafanbusi/p/10647471.html" target="_blank" rel="noopener">MySql 小表驱动大表 - 茶饭不撕 - 博客园</a></p><h1 id="优化order-by语句">5 优化order by语句</h1><h2 id="了解：两种排序方式">5.1 了解：两种排序方式</h2><p>第一种是通过<strong>对返回数据进行排序</strong>，也就是通常说的 <code>filesort</code> 排序，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序。</p><p>第二种<strong>通过有序索引顺序扫描</strong>直接返回有序数据，这种情况即为 <code>using index</code>，不需要额外排序，操作效率高。</p><p>可以在explain中看到sql语句使用的是哪种排序方法。</p><p>优化目标：尽量减少额外的排序，通过索引直接返回有序数据。</p><p>对于索引<code>(a,b,c)</code>，不能使用索引进行排序的情况：（应避免）</p><ul><li><code>ORDER BY a ASC, b DESC, c DESC</code>   /<em>排序不一致</em>/</li><li><code>WHERE g = const ORDER BY b, c</code>    /<em>不满足最左前缀</em>/</li><li><code>WHERE a in (...) ORDER BY b, c</code>   /<em>对于排序来说，范围in也不能满足最左前缀</em>/</li></ul><h2 id="了解：filesort的算法">5.2 了解：filesort的算法</h2><p>有的时候并不能避免filesort，该如何优化filesort就得了解它的底层实现。</p><p><strong>双路排序：</strong> </p><p>MySQL4.1之前是使用双路排序,字面意思就是两次扫描磁盘,最终得到数据。</p><p>它的工作过程：读取行指针和 orderby列,对他们进行排序,然后扫描已经排序好的列表,按照列表中的值重新从列表中读取对应的数据输出</p><p><strong>概括：</strong> 从磁盘取排序字段,在 buffer进行排序,再从磁盘取其他字段。</p><p>然而取一批数据,要对磁盘进行了两次扫描,众所周知,IO是很耗时的,所以在mysql4.1之后,出现了第二种改进的算法,就是<strong>单路排序</strong>：</p><p><strong>单路排序的工作过程：</strong> 从磁盘读取查询需要的所有列,按照 order by列在 buffer对它们进行排序,然后扫描排序后的列表进行输出,它的效率更快一些,避免了第二次读取数据。并且把随机IO变成了顺序IO,但是它会使用更多的空间,因为它把每一行都保存在内存中了。</p><p><strong>单路排序问题：</strong></p><p>在 sort_buffer 中单路排序比双路排序要多占用很多空间，因为单路排序是把所有字段都取出, 所以<strong>有可能取出的数据的总大小超出了 sort_buffer 的容量</strong>，导致每次只能取 sort_buffer容量大小的数据，进行排序（创建 tmp 文件，多路合并），排完再取 sort_buffer 容量大小，再排……从而多次 I/O。本来想省一次 I/O 操作，反而导致了大量的 I/O 操作，反而得不偿失。</p><h2 id="优化方式">5.3 优化方式</h2><p><strong>1)  尽量使用 index 方式排序，遵照索引的最佳左前缀</strong></p><p>排序时使用的字段的顺序最好与 index 建立的顺序相同</p><p>ORDER BY满足两种情况，会使用Index方法排序：</p><ol><li>ORDER BY语句使用索引最左前缀列</li><li>使用WHERE子句与ORDER BY子句条件列组合满足索引最左前缀列</li></ol><p>例：<code>WHERE a = const AND b = const ORDER BY c</code>是允许的</p><p><strong>2)  select * 是一个大忌</strong></p><p>只取出需要的字段， 这点非常重要。在这里的影响是：</p><ol><li>尽量使用覆盖索引，可以直接从索引树中读取数据，避免二次查询聚簇索引，进而导致filesort。</li><li>当Query的字段大小总和小于 <code>max_length_for_sort_data</code> 而且排序字段不是<code>TEXT|BLOB</code> 类型时，会用改进后的算法——单路排序， 否则用老算法——多路排序。</li><li>避免取出太多数据使得占用内存超过 <code>sort_buffer_size</code> 而采用多路排序。</li></ol><p><strong>3)  尝试提高 sort_buffer_size 和 max_length_for_sort_data</strong></p><p>提高这两个参数，会增加用改进算法的概率。两个参数最好达成一种平衡，否则如果<code>max_length_for_sort_data</code>设的太高，数据总容量超出<code>sort_buffer_size</code> 的概率就增大，明显症状是高的磁盘 I/O 活动和低的处理器使用率。</p><h1 id="优化GROUP-BY语句">6 优化GROUP BY语句</h1><p>group by实质是先排序后进行分组,遵照索引的最佳左前缀规则，所以也尽量满足该规则。</p><p>当无法使用索引时，GROUP BY 使用两种策略来完成：使用临时表和filesort来做分组。表现为<code>use temporary</code>和<code>use filesort</code>。</p><p>当无法使用索引列：</p><ul><li>可以优化filesort，即增大<code>sort_buffer_size</code>参数和<code>max_length_for_sort_data</code>参数。</li><li>可以只使用临时表，不进行filesort，这样返回的结果是无序的，想要加上<code>ORDER BY null</code></li></ul><p>另，避免使用having，where高于having，能写在where限定的条件就不要去having限定了。</p><h1 id="优化嵌套查询">7 优化嵌套查询</h1><p>Mysql4.1版本之后，开始支持SQL的子查询。这个技术可以使用SELECT语句来创建一个单列的查询结果，然后把这个结果作为过滤条件用在另一个查询中。使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的SQL操作，同时也可以避免事务或者表锁死，并且写起来也很容易。但是，有些情况下，子查询是可以被更高效的连接（JOIN）替代。</p><p>事实上，MySQL5.7已经会自动优化一些可以被转成join的sql语句了，临时表开始被避免使用。</p><p>示例：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user <span class="token keyword">where</span> id <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token keyword">select</span> user_id <span class="token keyword">from</span> user_role <span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>优化为：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user u <span class="token punctuation">,</span> user_role ur <span class="token keyword">where</span> u<span class="token punctuation">.</span>id <span class="token operator">=</span> ur<span class="token punctuation">.</span>user_id<span class="token punctuation">;</span></code></pre><h1 id="优化OR条件">8 优化OR条件</h1><p>对于包含OR的查询子句，如果要利用索引，则OR之间的每个条件列都必须用到索引，而且不能使用到复合索引；如果没有索引，则应该考虑增加索引。（避免索引失效）</p><p>如果无法增加索引，还可以考虑使用union合并有索引的那些查询出来的和没索引查询出来的结果集代替or。（在数据量小的情况下不推荐，用到临时表有的时候效率更低）</p><h1 id="优化limit语句">9 优化limit语句</h1><p>当偏移量非常大的时候，比如 limit 100000,20 这样的查询，这时 MySQL 需要查询 100020 条记录然后只返回最后 20 条，这样的代价非常高。要优化这种查询，要么在页面中限制分页数量，要么优化大偏移的性能。</p><p>一个简单的办法是使用覆盖索引（延迟关联）</p><p>意思就是先把索引排序，取出100000-20的索引值，然后用这些数据再回表查询对应行的所有列的值。使用子查询的写法就是：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_item t<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">select</span> id <span class="token keyword">from</span> tb_item <span class="token keyword">order</span> <span class="token keyword">by</span> id <span class="token keyword">limit</span> <span class="token number">100000</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token number">a</span> <span class="token keyword">where</span> t<span class="token punctuation">.</span>id<span class="token operator">=</span><span class="token number">a</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span></code></pre><p>另一种方法，如果使用书签记录上次取数据的位置，那么下次就可以直接从该书签记录的位置开始扫描。假设主键递增，那么当查询<code>limit 100000,20</code>返回的最后一条数据是<code>id= 1000102</code>，那么下一次查询可以使用<code>where id&gt;1000102</code>来限定范围。</p><h1 id="使用SQL提示">10 使用SQL提示</h1><p>SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。</p><p>但是除非你的优化经验很好，否则不建议使用hint强制要求使用某个索引，因为至今MySQL本身对sql的优化程度已经很高了 : )</p><h2 id="USE-INDEX">10.1 USE INDEX</h2><p>在查询语句中表名的后面，添加 use index 来提供希望MySQL去参考的索引列表，就可以让MySQL不再考虑其他可用的索引。</p><h2 id="IGNORE-INDEX">10.2 IGNORE INDEX</h2><p>如果用户只是单纯的想让MySQL忽略一个或者多个索引，则可以使用 ignore index 作为 hint。</p><h2 id="FORCE-INDEX">10.3 FORCE INDEX</h2><p>为强制MySQL使用一个特定的索引，可在查询中使用 force index 作为hint。 </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;该文前置知识：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;../SQL优化前置知识之优化前分析/&quot;&gt;SQL优化前置知识之优化前分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../SQL优化前置知识之索引的正确使用姿势/&quot;&gt;SQL优化前置知识之索引的正确使用姿势&lt;/a&gt;
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="优化" scheme="https://www.codetool.top/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="数据库" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://www.codetool.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL优化前置知识之索引的正确使用姿势</title>
    <link href="https://www.codetool.top/article/SQL%E4%BC%98%E5%8C%96%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86%E4%B9%8B%E7%B4%A2%E5%BC%95%E7%9A%84%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/"/>
    <id>https://www.codetool.top/article/SQL优化前置知识之索引的正确使用姿势/</id>
    <published>2020-03-05T12:15:33.000Z</published>
    <updated>2020-03-06T12:11:12.513Z</updated>
    
    <content type="html"><![CDATA[<p>该文的前置知识：<a href="../SQL优化前置知识之优化前分析">SQL优化前置知识之优化前分析</a></p><h1 id="索引失效">1 索引失效</h1><p>有的sql语句会不使用索引？在编写sql语句的时候应避免这些情况，一起来看看这些情况吧：</p><h2 id="不遵从最左前缀规则">1.1 不遵从最左前缀规则</h2><p>如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始，并且不跳过索引中的列。</p><p>最左前缀的原理来自于B+树对节点的排序规则：</p><p>摘自<a href="../MySQL索引概述及索引的分类/">MySQL索引概述及索引的分类</a></p><ul><li>如果不是按照索引的最左列开始查找，则无法使用索引</li><li>不能跳过索引中的列</li><li>如果查询中有某个列的范围查询，则其右边所有列都无法使用索引优化查找</li></ul><p>验证最左前缀规则：</p><ol><li>建立索引</li></ol><pre><code>create index idx_uname_pw_name on t_user(username,password,name);Query OK, 0 rows affected (0.05 sec)Records: 0  Duplicates: 0  Warnings: 0</code></pre><ol start="2"><li>以最左前缀规则查询</li></ol><pre><code>mysql&gt; explain select * from t_user where username = &#39;super&#39;;+----+-------------+--------+------------+------+-------------------+-------------------+---------+-------+------+----------+-------------+| id | select_type | table  | partitions | type | possible_keys     | key               | key_len | ref   | rows | filtered | Extra       |+----+-------------+--------+------------+------+-------------------+-------------------+---------+-------+------+----------+-------------+|  1 | SIMPLE      | t_user | NULL       | ref  | idx_uname_pw_name | idx_uname_pw_name | 137     | const |    1 |   100.00 | Using index |+----+-------------+--------+------------+------+-------------------+-------------------+---------+-------+------+----------+-------------+1 row in set, 1 warning (0.00 sec)</code></pre><p>可见使用了索引</p><ol start="3"><li>不以最左前缀规则查询</li></ol><pre><code>mysql&gt; explain select * from t_user where name = &#39;学生1&#39;;+----+-------------+--------+------------+-------+---------------+-------------------+---------+------+------+----------+--------------------------+| id | select_type | table  | partitions | type  | possible_keys | key               | key_len | ref  | rows | filtered | Extra                    |+----+-------------+--------+------------+-------+---------------+-------------------+---------+------+------+----------+--------------------------+|  1 | SIMPLE      | t_user | NULL       | index | NULL          | idx_uname_pw_name | 564     | NULL |    6 |    16.67 | Using where; Using index |+----+-------------+--------+------------+-------+---------------+-------------------+---------+------+------+----------+--------------------------+1 row in set, 1 warning (0.00 sec)</code></pre><p>可见此时type变为了”index”，扫描索引树。</p><h2 id="在索引上使用表达式">1.2 在索引上使用表达式</h2><p>索引列上使用了表达式，如 where substr(a, 1, 3) = ‘hhh’，where a = a + 1，表达式是一大忌讳，再简单 MySQL 也不认。</p><p>有时数据量不是大到严重影响速度时，一般可以先查出来，比如先查所有有订单记录的数据，再在程序中去筛选</p><p>哪怕是该字段没有建立索引，但不能保证以后不在这个字段上建立索引，所以可以这么说：不要在任何字段上进行操作。</p><pre><code>mysql&gt; explain select * from t_user where left(username,2) = &#39;ad&#39;;+----+-------------+--------+------------+-------+---------------+-------------------+---------+------+------+----------+--------------------------+| id | select_type | table  | partitions | type  | possible_keys | key               | key_len | ref  | rows | filtered | Extra                    |+----+-------------+--------+------------+-------+---------------+-------------------+---------+------+------+----------+--------------------------+|  1 | SIMPLE      | t_user | NULL       | index | NULL          | idx_uname_pw_name | 564     | NULL |    6 |   100.00 | Using where; Using index |+----+-------------+--------+------------+-------+---------------+-------------------+---------+------+------+----------+--------------------------+1 row in set, 1 warning (0.00 sec)Note (Code 1003): /* select#1 */ select `test`.`t_user`.`id` AS `id`,`test`.`t_user`.`username` AS `username`,`test`.`t_user`.`password` AS `password`,`test`.`t_user`.`name` AS `name` from `test`.`t_user` where (left(`test`.`t_user`.`username`,2) = &#39;ad&#39;)</code></pre><h2 id="range-类型查询字段后面的索引无效">1.3 range 类型查询字段后面的索引无效</h2><p><img src="https://api.codetool.top/img/15834021284440.png" alt></p><p>最后一次只用到了两个索引<br>此时可以建一个只含前两个字段的索引<br>对<code>in()</code>无效，in仍可以使用索引。</p><h2 id="varchar类型不加单引号，造成索引失效">1.4 varchar类型不加单引号，造成索引失效</h2><p><img src="https://api.codetool.top/img/15834024132813.png" alt></p><p>由于在查询时，没有对字符串加单引号，MySQL的查询优化器，会自动的进行类型转换，造成索引失效。</p><h2 id="尽量使用覆盖索引，避免select">1.5 尽量使用覆盖索引，避免select *</h2><p>覆盖索引的概念，往下翻，<code>索引的特殊应用-&gt;覆盖索引</code></p><p><img src="https://api.codetool.top/img/15834026032099.png" alt></p><p>如果查询列，超出索引列，也会降低性能。</p><blockquote><p><strong>TIP:</strong><br>using index ：使用覆盖索引的时候就会出现<br>using where：在查找使用索引的情况下，需要回表去查询所需的数据<br>using index condition：查找使用了索引，但是需要回表查询数据​<br>using index ; using where：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据</p></blockquote><h2 id="使用不等于时索引失效">1.6 使用不等于时索引失效</h2><p><img src="https://api.codetool.top/img/1583403565859.png" alt></p><h2 id="is-not-null-时有时索引失效">1.7 is (not) null 时有时索引失效</h2><p><img src="https://api.codetool.top/img/15834033385073.png" alt></p><p>失效的情况其实是MySQL评估使用索引比全表更慢，见最后一点。</p><h2 id="like-以通配符开头会导致全表扫描">1.8 like 以通配符开头会导致全表扫描</h2><p><img src="https://api.codetool.top/img/15834035806892.png" alt></p><h2 id="使用-or-时索引失效">1.9 使用 or 时索引失效</h2><p><img src="https://api.codetool.top/img/1583403593215.png" alt></p><p>如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。</p><p>其实还蛮好理解的，因为没有索引的列符合条件也满足or，自然要全表扫描。</p><h2 id="in-走索引，-not-in-索引失效">1.10 in 走索引， not in 索引失效</h2><p><img src="https://api.codetool.top/img/15834034738616.png" alt></p><h2 id="如果MySQL评估使用索引比全表更慢，则不使用索引。">1.11 如果MySQL评估使用索引比全表更慢，则不使用索引。</h2><p>这个东西就很玄学了，典型情况是查询的情况占了整表大多数。</p><h1 id="索引的特殊应用">2 索引的特殊应用</h1><h2 id="InnoDB-AUTO-INCREMENT">2.1 InnoDB AUTO_INCREMENT</h2><h3 id="概述">2.1.1 概述</h3><p>如果正在使用 InnoDB 表并且没有什么数据需要聚集，那么可以定义一个代理键作为主键，这种主键的数据应该与应用无关，最简单的方法是使用 AUTO_INCREMENT 自增列。这样可以保证数据行是按顺序写入的，对于根据主键做关联操作的性能也会更好。</p><p>最好避免随机的聚簇索引，特别是对于 IO 密集型应用，比如 UUID，它使得聚簇索引的插入变得完全随机，这是最坏的情况，使得数据没有任何聚集特性。</p><p><strong>顺序主键的优点：</strong></p><p>如果主键的值是顺序的，那么 InnoDB 会把每一条记录都存储在上一条记录的后面。当达到页的最大填充因子时，下一条记录就会写入新的页中。一旦数据按照这种顺序的方式加载，主键页就会近似于被顺序的记录填满，这也正是所期望的结果。</p><p><strong>顺序主键的缺点：</strong></p><p>对于高并发工作负载，在 InnoDB 中按主键顺序插入可能会造成明显的争用。主键的上界会成为热点。因为所有的插入都在这里，所以并发插入可能导致锁竞争。另一个热点可能是AUTO_INCREMENT 锁机制，可能需要重新设计表或应用。</p><h3 id="AUTO-INC锁机制">2.1.2 AUTO-INC锁机制</h3><p>AUTO-INC锁是当向使用含有AUTO_INCREMENT列的表中插入数据时需要获取的一种特殊的表级锁。</p><p>在最简单的情况下，如果一个事务正在向表中插入值，则任何其他事务必须等待对该表执行自己的插入操作，以便第一个事务插入的行的值是连续的。</p><p>InnoDB 会在内存里保存一个计数器用来记录 AUTO_INCREMENT 的值，当插入一个新行数据时，就会用一个表锁来锁住这个计数器，直到插入结束。如果一行一行的插入数据则没有什么问题，但是如果大量的并发插入就废了，表锁会引起 SQL 堵塞，不但影响效率，而且可能会瞬间达到 MAX_CONNECTION 而崩溃。</p><p><strong>插入类型：</strong></p><ol><li>simple inserts<br>simple inserts 指的是那种能够事先确定插入行数的语句，比如 INSERT/REPLACE INTO 等插入单行或者多行的语句，语句中不包括嵌套子查询。此外，INSERT INTO … ON DUPLICATE KEY UPDATE 这类语句也要除外。  </li><li>bulk inserts<br>bulk inserts 指的是事先无法确定插入行数的语句，比如 INSERT/REPLACE INTO … SELECT,<br>LOAD DATA 等。</li><li>mixed-mode inserts<br>指的是 simple inserts 类型中有些行指定了 auto_increment 列的值，有些行没有指定，比如：INSERT INTO t1 (c1,c2) VALUES (1,’a’), (NULL,’b’), (5,’c’), (NULL,’d’);另外一种 mixed-mode inserts 是 INSERT … ON DUPLICATE KEY UPDATE 这种语句，可能导致分配的 auto_increment 值没有被使用。</li></ol><p><code>innodb_autoinc_lock_mode</code> 配置选项控制用于自动增量锁定的算法。 它允许您选择如何在<br>可预测的自动递增值序列和插入操作的最大并发性之间进行权衡，配置语法：</p><p><code>innodb_autoinc_lock_mode=x</code>，x可取值：</p><ul><li>0，传统的 auto_increment 机制。这种模式下所有<strong>针对 auto_increment 列的插入操作都会加AUTO-INC 锁</strong>，分配的值也是一个个分配，是连续的，正常情况下也<strong>不会有间隙</strong>（当然如果事务 rollback 了这个 auto_increment 值就会浪费掉，从而造成间隙）。</li><li>1，这种情况下<ul><li><strong>针对 bulk inserts 才会采用 AUTO-INC 锁这种方式</strong></li><li>针对 simple inserts，则直接通过分析语句，获得要插入的数量，然后<strong>一次性分配足够的 auto_increment id</strong>，只会将整个分配的过程锁住。。当然，如果其他事务已经持有了AUTO-INC锁，则simple inserts需要等待.   </li><li><strong>针对 Mixed-mode inserts：直接分析语句，获得最坏情况下需要插入的数量，然后一次性分配足够的 auto_increment id</strong>，只会将整个分配的过程锁住。保证同一条 insert 语句中新插入的 auto_increment id 都是连续的，语句之间是<strong>可能出现auto_increment 值的空隙</strong>的。比如 mixed-mode inserts 以及 bulk inserts 中都有可能导致一些分配的 auto_increment 值被浪费掉从而导致间隙。</li></ul></li><li>2，这种模式下<strong>任何类型的 inserts 都不会采用 AUTO-INC 锁</strong>，性能最好。这种模式是<strong>来一个分配一个</strong>，而不会锁表，只会锁住分配 id 的过程，和 innodb_autoinc_lock_mode = 1 的区别在于，不会预分配多个。但是在 replication 中当 binlog_format 为 statement-based 时（简称 SBR statement-based replication）存在问题，因为是来一个分配一个，这样当并发执行时，“Bulk inserts”在分配时会同时向其他的 INSERT 分配，<strong>会出现主从不一致</strong>（从库执行结果和主库执行结果不一样），因为 binlog 只会记录开始的 insert id。<strong>可能会在同一条语句内部产生 auto_increment 值间隙。</strong></li></ul><h2 id="覆盖索引">2.2 覆盖索引</h2><p>如果<strong>一个索引包含了所有需要查询字段的值</strong>，就称为覆盖索引。</p><p>覆盖索引的优点：</p><ol><li>索引条目远少于数据行大小，如果只需要读取索引，则 MySQL 就会极大地<strong>减少数据访问</strong>了，这对缓存的负载非常重要，因为这种情况下响应时间大部分花费在数据拷贝上。覆盖索引对 IO 密集型应用也有帮助，因为索引比数据更小，更容易全部放入内存中。</li><li>因为索引是按照列值顺序存储的，<strong>对于 IO 密集型的范围查询会比随机从磁盘读取每一行数据的 IO 次数会少得多</strong>。</li><li>InnoDB 的二级索引在叶节点中保存了行的主键值，如果二级索引是覆盖索引，则可以<strong>避免对主键聚簇索引的二次查询</strong>。  </li></ol><p>不是所有类型的索引都可以成为覆盖索引。覆盖索引必须要存储索引列的值，而哈希索引、空间索引和全文索引都不存储索引列的值，所以 MySQL 只能使用 B 树索引做覆盖索引。当发起一个索引覆盖查询时，在 EXPLAIN 的 Extra 列可以看到 Using index 的信息。InnoDB 的二级索引的叶子节点都包含了主键的值，这意味着 InnoDB 的二级索引可以有效利用这些额外的主键列来覆盖查询。</p><h2 id="使用索引进行排序">2.3 使用索引进行排序</h2><p>MySQL 有两种可以生成有序的结果：通过排序操作；按索引顺序扫描。<strong>如果 EXPLAIN 出来的 type 列的值为 index，则说明 MySQL 使用了索引顺序扫描来做排序。</strong></p><p>扫描索引本身是很快的，但如果索引不能覆盖查询所需的全部列，那就不得不每扫描一条索引记录就都回表查询一次对应的行。这基本上都是随机 IO，因此按索引顺序读取数据的速度通常要比顺序地全表扫描要慢，尤其是在 IO 密集型的工作负载时。只有当索引的列顺序和 ORDER BY 子句的顺序完全一致，并且所有列的排序方向（降序或升序，索引默认是升序）都一样时，MySQL 才可以使用索引来对结果做排序。如果查询需要关联多张表，则只有当 ORDER BY 子句引用的字段全部为第一张表时，才能使用索引做排序。ORDER BY 子句和查找型索引的限制是一样的，都需要满足索引的最左前缀的要求。<strong>有一种情况下 ORDER BY 子句可以不满足索引的最左前缀的要求，就是前导列为常量的时候。</strong></p><h2 id="前缀压缩索引">2.4 前缀压缩索引</h2><p>MyISAM 通过前缀压缩来减少索引的大小，从而让更多的索引可以放入内存中。默认只压缩字符串，但通过参数调整也能对整数进行压缩。</p><p>MyISAM 压缩每个索引块的方法时，先完全保存索引块的第一个值，然后将其他值和第一个值进行比较得到相同前缀的字节数和剩余的不同后缀部分，把这部分存储起来即可。压缩块使用更少的情况，代价是某些操作可能更慢。因为每个值的压缩前缀都依赖前面的值，所以 <strong>MyISAM 查找时无法在索引块使用二分查找而只能从头开始扫描。</strong></p><h2 id="冗余和重复索引">2.5 冗余和重复索引</h2><p>冗余索引：MySQL 允许<strong>在相同列上创建多个索引</strong>。MySQL 需要单独维护重复的索引，并且优化器在优化查询时也需要逐个地进行考虑，这会影响性能。</p><p>重复索引是指<strong>在相同的列上按照相同的顺序创建的相同类型的索引（完全相同）</strong>，应该避免这样创建重复索引，发现以后也应该立即移除。</p><p>冗余索引和重复索引有一些不同。如果创建了索引(A,B)，又创建了索引(A)就是冗余索引，索引(A,B)也可以当做索引(A)来使用。但是如果再创建索引(B,A)，就不是冗余索引。另外，其他不同类型的索引也不会是 B 树索引的冗余索引。</p><p>冗余索引通常发生在为表添加新索引的时候。例如，有人可能会增加一个新的索引(A,B)而不是扩展已有的索引(A)，还有一种情况是将一个索引扩展为(A,PK)，对于 InnoDB 而言 PK 已经包含在二级索引中了，所以这也是冗余的。</p><p><strong>大多数情况下都不需要冗余索引，应该尽量扩展已有的索引而不是创建新索引。</strong>但也<strong>有时候出于性能方面的考虑需要冗余索引，因为扩展已有的索引会导致其变得太大</strong>，从而影响其他使用该索引的查询的性能。</p><p>例如，现在在整数列上有一个索引，需要额外增加一个很长的 VARCHAR 列来扩展该索引，那性能可能会急剧下降。可以使用一些工具来找出冗余和重复的索引。</p><h2 id="索引重用">2.6 索引重用</h2><p>现有索引(A,B,C)，如果要使用索引，那么 where 中必须写为 A=a and B = b and C = c。如果没有对 B 的筛选，还想使用索引，怎么绕过最左前缀匹配呢？</p><p>假设 B 是一个选择性很低的列，只有 b1 和 b2 两种取值，那么查询可以写为 <code>A = a and Bin(b1,b2) and C = c</code>。</p><h2 id="避免多个范围条件">2.7 避免多个范围条件</h2><p>对于范围条件查询，MySQL 无法再使用范围列后面的其他索引列了，但是<strong>对于多个等值条件查询（in …）则没有这个限制。</strong></p><p>假设有索引(A,B)，查询条件为 A &gt; a and B &lt; b，那么此时无法同时使用 A 和 B 的复合索引，只能用到 A 的索引。一定要用的话可以考虑将 A 转为 in(a1,a2…)。</p><h1 id="查看索引使用情况">3 查看索引使用情况</h1><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Handler_read%'</span><span class="token punctuation">;</span>    <span class="token keyword">show</span> <span class="token keyword">global</span> <span class="token keyword">status</span> <span class="token operator">like</span> <span class="token string">'Handler_read%'</span><span class="token punctuation">;</span>    </code></pre><p>这两条语句可以查看mysql索引的使用情况：</p><pre><code>mysql&gt; show status like &#39;Handler_read%&#39;;+-----------------------+-------+| Variable_name         | Value |+-----------------------+-------+| Handler_read_first    | 40    || Handler_read_key      | 43    || Handler_read_last     | 0     || Handler_read_next     | 306   || Handler_read_prev     | 0     || Handler_read_rnd      | 0     || Handler_read_rnd_next | 18832 |+-----------------------+-------+7 rows in set (0.00 sec)</code></pre><p>Handler_read_first：索引中第一条被读的次数。如果较高，表示服务器正执行大量全索引扫描（这个值越低越好）。</p><p>Handler_read_key：如果索引正在工作，这个值代表一个行被索引值读的次数，如果值越低，表示索引得到的性能改善不高，因为索引不经常使用（这个值越高越好）。</p><p>Handler_read_next ：按照键顺序读下一行的请求数。如果你用范围约束或如果执行索引扫描来查询索引列，该值增加。</p><p>Handler_read_prev：按照键顺序读前一行的请求数。该读方法主要用于优化ORDER BY … DESC。</p><p>Handler_read_rnd ：根据固定位置读一行的请求数。如果你正执行大量查询并需要对结果进行排序该值较高。你可能使用了大量需要MySQL扫描整个表的查询或你的连接没有正确使用键。这个值较高，意味着运行效率低，应该建立索引来补救。</p><p>Handler_read_rnd_next：在数据文件中读下一行的请求数。如果你正进行大量的表扫描，该值较高。通常说明你的表索引不正确或写入的查询没有利用索引。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;该文的前置知识：&lt;a href=&quot;../SQL优化前置知识之优化前分析&quot;&gt;SQL优化前置知识之优化前分析&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;索引失效&quot;&gt;1 索引失效&lt;/h1&gt;&lt;p&gt;有的sql语句会不使用索引？在编写sql语句的时候应避免这些情况，一起来看看这些情况吧：&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="优化" scheme="https://www.codetool.top/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="数据库" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://www.codetool.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>SQL优化前置知识之优化前分析</title>
    <link href="https://www.codetool.top/article/SQL%E4%BC%98%E5%8C%96%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86%E4%B9%8B%E4%BC%98%E5%8C%96%E5%89%8D%E5%88%86%E6%9E%90/"/>
    <id>https://www.codetool.top/article/SQL优化前置知识之优化前分析/</id>
    <published>2020-03-05T07:41:38.000Z</published>
    <updated>2020-03-05T09:10:19.779Z</updated>
    
    <content type="html"><![CDATA[<p>在应用的的开发过程中，由于初期数据量小，开发人员写 SQL 语句时更重视功能上的实现，但是当应用系统正式上线后，随着生产数据量的急剧增长，很多 SQL 语句开始逐渐显露出性能问题，对生产的影响也越来越大，此时这些有问题的 SQL 语句就成为整个系统性能的瓶颈，因此我们必须要对它们进行优化，本章将详细介绍在 MySQL 中优化 SQL 语句的方法。</p><p>当面对一个有 SQL 性能问题的数据库时，我们应该从何处入手来进行系统的分析，使得能够尽快定位问题 SQL 并尽快解决问题。</p><h1 id="查看SQL执行频率">1 查看SQL执行频率</h1><p>MySQL 客户端连接成功后，通过 show [session|global] status 命令可以提供服务器状态信息。show [session|global] status 可以根据需要加上参数“session”或者“global”来显示 session 级（当前连接）的计结果和 global 级（自数据库上次启动至今）的统计结果。如果不写，默认使用参数是“session”。</p><p>下面的命令显示了当前 session 中所有统计参数的值：</p><pre><code>mysql&gt; show status like &#39;Com_______&#39;;+---------------+-------+| Variable_name | Value |+---------------+-------+| Com_binlog    | 0     || Com_commit    | 4     || Com_delete    | 4     || Com_insert    | 35    || Com_repair    | 0     || Com_revoke    | 0     || Com_select    | 291   || Com_signal    | 0     || Com_update    | 11    || Com_xa_end    | 0     |+---------------+-------+10 rows in set (0.00 sec)</code></pre><p>global:</p><pre><code>mysql&gt; show global status like &#39;Com_______&#39;;+---------------+-------+| Variable_name | Value |+---------------+-------+| Com_binlog    | 0     || Com_commit    | 0     || Com_delete    | 0     || Com_insert    | 0     || Com_repair    | 0     || Com_revoke    | 0     || Com_select    | 1     || Com_signal    | 0     || Com_update    | 0     || Com_xa_end    | 0     |+---------------+-------+10 rows in set (0.00 sec)</code></pre><p>下面这条语句则只会查看使用innodb引擎表的操作次数：</p><pre><code>mysql&gt; show status like &#39;Innodb_rows_%&#39;;+----------------------+-------+| Variable_name        | Value |+----------------------+-------+| Innodb_rows_deleted  | 2     || Innodb_rows_inserted | 49    || Innodb_rows_read     | 382   || Innodb_rows_updated  | 17    |+----------------------+-------+4 rows in set (0.00 sec)</code></pre><table><thead><tr><th align="left">参数</th><th>含义</th></tr></thead><tbody><tr><td align="left">Com_select</td><td>执行 select 操作的次数，一次查询只累加 1。</td></tr><tr><td align="left">Com_insert</td><td>执行 INSERT 操作的次数，对于批量插入的 INSERT 操作，只累加一次。</td></tr><tr><td align="left">Com_update</td><td>执行 UPDATE 操作的次数。</td></tr><tr><td align="left">Com_delete</td><td>执行 DELETE 操作的次数。</td></tr><tr><td align="left">Innodb_rows_read</td><td>select 查询返回的行数。</td></tr><tr><td align="left">Innodb_rows_inserted</td><td>执行 INSERT 操作插入的行数。</td></tr><tr><td align="left">Innodb_rows_updated</td><td>执行 UPDATE 操作更新的行数。</td></tr><tr><td align="left">Innodb_rows_deleted</td><td>执行 DELETE 操作删除的行数。</td></tr></tbody></table><h1 id="定位低效SQL">2 定位低效SQL</h1><p>可以通过以下两种方式定位执行效率较低的 SQL 语句。</p><ul><li>慢查询日志 : 通过慢查询日志定位那些执行效率较低的 SQL 语句，用–log-slow-queries[=file_name]选项启动时，mysqld 写一个包含所有执行时间超过 long_query_time 秒的 SQL 语句的日志文件。</li><li>show processlist  : 慢查询日志在查询结束以后才纪录，所以在应用反映执行效率出现问题的时候查询慢查询日志并不能定位问题，可以使用show processlist命令查看当前MySQL在进行的线程，包括线程的状态、是否锁表等，可以实时地查看 SQL 的执行情况，同时对一些锁表操作进行优化。</li></ul><p>show processlist的结果：</p><table><thead><tr><th>列名</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>用户登录mysql时，系统分配的”connection_id”，可以使用函数connection_id()查看</td></tr><tr><td>user</td><td>显示当前用户。如果不是root，这个命令就只显示用户权限范围的sql语句</td></tr><tr><td>host</td><td>显示这个语句是从哪个ip的哪个端口上发的，可以用来跟踪出现问题语句的用户</td></tr><tr><td>db</td><td>显示这个进程目前连接的是哪个数据库</td></tr><tr><td>command</td><td>显示当前连接的执行的命令，一般取值为休眠（sleep），查询（query），连接（connect）等</td></tr><tr><td>time</td><td>显示这个状态持续的时间，单位是秒</td></tr><tr><td>state</td><td>显示使用当前连接的sql语句的状态，很重要的列。state描述的是语句执行中的某一个状态。一个sql语句，以查询为例，可能需要经过copying to tmp table、sorting result、sending data等状态才可以完成</td></tr><tr><td>info</td><td>显示这个sql语句，是判断问题语句的一个重要依据</td></tr></tbody></table><h1 id="explain分析执行计划">3 explain分析执行计划</h1><p>通过以上步骤查询到效率低的 SQL 语句后，可以通过 EXPLAIN或者 DESC命令获取 MySQL如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。</p><p>查询SQL语句的执行计划 ： </p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">explain</span>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_item <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p><img src="https://api.codetool.top/img/15833935425677.png" alt></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">explain</span>  <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_item <span class="token keyword">where</span> title <span class="token operator">=</span> <span class="token string">'阿尔卡特 (OT-979) 冰川白 联通3G手机3'</span><span class="token punctuation">;</span></code></pre><p><img src="https://api.codetool.top/img/15833935895541.png" alt></p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>id</td><td>select查询的序列号，是一组数字，表示的是查询中执行select子句或者是操作表的顺序。</td></tr><tr><td>select_type</td><td>表示 SELECT 的类型，常见的取值有 SIMPLE（简单表，即不使用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION 中的第二个或者后面的查询语句）、SUBQUERY（子查询中的第一个 SELECT）等</td></tr><tr><td>table</td><td>输出结果集的表</td></tr><tr><td>type</td><td>表示表的连接类型，性能由好到差的连接类型为( system  —&gt;  const  —–&gt;  eq_ref  ——&gt;  ref  ——-&gt;  ref_or_null—-&gt;  index_merge  —&gt;  index_subquery  —–&gt;  range  —–&gt;  index  ——&gt; all )</td></tr><tr><td>possible_keys</td><td>表示查询时，可能使用的索引</td></tr><tr><td>key</td><td>表示实际使用的索引</td></tr><tr><td>key_len</td><td>索引字段的长度</td></tr><tr><td>rows</td><td>扫描行的数量</td></tr><tr><td>extra</td><td>执行情况的说明和描述</td></tr></tbody></table><p>准备三张如图所示的表：</p><p><img src="https://api.codetool.top/img/15833941692933.png" alt></p><h2 id="explain-之-id">3.1 explain 之 id</h2><p>id 字段是 select查询的序列号，是一组数字，表示的是查询中执行select子句或者是操作表的顺序。id 情况有三种 ： </p><p>1） id相同表示加载表的顺序是从上到下。</p><pre><code>mysql&gt; explain select * from t_role r, t_user u, user_role ur where r.id = ur.role_id and u.id = ur.user_id ;+----+-------------+-------+------------+--------+-----------------------------+---------+---------+-----------------+------+----------+----------------------------------------------------+    | id | select_type | table | partitions | type   | possible_keys               | key     | key_len | ref             | rows | filtered | Extra                                              |+----+-------------+-------+------------+--------+-----------------------------+---------+---------+-----------------+------+----------+----------------------------------------------------+|  1 | SIMPLE      | r     | NULL       | ALL    | PRIMARY                     | NULL    | NULL    | NULL            |    5 |   100.00 | NULL                                               ||  1 | SIMPLE      | ur    | NULL       | ALL    | fk_ur_user_id,fk_ur_role_id | NULL    | NULL    | NULL            |    6 |    20.00 | Using where; Using join buffer (Block Nested Loop) ||  1 | SIMPLE      | u     | NULL       | eq_ref | PRIMARY                     | PRIMARY | 98      | test.ur.user_id |    1 |   100.00 | NULL                                               |+----+-------------+-------+------------+--------+-----------------------------+---------+---------+-----------------+------+----------+----------------------------------------------------+3 rows in set, 1 warning (0.01 sec)</code></pre><p>2） id 不同id值越大，优先级越高，越先被执行。 </p><pre><code>mysql&gt; EXPLAIN SELECT * FROM t_role WHERE id = (SELECT role_id FROM user_role WHERE user_id = (SELECT id FROM t_user WHERE username = &#39;stu1&#39;));+----+-------------+-----------+------------+-------+----------------------+----------------------+---------+-------+------+----------+-------------+| id | select_type | table     | partitions | type  | possible_keys        | key                  | key_len | ref   | rows | filtered | Extra       |+----+-------------+-----------+------------+-------+----------------------+----------------------+---------+-------+------+----------+-------------+|  1 | PRIMARY     | t_role    | NULL       | const | PRIMARY              | PRIMARY              | 98      | const |    1 |   100.00 | NULL        ||  2 | SUBQUERY    | user_role | NULL       | ref   | fk_ur_user_id        | fk_ur_user_id        | 99      | const |    1 |   100.00 | Using where ||  3 | SUBQUERY    | t_user    | NULL       | const | unique_user_username | unique_user_username | 137     | const |    1 |   100.00 | Using index |+----+-------------+-----------+------------+-------+----------------------+----------------------+---------+-------+------+----------+-------------+3 rows in set, 1 warning (0.00 sec)</code></pre><p>3） id 有相同，也有不同，同时存在。id相同的可以认为是一组，从上往下顺序执行；在所有的组中，id的值越大，优先级越高，越先执行。</p><h2 id="explain-之-select-type">3.2 explain 之 select_type</h2><p>表示 SELECT 的类型，常见的取值，如下表所示：</p><table><thead><tr><th>select_type</th><th>含义</th></tr></thead><tbody><tr><td>SIMPLE</td><td>简单的select查询，查询中不包含子查询或者UNION</td></tr><tr><td>PRIMARY</td><td>查询中若包含任何复杂的子查询，最外层查询标记为该标识</td></tr><tr><td>SUBQUERY</td><td>在SELECT 或 WHERE 列表中包含了子查询</td></tr><tr><td>DERIVED</td><td>在FROM 列表中包含的子查询，被标记为 DERIVED（衍生） MYSQL会递归执行这些子查询，把结果放在临时表中</td></tr><tr><td>UNION</td><td>若第二个SELECT出现在UNION之后，则标记为UNION ； 若UNION包含在FROM子句的子查询中，外层SELECT将被标记为 ： DERIVED</td></tr><tr><td>UNION RESULT</td><td>从UNION表获取结果的SELECT</td></tr></tbody></table><pre><code>mysql&gt; explain select * from t_user where id = (select id from user_role where role_id = &#39;9&#39;);+----+-------------+-----------+------------+------+---------------+---------------+---------+-------+------+----------+-------------+| id | select_type | table     | partitions | type | possible_keys | key           | key_len | ref   | rows | filtered | Extra       |+----+-------------+-----------+------------+------+---------------+---------------+---------+-------+------+----------+-------------+|  1 | PRIMARY     | t_user    | NULL       | ALL  | PRIMARY       | NULL          | NULL    | NULL  |    6 |    16.67 | Using where ||  2 | SUBQUERY    | user_role | NULL       | ref  | fk_ur_role_id | fk_ur_role_id | 99      | const |    1 |   100.00 | Using index |+----+-------------+-----------+------------+------+---------------+---------------+---------+-------+------+----------+-------------+2 rows in set, 3 warnings (0.00 sec)</code></pre><pre><code>mysql&gt; explain select * from t_user where id = &#39;1&#39; union select * from t_user where id = &#39;2&#39;;+----+--------------+------------+------------+-------+---------------+---------+---------+-------+------+----------+-----------------+| id | select_type  | table      | partitions | type  | possible_keys | key     | key_len | ref   | rows | filtered | Extra           |+----+--------------+------------+------------+-------+---------------+---------+---------+-------+------+----------+-----------------+|  1 | PRIMARY      | t_user     | NULL       | const | PRIMARY       | PRIMARY | 98      | const |    1 |   100.00 | NULL            ||  2 | UNION        | t_user     | NULL       | const | PRIMARY       | PRIMARY | 98      | const |    1 |   100.00 | NULL            || NULL | UNION RESULT | &lt;union1,2&gt; | NULL       | ALL   | NULL          | NULL    | NULL    | NULL  | NULL |     NULL | Using temporary |+----+--------------+------------+------------+-------+---------------+---------+---------+-------+------+----------+-----------------+3 rows in set, 1 warning (0.01 sec)</code></pre><p><strong>注：</strong> MySQL5.7中对Derived table做了一个新特性。该特性允许将符合条件的Derived table中的子表与父查询的表合并进行直接JOIN。<strong>体现为simple查询</strong></p><h2 id="explain-之-table">3.3 explain 之 table</h2><p>展示这一行的数据是关于哪一张表的 </p><h2 id="explain-之-type">3.4 explain 之 type</h2><p>type 显示的是访问类型，是较为重要的一个指标，可取值为： </p><table><thead><tr><th>type</th><th>含义</th></tr></thead><tbody><tr><td>NULL</td><td>MySQL不访问任何表，索引，直接返回结果</td></tr><tr><td>system</td><td>表只有一行记录(等于系统表)，这是const类型的特例，一般不会出现</td></tr><tr><td>const</td><td>表示通过索引一次就找到了，const 用于比较primary key 或者 unique 索引。因为只匹配一行数据，所以很快。如将主键置于where列表中，MySQL 就能将该查询转换为一个常量。const于将 “主键” 或 “唯一” 索引的所有部分与常量值进行比较</td></tr><tr><td>eq_ref</td><td>类似ref，区别在于使用的是唯一索引，使用主键的关联查询，关联查询出的记录只有一条。常见于主键或唯一索引扫描</td></tr><tr><td>ref</td><td>非唯一性索引扫描，返回匹配某个单独值的所有行。本质上也是一种索引访问，返回所有匹配某个单独值的所有行（多个）</td></tr><tr><td>ref_or_null</td><td>类似ref，但是可以搜索值为NULL的行。</td></tr><tr><td>index_merge</td><td>表示使用了索引合并的优化方法。</td></tr><tr><td>range</td><td>只检索给定返回的行，使用一个索引来选择行。 where 之后出现 between ， &lt; , &gt; , in 等操作。</td></tr><tr><td>index</td><td>index 与 ALL的区别为  index 类型只是遍历了索引树， 通常比ALL 快， ALL 是遍历数据文件。</td></tr><tr><td>all</td><td>将遍历全表以找到匹配的行</td></tr></tbody></table><p>结果值从最好到最坏以此是：</p><pre><code>NULL &gt; system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALLsystem &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL</code></pre><p>==一般来说， 我们需要保证查询至少达到 range 级别， 最好达到ref 。==</p><h2 id="explain-之-key">3.5 explain 之 key</h2><p>possible_keys : 显示可能应用在这张表的索引， 一个或多个。 </p><p>key ： 实际使用的索引， 如果为NULL， 则没有使用索引。</p><p>key_len : 表示索引中使用的字节数， 该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好。</p><h2 id="explain-之-rows">3.6 explain 之 rows</h2><p>扫描行的数量。</p><h2 id="explain-之-extra">3.7 explain 之 extra</h2><p>其他的额外的执行计划信息，在该列展示 。</p><table><thead><tr><th>extra</th><th>含义</th></tr></thead><tbody><tr><td>using  filesort</td><td>说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取， 称为 “文件排序”, 效率低。</td></tr><tr><td>using  temporary</td><td>使用了临时表保存中间结果，MySQL在对查询结果排序时使用临时表。常见于 order by 和 group by； 效率低</td></tr><tr><td>using  index</td><td>表示相应的select操作使用了覆盖索引， 避免访问表的数据行， 效率不错。</td></tr></tbody></table><h1 id="show-profile分析SQL">4 show profile分析SQL</h1><p>Mysql从5.0.37版本开始增加了对 show profiles 和 show profile 语句的支持。show profiles 能够在做SQL优化时帮助我们了解时间都耗费到哪里去了。</p><p>(5.7版本后推荐使用performance_schema工具)</p><p>通过 have_profiling 参数，能够看到当前MySQL是否支持profile：</p><pre><code>mysql&gt; select @@have_profiling;+------------------+| @@have_profiling |+------------------+| YES              |+------------------+1 row in set, 1 warning (0.00 sec)</code></pre><p>默认profiling是关闭的，可以通过set语句在Session级别开启profiling：</p><pre><code>mysql&gt; set profiling=1;Query OK, 0 rows affected, 1 warning (0.00 sec)</code></pre><p>查看是否开启：</p><pre><code>mysql&gt; select @@profiling;+-------------+| @@profiling |+-------------+|           1 |+-------------+1 row in set, 1 warning (0.00 sec)</code></pre><p>通过profile，我们能够更清楚地了解SQL执行的过程。</p><p>首先，我们可以执行一系列的操作，如：</p><pre><code>show databases;use db01;show tables;select * from tb_item where id &lt; 5;select count(*) from tb_item;</code></pre><p>执行完上述命令之后，再执行show profiles 指令， 来查看SQL语句执行的耗时：</p><p><img src="https://api.codetool.top/img/15833986524423.png" alt></p><p>通过<code>show profile for query query_id</code>语句可以查看到该SQL执行过程中每个线程的状态和消耗的时间：</p><p><img src="https://api.codetool.top/img/15833987009481.png" alt></p><p>Sending data 状态表示MySQL线程开始访问数据行并把结果返回给客户端，而不仅仅是返回个客户端。由于在Sending data状态下，MySQL线程往往需要做大量的磁盘读取操作，所以经常是整各查询中耗时最长的状态。</p><p>在获取到最消耗时间的线程状态后，MySQL支持进一步选择all、cpu、block io 、context switch、page faults等明细类型类查看MySQL在使用什么资源上耗费了过高的时间。例如，选择查看CPU的耗费时间：</p><p><img src="https://api.codetool.top/img/15833987633054.png" alt></p><table><thead><tr><th>字段</th><th>含义</th></tr></thead><tbody><tr><td>Status</td><td>sql 语句执行的状态</td></tr><tr><td>Duration</td><td>sql 执行过程中每一个步骤的耗时</td></tr><tr><td>CPU_user</td><td>当前用户占有的cpu</td></tr><tr><td>CPU_system</td><td>系统占有的cpu</td></tr></tbody></table><h1 id="trace分析优化器执行计划">5 trace分析优化器执行计划</h1><p>MySQL5.6提供了对SQL的跟踪trace, 通过trace文件能够进一步了解为什么优化器选择A计划, 而不是选择B计划。</p><p>打开trace ，设置格式为 JSON，并设置trace最大能够使用的内存大小，避免解析过程中因为默认内存过小而不能够完整展示。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SET</span> optimizer_trace<span class="token operator">=</span><span class="token string">"enabled=on"</span><span class="token punctuation">,</span>end_markers_in_json<span class="token operator">=</span><span class="token keyword">on</span><span class="token punctuation">;</span><span class="token keyword">set</span> optimizer_trace_max_mem_size<span class="token operator">=</span><span class="token number">1000000</span><span class="token punctuation">;</span></code></pre><p>执行SQL语句 ：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> tb_item <span class="token keyword">where</span> id <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span></code></pre><p>最后， 检查information_schema.optimizer_trace就可以知道MySQL是如何执行SQL的 ：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>optimizer_trace\G<span class="token punctuation">;</span></code></pre><pre class=" language-json"><code class="language-json">*************************** <span class="token number">1</span>. row ***************************QUERY<span class="token operator">:</span> select * from tb_item where id &lt; <span class="token number">4</span>TRACE<span class="token operator">:</span> <span class="token punctuation">{</span>  <span class="token property">"steps"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"join_preparation"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"select#"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"steps"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            <span class="token property">"expanded_query"</span><span class="token operator">:</span> <span class="token string">"/* select#1 */ select `tb_item`.`id` AS `id`,`tb_item`.`title` AS `title`,`tb_item`.`price` AS `price`,`tb_item`.`num` AS `num`,`tb_item`.`categoryid` AS `categoryid`,`tb_item`.`status` AS `status`,`tb_item`.`sellerid` AS `sellerid`,`tb_item`.`createtime` AS `createtime`,`tb_item`.`updatetime` AS `updatetime` from `tb_item` where (`tb_item`.`id` &lt; 4)"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">]</span> /* steps */      <span class="token punctuation">}</span> /* join_preparation */    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"join_optimization"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"select#"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"steps"</span><span class="token operator">:</span> <span class="token punctuation">[</span>          <span class="token punctuation">{</span>            <span class="token property">"condition_processing"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"condition"</span><span class="token operator">:</span> <span class="token string">"WHERE"</span><span class="token punctuation">,</span>              <span class="token property">"original_condition"</span><span class="token operator">:</span> <span class="token string">"(`tb_item`.`id` &lt; 4)"</span><span class="token punctuation">,</span>              <span class="token property">"steps"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                  <span class="token property">"transformation"</span><span class="token operator">:</span> <span class="token string">"equality_propagation"</span><span class="token punctuation">,</span>                  <span class="token property">"resulting_condition"</span><span class="token operator">:</span> <span class="token string">"(`tb_item`.`id` &lt; 4)"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                  <span class="token property">"transformation"</span><span class="token operator">:</span> <span class="token string">"constant_propagation"</span><span class="token punctuation">,</span>                  <span class="token property">"resulting_condition"</span><span class="token operator">:</span> <span class="token string">"(`tb_item`.`id` &lt; 4)"</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>                  <span class="token property">"transformation"</span><span class="token operator">:</span> <span class="token string">"trivial_condition_removal"</span><span class="token punctuation">,</span>                  <span class="token property">"resulting_condition"</span><span class="token operator">:</span> <span class="token string">"(`tb_item`.`id` &lt; 4)"</span>                <span class="token punctuation">}</span>              <span class="token punctuation">]</span> /* steps */            <span class="token punctuation">}</span> /* condition_processing */          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token property">"table_dependencies"</span><span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">{</span>                <span class="token property">"table"</span><span class="token operator">:</span> <span class="token string">"`tb_item`"</span><span class="token punctuation">,</span>                <span class="token property">"row_may_be_null"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                <span class="token property">"map_bit"</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>                <span class="token property">"depends_on_map_bits"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">]</span> /* depends_on_map_bits */              <span class="token punctuation">}</span>            <span class="token punctuation">]</span> /* table_dependencies */          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token property">"ref_optimizer_key_uses"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">]</span> /* ref_optimizer_key_uses */          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token property">"rows_estimation"</span><span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">{</span>                <span class="token property">"table"</span><span class="token operator">:</span> <span class="token string">"`tb_item`"</span><span class="token punctuation">,</span>                <span class="token property">"range_analysis"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                  <span class="token property">"table_scan"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"rows"</span><span class="token operator">:</span> <span class="token number">9816098</span><span class="token punctuation">,</span>                    <span class="token property">"cost"</span><span class="token operator">:</span> <span class="token number">2.04e6</span>                  <span class="token punctuation">}</span> /* table_scan */<span class="token punctuation">,</span>                  <span class="token property">"potential_range_indices"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span>                      <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"PRIMARY"</span><span class="token punctuation">,</span>                      <span class="token property">"usable"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                      <span class="token property">"key_parts"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token string">"id"</span>                      <span class="token punctuation">]</span> /* key_parts */                    <span class="token punctuation">}</span>                  <span class="token punctuation">]</span> /* potential_range_indices */<span class="token punctuation">,</span>                  <span class="token property">"setup_range_conditions"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                  <span class="token punctuation">]</span> /* setup_range_conditions */<span class="token punctuation">,</span>                  <span class="token property">"group_index_range"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"chosen"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                    <span class="token property">"cause"</span><span class="token operator">:</span> <span class="token string">"not_group_by_or_distinct"</span>                  <span class="token punctuation">}</span> /* group_index_range */<span class="token punctuation">,</span>                  <span class="token property">"analyzing_range_alternatives"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"range_scan_alternatives"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                      <span class="token punctuation">{</span>                        <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"PRIMARY"</span><span class="token punctuation">,</span>                        <span class="token property">"ranges"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                          <span class="token string">"id &lt; 4"</span>                        <span class="token punctuation">]</span> /* ranges */<span class="token punctuation">,</span>                        <span class="token property">"index_dives_for_eq_ranges"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        <span class="token property">"rowid_ordered"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>                        <span class="token property">"using_mrr"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                        <span class="token property">"index_only"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                        <span class="token property">"rows"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>                        <span class="token property">"cost"</span><span class="token operator">:</span> <span class="token number">1.6154</span><span class="token punctuation">,</span>                        <span class="token property">"chosen"</span><span class="token operator">:</span> <span class="token boolean">true</span>                      <span class="token punctuation">}</span>                    <span class="token punctuation">]</span> /* range_scan_alternatives */<span class="token punctuation">,</span>                    <span class="token property">"analyzing_roworder_intersect"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                      <span class="token property">"usable"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>                      <span class="token property">"cause"</span><span class="token operator">:</span> <span class="token string">"too_few_roworder_scans"</span>                    <span class="token punctuation">}</span> /* analyzing_roworder_intersect */                  <span class="token punctuation">}</span> /* analyzing_range_alternatives */<span class="token punctuation">,</span>                  <span class="token property">"chosen_range_access_summary"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                    <span class="token property">"range_access_plan"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                      <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"range_scan"</span><span class="token punctuation">,</span>                      <span class="token property">"index"</span><span class="token operator">:</span> <span class="token string">"PRIMARY"</span><span class="token punctuation">,</span>                      <span class="token property">"rows"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>                      <span class="token property">"ranges"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                        <span class="token string">"id &lt; 4"</span>                      <span class="token punctuation">]</span> /* ranges */                    <span class="token punctuation">}</span> /* range_access_plan */<span class="token punctuation">,</span>                    <span class="token property">"rows_for_plan"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>                    <span class="token property">"cost_for_plan"</span><span class="token operator">:</span> <span class="token number">1.6154</span><span class="token punctuation">,</span>                    <span class="token property">"chosen"</span><span class="token operator">:</span> <span class="token boolean">true</span>                  <span class="token punctuation">}</span> /* chosen_range_access_summary */                <span class="token punctuation">}</span> /* range_analysis */              <span class="token punctuation">}</span>            <span class="token punctuation">]</span> /* rows_estimation */          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token property">"considered_execution_plans"</span><span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">{</span>                <span class="token property">"plan_prefix"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">]</span> /* plan_prefix */<span class="token punctuation">,</span>                <span class="token property">"table"</span><span class="token operator">:</span> <span class="token string">"`tb_item`"</span><span class="token punctuation">,</span>                <span class="token property">"best_access_path"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                  <span class="token property">"considered_access_paths"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span>                      <span class="token property">"access_type"</span><span class="token operator">:</span> <span class="token string">"range"</span><span class="token punctuation">,</span>                      <span class="token property">"rows"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>                      <span class="token property">"cost"</span><span class="token operator">:</span> <span class="token number">2.2154</span><span class="token punctuation">,</span>                      <span class="token property">"chosen"</span><span class="token operator">:</span> <span class="token boolean">true</span>                    <span class="token punctuation">}</span>                  <span class="token punctuation">]</span> /* considered_access_paths */                <span class="token punctuation">}</span> /* best_access_path */<span class="token punctuation">,</span>                <span class="token property">"cost_for_plan"</span><span class="token operator">:</span> <span class="token number">2.2154</span><span class="token punctuation">,</span>                <span class="token property">"rows_for_plan"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>                <span class="token property">"chosen"</span><span class="token operator">:</span> <span class="token boolean">true</span>              <span class="token punctuation">}</span>            <span class="token punctuation">]</span> /* considered_execution_plans */          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token property">"attaching_conditions_to_tables"</span><span class="token operator">:</span> <span class="token punctuation">{</span>              <span class="token property">"original_condition"</span><span class="token operator">:</span> <span class="token string">"(`tb_item`.`id` &lt; 4)"</span><span class="token punctuation">,</span>              <span class="token property">"attached_conditions_computation"</span><span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">]</span> /* attached_conditions_computation */<span class="token punctuation">,</span>              <span class="token property">"attached_conditions_summary"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                  <span class="token property">"table"</span><span class="token operator">:</span> <span class="token string">"`tb_item`"</span><span class="token punctuation">,</span>                  <span class="token property">"attached"</span><span class="token operator">:</span> <span class="token string">"(`tb_item`.`id` &lt; 4)"</span>                <span class="token punctuation">}</span>              <span class="token punctuation">]</span> /* attached_conditions_summary */            <span class="token punctuation">}</span> /* attaching_conditions_to_tables */          <span class="token punctuation">}</span><span class="token punctuation">,</span>          <span class="token punctuation">{</span>            <span class="token property">"refine_plan"</span><span class="token operator">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">{</span>                <span class="token property">"table"</span><span class="token operator">:</span> <span class="token string">"`tb_item`"</span><span class="token punctuation">,</span>                <span class="token property">"access_type"</span><span class="token operator">:</span> <span class="token string">"range"</span>              <span class="token punctuation">}</span>            <span class="token punctuation">]</span> /* refine_plan */          <span class="token punctuation">}</span>        <span class="token punctuation">]</span> /* steps */      <span class="token punctuation">}</span> /* join_optimization */    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"join_execution"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"select#"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token property">"steps"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">]</span> /* steps */      <span class="token punctuation">}</span> /* join_execution */    <span class="token punctuation">}</span>  <span class="token punctuation">]</span> /* steps */<span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在应用的的开发过程中，由于初期数据量小，开发人员写 SQL 语句时更重视功能上的实现，但是当应用系统正式上线后，随着生产数据量的急剧增长，很多 SQL 语句开始逐渐显露出性能问题，对生产的影响也越来越大，此时这些有问题的 SQL 语句就成为整个系统性能的瓶颈，因此我们必须要
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="优化" scheme="https://www.codetool.top/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="数据库" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://www.codetool.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>leetcode1103-分糖果II</title>
    <link href="https://www.codetool.top/article/leetcode1103-%E5%88%86%E7%B3%96%E6%9E%9CII/"/>
    <id>https://www.codetool.top/article/leetcode1103-分糖果II/</id>
    <published>2020-03-05T05:12:17.000Z</published>
    <updated>2020-03-05T06:29:53.818Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>排排坐，分糖果。</p><p>我们买了一些糖果 <code>candies</code>，打算把它们分给排好队的 <strong><code>n = num_people</code></strong> 个小朋友。</p><p>给第一个小朋友 1 颗糖果，第二个小朋友 2 颗，依此类推，直到给最后一个小朋友 <code>n</code> 颗糖果。</p><p>然后，我们再回到队伍的起点，给第一个小朋友 <code>n + 1</code> 颗糖果，第二个小朋友 <code>n + 2</code> 颗，依此类推，直到给最后一个小朋友 <code>2 * n</code> 颗糖果。</p><p>重复上述过程（每次都比上一次多给出一颗糖果，当到达队伍终点后再次从队伍起点开始），直到我们分完所有的糖果。注意，就算我们手中的剩下糖果数不够（不比前一次发出的糖果多），这些糖果也会全部发给当前的小朋友。</p><p>返回一个长度为 <code>num_people</code>、元素之和为 <code>candies</code> 的数组，以表示糖果的最终分发情况（即 <code>ans[i]</code> 表示第 <code>i</code> 个小朋友分到的糖果数）。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入：</strong> candies = 7, num_people = 4<br><strong>输出：</strong> [1,2,3,1]<br><strong>解释：</strong><br>第一次，ans[0] += 1，数组变为 [1,0,0,0]。<br>第二次，ans[1] += 2，数组变为 [1,2,0,0]。<br>第三次，ans[2] += 3，数组变为 [1,2,3,0]。<br>第四次，ans[3] += 1（因为此时只剩下 1 颗糖果），最终数组变为 [1,2,3,1]。  </p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入：</strong> candies = 10, num_people = 3<br><strong>输出：</strong> [5,2,3]<br><strong>解释：</strong><br>第一次，ans[0] += 1，数组变为 [1,0,0]。<br>第二次，ans[1] += 2，数组变为 [1,2,0]。<br>第三次，ans[2] += 3，数组变为 [1,2,3]。<br>第四次，ans[0] += 4，最终数组变为 [5,2,3]。   </p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= candies &lt;= 10^9</code></li><li>. <code>1 &lt;= num_people &lt;= 1000</code></li></ul><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>模拟过程</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">distributeCandies</span><span class="token punctuation">(</span><span class="token keyword">int</span> candies<span class="token punctuation">,</span> <span class="token keyword">int</span> num_people<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>num_people<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cur_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cur_count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>candies<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>candies <span class="token operator">-</span> cur_count <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                candie<span class="token punctuation">[</span>cur_index<span class="token punctuation">]</span><span class="token operator">+=</span>candies<span class="token punctuation">;</span>                candies <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            candie<span class="token punctuation">[</span>cur_index<span class="token punctuation">]</span><span class="token operator">+=</span>cur_count<span class="token punctuation">;</span>            candies <span class="token operator">-=</span> cur_count<span class="token punctuation">;</span>            cur_index<span class="token operator">++</span><span class="token punctuation">;</span>            cur_count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur_index <span class="token operator">==</span> num_people<span class="token punctuation">)</span> cur_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">return</span> candie<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;排排坐，分糖果。&lt;/p&gt;
&lt;p&gt;我们买了一些糖果 &lt;code&gt;candies&lt;/code&gt;，打算把它们分给排好队的 &lt;strong&gt;&lt;code&gt;n = num_people&lt;/code&gt;&lt;/strong&gt; 个小朋友。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="BFS" scheme="https://www.codetool.top/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>MySQL索引概述及索引的分类</title>
    <link href="https://www.codetool.top/article/MySQL%E7%B4%A2%E5%BC%95%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%B4%A2%E5%BC%95%E7%9A%84%E5%88%86%E7%B1%BB/"/>
    <id>https://www.codetool.top/article/MySQL索引概述及索引的分类/</id>
    <published>2020-03-04T12:44:22.000Z</published>
    <updated>2020-03-06T05:39:07.513Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述">1 概述</h1><p>MySQL官方对索引的定义为：索引（index）是帮助MySQL高效获取数据的数据结构（有序）。在数据之外，数据库系统还维护者满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。</p><p><img src="https://api.codetool.top/img/15833118439934.png" alt></p><p>左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址（注意逻辑上相邻的记录在磁盘上也并不是一定物理相邻的）。为了加快Col2的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找快速获取到相应数据。（在有聚簇索引的概念时指向聚簇索引的值）</p><p>一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上。索引是数据库中用来提高性能的最常用的工具。</p><p>索引是在MySQL的存储引擎层中实现的，而不是在服务器层实现的。所以每种存储引擎的索引都不一定完全相同，也不是所有的存储引擎都支持所有的索引类型的。MySQL目前提供了以下4种索引：</p><ul><li>BTREE 索引 ： 最常见的索引类型，大部分索引都支持 B 树索引。</li><li>HASH 索引：只有Memory引擎支持 ， 使用场景简单 。</li><li>R-tree 索引（空间索引）：空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少，不做特别介绍。</li><li>Full-text （全文索引） ：全文索引也是MyISAM的一个特殊索引类型，主要用于全文索引，InnoDB从Mysql5.6版本开始支持全文索引。</li></ul><p><strong>MyISAM、InnoDB、Memory三种存储引擎对各种索引类型的支持</strong></p><table><thead><tr><th>索引</th><th>InnoDB引擎</th><th>MyISAM引擎</th><th>Memory引擎</th></tr></thead><tbody><tr><td>BTREE索引</td><td>支持</td><td>支持</td><td>支持</td></tr><tr><td>HASH 索引</td><td>不支持</td><td>不支持</td><td>支持</td></tr><tr><td>R-tree 索引</td><td>不支持</td><td>支持</td><td>不支持</td></tr><tr><td>Full-text</td><td>5.6版本之后支持</td><td>支持</td><td>不支持</td></tr></tbody></table><h1 id="索引分类——从逻辑角度">2 索引分类——从逻辑角度</h1><ol><li>主键索引<br>索引列的值必须唯一，并且不允许有空值</li><li>唯一索引<br>索引列的值必须唯一，但允许有空值</li><li>单值索引<br>一个索引只包含单个列，一个表可以有多个单列索引</li><li>复合索引<br>一个索引包含多个列</li></ol><p>尽量使用复合索引，而少使用单列索引 。</p><p>创建复合索引 </p><pre><code>create index idx_name_sta_address on tb_seller(name, status, address);</code></pre><p>就相当于创建了三个索引 ： </p><ul><li>name</li><li>name + status</li><li>name + status + address</li></ul><h1 id="索引分类——从数据结构角度">3 索引分类——从数据结构角度</h1><h2 id="B树-B-树">3.1 B树,B+树</h2><p>之前的博客有介绍<a href="../多叉平衡查找树-B树与B-树/">多叉平衡查找树-B树与B-树</a></p><p>通常在 B+树上有两个头指针，一个指向根结点（进行随机搜索），一个指向关键字最小的叶<br>结点（进行顺序搜索）。</p><h3 id="B-树与B树的比较">3.1.1 B+树与B树的比较</h3><p><strong>组织方式不一样</strong></p><p>B+树：所有有效的索引关键字值都必须存储在叶结点中，其内部结点中的键值只用于索引<br>项的查找定位。<br>B树：有效的索引关键字值可以出现在B树的任意一个结点中。</p><p>因此：<br>B+树：所有关键字的查找速度基本一致<br>B树：依赖于查找关键字所在结点的层次</p><p><strong>叶结点不同</strong></p><p>B+树中叶节点间增加链表指针，提供对索引关键字的顺序扫描功能；叶节点的个数未必符<br>合 m 叉查找树的要求，它依赖于键值字节数和指针字节数，为 m1 阶。</p><h3 id="MySQL中的B-树适用场景">3.1.2 MySQL中的B+树适用场景</h3><p>InnoDB 存储引擎使用的是 B+树。</p><p>B+树为对如下类型的查询有效：</p><ol><li>全值匹配：和索引中的所有列进行匹配（复合索引）</li><li>匹配最左前缀：只使用索引的第一列或前几列</li><li>匹配列前缀：只匹配某一列的值的开头部分</li><li>匹配范围值</li><li>精确匹配某一列并范围匹配另外一列</li><li>覆盖索引/只访问索引的查询</li></ol><p>一般来说，如果 B+树可以按照某种方式查找到值，那么也可以按照这种方式用于排序。如果 ORDER BY 子句满足前面列出的几种查询类型，则这个索引也可以满足对应的排序需求。</p><p>下面是一些关于B+树索引的限制：</p><ol><li>如果不是按照索引的最左列开始查找，则无法使用索引</li><li>不能跳过索引中的列</li><li>如果查询中有某个列的范围查询，则其右边所有列都无法使用索引优化查找</li></ol><h2 id="Hash-索引">3.2 Hash 索引</h2><p>Hash树我在博客<a href="../高效查找的数据结构-HashTree（哈希树）/">高效查找的数据结构-HashTree（哈希树）</a>也提到过了。</p><p>只有精确匹配索引所有列的查询才有效，<br>在 MySQL 中，只有 Memory 引擎显式支持 Hash 索引。</p><p><strong>限制：</strong></p><ol><li>哈希索引只包含哈希值和行指针，而不存储字段值，所以不能使用索引中的值来避免读<br>取行（无法使用覆盖索引）。不过，访问内存中的行的速度很快。</li><li>哈希索引数据并不是按照索引值顺序存储的，所以无法进行排序</li><li>哈希索引不支持部分索引列匹配查找。比如建立复合哈希索引(A,B)，无法仅使用 A 使用<br>哈希索引去查询</li><li>不支持范围查询，仅支持等值查询</li><li>哈希冲突严重时，索引维护的代码很高。</li></ol><h2 id="B树索引与Hash索引比较">3.3 B树索引与Hash索引比较</h2><ol><li>如果是等值查询，那么哈希索引明显有绝对优势，因为只需要经过一次算法即可找到相<br>应的键值；当然了，这个前提是，键值都是唯一的。如果键值不是唯一的，就需要先找到该<br>键所在位置，然后再根据链表往后扫描，直到找到相应的数据；<br>如果是范围查询检索，这时候哈希索引就毫无用武之地了，因为原先是有序的键值，经过哈<br>希算法后，有可能变成不连续的了，就没办法再利用索引完成范围查询检索；</li><li>哈希索引也没办法利用索引完成排序，以及 <code>like ‘xxx%’</code> 这样的部分模糊查询（这种部分<br>模糊查询，其实本质上也是范围查询）；</li><li>哈希索引也不支持多列联合索引的最左匹配规则；</li><li>B+树索引的关键字检索效率比较平均，在有大量重复键值情况下，哈希索引的效率是极<br>低的，因为存在所谓的哈希碰撞问题。</li></ol><h1 id="索引分类——从物理存储角度">4 索引分类——从物理存储角度</h1><h2 id="聚簇索引（聚集索引）">4.1 聚簇索引（聚集索引）</h2><p>InnoDB 的聚簇索引实际上<strong>在同一个结构中保存了B+树索引和数据行。</strong></p><p><strong>当表有聚簇索引时，它的数据行实际上存放在索引的叶子页中。</strong>聚簇表示数据行和相邻的键值紧紧地存储在一起。因为无法同时把数据行存储在两个不同的地方，所以<strong>一个表只能有一个聚簇索引。</strong></p><p>InnoDB 通过主键聚簇数据。</p><p>每张表都会有一个聚簇索引。聚簇索引是一级索引。</p><p>聚簇索引一般是主键；没有主键，就是第一个唯一键；没有唯一键，就是隐藏ID。<strong>聚簇索引以外的所有索引都称为二级索引（即非聚簇索引）。</strong> 在 InnoDB 中，二级索引中的每条记录都包含该行的主键列，以及为二级索引指定的列。 InnoDB 使用这个主键值来搜索聚簇索引中的行。</p><p><strong>聚簇索引的优点：</strong></p><ol><li>可以将相关数据保存在一起，<strong>只需一次 IO 就可以取出相邻的数据</strong></li><li>数据访问更快，因为索引和数据保存在同一个 B+树中</li><li>使用覆盖索引扫描的查询可以直接使用叶节点中的主键值</li></ol><p><strong>缺点：</strong></p><ol><li>插入速度严重依赖于插入顺序。按照主键的顺序插入是加载数据到 InnoDB 表中速度最快的方式。但如果不是按照主键顺序加载数据，那么在加载完成后最好使用 OPTIMIZE TABLE命令重新组织一下表</li><li><strong>更新聚簇索引列的代价很高，因为会强制 InnoDB 将每个被更新的行移动到新的位置</strong></li><li>插入新行或者更新主键导致需要移动行的时候，可能面临页分裂的问题。<strong>当行的主键值要求必须将这一行插入到某个已满的页中时，存储引擎会将该页分裂成两个页面来容纳该行</strong>，这就是一次页分裂操作。页分裂会导致表占用更多的磁盘空间。</li><li><strong>可能导致全表扫描变慢</strong>，尤其是行比较稀疏，或者由于页分裂导致数据存储不连续的时候</li><li>二级索引（非聚簇索引）可能会更大， 因为在<strong>二级索引的叶子节点包含了引用行的主键值</strong>。这样的策略减少了当出现行移动或者页分裂时二级索引的维护工作。</li><li><strong>二级索引访问需要两次 B 树索引查找</strong>，而不是一次。因为二级索引中叶子节点保存的是行的主键值，要找到数据行，还需要拿主键值到聚簇索引中进行一次查找。</li></ol><p>对于 InnoDB，自适应哈希索引能够减少这样的重复工作。</p><h2 id="非聚簇索引（辅助索引）">4.2 非聚簇索引（辅助索引）</h2><p>就是不是聚簇索引。</p><h1 id="索引使用的基本原则">5 索引使用的基本原则</h1><ul><li>最经常查询的列上建立聚簇索引以提高查询效率</li><li>一个基本表最多只建立一个聚簇索引</li><li>经常更新的列不宜建立聚簇索引</li><li>主键和唯一键会自动创建索引</li></ul><h1 id="SQL索引语法">6 SQL索引语法</h1><h2 id="创建索引">6.1 创建索引</h2><pre><code>CREATE [UNIQUE|FULLTEXT|SPATIAL] INDEX index_name [USING index_type]ON tbl_name(index_col_name,...)index_col_name : column_name[(length)][ASC | DESC]</code></pre><ul><li>unique:唯一索引</li><li>fulltext:全文索引</li><li>spatial：空间索引</li></ul><p>示例：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> PersonIndex<span class="token keyword">ON</span> Person <span class="token punctuation">(</span>LastName<span class="token punctuation">)</span> </code></pre><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> PersonIndex<span class="token keyword">ON</span> Person <span class="token punctuation">(</span>LastName <span class="token keyword">DESC</span><span class="token punctuation">)</span> </code></pre><p>复合索引：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">INDEX</span> PersonIndex<span class="token keyword">ON</span> Person <span class="token punctuation">(</span>LastName<span class="token punctuation">,</span> FirstName<span class="token punctuation">)</span></code></pre><h2 id="查看索引">6.2 查看索引</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">index</span> <span class="token keyword">from</span> table_name<span class="token punctuation">;</span></code></pre><p>会显示所有建在该表上的索引信息</p><h2 id="删除索引">6.3 删除索引</h2><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> index_name <span class="token keyword">ON</span> tbl_name<span class="token punctuation">;</span></code></pre><p>老版本好像是</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">TABLE</span> table_name <span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> index_name<span class="token punctuation">;</span></code></pre><p>示例：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> idx_city_name <span class="token keyword">on</span> city<span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;1 概述&lt;/h1&gt;&lt;p&gt;MySQL官方对索引的定义为：索引（index）是帮助MySQL高效获取数据的数据结构（有序）。在数据之外，数据库系统还维护者满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构上实现高级查
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="数据库" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://www.codetool.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>常用开源数据库连接池C3P0、Druid介绍</title>
    <link href="https://www.codetool.top/article/%E5%B8%B8%E7%94%A8%E5%BC%80%E6%BA%90%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0C3P0%E3%80%81Druid%E4%BB%8B%E7%BB%8D/"/>
    <id>https://www.codetool.top/article/常用开源数据库连接池C3P0、Druid介绍/</id>
    <published>2020-03-04T08:44:11.000Z</published>
    <updated>2020-03-04T08:45:25.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述">1 概述</h1><p>很多时候，连接的混乱管理所造成的系统资源开销过大成为制约大型企业级应用效率的瓶颈。因为每一次WEB请求都要建立一次数据库连接，建立连接是一个耗费资源的活动，每次都得花费0.05-1s的时间，而且系统还要分配内存资源。</p><p>数据库连接池的基本思想就是为数据库连接建立一个“缓冲池”。于现在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从缓冲池中取出一个，使用完毕以后再放回去即可。</p><h1 id="C3P0">2 C3P0</h1><p>C3P0是一款优秀的开源数据库连接池，被广泛使用。</p><h2 id="使用">2.1 使用</h2><p>maven依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>c3p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>基本配置：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>c3p0-config</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 默认配置，如果没有指定则使用这个配置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>default-config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>jdbc:mysql://192.168.91.1:3306/test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>com.mysql.cj.jdbc.Driver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>default-config</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 命名的配置,可以通过方法调用实现 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>named-config</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- ... --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>named-config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>c3p0-config</span><span class="token punctuation">></span></span></code></pre><p>其他配置：</p><table><thead><tr><th>参数</th><th>默认值</th><th>解释</th></tr></thead><tbody><tr><td>initialPoolSize</td><td>3</td><td>连接池初始化时创建的连接数（介于maxPoolSize和minPoolSize之间）</td></tr><tr><td>maxPoolSize</td><td>15</td><td>连接池中拥有的最大连接数，如果获得新连接时会使连接总数超过这个值则不会再获取新连接，而是等待其他连接释放，所以这个值有可能会设计地很大</td></tr><tr><td>minPoolSize</td><td>3</td><td>连接池保持的最小连接数，后面的maxIdleTimeExcessConnections跟这个配合使用来减轻连接池的负载</td></tr><tr><td>acquireIncrement</td><td>3</td><td>连接池在无空闲连接可用时一次性创建的新数据库连接数</td></tr><tr><td>maxIdleTime</td><td>0</td><td>连接的最大空闲时间，如果超过这个时间，某个数据库连接还没有被使用，则会断开掉这个连接如果为0，则永远不会断开连接</td></tr><tr><td>maxConnectorAge</td><td>0</td><td>连接的最大绝对年龄，单位是秒，0表示绝对年龄无限大</td></tr><tr><td>maxIdleTimeExcessConnection</td><td>0</td><td>单位秒，为了减轻连接池的负载，当连接池经过数据访问高峰创建了很多连接，但是后面连接池不需要维护这么多连接，必须小于maxIdleTime.配置不为0，则将连接池的数量保持到minPoolSize</td></tr><tr><td>automaticTestTable</td><td>null</td><td>如果不为null，c3p0将生成指定名称的空表，使用该表来测试连接</td></tr><tr><td>connectionTesterClassName</td><td>com.mchange.v2.c3p0.impl.<br>DefaultConnectionTester</td><td>通过实现ConnectionTester或QueryConnectionTester的类来测试连接。类名需制定全路径。</td></tr><tr><td>idleConnectionTestPeriod</td><td>0</td><td>每个几秒检查所有连接池中的空闲连接</td></tr><tr><td>preferredTestQuery</td><td>null</td><td>定义所有连接测试都执行的测试语句。在使用连接测试的情况下这个一显著提高测试速度。注意： 测试的表必须在初始数据源的时候就存在</td></tr><tr><td>testConnectionOnCheckin</td><td>FALSE</td><td>如果设为true那么在取得连接的同时将校验连接的有效性</td></tr><tr><td>testConnectionOnCheckout</td><td>FALSE</td><td>如果为true，在连接释放的同事将校验连接的有效性。</td></tr><tr><td>maxStatements</td><td>0</td><td>JDBC的标准参数，用以控制数据源内加载d的PreparedStatements数量</td></tr><tr><td>maxStatementsPerConnection</td><td>0</td><td>maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数</td></tr><tr><td>statementCacheNum-<br>DeferredCloseThreads</td><td>0</td><td>如果大于零，则语句池将延迟物理close()缓存语句直到其父连接未被任何客户端使用，或者在其内部（例如在测试中）由池本身使用。</td></tr><tr><td>acquireRetryAttempts</td><td>30</td><td>定义在从数据库获取新连接失败后重复尝试的次数</td></tr><tr><td>acquireRetryDelay</td><td>1000</td><td>两次连接间隔时间，单位毫秒</td></tr><tr><td>breakAfterAcquireFailure</td><td>FALSE</td><td>获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效  保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 获取连接失败后该数据源将申明已断开并永久关闭</td></tr><tr><td>autoCommitOnClose</td><td>FALSE</td><td>连接关闭时默认将所有未提交的操作回滚。如果为true，则未提交设置为待提交而不是回滚。</td></tr><tr><td>forceIgnoreUnresolvedTransactions</td><td>FALSE</td><td>官方文档建议这个不要设置为true</td></tr><tr><td>checkoutTimeout</td><td>0</td><td>当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException,如设为0则无限期等待。单位毫秒。</td></tr><tr><td>factoryClassLocation</td><td>0</td><td>指定c3p0 libraries的路径，如果（通常都是这样）在本地即可获得那么无需设置，默认null即可</td></tr><tr><td>numHelperThreads</td><td>3</td><td>c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能通过多线程实现多个操作同时被执行</td></tr></tbody></table><p>使用：</p><pre class=" language-java"><code class="language-java">DataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>它会自动去类路径下查找名为<code>c3p0-config.xml</code>配置文件并加载。</p><p>可以使用命名的配置：</p><pre class=" language-java"><code class="language-java">DataSource dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>使用的就是<code>name=&quot;test&quot;</code>的<code>named-config</code></p><h1 id="Druid">3 Druid</h1><p>Druid是阿里开源的一个数据库连接池，借鉴了C3P0等成熟连接池的思想，具有诸多优点</p><h2 id="使用-1">3.1 使用</h2><p>maven依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>基本配置：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">driverClassName</span> <span class="token punctuation">=</span> <span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">url</span> <span class="token punctuation">=</span> <span class="token attr-value">jdbc:mysql://192.168.91.1:3306/test</span><span class="token attr-name">username</span> <span class="token punctuation">=</span> <span class="token attr-value">root</span><span class="token attr-name">password</span> <span class="token punctuation">=</span> <span class="token attr-value">123456</span></code></pre><p>其他配置：</p><table><thead><tr><th>配置</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>initialSize</td><td>0</td><td>初始化时建立物理连接的个数。初始化发生在显式调用 init  方法，或者第一次getConnection 时</td></tr><tr><td>maxActive</td><td>8</td><td>最大允许的连接数</td></tr><tr><td>maxIdle</td><td></td><td>已过期</td></tr><tr><td>minIdle</td><td></td><td>最小的空闲连接数</td></tr><tr><td>maxWait</td><td></td><td>获取连接时最大等待时间，单位毫秒。配置了 maxWait 之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置  useUnfairLock 属性为 true 使用非公平锁。</td></tr><tr><td>validationQuery</td><td></td><td>用来检测连接是否有效的 sql，要求是一个查询语句。</td></tr><tr><td>testOnBorrow</td><td>TRUE</td><td>申请连接时执行 validationQuery 检测连接是否有效，做了这个配置会降低性能。</td></tr><tr><td>testOnReturn</td><td>FALSE</td><td>归还连接时执行 validationQuery 检测连接是否有效，做了这个配置会降低性能</td></tr><tr><td>testWhileIdle</td><td>FALSE</td><td>设置空闲时是否检测连接可用性。建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于  timeBetweenEvictionRunsMillis，执行 validationQuery 检测连接是否有效。</td></tr><tr><td>timeBetweenEvictionRunsMillis</td><td></td><td>检测需要关闭的空闲连接的间隔时间</td></tr><tr><td>minEvictableIdleTimeMillis</td><td></td><td>连接在池中的最小生存时间</td></tr><tr><td>connectionInitSqls</td><td></td><td>物理连接初始化的时候执行的sql</td></tr><tr><td>filters</td><td></td><td>属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall</td></tr><tr><td>proxyFilters</td><td></td><td>类型是List&lt;com.alibaba.druid.filter.Filter&gt;，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系</td></tr></tbody></table><p>使用：</p><pre class=" language-java"><code class="language-java">Properties properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>InputStream in <span class="token operator">=</span> Demo1<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"druid.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>DataSource dataSource <span class="token operator">=</span> DruidDataSourceFactory<span class="token punctuation">.</span><span class="token function">createDataSource</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//使用连接池</span>conn <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="源码">3.2 源码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> DruidPooledConnection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token keyword">long</span> maxWaitMillis<span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>filters<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        FilterChainImpl filterChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterChainImpl</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> filterChain<span class="token punctuation">.</span><span class="token function">dataSource_connect</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> maxWaitMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">getConnectionDirect</span><span class="token punctuation">(</span>maxWaitMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>DruidPooledConnection内部包装了一个Connection，增强了close等方法</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>disable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    DruidConnectionHolder holder <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>holder<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>holder <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dupCloseLogEnable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"dup close"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    DruidAbstractDataSource dataSource <span class="token operator">=</span> holder<span class="token punctuation">.</span><span class="token function">getDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> isSameThread <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getOwnerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isSameThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>        dataSource<span class="token punctuation">.</span><span class="token function">setAsyncCloseConnectionEnable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">isAsyncCloseConnectionEnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">syncClose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>ConnectionEventListener listener <span class="token operator">:</span> holder<span class="token punctuation">.</span><span class="token function">getConnectionEventListeners</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        listener<span class="token punctuation">.</span><span class="token function">connectionClosed</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConnectionEvent</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    List<span class="token operator">&lt;</span>Filter<span class="token operator">></span> filters <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getProxyFilters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>filters<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        FilterChainImpl filterChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterChainImpl</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">dataSource_recycle</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>disable <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>【附】了解：DBUtils的使用</p><p>QueryRunner、DbUtils、ResultSetHandler。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;1 概述&lt;/h1&gt;&lt;p&gt;很多时候，连接的混乱管理所造成的系统资源开销过大成为制约大型企业级应用效率的瓶颈。因为每一次WEB请求都要建立一次数据库连接，建立连接是一个耗费资源的活动，每次都得花费0.05-1s的时间，而且系统还要分配内存资源。&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="java" scheme="https://www.codetool.top/tags/java/"/>
    
      <category term="javaweb" scheme="https://www.codetool.top/tags/javaweb/"/>
    
  </entry>
  
  <entry>
    <title>leetcode994-腐烂的橘子</title>
    <link href="https://www.codetool.top/article/leetcode994-%E8%85%90%E7%83%82%E7%9A%84%E6%A9%98%E5%AD%90/"/>
    <id>https://www.codetool.top/article/leetcode994-腐烂的橘子/</id>
    <published>2020-03-03T17:23:30.000Z</published>
    <updated>2020-03-03T17:46:49.413Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>在给定的网格中，每个单元格可以有以下三个值之一：</p><p>值 0 代表空单元格；<br>值 1 代表新鲜橘子；<br>值 2 代表腐烂的橘子。<br>每分钟，任何与腐烂的橘子（在 4 个正方向上）相邻的新鲜橘子都会腐烂。</p><p>返回直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。如果不可能，返回 -1。</p><p><strong>示例 1:</strong></p><p><img src="https://api.codetool.top/img/15832562668258.png" alt></p><blockquote><p><strong>输入:</strong> [[2,1,1],[1,1,0],[0,1,1]]<br><strong>输出:</strong> 4</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> [[2,1,1],[0,1,1],[1,0,1]]<br><strong>输出:</strong> -1<br><strong>解释:</strong> 左下角的橘子（第 2 行， 第 0 列）永远不会腐烂，因为腐烂只会发生在 4 个正向上。</p></blockquote><p><strong>示例 3:</strong></p><blockquote><p><strong>输入:</strong> [[0,2]]<br><strong>输出:</strong> 0<br><strong>解释:</strong> 因为 0 分钟时已经没有新鲜橘子了，所以答案就是 0 。</p></blockquote><p><strong>提示：</strong></p><ol><li><code>1 &lt;= grid.length &lt;= 10</code></li><li><code>1 &lt;= grid[0].length &lt;= 10</code></li><li><code>grid[i][j]</code> 仅为 <code>0</code>、<code>1</code> 或 <code>2</code></li></ol><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>广度优先搜索，每次将搜索到的新鲜橘子搞成2，最后再搜索一遍全图是否有剩余的新鲜橘子。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> height<span class="token punctuation">;</span>    <span class="token keyword">int</span> width<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">orangesRotting</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        height <span class="token operator">=</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>height <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        width <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>height<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>width<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>i<span class="token operator">*</span>width<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Integer i <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                cur<span class="token operator">++</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">int</span> x <span class="token operator">=</span> i<span class="token operator">/</span>width<span class="token punctuation">;</span>            <span class="token keyword">int</span> y <span class="token operator">=</span> i<span class="token operator">%</span>width<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token function">toInt</span><span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                grid<span class="token punctuation">[</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">!=</span>height<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token function">toInt</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                grid<span class="token punctuation">[</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">!=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token function">toInt</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">!=</span>width<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span><span class="token function">toInt</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>height<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>width<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> cur<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">toInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> x<span class="token operator">*</span>width<span class="token operator">+</span>y<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;在给定的网格中，每个单元格可以有以下三个值之一：&lt;/p&gt;
&lt;p&gt;值 0 代表空单元格；&lt;br&gt;值 1 代表新鲜橘子；&lt;br&gt;值 2 代表腐烂的橘子。&lt;br&gt;每分钟，任何与腐烂的橘子（在 4 个正方向上）相邻的新鲜橘子都会腐烂。&lt;/p
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="BFS" scheme="https://www.codetool.top/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>Redis高并发环境下出现的各种问题详解（高可用）</title>
    <link href="https://www.codetool.top/article/Redis%E9%AB%98%E5%B9%B6%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%87%BA%E7%8E%B0%E7%9A%84%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E8%AF%A6%E8%A7%A3/"/>
    <id>https://www.codetool.top/article/Redis高并发环境下出现的各种问题详解/</id>
    <published>2020-03-03T16:43:37.000Z</published>
    <updated>2020-03-05T15:33:55.991Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缓存预热">1 缓存预热</h1><p>服务器启动后迅速宕机</p><p>问题原因：</p><ol><li>请求数量较高</li><li>主从之间数据吞吐量较大，数据同步操作频度较高</li></ol><h2 id="解决方案">1.1 解决方案</h2><p>前置准备工作：</p><ol><li>日常例行统计数据访问记录，统计访问频度较高的热点数据</li><li>利用LRU数据删除策略，构建数据留存队列<br>例如：storm与kafka配合</li></ol><p>准备工作：</p><ol><li>将统计结果中的数据分类，根据级别，redis优先加载级别较高的热点数据</li><li>利用分布式多服务器同时进行数据读取，提速数据加载过程</li><li>热点数据主从同时预热<br>实施：</li><li>使用脚本程序固定触发数据预热过程</li><li>如果条件允许，使用了CDN（内容分发网络），效果会更好</li></ol><h2 id="总结">1.2 总结</h2><p>缓存预热就是系统启动前，提前将相关的缓存数据直接加载到缓存系统。避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！</p><h1 id="缓存雪崩">2 缓存雪崩</h1><p>缓存雪崩就是瞬间过期数据量太大，导致对数据库服务器造成压力。如能够有效避免过期时间集中，可以有效解决雪崩现象的出现<br>（约40%），配合其他策略一起使用，并监控服务器的运行数据，根据运行记录做快速调整。</p><h2 id="问题体现">2.1 问题体现</h2><ol><li>系统平稳运行过程中，忽然数据库连接量激增</li><li>应用服务器无法及时处理请求</li><li>大量408，500错误页面出现</li><li>客户反复刷新页面获取数据</li><li>数据库崩溃</li><li>应用服务器崩溃</li><li>重启应用服务器无效</li><li>Redis服务器崩溃</li><li>Redis集群崩溃</li><li>重启数据库后再次被瞬间流量放倒</li></ol><h2 id="原因分析">2.2 原因分析</h2><ol><li>在一个较短的时间内，缓存中较多的key集中过期</li><li>此周期内请求访问过期的数据，redis未命中，redis向数据库获取数据</li><li>数据库同时接收到大量的请求无法及时处理</li><li>Redis大量请求被积压，开始出现超时现象</li><li>数据库流量激增，数据库崩溃</li><li>重启后仍然面对缓存中无数据可用</li><li>Redis服务器资源被严重占用，Redis服务器崩溃</li><li>Redis集群呈现崩塌，集群瓦解</li><li>应用服务器无法及时得到数据响应请求，来自客户端的请求数量越来越多，应用服务器崩溃</li><li>应用服务器，redis，数据库全部重启，效果不理想</li></ol><h2 id="解决方案-1">2.3 解决方案</h2><p>降低数据库压力：</p><ol><li>更多的页面静态化处理</li><li>构建多级缓存架构<br>Nginx缓存+redis缓存+ehcache缓存</li><li>检测Mysql严重耗时业务进行优化<br>对数据库的瓶颈排查：例如超时查询、耗时较高事务等</li><li>灾难预警机制<br> 监控redis服务器性能指标<ul><li>CPU占用、CPU使用率</li><li>内存容量</li><li>查询平均响应时间</li><li>线程数</li></ul></li><li>限流、降级<br>短时间范围内牺牲一些客户体验，限制一部分请求访问，降低应用服务器压力，待业务低速运转后再逐步放开访问</li></ol><p>避免短时间大量key集中过期：</p><ol><li>LRU与LFU切换</li><li>数据有效期策略调整<ul><li>根据业务数据有效期进行分类错峰，A类90分钟，B类80分钟，C类70分钟</li><li>过期时间使用固定时间+随机值的形式，稀释集中到期的key的数量</li></ul></li><li>超热数据使用永久key</li><li>定期维护（自动+人工）<br>对即将过期数据做访问量分析，确认是否延时，配合访问量统计，做热点数据的延时</li><li>加锁<br> 慎用！</li></ol><h1 id="缓存击穿">3 缓存击穿</h1><p>缓存击穿就是单个高热数据过期的瞬间，数据访问量较大，未命中redis后，发起了大量对同一数据的数据库访问，导致对数据库服务器造成压力。应对策略应该在业务数据分析与预防方面进行，配合运行监控测试与即时调整策略，毕竟单个key的过期监控难度较高，配合雪崩处理策略即可。</p><h2 id="问题体现-1">3.1 问题体现</h2><ol><li>系统平稳运行过程中</li><li>数据库连接量瞬间激增</li><li>Redis服务器无大量key过期</li><li>Redis内存平稳，无波动</li><li>Redis服务器CPU正常</li><li>数据库崩溃</li></ol><h2 id="原因分析-1">3.2 原因分析</h2><ol><li>Redis中某个key过期，该key访问量巨大</li><li>多个数据请求从服务器直接压到Redis后，均未命中</li><li>Redis在短时间内发起了大量对数据库中同一数据的访问</li></ol><h2 id="解决方案-2">3.3 解决方案</h2><p>防止高热key过期：</p><ol><li>预先设定<br>以电商为例，每个商家根据店铺等级，指定若干款主打商品，在购物节期间，加大此类信息key的过期时长<br>注意：购物节不仅仅指当天，以及后续若干天，访问峰值呈现逐渐降低的趋势</li><li>现场调整<br>监控访问量，对自然流量激增的数据延长过期时间或设置为永久性key</li><li>后台刷新数据<br>启动定时任务，高峰期来临之前，刷新数据有效期，确保不丢失</li><li>二级缓存<br>设置不同的失效时间，保障不会被同时淘汰就行</li><li>加锁<br>分布式锁，防止被击穿，但是要注意也是性能瓶颈，慎重！</li></ol><p>关于雪崩中降低数据库压力的方法也适用。</p><h1 id="缓存穿透">4 缓存穿透</h1><p>缓存穿透访问了不存在的数据，跳过了合法数据的redis数据缓存阶段，每次访问数据库，导致对数据库服务器造成压力。通常此类数据的出现量是一个较低的值，当出现此类情况以毒攻毒，并及时报警。应对策略应该在临时预案防范方面多做文章。</p><p>无论是黑名单还是白名单，都是对整体系统的压力，警报解除后尽快移除。</p><h2 id="问题体现-2">4.1 问题体现</h2><ol><li>系统平稳运行过程中</li><li>应用服务器流量随时间增量较大</li><li>Redis服务器命中率随时间逐步降低</li><li>Redis内存平稳，内存无压力</li><li>Redis服务器CPU占用激增</li><li>数据库服务器压力激增</li><li>数据库崩溃</li></ol><h2 id="原因分析-2">4.2 原因分析</h2><ol><li>出现非正常URL访问（通常是黑客攻击）</li><li>Redis中大面积出现未命中</li><li>获取的数据在数据库中也不存在，数据库查询未得到对应数据。</li><li>反复出现以上情况，redis和数据库的压力激增。</li></ol><h2 id="解决方案-3">4.3 解决方案</h2><ol><li>缓存null<br>对查询结果为null的数据进行缓存（长期使用，定期清理），设定短时限，例如30-60秒，最高5分钟</li><li>白名单策略  <ul><li>提前预热各种分类数据id对应的bitmaps，id作为bitmaps的offset，相当于设置了数据白名单。当加载正常数据时，放行，加载异常数据时直接拦截（效率偏低）</li><li>使用布隆过滤器（有关布隆过滤器的命中问题对当前状况可以忽略）</li></ul></li><li>实施监控<br> 实时监控redis命中率（业务正常范围时，通常会有一个波动值）与null数据的占比<ul><li>非活动时段波动：通常检测3-5倍，超过5倍纳入重点排查对象</li><li>活动时段波动：通常检测10-50倍，超过50倍纳入重点排查对象<br>根据倍数不同，启动不同的排查流程。然后使用黑名单进行防控（运营）</li></ul></li><li>key加密<br>问题出现后，临时启动防灾业务key，对key进行业务层传输加密服务，设定校验程序，过来的key校验。<br>例如每天随机分配60个加密串，挑选2到3个，混淆到页面数据id中，发现访问key不满足规则，驳回数据访问。</li></ol><h1 id="Redis性能指标监控">5 Redis性能指标监控</h1><h2 id="性能指标">5.1 性能指标</h2><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>latency</td><td>Redis响应一个请求的时间</td></tr><tr><td>instantaneous_ops_per_sec</td><td>平均每秒处理请求总数</td></tr><tr><td>hit rate (calculated)</td><td>缓存命中率(计算出来的)</td></tr></tbody></table><h2 id="内存指标">5.2 内存指标</h2><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>used_memory</td><td>已使用内存</td></tr><tr><td>mem_fragmentation_ratio</td><td>内存碎片率</td></tr><tr><td>evicted_keys</td><td>由于最大内存限制被移除的key的数量</td></tr><tr><td>blocked_clients</td><td>由于BLPOP,BRPOP,or BRPOPLPUSH而被阻塞的客户端</td></tr></tbody></table><h2 id="基本活动指标">5.3 基本活动指标</h2><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>connected_clients</td><td>客户端连接数</td></tr><tr><td>connected_slaves</td><td>Slave数量</td></tr><tr><td>master_last_io_seconds_ago</td><td>最近一次主从交互之后的秒数</td></tr><tr><td>keyspace</td><td>数据库中的key值总数</td></tr></tbody></table><h2 id="持久性指标">5.4 持久性指标</h2><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>rdb_last_save_time</td><td>最后一次持久化保存到磁盘的时间戳</td></tr><tr><td>rdb_changes_since_last_save</td><td>自最后一次持久化以来数据库的更改数</td></tr></tbody></table><h2 id="错误指标">5.5 错误指标</h2><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>rejected_connections</td><td>由于达到maxclient限制而被拒绝的连接数</td></tr><tr><td>keyspace_misses</td><td>Key值查找失败(没有命中)次数</td></tr><tr><td>master_link_down_since_seconds</td><td>主从断开的持续时间(以秒为单位)</td></tr></tbody></table><h2 id="监控方式">5.6 监控方式</h2><p>监控方式</p><ul><li>工具<ul><li>Cloud Insight Redis</li><li>Prometheus</li><li>Redis-stat</li><li>Redis-faina</li><li>RedisLive</li><li>zabbix</li></ul></li><li>命令<ul><li>benchmark</li><li>redis-cli<ul><li>monitor</li><li>slowlog</li></ul></li></ul></li></ul><h3 id="benchmark">5.6.1 benchmark</h3><p>命令：</p><pre><code>redis-benchmark [-h ] [-p ] [-c ] [-n &lt;requests]&gt; [-k ]</code></pre><p>不带参数运行<code>redis-benchmark</code>会测试50个连接，10000次请求对应的性能</p><pre><code>redis-benchmark -c 100 -n 5000</code></pre><p>可以测试100个连接，5000次请求对应的性能</p><table><thead><tr><th>选项</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td>-h</td><td>指定服务器主机名</td><td>127.0.0.1</td></tr><tr><td>-p</td><td>指定服务器端口</td><td>6379</td></tr><tr><td>-s</td><td>指定服务器 socket</td><td></td></tr><tr><td>-c</td><td>指定并发连接数</td><td>50</td></tr><tr><td>-n</td><td>指定请求数</td><td>10000</td></tr><tr><td>-d</td><td>以字节的形式指定SET/GET值的数据大小</td><td>2</td></tr><tr><td>-k</td><td>1=keep alive 0=reconnect</td><td>1</td></tr><tr><td>-r</td><td>SET/GET/INCR使用随机key,SADD使用随机值</td><td></td></tr><tr><td>-P</td><td>通过管道传输&lt;numreq&gt;请求</td><td>1</td></tr><tr><td>-q</td><td>强制退出redis。仅显示query/sec值</td><td></td></tr><tr><td>–csv</td><td>以CSV格式输出</td><td></td></tr><tr><td>-l</td><td>生成循环,永久执行测试</td><td></td></tr><tr><td>-t</td><td>仅运行以逗号分隔的测试命令列表。</td><td></td></tr><tr><td>-I</td><td>Idle模式。仅打开N个idle连接并等待。</td><td></td></tr></tbody></table><h2 id="monitor">5.7 monitor</h2><p>在redis-cli中使用指令 monitor 打印服务器的调试信息。</p><h2 id="slowlog">5.8 slowlog</h2><pre><code>slowlog [operator]</code></pre><p>operator可取：</p><ul><li>get ：获取慢查询日志</li><li>len ：获取慢查询日志条目数</li><li>reset ：重置慢查询日志</li></ul><p>相关配置：</p><pre class=" language-conf"><code class="language-conf">slowlog-log-slower-than 1000 #设置慢查询的时间下线，单位：微妙slowlog-max-len 100 #设置慢查询命令对应的日志显示长度，单位：命令数</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;缓存预热&quot;&gt;1 缓存预热&lt;/h1&gt;&lt;p&gt;服务器启动后迅速宕机&lt;/p&gt;
&lt;p&gt;问题原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;请求数量较高&lt;/li&gt;
&lt;li&gt;主从之间数据吞吐量较大，数据同步操作频度较高&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;解决方案&quot;&gt;1.1 解决方案&lt;/h
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Redis" scheme="https://www.codetool.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis主从复制、哨兵、集群详解</title>
    <link href="https://www.codetool.top/article/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E3%80%81%E5%93%A8%E5%85%B5%E3%80%81%E9%9B%86%E7%BE%A4%E8%AF%A6%E8%A7%A3/"/>
    <id>https://www.codetool.top/article/Redis主从复制、哨兵、集群详解/</id>
    <published>2020-03-03T15:03:16.000Z</published>
    <updated>2020-03-03T15:15:32.017Z</updated>
    
    <content type="html"><![CDATA[<p>【补充】<br>高可用：（总时间-宕机时间）/总时间，目标是99.999%</p><h1 id="主从复制">1 主从复制</h1><p>为了避免单点Redis服务器故障，准备多台服务器，互相连通。将数据复制多个副本保存在不同的服<br>务器上，连接在一起，并保证数据是同步的。即使有其中一台服务器宕机，其他服务器依然可以继续<br>提供服务，实现Redis的高可用，同时实现数据冗余备份。</p><p>提供数据方：master<br>接收数据方：slave</p><p>从机通常不允许写，当主机宕机，需要临时推选出一个从机代替主机工作。</p><h2 id="作用">1.1 作用</h2><ul><li>读写分离：master写、slave读，提高服务器的负载能力。</li><li>负载均衡：基于主从结构，配合读写分离，由slave分担master负载，并根据需求的变化，改变slave的数<br>量，通过多个从节点分担数据读取负载，大大提高Redis服务器并发量与数据吞吐量</li><li>故障恢复：当master出现问题时，由slave提供服务，实现快速的故障恢复</li><li>数据冗余：实现数据热备份，是持久化之外的一种数据冗余方式</li><li>高可用基石：基于主从复制，构建哨兵模式与集群，实现Redis的高可用方案</li></ul><h2 id="工作流程">1.2 工作流程</h2><p>主从复制过程大体可以分为3个阶段</p><ul><li>建立连接阶段（即准备阶段）</li><li>数据同步阶段</li><li>命令传播阶段</li></ul><h3 id="建立连接">1.2.1 建立连接</h3><p>建立slave到master的连接，使master能够识别slave，并保存slave端口号</p><p>步骤1：设置master的地址和端口，保存master信息</p><p>步骤2：建立socket连接</p><p>步骤3：发送ping命令（定时器任务）（断开重连）</p><p>步骤4：身份验证</p><p>步骤5：发送slave端口信息</p><p><strong>具体实现：</strong></p><p>设置master信息：</p><ul><li>方式一：客户端发送命令<code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code></li><li>方式二：启动服务器参数<code>redis-server -slaveof &lt;masterip&gt; &lt;masterport&gt;</code></li><li>方式三：服务器配置<code>slaveof &lt;masterip&gt; &lt;masterport&gt;</code></li></ul><p>断开方式：<code>slaveof no one</code></p><p><strong>配置授权认证：</strong></p><p>master设置密码的方法：</p><ul><li>配置文件：<code>requirepass &lt;password&gt;</code> </li><li>指令设置密码：<code>config set requirepass &lt;password&gt;</code></li></ul><p>slave密码认证方法：</p><ul><li>指令：<code>auth &lt;password&gt;</code></li><li>启动客户端参数：<code>redis-cli -a &lt;password&gt;</code></li><li>配置文件：<code>masterauth &lt;password&gt;</code></li></ul><h3 id="数据同步">1.2.2 数据同步</h3><ul><li>在slave初次连接master后，复制master中的所有数据到slave</li><li>将slave的数据库状态更新成master当前的数据库状态</li></ul><p>连接后的第一次同步是<strong>全量复制</strong>：</p><ul><li>slave发送指令：psync2</li><li>master执行bgsave，产生rdb文件，这段时间内执行的指令放在命令缓冲区中</li><li>master将rdb文件发给slave</li><li>slave从rdb文件中恢复数据</li></ul><p>然后是<strong>部分（增量）复制</strong>：</p><ul><li>master将命令缓冲区中指令以aof的格式发送给slave</li><li>slave执行指令以同步</li></ul><p><strong>数据同步阶段master说明：</strong></p><ol><li>如果master数据量巨大，数据同步阶段应避开流量高峰期，避免造成master阻塞，影响业务正常执行</li><li>复制缓冲区大小设定不合理，会导致数据溢出。如进行全量复制周期太长，进行部分复制时发现数据已经存在丢失的情况，必须进行第二次全量复制，致使slave陷入死循环状态。<br>相关配置：<code>repl-backlog-size 1mb</code></li><li>master单机内存占用主机内存的比例不应过大，建议使用50%-70%的内存，留下30%-50%的内存用于执行bgsave命令和创建复制缓冲区</li></ol><p><strong>数据同步阶段slave说明：</strong></p><ol><li>为避免slave进行全量复制、部分复制时服务器响应阻塞或数据不同步，建议关闭此期间的对外服务<br>相关配置：<code>slave-serve-stale-data yes|no</code></li><li>数据同步阶段，master发送给slave信息可以理解master是slave的一个客户端，主动向slave发送命令</li><li>多个slave同时对master请求数据同步，master发送的RDB文件增多，会对带宽造成巨大冲击，如果master带宽不足，因此数据同步需要根据业务需求，适量错峰</li><li>slave过多时，建议调整拓扑结构，由一主多从结构变为树状结构，中间的节点既是master，也是slave。注意使用树状结构时，由于层级深度，导致深度越高的slave与最顶层master间数据同步延迟较大，数据一致性变差，应谨慎选择</li></ol><h3 id="命令传播">1.2.3 命令传播</h3><ul><li>当master数据库状态被修改后，导致主从服务器数据库状态不一致，此时需要让主从数据同步到一致的状态，同步的动作称为命令传播</li><li>master将接收到的数据变更命令发送给slave，slave接收命令后执行命令</li></ul><p><strong>命令传播阶段的部分复制：</strong></p><p>如果命令传播阶段出现了断网现象：</p><ul><li>网络闪断闪连 ——忽略</li><li>短时间网络中断 ——部分复制</li><li>长时间网络中断 ——全量复制</li></ul><p><strong>部分复制的三个核心要素：</strong></p><ol><li>服务器的运行ID</li></ol><p>服务器运行ID是每一台服务器每次运行的身份识别码，一台服务器多次运行可以生成多个运行id。</p><p>组成：运行id由40位字符组成，是一个随机的十六进制字符<br>例如：fdc9ff13b9bbaab28db42b3d50f852bb5e3fcdce。</p><p>作用：运行id被用于在服务器间进行传输，识别身份。<br>如果想两次操作均对同一台服务器进行，必须每次操作携带对应的运行id，用于对方识别。</p><p>实现方式：运行id在每台服务器启动时自动生成的，master在首次连接slave时，会将自己的运行ID发送给slave，slave保存此ID，通过info Server命令，可以查看节点的runid。</p><ol start="2"><li>主服务器的复制积压缓冲区</li></ol><p>复制缓冲区，又名复制积压缓冲区，是一个先进先出（FIFO）的队列，用于存储服务器执行过的命令，每次传播命令，master都会将传播的命令记录下来，并存储在复制缓冲区</p><p>内容就是AOF文件的格式，每个字节值还有一个偏移量。</p><ol start="3"><li>主从服务器的复制偏移量</li></ol><p>一个数字，描述复制缓冲区中的指令字节位置</p><p><strong>分类：</strong></p><ul><li>master复制偏移量：记录发送给所有slave的指令字节对应的位置（多个）</li><li>slave复制偏移量：记录slave接收master发送过来的指令字节对应的位置（一个）</li></ul><p><strong>作用：</strong>同步信息，比对master与slave的差异，当slave断线后，恢复数据使用</p><h3 id="工作流程总结">1.2.4 工作流程总结</h3><p><img src="https://api.codetool.top/img/15832485134650.png" alt></p><h2 id="心跳机制">1.3 心跳机制</h2><p>进入命令传播阶段候，master与slave间需要进行信息交换，使用心跳机制进行维护，实现双方连接保持在线。</p><p>master心跳：</p><ul><li>指令：PING</li><li>周期：由repl-ping-slave-period决定，默认10秒</li><li>作用：判断slave是否在线</li><li>查询：INFO replication 获取slave最后一次连接时间间隔，lag项维持在0或1视为正常</li></ul><p>slave心跳任务</p><ul><li>指令：REPLCONF ACK {offset}</li><li>周期：1秒</li><li>作用1：汇报slave自己的复制偏移量，获取最新的数据变更指令</li><li>作用2：判断master是否在线</li></ul><p><strong>注意:</strong></p><ul><li>当slave多数掉线，或延迟过高时，master为保障数据稳定性，将拒绝所有信息同步操作  </li></ul><p>相关配置：</p><pre><code>min-slaves-to-write 2min-slaves-max-lag 8</code></pre><p>slave数量少于2个，或者所有slave的延迟都大于等于10秒时，强制关闭master写功能，停止数据同步</p><ul><li>slave数量由slave发送REPLCONF ACK命令做确认</li><li>slave延迟由slave发送REPLCONF ACK命令做确认</li></ul><h2 id="主从复制常见问题">1.4 主从复制常见问题</h2><h3 id="频繁的全量复制（1）">1.4.1 频繁的全量复制（1）</h3><p>伴随着系统的运行，master的数据量会越来越大，一旦master重启，runid将发生变化，会导致全部slave的全量复制操作</p><p>内部优化调整方案：</p><ol><li>master内部创建<code>master_replid</code>变量，使用<code>runid</code>相同的策略生成，长度41位，并发送给所有slave</li><li>在master关闭时执行命令<code>shutdown save</code>，进行RDB持久化,<strong>将runid与offset保存到RDB文件中</strong><ul><li>repl-id repl-offset</li><li>通过redis-check-rdb命令可以查看该信息</li></ul></li><li>master重启后加载RDB文件，恢复数据重启后，将RDB文件中保存的repl-id与repl-offset加载到内存中<ul><li>master_repl_id = repl master_repl_offset = repl-offset</li><li>通过info命令可以查看该信息</li></ul></li></ol><p><strong>作用：</strong><br>本机保存上次runid，重启后恢复该值，使所有slave认为还是之前的master</p><h3 id="频繁的全量复制（2）">1.4.2 频繁的全量复制（2）</h3><p><strong>问题现象:</strong></p><p>网络环境不佳，出现网络中断，slave不提供服务</p><p><strong>问题原因:</strong></p><p>复制缓冲区过小，断网后slave的offset越界，触发全量复制</p><p><strong>最终结果:</strong></p><p>slave反复进行全量复制</p><p><strong>解决方案:</strong></p><ul><li>修改复制缓冲区大小</li><li>建议设置如下：<ol><li>测算从master到slave的重连平均时长<code>second</code></li><li>获取master平均每秒产生写命令数据总量<code>write_size_per_second</code></li><li>最优复制缓冲区空间 = <code>2 * second * write_size_per_second</code></li></ol></li></ul><h3 id="频繁的网络中断（1）">1.4.3 频繁的网络中断（1）</h3><p><strong>问题现象:</strong></p><p>master的CPU占用过高 或 slave频繁断开连接</p><p><strong>问题原因：</strong></p><ul><li>slave每1秒发送REPLCONF ACK命令到master</li><li>当slave接到了慢查询时（keys * ，hgetall等），会大量占用CPU性能</li><li>master每1秒调用复制定时函数replicationCron()，比对slave发现长时间没有进行响应</li></ul><p><strong>最终结果：</strong></p><p>master各种资源（输出缓冲区、带宽、连接等）被严重占用</p><p><strong>解决方案：</strong></p><p>通过设置合理的超时时间<code>repl-timeout</code>，确认是否释放slave。该参数定义了超时时间的阈值（默认60秒），超过该值，释放slave</p><h3 id="频繁的网络中断（2）">1.4.4 频繁的网络中断（2）</h3><p><strong>问题现象：</strong></p><p>slave与master连接断开</p><p><strong>问题原因：</strong></p><ul><li>master发送ping指令频度较低</li><li>master设定超时时间较短</li><li>ping指令在网络中存在丢包</li></ul><p><strong>解决方案：</strong></p><p>提高ping指令发送的频度</p><p><code>repl-ping-slave-period</code></p><p>超时时间repl-time的时间至少是ping指令频度的5到10倍，否则slave很容易判定超时</p><h3 id="数据不一致">1.4.5 数据不一致</h3><p><strong>问题现象：</strong></p><p>多个slave获取相同数据不同步</p><p><strong>问题原因：</strong></p><p>网络信息不同步，数据发送有延迟</p><p><strong>解决方案：</strong></p><ul><li>优化主从间的网络环境，通常放置在同一个机房部署，如使用阿里云等云服务器时要注意此现象</li><li>监控主从节点延迟（通过offset）判断，如果slave延迟过大，暂时屏蔽程序对该slave的数据访问</li></ul><p><code>slave-serve-stale-data yes|no</code></p><p>开启后仅响应info、slaveof等少数命令（慎用，除非对数据一致性要求很高）</p><h1 id="哨兵模式">2 哨兵模式</h1><p>上面提到如果主机宕机，需要临时推选出一个从机代替主机工作。</p><h2 id="作用-1">2.1 作用</h2><p>哨兵(sentinel) 是一个分布式系统，用于对主从结构中的每台服务器进行监控，当出现故障时通过投票机制选择新的master并将所有slave连接到新的master。</p><p><strong>监控：</strong></p><p>不断的检查master和slave是否正常运行。</p><p>master存活检测、master与slave运行情况检测</p><p><strong>通知（提醒）：</strong></p><p>当被监控的服务器出现问题时，向其他（哨兵间，客户端）发送通知。</p><p><strong>自动故障转移：</strong></p><p>断开master与slave连接，选取一个slave作为master，将其他slave连接到新的master，并告知客户端新的服务器地址</p><p><strong>注意：</strong></p><ul><li>哨兵也是一台redis服务器，只是不提供数据服务</li><li>通常哨兵配置数量为单数</li></ul><h2 id="启用哨兵">2.2 启用哨兵</h2><p>启用哨兵命令：</p><pre class=" language-shell"><code class="language-shell">redis-sentinel sentinel-配置.conf</code></pre><p>配置文件：</p><pre><code>sentinel monitor mymaster 127.0.0.1 6379 2  # 配置监控的主节点# 这个配置项格式为sentinel monitor &lt;master-group-name&gt; &lt;ip&gt; &lt;port&gt; &lt;quorum&gt;# 意义为监视一个名为mymaster的主节点（这里的mymaster可以自定义，主要是为了标识这个集群）# 主节点ip地址是127.0.0.1，端口为6379# 法定票数为2票。表示至少需要2个哨兵认为节点down了，才算down了。sentinel down-after-milliseconds mymaster 30000# 监控到指定的集群的主节点异常状态持续多久方才将标记为“故障”；sentinel parallel-syncs mymaster 1# 指在failover过程中，能够被sentinel并行配置的从节点的数量；数值越大，要求网络资源越高，要求越小，同步时间约长sentinel failover-timeout 180000# sentinel必须在此指定的时长内完成故障转移操作，否则，将视为故障转移操作失败</code></pre><h2 id="哨兵工作原理">2.3 哨兵工作原理</h2><p>哨兵在进行主从切换过程中经历三个阶段</p><ul><li>监控</li><li>通知</li><li>故障转移</li></ul><h3 id="监控阶段">2.3.1 监控阶段</h3><p>用于同步各个节点的状态信息</p><ul><li>获取各个sentinel的状态（是否在线）</li><li>获取master的状态<ul><li>master属性<ul><li>runid</li><li>role：master</li></ul></li><li>各个slave的详细信息</li></ul></li><li>获取所有slave的状态（根据master中的slave信息）<ul><li>slave属性<ul><li>runid</li><li>role：slave</li><li>master_host、master_port</li><li>offset</li><li>……</li></ul></li></ul></li></ul><h3 id="通知阶段">2.3.2 通知阶段</h3><p>sentinel之间也会组建连接网共享master和slave的状态。</p><p>每个sentinel收集到了信息都会共享给其他的sentinel。</p><h3 id="故障转移阶段">2.3.3 故障转移阶段</h3><p>如果某一sentinel某时刻联系不上主机并且超过<code>failover-timeout</code>时间，就对其他sentinel发起通知<code>SENTINEL is-master-down-by-addr ……</code>，此时该sentinel对主机的判定为<code>SRI_S_DOWN</code>，即主观下线。</p><p>其他sentinel收到通知后也对主机做出评判，如果有超半数(法定票数)的sentinel认为主机宕机了，就判定该主机为<code>SRI_O_DOWN</code>，即客观下线。</p><p>然后sentinel内部开始发送竞选指令争选作为处理该故障的哨兵。所有哨兵根据收到竞选指令的先后和一些评判标准投票，获得投票数最多的哨兵处理该故障。</p><p><strong>哨兵的任务：</strong></p><p>在服务器列表中挑选备选master：</p><ul><li>筛选在线的</li><li>剔除响应慢的</li><li>剔除与原master断开时间久的</li><li>按照优先原则<ul><li>优先级</li><li>offset</li><li>runid</li></ul></li></ul><p>根据以上方法挑选出一个备选master后，开始替换master：</p><ul><li>发送指令（sentinel）</li><li>向新的master发送slaveof no one</li><li>向其他slave发送slaveof 新masterIP端口</li></ul><h1 id="集群">3 集群</h1><p>集群就是使用网络将若干台计算机联通起来，并提供统一的管理方式，使其对外呈现单机的服务效果</p><p><strong>集群的作用</strong></p><ul><li>分散单台服务器的访问压力，实现负载均衡</li><li>分散单台服务器的存储压力，实现可扩展性</li><li>降低单台服务器宕机带来的业务灾难</li></ul><h2 id="设计">3.1 设计</h2><ul><li>通过算法设计，计算出key应该保存的位置</li><li>将所有的存储空间计划切割成16384份槽，每台主机保存一部分<br>每份代表的是一个存储空间，不是一个key的保存空间</li><li>将key按照计算出的结果放到对应的存储空间</li></ul><p>集群内部也有通信，每台机器都知道一个指定的槽放在哪个机器上，如果槽未命中，则会通知用户正确位置。</p><h2 id="cluster集群搭建">3.2 cluster集群搭建</h2><p>参考<a href="https://www.cnblogs.com/toutou/p/redis_cluster.html" target="_blank" rel="noopener">详解Redis Cluster集群 - 请叫我头头哥 - 博客园</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;【补充】&lt;br&gt;高可用：（总时间-宕机时间）/总时间，目标是99.999%&lt;/p&gt;
&lt;h1 id=&quot;主从复制&quot;&gt;1 主从复制&lt;/h1&gt;&lt;p&gt;为了避免单点Redis服务器故障，准备多台服务器，互相连通。将数据复制多个副本保存在不同的服&lt;br&gt;务器上，连接在一起，并保证数据是同
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Redis" scheme="https://www.codetool.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis高级数据类型介绍</title>
    <link href="https://www.codetool.top/article/Redis%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/"/>
    <id>https://www.codetool.top/article/Redis高级数据类型介绍/</id>
    <published>2020-03-03T10:26:52.000Z</published>
    <updated>2020-03-03T10:27:35.861Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Bitmaps">1 Bitmaps</h1><p>之前的博客有提到过<a href="../海量数据算法-BitMap介绍和实现/">海量数据算法-BitMap介绍和实现</a></p><p>实际上Redis也有这样的数据结构——就是一个一个的字节（实际上也就是String类型），相关指令：</p><ul><li><code>setbit key index 1|0</code>：将对应的位设置为1/0。</li><li><code>getbit key index</code>：获取对应的位的值。</li><li><code>bitop op destKey key1 [key2...]</code>：bitmap之间的位运算，op可以是：<ul><li>and：与</li><li>or：或</li><li>not：非</li><li>xor：异或</li></ul></li><li><code>bitcount key [start end]</code>：统计bitmap中1的数量</li></ul><h1 id="HyperLogLog">2 HyperLogLog</h1><p>作用：统计不重复数据的数量。</p><p>虽然Bitmap也可以实现这个功能，但它的空间复杂度极高，而HyperLogLog中的<code>LogLog</code>代表的是它的空间复杂度，即这种算法的空间复杂度仅有<code>O(log2(log2(Nmax)))</code>。</p><p>它的原理基于基数估计算法(Cardinality Estimation Algorithm)：<code>LogLogCounting</code>（这种算法以后有机会再研究）</p><p>相关操作：</p><ul><li><code>pfadd key element [element ...]</code>：添加数据</li><li><code>pfcount key [key ...]</code>：统计数据，返回不重复数据的个数</li><li><code>pfmerge destkey sourcekey [sourcekey ...]</code>：合并数据</li></ul><p>这种算法是一种概率算法，它存在一定的误差。它只需要12K内存，在标准误差0.81%的前提下，能够统计2<sup>​64</sup>个数据。</p><p>pfadd命令并不是一次性分配12k内存使用，会随着基数的增加内存逐渐增大。</p><p>但是只要使用了pfmerge命令合并了空间，得到的合并后的空间就是12k。</p><h1 id="GEO">3 GEO</h1><p>功能：计算两个经纬度坐标点之间的距离。</p><p>相关操作：</p><ul><li><code>geoadd key longitude latitude member [longitude latitude member]</code>：添加坐标点</li><li><code>geopos key member [member ...]</code>：获取坐标点</li><li><code>geodist key member1 member2 [unit]</code>：计算坐标点，默认单位是米</li><li><code>georadius key longitude latitude radius m|km|ft|mi [withcoord] [withdist] [withhash] [count count]</code>：根据坐标求范围内的数据</li><li><code>georadiusbymember key member radius m|km|ft|mi [withcoord] [withdist] [withhash] [count count]</code>：根据点求范围内的数据</li><li><code>geohash key member [member ...]</code>：获取指定点对应的坐标hash值</li></ul><p>示例：</p><pre><code>127.0.0.1:6379&gt; geoadd map 1 1 a(integer) 1127.0.0.1:6379&gt; geoadd map 2 2 b(integer) 1127.0.0.1:6379&gt; geopos map a1) 1) &quot;0.99999994039535522&quot;   2) &quot;0.99999945914297683&quot;127.0.0.1:6379&gt; geodist map a b&quot;157270.0561&quot;127.0.0.1:6379&gt; geodist map a b km&quot;157.2701&quot;127.0.0.1:6379&gt; georadiusbymember map a 180 km withdist1) 1) &quot;a&quot;   2) &quot;0.0000&quot;2) 1) &quot;b&quot;   2) &quot;157.2701&quot;127.0.0.1:6379&gt; georadiusbymember map a 120 km withdist1) 1) &quot;a&quot;   2) &quot;0.0000&quot;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Bitmaps&quot;&gt;1 Bitmaps&lt;/h1&gt;&lt;p&gt;之前的博客有提到过&lt;a href=&quot;../海量数据算法-BitMap介绍和实现/&quot;&gt;海量数据算法-BitMap介绍和实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;实际上Redis也有这样的数据结构——就是一个一个的字节（实际上也就
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Redis" scheme="https://www.codetool.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Redis事务、分布式锁、删除策略介绍</title>
    <link href="https://www.codetool.top/article/Redis%E4%BA%8B%E5%8A%A1%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E3%80%81%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5%E4%BB%8B%E7%BB%8D/"/>
    <id>https://www.codetool.top/article/Redis事务、分布式锁、删除策略介绍/</id>
    <published>2020-03-03T09:25:22.000Z</published>
    <updated>2020-03-03T09:25:45.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Redis事务">1 Redis事务</h1><h2 id="指令">1.1 指令</h2><p><code>multi</code>：开启事务<br><code>exec</code>: 结束并执行事务<br><code>discard</code>：终止并放弃事务</p><h2 id="注意">1.2 注意</h2><ul><li>如果定义的事务中所包含的命令存在语法错误，整体事务中所有命令均不会执行。包括那些语法正确的命令。</li><li>如果一个事务在执行过程中某指令出现错误，不影响其他能执行的指令。程序员可以根据需要手动回滚（没有回滚指令，只能用逆操作）。</li></ul><h2 id="锁">1.3 锁</h2><p>Redis中可以使用锁来操控基于特定条件的事务执行。</p><p>对 key 添加监视锁，在执行exec前如果key发生了变化，终止事务执行：<code>watch key1 [key2……]</code></p><p>取消对所有 key 的监视：<code>unwatch</code></p><h2 id="分布式锁">1.4 分布式锁</h2><p>使用setnx设置一个公共锁：<code>setnx lock-key value</code></p><p>利用setnx命令的返回值特征，有值则返回设置失败，无值则返回设置成功</p><ul><li>对于返回设置成功的，拥有控制权，进行下一步的具体业务操作</li><li>对于返回设置失败的，不具有控制权，排队或等待</li></ul><p>操作完毕通过del操作释放锁</p><p><strong>注意：</strong></p><p>因为解锁操作依赖于用户控制，必定会出现加锁后未解锁的风险。</p><p><strong>解决方案：</strong> 使用<code>expire/pexpire</code>设置锁的过期时间，到点自动释放。</p><p>由于操作通常都是微秒或毫秒级，因此该锁定时间不宜设置过大。具体时间需要业务测试后确认。</p><ul><li>例如：持有锁的操作最长执行时间127ms，最短执行时间7ms。</li><li>测试百万次最长执行时间对应命令的最大耗时，测试百万次网络延迟平均耗时</li><li>锁时间设定推荐：最大耗时<em>120%+平均网络延迟</em>110%</li><li>如果业务最大耗时&lt;&lt;网络平均延迟，通常为2个数量级，取其中单个耗时较长即可</li></ul><h1 id="删除策略">2 删除策略</h1><p>对于那些ttl=-2的已经过期的数据，redis真的将它们删除了吗？</p><ol><li>定时删除</li><li>惰性删除</li><li>定期删除</li></ol><p>redis内存中有一块区域用于存储时效性数据的过期时间，它将数据的存储地址和过期时间关联了起来。</p><h2 id="定时删除">2.1 定时删除</h2><p>创建一个定时器，当key设置有过期时间，且过期时间到达时，由定时器任务立即执行对键的删除操作。</p><ul><li>优点：节约内存，到时就删除，快速释放掉不必要的内存占用</li><li>缺点：CPU压力很大，无论CPU此时负载量多高，均占用CPU，会影响redis服务器响应时间和指令吞吐量</li></ul><p>总结：用处理器性能换取存储空间 （拿时间换空间）</p><h2 id="惰性删除">2.2 惰性删除</h2><p>数据到达过期时间，不做处理。<strong>等下次访问该数据</strong>时如果未过期，返回数据，如果发现已过期，删除，返回不存在。</p><ul><li>优点：节约CPU性能，发现必须删除的时候才删除</li><li>缺点：内存压力很大，出现长期占用内存的数据</li></ul><p>总结：用存储空间换取处理器性能（拿时间换空间）</p><h2 id="定期删除">2.3 定期删除</h2><p>Redis启动服务器初始化时，读取配置server.hz的值，默认为10</p><p>每秒钟执行server.hz次<code>serverCron()</code>-&gt;<code>databasesCron()</code>-&gt;<code>activeExpireCycle()</code>。</p><p><code>activeExpireCycle()</code>对每个expires[*]逐一进行检测，每次执行250ms/server.hz</p><p>对某个expires[*]检测时，随机挑选W个key检测</p><ul><li>如果key超时，删除key</li><li>如果一轮中删除的key的数量&gt;W*25%，循环该过程</li><li>如果一轮中删除的key的数量≤W<em>25%，检查下一个expires[</em>]，0-15循环</li></ul><p>注意：</p><ul><li><code>W</code>取值=<code>ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP</code>属性值</li><li>参数<code>current_db</code>用于记录<code>activeExpireCycle()</code>:进入哪个expires[*] 执行</li><li>如果<code>activeExpireCycle()</code>执行时间到期，下次从current_db继续向下执行</li></ul><p>特点：</p><p>周期性轮询redis库中的时效性数据，采用随机抽取的策略，利用过期数据占比的方式控制删除频度</p><ul><li>特点1：CPU性能占用设置有峰值，检测频度可自定义设置</li><li>特点2：内存压力不是很大，长期占用内存的冷数据会被持续清理</li><li>总结：周期性抽查存储空间（随机抽查，重点抽查）</li></ul><h1 id="逐出算法">3 逐出算法</h1><p>Redis使用内存存储数据，在执行每一个命令前，会调用<code>freeMemoryIfNeeded()</code>检测内存是否充足。<strong>如果内存不满足新加入数据的最低存储要求，redis要临时删除一些数据为当前指令清理存储空间。</strong>清理数据的策略称为逐出算法。</p><p>注意：逐出数据的过程不是100%能够清理出足够的可使用的内存空间，如果不成功则反复执行。当对所<br>有数据尝试完毕后，如果不能达到内存清理的要求，将出现错误信息。</p><pre><code>(error) OOM command not allowed when used memory &gt;&#39;maxmemory&#39;</code></pre><h2 id="相关配置">3.1 相关配置</h2><ul><li><p><code>maxmemory</code>：即redis最多能使用的物理内存的比例，默认值为0，表示不限制。生产环境中根据需求设定，通常设置在50%以上。</p></li><li><p><code>maxmemory-samples</code>：每次选取待删除数据的个数。选取数据时并不会全库扫描，导致严重的性能消耗，降低读写性能。因此采用随机获取数据的方式作为待检测删除数据</p></li><li><p><code>maxmemory-policy</code>：删除策略。</p></li></ul><p>对于会过期的数据：</p><ol><li>volatile-lru：挑选最近最少使用的数据淘汰</li><li>volatile-lfu：挑选最近使用次数最少的数据淘汰</li><li>volatile-ttl：挑选将要过期的数据淘汰</li><li>volatile-random：任意选择数据淘汰<br>检测全库数据：</li><li>allkeys-lru：挑选最近最少使用的数据淘汰</li><li>allkeys-lfu：挑选最近使用次数最少的数据淘汰</li><li>allkeys-random：任意选择数据淘汰<br>放弃数据驱逐：</li><li>no-enviction（驱逐）：禁止驱逐数据（redis5.0中默认策略），会引发错误OOM（Out Of Memory）</li></ol><p>通过指令info Stats可以看到缓存的命中次数和丢失次数。</p><h1 id="Redis配置拓展">4 Redis配置拓展</h1><ul><li><code>bind</code>：绑定主机地址</li><li><code>databases</code>：设置数据库的数量，默认16</li></ul><h2 id="日志配置">4.1 日志配置</h2><ul><li><code>loglevel debug|verbose|notice|warning</code>：设置服务器以指定日志记录级别，默认verbose</li><li><code>logfile 端口号.log</code>：日志记录文件名</li></ul><h2 id="客户端配置">4.2 客户端配置</h2><ul><li><code>maxclients 0</code>：设置同一时间最大客户端连接数，默认无限制。当客户端连接达到上限，Redis会关闭新的连接。</li><li><code>timeout 300</code>：客户端闲置等待最大时长，达到最大值后关闭连接。如需关闭此功能，设置为0。</li></ul><h2 id="多服务器快捷配置">4.3 多服务器快捷配置</h2><p><code>include *.conf</code>：导入并加载指定配置文件信息，用于快速创建redis公共配置较多的redis实例配置文件，便于维护。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Redis事务&quot;&gt;1 Redis事务&lt;/h1&gt;&lt;h2 id=&quot;指令&quot;&gt;1.1 指令&lt;/h2&gt;&lt;p&gt;&lt;code&gt;multi&lt;/code&gt;：开启事务&lt;br&gt;&lt;code&gt;exec&lt;/code&gt;: 结束并执行事务&lt;br&gt;&lt;code&gt;discard&lt;/code&gt;：终止并放弃
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Redis" scheme="https://www.codetool.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>leetcode46-全排列</title>
    <link href="https://www.codetool.top/article/leetcode46-%E5%85%A8%E6%8E%92%E5%88%97/"/>
    <id>https://www.codetool.top/article/leetcode46-全排列/</id>
    <published>2020-03-02T18:54:23.000Z</published>
    <updated>2020-03-02T18:59:47.573Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定一个<strong>没有重复</strong>数字的序列，返回其所有可能的全排列。</p><p><strong>示例:</strong></p><blockquote><p><strong>输入:</strong> [1,2,3]<br><strong>输出:</strong><br>[<br>&nbsp;&nbsp;[1,2,3],<br>&nbsp;&nbsp;[1,3,2],<br>&nbsp;&nbsp;[2,1,3],<br>&nbsp;&nbsp;[2,3,1],<br>&nbsp;&nbsp;[3,1,2],<br>&nbsp;&nbsp;[3,2,1]<br>]   </p></blockquote><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>做这道题的时候我才发现我做这类回溯算法的题还是蛮少的，对集合的浅复制api不是很熟悉。主要是浅复制真的蛮麻烦 -。-|| </p><p>思想就是回溯啦，可以用一个数组记录使用过了的元素。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> ans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> globalNums<span class="token punctuation">;</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">>></span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> used <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        globalNums <span class="token operator">=</span> nums<span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">trackback</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span>used<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">trackback</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> used<span class="token punctuation">,</span><span class="token keyword">int</span> usedCount<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>usedCount<span class="token operator">==</span>globalNums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>            ans<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>globalNums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> copy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>                copy<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>globalNums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> usedCopy <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>used<span class="token punctuation">,</span>used<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>                usedCopy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token function">trackback</span><span class="token punctuation">(</span>copy<span class="token punctuation">,</span>usedCopy<span class="token punctuation">,</span>usedCount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定一个&lt;strong&gt;没有重复&lt;/strong&gt;数字的序列，返回其所有可能的全排列。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; [1,
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="回溯法" scheme="https://www.codetool.top/tags/%E5%9B%9E%E6%BA%AF%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Redis持久化方式RDB和AOF介绍</title>
    <link href="https://www.codetool.top/article/Redis%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8FRDB%E5%92%8CAOF%E4%BB%8B%E7%BB%8D/"/>
    <id>https://www.codetool.top/article/Redis持久化方式RDB和AOF介绍/</id>
    <published>2020-03-02T14:58:43.000Z</published>
    <updated>2020-03-02T14:59:40.726Z</updated>
    
    <content type="html"><![CDATA[<h1 id="持久化简介">1 持久化简介</h1><p>将内存中的数据隔段时间在硬盘中做备份，防止数据突然丢失</p><ul><li>快照方法 RDB</li><li>日志方法 AOF</li></ul><h1 id="RDB">2 RDB</h1><h2 id="启动方式">2.1 启动方式</h2><h3 id="指令：save">2.1.1 指令：save</h3><ul><li>谁：redis操作者（用户）</li><li>什么时间：即时（随时进行）</li><li>干什么事情：保存数据</li></ul><p>手动执行一次保存一次数据，产生在日志文件夹下的rdb文件(二进制)</p><p>save指令会阻塞当前redis服务器，线上环境不推荐使用。</p><h3 id="指令：bgsave">2.1.2 指令：bgsave</h3><ul><li>谁：redis操作者（用户）发起指令；redis服务器控制指令执行</li><li>什么时间：即时（发起）；合理的时间（执行）</li><li>干什么事情：保存数据</li></ul><pre><code>127.0.0.1:6379&gt; bgsaveBackground saving started</code></pre><p>原理：调用linux的fork函数生成子进程，由这个子进程负责创建rdb文件。</p><h3 id="自动执行">2.1.3 自动执行</h3><ul><li>谁：redis服务器发起指令（基于条件）</li><li>什么时间：满足条件</li><li>干什么事情：保存数据</li></ul><p>发起的还是bgsave</p><p>配置：</p><p><code>save second changes</code>：满足限定时间范围内key的变化数量达到指定数量即进行持久化。</p><p>示例：</p><pre class=" language-conf"><code class="language-conf">save 900 1save 300 10save 60 10000</code></pre><h3 id="其他启动方式">2.1.4 其他启动方式</h3><ol><li>全量复制</li><li>服务器运行过程中重启 <code>debug reload</code></li><li>关闭服务器时指定保存数据 <code>shutdown save</code></li></ol><h2 id="相关配置">2.2 相关配置</h2><ul><li><code>dbfilename dump.rdb</code><ul><li>说明：设置本地数据库文件名，默认值为 dump.rdb</li><li>经验：通常设置为dump-端口号.rdb</li></ul></li><li><code>dir</code><ul><li>说明：设置存储.rdb文件的路径</li><li>经验：通常设置成存储空间较大的目录中，目录名称data</li></ul></li><li><code>rdbcompression yes</code><ul><li>说明：<strong>设置存储至本地数据库时是否压缩数据</strong>，默认为 yes，采用 LZF 压缩</li><li>经验：通常默认为开启状态，如果设置为no，可以节省 CPU 运行时间，但会使存储的文件变大（巨大）</li></ul></li><li><code>rdbchecksum yes</code><ul><li>说明：<strong>设置是否进行RDB文件格式校验</strong>，该校验过程在写文件和读文件过程均进行</li><li>经验：通常默认为开启状态，如果设置为no，可以节约读写性过程约10%时间消耗，但是存储一定的数据损坏风险</li></ul></li><li><code>stop-writes-on-bgsave-error yes</code><ul><li>说明：后台存储过程中如果出现错误现象，是否停止保存操作</li><li>经验：通常默认为开启状态</li></ul></li></ul><h2 id="优点">2.3 优点</h2><ul><li>RDB是一个紧凑压缩的二进制文件，存储效率较高</li><li>RDB内部存储的是redis在某个时间点的数据快照，非常适合用于数据备份，全量复制等场景</li><li>RDB恢复数据的速度要比AOF快很多</li><li>应用：服务器中每X小时执行bgsave备份，并将RDB文件拷贝到远程机器中，用于灾难恢复。</li></ul><h2 id="缺点">2.4 缺点</h2><ul><li>RDB方式无论是执行指令还是利用配置，无法做到实时持久化，具有较大的可能性丢失数据</li><li>bgsave指令每次运行要执行fork操作创建子进程，要牺牲掉一些性能</li><li>Redis的众多版本中未进行RDB文件格式的版本统一，有可能出现各版本服务之间数据格式无法兼容现象</li></ul><h1 id="AOF">3 AOF</h1><h2 id="概述">3.1 概述</h2><p>AOF（append-only-file）:以独立日志的方式记录每次写命令，重启时再重新执行AOF文件中命令<br>达到恢复数据的目的。与RDB相比可以简单描述为<strong>改记录数据为记录数据产生的过程</strong></p><p>AOF的主要作用是解决了数据持久化的实时性，目前已经是Redis持久化的主流方式</p><p>这个文件是一个文本文件</p><h2 id="AOF写数据三种策略">3.2 AOF写数据三种策略</h2><ul><li>always（每次）<br>每次写入操作均同步到AOF文件中，数据零误差，性能较低，命令写入到aof_buf后，会调用系统fsync操作同步到文件中。  </li><li>everysec（每秒）<br>每秒将缓冲区中的指令同步到AOF文件中，数据准确性较高，性能较高，是默认配置。只调用系统write操作，fsync同步文件操作由专门进程每秒调用一次。<br>在系统突然宕机的情况下丢失1秒内的数据</li><li>no（系统控制）<br>由操作系统控制每次同步到AOF文件的周期，整体过程不可控，只调用系统write操作，不对AOF文件做fsync操作。</li></ul><h2 id="相关配置-1">3.3 相关配置</h2><ul><li><code>appendonly yes|no</code> 开启AOF</li><li><code>appendfsync always|everysec|no</code> 写数据策略</li></ul><h2 id="AOF重写">3.4 AOF重写</h2><p>随着命令不断写入AOF，文件会越来越大，为了解决这个问题，Redis引入了AOF重写机制压缩文件体积。AOF文件重写是将Redis进程内的数据转化为写命令同步到新AOF文件的过程。简单说就是将<strong>对同一个数据的若干个条命令执行结果转化成最终结果数据对应的指令</strong>进行记录。</p><h3 id="作用">3.4.1 作用</h3><ul><li>降低磁盘占用量，提高磁盘利用率</li><li>提高持久化效率，降低持久化写时间，提高IO性能</li><li>降低数据恢复用时，提高数据恢复效率</li></ul><h3 id="重写规则">3.4.2 重写规则</h3><ul><li>进程内已超时的数据不再写入文件</li><li>忽略无效指令，重写时使用进程内数据直接生成，这样新的AOF文件只保留最终数据的写入命令如del key1、hdel key2、srem key3、set key4 111、set key4 222等</li><li>对同一数据的多条写命令合并为一条命令，如<code>lpush list1 a</code>、<code>lpush list1 b</code>、 <code>lpush list1 c</code> 可以转化为：<code>lpush list1 a b c</code>。</li><li>为防止数据量过大造成客户端缓冲区溢出，对list、set、hash、zset等类型，每条指令最多写入64个元素</li></ul><h3 id="重写方式">3.4.3 重写方式</h3><p>手动重写：<code>bgrewriteaof</code></p><p>自动重写：</p><pre class=" language-conf"><code class="language-conf"># aof_current_size达到最小size开始重写auto-aof-rewrite-min-size size# (aof_current_size-aof_base_size)/aof_base_size>percentage开始重写auto-aof-rewrite-percentage percentage</code></pre><p>配置自动重写要了解两个参数：</p><pre><code>aof_current_sizeaof_base_size</code></pre><p><code>aof_current_size</code>表示当前AOF文件大小，<code>aof_base_size</code>指的就是上一次重写后AOF文件的大小。这两个参数可以通过运行指令<code>info Persistence</code>查看。</p><p>原理和bgsave类似，也是用子进程去重写。</p><h1 id="RDB与AOF区别">4 RDB与AOF区别</h1><table><thead><tr><th>持久化方式</th><th>RDB</th><th>AOF</th></tr></thead><tbody><tr><td>占用存储空间</td><td>小（数据级：压缩）</td><td>大（指令级：重写）</td></tr><tr><td>存储速度</td><td>慢</td><td>快</td></tr><tr><td>恢复速度</td><td>快</td><td>慢</td></tr><tr><td>数据安全性</td><td>会丢失数据</td><td>依据策略决定</td></tr><tr><td>资源消耗</td><td>高/重量级</td><td>低/轻量级</td></tr><tr><td>启动优先级</td><td>低</td><td>高</td></tr></tbody></table><p>如何选择？</p><ul><li>对数据非常敏感，建议使用默认的AOF持久化方案<ul><li>AOF持久化策略使用everysecond，每秒钟fsync一次。该策略redis仍可以保持很好的处理性能，当出现问题时，最多丢失0-1秒内的数据。</li><li>注意：由于AOF文件存储体积较大，且恢复速度较慢</li></ul></li><li>数据呈现阶段有效性，建议使用RDB持久化方案<ul><li>数据可以良好的做到阶段内无丢失（该阶段是开发者或运维人员手工维护的），且恢复速度较快，阶段点数据恢复通常采用RDB方案</li><li>注意：利用RDB实现紧凑的数据持久化会使Redis降的很低，慎重总结：</li></ul></li><li>综合比对<ul><li>RDB与AOF的选择实际上是在做一种权衡，每种都有利有弊</li><li>如不能承受数分钟以内的数据丢失，对业务数据非常敏感，选用AOF</li><li>如能承受数分钟以内的数据丢失，且追求大数据集的恢复速度，选用RDB</li><li>灾难恢复选用RDB</li><li>双保险策略，同时开启 RDB 和 AOF，重启后，Redis优先使用 AOF 来恢复数据，降低丢失数据的量</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;持久化简介&quot;&gt;1 持久化简介&lt;/h1&gt;&lt;p&gt;将内存中的数据隔段时间在硬盘中做备份，防止数据突然丢失&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;快照方法 RDB&lt;/li&gt;
&lt;li&gt;日志方法 AOF&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;RDB&quot;&gt;2 RDB&lt;/h1&gt;&lt;h2 id=&quot;
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Redis" scheme="https://www.codetool.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>MySQL回顾-存储过程与触发器</title>
    <link href="https://www.codetool.top/article/MySQL%E5%9B%9E%E9%A1%BE-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E4%B8%8E%E8%A7%A6%E5%8F%91%E5%99%A8/"/>
    <id>https://www.codetool.top/article/MySQL回顾-存储过程与触发器/</id>
    <published>2020-03-02T12:04:21.000Z</published>
    <updated>2020-03-04T13:00:00.501Z</updated>
    
    <content type="html"><![CDATA[<h1 id="存储过程">1 存储过程</h1><h2 id="概述">1.1 概述</h2><p>存储过程是一组为了完成特定功能的 SQL 语句集合。使用存储过程的目的是将常用或复杂的工作预先用 SQL 语句写好并用一个指定名称存储起来，这个过程经编译和优化后存储在数据库服务器中，因此称为存储过程。当以后需要数据库提供与已定义好的存储过程的功能相同的服务时，只需调用“CALL存储过程名字”即可自动完成。</p><p>一个存储过程是一个可编程的函数，它在数据库中创建并保存，一般由 SQL 语句和一些特殊的控制结构组成。当希望在不同的应用程序或平台上执行相同的特定功能时，存储过程尤为合适。</p><h2 id="优点">1.2 优点</h2><p>存储过程通常有如下优点：</p><ol><li>封装性<br>存储过程被创建后，可以在程序中被多次调用，而不必重新编写该存储过程的 SQL 语句，并且数据库专业人员可以随时对存储过程进行修改，而不会影响到调用它的应用程序源代码。</li><li>可增强 SQL 语句的功能和灵活性<br>存储过程可以用流程控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。</li><li>可减少网络流量<br>由于存储过程是在服务器端运行的，且执行速度快，因此当客户计算机上调用该存储过程时，网络中传送的只是该调用语句，从而可降低网络负载。</li><li>高性能<br>存储过程执行一次后，产生的二进制代码就驻留在缓冲区，在以后的调用中，只需要从缓冲区中执行二进制代码即可，从而提高了系统的效率和性能。</li><li>提高数据库的安全性和数据的完整性<br>使用存储过程可以完成所有数据库操作，并且可以通过编程的方式控制数据库信息访问的权限。</li></ol><h2 id="编写">1.3 编写</h2><h3 id="基本的存储过程">1.3.1 基本的存储过程</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> productpricing<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">BEGIN</span>        <span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">as</span> priceaverage <span class="token keyword">FROM</span> products<span class="token punctuation">;</span>    <span class="token keyword">END</span><span class="token punctuation">;</span></code></pre><p>创建名为 productpricing 的储存过程。如果存储过程中需要传递参数，则将他们在括号中列举出来即可。括号必须有。<strong>BEGIN 和 END 关键字用来限制存储过程体。</strong>上述存储过程体本身是一个简单的 select 语句。注意这里只是创建存储过程并没有进行调用。</p><p>储存过程的使用：<br><code>Call productpring();</code></p><h3 id="使用参数的存储过程">1.3.2 使用参数的存储过程</h3><p>一般存储过程并不显示结果，而是把结果返回给你指定的变量上。</p><p>变量：内存中一个特定的位置，用来临时存储数据。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> prod<span class="token punctuation">(</span>    <span class="token keyword">OUT</span> pl <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">OUT</span> ph <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">OUT</span> pa <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token keyword">BEGIN</span>        <span class="token keyword">SELECT</span> <span class="token function">MIN</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">INTO</span> pl <span class="token keyword">FROM</span> products<span class="token punctuation">;</span>        <span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">INTO</span> ph <span class="token keyword">FROM</span> products<span class="token punctuation">;</span>        <span class="token keyword">SELECT</span> <span class="token function">AVG</span><span class="token punctuation">(</span>prod_price<span class="token punctuation">)</span> <span class="token keyword">INTO</span> pa <span class="token keyword">FROM</span> products<span class="token punctuation">;</span>    <span class="token keyword">END</span><span class="token punctuation">;</span></code></pre><p>关键字 OUT 指出相应的参数用来从存储过程传出一个值(返回给调用者)。</p><p>MySQL 支持 <strong>in(传递给存储过程)、out(从存储过程传出，这里所用)和 inout(对存储过程传入和传出)</strong>类型的参数。存储过程的代码位于 begin 和 end 语句内。他们是一系列 select 语句，用来检索值。然后<strong>保存到相对应的变量(通过 INTO 关键字)。</strong>存储过程的参数允许的数据类型与表中使用的类型相同。注意记录集是不被允许的类型，因此，不能通过一个参数返回多个行和列，这也是上面为什么要使用 3 个参数和 3 条 select语句的原因。</p><p>使用：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">call</span> <span class="token keyword">PROCEDURE</span><span class="token punctuation">(</span><span class="token variable">@pricelow</span><span class="token punctuation">,</span><span class="token variable">@pricehigh</span><span class="token punctuation">,</span><span class="token variable">@priceaverage</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token variable">@pricelow</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token variable">@pricehigh</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token variable">@pricelow</span><span class="token punctuation">,</span><span class="token variable">@pricehigh</span><span class="token punctuation">,</span><span class="token variable">@priceaverage</span><span class="token punctuation">;</span></code></pre><p>为调用此存储过程，必须指定 3 个变量名。如上所示。3 个参数是存储过程保存结果的 3 个变量的名字。调用时，语句并不显示任何数据，它返回以后可以显示的变量(或在其他处理中使用)。</p><p>注意：所有的 MySQL 变量都是以@开头。</p><p>使用IN的示例：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> ordertotal<span class="token punctuation">(</span>    <span class="token operator">IN</span> innumber <span class="token keyword">int</span><span class="token punctuation">,</span>    <span class="token keyword">OUT</span> outtotal <span class="token keyword">decimal</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token keyword">BEGIN</span>        <span class="token keyword">SELECT</span> <span class="token function">Sum</span><span class="token punctuation">(</span>item_price <span class="token operator">*</span> quantity<span class="token punctuation">)</span> <span class="token keyword">FROM</span> orderitems <span class="token keyword">WHERE</span> order_num <span class="token operator">=</span>        innumber <span class="token keyword">INTO</span> outtotal<span class="token punctuation">;</span>    <span class="token keyword">END</span><span class="token punctuation">;</span> <span class="token keyword">CALL</span> ordertotal<span class="token punctuation">(</span><span class="token number">20005</span><span class="token punctuation">,</span><span class="token variable">@total</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token variable">@total</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 得到 20005 订单的合计</span><span class="token keyword">CALL</span> ordertotal<span class="token punctuation">(</span><span class="token number">20009</span><span class="token punctuation">,</span><span class="token variable">@total</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token variable">@total</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//得到 20009 订单的合计</span></code></pre><h3 id="带有控制语句的存储过程">1.3.3 带有控制语句的存储过程</h3><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> ordertotal<span class="token punctuation">(</span>    <span class="token operator">IN</span> onumber <span class="token keyword">INT</span><span class="token punctuation">,</span>    <span class="token operator">IN</span> taxable <span class="token keyword">BOOLEAN</span><span class="token punctuation">,</span>    <span class="token keyword">OUT</span> ototal <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span> <span class="token keyword">COMMENT</span> <span class="token string">'Obtain order total, optionally adding tax'</span>    <span class="token keyword">BEGIN</span>        <span class="token comment" spellcheck="true">-- declear variable for total</span>        <span class="token keyword">DECLARE</span> total <span class="token keyword">DECIMAL</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">-- declear tax percentage</span>        <span class="token keyword">DECLARE</span> taxrate <span class="token keyword">INT</span> <span class="token keyword">DEFAULT</span> <span class="token number">6</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">-- get the order total</span>        <span class="token keyword">SELECT</span> <span class="token function">Sum</span><span class="token punctuation">(</span>item_price <span class="token operator">*</span> quantity<span class="token punctuation">)</span> <span class="token keyword">FROM</span> orderitems <span class="token keyword">WHERE</span> order_num <span class="token operator">=</span>        onumber <span class="token keyword">INTO</span> total<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">-- IS this taxable?</span>        <span class="token keyword">IF</span> taxable <span class="token keyword">THEN</span>            <span class="token comment" spellcheck="true">-- yes ,so add taxrate to the total</span>            <span class="token keyword">SELECT</span> total<span class="token operator">+</span><span class="token punctuation">(</span>total<span class="token operator">/</span><span class="token number">100</span><span class="token operator">*</span>taxrate<span class="token punctuation">)</span><span class="token keyword">INTO</span> total<span class="token punctuation">;</span>        <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">-- finally ,save to out variable</span>        <span class="token keyword">SELECT</span> total <span class="token keyword">INTO</span> ototal<span class="token punctuation">;</span>    <span class="token keyword">END</span><span class="token punctuation">;</span></code></pre><p>在存储过程中我们使用了 <code>DECLARE</code> 语句，他们表示定义两个局部变量，DECLARE 要求指定变量名和数据类型。它也支持可选的默认值(taxrate 默认 6%)，因为后期我们还要判断要不要增加税，所以，我们把 SELECT 查询的结果存储到局部变量 total 中，然后在 IF 和 THEN 的配合下，检查 taxable 是否为真，然后在真的情况下，我们利用另一条 SELECT 语句增加营业税到局部变量 total 中，然后我们再利用 SELECT 语句将 total(增加税或者不增加税的结果)保存到总的 ototal 中。</p><p>上面的 COMMENT 关键字可以给出或者不给出，如果给出，将在 <code>SHOW PROCEDURE STATUS</code> 的结果中显示。</p><p>所有语法：</p><p>变量相关：</p><ul><li><code>DECLARE var_name[,...] type [DEFAULT value]</code>：声明变量</li><li><code>SET var_name = expr [, var_name = expr] ...</code>：变量赋值</li><li><code>select ... into var_name</code>：将查询的结果赋值给变量</li></ul><p>分支循环：</p><p><strong>if_then elseif_then else_then</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">if</span> search_condition <span class="token keyword">then</span> statement_list    <span class="token punctuation">[</span>elseif search_condition <span class="token keyword">then</span> statement_list<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token punctuation">[</span><span class="token keyword">else</span> statement_list<span class="token punctuation">]</span><span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span></code></pre><p><strong>case</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CASE</span> case_value  <span class="token keyword">WHEN</span> when_value <span class="token keyword">THEN</span> statement_list  <span class="token punctuation">[</span><span class="token keyword">WHEN</span> when_value <span class="token keyword">THEN</span> statement_list<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token punctuation">[</span><span class="token keyword">ELSE</span> statement_list<span class="token punctuation">]</span><span class="token keyword">END</span> <span class="token keyword">CASE</span><span class="token punctuation">;</span></code></pre><p><strong>while</strong></p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">while</span> search_condition <span class="token keyword">do</span>    statement_list<span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span></code></pre><p><strong>repeat</strong></p><p>while 是满足条件才执行，repeat 是满足条件就退出循环。</p><pre class=" language-sql"><code class="language-sql">REPEAT  statement_list  UNTIL search_condition<span class="token keyword">END</span> REPEAT<span class="token punctuation">;</span></code></pre><p><strong>loop</strong></p><p>通常配合leave语句退出循环，也可以死循环</p><pre class=" language-sql"><code class="language-sql"><span class="token punctuation">[</span>begin_label:<span class="token punctuation">]</span> LOOP  statement_list<span class="token keyword">END</span> LOOP <span class="token punctuation">[</span>end_label<span class="token punctuation">]</span></code></pre><p><strong>leave</strong></p><p>退出循环</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> pro_test11<span class="token punctuation">(</span>n <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">BEGIN</span>  <span class="token keyword">declare</span> total <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">0</span><span class="token punctuation">;</span>  ins: LOOP    <span class="token keyword">IF</span> n <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token keyword">then</span>      leave ins<span class="token punctuation">;</span>    <span class="token keyword">END</span> <span class="token keyword">IF</span><span class="token punctuation">;</span>    <span class="token keyword">set</span> total <span class="token operator">=</span> total <span class="token operator">+</span> n<span class="token punctuation">;</span>    <span class="token keyword">set</span> n <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">END</span> LOOP ins<span class="token punctuation">;</span>  <span class="token keyword">select</span> total<span class="token punctuation">;</span><span class="token keyword">END</span>$</code></pre><h3 id="使用游标的存储过程">1.3.4 使用游标的存储过程</h3><p>游标是用来存储查询结果集的数据类型 , 在存储过程和函数中可以使用光标对结果集进行循环的处理。光标的使用包括光标的声明、OPEN、FETCH 和 CLOSE，其语法分别如下。</p><p>声明光标：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">DECLARE</span> cursor_name <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span> select_statement <span class="token punctuation">;</span></code></pre><p>代表这个变量是一个cursor类型，对应的是select_statement语句的结果集。</p><p>OPEN 光标：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">OPEN</span> cursor_name <span class="token punctuation">;</span></code></pre><p>FETCH 光标：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">FETCH</span> cursor_name <span class="token keyword">INTO</span> var_name <span class="token punctuation">[</span><span class="token punctuation">,</span> var_name<span class="token punctuation">]</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>CLOSE 光标：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CLOSE</span> cursor_name <span class="token punctuation">;</span></code></pre><p>实例：</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 查询emp表中数据, 并逐行获取进行展示</span><span class="token keyword">DELIMITER</span> $<span class="token keyword">create</span> <span class="token keyword">procedure</span> pro_test12<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token keyword">DECLARE</span> id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">DECLARE</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">DECLARE</span> age <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">DECLARE</span> salary <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">DECLARE</span> has_data <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">DECLARE</span> emp_result <span class="token keyword">CURSOR</span> <span class="token keyword">FOR</span> <span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> emp<span class="token punctuation">;</span>  <span class="token keyword">DECLARE</span> <span class="token keyword">EXIT</span> <span class="token keyword">HANDLER</span> <span class="token keyword">FOR</span> <span class="token operator">NOT</span> FOUND <span class="token keyword">set</span> has_data <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">open</span> emp_result<span class="token punctuation">;</span>  repeat    <span class="token keyword">fetch</span> emp_result <span class="token keyword">into</span> id <span class="token punctuation">,</span> name <span class="token punctuation">,</span> age <span class="token punctuation">,</span> salary<span class="token punctuation">;</span>    <span class="token keyword">select</span> concat<span class="token punctuation">(</span><span class="token string">'id为'</span><span class="token punctuation">,</span>id<span class="token punctuation">,</span> <span class="token string">', name 为'</span> <span class="token punctuation">,</span>name <span class="token punctuation">,</span> <span class="token string">', age为 '</span> <span class="token punctuation">,</span>age <span class="token punctuation">,</span> <span class="token string">', 薪水为: '</span><span class="token punctuation">,</span> salary<span class="token punctuation">)</span><span class="token punctuation">;</span>    until has_data <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">end</span> repeat<span class="token punctuation">;</span>  <span class="token keyword">close</span> emp_result<span class="token punctuation">;</span><span class="token keyword">end</span>$<span class="token keyword">DELIMITER</span> <span class="token punctuation">;</span> </code></pre><p>通过<code>DECLARE EXIT HANDLER FOR NOT FOUND set has_data = 0;</code>相当于在光标获取不到下一行的时候给has_data赋值为0。</p><h2 id="修改存储过程">1.4 修改存储过程</h2><p>MySQL 中修改存储过程的语法格式如下：</p><p><code>ALTER PROCEDURE 存储过程名 [ 特征 ... ]</code></p><p>特征指定了存储过程的特性，可能的取值有：</p><ul><li><code>CONTAINS SQL</code> 表示子程序包含 SQL 语句，但不包含读或写数据的语句。</li><li><code>NO SQL</code> 表示子程序中不包含 SQL 语句。</li><li><code>READS SQL DATA</code> 表示子程序中包含读数据的语句。</li><li><code>MODIFIES SQL DATA</code> 表示子程序中包含写数据的语句。</li><li><code>SQL SECURITY { DEFINER |INVOKER }</code> 指明谁有权限来执行。<ul><li><code>DEFINER</code> 表示只有定义者自己才能够执行。</li><li><code>INVOKER</code> 表示调用者可以执行。</li></ul></li><li><code>COMMENT &#39;string&#39;</code> 表示注释信息。</li></ul><pre class=" language-sql"><code class="language-sql"><span class="token keyword">ALTER</span> <span class="token keyword">PROCEDURE</span> showstuscore <span class="token keyword">MODIFIES SQL DATA</span> SQL SECURITY <span class="token keyword">INVOKER</span><span class="token punctuation">;</span></code></pre><p>提示：<code>ALTER PROCEDURE</code> 语句用于修改存储过程的某些特征。如果要修改存储过程的内容，可以先删除原存储过程，再以相同的命名创建新的存储过程；如果要修改存储过程的名称，可以先删除原存储过程，再以不同的命名创建新的存储过程。</p><h2 id="删除存储过程">1.5 删除存储过程</h2><p>MySQL 中使用 <code>DROP PROCEDURE</code> 语句来删除数据库中已经存在的存储过程。语法格式如下：</p><p><code>DROP { PROCEDURE | FUNCTION } [ IF EXISTS ] &lt;过程名&gt;</code></p><p>IF EXISTS：指定这个关键字用于防止因删除不存在的存储过程而引发的错误。</p><h1 id="触发器">2 触发器</h1><h2 id="概述-1">2.1 概述</h2><p>MySQL 数据库中触发器是一个特殊的存储过程，不同的是执行存储过程要使用 CALL 语句来调用，而触发器的执行不需要使用 CALL 语句来调用，也不需要手工启动，只要一个预定义的事件发生就会被 MySQL自动调用。</p><p>触发程序的优点如下：</p><ul><li>触发程序的执行是自动的，当对触发程序相关表的数据做出相应的修改后立即执行。</li><li>触发程序可以通过数据库中相关的表层叠修改另外的表。</li><li>触发程序可以实施比 <code>FOREIGN KEY</code> 约束、<code>CHECK</code> 约束更为复杂的检查和操作。</li></ul><p>在 MySQL 中，只有执行 <code>INSERT</code>、<code>UPDATE</code> 和 <code>DELETE</code> 操作时才能激活触发器。</p><h2 id="创建触发器">2.2 创建触发器</h2><p>在创建触发器时，需要给出 4 条语句（规则）：</p><ol><li>唯一的触发器名；</li><li>触发器关联的表；</li><li>触发器应该响应的活动；</li><li>触发器何时执行(处理之前或者之后)</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> newproduct <span class="token keyword">AFTER</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> products <span class="token keyword">FOR EACH ROW</span> <span class="token keyword">SELECT</span><span class="token string">'Product added'</span> <span class="token keyword">INTO</span> <span class="token variable">@info</span><span class="token punctuation">;</span></code></pre><p>CREATE TRIGGER 用来创建名为 newproduct 的新触发器。触发器可以在一个操作发生前或<br>者发生后执行，这里 AFTER INSERT 是指此触发器在 INSERT 语句成功执行后执行。这个触<br>发器还指定 FOR EACH ROW ， 因此代码对每个插入行都会执行。文本 Product added 将<br>对每个插入的行显示一次</p><h2 id="INSERT-触发器">2.3 INSERT 触发器</h2><p>是在 insert 语句执行之前或者执行之后被执行的触发器。</p><ol><li>在 insert 触发器代码中，可引入一个名为 new 的虚拟表，访问被插入的行（普通插入语句之后也存在这个表）</li><li><strong>在 before insert 触发器中，new 中的值也可以被更新(允许更改被插入的值)</strong></li><li>对于 auto_increment 列，new 在 insert 执行之前包含 0，在 insert 执行之后包含新的自动生成值</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> neworder <span class="token keyword">AFTER</span> <span class="token keyword">INSERT</span> <span class="token keyword">ON</span> orders <span class="token keyword">FOR EACH ROW</span> <span class="token keyword">SELECT</span>NEW<span class="token punctuation">.</span>order_num<span class="token punctuation">;</span></code></pre><p>该语句创建一个名为 neworder 的触发器，按照 <code>AFTER INSERT ON orders</code> 执行。在插入一个新订单到 orders 表时，MySQL 生成一个新的订单号并保存到 order_num 中。触发器从NEW.order_num 取得这个值并返回它。此触发器必须按照 AFTER INSERT 执行，<strong>因为在BEFORE INSERT 语句执行之前，新 order_num 还没有生成。</strong> 对于 orders 的每次插入使用这个触发器总是返回新的订单号。</p><h2 id="DELETE-触发器">2.4 DELETE 触发器</h2><p>Delete 触发器在 delete 语句执行之前或者之后执行。</p><ol><li>在 delete 触发器的代码内,可以引用一个名为 OLD 的虚拟表，用来访问被删除的行。</li><li>OLD 中的值全为只读，不能更新。</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> deleteorder BEFORE <span class="token keyword">DELETE</span> <span class="token keyword">ON</span> orders <span class="token keyword">FOR EACH ROW</span><span class="token keyword">BEGIN</span>    <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> archive_orders<span class="token punctuation">(</span>order_num<span class="token punctuation">,</span>order_date<span class="token punctuation">,</span>cust_id<span class="token punctuation">)</span> <span class="token keyword">values</span>    <span class="token punctuation">(</span>OLD<span class="token punctuation">.</span>order_num<span class="token punctuation">,</span>OLD<span class="token punctuation">.</span>order_date<span class="token punctuation">,</span>OLD<span class="token punctuation">.</span>cust_id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span><span class="token punctuation">;</span></code></pre><p>在任意订单被删除前将执行此触发器，它使用一条 INSERT 语句将 OLD 中的值(要被删除的订单) 保存到一个名为 archive_orders 的存档表中(为实际使用这个例子，我们需要用与orders 相同的列创建一个名为 archive_orders 的表)</p><p><strong>使用 BEFORE DELETE 触发器的优点(相对于 AFTER DELETE 触发器来说)为，如果由于某种原因，订单不能存档，delete 本身将被放弃。</strong></p><p>我们在这个触发器使用了 BEGIN 和 END 语句标记触发器体。这在此例子中并不是必须的，只是为了说明使用BEGIN END 块的好处是触发器能够容纳多条SQL 语句(在BEGIN END块中一条挨着一条)。</p><h2 id="UPDATE-触发器">2.5 UPDATE 触发器</h2><p>在 update 语句执行之前或者之后执行</p><ol><li>在 update 触发器的代码内,可以引用一个名为 OLD 的虚拟表，用来访问以前(UPDATE 语句之前)的值，引用一个名为 NEW 的虚拟表访问新更新的值。</li><li>在 BEFORE UPDATE 触发器中，NEW 中的值可能也被用于更新(允许更改将要用于 UPDATE语句中的值)</li><li>OLD 中的值全为只读，不能更新。</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TRIGGER</span> updatevendor BEFORE <span class="token keyword">UPDATE</span> <span class="token keyword">ON</span> vendors <span class="token keyword">FOR EACH ROW</span> <span class="token keyword">SET</span>NEW<span class="token punctuation">.</span>vend_state <span class="token operator">=</span> Upper<span class="token punctuation">(</span>NEW<span class="token punctuation">.</span>vemd_state<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>保证州名缩写总是大写(不管 UPFATE 语句中是否给出了大写)，每次更新一行时，NEW.vend_state 中的值(将用来更新表行的值)都用 Upper(NEW.vend_state)替换。</p><h2 id="总结">2.6 总结</h2><ol><li>与其他 DBMS 相比，MySQL 5 中支持的触发器相当初级，未来的 MySQL 版本中估计会存在一些改进和增强触发器的支持。</li><li>通常 before 用于数据的验证和净化(为了保证插入表中的数据确实是需要的数据) 也适用于 update 触发器。</li><li>创建触发器可能需要特殊的安全访问权限，但是触发器的执行时自动的，如果 insert，update，或者 delete 语句能够执行，则相关的触发器也能执行。</li><li>用触发器来保证数据的一致性(大小写，格式等)。在触发器中执行这种类型的处理的优点就是它总是进行这种处理，而且透明的进行，与客户机应用无关。</li><li>触发器的一种非常有意义的使用就是创建审计跟踪。使用触发器，把更改(如果需要，甚至还有之前和之后的状态)记录到另外一个表是非常容易的。</li><li>MySQL 触发器不支持 call 语句，无法从触发器内调用存储过程。</li></ol><p>总体来说，触发器使用的过程中，MySQL 会按照以下方式来处理错误。</p><p>若对于事务性表，如果触发程序失败，以及由此导致的整个语句失败，那么该语句所执行的所有更改将回滚；对于非事务性表，则不能执行此类回滚，即使语句失败，失败之前所做的任何更改依然有效。</p><p>若 BEFORE 触发程序失败，则 MySQL 将不执行相应行上的操作。</p><p>若在 BEFORE 或 AFTER 触发程序的执行过程中出现错误，则将导致调用触发程序的整个语句失败。</p><p>仅当 BEFORE 触发程序和行操作均已被成功执行，MySQL 才会执行AFTER触发程序。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;存储过程&quot;&gt;1 存储过程&lt;/h1&gt;&lt;h2 id=&quot;概述&quot;&gt;1.1 概述&lt;/h2&gt;&lt;p&gt;存储过程是一组为了完成特定功能的 SQL 语句集合。使用存储过程的目的是将常用或复杂的工作预先用 SQL 语句写好并用一个指定名称存储起来，这个过程经编译和优化后存储在数据库服务
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="数据库" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://www.codetool.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL回顾-约束、常用函数和视图</title>
    <link href="https://www.codetool.top/article/MySQL%E5%9B%9E%E9%A1%BE-%E7%BA%A6%E6%9D%9F%E3%80%81%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%92%8C%E8%A7%86%E5%9B%BE/"/>
    <id>https://www.codetool.top/article/MySQL回顾-约束、常用函数和视图/</id>
    <published>2020-03-02T10:35:41.000Z</published>
    <updated>2020-03-02T15:04:04.361Z</updated>
    
    <content type="html"><![CDATA[<h1 id="约束">1 约束</h1><ul><li>主键约束：不允许重复记录，避免数据冗余</li><li>外键约束：保证本事务所关联的其他事务是存在的（主键表中的这个字段）<ul><li>实际开发中通常不使用外键约束，影响效率。</li></ul></li><li>check约束：限制值在某一个范围之内</li><li>default约束： 确定默认值( 可以更改) 保证事务的某个属性一定会有一个值</li><li>unique约束：唯一键，不可重复，但允许为空<ul><li>unique 和 not null 可以组合使用，顺序任意。</li><li>主键和唯一键的关系：不要用业务逻辑字段当做主键，应添加一个没有任何实际意义的字段（代理主键）当做主键。</li></ul></li><li>not null约束 要求用户必须为该字段赋一个值，否则出错</li></ul><h1 id="MySQL常用函数">2 MySQL常用函数</h1><h2 id="文本处理函数">2.1 文本处理函数</h2><ul><li><code>LEFT(x,len)</code> 返回串左边指定长度的字串（长度为 len）</li><li><code>RIGHT(x,len)</code> 返回串右边指定长度的字串（长度为 len）</li><li><code>LENGTH(x)/CHAR_LENGTH(str)</code> – 返回串的长度</li><li><code>LOCATE(x,sub_x)</code> – 找出串的一个子串</li><li><code>SUBSTRING(x, from, to)</code> 返回子字符串</li><li><code>LOWER(x)</code> 全部转小写</li><li><code>UPPER(x)</code> 全部转大写</li><li><code>LTRIM(x)</code> 左边所有的空格被删除</li><li><code>RTRIM(x)</code> 右边所有的空格被删除</li><li><code>TRIM(x)</code> 删除两边的空格</li><li><code>CONCAT(s1,s2…sn)</code> 字符串 s1,s2 等多个字符串合并为一个字符串</li></ul><h2 id="日期时间处理函数">2.2 日期时间处理函数</h2><ul><li><code>CURDATE()</code>/<code>CURRENT_DATE()</code> 返回当前日期，格式<code>2019-02-19</code></li><li><code>CURTIME()</code>/<code>CURRENT_TIME()</code> 返回当前时间，格式<code>11:40:45</code></li><li><code>CURRENT_TIMESTAMP()</code> 返回当前日期和时间，格式<code>2019-02-19 11:41:32</code></li><li><code>ADDDATE(d,n)</code> 计算起始日期 d 加上 n 天的日期</li><li><code>ADDTIME(t,n)</code> 时间 t 加上 n 秒的时间</li><li><code>DATE(str)</code> 从日期或日期时间表达式中提取日期值</li><li><code>DAY(d)</code> 返回日期值 d 的日期部分，也可以使用<code>EXTRACT(type FROM d)</code> type可以取MONTH,DAY,HOUR,MINUTE等</li><li><code>DATEDIFF(d1,d2)</code> 计算日期d1-&gt;d2之间相隔的天数</li><li><code>DATE_FORMAT(d,f)</code> DATE_FORMAT按表达式 f的要求显示日期 d</li><li><code>DAYOFMONTH(d)</code> 计算日期 d 是本月的第几天</li><li><code>DAYOFWEEK(d)</code> 日期 d 今天是星期几，1 星期日，2 星期一，以此类推</li><li><code>DAYOFYEAR(d)</code> 计算日期 d 是本年的第几天</li><li><code>UNIX_TIMESTAMP()</code> 得到时间戳</li><li><code>FROM_UNIXTIME()</code> 时间戳转日期</li></ul><h2 id="数值处理函数">2.3 数值处理函数</h2><ul><li><code>ABS(x)</code> 返回绝对值</li><li><code>AVG(expression)</code> 返回一个表达式的平均值，expression是一个字段</li><li><code>EXP(x)</code> 返回e的x次方</li><li><code>CEIL(x)</code>/<code>FLOOR(x)</code> 向上取整、向下取整</li><li><code>MOD()</code>（取余）</li><li><code>PI()</code> 圆周率</li><li><code>RAND()</code> 返回0到1的随机数</li><li><code>SQRT(x)</code> 返回x的平方根</li><li><code>ROUND(x)</code> 返回离 x 最近的整数</li></ul><h1 id="视图">3 视图</h1><p>视图是虚拟的表，与包含数据的表不同，视图只包含使用时动态检索数据的查询,主要是用于查询。</p><h2 id="为什么使用视图">3.1 为什么使用视图</h2><ul><li>重用 sql 语句</li><li>简化复杂的 sql 操作，在编写查询后，可以方便地重用它而不必知道他的基本查询细节。</li><li>使用表的组成部分而不是整个表。</li><li>保护数据。可以给用户授予表的特定部分的访问权限而不是整个表的访问权限。</li><li>更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。</li></ul><p>注意：</p><ul><li>在视图创建之后，可以用与表基本相同的方式利用它们。可以对视图执行 select 操作，过滤和排序数据，将视图联结到其他视图或表，甚至能添加和更新数据。</li><li>重要的是知道视图仅仅是用来查看存储在别处的数据的一种设施。视图本身不包含数据，因此它们返回的数据时从其他表中检索出来的。在添加和更改这些表中的数据时，视图将返回改变过的数据。</li><li>因为视图不包含数据，所以每次使用视图时，都必须处理查询执行时所需的任一检索。如果你使用多个连接和过滤创建了复杂的视图或者嵌套了视图，可能会发现性能下降得很厉害。因此，在部署使用了大量视图的应用前，应该进行测试。</li></ul><h2 id="视图的规则和限制">3.2 视图的规则和限制</h2><ul><li>与表一样，视图必须唯一命名；</li><li>可以创建任意多的视图；</li><li>为了创建视图，必须具有足够的访问权限。这些限制通常由数据库管理人员授予。</li><li>视图可以嵌套，可以利用从其他视图中检索数据的查询来构造一个视图。</li><li>Order by 可以在视图中使用，但如果从该视图检索数据 select 中也是含有 order by，那么该视图的 order by 将被覆盖。</li><li>视图不能索引，也不能有关联的触发器或默认值</li><li>视图可以和表一起使用 </li></ul><h2 id="视图操作的SQL语句">3.3 视图操作的SQL语句</h2><ul><li>利用 <code>create view view_name as 查询语句</code> 语句来进行创建视图</li><li>使用 <code>show create view view_name</code> 来查看创建视图的语句</li><li>用 <code>drop view view_name</code> 来删除视图</li><li>更新视图可以先 drop 再 create，也可以使用 <code>create or replace view_name as ...</code>。</li></ul><h2 id="视图的更新">3.4 视图的更新</h2><p>视图是否可以更新，要视情况而定。</p><p>通常情况下视图是可以更新的，可以对他们进行 insert，update 和 delete。更新视图就是更新其基表(视图本身没有数据)。如果你对视图进行增加或者删除行，实际上就是对基表进行增加或者删除行。</p><p>但是，如果 MySQL 不能正确的确定更新的基表数据，则不允许更新(包括插入和删除)，这<br>就意味着视图中如果存在以下操作则不能对视图进行更新：</p><ol><li>分组(使用 group by 和having )</li><li>联结</li><li>子查询</li><li>并</li><li>聚集函数</li><li>dictinct</li><li>导出(计算)列</li></ol><p>不推荐更改视图，会使得业务逻辑混淆。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;约束&quot;&gt;1 约束&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;主键约束：不允许重复记录，避免数据冗余&lt;/li&gt;
&lt;li&gt;外键约束：保证本事务所关联的其他事务是存在的（主键表中的这个字段）&lt;ul&gt;
&lt;li&gt;实际开发中通常不使用外键约束，影响效率。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="数据库" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://www.codetool.top/tags/MySQL/"/>
    
  </entry>
  
</feed>
