<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>代码段小站</title>
  <icon>https://www.gravatar.com/avatar/4c71a513a84e4d430b9f9aed224237fc</icon>
  <subtitle>CodeTool - 个人计算机类练手小博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.codetool.top/"/>
  <updated>2020-02-27T15:37:39.072Z</updated>
  <id>https://www.codetool.top/</id>
  
  <author>
    <name>Rhett Peng</name>
    <email>pctdyx@qq.net</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringMVC使用-续</title>
    <link href="https://www.codetool.top/article/SpringMVC%E4%BD%BF%E7%94%A8-%E7%BB%AD/"/>
    <id>https://www.codetool.top/article/SpringMVC使用-续/</id>
    <published>2020-02-27T15:35:47.000Z</published>
    <updated>2020-02-27T15:37:39.072Z</updated>
    
    <content type="html"><![CDATA[<h1 id="转发和重定向">1 转发和重定向</h1><p>除了视图解析器配合返回字符串的方法：</p><h2 id="使用request和response">1.1 使用request和response</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testRedir</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//使用request转向页面</span>    request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/pages/success.jsp"</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用response重定向</span>    response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"testRetrunString"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用response指定响应结果</span>    response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"json 串"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="使用返回字符串关键字">1.2 使用返回字符串关键字</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testForward"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">testForward</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AccountController 的 testForward 方法执行了。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"forward:/WEB-INF/pages/success.jsp"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testRedirect"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">testRedirect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"AccountController 的 testRedirect 方法执行了。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"redirect:testReturnModelAndView"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="ResponseBody-响应-json-数据">2 ResponseBody 响应 json 数据</h1><p>该注解用于将 Controller 的方法返回的对象，通过 HttpMessageConverter 接口转换为指定格式的数据如：<code>json,xml</code> 等，通过 Response 响应给客户端</p><p>Springmvc 默认用 MappingJacksonHttpMessageConverter 对 json 数据进行转换，需要加入<br>jackson 的包。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-annotations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>示例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testResponseJson"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> Account <span class="token function">testResponseJson</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Account account<span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异步请求："</span><span class="token operator">+</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> account<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>前一个<code>@ResponseBody</code>返回的时候转换为json，后一个<code>@ResponseBody</code>接收请求时转换为对象。</p><h1 id="文件上传和下载">3 文件上传和下载</h1><h2 id="文件上传">3.1 文件上传</h2><p>这里的文件上传用的是<code>multipart/form-data</code></p><p>当 form 表单的 enctype 取值为 Mutilpart/form-data 时，请求正文内容就变成：<br>每一部分都是 MIME 类型描述的正文</p><pre><code>-----------------------------7de1a433602ac 分界符Content-Disposition: form-data; name=&quot;userName&quot; 协议头aaa 协议的正文-----------------------------7de1a433602acContent-Disposition: form-data; name=&quot;file&quot;;filename=&quot;C:\Users\admin\Desktop\fileupload_demofile\b.txt&quot;Content-Type: text/plain 协议的类型（MIME 类型）bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb-----------------------------7de1a433602ac--</code></pre><p><strong>Apache Commoms里的两个工具类</strong></p><ul><li>commons-fileupload-xxx.jar</li><li>commons-io-xxx.jar</li></ul><p>（如果是maven项目只需要添加commons-fileupload依赖）</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><strong>配置文件上传处理Bean</strong>  </p><p>spring-mvc.xml配置  </p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置文件上传解析器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipartResolver<span class="token punctuation">"</span></span>    <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.multipart.commons.CommonsMultipartResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 设置上传文件的最大尺寸为 5MB --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxUploadSize<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    &lt;   value>5242880<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p><strong>文件上传处理Controller</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/file"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/initFileUpload"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">initFileUpload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"FileUpload"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">fileUpLoad</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span>CommonsMultipartFile file<span class="token punctuation">,</span> HttpSession session<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String path <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String fileName <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String fileType <span class="token operator">=</span> fileName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>fileName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            File targetFile <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>fileType<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                file<span class="token punctuation">.</span><span class="token function">getFileItem</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>targetFile<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"FileUpload"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="文件下载">3.2 文件下载</h2><p>可先获取下载文件的输入流，并将输入流读入缓冲流<code>BufferedInputStream</code>，最后将缓冲流通过循环的方式写入到response的输出流实现文件下载功能。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fileDownLoad</span><span class="token punctuation">(</span>HttpSession session<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span>String fileName<span class="token punctuation">,</span><span class="token keyword">boolean</span> isOnline<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    String path <span class="token operator">=</span> session<span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/upload"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\\"</span><span class="token operator">+</span>fileName<span class="token punctuation">;</span>    File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">sendError</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">,</span><span class="token string">"您要下载的文件没找到"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    BufferedInputStream bufIn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isOnline<span class="token punctuation">)</span><span class="token punctuation">{</span>        URL u <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span><span class="token string">"file:///"</span><span class="token operator">+</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>u<span class="token punctuation">.</span><span class="token function">openConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getContentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span><span class="token string">"inline;filename="</span><span class="token operator">+</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"application/x-msdownload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">,</span><span class="token string">"attachment;filename="</span><span class="token operator">+</span>fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    OutputStream out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>bufIn<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    bufIn<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="异常处理">4 异常处理</h1><p>系统的 dao、service、controller 出现都通过 throws Exception 向上抛出，最后由 SpringMVC 前端控制器交由异常处理器进行异常处理。</p><p><img src="https://api.codetool.top/img/15828125028214.png" alt></p><ol><li>编写自定义异常类</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//存储提示信息</span>    <span class="token keyword">private</span> String message<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">SysException</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>编写异常处理器</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SysExceptionResolver</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerExceptionResolver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> ModelAndView <span class="token function">resolveException</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取异常对象</span>        SysException e <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>ex <span class="token keyword">instanceof</span> <span class="token class-name">SysException</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            e <span class="token operator">=</span> <span class="token punctuation">(</span>SysException<span class="token punctuation">)</span> ex<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SysException</span><span class="token punctuation">(</span><span class="token string">"系统正在维护"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        ModelAndView mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"errorMsg"</span><span class="token punctuation">,</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>配置异常处理器（跳转到提示页面）</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置异常处理器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sysExceptionResolver<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.rhett.exception.SysExceptionResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h1 id="SpringMVC中的拦截器">5 SpringMVC中的拦截器</h1><ul><li>过滤器是 servlet 规范中的一部分，任何 java web 工程都可以使用。</li><li>拦截器是 SpringMVC 框架自己的，只有使用了 SpringMVC 框架的工程才能用。</li><li>过滤器在 url-pattern 中配置了/*之后，可以对所有要访问的资源拦截。</li><li>拦截器它是只会拦截访问的控制器方法，如果访问的是 jsp，html,css,image 或者 js 是不会进行拦截的。</li></ul><p>它也是 AOP 思想的具体应用。</p><p>我们要想自定义拦截器， 要求必须实现 <code>HandlerInterceptor</code> 接口。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HandlerInterceptorDemo1</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>     HttpServletResponse response<span class="token punctuation">,</span>     Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"preHandle 拦截器拦截了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>     HttpServletResponse response<span class="token punctuation">,</span>    Object handler<span class="token punctuation">,</span>ModelAndView modelAndView<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"postHandle 方法执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>     HttpServletResponse response<span class="token punctuation">,</span>     Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"afterCompletion 方法执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>HandlerInterceptor接口中的方法：</p><ol><li>preHandle方法是controller方法执行前拦截的方法<ol><li>可以使用request或者response跳转到指定的页面</li><li>return true放行，执行下一个拦截器，如果没有拦截器，执行controller中的方法。</li><li>return false不放行，不会执行controller中的方法。</li></ol></li><li>postHandle是controller方法执行后执行的方法，在JSP视图执行前。<ol><li>可以使用request或者response跳转到指定的页面</li><li>如果指定了跳转的页面，那么controller方法跳转的页面将不会显示。</li></ol></li><li>postHandle方法是在JSP执行后执行<ol><li>request或者response不能再跳转页面了</li></ol></li></ol><p>配置拦截器：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置拦截器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 要拦截的方法 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>mapping</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 不要拦截的方法 --></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;mvc:exclude-mapping path=""/> --></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置拦截器对象--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>handlerInterceptorDemo1<span class="token punctuation">"</span></span>                <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.rhett.interceptor.MyInterceptor1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptor</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>interceptors</span><span class="token punctuation">></span></span></code></pre><p>若配置多个拦截器形成拦截器链，按配置顺序执行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;转发和重定向&quot;&gt;1 转发和重定向&lt;/h1&gt;&lt;p&gt;除了视图解析器配合返回字符串的方法：&lt;/p&gt;
&lt;h2 id=&quot;使用request和response&quot;&gt;1.1 使用request和response&lt;/h2&gt;&lt;pre class=&quot; language-java&quot;&gt;&lt;c
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SpringMVC" scheme="https://www.codetool.top/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>海量数据算法-BitMap介绍和实现</title>
    <link href="https://www.codetool.top/article/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95-BitMap%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%AE%9E%E7%8E%B0/"/>
    <id>https://www.codetool.top/article/海量数据算法-BitMap介绍和实现/</id>
    <published>2020-02-27T09:22:49.000Z</published>
    <updated>2020-02-27T11:48:23.430Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个有素质的程序员，<del>在面试中（不是）</del> 难免会遇到海量数据相关的问题，之前有注意过java.util下面有一个BitSet数据结构，但不是很明白是做什么用的。今天就来研究一下它背后的算法——BitMap（位图）算法。</p><h1 id="BitMap的概念">1 BitMap的概念</h1><p>关于BitMap的介绍和实现有一篇微信文章已经讲的很清楚了：</p><p><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653191272&idx=1&sn=9bbcd172b611b455ebfc4b7fb9a6a55e&chksm=8c990eb2bbee87a486c55572a36c577a48df395e13e74314846d221cbcfd364d44c280250234&scene=21#wechat_redirect" target="_blank" rel="noopener">漫画：Bitmap算法 整合版</a></p><p>主要的思想就是把数据对应到bit位中，从而可以实现去重、查找、排序等功能。</p><p>我这篇文章就不复制粘贴了 <del>（全是图片粘贴个锤子）</del>，主要看看java中BitMap的实现-BitSet</p><h1 id="BitSet实现">2 BitSet实现</h1><h2 id="重要内部字段">2.1 重要内部字段</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//用于存储数据</span><span class="token keyword">private</span> <span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">;</span></code></pre><p>这个字段说明了底层是long数组，而一个long是8个字节也就是64位。而且在BitSet中，把这样一个long单元称为“字”（word）。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">int</span> wordsInUse <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></code></pre><p>这个字段代表目前long数组中不为0的元素的最大的下标。（就是目前实际用了多少个字）</p><h2 id="构造方法">2.2 构造方法</h2><h3 id="BitSet">2.2.1 BitSet()</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">BitSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">initWords</span><span class="token punctuation">(</span>BITS_PER_WORD<span class="token punctuation">)</span><span class="token punctuation">;</span>    sizeIsSticky <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>initWords</code>，看方法名就是初始化words数组了，而后面的BITS_PER_WORD应该就是默认容量。<code>sizeIsSticky</code>的java doc描述大概意思是判断这个bitset是不是用户指定容量创建的，如果是用户指定了容量，后面就尽可能会保有这个容量。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ADDRESS_BITS_PER_WORD <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> BITS_PER_WORD <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> ADDRESS_BITS_PER_WORD<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">initWords</span><span class="token punctuation">(</span><span class="token keyword">int</span> nbits<span class="token punctuation">)</span> <span class="token punctuation">{</span>    words <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">long</span><span class="token punctuation">[</span><span class="token function">wordIndex</span><span class="token punctuation">(</span>nbits<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">wordIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> bitIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> bitIndex <span class="token operator">>></span> ADDRESS_BITS_PER_WORD<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>ADDRESS_BITS_PER_WORD</code>的意思就是一个字的地址占多少位，因为是64位是2的6次方，这里就是6。<br>而<code>BITS_PER_WORD</code>就是一个字占多少位，这里就是<code>1&lt;&lt;6</code>即64位。</p><p><code>initWords</code>的时候，我们传进去的默认容量为<code>BITS_PER_WORD</code>，这里看形参可以知道这个容量的单位是bit，那么也就是说默认构造函数只会创建一个能容纳64位的bitSet。</p><p>而BitSet怎么知道64位需要多少个字(long)呢？就是通过<code>wordIndex</code>去计算，将位值除以64，并向上取整。</p><p>后面<code>wordIndex</code>还会在索引的时候用到。</p><h3 id="public-BitSet-int-nbits">2.2.2 public BitSet(int nbits)</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">BitSet</span><span class="token punctuation">(</span><span class="token keyword">int</span> nbits<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// nbits can't be negative; size 0 is OK</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nbits <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NegativeArraySizeException</span><span class="token punctuation">(</span><span class="token string">"nbits &lt; 0: "</span> <span class="token operator">+</span> nbits<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initWords</span><span class="token punctuation">(</span>nbits<span class="token punctuation">)</span><span class="token punctuation">;</span>    sizeIsSticky <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个构造方法就是用户自己指定初始容量了，过程和默认构造方法一样，只是把<code>sizeIsSticky</code>设为了true。</p><h2 id="重要方法">2.3 重要方法</h2><h3 id="set">2.3.1 set</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> bitIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bitIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"bitIndex &lt; 0: "</span> <span class="token operator">+</span> bitIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//计算出字的下标</span>    <span class="token keyword">int</span> wordIndex <span class="token operator">=</span> <span class="token function">wordIndex</span><span class="token punctuation">(</span>bitIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expandTo</span><span class="token punctuation">(</span>wordIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    words<span class="token punctuation">[</span>wordIndex<span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token punctuation">(</span>1L <span class="token operator">&lt;&lt;</span> bitIndex<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Restores invariants</span>    <span class="token comment" spellcheck="true">//保证一些条件</span>    <span class="token function">checkInvariants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个方法的作用就是把相应的位设置为true（1）。而<code>expandTo()</code>就是扩容了，要保证数组大小要大于这个字的下标。这个扩容方法我们放到后面再看。然后就是<code>words[wordIndex] |= (1L &lt;&lt; bitIndex);</code> ，这里的<code>1L &lt;&lt; bitIndex</code>是什么呢，java当左移超出一定范围的时候，对于long类型就是当左移位数大于等于1000000(64)的时候，只会取最后七位，也就是<code>1L &lt;&lt; bitIndex</code>实际上就是<code>bitIndex%64</code>，算出了该位在字中的位置。然后用位或运算将该位置为1。</p><h3 id="clear">2.3.2 clear</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token keyword">int</span> bitIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bitIndex <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IndexOutOfBoundsException</span><span class="token punctuation">(</span><span class="token string">"bitIndex &lt; 0: "</span> <span class="token operator">+</span> bitIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> wordIndex <span class="token operator">=</span> <span class="token function">wordIndex</span><span class="token punctuation">(</span>bitIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>wordIndex <span class="token operator">>=</span> wordsInUse<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    words<span class="token punctuation">[</span>wordIndex<span class="token punctuation">]</span> <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span>1L <span class="token operator">&lt;&lt;</span> bitIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">recalculateWordsInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkInvariants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个方法的作用就是把相应的位设置为false（0）。和set方法过程很像，用位与运算将对应的位置为0。</p><h3 id="set-int-fromIndex-int-toIndex">2.3.3 set(int fromIndex, int toIndex)</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//检查范围是否有效</span>    <span class="token function">checkRange</span><span class="token punctuation">(</span>fromIndex<span class="token punctuation">,</span> toIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fromIndex <span class="token operator">==</span> toIndex<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Increase capacity if necessary</span>    <span class="token comment" spellcheck="true">// 获取起始位置和结束位置对应的字的下标，必要时扩容</span>    <span class="token keyword">int</span> startWordIndex <span class="token operator">=</span> <span class="token function">wordIndex</span><span class="token punctuation">(</span>fromIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> endWordIndex   <span class="token operator">=</span> <span class="token function">wordIndex</span><span class="token punctuation">(</span>toIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">expandTo</span><span class="token punctuation">(</span>endWordIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> firstWordMask <span class="token operator">=</span> WORD_MASK <span class="token operator">&lt;&lt;</span> fromIndex<span class="token punctuation">;</span>    <span class="token keyword">long</span> lastWordMask  <span class="token operator">=</span> WORD_MASK <span class="token operator">>>></span> <span class="token operator">-</span>toIndex<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>startWordIndex <span class="token operator">==</span> endWordIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Case 1: One word</span>        words<span class="token punctuation">[</span>startWordIndex<span class="token punctuation">]</span> <span class="token operator">|=</span> <span class="token punctuation">(</span>firstWordMask <span class="token operator">&amp;</span> lastWordMask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Case 2: Multiple words</span>        <span class="token comment" spellcheck="true">// Handle first word</span>        words<span class="token punctuation">[</span>startWordIndex<span class="token punctuation">]</span> <span class="token operator">|=</span> firstWordMask<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Handle intermediate words, if any</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> startWordIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> endWordIndex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            words<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> WORD_MASK<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Handle last word (restores invariants)</span>        words<span class="token punctuation">[</span>endWordIndex<span class="token punctuation">]</span> <span class="token operator">|=</span> lastWordMask<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">checkInvariants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>WORD_MASK是什么呢：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* Used to shift left or right for a partial word mask */</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> WORD_MASK <span class="token operator">=</span> 0xffffffffffffffffL<span class="token punctuation">;</span></code></pre><p>就是一个全1的long型，这个函数先将起始位置中的起始位往后的位置1，然后将中间的字全部设为全1的，最后将结束位置中的结束位往前的位置置1。</p><h3 id="intersects">2.3.4 intersects</h3><p>有了上面那些基础方法，就可以进行一些逻辑判断了：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">intersects</span><span class="token punctuation">(</span>BitSet set<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>wordsInUse<span class="token punctuation">,</span> set<span class="token punctuation">.</span>wordsInUse<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> set<span class="token punctuation">.</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>比较两个BitSet是否有相同的位被置1了。</p><h3 id="and">2.3.5 and</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">and</span><span class="token punctuation">(</span>BitSet set<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> set<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>wordsInUse <span class="token operator">></span> set<span class="token punctuation">.</span>wordsInUse<span class="token punctuation">)</span>        words<span class="token punctuation">[</span><span class="token operator">--</span>wordsInUse<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Perform logical AND on words in common</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> wordsInUse<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        words<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;=</span> set<span class="token punctuation">.</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">recalculateWordsInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkInvariants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>非常常用的与运算，求两个集合的交集，需要两个bitset中对应的位都被置1。这里就是逐字做与运算。</p><h3 id="or">2.3.6 or</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">or</span><span class="token punctuation">(</span>BitSet set<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> set<span class="token punctuation">)</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> wordsInCommon <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>wordsInUse<span class="token punctuation">,</span> set<span class="token punctuation">.</span>wordsInUse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>wordsInUse <span class="token operator">&lt;</span> set<span class="token punctuation">.</span>wordsInUse<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ensureCapacity</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span>wordsInUse<span class="token punctuation">)</span><span class="token punctuation">;</span>        wordsInUse <span class="token operator">=</span> set<span class="token punctuation">.</span>wordsInUse<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Perform logical OR on words in common</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> wordsInCommon<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        words<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">|=</span> set<span class="token punctuation">.</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Copy any remaining words</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>wordsInCommon <span class="token operator">&lt;</span> set<span class="token punctuation">.</span>wordsInUse<span class="token punctuation">)</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span>words<span class="token punctuation">,</span> wordsInCommon<span class="token punctuation">,</span>                            words<span class="token punctuation">,</span> wordsInCommon<span class="token punctuation">,</span>                            wordsInUse <span class="token operator">-</span> wordsInCommon<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// recalculateWordsInUse() is unnecessary</span>    <span class="token function">checkInvariants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>非常常用的或运算，求两个集合的并集，需要两个bitset中任意一位被置1。这里就是逐字做或运算。</p><h3 id="xor">2.3.7 xor</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">xor</span><span class="token punctuation">(</span>BitSet set<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> wordsInCommon <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>wordsInUse<span class="token punctuation">,</span> set<span class="token punctuation">.</span>wordsInUse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>wordsInUse <span class="token operator">&lt;</span> set<span class="token punctuation">.</span>wordsInUse<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ensureCapacity</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span>wordsInUse<span class="token punctuation">)</span><span class="token punctuation">;</span>        wordsInUse <span class="token operator">=</span> set<span class="token punctuation">.</span>wordsInUse<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Perform logical XOR on words in common</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> wordsInCommon<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        words<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^=</span> set<span class="token punctuation">.</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Copy any remaining words</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>wordsInCommon <span class="token operator">&lt;</span> set<span class="token punctuation">.</span>wordsInUse<span class="token punctuation">)</span>        System<span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span>words<span class="token punctuation">,</span> wordsInCommon<span class="token punctuation">,</span>                            words<span class="token punctuation">,</span> wordsInCommon<span class="token punctuation">,</span>                            set<span class="token punctuation">.</span>wordsInUse <span class="token operator">-</span> wordsInCommon<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">recalculateWordsInUse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkInvariants</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>异或运算。求不同时在两个集合内的元素。</p><h2 id="扩容">2.4 扩容</h2><p>最后来看扩容</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">expandTo</span><span class="token punctuation">(</span><span class="token keyword">int</span> wordIndex<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> wordsRequired <span class="token operator">=</span> wordIndex<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>wordsInUse <span class="token operator">&lt;</span> wordsRequired<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">ensureCapacity</span><span class="token punctuation">(</span>wordsRequired<span class="token punctuation">)</span><span class="token punctuation">;</span>        wordsInUse <span class="token operator">=</span> wordsRequired<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>expandTo更新了wordsInUse，真正的扩容在ensureCapacity里面</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">ensureCapacity</span><span class="token punctuation">(</span><span class="token keyword">int</span> wordsRequired<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>words<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> wordsRequired<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 分配两倍数组大小或需要的数组大小中较大的那个。</span>        <span class="token keyword">int</span> request <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> words<span class="token punctuation">.</span>length<span class="token punctuation">,</span> wordsRequired<span class="token punctuation">)</span><span class="token punctuation">;</span>        words <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>words<span class="token punctuation">,</span> request<span class="token punctuation">)</span><span class="token punctuation">;</span>        sizeIsSticky <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="使用实例">3 使用实例</h1><p>这样看来，BitSet好像只能存储数值类型的数据，实际上<strong>非数值类型可以使用哈希码或自定的哈希映射存储，但要保证哈希码只能唯一确定一个元素。</strong></p><h2 id="去重">3.1 去重</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">containChars</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    BitSet used <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        used<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// set bit for char</span>    StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> used<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">char</span> i <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token string">'z'</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>used<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">containChars</span><span class="token punctuation">(</span><span class="token string">"abcdfadsaomdosmdfodsingodsbnafgudbgiub"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>(通常是遍历bitset中所有的位进行去重，这里因为字母有限可以遍历字母)</p><h2 id="排序">3.2 排序</h2><p>排序也是遍历bitset中所有的位，但是对于哈希码存储的并没有排序作用。实际上就是用空间换时间。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    BitSet used <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BitSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    used<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    used<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    used<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    used<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    used<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">44</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    used<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    used<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>used<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>used<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="查询">3.3 查询</h2><p>给40亿个不重复的unsigned int的整数，没有排过序，然后再给一个数，如果快速判断这个数是否在那40亿个数当中？</p><p>一个一个set进去，然后用get判断有没有。</p><p>（set完之后这个数据结构就可复用了）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作为一个有素质的程序员，&lt;del&gt;在面试中（不是）&lt;/del&gt; 难免会遇到海量数据相关的问题，之前有注意过java.util下面有一个BitSet数据结构，但不是很明白是做什么用的。今天就来研究一下它背后的算法——BitMap（位图）算法。&lt;/p&gt;
&lt;h1 id=&quot;BitM
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="海量数据" scheme="https://www.codetool.top/tags/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC概述和使用入门</title>
    <link href="https://www.codetool.top/article/SpringMVC%E6%A6%82%E8%BF%B0%E5%92%8C%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/"/>
    <id>https://www.codetool.top/article/SpringMVC概述和使用入门/</id>
    <published>2020-02-27T09:05:01.000Z</published>
    <updated>2020-02-27T09:08:52.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述">1 概述</h1><h2 id="SpringMVC的概念">1.1 SpringMVC的概念</h2><p>SpringMVC 是一种基于 Java 的实现 MVC 设计模型的请求驱动类型的轻量级 Web 框架，属于 Spring FrameWork 的后续产品，已经融合在 Spring Web Flow 里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。使用 Spring 可插入的 MVC 架构，从而在使用 Spring 进行 WEB 开发时，可以选择使用 Spring 的 Spring MVC 框架或集成其他 MVC 开发框架，如 Struts1(现在一般不用)，Struts2 等。</p><p>它通过一套注解，让一个简单的 Java 类成为处理请求的控制器，而无须实现任何接口。同时它还支持RESTful 编程风格的请求。</p><h2 id="SpringMVC的优势">1.2 SpringMVC的优势</h2><ol><li>清晰的角色划分：<ul><li>前端控制器（DispatcherServlet）</li><li>请求到处理器映射（HandlerMapping）</li><li>处理器适配器（HandlerAdapter）</li><li>视图解析器（ViewResolver）</li><li>处理器或页面控制器（Controller）</li><li>验证器（Validator）</li><li>命令对象（Command 请求参数绑定到的对象就叫命令对象）</li><li>表单对象（Form Object 提供给表单展示和提交到的对象就叫表单对象）。</li></ul></li><li>分工明确，而且扩展点相当灵活，可以很容易扩展，虽然几乎不需要。</li><li>由于命令对象就是一个 POJO，无需继承框架特定 API，可以使用命令对象直接作为业务对象。</li><li>和 Spring 其他框架无缝集成，是其它 Web 框架所不具备的。</li><li>可适配，通过 HandlerAdapter 可以支持任意的类作为处理器。</li><li>可定制性，HandlerMapping、ViewResolver 等能够非常简单的定制。</li><li>功能强大的数据验证、格式化、绑定机制。</li><li>利用 Spring 提供的 Mock 对象能够非常简单的进行 Web 层单元测试。</li><li>本地化、主题的解析的支持，使我们更容易进行国际化和主题的切换。</li><li>强大的 JSP 标签库，使 JSP 编写更容易。</li></ol><p>………………还有比如RESTful风格的支持、简单的文件上传、约定大于配置的契约式编程支持、基于注解的零配置支持等等。</p><h2 id="SpringMVC和Struts2的优劣分析">1.3 SpringMVC和Struts2的优劣分析</h2><p>共同点：</p><ul><li>它们都是表现层框架，都是基于 MVC 模型编写的。</li><li>它们的底层都离不开原始 ServletAPI。</li><li>它们处理请求的机制都是一个核心控制器。</li></ul><p>区别：</p><ul><li>Spring MVC 的入口是 Servlet, 而 Struts2 是 Filter</li><li>Spring MVC 是基于方法设计的，而 Struts2 是基于类，Struts2 每次执行都会创建一个动作类。所以 Spring MVC 会稍微比 Struts2 快些。</li><li>Spring MVC 使用更加简洁,同时还支持 JSR303, 处理 ajax 的请求更方便<blockquote><p>(JSR303 是一套 JavaBean 参数校验的标准，它定义了很多常用的校验注解，我们可以直接将这些注解加在我们 JavaBean 的属性上面，就可以在需要校验的时候进行校验了。)</p></blockquote></li><li>Struts2 的 OGNL 表达式使页面的开发效率相比 Spring MVC 更高些，但执行效率并没有比 JSTL 提升，尤其是 struts2 的表单标签，远没有 html 执行效率高。</li></ul><h1 id="入门案例">2 入门案例</h1><h2 id="maven配置">2.1 maven配置</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.source</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.source</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maven.compiler.target</span><span class="token punctuation">></span></span>8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maven.compiler.target</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>5.2.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>servlet-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.servlet.jsp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jsp-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span></code></pre><h2 id="web-xml配置">2.2 web.xml配置</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:spring-mvc.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre><p>DispatcherServlet就是用于分发请求的，这里可以视为过滤器。它配合Controller中的<code>@RequestMapping</code>分发请求。</p><p>init-param里面的<code>contextConfigLocation</code>指引springmvc去加载spring配置</p><h2 id="Spring配置文件">2.3 Spring配置文件</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>p</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/p<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans      http://www.springframework.org/schema/beans/spring-beans-3.0.xsd      http://www.springframework.org/schema/context      http://www.springframework.org/schema/context/spring-context.xsd      http://www.springframework.org/schema/mvc      http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--启用组件扫描--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.test.controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--启动SpringMVC的注解功能，完成请求和注解POJO的映射--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置视图解析器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>internalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/pages/<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h2 id="控制类编写">2.4 控制类编写</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/showUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">ShowUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"ShowUser"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里的<code>@RequestMapping</code>代表要访问项目目录下的<code>/user/showUser</code>才会被分发到该Controller类</p><p>注意返回的字符串配合视图解析器会跳转到<code>/WEB-INF/pages/ShowUser.jsp</code></p><h1 id="入门案例涉及的组件">3 入门案例涉及的组件</h1><p><img src="https://api.codetool.top/img/15827432872340.png" alt></p><h2 id="DispatcherServlet">3.1 DispatcherServlet</h2><p>前端控制器：用户请求到达前端控制器，它就相当于 mvc 模式中的 c，dispatcherServlet 是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet 的存在降低了组件之间的耦合性。</p><h2 id="HandlerMapping">3.2 HandlerMapping</h2><p>处理器映射器：HandlerMapping 负责根据用户请求找到 Handler 即处理器，SpringMVC 提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。</p><h2 id="Handler">3.3 Handler</h2><p>处理器：它就是我们开发中要编写的具体业务控制器。由 DispatcherServlet 把用户请求转发到 Handler。由Handler 对具体的用户请求进行处理。</p><h2 id="HandlerAdapter">3.4 HandlerAdapter</h2><p>处理器适配器：通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。</p><h2 id="View-Resolver">3.5 View Resolver</h2><p>视图解析器：View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。</p><h2 id="View">3.6 View</h2><p>SpringMVC 框架提供了很多的 View 视图类型的支持，包括：jstlView、freemarkerView、pdfView等。我们最常用的视图就是 jsp。</p><p>一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。</p><h2 id="总结">3.7 总结</h2><p>在 SpringMVC 的各个组件中，处理器映射器、处理器适配器、视图解析器称为 SpringMVC 的三大组件。</p><p>使用 <code>&lt;mvc:annotation-driven&gt;</code> 自动加载 HandlerMapping（处理映射器）和HandlerAdapter（处理适配器），可用在 <code>SpringMVC.xml</code> 配置文件中使用<code>&lt;mvc:annotation-driven&gt;</code>替代注解处理器和适配器的配置。</p><h1 id="RequestMapping注解">4 RequestMapping注解</h1><h2 id="value属性">4.1 value属性</h2><p>value属性就是path属性的别名，填需要指定请求的地址，可以填写：</p><ol><li><p>普通的具体值<br><code>@RequestMapping(&quot;/user&quot;)</code></p></li><li><p>含有某一变量的一类值</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/{userId}/deleteUser"</span><span class="token punctuation">,</span>method<span class="token operator">=</span>RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span> <span class="token keyword">public</span> String <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String userId<span class="token punctuation">)</span><span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"delete:"</span><span class="token operator">+</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token string">"ShowUser"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>含正值表达式的一类值</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"/{userBirth:\\d{4}-\\d{2}-\\d{2}}/updateUser"</span><span class="token punctuation">,</span>method<span class="token operator">=</span>RequestMethod<span class="token punctuation">.</span>GET<span class="token punctuation">)</span> <span class="token keyword">public</span> String <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> String userBirth<span class="token punctuation">)</span><span class="token punctuation">{</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"userBirth:"</span><span class="token operator">+</span>userBirth<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token string">"ShowUser"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><h2 id="method属性">4.2 method属性</h2><p>GET\POST\PUT\DELETE…</p><h2 id="consumes属性">4.3 consumes属性</h2><p>指定处理请求的提交内容类型，例如<code>application/json</code>、<code>text/html</code></p><h2 id="produces属性">4.4 produces属性</h2><p>指定返回的内容类型，仅当request请求头中的Accept类型中包含该指定类型才返回。</p><h2 id="params属性">4.5 params属性</h2><p>指定request中必须包含某些参数值时才让该方法处理请求</p><h2 id="headers属性">4.6 headers属性</h2><p>指定request中必须包含某些指定的header值时才让该方法处理请求</p><h1 id="spring前后台交互">5 spring前后台交互</h1><h2 id="Controller获取前台传递的参数">5.1 Controller获取前台传递的参数</h2><p>（GET参数、POST参数等）</p><h3 id="直接通过形参获取">5.1.1 直接通过形参获取</h3><p>形参的名字必须和前端传递的数据名一样</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/addUser"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">ShowUser</span><span class="token punctuation">(</span>Model model<span class="token punctuation">,</span>String name<span class="token punctuation">,</span>Integer age<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"age:"</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"ShowUser"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>如果不一致可以使用<code>@ModelAttribute</code>或<code>@RequestParam</code>来指定形参要接受的参数的值。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/addUser"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">ShowUser</span><span class="token punctuation">(</span>Model model<span class="token punctuation">,</span> <span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span> String nickname<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token operator">+</span>nickname<span class="token operator">+</span><span class="token string">"age:"</span><span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"ShowUser"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="使用对象接受前台传递的参数">5.1.2 使用对象接受前台传递的参数</h3><p>前台传递的参数名必须和对象的属性名一致</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/addUser"</span><span class="token punctuation">,</span>method <span class="token operator">=</span> RequestMethod<span class="token punctuation">.</span>POST<span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">ShowUser</span><span class="token punctuation">(</span>Model model<span class="token punctuation">,</span> User user<span class="token punctuation">,</span><span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span>String nickname<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name:"</span><span class="token operator">+</span>nickname<span class="token operator">+</span><span class="token string">"age:"</span><span class="token operator">+</span>user<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"ShowUser"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>当<code>@ModelAttribute</code>注解应用在方法前的时候，<strong>SpringMVC在调用目标处理方法前，会先逐个调用在方法级上标注了<code>@ModelAttribute</code>的方法（把它看成获取必要属性的前置方法）</strong></p></blockquote><p>如下面的代码可以实现在每次调用处理方法前获取request response session</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BaseController</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> HttpServletRequest request<span class="token punctuation">;</span>    <span class="token keyword">protected</span> HttpServletResponse request<span class="token punctuation">;</span>    <span class="token keyword">protected</span> HttpSession session<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ModelAttribute</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setReqAndRes</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span>HttpServletResponse response<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>request <span class="token operator">=</span> request<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>response <span class="token operator">=</span> response<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="使用集合接受前台传递的参数">5.1.3 使用集合接受前台传递的参数</h3><p>如果是list则前台传递的参数名是<code>list[index].propName</code>（index下标，propName属性名）</p><p>如果是Map则前台传递的参数名是<code>map[&#39;key&#39;].propName</code>（key键名，propName属性名）</p><h2 id="Controller传递参数到前台">5.2 Controller传递参数到前台</h2><h3 id="直接通过request对象传递">5.2.1 直接通过request对象传递</h3><p>直接通过获取的request的setAttribute方法传递。</p><h3 id="直接通过返回值ModelAndView对象传递">5.2.2 直接通过返回值ModelAndView对象传递</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/showUser"</span><span class="token punctuation">)</span><span class="token keyword">public</span> ModelAndView <span class="token function">ShowUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token string">"ShowUser"</span><span class="token punctuation">,</span><span class="token string">"message"</span><span class="token punctuation">,</span><span class="token string">"test message!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>第一个参数是<strong>逻辑视图字符串</strong></li><li>第二个参数是要往ShowUser视图上<strong>传递参数的名称</strong>。</li><li>第三个参数是要往ShowUser视图上<strong>传递参数的值</strong>。</li></ul><p>当要传递多个参数时可以多次调用<code>ModelAndView.addObject(&quot;attributeName&quot;,attributeValue)</code>。</p><p><strong>这些数据也是存放在request中的。</strong></p><h3 id="直接通过参数列表中添加形参ModelMap传递">5.2.3 直接通过参数列表中添加形参ModelMap传递</h3><p>写成接口Model也行</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/addUser"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">ShowUser</span><span class="token punctuation">(</span>ModelMap map<span class="token punctuation">)</span><span class="token punctuation">{</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span><span class="token string">"test message!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    map<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"attributeName"</span><span class="token punctuation">,</span><span class="token string">"attributeValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"showUser"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="配置解决中文乱码的过滤器">5.3 配置解决中文乱码的过滤器</h2><p>web.xml:</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>characterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre><h2 id="自定义类型转换器">5.4 自定义类型转换器</h2><p>第一步：定义一个类，实现 Converter 接口，该接口有两个泛型参数。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Converter</span><span class="token operator">&lt;</span>S<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//S:表示接受的类型，T：表示目标类型</span>    <span class="token comment" spellcheck="true">/**    * 实现类型转换的方法    */</span>    <span class="token annotation punctuation">@Nullable</span>    T <span class="token function">convert</span><span class="token punctuation">(</span>S source<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringToDateConverter</span> <span class="token keyword">implements</span> <span class="token class-name">Converter</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Date<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**    * 用于把 String 类型转成日期类型    */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Date <span class="token function">convert</span><span class="token punctuation">(</span>String source<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DateFormat format <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"请输入要转换的日期"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            format <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Date date <span class="token operator">=</span> format<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> date<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"输入日期有误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>第二步：在 spring 配置文件中配置类型转换器。</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 配置类型转换器工厂 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>converterService<span class="token punctuation">"</span></span><span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.context.support.ConversionServiceFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 给工厂注入一个新的类型转换器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>converters<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 配置自定义类型转换器 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.web.converter.StringToDateConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span> <span class="token attr-name">conversion-service</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>converterService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span></code></pre><h1 id="SpringMVC常用注解">6 SpringMVC常用注解</h1><h2 id="Controller">6.1 @Controller</h2><p>控制器负责处理由DispatcherServlet分发过来的请求，它把用户请求的数据经过业务处理层处理之后封装成一个Model，然后再把该Model返回给对应的View进行展示。SpringMVC使用@Controller定义控制器，它还允许自动检测定义在类路径下的组件并自动注册。</p><h2 id="RequestMapping">6.2 @RequestMapping</h2><p>将URL映射到整个类或特定的处理方法上。</p><h2 id="PathVariable">6.3 @PathVariable</h2><p>将注解方法参数绑定到URI模板遍历的值上。”/{userId}/deleteUser”</p><p>url 支持占位符是 spring3.0 之后加入的。是 springmvc 支持 rest 风格 URL 的一个重要标志。</p><p>实例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/usePathVariable/{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">usePathVariable</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="RequestParam">6.4 @RequestParam</h2><p>将请求的参数绑定到方法中的参数上。</p><p>属性：</p><ul><li>value：请求参数中的名称。</li><li>required：请求参数中是否必须提供此参数。默认值：true。表示必须提供，如果不提供将报错。</li></ul><h2 id="RequestBody">6.5 @RequestBody</h2><p>方法参数应该被绑定到HTTP的Body上。直接使用得到是 key=value&amp;key=value…结构的数据。<br>get 请求方式不适用。</p><p>属性：</p><ul><li>required：是否必须有请求体。默认值是:true。当取值为 true 时,get 请求方式会报错。如果取值为 false，get 请求得到是 null。</li></ul><h2 id="RequestHeader">6.6 @RequestHeader</h2><p>用于获取请求消息头。</p><p>属性：</p><ul><li>value：提供消息头名称</li><li>required：是否必须有此消息头</li></ul><h2 id="CookieValue">6.7 @CookieValue</h2><p>用于把指定 cookie 名称的值传入控制器方法参数。</p><p><strong>属性：</strong><br>value：指定 cookie 的名称。<br>required：是否必须有此 cookie。</p><h2 id="SessionAttribute">6.8 @SessionAttribute</h2><p>用于多次执行控制器方法间的参数共享。</p><p>用在方法参数上。</p><p>属性：</p><ul><li>value：用于指定存入的属性名称。</li></ul><h2 id="SessionAttributes">6.9 @SessionAttributes</h2><p>用于多次执行控制器方法间的参数共享。</p><p>用在类上。</p><p>属性：</p><ul><li>value：用于指定存入的属性名称</li><li>type：用于指定存入的数据类型。</li></ul><p>实例：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@SessionAttributes</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"age"</span><span class="token punctuation">,</span>types <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/addUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">ShowUser</span><span class="token punctuation">(</span>ModelMap map<span class="token punctuation">,</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> userAge<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"age:"</span><span class="token operator">+</span>userAge<span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"age"</span><span class="token punctuation">,</span>userAge<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"ShowUser"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>调用<code>map.put(&quot;age&quot;,userAge);</code>的时候就会同步存到session域中。</p><h2 id="RestController">6.10 @RestController</h2><p>创建REST类型的控制器（RESTFUL API）</p><h2 id="HttpEntity（不是注解）">6.11 HttpEntity（不是注解）</h2><p>能获得request请求和response响应，还能访问请求和请求头</p><h2 id="ModelAttribute">6.12 @ModelAttribute</h2><p>可以作用在方法或方法参数上。作用在方法上时，表明该方法的目的时添加一个或多个模型属性。</p><p><code>@ModelAttribute</code>一共具有如下三个作用：</p><ol><li><p>绑定请求参数到命令对象：放在功能处理方法的入参上时，用于将多个请求参数绑定到一个命令对象，从而简化绑定流程，而且自动暴露为模型数据用于视图页面展示时使用；</p></li><li><p>暴露表单引用对象为模型数据：放在处理器的一般方法（非功能处理方法）上时，是为表单准备要展示的表单引用对象，如注册时需要选择的所在城市等，而且在执行功能处理方法（@RequestMapping注解的方法）之前，自动添加到模型对象中，用于视图页面展示时使用；</p></li><li><p>暴露@RequestMapping方法返回值为模型数据：放在功能处理方法的返回值上时，是暴露功能处理方法的返回值为模型数据，用于视图页面展示时使用。</p></li></ol><h1 id="HiddentHttpMethodFilter">7 HiddentHttpMethodFilter</h1><h2 id="作用">7.1 作用</h2><p>由于浏览器 form 表单只支持 GET 与 POST 请求，而 DELETE、PUT 等 method 并不支持，Spring3.0 添加了一个过滤器，可以将浏览器请求改为指定的请求方式，发送给我们的控制器方法，使得支持 GET、POST、PUT与 DELETE 请求。</p><h2 id="使用方法">7.2 使用方法</h2><ol><li>在 web.xml 中配置该过滤器。</li><li>请求方式必须使用 post 请求。</li><li>按照要求提供_method 请求参数，该参数的取值就是我们需要的请求方式。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;1 概述&lt;/h1&gt;&lt;h2 id=&quot;SpringMVC的概念&quot;&gt;1.1 SpringMVC的概念&lt;/h2&gt;&lt;p&gt;SpringMVC 是一种基于 Java 的实现 MVC 设计模型的请求驱动类型的轻量级 Web 框架，属于 Spring FrameWork 的
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SpringMVC" scheme="https://www.codetool.top/tags/SpringMVC/"/>
    
  </entry>
  
  <entry>
    <title>leetcode11-盛最多水的容器</title>
    <link href="https://www.codetool.top/article/leetcode11-%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <id>https://www.codetool.top/article/leetcode11-盛最多水的容器/</id>
    <published>2020-02-26T17:17:55.000Z</published>
    <updated>2020-02-26T17:26:42.449Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定 n 个非负整数 a<sub>1</sub>，a<sub>2</sub>，…，a<sub>n</sub>，每个数代表坐标中的一个点 (i, a<sub>i</sub>) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, a<sub>i</sub>) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。</p><p><strong>说明：</strong> 你不能倾斜容器，且 n 的值至少为 2。</p><p><img src="https://api.codetool.top/img/1582737645282.jpg" alt><br>图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。</p><p><strong>示例:</strong></p><blockquote><p><strong>输入:</strong> [1,8,6,2,5,4,8,3,7]<br><strong>输出:</strong> 49</p></blockquote><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>两个线段之间形成的区域始终受较短长度的限制。 另外，两个线段之间的距离越大，获得的面积越大。</p><p>我们在数组中使用两个指针，一个在开头，一个在末尾。 每次移动将较短的线段向较长的线段移动一步。并在过程中记录出现的最大面积。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxArea</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> height<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> height<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">{</span>            max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定 n 个非负整数 a&lt;sub&gt;1&lt;/sub&gt;，a&lt;sub&gt;2&lt;/sub&gt;，…，a&lt;sub&gt;n&lt;/sub&gt;，每个数代表坐标中的一个点 (i, a&lt;sub&gt;i&lt;/sub&gt;) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="双指针技巧" scheme="https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>计网复习01计算机网络概述</title>
    <link href="https://www.codetool.top/article/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A001%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/"/>
    <id>https://www.codetool.top/article/计网复习01计算机网络概述/</id>
    <published>2020-02-26T13:06:34.000Z</published>
    <updated>2020-02-26T14:45:47.659Z</updated>
    
    <content type="html"><![CDATA[<p>偶然翻到了我上课期间做的思维导图，发出来水一水博客（今天太忙了）</p><p>本文参考资源：</p><p><a href="https://www.cnblogs.com/kubidemanong/p/9631875.html" target="_blank" rel="noopener">计算机网络系列–什么是电路交换和分组交换？ - 帅地 - 博客园</a></p><p><a href="https://blog.csdn.net/u012557765/article/details/81638446" target="_blank" rel="noopener">电路交换，报文交换，分组交换_网络_天马流欣-CSDN博客</a></p><p><a href="https://blog.csdn.net/woshixuye/article/details/53991782" target="_blank" rel="noopener">RTT（往返时间）和RPC_网络_IT徐胖子技术专栏-CSDN博客</a></p><p><a href="https://blog.csdn.net/HuoqilinHeiqiji/article/details/89703358" target="_blank" rel="noopener">计算机网络（一）图解：计算机网络五层体系结构_网络_腊八粥-CSDN博客</a></p><h1 id="信息时代的作用">1 信息时代的作用</h1><p><img src="https://api.codetool.top/img/1582723294230.png" alt></p><h1 id="互联网概述">2 互联网概述</h1><p><img src="https://api.codetool.top/img/15827233221686.png" alt></p><h1 id="互联网组成">3 互联网组成</h1><p><img src="https://api.codetool.top/img/15827233539058.png" alt></p><p>划重点：</p><h2 id="电路交换">3.1 电路交换</h2><p><img src="https://api.codetool.top/img/15827239816808.jpg" alt></p><p><strong>报文：</strong> 我们将位于应用层的信息分组称为报文，一般指完整的信息，传输层实现报文交付。</p><p><strong>电路交换：</strong> 电路交换要求必须首先在通信双方之间建立连接通道。在连接建立成功之后，双方的通信活动才能开始。通信时双方会一直霸占这条路径，因此，电路连接的方式资源的利用率是比较低的。</p><p>为了解决这种资源利用率低的问题，引出了存储转发技术：</p><p><strong>存储转发：</strong> 以太网交换机的控制器先将输入端口到来的数据包缓存起来，先检查数据包是否正确，并过滤掉冲突包错误。确定包正确后，取出目的地址，通过查找表找到想要发送的输出端口地址，然后将该包发送出去。</p><p>从而发展出了报文交换：</p><h2 id="报文交换">3.2 报文交换</h2><p><strong>报文交换：</strong> 整个报文先传输到相邻的结点，全部存储下来后查找转发表，转发到下一个结点。<br>这种方式并不常见，因为一个报文通常很大，某个路由必须收到一个完整的报文才能把报文转发出去，产生较大的传输时延，因此效率较低。</p><p><strong>分组：</strong> 分组是在网络中传输的二进制格式的单元，为了提供通信性能和可靠性，每个用户发送的数据会被分成多个更小的部分。在每个部分的前面加上一些必要的控制信息组成的首部，有时也会加上尾部，就构成了一个分组。它的起始和目的地是网络层。</p><p><strong>分组交换：</strong> 将报文划分为分组转发，时延更低。</p><p>存储转发会出现的问题：</p><ol><li>每个路由必须收到一个完整的报文/分组才能转发出去，产生传输时延</li><li>分组在进入路由器后要先在输入队列中等待处理。在路由器确定了转发接口后还需要在输出队列中等待转发，所以就产生了排队时延。</li><li>数据被划分之后为了转发加上了一些控制信息，增加了开销。</li></ol><h1 id="计算机网络类别">4 计算机网络类别</h1><p><img src="https://api.codetool.top/img/15827233719282.png" alt></p><h1 id="计算机网络性能">5 计算机网络性能</h1><p><img src="https://api.codetool.top/img/15827233923605.png" alt></p><p>划重点：</p><h2 id="速率">5.1 速率</h2><p>数据的传送速率，也称数据率或比特率，单位是bit/s。网络的速率往往指的是额定速率或标称速率（理想速率）。</p><h2 id="带宽">5.2 带宽</h2><p>在计算机网络中带宽用来表示网络中某通道传送数据的能力，网络带宽指在单位时间内网络中的某信道所能通过的“最高数据率”，单位也是bit/s。</p><p>参考<a href="https://www.zhihu.com/question/41191652" target="_blank" rel="noopener">如何理解计算机网络性能指标之速率与带宽的区别？ - 知乎</a></p><h2 id="吞吐量">5.3 吞吐量</h2><p>吞吐量指的就是某时刻的速率，单位也是bit/s</p><h2 id="时延">5.4 时延</h2><h3 id="发送时延">5.4.1 发送时延</h3><p>主机或者路由器发送数据帧所需要的时间，发送时延的计算公式为： </p><p>数据帧长度/发送速率</p><h3 id="传播时延">5.4.2 传播时延</h3><p>电磁波在信道中传播一定距离需要花费的时间，传播时延的计算公式为：</p><p>信道长度/电磁波在信道上的传播速率</p><h3 id="处理时延">5.4.3 处理时延</h3><p>主机或者路由器在接受到分组时候要话费一定的时间进行处理，例如分析分组的首部，从分组中提取数据部分，运行差错检验或者查找适当的路由等等。</p><p>这部分可以忽略不计。</p><h3 id="排队时延">5.4.4 排队时延</h3><p>分组在进入路由器后要先在输入队列中等待处理。在路由器确定了转发接口后还需要在输出队列中等待转发，所以就产生了排队时延。</p><p>这部分可以忽略不计。</p><h2 id="时延带宽积">5.5 时延带宽积</h2><p>表示一个链路可以容纳的最多比特，计算公式为：</p><p>传播时延 * 带宽</p><h2 id="往返时间RTT">5.6 往返时间RTT</h2><p>RTT(Round-Trip Time)往返时间在计算机网络中它是一个重要的性能指标。表示从发送端发送数据开始，到发送端收到来自接收端的确认（接收端收到数据后便立即发送确认，不包含数据传输时间）总共经历的时间。</p><p>它约等于传播时延*2</p><h1 id="体系结构">6 体系结构</h1><p><img src="https://api.codetool.top/img/15827234098242.png" alt></p><p>划重点：</p><h2 id="OSI七层模型">6.1 OSI七层模型</h2><ul><li><p>应用层： 应用程序间通信  传输单位APDU</p></li><li><p>表示层： 处理数据格式,加密   传输单位PPDU</p></li><li><p>会话层：建立,维护和管理会话   传输单位SPDU</p></li><li><p>传输层：建立端到端的链接 传输单位segment(段)</p></li><li><p>网络层：寻址和路由选择 传输单位packet</p></li><li><p>数据链路层：介质访问,链路管理 传输单位frame(帧)</p></li><li><p>物理层：物理层 比特流传输 传输单位BIT</p></li></ul><h2 id="TCP-IP四层模型">6.2 TCP/IP四层模型</h2><ul><li><p>应用层:相当于OSI上三层   常见协议:  FTP TELNET</p></li><li><p>传输层 TCP UDP</p></li><li><p>网络层 ICMP IP IGMP</p></li><li><p>链路层:相当于OSI下二层 ARP RARP</p></li></ul><h2 id="综合而来的五层模型">6.3 综合而来的五层模型</h2><p><img src="https://api.codetool.top/img/15827261833569.png" alt></p><p>对应的各层中间设备：</p><p><img src="https://api.codetool.top/img/15827263528760.jpg" alt></p><p>对应各层的传输数据单元：</p><table cellspacing="0">    <tbody>    <tr><td><span>　</span></td>            <td><span>典型设备</span></td>            <td><span>中间设备</span></td>            <td><span>数据单元</span></td>            <td><span>网络协议</span></td>        </tr><tr><td rowspan="2"><span>物理层</span></td>            <td><span>中继器、集线器</span></td>            <td rowspan="2"><span>中继器、集线器</span></td>            <td rowspan="2"><span>位（bit）</span></td>            <td rowspan="2"><span>无</span></td>        </tr><tr><td><span>使用了光纤、 同轴电缆、双绞线……</span></td>        </tr><tr><td><span>数据链路层</span></td>            <td><span>网卡、网桥、交换机</span></td>            <td><span>网桥、交换机</span></td>            <td><span>数据帧 （Frame）</span></td>            <td><span>ARQ、SW、CSMA/CD、PPP、HDLC、ATM&nbsp;</span></td>        </tr><tr><td><span>网络层</span></td>            <td><span>路由器、防火墙、多层交换机</span></td>            <td><span>路由器</span></td>            <td><span>数据包（Packet）</span></td>            <td><span>IP、ARP 、RARP 、ICMP&nbsp;、ICMPv6、IGMP、RIP 、OSPF 、BGP</span></td>        </tr><tr><td><span>传输层</span></td>            <td><span>进程和端口</span></td>            <td><span>四层路由器</span></td>            <td><span>TCP：报文段<br>UDP：数据报</span></td>            <td><span>TCP&nbsp;&nbsp;UDP</span></td>        </tr><tr><td><span>应用层</span></td>            <td><span>应用程序，如FTP，SMTP ，HTTP</span></td>            <td><span>网关</span></td>            <td><span>报文（message）</span></td>            <td><span>DHCP、DNS、FTP、HTTP、POP3、SMTP 、SSH 、TELNET</span></td>        </tr>    </tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;偶然翻到了我上课期间做的思维导图，发出来水一水博客（今天太忙了）&lt;/p&gt;
&lt;p&gt;本文参考资源：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/kubidemanong/p/9631875.html&quot; target=&quot;_blank&quot; rel=
      
    
    </summary>
    
    
      <category term="计算机相关" scheme="https://www.codetool.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="计算机网络" scheme="https://www.codetool.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>MySQL学习笔记之InnoDB引擎概述（上）</title>
    <link href="https://www.codetool.top/article/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8BInnoDB%E5%BC%95%E6%93%8E%E6%A6%82%E8%BF%B0%EF%BC%88%E4%B8%8A%EF%BC%89/"/>
    <id>https://www.codetool.top/article/MySQL学习笔记之InnoDB引擎概述（上）/</id>
    <published>2020-02-26T07:27:17.000Z</published>
    <updated>2020-02-26T07:41:28.809Z</updated>
    
    <content type="html"><![CDATA[<p>该笔记为《MySQL技术内幕:InnoDB存储引擎》的读书笔记，多图预警。</p><p><img src="https://api.codetool.top/img/158270212626.png" alt="MySQL体系结构"></p><h1 id="InnoDB引擎与MyISAM引擎介绍">1 InnoDB引擎与MyISAM引擎介绍</h1><h2 id="InnoDB">1.1 InnoDB</h2><p><img src="https://api.codetool.top/img/15827022478639.png" alt></p><ul><li>支持事务</li><li>行锁设计</li><li>支持外键</li><li>使用MVCC</li><li>面向OLTP</li></ul><h2 id="MyISAM">1.2 MyISAM</h2><p><img src="https://api.codetool.top/img/15827023196505.png" alt></p><h1 id="InnoDB引擎介绍">2 InnoDB引擎介绍</h1><h2 id="概述">2.1 概述</h2><p><img src="https://api.codetool.top/img/15827023602779.png" alt></p><h2 id="InnoDB体系架构">2.2 InnoDB体系架构</h2><p><img src="https://api.codetool.top/img/15827024007427.png" alt></p><h2 id="后台线程">2.3 后台线程</h2><p><img src="https://api.codetool.top/img/15827024565750.png" alt></p><p><img src="https://api.codetool.top/img/15827024727244.png" alt></p><p><code>innodb_purge_threads</code></p><h2 id="内存">2.4 内存</h2><p><img src="https://api.codetool.top/img/15827024924511.png" alt></p><p><code>innodb_buffer_pool_size</code></p><p><img src="https://api.codetool.top/img/15827025173436.png" alt></p><p><code>innodb_buffer_pool_instances</code></p><p><img src="https://api.codetool.top/img/15827025454622.png" alt></p><p><code>innodb_old_blocks_pct</code></p><p><code>innodb_old_blocks_time</code></p><p><img src="https://api.codetool.top/img/15827025648526.png" alt></p><p><code>innodb_log_buffer_size</code></p><h2 id="CheckPoint技术">2.5 CheckPoint技术</h2><p>CheckPoint技术即检查点技术，我在<a href="../数据库理论之事务与恢复技术/#toc-heading-18">数据库理论之事务与恢复技术</a>中有提及。不过当时对检查点相关的阐述是记录了提交的事务，然而InnoDB并不会立即写回磁盘，所以这里谈的是脏页的刷新。</p><p><img src="https://api.codetool.top/img/15827025937028.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;该笔记为《MySQL技术内幕:InnoDB存储引擎》的读书笔记，多图预警。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://api.codetool.top/img/158270212626.png&quot; alt=&quot;MySQL体系结构&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;InnoDB
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="数据库" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://www.codetool.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>leetcode7-整数反转</title>
    <link href="https://www.codetool.top/article/leetcode7-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/"/>
    <id>https://www.codetool.top/article/leetcode7-整数反转/</id>
    <published>2020-02-25T17:25:51.000Z</published>
    <updated>2020-02-25T17:32:03.665Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入：</strong> 123<br><strong>输出：</strong> 321  </p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入：</strong> -123<br><strong>输出：</strong> -321    </p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入：</strong> 120<br><strong>输出：</strong> 21</p></blockquote><p><strong>注意:</strong></p><p>假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231,  231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。</p><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>每次用<code>%10</code>取余就能获得原数字最后一位的数字，关键是怎么判断在运算过程中是否溢出。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isNeg <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">==</span> Integer<span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            isNeg <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            x <span class="token operator">=</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ans<span class="token operator">></span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            ans <span class="token operator">=</span> ans<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span> x<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">;</span>            x <span class="token operator">=</span> x<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isNeg<span class="token punctuation">)</span> ans <span class="token operator">=</span> <span class="token operator">-</span>ans<span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>然后有看到另一种很巧妙的判断溢出的方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ans <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">!=</span> ans<span class="token punctuation">)</span> <span class="token punctuation">{</span>                ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            ans <span class="token operator">=</span> ans <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>            x <span class="token operator">=</span> x <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例1:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt; 123&lt;br&gt;&lt;s
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Spring之AOP配置</title>
    <link href="https://www.codetool.top/article/Spring%E4%B9%8BAOP%E9%85%8D%E7%BD%AE/"/>
    <id>https://www.codetool.top/article/Spring之AOP配置/</id>
    <published>2020-02-25T15:39:22.000Z</published>
    <updated>2020-02-25T15:45:43.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是AOP">1 什么是AOP</h1><blockquote><p>在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期间动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p></blockquote><h1 id="动态代理">2 动态代理</h1><p>动态代理相关知识请移步<a href="../Java反射机制和动态代理详解">Java反射机制和动态代理详解</a></p><h2 id="不使用动态代理的项目">2.1 不使用动态代理的项目</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 账户的业务层实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountService</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> IAccountDao accountDao<span class="token punctuation">;</span>    <span class="token keyword">private</span> TransactionManager txManager<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTxManager</span><span class="token punctuation">(</span>TransactionManager txManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>txManager <span class="token operator">=</span> txManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAccountDao</span><span class="token punctuation">(</span>IAccountDao accountDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>accountDao <span class="token operator">=</span> accountDao<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Account<span class="token operator">></span> <span class="token function">findAllAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            txManager<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>Account<span class="token operator">></span> accounts <span class="token operator">=</span> accountDao<span class="token punctuation">.</span><span class="token function">findAllAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            txManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> accounts<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            txManager<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            txManager<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Account <span class="token function">findAccountById</span><span class="token punctuation">(</span>Integer accountId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            txManager<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Account account <span class="token operator">=</span> accountDao<span class="token punctuation">.</span><span class="token function">findAccountById</span><span class="token punctuation">(</span>accountId<span class="token punctuation">)</span><span class="token punctuation">;</span>            txManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> account<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            txManager<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            txManager<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span>Account account<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            txManager<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            accountDao<span class="token punctuation">.</span><span class="token function">saveAccount</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>            txManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            txManager<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            txManager<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateAccount</span><span class="token punctuation">(</span>Account account<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            txManager<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            accountDao<span class="token punctuation">.</span><span class="token function">updateAccount</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>            txManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            txManager<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            txManager<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteAccount</span><span class="token punctuation">(</span>Integer acccountId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            txManager<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            accountDao<span class="token punctuation">.</span><span class="token function">deleteAccount</span><span class="token punctuation">(</span>acccountId<span class="token punctuation">)</span><span class="token punctuation">;</span>            txManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            txManager<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            txManager<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>String sourceName<span class="token punctuation">,</span> String targetName<span class="token punctuation">,</span> Float money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            txManager<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//1.根据名称查询转出账户</span>            Account source <span class="token operator">=</span> accountDao<span class="token punctuation">.</span><span class="token function">findAccountByName</span><span class="token punctuation">(</span>sourceName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//2.根据名称查询转入账户</span>            Account target <span class="token operator">=</span> accountDao<span class="token punctuation">.</span><span class="token function">findAccountByName</span><span class="token punctuation">(</span>targetName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//3.转出减钱</span>            source<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//4.转入加钱</span>            target<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//5.更新转出账户</span>            accountDao<span class="token punctuation">.</span><span class="token function">updateAccount</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//6.更新转入账户</span>            accountDao<span class="token punctuation">.</span><span class="token function">updateAccount</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>            txManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            txManager<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            txManager<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="使用动态代理的项目">2.2 使用动态代理的项目</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> IAccountService accountService<span class="token punctuation">;</span>    <span class="token keyword">private</span> TransactionManager txManager<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTxManager</span><span class="token punctuation">(</span>TransactionManager txManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>txManager <span class="token operator">=</span> txManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setAccountService</span><span class="token punctuation">(</span>IAccountService accountService<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>accountService <span class="token operator">=</span> accountService<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取Service代理对象     * @return     */</span>    <span class="token keyword">public</span> IAccountService <span class="token function">getAccountService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>IAccountService<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>accountService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> accountService<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token annotation punctuation">@Override</span>                <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                    Object rtValue <span class="token operator">=</span> null<span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        txManager<span class="token punctuation">.</span><span class="token function">beginTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>accountService<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>                        txManager<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> rtValue<span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        txManager<span class="token punctuation">.</span><span class="token function">rollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>                        txManager<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 账户的业务层实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountService</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> IAccountDao accountDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAccountDao</span><span class="token punctuation">(</span>IAccountDao accountDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>accountDao <span class="token operator">=</span> accountDao<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Account<span class="token operator">></span> <span class="token function">findAllAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> accountDao<span class="token punctuation">.</span><span class="token function">findAllAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Account <span class="token function">findAccountById</span><span class="token punctuation">(</span>Integer accountId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> accountDao<span class="token punctuation">.</span><span class="token function">findAccountById</span><span class="token punctuation">(</span>accountId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span>Account account<span class="token punctuation">)</span> <span class="token punctuation">{</span>        accountDao<span class="token punctuation">.</span><span class="token function">saveAccount</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateAccount</span><span class="token punctuation">(</span>Account account<span class="token punctuation">)</span> <span class="token punctuation">{</span>        accountDao<span class="token punctuation">.</span><span class="token function">updateAccount</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteAccount</span><span class="token punctuation">(</span>Integer acccountId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        accountDao<span class="token punctuation">.</span><span class="token function">deleteAccount</span><span class="token punctuation">(</span>acccountId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>String sourceName<span class="token punctuation">,</span> String targetName<span class="token punctuation">,</span> Float money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.根据名称查询转出账户</span>        Account source <span class="token operator">=</span> accountDao<span class="token punctuation">.</span><span class="token function">findAccountByName</span><span class="token punctuation">(</span>sourceName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.根据名称查询转入账户</span>        Account target <span class="token operator">=</span> accountDao<span class="token punctuation">.</span><span class="token function">findAccountByName</span><span class="token punctuation">(</span>targetName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3.转出减钱</span>        source<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.转入加钱</span>        target<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.更新转出账户</span>        accountDao<span class="token punctuation">.</span><span class="token function">updateAccount</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//6.更新转入账户</span>        accountDao<span class="token punctuation">.</span><span class="token function">updateAccount</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="Spring中的AOP">3 Spring中的AOP</h1><h2 id="AOP相关术语">3.1 AOP相关术语</h2><p><strong>JoinPoint（连接点）：</strong></p><p>所谓连接点是指那些被拦截到的点。在 spring 中,这些点指的是方法,因为 spring 只支持方法类型的连接点。</p><p><strong>Pointcut(切入点):</strong></p><p>所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义。</p><p><strong>Advice(通知/增强):</strong><br>所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知。<br>通知的类型：前置通知,后置通知,异常通知,最终通知,环绕通知。</p><p><strong>Introduction(引介):</strong><br>引介是一种特殊的通知在不修改类代码的前提下, Introduction 可以在运行期为类动态地添加一些方法或 Field。</p><p><strong>Target(目标对象):</strong></p><p>代理的目标对象。</p><p><strong>Weaving(织入):</strong></p><p>是指把增强应用到目标对象来创建新的代理对象的过程。<br>spring 采用动态代理织入，而 AspectJ 采用编译期织入和类装载期织入。</p><p><strong>Proxy（代理）:</strong></p><p>一个类被 AOP 织入增强后，就产生一个结果代理类。</p><p><strong>Aspect(切面):</strong></p><p>是切入点和通知（引介）的结合。</p><h2 id="maven配置">3.2 maven配置</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="编写业务层类">3.3 编写业务层类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了保存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateAccount</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了更新"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行了删除"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="编写通知类">3.4 编写通知类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 用于打印日志，计划让其在切入点方法执行之前执行     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"logger类中的printLog方法开始记录 日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="基于XML的Spring配置">3.5 基于XML的Spring配置</h2><h3 id="配置文件">3.5.1 配置文件</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/aop        https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置Spring的IoC，把Service对象配置进来 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.rhett.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logger<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.rhett.utils.Logger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置切面 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspect</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logger<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 配置通知的类型，并且建立通知方法和切入点方法的关联 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>before</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>printLog<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(public void com.rhett.service.impl.AccountServiceImpl.saveAccount())<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>before</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspect</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>Spring 中基于XML的AOP配置步骤</p><ol><li>把通知类也交给Spring来管理（配置logger类）</li><li>使用<code>aop:config</code>标签表明开始AOP的配置</li><li>使用<code>aop:aspect</code>标签表明配置切面<ul><li><code>id</code>属性： 给切面提供一个唯一标识</li><li><code>ref</code>属性：指定通知类bean的id</li></ul></li><li>在<code>aop:aspect</code>标签的内部使用对应标签来配置通知的类型</li></ol><h3 id="通知的类型：">3.5.2 通知的类型：</h3><ul><li>前置通知：<code>aop:before</code><ul><li><code>method</code>属性：指定一个方法作为前置通知</li><li><code>pointcut</code>属性：切入点表达式，用于指定对业务层哪些方法增强</li><li><code>pointcut-ref</code>属性：指定<code>aop:pointcut</code>配置的切入点表达式</li></ul></li><li>后置通知: <code>aop:after-returning</code>，在切入点方法正常执行后执行</li><li>异常通知：<code>aop:after-throwing</code>，在切入点方法发生异常后执行</li><li>最终通知：<code>aop:after</code>，无论是否发生异常，总会最后执行。</li></ul><p>切入点表达式的写法：  </p><ul><li>关键字：<code>execution(表达式)</code></li><li>表达式：访问修饰符 返回值 包名.类名.方法名(参数列表)</li><li>全通配写法：<code>* *..*.*(..)</code><ul><li>访问修饰符可以省略</li><li>返回值可以使用通配符表示任意返回值</li><li>包名可以使用通配符表示任意包，但是有几级包，就需要写几个<code>*</code></li><li>包名可以使用<code>..</code>表示当前包及其子包</li><li>类名和方法名 都可以使用 <code>*</code> 通配</li><li>参数列表：<ul><li>可以直接写数据类型：<ul><li>基本类型直接写名称</li><li>引用类型写包名.类名的方式</li></ul></li><li>可以使用<code>*</code>表示任意类型</li><li>可以使用<code>..</code>表示有无参数均可</li></ul></li></ul></li><li>可以使用<code>aop:pointcut</code>来配置复用表达式，可以写在<code>aop:aspect</code>内部只在该切面生效，也可以写在<code>aop:aspect</code>外面对所有切面生效</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(public void com.rhett.service.impl.AccountServiceImpl.saveAccount())<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>after</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>afterPrintLog<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>after</span><span class="token punctuation">></span></span></code></pre><ul><li>环绕通知：</li></ul><p>环绕通知需要显式地调用切入点方法。</p><p>Spring框架为我们提供了一个接口，<code>ProceedingJoinPoint</code>，该接口有一个方法<code>proceed()</code>，此方法就相当于明确调用切入点方法。该接口可以作为环绕通知的方法参数，在程序执行时，spring框架会为我们提供该接口的实现类供我们使用。</p><p>编写通知方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Object <span class="token function">aroundPrintLog</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span><span class="token punctuation">{</span>    Object rtValue <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//前置通知...</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到方法执行所需的参数</span>        pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//后置通知...</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"logger类中的aroundPrintLog方法开始记录日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//异常通知...</span>        throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//最终通知...</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> rtValue<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>配置环绕通知：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(public void com.rhett.service.impl.AccountServiceImpl.saveAccount())<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>around</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aroundPrintLog<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h2 id="基于注解的Spring配置">3.6 基于注解的Spring配置</h2><p>开启AOP注解：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>aspectj-autoproxy</span><span class="token punctuation">></span></span></code></pre><p>或在配置类中配置：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@EnableAspectJAutoProxy</span></code></pre><p>通知类：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@Aspect</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//配置切入点表达式</span>    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">"execution(* com.rhett.service.impl.AccountServiceImpl.saveAccount())"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">pt1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 前置通知     */</span>    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">"pt1()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">beforePrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"logger类中的beforePrintLog方法开始记录日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 后置通知     */</span>    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span><span class="token string">"pt1()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterReturningLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"logger类中的afterReturningLog方法开始记录日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 异常通知     */</span>    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span><span class="token string">"pt1()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterThrowingPrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"logger类中的afterThrowingPrintLog方法开始记录日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 最终通知     */</span>    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">"pt1()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterPrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"logger类中的afterPrintLog方法开始记录日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">"pt1()"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Object <span class="token function">aroundPrintLog</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span><span class="token punctuation">{</span>        Object rtValue <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//前置通知...</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到方法执行所需的参数</span>            pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//后置通知...</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"logger类中的aroundPrintLog方法开始记录日志"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//异常通知...</span>            throwable<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//最终通知...</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> rtValue<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;什么是AOP&quot;&gt;1 什么是AOP&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期间动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://www.codetool.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>数据库理论之范式与反范式</title>
    <link href="https://www.codetool.top/article/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA%E4%B9%8B%E8%8C%83%E5%BC%8F%E4%B8%8E%E5%8F%8D%E8%8C%83%E5%BC%8F/"/>
    <id>https://www.codetool.top/article/数据库理论之范式与反范式/</id>
    <published>2020-02-25T08:53:41.000Z</published>
    <updated>2020-02-25T08:54:35.790Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数依赖">1 函数依赖</h1><h2 id="定义">1.1 定义</h2><p>A 和 B 是两个属性集，来自同一关系模式，对于同样的 A 属性值，B 属性值也相同。这种关系称为函数依赖。</p><p>记作A-&gt;B ，称为B函数依赖于A。</p><h2 id="部分函数依赖">1.2 部分函数依赖</h2><p>如果对于A的一个真子集A’存在<code>A&#39;-&gt;B</code>，称为B部分依赖于A。</p><h2 id="完全函数依赖">1.3 完全函数依赖</h2><p>如果对于A的任意一个真子集A’都不存在<code>A&#39;-&gt;B</code>，称为B完全依赖于A。</p><h2 id="平凡函数依赖">1.4 平凡函数依赖</h2><p>当B的属性集是A的子集时，且存在<code>A-&gt;B</code>，称这种关系为平凡函数依赖</p><h2 id="非平凡函数依赖">1.5 非平凡函数依赖</h2><p>当B的属性集不是A的子集时，且存在<code>A-&gt;B</code>，称这种关系为非平凡的函数依赖</p><h2 id="传递函数依赖">1.6 传递函数依赖</h2><p>在某关系中，若存在 如果 X-&gt;Y(非平凡函数依赖, 完全函数依赖) ，Y-&gt;Z，则称 Z 对 X 有传递函数依赖。</p><p><strong>注：</strong> X不包含Y，Y不确定X</p><h1 id="超键、主键、候选键">2 超键、主键、候选键</h1><ul><li><p>超键(super key): 在关系中能唯一标识元组的属性集称为关系模式的超键</p></li><li><p>候选键(candidate key): 不含有多余属性的超键称为候选键。也就是在候选键中，若再删除属性，就不是键了！</p></li><li><p>主键(primary key): 用户在候选键中任选一个作为关系的主键。</p></li><li><p>复合主键(compound primary key)：主键包含多个属性。</p></li></ul><p><strong>候选键中 X 决定所有属性的函数依赖是完全函数依赖</strong></p><p><strong>包含在任何一个候选键中的属性，称为主属性，不包含在候选键中的属性称为非主属性</strong></p><h1 id="范式">3 范式</h1><h2 id="1NF">3.1 1NF</h2><p>第一范式：不包含非原子项，即任一属性不可再分。</p><h2 id="2NF">3.2 2NF</h2><p>第二范式：在第一范式的基础上。每个非主属性完全依赖于主键，不存在复合主键。</p><h2 id="3NF">3.3 3NF</h2><p>第三范式：在第二范式的基础上。非主属性不能传递依赖于主键。</p><h2 id="BCNF">3.4 BCNF</h2><p>所有非主属性对每一个候选键都是完全函数依赖； 所有的主属性对每一个不包含它的候选键，也是完全函数依赖；没有任何属性完全函数依赖于非候选键的任何一组属性。</p><p>实例可以参考<a href="https://blog.csdn.net/jsj13263690918/article/details/79796275" target="_blank" rel="noopener">关系数据库的三大范式以及BCNF范式_数据库_jsj13263690918的博客-CSDN博客</a></p><h1 id="反范式">4 反范式</h1><p><strong>范式的出现是为了避免数据冗余，减少数据库的空间，减轻维护数据完整性的麻烦。</strong></p><p>然而它也存在一些缺点：</p><p>按照范式的规范设计出来的表，等级越高的范式设计出来的表越多。而表越多，查询时越会涉及到一些连接操作，影响查询的效率。</p><p>当我们的业务所涉及的表非常多，并且我们对表的操作要时间上要尽量的快，这时可以考虑使用“反范式”。例如合并表、复制属性等操作。</p><p><strong>反范式就是不遵从范式规则，允许数据库维护一些冗余数据，从而提高查询效率。</strong></p><h2 id="OLAP和OLTP中如何设计范式">4.1 OLAP和OLTP中如何设计范式</h2><p>OLAP 一般冗余比较多，以查询分析为主，这种一般都是采用反范式设计，以提高查询效率。更新一般是定时大批量数据插入。</p><p>OLTP 则是尽可能消除冗余，以提高变更的效率。因为这种应用无时无刻不在频繁变化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;函数依赖&quot;&gt;1 函数依赖&lt;/h1&gt;&lt;h2 id=&quot;定义&quot;&gt;1.1 定义&lt;/h2&gt;&lt;p&gt;A 和 B 是两个属性集，来自同一关系模式，对于同样的 A 属性值，B 属性值也相同。这种关系称为函数依赖。&lt;/p&gt;
&lt;p&gt;记作A-&amp;gt;B ，称为B函数依赖于A。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="数据库" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>leetcode540-有序数组中的单一元素</title>
    <link href="https://www.codetool.top/article/leetcode540-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%8D%95%E4%B8%80%E5%85%83%E7%B4%A0/"/>
    <id>https://www.codetool.top/article/leetcode540-有序数组中的单一元素/</id>
    <published>2020-02-24T17:21:09.000Z</published>
    <updated>2020-02-24T17:38:22.725Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入：</strong>  [1,1,2,3,3,4,4,8,8]<br><strong>输出：</strong>  2  </p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入：</strong>  [3,3,7,7,10,11,11]<br><strong>输出：</strong>  10  </p></blockquote><p><strong>注意:</strong>  您的方案应该在 O(log n)时间复杂度和 O(1)空间复杂度中运行。</p><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>最优解法：二分查找达到<code>O(log n)</code>时间复杂度。</p><p><img src="https://api.codetool.top/img/15825654487789.png" alt></p><p>保持数组个数为奇数（即永远只包含一个单一元素），每次取中间的元素，如果前面的元素与当前元素相等，又分两种情况：</p><ul><li>前面的元素个数为偶数个，则除去选中本身的这一对，前面的元素个数为奇数个，说明单一元素出现在该元素前面，可以把要查找的结束位置指向当前元素对之前，在图中下一步指向2。</li><li>前面的元素个数为奇数个，则除去选中本身的这一对，前面的元素个数为偶数个，说明单一元素出现在该元素后面，可以把要查找的开始位置指向当前元素对之后，在图中下一步指向10。</li></ul><p>如果当前元素和后面的元素相等情况也是类似的，可以逐一分析。</p><p>其他解法：暴力法，异或。</p><h2 id="代码">2.2 代码</h2><p>二分查找：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNonDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>start<span class="token operator">&lt;</span>end<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>start<span class="token operator">+</span>end<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>mid<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> end <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> start <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> start <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> end <span class="token operator">=</span> mid<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>暴力法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNonDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>异或：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">singleNonDuplicate</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> cur<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span>nums<span class="token punctuation">)</span> cur<span class="token operator">=</span>cur<span class="token operator">^</span>i<span class="token punctuation">;</span>        <span class="token keyword">return</span> cur<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例1:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入：&lt;/strong&gt;  
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="二分查找" scheme="https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
    
  </entry>
  
  <entry>
    <title>Spring之注解配置IoC</title>
    <link href="https://www.codetool.top/article/Spring%E4%B9%8B%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AEIoC/"/>
    <id>https://www.codetool.top/article/Spring之注解配置IoC/</id>
    <published>2020-02-24T14:14:43.000Z</published>
    <updated>2020-02-24T16:09:15.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="注解配置">1 注解配置</h1><h2 id="定义配置">1.1 定义配置</h2><ul><li><code>@Configuration</code>：指定当前类是一个配置类</li><li><code>@ComponentScan</code>：用于通过注解指定Spring在创建容器时要扫描的包<br><code>@ComponentScan(basePackages=&quot;&quot;)</code>或<code>@ComponentScan(value=&quot;&quot;)</code>指定包名</li><li><code>@Bean</code>：用于把当前方法的返回值作为bean对象存入Spring的IoC容器中<br><code>@Bean(name=&quot;&quot;)</code>指定bean的id，默认值是当前方法的名称。</li><li><code>@Import</code>：导入其他的配置类。<br><code>@Import(Class对象)</code>指定要导入的配置类（通常是被AnnotationConfigApplicationContext指定的主配置类关联其他的子配置类）</li></ul><p>通过注解配置则获取ApplicationContext的时候需要通过实现类<code>AnnotationConfigApplicationContext(Class对象)</code>获取。</p><p>Spring只会扫描配置类下的<code>@Bean</code></p><h2 id="用于创建对象">1.2 用于创建对象</h2><ul><li><code>@Component</code>:将当前的类对象存入spring容器中</li></ul><p>id可以通过<code>@Component(value = &quot;&quot;)</code>修改，如果不设置默认id是类名的首字母变小写。</p><p>在spring配置文件中配置扫描包范围：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 告知spring在创建容器时要扫描的包 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.rhett<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><ul><li><code>@Controller</code>：一般用于表现层</li><li><code>@Service</code>：一般用于业务层</li><li><code>@Repository</code>：一般用于持久层</li></ul><p>作用和属性和Component一样，只为区分三层的概念。</p><h2 id="用于注入数据">1.3 用于注入数据</h2><ul><li><code>@Autowired</code>：自动按照类型注入，只要容器中有唯一的一个bean对象类型和要注入的变量类型匹配，就可以注入成功。</li></ul><p>此时set方法不是必须的</p><p>如果容器中有多个类型可以匹配的bean对象，则会把要注入的变量的名称作为id查找是否有的对应的bean对象。</p><ul><li><code>@Qualifier</code>：再按照类中注入的基础之上再按照名称注入。它在给类成员注入时不能单独使用（需要配合<code>@Autowired</code>），但是在给方法参数注入时可以。</li></ul><p><code>@Qualifier(value=&quot;&quot;)</code>可以指定要装配的bean在容器中的id。</p><ul><li><p><code>@Primary</code>：可以指定当有多个类型可以匹配的bean对象优先注入的对象。</p></li><li><p><code>@Resource</code>：直接按照bean的id注入，可以单独使用。</p></li></ul><p><code>@Resource(name=&quot;&quot;)</code>指定id。</p><p>以上三个注入都只能注入其他bean类型的数据，而基本类型和String类型无法使用上述注解实现。</p><p>集合类型的注入只能通过XML实现。</p><ul><li><p><code>@Value()</code>：用于注入基本类型和String类型。value可以使用Spring的SpEL表达式：<code>${表达式}</code></p></li><li><p><code>@PropertySource</code>：用于指定properties文件的位置<br><code>@PropertySource(value=&quot;&quot;)</code>指定文件名称和路径，通过前缀<code>classpath:</code>指定类路径下的。</p></li></ul><h2 id="用于改变作用范围">1.4 用于改变作用范围</h2><ul><li><code>@Scope</code>：和bean标签中的scope属性的作用是一样的。</li></ul><p><code>@Scope(value=&quot;&quot;)</code>指定bean的作用范围。</p><h2 id="和生命周期相关">1.5 和生命周期相关</h2><ul><li><p><code>@PreDestroy</code>：指定销毁前调用的方法</p></li><li><p><code>@PostConstruct</code>：指定构造后调用的方法</p></li></ul><p>这两个注解都是写在方法上。</p><h1 id="基于xml配置的Spring-IoC实例">2 基于xml配置的Spring IoC实例</h1><h2 id="实体类">2.1 实体类</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 账户的实体类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Float money<span class="token punctuation">;</span>    <span class="token keyword">public</span> Integer <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Float <span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> money<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMoney</span><span class="token punctuation">(</span>Float money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>money <span class="token operator">=</span> money<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Account{"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", money="</span> <span class="token operator">+</span> money <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="持久层">2.2 持久层</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 账户的持久层接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAccountDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 查询所有     * @return     */</span>    List<span class="token operator">&lt;</span>Account<span class="token operator">></span> <span class="token function">findAllAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 查询一个     * @return     */</span>    Account <span class="token function">findAccountById</span><span class="token punctuation">(</span>Integer accountId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 保存     * @param account     */</span>    <span class="token keyword">void</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span>Account account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 更新     * @param account     */</span>    <span class="token keyword">void</span> <span class="token function">updateAccount</span><span class="token punctuation">(</span>Account account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 删除     * @param accountId     */</span>    <span class="token keyword">void</span> <span class="token function">deleteAccount</span><span class="token punctuation">(</span>Integer accountId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 账户的持久层实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountDao</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> QueryRunner runner<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRunner</span><span class="token punctuation">(</span>QueryRunner runner<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>runner <span class="token operator">=</span> runner<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Account<span class="token operator">></span> <span class="token function">findAllAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> runner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"select * from account"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">BeanListHandler</span><span class="token operator">&lt;</span>Account<span class="token operator">></span><span class="token punctuation">(</span>Account<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Account <span class="token function">findAccountById</span><span class="token punctuation">(</span>Integer accountId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> runner<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"select * from account where id = ?"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">BeanHandler</span><span class="token operator">&lt;</span>Account<span class="token operator">></span><span class="token punctuation">(</span>Account<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>accountId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span>Account account<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            runner<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"insert into account(name,money) values(?,?)"</span><span class="token punctuation">,</span>account<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>account<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateAccount</span><span class="token punctuation">(</span>Account account<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            runner<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"update account set name=?,money=? where id=?"</span><span class="token punctuation">,</span>account<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>account<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>account<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteAccount</span><span class="token punctuation">(</span>Integer accountId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            runner<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token string">"delete from account where id=?"</span><span class="token punctuation">,</span>accountId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="业务层">2.3 业务层</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 账户的业务层接口 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IAccountService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 查询所有     * @return     */</span>    List<span class="token operator">&lt;</span>Account<span class="token operator">></span> <span class="token function">findAllAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 查询一个     * @return     */</span>    Account <span class="token function">findAccountById</span><span class="token punctuation">(</span>Integer accountId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 保存     * @param account     */</span>    <span class="token keyword">void</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span>Account account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 更新     * @param account     */</span>    <span class="token keyword">void</span> <span class="token function">updateAccount</span><span class="token punctuation">(</span>Account account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 删除     * @param accountId     */</span>    <span class="token keyword">void</span> <span class="token function">deleteAccount</span><span class="token punctuation">(</span>Integer accountId<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> IAccountDao accountDao<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAccountDao</span><span class="token punctuation">(</span>IAccountDao accountDao<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>accountDao <span class="token operator">=</span> accountDao<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Account<span class="token operator">></span> <span class="token function">findAllAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> accountDao<span class="token punctuation">.</span><span class="token function">findAllAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Account <span class="token function">findAccountById</span><span class="token punctuation">(</span>Integer accountId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> accountDao<span class="token punctuation">.</span><span class="token function">findAccountById</span><span class="token punctuation">(</span>accountId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span>Account account<span class="token punctuation">)</span> <span class="token punctuation">{</span>        accountDao<span class="token punctuation">.</span><span class="token function">saveAccount</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateAccount</span><span class="token punctuation">(</span>Account account<span class="token punctuation">)</span> <span class="token punctuation">{</span>        accountDao<span class="token punctuation">.</span><span class="token function">updateAccount</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteAccount</span><span class="token punctuation">(</span>Integer accountId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        accountDao<span class="token punctuation">.</span><span class="token function">deleteAccount</span><span class="token punctuation">(</span>accountId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="Spring配置">2.4 Spring配置</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 业务层对象 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.rhett.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--注入Dao--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置Dao对象 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.rhett.dao.impl.AccountDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>runner<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>runner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>runner<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.apache.commons.dbutils.QueryRunner<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 注入数据源 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ds<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置数据源 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 连接数据库的必备信息--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.cj.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://192.168.91.1:3306/learnSpring<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h2 id="测试类">2.5 测试类</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 使用Junit单元测试，测试我们的配置 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceTest</span> <span class="token punctuation">{</span>    ApplicationContext ac<span class="token punctuation">;</span>    IAccountService as<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.获取容器</span>        ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.得到业务层对象</span>        as <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">,</span>IAccountService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//3.执行方法</span>        List<span class="token operator">&lt;</span>Account<span class="token operator">></span> accounts <span class="token operator">=</span> as<span class="token punctuation">.</span><span class="token function">findAllAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Account account<span class="token operator">:</span>accounts<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testFindOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//3.执行方法</span>        Account account <span class="token operator">=</span> as<span class="token punctuation">.</span><span class="token function">findAccountById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSave</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Account account <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        account<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        account<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token number">12345f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        as<span class="token punctuation">.</span><span class="token function">saveAccount</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Account account <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        account<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span><span class="token number">23456f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        account<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        as<span class="token punctuation">.</span><span class="token function">updateAccount</span><span class="token punctuation">(</span>account<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testDelete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        as<span class="token punctuation">.</span><span class="token function">deleteAccount</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="基于注解配置的Spring-IoC实例">3 基于注解配置的Spring IoC实例</h1><p>实体类不变。</p><h2 id="持久层-1">3.1 持久层</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 账户的持久层实现类 */</span><span class="token annotation punctuation">@Repository</span><span class="token punctuation">(</span><span class="token string">"accountDao"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountDao</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> QueryRunner runner<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//不变...</span><span class="token punctuation">}</span></code></pre><p>加入<code>@Repository</code>和<code>@Autowired</code></p><h2 id="业务层-1">3.2 业务层</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> IAccountDao accountDao<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//不变...</span><span class="token punctuation">}</span></code></pre><p>加入<code>@Service</code>和<code>@Autowired</code>。</p><h2 id="编写配置类">3.3 编写配置类</h2><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 该类是一个配置类，它的作用和bean.xml是一样的 */</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"com.rhett"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">"classpath:jdbcConfig.properties"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.driver}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String driver<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.url}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String url<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.username}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"${jdbc.password}"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 用于创建一个QueryRunner对象     * @param dataSource     * @return     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"runner"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"prototype"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> QueryRunner <span class="token function">createQueryRunner</span><span class="token punctuation">(</span>DataSource dataSource<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">QueryRunner</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DataSource <span class="token function">createDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            ComboPooledDataSource ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ComboPooledDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ds<span class="token punctuation">.</span><span class="token function">setDriverClass</span><span class="token punctuation">(</span>driver<span class="token punctuation">)</span><span class="token punctuation">;</span>            ds<span class="token punctuation">.</span><span class="token function">setJdbcUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>            ds<span class="token punctuation">.</span><span class="token function">setUser</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>            ds<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ds<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PropertyVetoException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>properties文件：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driver</span> <span class="token punctuation">=</span> <span class="token attr-value">com.mysql.cj.jdbc.Driver</span><span class="token attr-name">jdbc.url</span> <span class="token punctuation">=</span> <span class="token attr-value">jdbc:mysql://192.168.91.1:3306/learnSpring</span><span class="token attr-name">jdbc.username</span> <span class="token punctuation">=</span> <span class="token attr-value">root</span><span class="token attr-name">jdbc.password</span> <span class="token punctuation">=</span> <span class="token attr-value">123456</span></code></pre><h2 id="测试类-1">3.4 测试类</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceTest</span> <span class="token punctuation">{</span>    ApplicationContext ac<span class="token punctuation">;</span>    IAccountService as<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Before</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.获取容器</span>        ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>SpringConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.得到业务层对象</span>        as <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">,</span>IAccountService<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//不变...</span><span class="token punctuation">}</span></code></pre><h1 id="Spring整合JUnit测试">4 Spring整合JUnit测试</h1><p>导入maven依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>使用JUnit提供的一个注解把原有的main方法替换称Spring提供的，它在运行时会自动创建Spring容器：</p><p><code>@RunWith(SpringJUnit4ClassRunner.class)</code></p><p>告知Spring的运行器，Spring的IoC创建是基于xml还是注解的，并且说明位置：</p><ul><li><code>@ContextConfiguration(locations={})</code>：指定xml文件的位置</li><li><code>@ContextConfiguration(classes={})</code>：指定配置类所在的位置</li></ul><p>修改之后的测试类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 使用Junit单元测试，测试我们的配置 */</span><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> SpringConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    IAccountService as<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//不变...</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;注解配置&quot;&gt;1 注解配置&lt;/h1&gt;&lt;h2 id=&quot;定义配置&quot;&gt;1.1 定义配置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;@Configuration&lt;/code&gt;：指定当前类是一个配置类&lt;/li&gt;
&lt;li&gt;&lt;code&gt;@ComponentScan&lt;/code&gt;：用于
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://www.codetool.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>数据库理论之并发控制</title>
    <link href="https://www.codetool.top/article/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA%E4%B9%8B%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/"/>
    <id>https://www.codetool.top/article/数据库理论之并发控制/</id>
    <published>2020-02-24T12:55:06.000Z</published>
    <updated>2020-02-24T16:15:05.364Z</updated>
    
    <content type="html"><![CDATA[<h1 id="并发控制概述">1 并发控制概述</h1><p>多用户数据库：允许多个用户同时使用的数据库（订票系统）</p><p><strong>不同的多事务执行方式：</strong></p><ol><li>串行执行：每个时刻只有一个事务运行，其他事务必须等到这个事务结束后方能运行。</li><li>交叉并发方式：单处理机系统中，事务的并发执行实际上是这些并行事务的并行操作轮流交叉运行（不是真正的并发，但是提高了系统效率）</li><li>同时并发方式：多处理机系统中，每个处理机可以运行一个事务，多个处理机可以同时运行多个事务，实现多个事务真正的并行运行</li></ol><p><strong>并发执行带来的问题：</strong></p><ul><li>多个事务同时存取同一数据（共享资源）</li><li>存取不正确的数据，破坏事务一致性和数据库一致性</li></ul><p><strong>并发操作带来的数据不一致性包括</strong></p><ol><li>丢失修改（lost update）</li><li>不可重复读（non-repeatable read）</li><li>读脏数据（dirty read）</li></ol><p><strong>并发控制机制的任务：</strong></p><ol><li>对并发操作进行正确的调度</li><li>保证事务的隔离性</li><li>保证数据库的一致性</li></ol><p><strong>并发控制的主要技术：</strong></p><ol><li>封锁（locking）（主要使用的）</li><li>时间戳（timestamp）</li><li>乐观控制法（optimistic scheduler）</li><li>多版本并发控制（multi-version concurrency control ，MVCC）</li></ol><h1 id="封锁">2 封锁</h1><p>封锁：封锁就是事务 T 在对某个数据对象（例如表、记录等）操作之前，先向系统发出请求，对其加锁。加锁后事务 T 就对该数据对象有了一定的控制，在事务 T 释放它的锁之前，其它的事务不能更新此数据对象</p><p>确切的控制由封锁的类型决定，基本的封锁类型有两种：排它锁（X 锁，exclusive locks）、共享锁（S 锁，share locks）</p><p>排它锁又称写锁，对 A 加了排它锁之后，其他事务不能对 A 加 任何类型的锁（排斥读和写）</p><p>共享锁又称读锁，对 A 加了共享锁之后，其他事务只能对 A 加 S 锁，不能加 X 锁（只排斥写）</p><h2 id="封锁协议">2.1 封锁协议</h2><p>在运用 X 锁和 S 锁对数据对象加锁时，需要约定一些规则：封锁协议（Locking Protocol）</p><ul><li>何时申请 X 锁或 S 锁</li><li>持锁时间、何时释放</li></ul><p>对封锁方式制定不同的规则，就形成了各种不同的封锁协议。</p><p>常用的封锁协议：三级封锁协议</p><p>三级封锁协议在不同程度上解决了并发问题，为并发操作的正确调度提供一定的保证。</p><h3 id="一级封锁协议">2.1.1 一级封锁协议</h3><p><strong>事务 T 在修改数据 R 之前，必须先对其加 X 锁，直到事务结束（commit/rollback）才释放。</strong></p><p>一级封锁协议可以防止丢失修改。</p><p><strong>如果是读数据，不需要加锁，所以它不能保证可重复读和不读“脏”数据。</strong></p><p><img src="https://api.codetool.top/img/15825236965916.png" alt></p><p><img src="https://api.codetool.top/img/15825294522854.png" alt></p><h3 id="二级封锁协议">2.1.2 二级封锁协议</h3><p><strong>在一级封锁协议的基础（写要加 X 锁，事务结束释放）上，增加事务 T 在读入数据 R 之前必须先对其加 S 锁，读完后即可释放 S 锁。（读要加 S 锁，读完即释放）</strong></p><p>二级封锁协议除了可以防止丢失修改，还可以防止读脏数据</p><p>由于读完数据即释放 S 锁， 不能保证不可重复读</p><p><img src="https://api.codetool.top/img/15825297612341.png" alt></p><h3 id="三级封锁协议">2.1.3 三级封锁协议</h3><p>在一级封锁协议基础上增加事务 T 在读取数据 R 之前必须先对其加 S 锁，<strong>直到事务结束后释放。</strong></p><p>三级封锁协议除了可以防止丢失修改和读脏数据外，还防止了不可重复读。</p><p><img src="https://api.codetool.top/img/15825301047305.png" alt></p><h1 id="饥饿和死锁">3 饥饿和死锁</h1><h2 id="饥饿">3.1 饥饿</h2><p>事务 T1 封锁了数据 R，事务 T2 又请求封锁 R，于是 T2 等待。T3 也请求封锁 R，当<br>T1 释放了 R 上的封锁之后，系统首先批准了 T3 的请求，T2 仍然等待。 T4 又请求封锁 R，<br>当 T3 释放了 R 上的封锁之后系统又批准了 T4 的请求……T2 有可能永远等待，这就是饥饿<br>的情形</p><p><img src="https://api.codetool.top/img/15825318081699.png" alt></p><p><strong>避免饥饿的方法：先来先服务</strong></p><p>当多个事务请求封锁同一数据对象时，按请求封锁的先后次序对这些事务排队。<br>该数据对象上的锁一旦释放，首先批准申请队列中第一个事务获得锁。</p><h2 id="死锁">3.2 死锁</h2><p>死锁：事务 T1 封锁了数据 R1，T2 封锁了数据 R2。T1 又请求封锁 R2，因 T2 已封锁了 R2， 于是 T1 等待 T2 释放 R2 上的锁。接着 T2 又申请封锁 R1 ，因 T1 已封锁了 R1 ，T2 也只能等待 T1 释放 R1 上的锁。这样 T1 在等待 T2，而 T2 又在等待 T1 ，T1 和 T2 两个事务永远不能结束，形成死锁。</p><p><strong>解决死锁的方法：</strong> 预防、诊断和解除</p><h3 id="死锁的预防">3.2.1 死锁的预防</h3><p>产生死锁的原因是两个或多个事务都已经封锁了一些数据对象，然后又都请求对已被其他事务封锁的数据对象加锁，从而出现死等待。</p><p><strong>预防死锁发生就是破坏产生死锁的条件</strong></p><p><strong>方法</strong></p><ol><li>一次封锁法：</li></ol><p>要求每个事务必须一次将所有要使用的数据全部加锁，否则就不能继续执行。</p><p><strong>存在的问题：</strong>降低系统的并发度；难以实现精确确定封锁对象</p><ol start="2"><li>顺序封锁法：</li></ol><p>预先对数据对象规定一个封锁顺序，所有事务都按这个顺序实施封锁。</p><p><strong>存在的问题：</strong>   </p><ul><li>维护成本：数据库系统中的封锁对象极多，并且在不断地变化  </li><li>难以实现：很难实现确定每一个事务要封锁哪些对象</li></ul><p>DBMS普通采用采用的诊断并解除死锁的方法</p><h3 id="死锁的诊断和解除">3.2.2 死锁的诊断和解除</h3><p><strong>方法：</strong>超时法和事务等待图法</p><p><strong>超时法：</strong>如果一个事务的等待时间超过了规定的时限，就认为发生了死锁。优点是实现简单，缺点是会误判。</p><p><strong>事务等待图法：</strong>用事务等待图动态反映所有事务的等待情况。</p><p>事务等待图是一个有向图 <code>G=(T,U)</code>，T 为结点的集合，每个结点表示正运行的事务，U为边的集合，每条边表示事务等待的情况。若 T1 等待 T2 ，则 T1 、T2 之间划一条有向边，从 T1 指向 T2。</p><p>如果图中形成了环说明发生了死锁。</p><p><strong>解除死锁：</strong>并发控制子系统选择一个处理死锁代价最小的事务，将其撤销。释放该事务持有的所有的锁，使其他事务能够继续运行下去。</p><h1 id="并发调度的可串行性">4 并发调度的可串行性</h1><h2 id="可串行化调度">4.1 可串行化调度</h2><p><strong>执行结果等价于串行调度的调度就是正确的，这样的调度称为可串行化调度。</strong></p><p>可串行性是并发事务正确调度的准则。按这个准则规定，一个给定的并发调度，当且仅当它是可串行化的，才认为是正确调度。</p><p><strong>例：</strong>现在有两个事务，分别包含下列操作：</p><ul><li>事务T1：读B；A=B+1；写回A</li><li>事务T2：读A；B=A+1；写回B</li></ul><p><img src="https://api.codetool.top/img/15825390287716.png" alt="串行调度"></p><p><img src="https://api.codetool.top/img/15825395076807.png" alt="可串行化调度"></p><h2 id="冲突可串行化调度">4.2 冲突可串行化调度</h2><p><strong>冲突操作：</strong>不同的事务对同一个数据的读写和写写操作。</p><p><strong>判断可串行化调度的充分条件:</strong></p><p>不同事务的冲突操作和同一事务的两个操作是不能交换的。</p><p>我们用R<sub>i</sub>(x)表示事务Ti读x，W<sub>i</sub>(x)表示事务Ti写x。则R<sub>i</sub>(x)和 W<sub>j</sub>(x)不可交换，W<sub>i</sub>(x)和W<sub>j</sub>(x)不可交换</p><p><strong>冲突可串行化调度：</strong><br>一个调度 <code>Sc</code> 在保证冲突操作的次序不变的情况下，通过交换两个事务不冲突操作的次序得到另一个调度 <code>Sc’</code> ，如果 <code>Sc’</code> 是串行的，称调度 <code>Sc</code> 为冲突可串行化的调度。</p><p><img src="https://api.codetool.top/img/15825408805403.png" alt></p><p>若一个调度是冲突可串行化，则一定是可串行化的。冲突可串行化调度是可串行化调度的充分条件而非必要条件，同样存在不满足冲突可串行化调度的可串行化调度。</p><h1 id="两段锁协议">5 两段锁协议</h1><p>DBMS 的并发控制机制必须提供一定的手段来保证调度是可串行化的。目前 DBMS 普遍采用两段锁协议（TwoPhase Locking，简称 2PL）的方法来显示并发调度的可串行性。</p><p>两段锁协议是指所有<strong>事务必须分两个阶段对数据对象进行加锁和解锁：</strong></p><ol><li>在对任何数据进行读写操作以前，首先要申请并获得对该数据的锁 。</li><li>在释放一个锁之后，事务不再申请和获得其他任何的锁。</li></ol><p>“两段” 锁的含义：事务分为两个阶段:</p><p><strong>第一阶段是获得封锁，也称为扩展阶段</strong><br>事务可以申请获得任何数据对象上的任何类型的锁，但是不能释放任何锁 </p><p><strong>第二阶段是释放封锁，也称为收缩阶段</strong><br>事务可以释放任何数据对象上的任何类型的锁，但是不能再申请任何锁</p><p><img src="https://api.codetool.top/img/15825411925304.png" alt></p><p><strong>事务遵守两段锁协议是可串行化调度的充分条件，而不是必要条件。</strong><br>若并发事务都遵守两段锁协议，则对这些事务的任何并发调度策略都是可串行化的<br>若并发事务的一个调度是可串行化的，不一定所有事务都符合两段锁协议  </p><p><strong>两段锁协议与防止死锁的一次封锁法:</strong></p><p>一次封锁法要求每个事务必须一次将所有要使用的数据全部加锁，否则就不能继续执行，因此一次封锁法遵守两段锁协议</p><p>但是两段锁协议并不要求事务必须一次将所有要使用的数据全部加锁，因此遵守两段锁协议的事务可能发生死锁</p><h1 id="封锁的粒度">6 封锁的粒度</h1><p><strong>封锁对象的大小称为封锁粒度（granularity）。</strong></p><p>封锁的对象可以是逻辑单元（属性值、属性值集合、元组、关系、索引项、数据库），也可以是物理单元（页、物理记录）</p><p><strong>选择封锁粒度原则：</strong></p><p>封锁粒度和系统的并发度和并发控制的开销密切相关</p><ul><li>封锁的粒度越大，数据库所能够封锁的数据单元就越少，并发度就越低，系统开销也越小；</li><li>封锁的粒度越小，并发度较高，但系统开销也就越大。</li></ul><p><img src="https://api.codetool.top/img/15825478053271.png" alt></p><h2 id="多粒度封锁">6.1 多粒度封锁</h2><p>如果在一个系统中同时支持多种封锁粒度供不同的事务选择，这种封锁方法称为多粒度封锁。（multiple granularity locking）</p><p>选择封锁粒度应该同时考虑封锁开销和并发度两个因素，适当选择封锁粒度以求得最优的效果。</p><ul><li>需要处理多个关系的大量元组的用户事务：以数据库为封锁单位</li><li>需要处理大量元组的用户事务：以关系为封锁单元</li><li>只处理少量元组的用户事务：以元组为封锁单位</li></ul><p><strong>多粒度树：</strong></p><p>以树形结构来表示多级封锁粒度。根结点是整个数据库，表示最大的数据粒度，叶结点表示最小的数据粒度</p><p><img src="https://api.codetool.top/img/15825479887217.png" alt></p><p><strong>多粒度封锁协议：</strong>允许多粒度树中的每个节点被独立地加锁，对一个节点加锁意味着这个节点的所有子节点也被加以同样类型的锁。因此，在多粒度封锁中一个数据对象可能以显式封锁和隐式封锁两种方式封锁。</p><ul><li>显式封锁：直接加到数据对象上的封锁</li><li>隐式封锁：该数据对象没有独立加锁，是由于其上级结点加锁而使该数据对象加上了锁</li><li>显式封锁和隐式封锁的效果是一样的</li></ul><p><strong>系统检查封锁冲突时要检查显式封锁，还要检查隐式封锁</strong></p><p>例如事务 T 要对关系 R1 加 X 锁，系统必须搜索其上级结点数据库、关系 R1，还要搜索 R1 的下级结点，即 R1 中的每一个元组 。 如果其中某一个数据对象已经加了不相容锁，则 T 必须等待。</p><p>对某个数据对象加锁，<strong>系统要检查该数据对象上有无显式封锁与之冲突；再检查其所有上级节点</strong>，看本事务的显式封锁是否与该数据对象上的隐式封锁 （由于上级节点已加的封锁造成的）冲突 ；<strong>还要检查其所有下级节点</strong>，看它们的显式封锁是否与本事务的隐式封锁（将加到下级节点的封锁）冲突 。</p><p>这种检查方法效率较低，引入一种新的锁：<strong>意向锁</strong>。有了 意向锁，DBMS 就无须逐个检查下一级节点的显式封锁。</p><h2 id="意向锁">6.2 意向锁</h2><p>意向锁：<strong>如果对一个节点加意向锁，则可说明该节点的下层节点正在被加锁；对任一节点加锁时，必须先对它的上层节点加意向锁。</strong></p><p>例如，<strong>对任一元组加锁时，必须先对它所在的数据库和关系加意向锁。</strong></p><p>三种常用的意向锁：<strong>意向共享锁（Intent Share Lock，IS 锁）；意向排它锁（Intent Exclusive Lock，IX 锁）；共享意向排它锁（Share Intent Exclusive Lock ，SIX 锁）。</strong></p><h3 id="IS-锁">6.2.1 IS 锁</h3><p><strong>如果对一个数据对象加 IS 锁，表示它加的子节点拟加 S 锁。</strong></p><p><strong>例如：</strong>事务 T1 要对 R1 中某个元组加 S 锁，则要首先对关系 R1 和数据库加 IS 锁。</p><h3 id="IX-锁">6.2.2 IX 锁</h3><p><strong>如果对一个数据对象加 IX 锁，表示它的子节点拟加 X 锁。</strong></p><p><strong>例如：</strong>事务 T1 要对 R1 中某个元组加 X 锁，则要首先对关系 R1 和数据库加 IX 锁。</p><h3 id="SIX-锁">6.2.3 SIX 锁</h3><p><strong>如果对一个数据对象加 SIX 锁，表示对它加 S 锁，再加 IX 锁，即 SIX = S + IX。</strong></p><p><strong>例如：</strong>对某个表加 SIX 锁，则表示该事务要读整个表（所以要对该表加 S 锁），同时会更新个别元组（所以要对该表加 IX 锁）。</p><p><strong>意向锁的强度：</strong>锁的强度是指它对其他锁的排斥程度。一个事务在申请封锁时以强锁代替弱锁是安全的，反之则不然。</p><p>具有意向锁的多粒度封锁方法：</p><ul><li>申请封锁时应该按自上而下的次序进行</li><li>释放封锁时则应该按自下而上的次序进行</li></ul><p>优点：</p><ol><li>提高了系统并发度。</li><li>减少了加锁和解锁的开销。</li></ol><h1 id="其他并发控制机制">7 其他并发控制机制</h1><p>并发控制的方法除了封锁技术外，还有<strong>时间戳方法、乐观控制法和多版本并发控制。</strong></p><ul><li>时间戳方法：给每一个事务盖上一个时标，即事务开始的时间。每个事务具有唯一的时间戳，并按照这个时间戳来解决事务的冲突操作。如果发生冲突操作，就回滚到具有较早时间戳的事务，以保证其他事务的正常执行，被回滚的事务被赋予新的时间戳被从头开始执行。</li><li>乐观控制法：乐观控制法认为事务执行时很少发生冲突，所以不对事务进行特殊的管制，而是让 它自由执行，事务提交前再进行正确性检查。如果检查后 发现该事务执行中出现过冲突并影响了可串行性，则拒绝提交并回滚该事务。又称为验证方法。</li><li>多版本控制： 指在数据库中通过维护数据对象的多个版本信息来实现高效并发的一种策略。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;并发控制概述&quot;&gt;1 并发控制概述&lt;/h1&gt;&lt;p&gt;多用户数据库：允许多个用户同时使用的数据库（订票系统）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;不同的多事务执行方式：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;串行执行：每个时刻只有一个事务运行，其他事务必须等到这个事务结
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="数据库" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>leetcode64-最小路径和</title>
    <link href="https://www.codetool.top/article/leetcode64-%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/"/>
    <id>https://www.codetool.top/article/leetcode64-最小路径和/</id>
    <published>2020-02-23T16:53:20.000Z</published>
    <updated>2020-02-23T16:59:02.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定一个包含非负整数的 <em>m x n</em> 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p><p><strong>说明：</strong> 每次只能向下或者向右移动一步。</p><p><strong>示例:</strong></p><blockquote><p><strong>输入：</strong><br>[<br>  [1,3,1],<br>  [1,5,1],<br>  [4,2,1]<br>]<br><strong>输出：</strong> 7<br><strong>解释：</strong> 因为路径 1→3→1→1→1 的总和最小。</p></blockquote><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>动态规划，用一个数组记录某一个位置最小路径和，从右下角开始，往上一层（斜线）的元素的最小路径和为下面元素的最小路径和与右边元素的最小路径和中的最小值加上当前位置的数字。</p><p>当然也可以使用递归+记忆的方法求解，62、63我都是用递归+记忆求解的，这里就不用了。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minPathSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> height <span class="token operator">=</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>height <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> width <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pathLength <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>height<span class="token punctuation">]</span><span class="token punctuation">[</span>width<span class="token punctuation">]</span><span class="token punctuation">;</span>        pathLength<span class="token punctuation">[</span>height<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>width<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> grid<span class="token punctuation">[</span>height<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>width<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>height<span class="token operator">+</span>width<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sum<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span> sum<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>sum <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> j <span class="token operator">=</span> sum<span class="token operator">-</span>i<span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span>height<span class="token operator">||</span>j<span class="token operator">>=</span>width<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> height<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> pathLength<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> pathLength<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>j <span class="token operator">==</span> width<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> pathLength<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> pathLength<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> pathLength<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>pathLength<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">,</span>pathLength<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pathLength<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定一个包含非负整数的 &lt;em&gt;m x n&lt;/em&gt; 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;说明：&lt;/strong&gt; 每次只能向下或者向右移动一步。&lt;/p&gt;
&lt;p&gt;&lt;st
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="https://www.codetool.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Spring概述和IoC配置</title>
    <link href="https://www.codetool.top/article/Spring%E6%A6%82%E8%BF%B0%E5%92%8CIoC%E9%85%8D%E7%BD%AE/"/>
    <id>https://www.codetool.top/article/Spring概述和IoC配置/</id>
    <published>2020-02-23T15:28:30.000Z</published>
    <updated>2020-02-24T16:04:25.529Z</updated>
    
    <content type="html"><![CDATA[<h1 id="spring概述">1 spring概述</h1><p>Spring 是轻量级的 JavaEE 的开源框架，具有 IOC/DI，AOP，MVC，TX，ORM 等功能。<br>优点是：</p><ul><li>DI （依赖注入）有效的降低了耦合度。</li><li>AOP（面向切面）提供了通用的任务的集中管理。</li><li>ORM（对象关系映射）简化了对数据库的访问。</li><li>低侵入式设计，代码污染极低。</li></ul><h1 id="spring的组成">2 spring的组成</h1><p><img src="https://api.codetool.top/img/15820269076682.png" alt="spring 4.2.x"></p><h1 id="IOC的概念和作用">3 IOC的概念和作用</h1><h2 id="什么是程序的耦合">3.1 什么是程序的耦合</h2><p>耦合性(Coupling)，也叫耦合度，是对模块间关联程度的度量。耦合的强弱取决于模块间接口的复杂性、调用模块的方式以及通过界面传送数据的多少。模块间的耦合度是指模块之间的依赖关系，包括控制关系、调用关系、数据传递关系。模块间联系越多，其耦合性越强，同时表明其独立性越差( 降低耦合性，可以提高其独立性)。耦合性存在于各个领域，而非软件设计中独有的，但是我们只讨论软件工程中的耦合。</p><p>在软件工程中，耦合指的就是就是<strong>对象之间的依赖性。</strong> 对象之间的耦合越高，维护成本越高。因此对象的设计应使类和构件之间的耦合最小。软件设计中通常用耦合度和内聚度作为衡量模块独立程度的标准。<strong>划分模块的一个准则就是高内聚低耦合。</strong></p><h2 id="耦合的分类">3.2 耦合的分类</h2><ol><li>内容耦合。当一个模块直接修改或操作另一个模块的数据时，或一个模块不通过正常入口而转入另一个模块时，这样的耦合被称为内容耦合。内容耦合是最高程度的耦合，应该避免使用之。</li><li>公共耦合。两个或两个以上的模块共同引用一个全局数据项，这种耦合被称为公共耦合。在具有大量公共耦合的结构中，确定究竟是哪个模块给全局变量赋了一个特定的值是十分困难的。</li><li>外部耦合。一组模块都访问同一全局简单变量而不是同一全局数据结构，而且不是通过参数表传递该全局变量的信息，则称之为外部耦合。</li><li>控制耦合。一个模块通过接口向另一个模块传递一个控制信号，接受信号的模块根据信号值而进行适当的动作，这种耦合被称为控制耦合。</li><li>标记耦合。若一个模块 A 通过接口向两个模块 B 和 C 传递一个公共参数，那么称模块 B 和 C 之间存在一个标记耦合。</li><li>数据耦合。模块之间通过参数来传递数据，那么被称为数据耦合。数据耦合是最低的一种耦合形式，系统中一般都存在这种类型的耦合，因为为了完成一些有意义的功能，往往需要将某些模块的输出数据作为另一些模块的输入数据。</li><li>非直接耦合。两个模块之间没有直接关系，它们之间的联系完全是通过主模块的控制和调用来实现的。</li></ol><h2 id="内聚与耦合">3.3 内聚与耦合</h2><p>内聚标志一个模块内各个元素彼此结合的紧密程度，它是信息隐蔽和局部化概念的自然扩展。内聚是从功能角度来度量模块内的联系，一个好的内聚模块应当恰好做一件事。它描述的是模块内的功能联系。耦合是软件结构中各模块之间相互连接的一种度量，耦合强弱取决于模块间接口的复杂程度、进入或访问一个模块的点以及通过接口的数据。 程序讲究的是低耦合，高内聚。就是同一个模块内的各个元素之间要高度紧密，但是各个模块之间的相互依存度却要不那么紧密。</p><p>内聚和耦合是密切相关的，同其他模块存在高耦合的模块意味着低内聚，而高内聚的模块意味着该模块同其他模块之间是低耦合。在进行软件设计时，应力争做到高内聚，低耦合。</p><h1 id="IOC">4 IOC</h1><blockquote><p><strong>控制反转</strong>（Inversion of Control，缩写为<strong>IoC</strong>），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做<strong>依赖注入</strong>（Dependency Injection，简称<strong>DI</strong>），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。</p></blockquote><h2 id="反射工厂">4.1 反射工厂</h2><p>这是一个简单了解IoC思想的小案例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Properties props<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用静态代码块为Properties赋值</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//实例化对象</span>            props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取properties的流对象</span>            InputStream in <span class="token operator">=</span> BeanFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"bean.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExceptionInInitializerError</span><span class="token punctuation">(</span><span class="token string">"初始化properties失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据bean的名称获取bean对象     * @param beanName     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span><span class="token punctuation">{</span>        Object bean <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            String beanPath <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>            bean <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>beanPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>问题：每次都会创建新对象，是多例的</p><p>单例反射工厂：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BeanFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Properties props<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> beans<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用静态代码块为Properties赋值</span>    <span class="token keyword">static</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//实例化对象</span>            props <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取properties的流对象</span>            InputStream in <span class="token operator">=</span> BeanFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"bean.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            props<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            beans <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//取出配置文件中所有的key</span>            Enumeration keys <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//遍历枚举</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>keys<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//取出每个key</span>                String key <span class="token operator">=</span> keys<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String beanPath <span class="token operator">=</span> props<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>                Object value <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>beanPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//把key和value存入容器中</span>                beans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ExceptionInInitializerError</span><span class="token punctuation">(</span><span class="token string">"初始化properties失败!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据bean的名称获取bean对象     * @param beanName     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Object <span class="token function">getBean</span><span class="token punctuation">(</span>String beanName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> beans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>而这种思想就是IOC的思想。</p><h2 id="Spring中的IOC">4.2 Spring中的IOC</h2><h3 id="spring的maven配置">4.2.1 spring的maven配置</h3><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p><img src="https://api.codetool.top/img/15824577966595.png" alt="spring-container 核心容器"></p><h3 id="spring的总配置">4.2.2 spring的总配置</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 把对象的创建交给spring来管理 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.rhett.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountDao<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.rhett.dao.impl.AccountDaoImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h3 id="程序中获取bean">4.2.3 程序中获取bean</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1. 获取核心容器对象</span>ApplicationContext ac <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"bean.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2. 根据id获取bean对象</span>IAccountService as <span class="token operator">=</span> <span class="token punctuation">(</span>IAccountService<span class="token punctuation">)</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>IAccountDao adao <span class="token operator">=</span> ac<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"accountDao"</span><span class="token punctuation">,</span> IAccountDao<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>ApplicationContext的三个常用实现类：</p><ul><li><code>ClassPathXmlApplicationContext</code>：它可以加载<b>类路径</b>下的配置文件</li><li><code>FileSystemXmlApplicationContext</code>：它可以加载磁盘任意路径下的配置文件（必须有访问权限）</li><li><code>AnnotationConfigApplicationContext</code>：它是用于读取注解创建容器的</li></ul><p><img src="https://api.codetool.top/img/15824591031082.png" alt></p><p>核心容器的两个接口<code>BeanFactory</code>和<code>ApplicationContext</code>的区别：</p><ol><li>BeanFactory 是不支持国际化功能的，因为 BeanFactory 没有扩展 Spring 中 MessageResource 接口。相反，由于 ApplicationContext 扩展了 MessageResource 接口，因而具有消息处理的能力。</li><li>ApplicationContext 的事件机制主要通过 ApplicationEvent 和 ApplicationListener 这两个接口来提供的，和 java swing 中的事件机制一样。即当 ApplicationContext 中发布一个事件的时，所有扩展了 ApplicationListener 的 Bean 都将会接受到这个事件，并进行相应的处理。</li><li>ApplicationContext 扩展了 ResourceLoader(资源加载器)接口，从而可以用来加载多个 Resource，而 BeanFactory 是没有扩展 ResourceLoader </li><li><strong>BeanFactroy 采用的是延迟加载形式来注入 Bean 的，即只有在使用到某个Bean 时，才对该 Bean 进行加载实例化</strong>，这样，我们就不能发现一些存在的 Spring 的配置问题。而 ApplicationContext 则相反，它是在容器启动<br>时，一次性创建了所有的 Bean。这样，在容器启动时，我们就可以发现 Spring中存在的配置错误。</li></ol><h3 id="创建bean的三种方式">4.2.4 创建bean的三种方式</h3><p><strong>第一种方式：</strong></p><p>使用默认构造函数创建。<br>在spring的配置文件中使用bean标签，如果此类中没有默认构造函数，则对象无法创建</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.rhett.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p><strong>第二种方式：</strong></p><p>使用某个类中的方法创建对象，并存入spring容器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InstanceFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> IAccountService <span class="token function">getAccountService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AccountServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>instanceFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.rhett.factory.InstanceFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>instanceFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getAccountService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><p><strong>第三种方式：</strong></p><p>使用某个类中的静态方法创建对象，并存入spring容器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> IAccountService <span class="token function">getAccountService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AccountServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>instanceFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.rhett.factory.StaticFactory<span class="token punctuation">"</span></span>     <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getAccountService<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h3 id="bean的作用范围">4.2.5 bean的作用范围</h3><p>bean标签的scope属性用于指定bean的作用范围，取值：</p><ul><li>singleton：单例的（默认）</li><li>prototype：多例的</li><li>request：作用于web应用的请求范围</li><li>session：作用于web应用的会话范围</li><li>global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session</li></ul><h3 id="bean对象的生命周期">4.2.6 bean对象的生命周期</h3><p>单例对象：</p><ul><li>当容器创建时对象出生</li><li>只要容器还在，对象一直活着</li><li>容器销毁，对象消亡</li></ul><p>单例对象的生命周期和容器相同</p><p>多例对象：</p><ul><li>当我们使用对象时创建</li><li>对象只要在使用过程中就一直活着</li><li>当对象长时间不用，且没有别的对象引用时，被垃圾回收</li></ul><h2 id="spring中的依赖注入">4.3 spring中的依赖注入</h2><p>依赖注入：Dependency injection，DI</p><p>依赖关系的管理：交给spring来维护</p><p>在当前类需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明。依赖关系的维护就称之为依赖注入。</p><p>能注入的数据有三类：</p><ul><li>基本类型和String</li><li>其他bean类型（在配置文件中或者注解配置过的bean）</li><li>复杂类型/集合类型</li></ul><p>注入的方式，有三种：</p><p><strong>第一种：使用构造函数提供</strong></p><p>需要注入依赖的实体类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AccountServiceImpl</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">,</span> Date birthday<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"service中的saveAccount方法执行了"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>birthday<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>spring配置：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.rhett.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>now<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>now<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.Date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>使用标签：&lt;constructor-arg&gt;</p><p>标签中的属性：</p><ul><li>type：用于指定要注入的数据类型</li><li>index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值，索引的位置从0开始</li><li>name：用于指定给构造函数中指定名称的参数赋值（通常通过这个就能找到对应的参数）</li><li>value：用于提供基本类型和String类型的数据</li><li>ref：用于指定其他的bean类型数据，它指的就是在spring的Ioc容器中出现过的bean对象。</li></ul><p><strong>第二种：使用set方法提供</strong></p><p>需要注入依赖的实体类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBirthday</span><span class="token punctuation">(</span>Date birthday<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"service中的saveAccount方法执行了"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">","</span><span class="token operator">+</span>birthday<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>spring配置：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.rhett.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TEST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>21<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>now<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>now<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.Date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>使用标签：&lt;property&gt;</p><p>标签中的属性：</p><ul><li>name：用于指定注入时所调用的set方法名称</li><li>value：用于提供基本类型和String类型的数据</li><li>ref：用于指定其他的bean类型数据，它指的就是在spring的Ioc容器中出现过的bean对象。</li></ul><p><strong>复杂类型的注入：</strong></p><p>需要注入依赖的实体类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> myStrs<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> myList<span class="token punctuation">;</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> mySet<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> myMap<span class="token punctuation">;</span>    <span class="token keyword">private</span> Properties myProps<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMyStrs</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> myStrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>myStrs <span class="token operator">=</span> myStrs<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMyList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> myList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>myList <span class="token operator">=</span> myList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMySet</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> mySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mySet <span class="token operator">=</span> mySet<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMyMap</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> myMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>myMap <span class="token operator">=</span> myMap<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMyProps</span><span class="token punctuation">(</span>Properties myProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>myProps <span class="token operator">=</span> myProps<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>spring配置：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.rhett.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myStrs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>AAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>BBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>CCC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>AAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>BBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>CCC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mySet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>AAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>BBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>CCC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testA<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aaa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testB<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bbb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ccc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testD<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ddd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><p>property标签中需要搭配array、list、set、map、props使用，其中array、list、set可以互换通用，map、props可以互换通用。</p><p><strong>第三种：使用注解提供</strong></p><p>略</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;spring概述&quot;&gt;1 spring概述&lt;/h1&gt;&lt;p&gt;Spring 是轻量级的 JavaEE 的开源框架，具有 IOC/DI，AOP，MVC，TX，ORM 等功能。&lt;br&gt;优点是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DI （依赖注入）有效的降低了耦合度。&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://www.codetool.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>快速失败(fail-fast)和安全失败(fail-safe)</title>
    <link href="https://www.codetool.top/article/%E5%BF%AB%E9%80%9F%E5%A4%B1%E8%B4%A5-fail-fast-%E5%92%8C%E5%AE%89%E5%85%A8%E5%A4%B1%E8%B4%A5-fail-safe/"/>
    <id>https://www.codetool.top/article/快速失败-fail-fast-和安全失败-fail-safe/</id>
    <published>2020-02-22T16:13:19.000Z</published>
    <updated>2020-02-22T16:29:34.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速失败">1 快速失败</h1><p>在用迭代器遍历一个集合对象时，如果遍历过程中对集合对象的内容进行了修改（增加、删除、修改），则会抛出 <code>Concurrent Modification Exception</code>。</p><p>迭代器在遍历时直接访问集合中的内容，并且在遍历过程中使用一个 modCount 变量。集合在被遍历期间如果内容发生变化，就会改变 modCount 的值。每当迭代器使用 hashNext()/next()遍历下一个元素之前，都会检测 modCount 变量是否为 expectedModCount 值，是的话就返回遍历；否则抛出异常，终止遍历。</p><p>这个机制我在之前的博客中<a href="../ArrayList源码分析/#toc-heading-8">ArrayList源码分析</a>中有提到，也分析了迭代器中关于判断modCount是否为期望值的源码部分。</p><p>下面主要来看安全失败(fail-safe)</p><h1 id="安全失败">2 安全失败</h1><p>采用安全失败机制的集合容器，<strong>在遍历时不是直接在集合内容上访问的，而是先复制原有集合内容，在拷贝的集合上进行遍历。</strong> 这点和CopyOnWriteArrayList在修改上的的机制很一致。</p><p>原理：由于迭代时是对原集合的拷贝进行遍历，所以在遍历过程中对原集合所作的修改并不能被迭代器检测到，所以不会触发 Concurrent Modification Exception。</p><p>比如我们来看ConcurrentHashMap的迭代器：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Traverser</span><span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> <span class="token punctuation">{</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// current table; updated if resized</span>    Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> next<span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">// the next entry to use</span>    TableStack<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span> stack<span class="token punctuation">,</span> spare<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// to save/restore on ForwardingNodes</span>    <span class="token keyword">int</span> index<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// index of bin to use next</span>    <span class="token keyword">int</span> baseIndex<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// current index of initial table</span>    <span class="token keyword">int</span> baseLimit<span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">// index bound for initial table</span>    <span class="token keyword">final</span> <span class="token keyword">int</span> baseSize<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// initial table size</span>    <span class="token function">Traverser</span><span class="token punctuation">(</span>Node<span class="token operator">&lt;</span>K<span class="token punctuation">,</span>V<span class="token operator">></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//在这里复制tab</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>tab <span class="token operator">=</span> tab<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>baseSize <span class="token operator">=</span> size<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>baseIndex <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>index <span class="token operator">=</span> index<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>baseLimit <span class="token operator">=</span> limit<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//遍历逻辑略</span><span class="token punctuation">}</span></code></pre><p>缺点：基于拷贝内容的优点是避免了 Concurrent Modification Exception，但同样地，迭代器并不能访问到修改后的内容，即：迭代器遍历的是开始遍历那一刻拿到的集合拷贝，<strong>在遍历期间原集合发生的修改迭代器是不知道的。</strong></p><p>场景：java.util.concurrent 包下的容器都是安全失败，可以在多线程下并发使用，并发修改。</p><h1 id="总结">3 总结</h1><p>快速失败和安全失败是对迭代器而言的。</p><p>快速失败：当在迭代一个集合的时候，如果有另外一个线程在修改这个集合，就会抛出 <code>ConcurrentModification</code> 异常，java.util 下的集合类都是快速失败。 </p><p>安全失败：在迭代时候会在集合二层做一个拷贝，所以在修改集合上层元素不会影响下层。在 <code>java.util.concurrent</code> 下的并发集合类都是安全失败。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;快速失败&quot;&gt;1 快速失败&lt;/h1&gt;&lt;p&gt;在用迭代器遍历一个集合对象时，如果遍历过程中对集合对象的内容进行了修改（增加、删除、修改），则会抛出 &lt;code&gt;Concurrent Modification Exception&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;迭代器在遍历
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="java" scheme="https://www.codetool.top/tags/java/"/>
    
      <category term="基础知识" scheme="https://www.codetool.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>leetcode88-合并两个有序数组</title>
    <link href="https://www.codetool.top/article/leetcode88-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
    <id>https://www.codetool.top/article/leetcode88-合并两个有序数组/</id>
    <published>2020-02-22T16:01:24.000Z</published>
    <updated>2020-02-22T15:57:54.579Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定两个有序整数数组 <em>nums1</em> 和 <em>nums2*，将 *nums2</em> 合并到 <em>nums1</em> 中，使得 <em>num1</em> 成为一个有序数组。</p><p><strong>说明：</strong> </p><ul><li>初始化 <em>nums1</em> 和 <em>nums2</em> 的元素数量分别为 <em>m</em> 和 <em>n</em>。</li><li>你可以假设 <em>nums1</em> 有足够的空间（空间大小大于或等于 <em>m + n*）来保存 *nums2</em> 中的元素。</li></ul><p><strong>示例:</strong></p><blockquote><p><strong>输入：</strong><br>nums1 = [1,2,3,0,0,0], m = 3<br>nums2 = [2,5,6],       n = 3<br><strong>输出：</strong> [1,2,2,3,5,6]</p></blockquote><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>双指针，先把结果写到另一个数组，最后复制给nums1</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>nums2<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums1<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token operator">||</span>j<span class="token operator">&lt;=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">!=</span>n<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i<span class="token operator">==</span>m<span class="token operator">||</span>nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>=</span>nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> nums<span class="token punctuation">[</span>cur<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> nums<span class="token punctuation">[</span>cur<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> a <span class="token operator">&lt;</span> nums1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>a<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            nums1<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定两个有序整数数组 &lt;em&gt;nums1&lt;/em&gt; 和 &lt;em&gt;nums2*，将 *nums2&lt;/em&gt; 合并到 &lt;em&gt;nums1&lt;/em&gt; 中，使得 &lt;em&gt;num1&lt;/em&gt; 成为一个有序数组。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="双指针技巧" scheme="https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>leetcode63-不同路径II</title>
    <link href="https://www.codetool.top/article/leetcode63-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84II/"/>
    <id>https://www.codetool.top/article/leetcode63-不同路径II/</id>
    <published>2020-02-22T15:09:03.000Z</published>
    <updated>2020-02-22T15:28:43.399Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>一个机器人位于一个 <em>m x n</em> 网格的左上角 （起始点在下图中标记为“Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。</p><p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p><p><img src="https://api.codetool.top/img/15822158778254.png" alt></p><p>网格中的障碍物和空位置分别用 <code>1</code> 和 <code>0</code> 来表示。</p><p><strong>说明：</strong> m 和 n 的值均不超过 100。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入：</strong><br>[<br>  [0,0,0],<br>  [0,1,0],<br>  [0,0,0]<br>]<br><strong>输出：</strong> 2<br><strong>解释：</strong><br>3x3 网格的正中间有一个障碍物。<br>从左上角到右下角一共有 2 条不同的路径：<br>1. 向右 -&gt; 向右 -&gt; 向下 -&gt; 向下<br>2. 向下 -&gt; 向下 -&gt; 向右 -&gt; 向右  </p></blockquote><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>和<a href="../leetcode62-不同路径">leetcode62-不同路径</a>类似，可以使用递归+记忆，每个位置的路径数为右边位置的路径数和下面位置的路径数之和，有障碍的点的路径数为0。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">;</span>    Integer<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paths<span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span>    <span class="token keyword">int</span> height<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">uniquePathsWithObstacles</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> obstacleGrid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        grid <span class="token operator">=</span> obstacleGrid<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        height <span class="token operator">=</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        length <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        paths <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span>height<span class="token punctuation">]</span><span class="token punctuation">[</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">getPaths</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getPaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">==</span>height<span class="token operator">||</span>n<span class="token operator">==</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">==</span> height<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> n<span class="token operator">==</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>paths<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> paths<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token function">getPaths</span><span class="token punctuation">(</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">getPaths</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        paths<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> ans<span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;一个机器人位于一个 &lt;em&gt;m x n&lt;/em&gt; 网格的左上角 （起始点在下图中标记为“Start” ）。&lt;/p&gt;
&lt;p&gt;机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="递归" scheme="https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>数据库理论之事务与恢复技术</title>
    <link href="https://www.codetool.top/article/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA%E4%B9%8B%E4%BA%8B%E5%8A%A1%E4%B8%8E%E6%81%A2%E5%A4%8D%E6%8A%80%E6%9C%AF/"/>
    <id>https://www.codetool.top/article/数据库理论之事务与恢复技术/</id>
    <published>2020-02-22T14:43:45.000Z</published>
    <updated>2020-02-22T14:44:06.227Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考资源：</p><p><a href="https://blog.csdn.net/cd546566850/article/details/103988719/" target="_blank" rel="noopener">什么是事务？事务的四个特性、不考虑隔离会导致的三个问题以及四种隔离级别_数据库_cd546566850的博客-CSDN博客</a></p><h1 id="基本概念">1 基本概念</h1><p>事务：是用户定义的一个数据库操作序列 ，这些操作要么全做，要么全不做，是一个不可分割的工作单位。</p><p>在关系数据库中，一个事务可以是一条或多条 SQL 语句, 也可以包含一个或多个程序。<br>一个程序通常包含多个事务</p><p>显式定义方式：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">begin</span> <span class="token keyword">transaction</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">commit</span><span class="token operator">/</span><span class="token keyword">rollback</span></code></pre><p>隐式方式：</p><p>当用户没有显式地定义事务时，DBMS 按缺省规定自动划分事务（一句SQL语句一个事务）</p><p>AutoCommit 事务是 SQL Server 默认事务方式,</p><h1 id="事务的特性ACID">2 事务的特性ACID</h1><ol><li>原子性（atomicity）： <strong>一个事务是一个不可分割的工作单位</strong>，事务中包括的诸操作要<br>么都做，要么都不做；</li><li>一致性（consistency）： <strong>事务必须使数据库从一个一致性状态变成另一个一致性状态。</strong></li><li>隔离性（isolation）：<strong>一个事务的执行不能被其他事务干扰。</strong></li><li>持续性（durability）： 也称永久性，指<strong>一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。</strong></li></ol><h2 id="不考虑隔离性会导致的三个问题">2.1 不考虑隔离性会导致的三个问题</h2><ol><li><p>脏读：脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。</p></li><li><p>不可重复读：<strong>一个事务两次读取同一行的数据，结果得到不同状态的结果，中间正好另一个事务更新了该数据，两次结果相异，不可被信任。</strong>通俗来讲就是：事务T1在读取某一数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，发送了不可重复读。</p></li><li><p>幻读（虚读）：<strong>一个事务执行两次查询，第二次结果集包含第一次中没有或某些行已经被删除的数据，造成两次结果不一致，只是另一个事务在这两次查询中间插入或删除了数据造成的。</strong>通俗来讲就是：例如事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读</p></li></ol><h2 id="解决办法（四种隔离级别）">2.2 解决办法（四种隔离级别）</h2><ol><li>Read Uncommited（读取未提交内容）</li></ol><p>读未提交，顾名思义，就是<strong>一个事务可以读取另一个未提交事务的数据。但是，读未提交产生了脏读，采用读提交可以解决脏读问题。</strong></p><ol start="2"><li>Read Commited（读取提交内容）</li></ol><p>读提交，顾名思义，就是<strong>一个事务要等另一个事务提交后才能读取数据。</strong> 读提交，若有事务对数据进行更新（UPDATE）操作时，读操作事务要等待这个更新操作事务提交后才能读取数据，可以解决脏读问题。但是，读提交两次查询会产生不同的查询结果，就会造成不可重复读问题，采用重复读可以解决此问题。</p><ol start="3"><li>Repeatable Read（重复读）</li></ol><p>重复读，就是<strong>在开始读取数据（事务开启）时，不再允许修改操作。</strong>重复读可以解决不可重复读问题。应该明白的一点就是，不可重复读对应的是修改，即UPDATE操作。但是可能还会有幻读问题。因为幻读问题对应的是插入INSERT操作，而不是UPDATE操作。采用Serializable可以解决幻读问题</p><ol start="4"><li>Serializable（可串行化）</li></ol><p>Serializable 是最高的事务隔离级别，<strong>在该级别下，事务串行化顺序执行</strong>，可以避免脏读、不可重复读与幻读。但是这种事务隔离级别效率低下，比较耗数据库性能，一般不使用。</p><p><strong>注意</strong></p><ol><li><p>大多数数据库默认的事务隔离级别是<code>Read committed</code>，比如Sql Server, Oracle。Mysql的默认隔离级别是<code>Repeatable read</code>，只会出现幻读。</p></li><li><p>隔离级别的设置只对当前链接有效。对于使用MySQL命令窗口而言，一个窗口就相当于一个链接，当前窗口设置的隔离级别只对当前窗口中的事务有效；对于JDBC操作数据库来说，一个Connection对象相当于一个链接，而对于Connection对象设置的隔离级别只对该Connection对象有效，与其他链接Connection对象无关。</p></li><li><p>设置数据库的隔离级别一定要是在开启事务之前。</p></li></ol><h1 id="数据库恢复技术">3 数据库恢复技术</h1><p>故障是不可避免的： </p><ul><li>系统故障：计算机软、硬件故障</li><li>人为故障：操作员的失误、恶意的破坏等。</li></ul><p>数据库的恢复：</p><ul><li>把数据库从错误状态恢复到某一已知的正确状态（亦称为一致状态或完整状态）</li></ul><h2 id="故障的种类">3.1 故障的种类</h2><p><strong>事务内部的故障 ：</strong></p><ol><li>有的是可以通过事务程序本身发现的</li><li>有的 是非预期的，不能由应用程序处理（如运算溢出、死锁等）</li></ol><p>后面，事务故障仅指非预期的故障</p><p>事务故障的恢复：UNDO 撤销</p><p><strong>系统故障：</strong></p><p>造成系统停止运转的任何事件，使得系统要重新启动。（硬件错误、断电等）</p><p>影响正在运行的所有事务，但不破坏数据库。此时内存，尤其是数据库缓冲区中的内容全部丢失，所有运行事务非正常终止。</p><p>恢复：</p><ol><li>未提交的事务：UNDO 撤销所有未完成的事务</li><li>已提交的事务，但缓冲区内容未完全写入磁盘：REDO 重做所有已提交的事务</li></ol><p><strong>介质故障：</strong></p><p>系统故障称为软故障，介质故障称为硬故障（外存故障，如磁盘损坏）</p><p>恢复：装入数据库发生介质故障前某个时刻的数据副本，REDO 自此时开始的所有成功事务，将这些事务已提交的结果重新写入</p><p><strong>计算机病毒：</strong></p><p>计算机病毒是一种人为的故障或破坏，是一些恶作剧者研制的一种计算机程序。可以繁殖和传播，并造成对计算机系统包括数据库的危害。</p><p>总之： 各类故障，对数据库的影响有两种可能性</p><ul><li>一是数据库本身被破坏</li><li>二是数据库没有被破坏，但数据可能不正确，这是由于事务的运行被非正常终止造成的。</li></ul><h2 id="恢复的实现技术">3.2 恢复的实现技术</h2><p>恢复操作的基本原理：冗余</p><p>恢复机制涉及的两个关键问题：</p><ol><li>如何建立冗余数据<ul><li>数据转储 (backup)</li><li>日志文件 (logging)</li></ul></li><li>如何利用这些冗余数据实施数据库恢复</li></ol><h3 id="数据转储">3.2.1 数据转储</h3><p>转储是指 DBA 将整个数据库复制到其他存储介质上保存起来的过程，备用的数据称为后备副本或后援副本</p><ul><li>数据库遭到破坏后可以将后备副本重新装入</li><li>重装后备副本只能将数据库恢复到转储时的状态</li></ul><p><strong>转储方式：</strong></p><p>按不同的划分方法可以划分为静态/动态转储或海量/增量转储</p><h4 id="静态转储：">3.2.1.1 静态转储：</h4><ol><li>定义：在系统中无事务运行时进行的转储操作。 转储开始的时刻数据库处于一致性状态，而转储不允许对数据库的任何存取、修改活动。静态转储得到的一定是一个数据一致性的副本。</li><li>优点：实现简单</li><li>缺点：降低了数据库的可用性</li></ol><p>转储必须等待正运行的用户事务结束才能进行；新的事务必须等待转储结束才能执行</p><h4 id="动态转储：">3.2.1.2 动态转储：</h4><ol><li>定义：转储期间允许对数据库进行存取或修改。转储和用户事务可以并发执行 。</li><li>优点：不用等待正在运行的用户事务结束；不会影响新事务的运行。</li><li>实现：必须把转储期间各事务对数据库的修改活动登记下来，建立日志文件<br>后备副本加上日志文件就能把数据库恢复到某一时刻的正确状态 。</li></ol><h4 id="海量转储：">3.2.1.3 海量转储：</h4><ol><li>定义：每次转储全部数据库</li><li>特点：从恢复角度，使用海量转储得到的后备副本进行恢复更方便一些。</li></ol><h4 id="增量转储：">3.2.1.4 增量转储：</h4><ol><li>定义：每次只转储上一次转储后更新过的数据</li><li>特点：如果数据库很大，事务处理又十分频繁，则增量转储方式更实用更有效 </li></ol><h3 id="日志文件">3.2.2 日志文件</h3><p>日志文件(log)是用来记录事务对数据库的更新操作的文件。</p><p><strong>日志文件的格式：</strong></p><ol><li><p>以记录为单位：<br> 日志文件中需要登记的内容包括：</p><ol><li><p>各个事务的开始标记(BEGIN TRANSACTION)</p></li><li><p>各个事务的结束标记(COMMIT 或 或 ROLLBACK)</p></li><li><p>各个事务的所有更新操作<br>以上均作为日志文件中的一个日志记录  </p><p>每个日志记录的内容：  </p></li><li><p>事务标识（标明是哪个事务）</p></li><li><p>操作类型（插入、删除或修改）</p></li><li><p>操作对象（记录内部标识）</p></li><li><p>更新前数据的旧值（对插入操作而言，此项为空值）</p></li><li><p>更新后数据的新值（对删除操作而言, 此项为空值）</p></li></ol></li><li><p>以数据块为单位<br> 日志记录内容包括：</p><ol><li>事务标识（标明是哪个事务）</li><li>被更新的数据块</li></ol></li></ol><p><strong>日志文件的作用：</strong></p><ul><li>进行事务故障恢复</li><li>进行系统故障恢复</li><li>协助后备副本进行介质故障恢复<ol><li>事务故障恢复和系统故障恢复必须用日志文件</li><li>在动态转储方式中必须建立日志文件，后备副本和日志文件结合起来才能有效地恢复数据库</li><li>静态转储方式中也可以建立日志文件（重新装入后备副本，然后利用日志文件把已完成的事务进行重做，对未完成事务进行撤销）</li></ol></li></ul><p><strong>登记日志文件的基本原则：</strong></p><ul><li>登记的次序严格按并行事务执行的时间次序</li><li>必须先写日志文件，后写数据库</li></ul><p>(只要没有记录事务的结束标记，就算多记录了一条实际没有执行的语句，恢复之后也会回滚)</p><h2 id="恢复策略">3.3 恢复策略</h2><h3 id="事务故障的恢复">3.3.1 事务故障的恢复</h3><p>事务故障：事务在运行至正常终止点前被终止</p><p>恢复方法：由恢复子系统应利用日志文件撤消（UNDO）此事务已对数据库进行的修改</p><p>事务故障的恢复由系统自动完成，对用户是透明的，不需要用户干预</p><p>事务故障的恢复步骤：</p><ol><li>反向扫描文件日志，查找该事务的更新操作。</li><li>对该事务的更新操作执行逆操作。即将日志记录中 “ 更新前的值” ” 写入数据库 。<ul><li>插入操作，“更新前的值” 为空，则相当于做删除操作</li><li>删除操作，“更新后的值” 为空，则相当于做插入操作</li><li>若是修改操作，则相当于用修改前值代替修改后值</li></ul></li><li>继续反向扫描日志文件，查找该事务的其他更新操作，并做同样处理。</li><li>如此处理下去，直至读到此事务的开始标记，事务故障恢复就完成了。</li></ol><h3 id="系统故障的恢复">3.3.2 系统故障的恢复</h3><p>系统故障可能导致未完成事务对数据库的更新已写入数据库，或已提交事务对数据库的更新还留在缓冲区没来得及写入数据库，只需要做对应的UNDO或REDO操作。</p><h3 id="介质故障的恢复">3.3.3 介质故障的恢复</h3><ol><li>重装数据库<ul><li>装入最新的后备副本，使数据库恢复到最近一次转储时的一致性状态（分为静态转储的副本和动态转储的副本，动态转储的副本还需配合日志文件做恢复）</li></ul></li><li>装入有关的日志文件副本，重做已完成的事务</li></ol><p>介质故障的恢复需要 DBA 介入</p><h3 id="具有检查点的数据恢复">3.3.4 具有检查点的数据恢复</h3><p>利用日志技术进行数据库恢复存在两个问题：</p><ul><li>搜索整个日志将耗费大量的时间</li><li>REDO 处理：事务实际上已经执行，又重新执行，浪费了大量时间</li></ul><p>具有检查点的数据恢复技术在正常工作时周期性地执行如下操作：建立检查点，保存数据库状态。<br>具体步骤是：</p><ol><li>将当前日志缓冲区中的所有日志记录写入磁盘的日志文件上</li><li>在日志文件中写入一个检查点记录</li><li>将当前数据缓冲区的所有数据记录写入磁盘的数据库中</li><li>把检查点记录在日志文件中的地址写入一个重新开始文件</li></ol><p><img src="https://api.codetool.top/img/15823824813433.png" alt></p><p>当事务 T 在一个检查点之前提交，T 对数据库所做的修改一定都已写入数据库</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文参考资源：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/cd546566850/article/details/103988719/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;什么是事务？事务的四个特性、不考虑隔离会
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="数据库" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis一级缓存与二级缓存</title>
    <link href="https://www.codetool.top/article/Mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E4%B8%8E%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98/"/>
    <id>https://www.codetool.top/article/Mybatis一级缓存与二级缓存/</id>
    <published>2020-02-22T09:37:45.000Z</published>
    <updated>2020-02-22T10:34:20.768Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考资源：</p><p><a href="https://www.cnblogs.com/cxuanBlog/p/11333021.html" target="_blank" rel="noopener">MyBatis 二级缓存全详解 - cxuan - 博客园</a></p><h1 id="缓存">1 缓存</h1><p>存在于内存中的临时数据</p><p>减少和数据库的交互次数，提高执行效率</p><p>适用于缓存的数据：</p><ul><li>经常查询并且不经常改变。</li><li>数据的正确与否对最终结果影响不大</li></ul><h1 id="一级缓存">2 一级缓存</h1><h2 id="概述">2.1 概述</h2><p>Mybatis中的一级缓存指的是SqlSession级别的缓存。</p><p>一个SqlSession对象通常表示用户和Mybatis建立的一次会话，在这个会话中，重复执行完全相同的查询语句且不受影响的情况下就会使用一级缓存。</p><p>每当一个SqlSession对象创建时，它会持有一个Executor执行器，直接和Connection打交道，当我们第一次执行查询之后，查询的结果会同时存入到这个Executor执行器中的一块区域：</p><p>MyBatis 将缓存和对缓存相关的操作封装成了 Cache 接口中，Executor 接口的实现类 BaseExecutor 中拥有一个 Cache 接口的实现类 PerpetualCache，则对于 BaseExecutor 对象而言，它将使用 PerpetualCache 对象维护缓存。</p><p><img src="https://api.codetool.top/img/15823651517004.png" alt></p><p>PerpetualCache 实现原理其实很简单，其内部就是通过一个简单的 <code>HashMap&lt;k,v&gt;</code> 来实现<br>的，没有其他的任何限制。</p><h2 id="生命周期">2.2 生命周期</h2><ol><li>MyBatis 在开启一个数据库会话时，会创建一个新的 SqlSession 对象，SqlSession 对象中会有一个新的 Executor 对象，Executor 对象中持有一个新的 PerpetualCache 对象；<strong>当会话结束时，SqlSession 对象及其内部的 Executor 对象还有 PerpetualCache 对象也一并释放掉。</strong></li><li>如果 SqlSession 调用了 <code>close()</code>方法，会<strong>释放掉一级缓存 PerpetualCache 对象</strong>，一级缓存将不可用；</li><li>如果 SqlSession 调用了 <code>clearCache()</code>，会<strong>清空 PerpetualCache 对象中的数据</strong>，但是该对象仍可使用；</li><li>SqlSession 中<strong>执行了任何一个 update 操作(update()、delete()、insert()) ，都会清空PerpetualCache 对象的数据</strong>，但是该对象可以继续使用；</li></ol><h2 id="工作流程">2.3 工作流程</h2><ol><li>对于某个查询，根据 <code>statementId,params,rowBounds</code> 来构建一个 key 值，根据这个 key 值去缓存 Cache 中取出对应的 key 值存储的缓存结果；</li><li>判断从 Cache 中根据特定的 key 值取的数据数据是否为空，即是否命中；</li><li>如果命中，则直接将缓存结果返回；</li><li>如果没命中：<ol><li>去数据库中查询数据，得到查询结果；</li><li>将 key 和查询到的结果分别作为 key,value 对存储到 Cache 中；</li><li>将查询结果返回；</li></ol></li></ol><p>一级缓存是一个粗粒度的缓存，没有更新缓存和缓存过期的概念</p><h1 id="二级缓存">3 二级缓存</h1><h2 id="概述-1">3.1 概述</h2><p>MyBatis一级缓存最大的共享范围就是一个SqlSession内部，那么如果多个 SqlSession 需要共享缓存，则需要开启二级缓存，开启二级缓存后，会使用 CachingExecutor 装饰 Executor，进入一级缓存的查询流程前，先在CachingExecutor 进行二级缓存的查询，具体的工作流程如下所示</p><p><img src="https://api.codetool.top/img/15823669308067.png" alt></p><p>当二级缓存开启后，<strong>同一个命名空间(namespace) 所有的操作语句，都影响着一个共同的 cache</strong>，也就是二级缓存被多个 SqlSession 共享，是一个全局的变量。当开启缓存后，数据的查询执行的流程就是 二级缓存 -&gt; 一级缓存 -&gt; 数据库。</p><p>但二级缓存缓存的是数据而不是对象，当我们在使用二级缓存时，所缓存的类一定要实现 <code>java.io.Serializable</code> 接口，这种就可以使用序列化方式来保存对象。</p><h2 id="使用">3.2 使用</h2><p>二级缓存默认是不开启的，需要以下操作开启：</p><ul><li>在Mybatis.xml总配置</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre><p>因为 cacheEnabled 的取值默认就为 true，所以这一步可以省略不配置。为 true 代表开启二级缓存；为false 代表不开启二级缓存</p><ul><li>在Mapper配置文件中配置</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span><span class="token punctuation">/></span></span></code></pre><p>cache标签可以设置以下属性：</p><ul><li><code>eviction</code>: 缓存回收策略，有这几种回收策略<ul><li>LRU - 最近最少回收，移除最长时间不被使用的对象</li><li>FIFO - 先进先出，按照缓存进入的顺序来移除它们</li><li>SOFT - 软引用，移除基于垃圾回收器状态和软引用规则的对象</li><li>WEAK - 弱引用，更积极的移除基于垃圾收集器和弱引用规则的对象</li></ul></li></ul><p>默认是 LRU 最近最少回收策略</p><ul><li><p><code>flushinterval</code>: 缓存刷新间隔，缓存多长时间刷新一次，默认不清空，设置一个毫秒值</p></li><li><p><code>readOnly</code>: 是否只读；true 只读，MyBatis 认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。MyBatis 为了加快获取数据，直接就会将数据在缓存中的引用交给用户。不安全，速度快。读写(默认)：MyBatis 觉得数据可能会被修改。</p></li><li><p><code>size</code> : 缓存存放多少个元素</p></li><li><p><code>type</code>: 指定自定义缓存的全类名(实现Cache接口即可)</p></li><li><p><code>blocking</code>： 若缓存中找不到对应的key，是否会一直blocking，直到有对应的数据进入缓存。</p></li><li><p>在Select标签中配置</p></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">useCache</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span></code></pre><h2 id="注意">3.3 注意</h2><ul><li>二级缓存是以<code>namespace</code>为单位的，不同namespace下的操作互不影响。</li><li><code>insert,update,delete</code>操作会清空所在namespace下的全部缓存。</li><li>通常使用MyBatis Generator生成的代码中，都是各个表独立的，每个表都有自己的namespace。</li><li>多表操作一定不要使用二级缓存，因为多表操作进行更新操作，一定会产生脏数据。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文参考资源：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/cxuanBlog/p/11333021.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MyBatis 二级缓存全详解 - cxuan - 博客园&lt;/
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="mybatis" scheme="https://www.codetool.top/tags/mybatis/"/>
    
  </entry>
  
  <entry>
    <title>数据库理论之查询处理和查询优化</title>
    <link href="https://www.codetool.top/article/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA%E4%B9%8B%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/"/>
    <id>https://www.codetool.top/article/数据库理论之查询处理和查询优化/</id>
    <published>2020-02-22T03:37:08.000Z</published>
    <updated>2020-02-22T03:37:36.573Z</updated>
    
    <content type="html"><![CDATA[<p>关系数据库的查询处理和查询优化</p><h1 id="查询处理">1 查询处理</h1><p>查询处理是 是 RDBMS 执行查询语句的过程，其任务是把用户提交给 RDBMS 的查询语句转换为高效的查询执行计划。</p><h2 id="查询处理步骤">1.1 查询处理步骤</h2><p>查询处理分为4个阶段：查询分析、查询检查、查询优化和查询执行。</p><ol><li>查询分析（语法）<br>对查询语句进行扫描、词法分析、语法分析  </li><li>查询检查（语义）<br>对合法的查询语句进行语义检查，即根据数据字典中有关的模式定义<strong>检查语句中的数据库对象，如关系名、属性名等是否存在和有效。</strong> 然后进行安全性、完整性检查。检查通过后把SQL语句转换成等价的关系代数表达式。RDBMS 一般采用查询树（语法树）来表示拓展的关系代数表达式。</li><li>查询优化<br>查询优化就是<strong>选择一个高效执行的查询处理策略。</strong><br>分为<strong>代数优化</strong>和<strong>物理优化</strong><ol><li>代数优化是指关系代数表达式的优化，即按照一定的规则，通过<strong>对关系代数表达式进行等价变换，改变代数表达式中操作的次序和组合，使查询执行更高效。</strong></li><li>物理优化是指通过存取路径和底层操作算法的选择进行的优化。<br>选择的依据可以是基于规则的、基于代价的、基于语义的。</li></ol></li><li>查询执行<br>依据优化器得到的执行策略生成查询执行计划，由代码生成器生成执行这个查询计划的代码，然后 加以执行，回送查询结果。</li></ol><h2 id="查询操作算法">1.2 查询操作算法</h2><p>(1) 全表扫描方法 (Table Scan)<br>对查询的基本表顺序扫描，逐一检查每个元组是否满足选择条件，把满足条件的元组作为结果输出<br><strong>适合小表，不适合大表</strong></p><p>(2) 索引扫描方法 (Index Scan)<br>适合于选择条件中的属性上有索引(例如B+树索引或Hash索引)<br>通过索引先找到满足条件的元组主码或元组指针，再通过元组指针直接在查询的基本表中找到元组。</p><p>当选择率较低时，基于索引的选择算法要优于全表扫描算法 。但在某些情况下，例如选择率较高，或者要查找的元组均匀地分布在查找的表中，这时基于索引的选择算法性能不如全表扫描算法。因此除了对表的扫描操作，还要加上对B+树索引的扫描操作，对每一个检索码，从 B+树根节点到叶子结点路径上的每个结点都要进行一次 IO 操作。</p><p>Hash树和B+树也有优劣，等下次写有关索引的时候再讲。</p><h2 id="连接操作算法">1.3 连接操作算法</h2><p><strong>连接操作是查询处理中最耗时的操作之一</strong></p><p>本节只讨论等值连接(或自然连接)最常用的实现算法，例：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> Student<span class="token punctuation">,</span> SC <span class="token keyword">WHERE</span> Student<span class="token punctuation">.</span>Sno<span class="token operator">=</span>SC<span class="token punctuation">.</span>Sno<span class="token punctuation">;</span></code></pre><p>(1) 嵌套循环算法 (nested loop join)</p><ul><li>对外层循环(Student 表) 的每一个元组(s) ，检索内层循环(SC 表) 中的每一个元组(sc)</li><li>检查这两个元组在连接属性(Sno)上是否相等。</li><li>如果满足连接条件，则串接后作为结果输出，直到外层循环表中的元组处理完为止。</li></ul><p>可见就是O(N<sup>2</sup>)的时间复杂度，十分耗时。</p><p>(2) 排序——合并算法(sort-merge join 或 merge join)</p><ul><li>如果连接的表没有排好序，先对 Student 表和 SC 表按连接属性 Sno 排序</li><li>取 Student 表中第一个 Sno ，依次扫描 SC 表中具有相同 Sno 的元组</li><li>当扫描到 Sno 不相同的第一个 SC 元组时 ，返回 Student 表扫描它的下一个元组，再扫描 SC 表中具有相同 Sno 的元组，把它们连接起来</li><li>重复上述步骤直到 Student 表扫描完</li></ul><p>这种算法具有动态规划的思想，Student表和SC表都只要扫描一遍，而且如果连接的属性有注册索引，并且索引是有序的，可以省去排序的时间。</p><p>对于大表，先排序后使用排序-合并连接算法执行连接，总的时间一般仍会减少。</p><p>(3) 索引连接 (index join) 算法</p><p>步骤：  </p><p>（前提）在 SC 表上已经建立属性 Sno 的索引。</p><ol><li><p>对 Student 中每一个元组，由 Sno 值通过 SC 的索引查找相应的 SC 元组。</p></li><li><p>把这些 SC 元组和 Student 元组连接起来</p><p> 循环执行1、2，直到Student表中的元组处理完为止  </p></li></ol><p>只有一个表需要索引</p><p>(4) Hash Join 算法</p><p>把连接属性作为 hash 码，用同一个hash 函数把 Student 表和 SC 表中的元组散列到 hash 表中。</p><ul><li>划分阶段（Build）<ul><li>对包含较少元组的表(如 Student 表) 进行一遍处理</li><li>把它的元组按 hash 函数分散到 hash 表的桶中</li></ul></li><li>试探阶段（Probe）<ul><li>对另一个表(SC 表) 进行一遍处理</li><li>把 SC 表的元组也按同一个 hash 函数（hash 码是连接属性）进行散列</li><li>把 SC 元组与桶中来自 Student 表并与之相匹配的元组连接起来</li></ul></li></ul><p>将小表转为哈希表，用表1 的 匹配字段用哈希函数映射到哈希表</p><p>上面 hash join 算法前提：假设两个表中较小的表在第一阶段后可以完全放入内存的 hash 桶中。</p><h1 id="查询优化">2 查询优化</h1><p>查询优化在关系数据库系统中有着非常重要的地位</p><p>关系查询优化是影响关系数据库管理系统性能的关键因素</p><p>由于关系表达式的语义级别很高，使关系系统可以从关系表达式中分析查询语义，提供了执行查询优化的可能性</p><h2 id="概述">2.1 概述</h2><h3 id="关系系统的查询优化">2.1.1 关系系统的查询优化</h3><p>是关系数据库管理系统实现的关键技术又是关系系统的优点所在<br>减轻了用户选择存取路径的负担</p><h2 id="非关系系统">2.2 非关系系统</h2><p>用户使用过程化的语言表达查询要求，执行何种记录级的操作，以及操作的序列是由用户来决定的<br>用户必须了解存取路径，系统要提供用户选择存取路径的手段，查询效率由用户的存取策略决定<br>如果用户做了不当的选择，系统是无法对此加以改进的</p><h3 id="查询优化的优点">2.2.1 查询优化的优点</h3><ol><li>用户不必考虑如何最好地表达查询以获得较好的效率</li><li>系统可以比用户程序的 “优化” 做得更好<ol><li>优化器可以从数据字典中获取许多统计信息 ， 而用户程序则难以获得这些信息 。</li><li>如果数据库的物理统计信息改变了，系统可以自动对查询重新优化以选择相适应的执行计划。在非关系系统中必须重写程序，而重写程序在实际应用中往往是不太可能的。</li><li>优化器可以考虑数百种不同的执行计划，程序员一般只能考虑有限的几种可能性 。</li><li>优化器中包括了很多复杂的优化技术，这些优化技术往往只有最好的程序员才能掌握。系统的自动优化相当于使得所有人都拥有这些优化技术。</li></ol></li></ol><p>关系数据库管理系统通过某种代价模型计算出各种查询执行策略的执行代价，然后选取代价最小的执行方案</p><p><img src="https://api.codetool.top/img/15823307842630.png" alt></p><h3 id="查询优化的总目标">2.2.2 查询优化的总目标</h3><ul><li>选择有效的策略</li><li>求得给定关系表达式的值</li><li>使得查询代价最小( 实际上是较小)</li></ul><h2 id="一个实例">2.3 一个实例</h2><p>一个关系查询可以对应不同的执行方案，其效率可能相差非常大。</p><p>例：求选修了2号课程的学生姓名。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> Student<span class="token punctuation">.</span>Sname <span class="token keyword">FROM</span> Student<span class="token punctuation">,</span> SC    <span class="token keyword">WHERE</span> Student<span class="token punctuation">.</span>Sno<span class="token operator">=</span>SC<span class="token punctuation">.</span>Sno <span class="token operator">AND</span> SC<span class="token punctuation">.</span>Cno<span class="token operator">=</span><span class="token string">'2'</span></code></pre><p>假定学生-课程数据库中有 1000 个学生记录，10000 个选课记录<br>选修 2 号课程的选课记录为 50 个</p><p><img src="https://api.codetool.top/img/15823321352849.png" alt></p><p>第一种情况：</p><ol><li><p>计算笛卡尔积</p><p> 算法：  </p><ol><li>在内存中尽可能多地装入某个表(如 Student 表) 的若干块 ，留出一块存放另一个表(如 SC 表) 的元组。</li><li>把 SC 中的每个元组和 Student 中每个元组连接 ， 连接后的元组装满一块后就写到中间文件上</li><li>从 SC 中读入一块和内存中的 Student 元组连接，直到 SC 表处理完。</li><li>再读入若干块 Student 元组，读入一块 SC 元组</li><li>重复上述处理过程，直到把 Student 表处理完</li></ol></li></ol><p><img src="https://api.codetool.top/img/15823359581851.png" alt></p><ol start="2"><li><p>作选择操作</p><p> 依次读入连接后的元组，按照选择条件选取满足要求的记录<br> 假定内存处理时间忽略。读取中间文件花费的时间 (同写中间文件一样) 需读入106块。<br> 若满足条件的元组假设仅 50 个，均可放在内存。  </p></li><li><p>作投影操作<br> 把第 2 步的结果在 Sname 上作投影输出，得到最终结果<br> 第一种情况下执行查询的总读写数据块 2100+10<sup>6</sup>+10<sup>6</sup></p></li></ol><p>第二种情况：</p><ol><li>计算自然连接<ol><li>执行自然连接，读取 Student 和 和 SC 表的策略不变，总的读取块数仍为 2100 块</li><li>自然连接的结果比第一种情况大大减少，为 104 个元组</li><li>写出数据块= 103 块</li></ol></li><li>读取中间文件块，执行选择运算，读取的数据块= 103 块</li><li>把第 2 步结果投影输出。<br>第二种情况下执行查询的总读写数据块=2100+103+103<br>其执行代价大约是第一种情况的 488 分之一  </li></ol><p>第三种情况：</p><ol><li>先对 SC 表作选择运算 ，只需读一遍 SC 表，存取100 块，因为满足条件的元组仅50个，不必使用中间文件。</li><li>读取 Student 表，把读入的 Student 元组和内存中的 SC 元组作连接。也只需读一遍Student 表共 100 块。</li><li>把连接结果投影输出<br>第三种情况总的读写数据块=100+100<br>其执行代价大约是第一种情况的万分之一，是第二种情况的 20 分之一  </li></ol><p>注：<br>假如 SC 表的 Cno 字段上有索引</p><ul><li>第一步就不必读取所有的 SC 元组而只需读取 Cno=‘2’ 的那些元组(50 个)</li><li>存取的索引块和 SC 中满足条件的数据块大约总共 3 ～4 块</li></ul><p>若 Student 表在 Sno 上也有索引</p><ul><li>不必读取所有的 Student 元组</li><li>因为满足条件的 SC 记录仅 50 个，涉及最多 50 个 个 Student 记录</li><li>读取 Student 表的块数也可大大减少</li></ul><h3 id="总结">2.3.1 总结</h3><p>有选择和连接操作时，先做选择操作，这样参加连接的元组就可以大大减少，这是<strong>代数优化。</strong></p><p>在 Q3 中 SC 表的选择操作算法有全表扫描或索引扫描，经过初步估算，索引扫描方法较优。</p><p>对于 Student 和 SC 表的连接，利用 Student 表上的索引，采用索引连接代价也较小，这就是<strong>物理优化。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关系数据库的查询处理和查询优化&lt;/p&gt;
&lt;h1 id=&quot;查询处理&quot;&gt;1 查询处理&lt;/h1&gt;&lt;p&gt;查询处理是 是 RDBMS 执行查询语句的过程，其任务是把用户提交给 RDBMS 的查询语句转换为高效的查询执行计划。&lt;/p&gt;
&lt;h2 id=&quot;查询处理步骤&quot;&gt;1.1 查询处理步
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="优化" scheme="https://www.codetool.top/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="数据库" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
</feed>
