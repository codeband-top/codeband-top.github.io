<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>代码段小站</title>
  <icon>https://www.gravatar.com/avatar/4c71a513a84e4d430b9f9aed224237fc</icon>
  <subtitle>CodeBand CodeTool - 个人计算机类练手小博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.codetool.top/"/>
  <updated>2019-12-13T05:01:47.755Z</updated>
  <id>https://www.codetool.top/</id>
  
  <author>
    <name>Rhett Peng</name>
    <email>pctdyx@qq.net</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>leetcode225--用队列实现栈</title>
    <link href="https://www.codetool.top/article/leetcode225-%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/"/>
    <id>https://www.codetool.top/article/leetcode225-用队列实现栈/</id>
    <published>2019-12-13T04:58:54.000Z</published>
    <updated>2019-12-13T05:01:47.755Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h1><p>使用队列实现栈的下列操作：</p><ul><li>push(x) – 元素 x 入栈</li><li>pop() – 移除栈顶元素</li><li>top() – 获取栈顶元素</li><li>empty() – 返回栈是否为空</li></ul><p>注意:</p><ul><li>你只能使用队列的基本操作– 也就是 <code>push to back</code>, <code>peek/pop from front</code>, <code>size</code>, 和 <code>is empty</code> 这些操作是合法的。</li><li>你所使用的语言也许不支持队列。 你可以使用 list 或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。</li><li>你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。</li></ul><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p>用一个队列进行插入操作，要得到队列的最后一个插入的元素可以将其他的元素先插入第二个队列，得到最后一个元素之后再把元素插入回来。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyStack</span> </span>&#123;</span><br><span class="line">    Queue&lt;Integer&gt; queue;</span><br><span class="line">    Queue&lt;Integer&gt; buffer;</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        buffer = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Push element x onto stack. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        queue.offer(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes the element on top of the stack and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">1</span>)&#123;</span><br><span class="line">            buffer.offer(queue.poll());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result = queue.poll();</span><br><span class="line">        <span class="keyword">while</span>(!buffer.isEmpty())&#123;</span><br><span class="line">            queue.offer(buffer.poll());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the top element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(queue.size()!=<span class="number">1</span>)&#123;</span><br><span class="line">            buffer.offer(queue.poll());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result = queue.poll();</span><br><span class="line">        buffer.offer(result);</span><br><span class="line">        <span class="keyword">while</span>(!buffer.isEmpty())&#123;</span><br><span class="line">            queue.offer(buffer.poll());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns whether the stack is empty. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> queue.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyStack object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyStack obj = new MyStack();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.top();</span></span><br><span class="line"><span class="comment"> * boolean param_4 = obj.empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;&lt;a href=&quot;#原题&quot; class=&quot;headerlink&quot; title=&quot;原题&quot;&gt;&lt;/a&gt;原题&lt;/h1&gt;&lt;p&gt;使用队列实现栈的下列操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;push(x) – 元素 x 入栈&lt;/li&gt;
&lt;li&gt;pop() – 移除栈顶元素&lt;/
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="队列" scheme="https://www.codetool.top/tags/%E9%98%9F%E5%88%97/"/>
    
      <category term="栈" scheme="https://www.codetool.top/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>leetcode232-用栈实现队列</title>
    <link href="https://www.codetool.top/article/leetcode232-%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
    <id>https://www.codetool.top/article/leetcode232-用栈实现队列/</id>
    <published>2019-12-13T04:41:48.000Z</published>
    <updated>2019-12-13T04:49:43.735Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h1><p>使用栈实现队列的下列操作：</p><ul><li>push(x) – 将一个元素放入队列的尾部。</li><li>pop() – 从队列首部移除元素。</li><li>peek() – 返回队列首部的元素。</li><li>empty() – 返回队列是否为空。</li></ul><p><strong>示例:</strong></p><blockquote><p>MyQueue queue = new MyQueue();<br>queue.push(1);<br>queue.push(2);<br>queue.peek();  // 返回 1<br>queue.pop();   // 返回 1<br>queue.empty(); // 返回 false  </p></blockquote><p><strong>说明:</strong> </p><blockquote><ul><li>你只能使用标准的栈操作 – 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。</li><li>你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。  </li><li>假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。</li></ul></blockquote><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p>用一个栈进行插入操作，要得到栈的第一个插入的元素需要再用一个栈将第一个栈中的元素次序翻转过来，得到第一个元素，再依次压栈回去。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyQueue</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Stack&lt;Integer&gt; stack;</span><br><span class="line">    <span class="keyword">public</span> Stack&lt;Integer&gt; reverse;</span><br><span class="line">    <span class="comment">/** Initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        reverse = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Push element x to the back of queue. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        stack.push(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!stack.empty())&#123;</span><br><span class="line">            reverse.push(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result = reverse.pop();</span><br><span class="line">        <span class="keyword">while</span>(!reverse.empty())&#123;</span><br><span class="line">            stack.push(reverse.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Get the front element. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(!stack.empty())&#123;</span><br><span class="line">            reverse.push(stack.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> result = reverse.peek();</span><br><span class="line">        <span class="keyword">while</span>(!reverse.empty())&#123;</span><br><span class="line">            stack.push(reverse.pop());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** Returns whether the queue is empty. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">empty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> stack.empty();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Your MyQueue object will be instantiated and called as such:</span></span><br><span class="line"><span class="comment"> * MyQueue obj = new MyQueue();</span></span><br><span class="line"><span class="comment"> * obj.push(x);</span></span><br><span class="line"><span class="comment"> * int param_2 = obj.pop();</span></span><br><span class="line"><span class="comment"> * int param_3 = obj.peek();</span></span><br><span class="line"><span class="comment"> * boolean param_4 = obj.empty();</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;&lt;a href=&quot;#原题&quot; class=&quot;headerlink&quot; title=&quot;原题&quot;&gt;&lt;/a&gt;原题&lt;/h1&gt;&lt;p&gt;使用栈实现队列的下列操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;push(x) – 将一个元素放入队列的尾部。&lt;/li&gt;
&lt;li&gt;pop() – 从队
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="队列" scheme="https://www.codetool.top/tags/%E9%98%9F%E5%88%97/"/>
    
      <category term="栈" scheme="https://www.codetool.top/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>leetcode94-二叉树的中序遍历</title>
    <link href="https://www.codetool.top/article/leetcode94-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
    <id>https://www.codetool.top/article/leetcode94-二叉树的中序遍历/</id>
    <published>2019-12-12T12:35:53.000Z</published>
    <updated>2019-12-13T04:43:46.647Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h1><p>给定一个二叉树，返回它的 <em>中序</em> 遍历。</p><p><strong>示例:</strong></p><blockquote><p><strong>输入:</strong> [1,null,2,3]<br>&nbsp;&nbsp;&nbsp;1<br>&nbsp;&nbsp;&nbsp;&nbsp;\<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2<br>&nbsp;&nbsp;&nbsp;&nbsp;/<br>&nbsp;&nbsp;&nbsp;3<br><strong>输出:</strong> [1,3,2]  </p></blockquote><p><strong>进阶:</strong> 递归算法很简单，你可以通过迭代算法完成吗？</p><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p>DFS，递归方法着实很简单，迭代很抽象。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>递归：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for a binary tree node.</span></span><br><span class="line"><span class="comment"> * public class TreeNode &#123;</span></span><br><span class="line"><span class="comment"> *     int val;</span></span><br><span class="line"><span class="comment"> *     TreeNode left;</span></span><br><span class="line"><span class="comment"> *     TreeNode right;</span></span><br><span class="line"><span class="comment"> *     TreeNode(int x) &#123; val = x; &#125;</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            inorderTraversal(root.left);</span><br><span class="line">            ans.add(root.val);</span><br><span class="line">            inorderTraversal(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>迭代，我一开始这么写的，用一个HashSet记录栈存储过的节点：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        List&lt;Integer&gt; ans = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Set&lt;TreeNode&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="keyword">null</span>) <span class="keyword">return</span> ans;</span><br><span class="line">        <span class="keyword">while</span>(!stack.empty())&#123;</span><br><span class="line">            TreeNode node = stack.peek();</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">null</span>!=node.left &amp;&amp; !set.contains(node.left)) &#123;</span><br><span class="line">            stack.push(node.left);</span><br><span class="line">            set.add(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                ans.add(node.val);</span><br><span class="line">                stack.pop();</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">null</span>!=node.right) </span><br><span class="line">                    stack.push(node.right);</span><br><span class="line">                node = <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后看到官方的写法，这才是递归转化过来的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Stack&lt;TreeNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        TreeNode curr = root;</span><br><span class="line">        <span class="keyword">while</span> (curr != <span class="keyword">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (curr != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(curr);</span><br><span class="line">                curr = curr.left;</span><br><span class="line">            &#125;</span><br><span class="line">            curr = stack.pop();</span><br><span class="line">            res.add(curr.val);</span><br><span class="line">            curr = curr.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;&lt;a href=&quot;#原题&quot; class=&quot;headerlink&quot; title=&quot;原题&quot;&gt;&lt;/a&gt;原题&lt;/h1&gt;&lt;p&gt;给定一个二叉树，返回它的 &lt;em&gt;中序&lt;/em&gt; 遍历。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquo
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="DFS" scheme="https://www.codetool.top/tags/DFS/"/>
    
      <category term="树" scheme="https://www.codetool.top/tags/%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>leetcode494-目标和</title>
    <link href="https://www.codetool.top/article/leetcode494-%E7%9B%AE%E6%A0%87%E5%92%8C/"/>
    <id>https://www.codetool.top/article/leetcode494-目标和/</id>
    <published>2019-12-12T11:01:45.000Z</published>
    <updated>2019-12-12T11:05:23.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h1><p>给定一个非负整数数组，a1, a2, …, an, 和一个目标数，S。现在你有两个符号 + 和 -。对于数组中的任意一个整数，你都可以从 + 或 -中选择一个符号添加在前面。</p><p>返回可以使最终数组和为目标数 S 的所有添加符号的方法数。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> nums: [1, 1, 1, 1, 1], S: 3<br><strong>输出:</strong> 5<br><strong>解释:</strong><br>-1+1+1+1+1 = 3<br>+1-1+1+1+1 = 3<br>+1+1-1+1+1 = 3<br>+1+1+1-1+1 = 3<br>+1+1+1+1-1 = 3<br>一共有5种方法让最终目标和为3。   </p></blockquote><p><strong>注意:</strong></p><ol><li>数组非空，且长度不会超过20。</li><li>初始的数组的和不会超过1000。</li><li>保证返回的最终结果能被32位整数存下。</li></ol><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p>DFS比较暴力，追求时间快可以用01背包问题的动态规划思想，以后更。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] numsArray;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> target;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findTargetSumWays</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> S)</span> </span>&#123;</span><br><span class="line">        numsArray = nums;</span><br><span class="line">        target = S;</span><br><span class="line">        <span class="keyword">return</span> dfs(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> index,<span class="keyword">int</span> sum)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index == numsArray.length)&#123;</span><br><span class="line">            <span class="keyword">if</span>(sum == target) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dfs(index+<span class="number">1</span>,sum+numsArray[index])+dfs(index+<span class="number">1</span>,sum-numsArray[index]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;&lt;a href=&quot;#原题&quot; class=&quot;headerlink&quot; title=&quot;原题&quot;&gt;&lt;/a&gt;原题&lt;/h1&gt;&lt;p&gt;给定一个非负整数数组，a1, a2, …, an, 和一个目标数，S。现在你有两个符号 + 和 -。对于数组中的任意一个整数，你都可以从 +
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="DFS" scheme="https://www.codetool.top/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>leetcode133-克隆图</title>
    <link href="https://www.codetool.top/article/leetcode133-%E5%85%8B%E9%9A%86%E5%9B%BE/"/>
    <id>https://www.codetool.top/article/leetcode133-克隆图/</id>
    <published>2019-12-12T07:42:25.000Z</published>
    <updated>2019-12-12T07:57:24.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h1><p>给定无向连通图中一个节点的引用，返回该图的深拷贝（克隆）。图中的每个节点都包含它的值 <code>val</code>（<code>Int</code>） 和其邻居的列表（<code>list[Node]</code>）。</p><p><strong>示例:</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/12/Q6Md3j.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p><strong>输入:</strong> <code>{&quot;$id&quot;:&quot;1&quot;,&quot;neighbors&quot;:[{&quot;$id&quot;:&quot;2&quot;,&quot;neighbors&quot;:[{&quot;$ref&quot;:&quot;1&quot;},{&quot;$id&quot;:&quot;3&quot;,&quot;neighbors&quot;:[{&quot;$ref&quot;:&quot;2&quot;},{&quot;$id&quot;:&quot;4&quot;,&quot;neighbors&quot;:[{&quot;$ref&quot;:&quot;3&quot;},{&quot;$ref&quot;:&quot;1&quot;}],&quot;val&quot;:4}],&quot;val&quot;:3}],&quot;val&quot;:2},{&quot;$ref&quot;:&quot;4&quot;}],&quot;val&quot;:1}</code><br><strong>解释:</strong><br>节点 1 的值是 1，它有两个邻居：节点 2 和 4 。<br>节点 2 的值是 2，它有两个邻居：节点 1 和 3 。<br>节点 3 的值是 3，它有两个邻居：节点 2 和 4 。<br>节点 4 的值是 4，它有两个邻居：节点 1 和 3 。</p></blockquote><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p>Hashmap维持原图节点和克隆节点的对应关系，如果给邻居节点赋值的时候不存在对应的克隆节点则获取对应的克隆节点，直到有一个节点的邻居节点的克隆节点都存在于map中。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">// Definition for a Node.</span></span><br><span class="line"><span class="comment">class Node &#123;</span></span><br><span class="line"><span class="comment">    public int val;</span></span><br><span class="line"><span class="comment">    public List&lt;Node&gt; neighbors;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node() &#123;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public Node(int _val,List&lt;Node&gt; _neighbors) &#123;</span></span><br><span class="line"><span class="comment">        val = _val;</span></span><br><span class="line"><span class="comment">        neighbors = _neighbors;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//hashmap维持原图和克隆图之间节点的对应关系</span></span><br><span class="line">    Map&lt;Node, Node&gt; lookup;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Node <span class="title">cloneGraph</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        lookup = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> dfs(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Node <span class="title">dfs</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (node == <span class="keyword">null</span>) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//存在对应的克隆节点直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (lookup.containsKey(node)) <span class="keyword">return</span> lookup.get(node);</span><br><span class="line">        <span class="comment">//先创建对应的克隆节点，邻居列表在递归返回的时候添加。</span></span><br><span class="line">        Node clone = <span class="keyword">new</span> Node(node.val, <span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        lookup.put(node, clone);</span><br><span class="line">        <span class="keyword">for</span> (Node n : node.neighbors)</span><br><span class="line">            <span class="comment">//如果map中存在克隆节点就能添加了</span></span><br><span class="line">            clone.neighbors.add(dfs(n));</span><br><span class="line">        <span class="keyword">return</span> clone;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;&lt;a href=&quot;#原题&quot; class=&quot;headerlink&quot; title=&quot;原题&quot;&gt;&lt;/a&gt;原题&lt;/h1&gt;&lt;p&gt;给定无向连通图中一个节点的引用，返回该图的深拷贝（克隆）。图中的每个节点都包含它的值 &lt;code&gt;val&lt;/code&gt;（&lt;code&gt;Int&lt;
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="DFS" scheme="https://www.codetool.top/tags/DFS/"/>
    
      <category term="图" scheme="https://www.codetool.top/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>leetcode150-逆波兰表达式求值</title>
    <link href="https://www.codetool.top/article/leetcode150-%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/"/>
    <id>https://www.codetool.top/article/leetcode150-逆波兰表达式求值/</id>
    <published>2019-12-12T06:08:04.000Z</published>
    <updated>2019-12-12T06:24:01.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h1><p>根据逆波兰表示法，求表达式的值。</p><p>有效的运算符包括 <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code> 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p><p>说明：</p><ul><li>整数除法只保留整数部分。</li><li>给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。</li></ul><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> [“2”, “1”, “+”, “3”, “*”]<br><strong>输出:</strong> 9<br><strong>解释:</strong> ((2 + 1) * 3) = 9  </p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> [“4”, “13”, “5”, “/“, “+”]<br><strong>输出:</strong> 6<br><strong>解释:</strong> (4 + (13 / 5)) = 6</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> [“10”, “6”, “9”, “3”, “+”, “-11”, “*”, “/“, “*”, “17”, “+”, “5”, “+”]<br><strong>输出:</strong> 22<br><strong>解释:</strong><br>&nbsp;&nbsp;((10 * (6 / ((9 + 3) * -11))) + 17) + 5<br>=&nbsp;((10 * (6 / (12 * -11))) + 17) + 5<br>=&nbsp;((10 * (6 / -132)) + 17) + 5<br>=&nbsp;((10 * 0) + 17) + 5<br>=&nbsp;(0 + 17) + 5<br>=&nbsp;17 + 5<br>=&nbsp;22  </p></blockquote><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p>最底层必是一个能运算的最小单元，只要将后序遍历的结果依次入栈，遇到一个运算符则让两个数字出栈，计算结果之后再将结果入栈，如此循环最后就能得到答案。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/12/QyO8jx.png" alt="QyO8jx.png" title="逆波兰表达式">                </div>                <div class="image-caption">逆波兰表达式</div>            </figure><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">evalRPN</span><span class="params">(String[] tokens)</span> </span>&#123;</span><br><span class="line">        Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(String i:tokens)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i.equals(<span class="string">"+"</span>))&#123;</span><br><span class="line">                <span class="keyword">int</span> num1 = Integer.valueOf(stack.pop());</span><br><span class="line">                <span class="keyword">int</span> num2 = Integer.valueOf(stack.pop());</span><br><span class="line">                stack.push(num1+num2);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i.equals(<span class="string">"-"</span>))&#123;</span><br><span class="line">                <span class="keyword">int</span> num1 = Integer.valueOf(stack.pop());</span><br><span class="line">                <span class="keyword">int</span> num2 = Integer.valueOf(stack.pop());</span><br><span class="line">                stack.push(num2-num1);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i.equals(<span class="string">"*"</span>))&#123;</span><br><span class="line">                <span class="keyword">int</span> num1 = Integer.valueOf(stack.pop());</span><br><span class="line">                <span class="keyword">int</span> num2 = Integer.valueOf(stack.pop());</span><br><span class="line">                stack.push(num1*num2);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i.equals(<span class="string">"/"</span>))&#123;</span><br><span class="line">                <span class="keyword">int</span> num1 = Integer.valueOf(stack.pop());</span><br><span class="line">                <span class="keyword">int</span> num2 = Integer.valueOf(stack.pop());</span><br><span class="line">                stack.push(num2/num1);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stack.push(Integer.valueOf(i));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;&lt;a href=&quot;#原题&quot; class=&quot;headerlink&quot; title=&quot;原题&quot;&gt;&lt;/a&gt;原题&lt;/h1&gt;&lt;p&gt;根据逆波兰表示法，求表达式的值。&lt;/p&gt;
&lt;p&gt;有效的运算符包括 &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;-&lt;/code&gt;, &lt;code
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="栈" scheme="https://www.codetool.top/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>leetcode739-每日温度</title>
    <link href="https://www.codetool.top/article/leetcode739-%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/"/>
    <id>https://www.codetool.top/article/leetcode739-每日温度/</id>
    <published>2019-12-11T09:00:18.000Z</published>
    <updated>2019-12-11T09:19:59.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h1><p>根据每日 <code>气温</code> 列表，请重新生成一个列表，对应位置的输入是你需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用 <code>0</code> 来代替。</p><p>例如，给定一个列表 <code>temperatures = [73, 74, 75, 71, 69, 72, 76, 73]</code>，你的输出应该是 <code>[1, 1, 4, 2, 1, 1, 0, 0]</code>。</p><p><strong>提示：</strong> <code>气温</code> 列表长度的范围是 <code>[1, 30000]</code>。每个气温的值的均为华氏度，都是在 <code>[30, 100]</code> 范围内的整数。</p><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><ol><li>基础栈解法：<code>时间复杂度O(nlog n)</code><br> 将数组元素依次入栈，如果当前元素比栈首元素大则将栈首元素出栈，并知道了和栈首元素之间的距离。再次和下一个栈首元素比较，如此循环。</li><li>逆序跳跃：<code>时间复杂度O(n)</code><br> <a href="https://leetcode-cn.com/problems/daily-temperatures/solution/jie-ti-si-lu-by-pulsaryu/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/daily-temperatures/solution/jie-ti-si-lu-by-pulsaryu/</a></li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ol><li>基础栈</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> pos;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value,<span class="keyword">int</span> pos)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.pos = pos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] dailyTemperatures(<span class="keyword">int</span>[] T) &#123;</span><br><span class="line">        Stack&lt;Node&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[T.length];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;T.length;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span>(!stack.empty()&amp;&amp;T[i]&gt;stack.peek().value)&#123;</span><br><span class="line">                Node node = stack.pop();</span><br><span class="line">                ans[node.pos] = i - node.pos;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(<span class="keyword">new</span> Node(T[i],i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!stack.empty())&#123;</span><br><span class="line">            Node node = stack.pop();</span><br><span class="line">            ans[node.pos] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>逆序跳跃（作者：pulsaryu）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] dailyTemperatures(<span class="keyword">int</span>[] T) &#123;</span><br><span class="line">    <span class="keyword">int</span> length = T.length;</span><br><span class="line">    <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[length];</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从右向左遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="comment">// j+= result[j]是利用已经有的结果进行跳跃</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt; length; j+= result[j]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (T[j] &gt; T[i]) &#123;</span><br><span class="line">                result[i] = j - i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (result[j] == <span class="number">0</span>) &#123; <span class="comment">//遇到0表示后面不会有更大的值，那当然当前值就应该也为0</span></span><br><span class="line">                result[i] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;&lt;a href=&quot;#原题&quot; class=&quot;headerlink&quot; title=&quot;原题&quot;&gt;&lt;/a&gt;原题&lt;/h1&gt;&lt;p&gt;根据每日 &lt;code&gt;气温&lt;/code&gt; 列表，请重新生成一个列表，对应位置的输入是你需要再等待多久温度才会升高超过该日的天数。如果之后都不
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="栈" scheme="https://www.codetool.top/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>leetcode20-有效的括号</title>
    <link href="https://www.codetool.top/article/leetcode20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
    <id>https://www.codetool.top/article/leetcode20-有效的括号/</id>
    <published>2019-12-11T08:51:26.000Z</published>
    <updated>2019-12-11T08:56:38.615Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h1><p>给定一个只包括 <code>&#39;(&#39;</code>，<code>&#39;)&#39;</code>，<code>&#39;{&#39;</code>，<code>&#39;}&#39;</code>，<code>&#39;[&#39;</code>，<code>&#39;]&#39;</code> 的字符串，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><p>注意空字符串可被认为是有效字符串。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> “()”<br><strong>输出:</strong> true</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入:</strong> “()[]{}”<br><strong>输出:</strong> true</p></blockquote><p><strong>示例3:</strong></p><blockquote><p><strong>输入:</strong> “(]”<br><strong>输出:</strong> false</p></blockquote><p><strong>示例4:</strong></p><blockquote><p><strong>输入:</strong> “([)]”<br><strong>输出:</strong> false</p></blockquote><p><strong>示例5:</strong></p><blockquote><p><strong>输入:</strong> “{[]}”<br><strong>输出:</strong> true</p></blockquote><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p>左括号全部入栈，如果是右括号寻找栈首是否为对应的左括号，存在就将左括号出栈，直到栈元素全部清空。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s.equals(<span class="string">""</span>)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c:s.toCharArray())&#123;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">'('</span>||c==<span class="string">'['</span>||c==<span class="string">'&#123;'</span>)&#123;</span><br><span class="line">                stack.push(c);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">')'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!stack.empty()&amp;&amp;stack.peek().equals(<span class="string">'('</span>)) stack.pop();</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">']'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!stack.empty()&amp;&amp;stack.peek().equals(<span class="string">'['</span>)) stack.pop();</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(c == <span class="string">'&#125;'</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(!stack.empty()&amp;&amp;stack.peek().equals(<span class="string">'&#123;'</span>)) stack.pop();</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(stack.empty()) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;&lt;a href=&quot;#原题&quot; class=&quot;headerlink&quot; title=&quot;原题&quot;&gt;&lt;/a&gt;原题&lt;/h1&gt;&lt;p&gt;给定一个只包括 &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt;，&lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt;，&lt;code&gt;&amp;#39;{
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="栈" scheme="https://www.codetool.top/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>leetcode155-最小栈</title>
    <link href="https://www.codetool.top/article/leetcode155-%E6%9C%80%E5%B0%8F%E6%A0%88/"/>
    <id>https://www.codetool.top/article/leetcode155-最小栈/</id>
    <published>2019-12-11T08:42:41.000Z</published>
    <updated>2019-12-12T07:43:10.144Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h1><p>设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。</p><ul><li>push(x) – 将元素 x 推入栈中。</li><li>pop() – 删除栈顶的元素。</li><li>top() – 获取栈顶元素。</li><li>getMin() – 检索栈中的最小元素。</li></ul><p><strong>示例:</strong></p><blockquote><p>MinStack minStack = new MinStack();<br>minStack.push(-2);<br>minStack.push(0);<br>minStack.push(-3);<br>minStack.getMin();   –&gt; 返回 -3.<br>minStack.pop();<br>minStack.top();      –&gt; 返回 0.<br>minStack.getMin();   –&gt; 返回 -2.  </p></blockquote><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p>用list实现栈，再用一个stack保存着入栈期间出现过的所有最小数。（栈首元素表示在某个时刻list中最小的数）。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MinStack</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Integer&gt; list;</span><br><span class="line">    <span class="keyword">public</span> Stack&lt;Integer&gt; stack;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** initialize your data structure here. */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MinStack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//添加元素时，如果最小数栈是空的或者该元素比栈首元素要小，则入栈</span></span><br><span class="line">        <span class="keyword">if</span>(stack.empty()||x&lt;=stack.peek()) stack.push(x);</span><br><span class="line">        list.add(x);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//移除元素时，如果移除的元素是最小数栈的栈首元素，那么栈首元素也要出栈</span></span><br><span class="line">        <span class="keyword">if</span>(stack.peek().equals(list.get(list.size()-<span class="number">1</span>)))</span><br><span class="line">            stack.pop();</span><br><span class="line">        list.remove(list.size()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list.get(list.size()-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//最小数栈的栈首元素</span></span><br><span class="line">        <span class="keyword">return</span> stack.peek();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;&lt;a href=&quot;#原题&quot; class=&quot;headerlink&quot; title=&quot;原题&quot;&gt;&lt;/a&gt;原题&lt;/h1&gt;&lt;p&gt;设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;push(x) – 将元素 x
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="数据结构" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="栈" scheme="https://www.codetool.top/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>leetcode279-完全平方数</title>
    <link href="https://www.codetool.top/article/leetcode279-%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/"/>
    <id>https://www.codetool.top/article/leetcode279-完全平方数/</id>
    <published>2019-12-11T08:10:25.000Z</published>
    <updated>2019-12-11T09:36:32.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h1><p>给定正整数 <em>n</em>，找到若干个完全平方数（比如 1, 4, 9, 16, …）使得它们的和等于 <em>n</em>。你需要让组成和的完全平方数的个数最少。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> n = 12<br><strong>输出:</strong> 3<br><strong>解释:</strong> 12 = 4 + 4 + 4.  </p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> n = 13<br><strong>输出:</strong> 2<br><strong>解释:</strong> 13 = 4 + 9.  </p></blockquote><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p>以12为例。</p><p>这道题确实对时间要求比较严格，如果不过滤掉重复计算的部分会无法通过。</p><p>从目标数出发自顶向下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/11/QsnGnO.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>由已知的目标数出发，减去比它小的平方数，这样一层一层减下去，直到获得0的那一层的层数就是答案。</p><p>需要过滤掉数值重复的节点，比如11-4和8-1。</p><p>从平方数出发自底向上：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/11/Qsnh3q.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>由比已知目标数小的所有平方数出发，每层做一个组合加法，但是有一些地方需要处理：</p><ol><li>遇到数值相等的节点，如1+4和4+1，跳过该节点。</li><li>在组合的时候遇到从一个数开始，加上它就会大于目标数，那么它之后的平方数都可以不做组合了，因为都比它大。</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>自顶向下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> depth;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value,<span class="keyword">int</span> depth)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.depth = depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numSquares</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mark[] = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">4</span>) <span class="keyword">return</span> n;</span><br><span class="line">        Queue&lt;Node&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(<span class="keyword">new</span> Node(n,<span class="number">0</span>));</span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            Node node = queue.poll();</span><br><span class="line">            <span class="keyword">if</span>(node.value==<span class="number">0</span>) <span class="keyword">return</span> node.depth; </span><br><span class="line">            <span class="keyword">int</span> sqrt = (<span class="keyword">int</span>)Math.sqrt(node.value);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = sqrt; i &gt; <span class="number">0</span> ; i--)&#123;</span><br><span class="line">                <span class="keyword">if</span>(mark[node.value-i*i]==<span class="number">0</span>)&#123;</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> Node(node.value-i*i,node.depth+<span class="number">1</span>));</span><br><span class="line">                    mark[node.value-i*i] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自底向上</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> depth;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(<span class="keyword">int</span> value,<span class="keyword">int</span> depth)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.depth = depth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numSquares</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        Queue&lt;Node&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> a = (<span class="keyword">int</span>)Math.sqrt(n);</span><br><span class="line">        <span class="keyword">int</span>[] mark = <span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = a;i&gt;a/<span class="number">2</span>;i--)&#123;</span><br><span class="line">            queue.offer(<span class="keyword">new</span> Node(i*i,<span class="number">1</span>));</span><br><span class="line">            mark[i*i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">            Node node = queue.poll();</span><br><span class="line">            <span class="keyword">int</span> value = node.value;</span><br><span class="line">            <span class="keyword">if</span>(value==n) <span class="keyword">return</span> node.depth;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=a;i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(value+i*i&gt;n) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span>(mark[value+i*i]==<span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">                queue.offer(<span class="keyword">new</span> Node(value+i*i,node.depth+<span class="number">1</span>));</span><br><span class="line">                mark[value+i*i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;&lt;a href=&quot;#原题&quot; class=&quot;headerlink&quot; title=&quot;原题&quot;&gt;&lt;/a&gt;原题&lt;/h1&gt;&lt;p&gt;给定正整数 &lt;em&gt;n&lt;/em&gt;，找到若干个完全平方数（比如 1, 4, 9, 16, …）使得它们的和等于 &lt;em&gt;n&lt;/em&gt;。你需要让
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="BFS" scheme="https://www.codetool.top/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>用hexo的live2d插件做了一个可以聊天的小宠物</title>
    <link href="https://www.codetool.top/article/%E7%94%A8hexo%E7%9A%84live2d%E6%8F%92%E4%BB%B6%E5%81%9A%E4%BA%86%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E8%81%8A%E5%A4%A9%E7%9A%84%E5%B0%8F%E5%AE%A0%E7%89%A9/"/>
    <id>https://www.codetool.top/article/用hexo的live2d插件做了一个可以聊天的小宠物/</id>
    <published>2019-12-10T10:49:52.000Z</published>
    <updated>2019-12-10T13:46:31.787Z</updated>
    
    <content type="html"><![CDATA[<p>今天觉得我的博客有点小小的简陋，就做了一点美化工作</p><p>主要使用hexo的live2d插件（感谢作者），搭配上机器人对话api，做了一个可以聊天的小宠物。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/10/QD1vCj.png" alt="效果图" title="">                </div>                <div class="image-caption">效果图</div>            </figure><p>本来是在<a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">live2d的github主页</a>上看到了有dialog这个配置选项，一开始以为就是可以配置一个交互式的聊天窗口。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/10/QDwX38.png" alt="dialog配置" title="">                </div>                <div class="image-caption">dialog配置</div>            </figure><p>然后发现使用一言api只是过个几秒钟给你弹一句话看看，也没有其他的api选项可以配置，在百度上一搜好像也没有多少人写过关于这个dialog的用法。</p><p>然后我看了下它生成的源码：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/10/QD0I2T.png" alt="组件结构" title="">                </div>                <div class="image-caption">组件结构</div>            </figure><p><code>live2d-widget</code>是整个组件的div，里面有一个<code>live2d-widget-dialog</code>就是卡通形象上面的那个对话框，<code>live2dcanvas</code>就是画卡通形象的画布。如果要让对话框显示文字，就是修改class名为<code>live2d-widget-dialog</code>的div的innerHtml。</p><p>既然没有提供相关的对话api，那就手动做一个吧。</p><h1 id="live2d安装"><a href="#live2d安装" class="headerlink" title="live2d安装"></a>live2d安装</h1><p>你既然看到了这篇文章，我就假设你知道live2d是什么 <del>(看板娘)</del> 。在hexo安装live2d插件的方式很简单：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>然后选一个心仪的模型安装，模型的预览可以参考插件作者的博客：</p><p><a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">https://huaji8.top/post/live2d-plugin-2.0/</a></p><p>模型的名称参考：</p><p><a href="https://github.com/xiazeyu/live2d-widget-models" target="_blank" rel="noopener">https://github.com/xiazeyu/live2d-widget-models</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save 模型名称</span><br></pre></td></tr></table></figure><p>然后在hexo根目录下的<code>_config.yml</code>中配置live2d：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#live2d</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">    <span class="attr">model:</span> </span><br><span class="line">        <span class="attr">use:</span> <span class="string">live2d-widget-model-wanko</span> <span class="comment">#模型选择</span></span><br><span class="line"><span class="attr">display:</span> </span><br><span class="line">        <span class="attr">position:</span> <span class="string">right</span> <span class="comment">#模型位置</span></span><br><span class="line">        <span class="attr">width:</span> <span class="number">200</span>      <span class="comment">#模型宽度</span></span><br><span class="line">        <span class="attr">height:</span> <span class="number">200</span>     <span class="comment">#模型高度</span></span><br><span class="line">        <span class="attr">hOffset:</span> <span class="number">20</span>     <span class="comment">#水平偏移</span></span><br><span class="line">        <span class="attr">vOffset:</span> <span class="number">100</span>    <span class="comment">#垂直偏移</span></span><br><span class="line">    <span class="attr">mobile:</span> </span><br><span class="line">        <span class="attr">show:</span> <span class="literal">false</span>     <span class="comment">#是否在手机端显示</span></span><br><span class="line">    <span class="attr">dialog:</span></span><br><span class="line">        <span class="attr">enable:</span> <span class="literal">true</span>    <span class="comment">#启用对话框</span></span><br><span class="line">        <span class="attr">hitokoto:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>具体的配置可以参考：</p><p><a href="https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init" target="_blank" rel="noopener">https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init</a></p><h1 id="组件改造"><a href="#组件改造" class="headerlink" title="组件改造"></a>组件改造</h1><h2 id="在模型下方增加一个input输入框"><a href="#在模型下方增加一个input输入框" class="headerlink" title="在模型下方增加一个input输入框"></a>在模型下方增加一个input输入框</h2><p>因为我把模型放在了右边，并且水平偏移和垂直偏移都是已知的。<br>要在它的下方增加一个输入框，找到hexo中<code>/themes/你的主题/layout/layout.ejs</code>文件，在里面body标签中末尾添加：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"chat_input"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"question"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"陪我聊聊天吧"</span> <span class="attr">onkeypress</span>=<span class="string">"return onKeyPress(event)"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在文件尾部配置它的样式：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt; </span><br><span class="line"><span class="selector-id">#chat_input</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">bottom</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">20px</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="selector-id">#question</span>&#123;</span><br><span class="line">    <span class="attribute">border</span>: none;<span class="comment">/*取消输入框边框*/</span></span><br><span class="line">    <span class="attribute">border-bottom</span>: <span class="number">1px</span> <span class="number">#aaaaaa</span> solid;<span class="comment">/*设置下边框*/</span></span><br><span class="line">    <span class="attribute">background-color</span>: transparent;<span class="comment">/*背景透明*/</span></span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*手机端不显示*/</span></span><br><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">480px</span>) &#123;</span><br><span class="line">    <span class="selector-id">#chat_input</span>&#123;</span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-id">#live2d-widget</span>&#123;</span><br><span class="line">        <span class="attribute">display</span>: none;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>输入框就做好了。</p><h2 id="聊天逻辑实现"><a href="#聊天逻辑实现" class="headerlink" title="聊天逻辑实现"></a>聊天逻辑实现</h2><p>要做到智能聊天需要一个聊天机器人的api，有图灵机器人、小i机器人等可以选择。</p><p>我这里用的是茉莉机器人，就不推荐大家使用了，小小吐槽一下这个开发者好像不是很懂后端api，鉴权方式有点奇怪 <del>(人间迷惑行为大赏)</del>。</p><p>获取了api之后就可以做输入框的事件处理：（因为我的主题不包含jQuery我也懒得引，就用的原生js）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在聊天框按下回车事件处理</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onKeyPress</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> keyCode = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(e.which)</span><br><span class="line">        keyCode = e.which;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(e.keyCode)</span><br><span class="line">        keyCode = e.keyCode;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//如果按下回车</span></span><br><span class="line">    <span class="keyword">if</span>(keyCode == <span class="number">13</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取输入框中的问题</span></span><br><span class="line">        <span class="keyword">var</span> question_box = <span class="built_in">document</span>.getElementById(<span class="string">'question'</span>)</span><br><span class="line">        <span class="keyword">var</span> question = question_box.value</span><br><span class="line">        <span class="comment">//清空输入框内容并禁用输入框</span></span><br><span class="line">        question_box.value = <span class="string">""</span></span><br><span class="line">        question_box.setAttribute(<span class="string">"disabled"</span>,<span class="string">"disabled"</span>)</span><br><span class="line">        <span class="comment">//不要问我为什么不隐藏这个:）</span></span><br><span class="line">        <span class="keyword">var</span> api_key = <span class="string">"78c33a07808c7b9e1905c89c88b3be14"</span></span><br><span class="line">        <span class="keyword">var</span> api_secret = <span class="string">"q707tevnk00f"</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过XHR发送一个GET请求</span></span><br><span class="line">        <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">        xhr.open(<span class="string">'GET'</span>,<span class="string">'http://i.itpk.cn/api.php?question='</span>+<span class="built_in">encodeURIComponent</span>(question)+<span class="string">"&amp;api_key="</span>+api_key+<span class="string">"&amp;api_secret="</span>+api_secret)</span><br><span class="line">        xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="comment">//启用输入框</span></span><br><span class="line">            question_box.removeAttribute(<span class="string">'disabled'</span>);</span><br><span class="line">            <span class="comment">//获取对话框</span></span><br><span class="line">            <span class="keyword">var</span> live2d_dialog = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"live2d-widget-dialog"</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="comment">//显示对话框并把获取到的内容显示在对话框上</span></span><br><span class="line">            live2d_dialog.style.opacity=<span class="number">1</span></span><br><span class="line">            live2d_dialog.innerHTML = <span class="keyword">this</span>.responseText</span><br><span class="line">            <span class="comment">//五秒后隐藏对话框</span></span><br><span class="line">            <span class="built_in">window</span>.setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">                live2d_dialog.style.opacity=<span class="number">0</span></span><br><span class="line">            &#125;, <span class="number">5000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>需要注意的是：</p><ol><li>一般api都不允许js跨域，需要用自己的服务器代理一下或者做一下中间处理（把认证的东西放自己服务器上）</li><li>我这里没把认证key和secret放自己服务器的原因是。。。这个api看上去就很不安全啊，没必要多此一举。</li><li>一般api用的是POST请求并且需要解析返回的JSON数据，我这里没有大家懂的都懂: )</li></ol><hr><p>20:43补充：</p><p>谁知道我最后还是用了自己的服务器代理😀，因为我发现https网站发送不了http请求。</p><p>嘻嘻，说不定哪天我就换个api用了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天觉得我的博客有点小小的简陋，就做了一点美化工作&lt;/p&gt;
&lt;p&gt;主要使用hexo的live2d插件（感谢作者），搭配上机器人对话api，做了一个可以聊天的小宠物。&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div
      
    
    </summary>
    
    
      <category term="日常/随笔" scheme="https://www.codetool.top/categories/%E6%97%A5%E5%B8%B8-%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="网站日志" scheme="https://www.codetool.top/tags/%E7%BD%91%E7%AB%99%E6%97%A5%E5%BF%97/"/>
    
      <category term="hexo" scheme="https://www.codetool.top/tags/hexo/"/>
    
      <category term="JavaScript" scheme="https://www.codetool.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>leetcode752-打开转盘锁</title>
    <link href="https://www.codetool.top/article/leetcode752-%E6%89%93%E5%BC%80%E8%BD%AC%E7%9B%98%E9%94%81/"/>
    <id>https://www.codetool.top/article/leetcode752-打开转盘锁/</id>
    <published>2019-12-09T14:54:05.000Z</published>
    <updated>2019-12-10T10:48:26.108Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题"><a href="#原题" class="headerlink" title="原题"></a>原题</h1><p>你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： <code>&#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;</code>。每个拨轮可以自由旋转：例如把<code>&#39;9&#39;</code> 变为  <code>&#39;0&#39;</code>，<code>&#39;0&#39;</code>变为 <code>&#39;9&#39;</code> 。每次旋转都只能旋转一个拨轮的一位数字。</p><p>锁的初始数字为 <code>&#39;0000&#39;</code> ，一个代表四个拨轮的数字的字符串。</p><p>列表 <code>deadends</code> 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。</p><p>字符串 <code>target</code> 代表可以解锁的数字，你需要给出最小的旋转次数，如果无论如何不能解锁，返回 <code>-1</code>。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> deadends = [“0201”,”0101”,”0102”,”1212”,”2002”], target = “0202”<br><strong>输出：</strong> 6<br><strong>解释：</strong><br>可能的移动序列为 “0000” -&gt; “1000” -&gt; “1100” -&gt; “1200” -&gt; “1201” -&gt; “1202” -&gt; “0202”。<br>注意 “0000” -&gt; “0001” -&gt; “0002” -&gt; “0102” -&gt; “0202” 这样的序列是不能解锁的，<br>因为当拨动到 “0102” 时这个锁就会被锁定。</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> deadends = [“8888”], target = “0009”<br><strong>输出：</strong> 1<br><strong>解释：</strong><br>把最后一位反向旋转一次即可 “0000” -&gt; “0009”。</p></blockquote><p><strong>示例 3:</strong></p><blockquote><p><strong>输入:</strong> deadends = [“8887”,”8889”,”8878”,”8898”,”8788”,”8988”,”7888”,”9888”], target = “8888”<br><strong>输出：</strong> -1<br><strong>解释：</strong><br>无法旋转到目标数字且不被锁定。</p></blockquote><p><strong>示例 4:</strong></p><blockquote><p><strong>输入:</strong> deadends = [“0000”], target = “8888”<br><strong>输出：</strong> -1</p></blockquote><p><strong>提示：</strong></p><ol><li>死亡列表 deadends 的长度范围为 [1, 500]。</li><li>目标数字 target 不会在 deadends 之中。</li><li>每个 deadends 和 target 中的字符串的数字会在 10,000 个可能的情况 ‘0000’ 到 ‘9999’ 中产生。</li></ol><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p>其实是一个树的BFS搜索问题：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/12/10/QDKvX8.png" alt="每层示意图" title="">                </div>                <div class="image-caption">每层示意图</div>            </figure><p>用Queue来得到每层的节点。</p><p>主要需要注意的地方有：</p><ul><li>为了避免重复的节点进入队列，可以使用数组记录是否出现过，或是用HashSet记录出现过的节点。</li><li>当遇到死亡数字数组中的元素时也不能将该元素添加至队列中。</li><li>当搜索到题目要求的元素时，为了得到当前层数，有两种方法：<ol><li>用一个数据结构表示节点，记录节点的值和层数。</li><li>每层元素入队列之后再加入一个null元素，每次遍历到null元素即可知道遍历完了了一层。</li></ol></li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>我一开始是这样写的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//节点的数据结构，需要记录层数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String value;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(String value,<span class="keyword">int</span> count)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">openLock</span><span class="params">(String[] deadends, String target)</span> </span>&#123;</span><br><span class="line"><span class="comment">//如果死亡数组中存在0000直接返回-1</span></span><br><span class="line">       <span class="keyword">if</span>(arrayContains(deadends,<span class="string">"0000"</span>)) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"><span class="comment">//标记数组用于记录哪些数字出现过</span></span><br><span class="line">    <span class="keyword">int</span>[] mark = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10000</span>];</span><br><span class="line"><span class="comment">//0000出现过</span></span><br><span class="line">    mark[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    Queue&lt;Node&gt; queue = <span class="keyword">new</span> LinkedList&lt;Node&gt;();</span><br><span class="line">    queue.offer(<span class="keyword">new</span> Node(<span class="string">"0000"</span>,<span class="number">0</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line"><span class="comment">//获取队列头</span></span><br><span class="line">        Node node = queue.poll();</span><br><span class="line">        <span class="keyword">if</span>(node.value.equals(target)) <span class="keyword">return</span> node.count;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">char</span>[] charArray = node.value.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line"><span class="comment">//位于第i位的数字+1，如果是9变成0</span></span><br><span class="line">        <span class="keyword">char</span>[] plusOneCharArray = Arrays.copyOf(charArray,charArray.length);</span><br><span class="line">        plusOneCharArray[i] = (<span class="keyword">char</span>) (charArray[i]==<span class="string">'9'</span>?<span class="string">'0'</span>:charArray[i]+<span class="number">1</span>);</span><br><span class="line">        String plusOne = String.valueOf(plusOneCharArray);</span><br><span class="line">        <span class="keyword">if</span>(plusOne.equals(target)) </span><br><span class="line">        <span class="keyword">return</span> node.count+<span class="number">1</span>;</span><br><span class="line"><span class="comment">//没有出现过且不在死亡数字中才添加至队列中</span></span><br><span class="line">        <span class="keyword">if</span>((!arrayContains(deadends, plusOne))&amp;&amp;mark[Integer.valueOf(plusOne)]==<span class="number">0</span>) &#123;</span><br><span class="line">        queue.offer(<span class="keyword">new</span> Node(plusOne,node.count+<span class="number">1</span>));</span><br><span class="line">        mark[Integer.valueOf(plusOne)] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//位于第i位的数字-1，如果是0变成9        </span></span><br><span class="line">        <span class="keyword">char</span>[] minusOneCharArray = Arrays.copyOf(charArray,charArray.length);</span><br><span class="line">        minusOneCharArray[i] = (<span class="keyword">char</span>) (charArray[i]==<span class="string">'0'</span>?<span class="string">'9'</span>:charArray[i]-<span class="number">1</span>);</span><br><span class="line">        String minusOne = String.valueOf(minusOneCharArray);</span><br><span class="line">        <span class="keyword">if</span>(minusOne.equals(target)) </span><br><span class="line">        <span class="keyword">return</span> node.count+<span class="number">1</span>;</span><br><span class="line"><span class="comment">//没有出现过且不在死亡数字中才添加至队列中</span></span><br><span class="line">        <span class="keyword">if</span>((!arrayContains(deadends, minusOne))&amp;&amp;mark[Integer.valueOf(minusOne)]==<span class="number">0</span>) &#123;</span><br><span class="line">        queue.offer(<span class="keyword">new</span> Node(minusOne,node.count+<span class="number">1</span>));</span><br><span class="line">        mark[Integer.valueOf(minusOne)] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//遍历数组，用于检测死亡数字中是否存在指定的数字</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">arrayContains</span><span class="params">(String[] stringArray,String toFind)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(String i:stringArray) &#123;</span><br><span class="line"><span class="keyword">if</span>(i.equals(toFind)) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后发现上面这种方法需要的时间贼久，最后强行理解了一下发现问题主要出在检测死亡数组中是否存在指定数字的时候，时间开销太高了。</p><p>最后还是换成了用HashSet检测死亡数组中是否存在指定的数字：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String value;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> count;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Node</span><span class="params">(String value,<span class="keyword">int</span> count)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="keyword">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">openLock</span><span class="params">(String[] deadends, String target)</span> </span>&#123;</span><br><span class="line"><span class="comment">//将死亡数字全部加进一个HashSet中</span></span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;String&gt;();</span><br><span class="line">       <span class="keyword">for</span>(String i:deadends) &#123;</span><br><span class="line"><span class="keyword">if</span>(i.equals(<span class="string">"0000"</span>))</span><br><span class="line"><span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            set.add(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] mark = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10000</span>];</span><br><span class="line">    mark[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    Queue&lt;Node&gt; queue = <span class="keyword">new</span> LinkedList&lt;Node&gt;();</span><br><span class="line">    queue.offer(<span class="keyword">new</span> Node(<span class="string">"0000"</span>,<span class="number">0</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(!queue.isEmpty())&#123;</span><br><span class="line">        Node node = queue.poll();</span><br><span class="line">        <span class="keyword">if</span>(node.value.equals(target)) <span class="keyword">return</span> node.count;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">char</span>[] charArray = node.value.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">4</span>;i++) &#123;</span><br><span class="line">        <span class="keyword">char</span>[] plusOneCharArray = Arrays.copyOf(charArray,charArray.length);</span><br><span class="line">        plusOneCharArray[i] = (<span class="keyword">char</span>) (charArray[i]==<span class="string">'9'</span>?<span class="string">'0'</span>:charArray[i]+<span class="number">1</span>);</span><br><span class="line">        String plusOne = String.valueOf(plusOneCharArray);</span><br><span class="line">        <span class="keyword">if</span>(plusOne.equals(target)) </span><br><span class="line">        <span class="keyword">return</span> node.count+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>((!set.contains(plusOne))&amp;&amp;mark[Integer.valueOf(plusOne)]==<span class="number">0</span>) &#123;</span><br><span class="line">        queue.offer(<span class="keyword">new</span> Node(plusOne,node.count+<span class="number">1</span>));</span><br><span class="line">        mark[Integer.valueOf(plusOne)] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">char</span>[] minusOneCharArray = Arrays.copyOf(charArray,charArray.length);</span><br><span class="line">        minusOneCharArray[i] = (<span class="keyword">char</span>) (charArray[i]==<span class="string">'0'</span>?<span class="string">'9'</span>:charArray[i]-<span class="number">1</span>);</span><br><span class="line">        String minusOne = String.valueOf(minusOneCharArray);</span><br><span class="line">        <span class="keyword">if</span>(minusOne.equals(target)) </span><br><span class="line">        <span class="keyword">return</span> node.count+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>((!set.contains(minusOne))&amp;&amp;mark[Integer.valueOf(minusOne)]==<span class="number">0</span>) &#123;</span><br><span class="line">        queue.offer(<span class="keyword">new</span> Node(minusOne,node.count+<span class="number">1</span>));</span><br><span class="line">        mark[Integer.valueOf(minusOne)] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;&lt;a href=&quot;#原题&quot; class=&quot;headerlink&quot; title=&quot;原题&quot;&gt;&lt;/a&gt;原题&lt;/h1&gt;&lt;p&gt;你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： &lt;code&gt;&amp;#39;0&amp;#39;, &amp;#39;1&amp;#39;, &amp;#39;2&amp;#
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="BFS" scheme="https://www.codetool.top/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>谈谈java中的Iterator</title>
    <link href="https://www.codetool.top/article/%E8%B0%88%E8%B0%88Iterator%E5%92%8C%E5%89%8D%E8%BE%88Enumeration/"/>
    <id>https://www.codetool.top/article/谈谈Iterator和前辈Enumeration/</id>
    <published>2019-12-06T12:09:49.000Z</published>
    <updated>2019-12-06T13:48:07.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><ol><li><code>Iterator</code>的作用？</li><li><code>Iterator</code>和<code>Enumeration</code>的区别？</li><li><code>Iterator</code>和<code>ListIterator</code>的区别？</li><li><code>Iterator</code>和<code>foreach</code>的关联？</li></ol><h1 id="Iterator的作用"><a href="#Iterator的作用" class="headerlink" title="Iterator的作用"></a>Iterator的作用</h1><p>Iterator，中文译作<code>迭代器</code>，是一种检查容器内元素并遍历元素的数据类型。它能使使用者不必关心遍历元素的过程，统一了对元素的访问方式。</p><p>在JDK1.8中，Iterator接口包含下面这些方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是否有下个元素</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//获取下个元素</span></span><br><span class="line"><span class="function">E <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//移除迭代器当前指向的元素，这个功能不强制实现，可以抛出UnsupportedOperationException异常</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//每个元素作为参数传递给Consumer接口的accept</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">forEachRemaining</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> E&gt; action)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="Iterator和Enumeration的区别"><a href="#Iterator和Enumeration的区别" class="headerlink" title="Iterator和Enumeration的区别"></a>Iterator和Enumeration的区别</h1><p>Iterator是JDK1.2后才出现的接口，目的是为了取代Enumeration。</p><p>Enumeration的作用和Iterator相似，它包含下面的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是否存在更多元素</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasMoreElements</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//获取下一个元素</span></span><br><span class="line"><span class="function">E <span class="title">nextElement</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>Iterator：</p><ul><li>简化了方法名称</li><li>增加了移除元素的操作</li></ul><h1 id="Iterator和ListIterator的区别"><a href="#Iterator和ListIterator的区别" class="headerlink" title="Iterator和ListIterator的区别"></a>Iterator和ListIterator的区别</h1><p>List接口中有一个方法<code>listIterator()</code>用于返回一个List迭代器，ArrayList在内部类中实现了这个迭代器，调用<code>listIterator()</code>时通过构造方法构造出一个ListIterator对象并返回。</p><p>那么Iterator和ListIterator有什么区别呢？</p><p><strong>ListIterator是Iterator的扩充</strong></p><p>ListIterator接口中除了继承自Iterator中的方法，还有：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//是否有上一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">hasPrevious</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//获取上一个元素</span></span><br><span class="line"><span class="function">E <span class="title">previous</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//下一个元素的index</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nextIndex</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//上一个元素的index</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">previousIndex</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//用一个元素替换当前指向的元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(E e)</span></span>;</span><br><span class="line"><span class="comment">//在当前位置插入一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(E e)</span></span>;</span><br></pre></td></tr></table></figure><h1 id="Iterator和foreach的关联？"><a href="#Iterator和foreach的关联？" class="headerlink" title="Iterator和foreach的关联？"></a><code>Iterator</code>和<code>foreach</code>的关联？</h1><p><strong>foreach只支持数组或实现了Iterable接口的类。</strong></p><p>Iterable接口强制要求实现<code>iterator()</code>方法，也就是说，foreach语句底层还是通过iterator的遍历实现的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;Iterator&lt;/code&gt;的作用？&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Iterator&lt;/code&gt;和&lt;code&gt;E
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="java" scheme="https://www.codetool.top/tags/java/"/>
    
      <category term="迭代器" scheme="https://www.codetool.top/tags/%E8%BF%AD%E4%BB%A3%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java自动装箱缓存机制</title>
    <link href="https://www.codetool.top/article/Java%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <id>https://www.codetool.top/article/Java自动装箱缓存机制/</id>
    <published>2019-12-05T14:27:24.000Z</published>
    <updated>2019-12-05T14:53:26.478Z</updated>
    
    <content type="html"><![CDATA[<p>尝试运行这段代码：</p><iframe src="https://run.codetool.top/?id=21" frameBorder="0" height="500" style="width:100%;border:1px solid #ccc;"></iframe><p>相似的两段代码，得到的结果却完全不相同。</p><p>首先要知道在java中<code>==</code>比较的是对象的引用，从直觉出发，无论是integer1、integer2还是integer3、integer4都是不同的引用，结果都应该是不等的。</p><p>造成这个结果的原因是JDK1.5引入的包装类自动装箱时的<strong>缓存机制</strong></p><p><strong>自动装箱的概念：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Integer a = <span class="number">10</span>; <span class="comment">//自动装箱，相当于下面这句</span></span><br><span class="line">Integer a = Integer.valueOf(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>而看看Integer中<code>valueOf(int)</code>的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title">valueOf</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">        <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];<span class="comment">//这句就是我们要研究的重点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Integer(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>IntegerCache</strong>是一个缓存类，它的内部有一个静态的<code>Integer cache[]</code>数组，在这个类第一次被加载时，会用整数值在-128~127之间的Integer实例对象填充这个数组，如果调用valueOf方法的时候参数值在这个范围内，就会从IntegerCache中的cache数组去取出这样一个共享对象。</p><p>这样就能回答一开始的程序integer1、integer2为什么相等了，因为他们都是从cache数组中取出来的同一个引用。</p><p>而300这个数是不在-128~127之间的，缓存数组中不存在这样的对象，最终是调用了构造方法创建了两个不同的Integer对象。</p><hr><p><strong>拓展：IntegerCache的静态代码块</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="comment">// 缓存的数据范围可以由用户设置，这里从配置中获取了用户设置的缓存范围</span></span><br><span class="line">    <span class="keyword">int</span> h = <span class="number">127</span>;</span><br><span class="line">    String integerCacheHighPropValue =</span><br><span class="line">        sun.misc.VM.getSavedProperty(<span class="string">"java.lang.Integer.IntegerCache.high"</span>);</span><br><span class="line">    <span class="keyword">if</span> (integerCacheHighPropValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> i = parseInt(integerCacheHighPropValue);</span><br><span class="line">            i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">            <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">            h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">            <span class="comment">// If the property cannot be parsed into an int, ignore it.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    high = h;</span><br><span class="line"></span><br><span class="line">    cache = <span class="keyword">new</span> Integer[(high - low) + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">int</span> j = low;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 这里循环构造Integer对象填充cache数组</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">        cache[k] = <span class="keyword">new</span> Integer(j++);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">    <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;尝试运行这段代码：&lt;/p&gt;
&lt;iframe src=&quot;https://run.codetool.top/?id=21&quot; frameBorder=&quot;0&quot; height=&quot;500&quot; style=&quot;width:100%;border:1px solid #ccc;&quot;&gt;&lt;/ifra
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="java" scheme="https://www.codetool.top/tags/java/"/>
    
      <category term="包装类" scheme="https://www.codetool.top/tags/%E5%8C%85%E8%A3%85%E7%B1%BB/"/>
    
  </entry>
  
  <entry>
    <title>WinForm截图OCR小项目的开发-瞥见知识的融会贯通</title>
    <link href="https://www.codetool.top/article/winform%E6%88%AA%E5%9B%BEOCR%E5%B0%8F%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%BC%80%E5%8F%91-%E7%9E%A5%E8%A7%81%E7%9F%A5%E8%AF%86%E7%9A%84%E8%9E%8D%E4%BC%9A%E8%B4%AF%E9%80%9A/"/>
    <id>https://www.codetool.top/article/winform截图OCR小项目的开发-瞥见知识的融会贯通/</id>
    <published>2019-12-04T14:04:55.000Z</published>
    <updated>2019-12-05T08:01:35.970Z</updated>
    
    <content type="html"><![CDATA[<p>最近因为有个需要截图OCR的需求，再加上需要交一个C#大作业，就做了一个WinForm截图OCR小项目出来。<br>（不过后来发现QQ截图好像已经有这功能了🌚）</p><p>运行截图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://api.codetool.top/img/15754686525352.png" alt="主窗口" title="">                </div>                <div class="image-caption">主窗口</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://api.codetool.top/img/15754689358448.png" alt="截图处理窗口" title="">                </div>                <div class="image-caption">截图处理窗口</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://api.codetool.top/img/15754689633703.png" alt="截图处理窗口2" title="">                </div>                <div class="image-caption">截图处理窗口2</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://api.codetool.top/img/15754690358637.png" alt="历史日志" title="">                </div>                <div class="image-caption">历史日志</div>            </figure><p>谈一谈挺有意思的一些知识点：</p><h1 id="Http请求"><a href="#Http请求" class="headerlink" title="Http请求"></a>Http请求</h1><h2 id="Delegate委托回调"><a href="#Delegate委托回调" class="headerlink" title="Delegate委托回调"></a>Delegate委托回调</h2><p>我封装了一个POST请求的函数：<br>需要下载一个<code>Newtonsoft.Json</code>用于处理响应的JSON数据<br>这种方式是使用了一个委托回调，类似于JavaScript中的回调函数，C#中叫<strong>Delegate回调</strong></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">delegate</span> <span class="keyword">void</span> <span class="title">AfterRequest</span>(<span class="params">JObject data</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">HttpUtil</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 发出POST请求</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="url"&gt;</span>请求的url<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="requestBody"&gt;</span>url参数格式的字符串，如"key1=value1&amp;key2=value2",需要经过urlencode处理<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="function"&gt;</span>回调函数,data是一个json转换为的一个JObject对象<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">PostAsync</span>(<span class="params">String url, <span class="keyword">string</span> requestBody, AfterRequest function</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">string</span> responseBody = <span class="literal">null</span>;</span><br><span class="line">            HttpClient httpClient = <span class="keyword">new</span> HttpClient();</span><br><span class="line">            <span class="comment">//StringContent content = new StringContent(requestBody,System.Text.Encoding.UTF8, "application/x-www-form-urlencoded");</span></span><br><span class="line">            StringContent content = <span class="keyword">new</span> StringContent(requestBody);</span><br><span class="line"></span><br><span class="line">            content.Headers.ContentType =</span><br><span class="line">                <span class="keyword">new</span> System.Net.Http.Headers.MediaTypeHeaderValue(<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">            HttpResponseMessage response = <span class="literal">null</span>;</span><br><span class="line">            response = httpClient.PostAsync(url, content).Result;</span><br><span class="line">            response.EnsureSuccessStatusCode();</span><br><span class="line">            <span class="keyword">if</span> (response.IsSuccessStatusCode)</span><br><span class="line">            &#123;</span><br><span class="line">                responseBody = response.Content.ReadAsStringAsync().Result;</span><br><span class="line">            &#125;</span><br><span class="line">            JObject data = JObject.Parse(responseBody);</span><br><span class="line">            function(data);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"\nException Caught!"</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">"Message :&#123;0&#125; "</span>, e.Message);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Async-Await"><a href="#Async-Await" class="headerlink" title="Async/Await"></a>Async/Await</h2><p>实际上还有一种能使代码更清晰、简洁的方法，并且这种方法更受C#推荐：Async/Await</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">HttpUtil</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> 发出POST请求</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;/summary&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="url"&gt;</span>请求的url<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span> <span class="doctag">&lt;param name="requestBody"&gt;</span>url参数格式的字符串，如"key1=value1&amp;key2=value2",需要经过urlencode处理<span class="doctag">&lt;/param&gt;</span></span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task&lt;JObject&gt; <span class="title">PostAsync</span>(<span class="params">String url, <span class="keyword">string</span> requestBody</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">string</span> responseBody = <span class="literal">null</span>;</span><br><span class="line">            HttpClient httpClient = <span class="keyword">new</span> HttpClient();</span><br><span class="line">            <span class="comment">//StringContent content = new StringContent(requestBody,System.Text.Encoding.UTF8, "application/x-www-form-urlencoded");</span></span><br><span class="line">            StringContent content = <span class="keyword">new</span> StringContent(requestBody);</span><br><span class="line"></span><br><span class="line">            content.Headers.ContentType =</span><br><span class="line">                <span class="keyword">new</span> System.Net.Http.Headers.MediaTypeHeaderValue(<span class="string">"application/x-www-form-urlencoded"</span>);</span><br><span class="line">            HttpResponseMessage response = <span class="literal">null</span>;</span><br><span class="line">            response = <span class="keyword">await</span> httpClient.PostAsync(url, content);</span><br><span class="line">            response.EnsureSuccessStatusCode();</span><br><span class="line">            <span class="keyword">if</span> (response.IsSuccessStatusCode)</span><br><span class="line">            &#123;</span><br><span class="line">                responseBody = <span class="keyword">await</span> response.Content.ReadAsStringAsync();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            JObject data = JObject.Parse(responseBody);</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            Console.WriteLine(<span class="string">"\nException Caught!"</span>);</span><br><span class="line">            Console.WriteLine(<span class="string">"Message :&#123;0&#125; "</span>, e.Message);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这种方法，能避免回调地狱，让调用时代码不会多层嵌套。<br>甚至ES7也支持了这种方法，语法和C#类似。</p><p><strong>原理：</strong></p><blockquote><p>函数执行时，一旦遇到await就会返回。等到触发的异步操作完成（并且调用栈清空），再接着执行函数体内后面的语句</p></blockquote><p>实际上async/await只是个语法糖，内部执行顺序和回调函数并无区别。</p><h1 id="API鉴权"><a href="#API鉴权" class="headerlink" title="API鉴权"></a>API鉴权</h1><p>因为做这个应用去调用了百度云和腾讯云提供的OCR api，恰巧发现两家的api鉴权机制正是目前主流验证方式之中具有代表性的两种。</p><h2 id="百度云：Token"><a href="#百度云：Token" class="headerlink" title="百度云：Token"></a>百度云：Token</h2><p>看看百度云的Token获取方法：</p><p>向授权服务地址<code>https://aip.baidubce.com/oauth/2.0/token</code>发送请求（推荐使用POST），并在URL中带上以下参数：</p><ul><li>grant_type： 必须参数，固定为client_credentials；</li><li>client_id： 必须参数，应用的API Key；</li><li>client_secret： 必须参数，应用的Secret Key；</li></ul><p>token验证方式就是给每个用户分配一套账号和密码（这里是client_id和client_secret），服务器能通过这套认证信息获取用户的权限，生成一个token字符串，保存在本地并返回给用户，用户请求api的时候就要带上这个token（可以是放在请求体或请求头中），服务器就能通过token验证用户的身份。</p><p><strong>安全隐患：</strong> Token被劫持，伪造请求和篡改参数。</p><h2 id="腾讯云：签名验证"><a href="#腾讯云：签名验证" class="headerlink" title="腾讯云：签名验证"></a>腾讯云：签名验证</h2><p>可以看看腾讯云提供的计算签名的步骤：</p><ol><li>将&lt;key, value&gt;请求参数对按key进行字典升序排序，得到有序的参数对列表N</li><li>将列表N中的参数对按URL键值对的格式拼接成字符串，得到字符串T（如：key1=value1&amp;key2=value2），URL键值拼接过程value部分需要URL编码，URL编码算法用大写字母，例如%E8，而不是小写%e8</li><li>将应用密钥以app_key为键名，组成URL键值拼接到字符串T末尾，得到字符串S（如：key1=value1&amp;key2=value2&amp;app_key=密钥)</li><li>对字符串S进行MD5运算，将得到的MD5值所有字符转换成大写，得到接口请求签名</li></ol><p>可以看出腾讯云的验证机制更为复杂，在计算签名的时候需要用到当前时间戳、一个随机字符串和用户的app_key，这样得到的签名每次请求的时候都是不同的，即使中间者劫持了签名也无法利用签名进行第二次重复请求，如果请求参数被篡改也能识别出。</p><p>Token和签名验证并不冲突，签名验证是在身份认证的基础上防止请求重放、参数篡改等攻击。百度云这种加密机制也可以使用某种密钥将带有token的参数字符串生成签名进行验证。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>许多知识都有融会贯通之处，即使做C#项目也能学习到JS相关的异步思想，能学到后端的验证机制。要善于思考，以行促学。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近因为有个需要截图OCR的需求，再加上需要交一个C#大作业，就做了一个WinForm截图OCR小项目出来。&lt;br&gt;（不过后来发现QQ截图好像已经有这功能了🌚）&lt;/p&gt;
&lt;p&gt;运行截图：&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
        
      
    
    </summary>
    
    
    
      <category term=".net" scheme="https://www.codetool.top/tags/net/"/>
    
      <category term="API鉴权" scheme="https://www.codetool.top/tags/API%E9%89%B4%E6%9D%83/"/>
    
      <category term="异步" scheme="https://www.codetool.top/tags/%E5%BC%82%E6%AD%A5/"/>
    
  </entry>
  
  <entry>
    <title>HashSet源码分析</title>
    <link href="https://www.codetool.top/article/HashSet%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://www.codetool.top/article/HashSet源码分析/</id>
    <published>2019-12-02T07:19:32.000Z</published>
    <updated>2019-12-02T07:57:08.396Z</updated>
    
    <content type="html"><![CDATA[<p>Set家族一览：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://api.codetool.top/img/15752712219660.png" alt="Set层次" title="">                </div>                <div class="image-caption">Set层次</div>            </figure><h1 id="HashSet简介"><a href="#HashSet简介" class="headerlink" title="HashSet简介"></a>HashSet简介</h1><p>Set是Collection三大接口其中之一，意为集合，且元素不能重复。Set接口中的方法和Collection中的方法完全一致，只是起到一个标记名的作用。</p><p>HashSet是哈希集的意思，就是通过hashcode来实现set不能出现重复元素的一个实现类。</p><p>内部其实是通过哈希表HashMap来实现的，实际上set中存放的元素是内部hashmap中的键：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();<span class="comment">//所有的键对应的值都是一个冗余的Object对象</span></span><br></pre></td></tr></table></figure><p>在构造方法中初始化哈希表：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>浪费时间警告：这是一个纯HashMap实现的类</strong></p><h1 id="重载的构造方法"><a href="#重载的构造方法" class="headerlink" title="重载的构造方法"></a>重载的构造方法</h1><h2 id="public-HashSet-Collection-lt-extends-E-gt-c"><a href="#public-HashSet-Collection-lt-extends-E-gt-c" class="headerlink" title="public HashSet(Collection&lt;? extends E&gt; c)"></a>public HashSet(Collection&lt;? extends E&gt; c)</h2><p>通过一个集合来构造HashSet，默认哈希表的容量是<code>集合的容量*4/3 + 1</code>和<code>16</code>中的最大值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(Math.max((<span class="keyword">int</span>) (c.size()/.<span class="number">75f</span>) + <span class="number">1</span>, <span class="number">16</span>));</span><br><span class="line">    addAll(c);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="public-HashSet-int-initialCapacity-float-loadFactor"><a href="#public-HashSet-int-initialCapacity-float-loadFactor" class="headerlink" title="public HashSet(int initialCapacity, float loadFactor)"></a>public HashSet(int initialCapacity, float loadFactor)</h2><p>这个实际上就是提供两个构造HashMap的参数，一个是初始大小，一个是负载因子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="public-HashSet-int-initialCapacity"><a href="#public-HashSet-int-initialCapacity" class="headerlink" title="public HashSet(int initialCapacity)"></a>public HashSet(int initialCapacity)</h2><p>这个就是提供HashMap的初始大小。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="重要方法"><a href="#重要方法" class="headerlink" title="重要方法"></a>重要方法</h1><h2 id="public-int-size"><a href="#public-int-size" class="headerlink" title="public int size()"></a>public int size()</h2><p>HashMap的size</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public int size() &#123;</span><br><span class="line">    return map.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="public-boolean-contains-Object-o"><a href="#public-boolean-contains-Object-o" class="headerlink" title="public boolean contains(Object o)"></a>public boolean contains(Object o)</h2><p>HashMap中是否有对应的键。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.containsKey(o);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="public-boolean-add-E-e"><a href="#public-boolean-add-E-e" class="headerlink" title="public boolean add(E e)"></a>public boolean add(E e)</h2><p>将一个记录插入HashMap</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="public-boolean-remove-Object-o"><a href="#public-boolean-remove-Object-o" class="headerlink" title="public boolean remove(Object o)"></a>public boolean remove(Object o)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> map.remove(o)==PRESENT;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这是一个纯使用HashMap实现的数据结构。<br>仔细看了一下TreeSet也是用TreeMap实现的，那我就不搞TreeSet了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Set家族一览：&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
   
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="java" scheme="https://www.codetool.top/tags/java/"/>
    
      <category term="jdk" scheme="https://www.codetool.top/tags/jdk/"/>
    
      <category term="源码研究" scheme="https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"/>
    
      <category term="集合" scheme="https://www.codetool.top/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>LinkedList源码分析</title>
    <link href="https://www.codetool.top/article/LinkedList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://www.codetool.top/article/LinkedList源码分析/</id>
    <published>2019-12-02T06:27:16.000Z</published>
    <updated>2019-12-03T11:46:18.073Z</updated>
    
    <content type="html"><![CDATA[<p><strong>相关文章：</strong><br><a href="https://www.codetool.top/article/ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">ArrayList源码分析</a></p><p>List家族一览：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://api.codetool.top/img/15752679306935.png" alt="List层次" title="">                </div>                <div class="image-caption">List层次</div>            </figure><h1 id="LinkedList简介"><a href="#LinkedList简介" class="headerlink" title="LinkedList简介"></a>LinkedList简介</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://api.codetool.top/img/15752682516156.png" alt="LinkedList的超类" title="">                </div>                <div class="image-caption">LinkedList的超类</div>            </figure><p>LinkedList的超类有List、Queue，说明它既有List的性质也有Queue的性质，它直接实现于Deque，说明它体现更多的是双向链表的性质。不过通常将它当作普通的Queue使用：</p><p><code>Queue&lt;String&gt; queue = new LinkedList&lt;&gt;();</code></p><p>它的内部字段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;<span class="comment">//代表头节点</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;<span class="comment">//代表尾节点</span></span><br></pre></td></tr></table></figure><h1 id="重要的内部类"><a href="#重要的内部类" class="headerlink" title="重要的内部类"></a>重要的内部类</h1><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p>这是一个静态内部类，代表着LinkedList中存放数据的节点。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    E item;</span><br><span class="line">    Node&lt;E&gt; next;</span><br><span class="line">    Node&lt;E&gt; prev;</span><br><span class="line"></span><br><span class="line">    Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.item = element;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">        <span class="keyword">this</span>.prev = prev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="重要的内部方法"><a href="#重要的内部方法" class="headerlink" title="重要的内部方法"></a>重要的内部方法</h1><h2 id="void-linkLast-E-e"><a href="#void-linkLast-E-e" class="headerlink" title="void linkLast(E e)"></a>void linkLast(E e)</h2><p><code>offer</code>依赖的方法 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    last = newNode;</span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        l.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="private-E-unlinkFirst-Node-f"><a href="#private-E-unlinkFirst-Node-f" class="headerlink" title="private E unlinkFirst(Node f)"></a>private E unlinkFirst(Node<E> f)</h2><p><code>poll</code>和<code>remove</code>依赖的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">unlinkFirst</span><span class="params">(Node&lt;E&gt; f)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert f == first &amp;&amp; f != null;</span></span><br><span class="line">    <span class="keyword">final</span> E element = f.item;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; next = f.next;</span><br><span class="line">    f.item = <span class="keyword">null</span>;</span><br><span class="line">    f.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">    first = next;</span><br><span class="line">    <span class="keyword">if</span> (next == <span class="keyword">null</span>)</span><br><span class="line">        last = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        next.prev = <span class="keyword">null</span>;</span><br><span class="line">    size--;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">return</span> element;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Node-node-int-index"><a href="#Node-node-int-index" class="headerlink" title="Node node(int index)"></a>Node<E> node(int index)</h2><p>获取处于index上的节点，这个方法用于支持随机访问，特别是List中定义的get，set等方法。<br>可见，该方法会根据index所处位置的不同分为从头查找或是从尾查找。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// assert isElementIndex(index);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">        Node&lt;E&gt; x = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">            x = x.next;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;E&gt; x = last;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">            x = x.prev;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>可以说，LinkedList的实现还是挺简单的，由于是链表实现不需要考虑那么多关于空间的问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;相关文章：&lt;/strong&gt;&lt;br&gt;&lt;a href=&quot;https://www.codetool.top/article/ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/&quot;&gt;ArrayList源码分析&lt;/a&gt;&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="java" scheme="https://www.codetool.top/tags/java/"/>
    
      <category term="jdk" scheme="https://www.codetool.top/tags/jdk/"/>
    
      <category term="源码研究" scheme="https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"/>
    
      <category term="集合" scheme="https://www.codetool.top/tags/%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>tomcat整体架构</title>
    <link href="https://www.codetool.top/article/tomcat%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/"/>
    <id>https://www.codetool.top/article/tomcat整体架构/</id>
    <published>2019-11-29T15:04:49.000Z</published>
    <updated>2019-11-29T15:09:41.931Z</updated>
    
    <content type="html"><![CDATA[<h1 id="tomcat整体架构"><a href="#tomcat整体架构" class="headerlink" title="tomcat整体架构"></a>tomcat整体架构</h1><p>Tomcat Http服务器不直接调用业务类，而是将请求转发给Servlet容器，Servlet加载业务类处理请求。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/11/28/QFym4I.png" alt="img" title="Servlet容器工作流程">                </div>                <div class="image-caption">Servlet容器工作流程</div>            </figure><p>核心组件：</p><ul><li>连接器 Connector</li><li>容器 Container</li></ul><p>连接器处理Socket请求，容器进行servlet的调用。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/11/29/QkgeFH.png" alt="img" title="Tomcat整体架构">                </div>                <div class="image-caption">Tomcat整体架构</div>            </figure><h1 id="连接器-Coyote"><a href="#连接器-Coyote" class="headerlink" title="连接器 Coyote"></a>连接器 Coyote</h1><p>Coyote 是 Tomcat的连接器框架的名称，是Tomcat服务器提供的供客户端访问的外部接口。客户端通过Coyote与服务器建立连接、发送请求并接受相应。</p><p>Coyote封装了底层的网络通信（Socket请求及相应处理），为Catalina容器提供了统一的接口，使<strong>Catalina容器与具体的请求协议及IO操作方式完全解耦</strong>。Coyote将Socket输入转换封装为Request对象，交由Catalina容器进行处理，处理请求完成后，Catalina通过Coyote提供的Response对象将结果写入输出流。</p><p>Coyote作为独立的模块，只负责<strong>具体协议和IO的相关操作</strong>，与Servlet规范实现没有直接关系，因此即使是Request和Response对象也并未实现Servlet规范对应的接口，而是<strong>在Catalina中将他们进一步封装为ServletRequest和ServletResponse</strong>。</p><h2 id="IO模型与协议"><a href="#IO模型与协议" class="headerlink" title="IO模型与协议"></a>IO模型与协议</h2><p>在Coyote中，Tomcat支持的多种I/O模型和应用层协议：</p><p>Tomcat支持的IO模型（8.0前默认是BIO，自8.5/9.0版本起，tomcat移除了对BIO的支持）：</p><table><thead><tr><th>IO模型</th><th>描述</th></tr></thead><tbody><tr><td>NIO</td><td>非阻塞I/O，采用Java NIO类库实现。</td></tr><tr><td>NIO2</td><td>异步I/O，采用JDK7最新的NIO2类库实现。</td></tr><tr><td>APR</td><td>采用Apache可移植运行库实现，是C/C++编写的本地库。如果选择该方案，需要单独安装APR库。</td></tr></tbody></table><p>Tomcat支持的应用层协议：</p><table><thead><tr><th>应用层协议</th><th>描述</th></tr></thead><tbody><tr><td>HTTP/1.1</td><td>这是大部分Web应用采用的访问协议。</td></tr><tr><td>AJP</td><td>用于和Web服务器集成（如Apache），以实现对静态资源的优化以及集群部署，当前支持AJP/1.3。</td></tr><tr><td>HTTP/2</td><td>HTTP2.0大幅度地提升了Web性能。下一代HTTP协议，自8.5以及9.0版本之后支持。</td></tr></tbody></table><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/11/29/QkW5n0.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="连接器组件"><a href="#连接器组件" class="headerlink" title="连接器组件"></a>连接器组件</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/11/29/QkfEjI.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ul><li>EndPoint</li><li>Processor</li><li>Adapter</li><li>ProtocolHandler</li></ul><h3 id="EndPoint"><a href="#EndPoint" class="headerlink" title="EndPoint"></a>EndPoint</h3><ol><li>Coyote通信端点，即通信监听的接口，是具体Socket接收和发送处理器，是对传输层的抽象，因此EndPoint用来实现TCP/IP协议的。</li><li>Tomcat并没有EndPoint接口，而是提供了一个抽象类AbstractEndPoint，里面定义了两个内部类：Acceptor和SocketProcessor。Acceptor用于监听Socket连接请求。SocketProcessor用于处理接收到的Socket请求，它实现Runnable接口，在Run方法里调用协议处理组件Processor进行处理。为了提高处理能力，SocketProcessor被提交到线程池来执行。而这个线程池叫执行器（Executor）。</li></ol><h3 id="Processor"><a href="#Processor" class="headerlink" title="Processor"></a>Processor</h3><p>Coyote协议处理接口，如果说EndPoint是用来实现TCP/IP协议的，那么Processor用来实现HTTP协议，Processor接收来自EndPoint的Socket，读取字节流解析成Tomcat Recuest和Response对象,并通过Adapter将其提交到容器处理, Processor是对应用层协议的抽象。</p><h3 id="ProtocolHandler"><a href="#ProtocolHandler" class="headerlink" title="ProtocolHandler"></a>ProtocolHandler</h3><p>Coyote 协议接口，通过Endpoint和Processor，实现针对具体协议的处理能力。Tomcat按照协议和I/O提供了6个实现类：AjpNioProtocol，AjpAprProtocol,AjpNio2Protocol,Http11NioProtocol,Http11Nio2Protocol,Http11AprProtocol。我们在配置tomcat/conf/server.xml时，至少要指定具体的ProtocolHandler,当然也可以指定协议名称，如：HTTP/1.1，如果安装了APR，那么将使用Http11AprProtocol，否则使用 Http11NioProtocol。</p><h3 id="Adapter"><a href="#Adapter" class="headerlink" title="Adapter"></a>Adapter</h3><p>由于协议不同，客户端发过来的请求信息也不尽相同，Tomcat定义了自己的Request类来“存放”这些请求信息。ProtocolHandler接口负责解析请求并生成Tomcat Request类。但是这个Request对象不是标准的ServletRequest，也就意味着，不能用Tomcat Request作为参数来调用容器。Tomcat设计者的解决方案是引入CoyoteAdapter，这是适配器模式的经典运用，连接器调用CoyoteAdapter的Sevice方法，传入的是Tomcat Request对象，CoyoteAdapter负责将Tomcat Request转成ServletRequest，再调用容器的Service方法。</p><h1 id="容器-Catalina"><a href="#容器-Catalina" class="headerlink" title="容器 Catalina"></a>容器 Catalina</h1><h2 id="Tomcat的模块分层图"><a href="#Tomcat的模块分层图" class="headerlink" title="Tomcat的模块分层图"></a>Tomcat的模块分层图</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/11/29/QANBtK.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>和org.apache包下的包一一对应</p><h2 id="容器组件"><a href="#容器组件" class="headerlink" title="容器组件"></a>容器组件</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/11/29/QAUp3F.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如上图所示，Catalina负责管理Server，而Server表示着整个服务器。Server下面有多个服务Service，每个服务都包含着多个连接器组件Connector（Coyote 实现）和一个容器组件Container。在Tomcat启动的时候，会初始化一个Catalina的实例。</p><p>Catalina各个组件的职责：</p><table><thead><tr><th>组件</th><th>职责</th></tr></thead><tbody><tr><td>Catalina</td><td>负责解析Tomcat的配置文件，以此来创建服务器Server组件，并根据命令来对其进行管理。</td></tr><tr><td>Server</td><td>服务器表示整个Catalina Servlet容器以及其它组件，负责组装并启动Servlet引擎，Tomcat连接器。Server通过实现Lifecycle接口，提供了一种优雅的启动和关闭整个系统的方式。</td></tr><tr><td>Service</td><td>服务是Server内部的组件，一个Server包含多个Service。它将若干个Connector组件绑定到一个Container(Engine)上</td></tr><tr><td>Connector</td><td>连接器，处理与客户端的通信，它负责接收客户请求，然后转给相关的容器处理，最后向客户返回响应结果</td></tr><tr><td>Container</td><td>容器，负责处理用户的servlet请求，并返回对象给web用户的模块。</td></tr></tbody></table><h2 id="Container结构"><a href="#Container结构" class="headerlink" title="Container结构"></a>Container结构</h2><p>Tomcat设计了4种容器，分别是Engine、Host、Context和Wrapper。这4种容器不是平行关系，而是父子关系，Tomcat通过一种分层的架构，使得Servlet容器具有很好的灵活性。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/11/29/QABy1f.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><table><thead><tr><th>组件</th><th>职责</th></tr></thead><tbody><tr><td>Engine</td><td>表示整个Catalina的Servlet引擎,用来管理多个虚拟站点，一个Service最多只能有一个Engine ,但是一个引擎可包含多个Host。</td></tr><tr><td>Host</td><td>代表一个虚拟主机， 或者说一个站点，可以给Tomcat配置多个虚拟主机地址，而一个虚拟主机下可包含多个Context。</td></tr><tr><td>Context</td><td>表示一个web应用程序，一个Web应用可包含多个Wrapper。</td></tr><tr><td>Wrapper</td><td>表示一个Servlet，Wrapper作为容器中的最底层。 不能包含子容器。</td></tr></tbody></table><p>我们也可以再通过Tomcat的server.xml配置文件来加深对Tomcat容器的理解。Tomcat采用了组件化的设计，它的构成组件都是可配置的，其中最外层的是Server，其他组件按照一定的格式要求配置在这个顶层容器中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Service</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Connector</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Connector</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Engine</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Host</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Context</span>&gt;</span><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么，Tomcat是怎么管理这些容器的呢？你会发现这些容器具有父子关系，形成一个树形结构，你可能马上就想到了设计模式中的组合模式。没错，Tomcat就是用组合模式来管理这些容器的。具体实现方法是，所有容器组件都实现了Container接口，因此组合模式可以使得用户对单容器对象和组合容器对象的使用具有一致性。这里单容器对象指的是最底层的Wrapper，组合容器对象指的是上面的Context、Host或者Engine。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="https://s2.ax1x.com/2019/11/29/QAfb7V.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>LifeCycle接口用于统一管理各组件的生命周期。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;tomcat整体架构&quot;&gt;&lt;a href=&quot;#tomcat整体架构&quot; class=&quot;headerlink&quot; title=&quot;tomcat整体架构&quot;&gt;&lt;/a&gt;tomcat整体架构&lt;/h1&gt;&lt;p&gt;Tomcat Http服务器不直接调用业务类，而是将请求转发给Servlet
      
    
    </summary>
    
    
      <category term="中间件/软件设计" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="javaEE" scheme="https://www.codetool.top/tags/javaEE/"/>
    
      <category term="tomcat" scheme="https://www.codetool.top/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>使用maven方式编译tomcat源码</title>
    <link href="https://www.codetool.top/article/%E4%BD%BF%E7%94%A8maven%E6%96%B9%E5%BC%8F%E7%BC%96%E8%AF%91tomcat%E6%BA%90%E7%A0%81/"/>
    <id>https://www.codetool.top/article/使用maven方式编译tomcat源码/</id>
    <published>2019-11-28T14:04:57.000Z</published>
    <updated>2019-11-28T14:09:23.897Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Tomcat源码下载"><a href="#Tomcat源码下载" class="headerlink" title="Tomcat源码下载"></a>Tomcat源码下载</h1><p>官网下载：</p><p><a href="https://tomcat.apache.org/download-80.cgi" target="_blank" rel="noopener">https://tomcat.apache.org/download-80.cgi</a></p><p>页面下方的Source Code Distribution，下载zip文件。</p><h1 id="Idea用maven方式编译源码"><a href="#Idea用maven方式编译源码" class="headerlink" title="Idea用maven方式编译源码"></a>Idea用maven方式编译源码</h1><p>在源码文件夹内创建一个<code>home/</code>目录，将<code>webapp/</code>和<code>conf/</code>移到这个文件夹下。</p><p>在根目录添加pom.xml：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Tomcat8.5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Tomcat8.5<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>Tomcat8.5<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定源文件为java 、test --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sourceDirectory</span>&gt;</span>java<span class="tag">&lt;/<span class="name">sourceDirectory</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;testSourceDirectory&gt;test&lt;/testSourceDirectory&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">testResources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">testResource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>test<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">testResource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">testResources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 指定jdk 编译 版本 ，没装jdk 1.7的可以变更为1.6 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">source</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 添加tomcat8 所需jar包依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ant<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ant<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>wsdl4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wsdl4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.xml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jaxrpc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.easymock<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easymock<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.eclipse.jdt.core.compiler<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ecj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在idea中导入该maven项目，等待maven构建。</p><p>idea的项目运行配置（Edit Configurations）：</p><p>Edit Configurations-&gt; + -&gt; Application -&gt; Main Class选择<code>org.apache.catalina.startup.Bootstrap</code> -&gt; VM Options填入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-Dcatalina.home=D:/Tomcat/apache-tomcat-8.5.49-src/home</span><br><span class="line">-Dcatalina.base=D:/Tomcat/apache-tomcat-8.5.49-src/home</span><br><span class="line">-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager</span><br><span class="line">-Djava.util.logging.config.file=D:/Tomcat/apache-tomcat-8.5.49-src/home/conf/logging.properties</span><br></pre></td></tr></table></figure><p><strong><code>D:/Tomcat/apache-tomcat-8.5.49-src/</code>是我电脑上的源码的存放位置</strong></p><p>然后就可以尝试编译了。还会出现一些错误，可以参考：</p><p><a href="https://juejin.im/post/5b7cd3336fb9a019c112619d" target="_blank" rel="noopener">@Version@错误</a></p><p><a href="https://blog.csdn.net/yekong1225/article/details/81000446" target="_blank" rel="noopener">tomcat页面打不开500,jsp没有初始化错误</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Tomcat源码下载&quot;&gt;&lt;a href=&quot;#Tomcat源码下载&quot; class=&quot;headerlink&quot; title=&quot;Tomcat源码下载&quot;&gt;&lt;/a&gt;Tomcat源码下载&lt;/h1&gt;&lt;p&gt;官网下载：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://tomcat.a
      
    
    </summary>
    
    
      <category term="中间件/软件设计" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/"/>
    
    
      <category term="tomcat" scheme="https://www.codetool.top/tags/tomcat/"/>
    
      <category term="maven" scheme="https://www.codetool.top/tags/maven/"/>
    
      <category term="idea" scheme="https://www.codetool.top/tags/idea/"/>
    
  </entry>
  
  <entry>
    <title>servlet4.0初识总结</title>
    <link href="https://www.codetool.top/article/servlet4-0%E5%88%9D%E5%AD%A6%E6%80%BB%E7%BB%93/"/>
    <id>https://www.codetool.top/article/servlet4-0初学总结/</id>
    <published>2019-11-28T11:57:54.000Z</published>
    <updated>2019-11-28T12:14:47.251Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaEE8"><a href="#JavaEE8" class="headerlink" title="JavaEE8"></a>JavaEE8</h1><p>JavaEE8,是自2013年6月Java企业版的首次更新。JAVAEE8提供了一些新的API，提供了对HTTP/2的新支持。</p><h1 id="Servlet4-0"><a href="#Servlet4-0" class="headerlink" title="Servlet4.0"></a>Servlet4.0</h1><p>Servlet API是JAVA开发人员最熟悉的API之一。</p><p>Servlet在JAVAweb的开发中发挥着重要的作用。JAVAEE8对Servlet进行了重要的更新：</p><ul><li>服务器推送</li><li>提供了对Servlet映射的运行时发现。</li><li>简化了Filter的开发。</li></ul><p>其中<strong>服务器推送</strong>是最主要的更新</p><p>配置需要：</p><ul><li>jdk8+</li><li>tomcat9（支持HTTP/2）</li><li>tomcat-native</li><li>openssl</li></ul><h2 id="配置tomcat"><a href="#配置tomcat" class="headerlink" title="配置tomcat"></a>配置tomcat</h2><p>编辑<code>server.xml</code>，将原来的<code>port=&quot;8080&quot; HTTP/1.1</code>替换成:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8443"</span> <span class="attr">protocol</span>=<span class="string">"org.apache.coyote.http11.Http11AprProtocol"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">maxThreads</span>=<span class="string">"150"</span> <span class="attr">SSLEnabled</span>=<span class="string">"true"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">UpgradeProtocol</span> <span class="attr">className</span>=<span class="string">"org.apache.coyote.http2.Http2Protocol"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SSLHostConfig</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Certificate</span> <span class="attr">certificateKeyFile</span>=<span class="string">"conf/localhost-rsa-key.pem"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">certificateFile</span>=<span class="string">"conf/localhost-rsa-cert.pem"</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">type</span>=<span class="string">"RSA"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">SSLHostConfig</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Connector</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="生成SSL证书"><a href="#生成SSL证书" class="headerlink" title="生成SSL证书"></a>生成SSL证书</h2><p>生成私钥和证书文件在tomcat-native目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OpenSSL&gt; genrsa -out localhost-rsa-key.pem 2048</span><br><span class="line">OpenSSL&gt; req -new -x509 -key localhost-rsa-key.pem -out localhost-rsa-cert.pem -days 3650</span><br></pre></td></tr></table></figure><p>将<code>localhost-rsa-key.pem</code>和<code>localhost-rsa-cert.pem</code>复制到tomcat的<code>conf/</code>文件夹下。</p><p>将tomcat-native中<code>bin/(x64/)</code>下的<code>tcnative-1.dll</code>和<code>tcnative-1-src.pdb</code>复制到JAVA_HOME的<code>/bin</code>目录下</p><p>然后重启tomcat就能用HTTP/2来连接了。</p><h2 id="服务器推送"><a href="#服务器推送" class="headerlink" title="服务器推送"></a>服务器推送</h2><p>将用户所需的WEB资源提前推送到用户的浏览器缓存中，当用户使用浏览器访问所需WEB资源时，用户不需要再次下载所需的WEB资源，因为用户所需的WEB资源已经存在于用户的浏览器缓存中。</p><p><strong>获取：</strong></p><p><code>request.newPushBuilder();</code></p><p><strong>方法：</strong></p><p><code>PushBuilder.path()</code>设置要推送资源的路径。<br><code>PushBuilder.push()</code>推送WEB资源到用户的浏览器缓存中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    PushBuilder pb = request.newPushBuilder();</span><br><span class="line">    pb.path(<span class="string">"pic01.jpg"</span>);</span><br><span class="line">    pb.push();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PushBuilder pb = request.newPushBuilder();</span><br><span class="line">pb.path(<span class="string">"pic01.jpg"</span>).push();</span><br><span class="line">pb.path(<span class="string">"pic02.jpg"</span>).push();</span><br></pre></td></tr></table></figure><h2 id="HttpServletMapping"><a href="#HttpServletMapping" class="headerlink" title="HttpServletMapping"></a>HttpServletMapping</h2><p>在运行时获取Servlet的映射信息（反射机制）</p><p><strong>获取：</strong></p><p><code>request.getHttpServletMapping();</code></p><p><strong>方法：</strong></p><p><code>getMappingMatch()</code> 请求路径的类型<br><code>getMatchValue()</code> 映射的资源名<br><code>getPattern()</code> 返回Servlet映射的路径<br><code>getServletName()</code> 返回Servlet的名称  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    HttpServletMapping mapping = request.getHttpServletMapping();</span><br><span class="line">    MappingMatch match = mapping.getMappingMatch();</span><br><span class="line">    System.out.println(match);</span><br><span class="line">    String value = mapping.getMatchValue();</span><br><span class="line">    System.out.println(value);</span><br><span class="line">    String pattern = mapping.getPattern();</span><br><span class="line">    System.out.println(pattern);</span><br><span class="line">    String name = mapping.getServletName();</span><br><span class="line">    System.out.println(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HttpFilter"><a href="#HttpFilter" class="headerlink" title="HttpFilter"></a>HttpFilter</h2><p>Filter的实现类：  </p><ul><li><code>GenericFilter</code>  </li><li><code>HttpFilter</code>，是<code>GenericFilter</code>的子类。</li></ul><p>通过继承<code>HttpFilter</code>来实现Filter：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebFilter</span>(filterName = <span class="string">"FilterDemo"</span>,urlPatterns = <span class="string">"/*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterDemo</span> <span class="keyword">extends</span> <span class="title">HttpFilter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line">        System.out.println(<span class="string">"FilterDemo:放行前"</span>);</span><br><span class="line">        chain.doFilter(request,response);</span><br><span class="line">        System.out.println(<span class="string">"FilterDemo:放行后"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JavaEE8&quot;&gt;&lt;a href=&quot;#JavaEE8&quot; class=&quot;headerlink&quot; title=&quot;JavaEE8&quot;&gt;&lt;/a&gt;JavaEE8&lt;/h1&gt;&lt;p&gt;JavaEE8,是自2013年6月Java企业版的首次更新。JAVAEE8提供了一些新的API，提供
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="java" scheme="https://www.codetool.top/tags/java/"/>
    
      <category term="javaEE" scheme="https://www.codetool.top/tags/javaEE/"/>
    
      <category term="servlet" scheme="https://www.codetool.top/tags/servlet/"/>
    
  </entry>
  
</feed>
