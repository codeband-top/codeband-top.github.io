<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>代码段小站</title>
  <icon>https://www.gravatar.com/avatar/4c71a513a84e4d430b9f9aed224237fc</icon>
  <subtitle>CodeTool - 个人计算机类练手小博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.codetool.top/"/>
  <updated>2020-03-18T11:48:55.523Z</updated>
  <id>https://www.codetool.top/</id>
  
  <author>
    <name>Rhett Peng</name>
    <email>pctdyx@qq.net</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Zookeeper应用场景和各种分布式锁的实现</title>
    <link href="https://www.codetool.top/article/Zookeeper%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF%E5%92%8C%E5%90%84%E7%A7%8D%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>https://www.codetool.top/article/Zookeeper应用场景和各种分布式锁的实现/</id>
    <published>2020-03-18T11:34:41.000Z</published>
    <updated>2020-03-18T11:48:55.523Z</updated>
    
    <content type="html"><![CDATA[<p>该文参考资源：</p><p><a href="https://blog.csdn.net/dingjianmin/article/details/82763871" target="_blank" rel="noopener">浅谈分布式锁–基于数据库实现篇_数据库_powerful的博客-CSDN博客</a></p><h1 id="配置中心">1 配置中心</h1><p>在平常的业务开发过程中，我们通常需要将系统的一些通用的<strong>全局配置</strong>，例如机器列表配置，运行时开关配置，数据库配置信息等统-集中存储，让集群所有机器共享配置信息，系统在启动会首先从配置中心读取配置信息,进行初始化。传统的实现方式将配置存储在本地文件和内存中，一旦机器规模更大,配置变更频繁情况下，本地文件和内存方式的配置维护成本较高，使用zookeeper作为分布式的配置中心就可以解决这个问题。</p><p>我们将配置信息存在zk中的一个节点中，同时给该节点注册一个数据节点变更的watcher监听，一旦节点数据发生变更，所有的订阅该节点的客户端都可以获取数据变更通知。</p><h1 id="负载均衡">2 负载均衡</h1><p>建立server节点，并建立监听器监视servers子节点的状态（用于在服务器增添时及时同步当前集群中服务器列表）。<strong>在每个服务器启动时，在servers节点下建立具体服务器地址的子节点,并在对应的子节点下存入服务器的相关信息。</strong>这样，我们<strong>在zookeeper服务器上可以获取当前集群中的服务器列表及相关信息</strong>，可以自定义一个负载均衡算法，在每个请求过来时从zookeeper服务器中获取当前集群服务器列表，根据算法选出其中一个服务器来处理请求。</p><h1 id="命名服务">3 命名服务</h1><p>命名服务是分布式系统中的基本功能之一。被命名的实体通常可以是集群中的机器、提供的服务地址或者远程对象，这些都可以称作为名字。常见的就是一些分布式服务框架（RPC、RMI）中的服务地址列表，通过使用名称服务客户端可以获取资源的实体、服务地址和提供者信息。<strong>命名服务就是通过一个资源引用的方式来实现对资源的定位和使用。在分布式环境中，上层应用仅仅需要一个全局唯一名称，就像数据库中的主键。</strong></p><p>在单库单表系统中可以通过自增ID来标识每一条记录，但是随着规模变大分库分表很常见，那么自增ID有仅能针对单一表生成ID，所以在这种情况下无法依靠这个来标识唯一ID。UUID就是一种全局唯一标识符。但是长度过长不易识别。</p><p>在 Zookeeper中通过创建顺序节点就可以实现，所有客户端都会根据自己的任务类型来创建一个顺<br>序节点，例如 job-00000001。</p><p><img src="https://api.codetool.top/img/15845162034318.jpg" alt></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//CreateMode.PERSISTENT_SEQUENTIAL可以在第一个参数path后面附加一个八位的全局递增的数字</span>String path <span class="token operator">=</span> zooKeeper<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"/type1/iob"</span><span class="token punctuation">,</span> <span class="token string">"app2Value"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ZooDefs<span class="token punctuation">.</span>Ids<span class="token punctuation">.</span>OPEN_ACL_UNSAFE<span class="token punctuation">,</span> CreateMode<span class="token punctuation">.</span>PERSISTENT_SEQUENTIAL<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h1 id="DNS服务">4 DNS服务</h1><h2 id="域名配置">4.1 域名配置</h2><p>在分布式系统应用中，每一个应用都需要分配一个域名，日常开发中，往往使用本地HOST绑定域名解析，开发阶段可以随时修改域名和IP的映射，大大提高开发的调试效率。如果应用的机器规模达到一定程度后，需要频繁更新域名时，需要在规模的集群中变更，无法保证实时性。所有我们在zk上创建一个节点来进行域名配置。</p><h2 id="域名解析">4.2 域名解析</h2><p>应用解析时，首先从zk域名节点中获取域名映射的IP和端口。</p><h2 id="域名变更">4.3 域名变更</h2><p>每个应用都会在在对应的域名节点注册一个数据变更的watcher监听，一旦监听的域名节点数据变更， zk会向所有订阅的客户端发送域名变更通知。</p><h1 id="集群管理">5 集群管理</h1><p>随着分布式系统规模日益扩大，集群中机器的数量越来越多。有效的集群管理越来越重要了，<br>zookeeper集群管理主要利用了watcher机制和创建临时节点来实现。以机器上下线和机器监控为例：</p><h2 id="机器上下线">5.1 机器上下线</h2><p>新增机器的时候，将Agent部署到新增的机器上，当Agent部署启动时，会向zookeeper指定的节点下创建一个临时子节点，当Agent在zk上创建完这个临时节点后，当关注的节点<code>zookeeper/machines</code>下的子节点加入新的节点时或删除都会发送通知，这样就对机器的上下线进行监控。</p><h2 id="机器监控">5.2 机器监控</h2><p>在机器运行过程中，Agent会定时将主机的的运行状态信息写入到/machines/hostn主机节点，监控中心通过订阅这些节点的数据变化来获取主机的运行信息。</p><h1 id="分布式锁">6 分布式锁</h1><p>分布式锁的实现方式通常有三种：数据库、redis、zookeeper</p><h2 id="数据库悲观锁">6.1 数据库悲观锁</h2><p>这部分的原理参考<a href="../MySQL之表锁、行锁、MVCC详解/#toc-heading-7">MySQL之表锁、行锁、MVCC详解</a></p><h3 id="insert自动加锁">6.1.1 insert自动加锁</h3><p>思想是，当我们要锁住某个方法或资源时，我们就在该表中增加一条记录，想要释放锁的时候就删除这条记录。</p><p>对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及的数据集加排他锁</p><p>创建数据库：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>methodLock<span class="token punctuation">`</span> <span class="token punctuation">(</span>    <span class="token punctuation">`</span>id<span class="token punctuation">`</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>method_name<span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">UNIQUE</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token keyword">COMMENT</span> <span class="token string">'锁定的方法名'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span><span class="token keyword">desc</span><span class="token punctuation">`</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">'备注信息'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>update_time<span class="token punctuation">`</span> <span class="token keyword">timestamp</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">ON</span> <span class="token keyword">UPDATE</span>    <span class="token keyword">CURRENT_TIMESTAMP</span> <span class="token keyword">COMMENT</span> <span class="token string">'保存数据时间，自动生成'</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>id<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token punctuation">`</span>uidx_method_name<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>method_name <span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8 <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">'锁定中的方法'</span><span class="token punctuation">;</span></code></pre><p>注意<code>method_name</code>必须是唯一索引，否则锁的是全表而不是记录本身。</p><p>获得锁:</p><p><code>insert into methodLock(method_name,desc) values (&#39;method_name&#39;,&#39;desc&#39;);</code></p><p>释放锁：</p><p><code>delete from methodLock where method_name =&#39;method_name&#39;;</code></p><p>上面这种简单的实现有以下几个问题：</p><ol><li>这把锁强依赖数据库的可用性，<strong>数据库是一个单点，一旦数据库挂掉，会导致业务系统不可用。</strong></li><li>这把锁<strong>没有失效时间，一旦解锁操作失败，就会导致锁记录一直在数据库中，其他线程无法再获得到锁。</strong></li><li>这把锁只能是非阻塞的，因为数据的insert操作，一旦插入失败就会直接报错。<strong>没有获得锁的线程并不会进入排队队列，要想再次获得锁就要再次触发获得锁操作。</strong></li><li>这把锁是<strong>非重入的，同一个线程在没有释放锁之前无法再次获得该锁。</strong>因为数据中数据已经存在了。</li></ol><h3 id="select手动加锁">6.1.2 select手动加锁</h3><p><code>select ... for update</code>如果记录存在，会给记录加上行锁实现一致性锁定读。</p><p>获得锁：</p><p><code>select * from methodLock where method_name = #{currentMethod} for update;</code></p><p>释放锁：</p><p><code>commit</code></p><p><strong>这个方法的问题是，如果查询的记录不存在，mysql会加上间隙锁，而间隙锁是共享锁，也就是允许读操作，不会阻塞，所以当查询的记录不存在这种方法是不适用的。</strong></p><p>这里还可能存在另外一个问题，虽然我们对 <code>method_name</code> 使用了唯一索引，并且显示使用for update 来使用行级锁。但是，MySql 会对查询进行优化，即便在条件中使用了索引字段，但是否使用索引来检索数据是由 MySQL 通过判断不同执行计划的代价来决定的，<strong>如果MySQL 认为全表扫效率更高，比如对一些很小的表，它就不会使用索引，这种情况下InnoDB 将使用表锁，而不是行锁。</strong></p><h2 id="数据库乐观锁">6.2 数据库乐观锁</h2><p>数据库的乐观锁认为大多数时候操作都不会冲突，它给数据添加一个版本号，读取出数据时，将此版本号一同读出，之后更新时，对此版本号加1。在更新过程中，会对版本号进行比较，如果是一致的，没有发生改变，则会成功执行本次操作；如果版本号不一致，则会更新失败。</p><p>获得锁：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> state<span class="token punctuation">,</span>version <span class="token keyword">from</span> methodLock <span class="token keyword">where</span> method_name <span class="token operator">=</span> <span class="token string">'currentMethod'</span><span class="token punctuation">;</span><span class="token keyword">update</span> methodLock <span class="token keyword">set</span> state <span class="token operator">=</span> <span class="token string">'locked'</span><span class="token punctuation">,</span>version <span class="token operator">=</span> version <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">where</span>method_name <span class="token operator">=</span> <span class="token string">'currentMethod'</span> <span class="token operator">and</span> state <span class="token operator">=</span> <span class="token string">'unlock'</span> <span class="token operator">and</span> version <span class="token operator">=</span> <span class="token string">'version'</span><span class="token punctuation">;</span></code></pre><p>释放锁：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">update</span> methodLock <span class="token keyword">set</span> state <span class="token operator">=</span> <span class="token string">'unlock'</span> <span class="token keyword">where</span> method_name <span class="token operator">=</span> <span class="token string">'currentMethod'</span> <span class="token operator">and</span> state <span class="token operator">=</span> <span class="token string">'locked'</span><span class="token punctuation">;</span></code></pre><p>乐观锁只能解决持久化是 DB 数据的一次更新问题。假如你的数据不是在 DB，或者一个过程有三个数据的更新操作，线程 A 更新了数据 1 和数据 2，线程 B 更新了数据 3，乐观锁就不能起作用。</p><h2 id="Redis">6.3 Redis</h2><p>redis分布式锁的实现和数据库的思想差不多，它是基于<code>setnx</code>（set if not exists）实现的，设置成功，返回1；设置失败，返回0，释放锁的操作通过del指令来完成。</p><p>如果设置锁后在执行中间过程时，程序抛出异常，导致del指令没有调用，锁永远无法释放，这样就会陷入死锁。所以我们拿到锁之后会给锁加上一个过期时间，这样即使中间出现异常，过期时间到后会自动释放锁。</p><p>同时在<code>setnx</code> 和 <code>expire</code> 如果进程挂掉，expire不能执行也会死锁。所以要保证setnx和expire是一个原子性操作即可。redis 2.8之后推出了setnx和expire的组合指令</p><pre><code>set key value ex 5 nx</code></pre><p>redis 实现分布式锁存在的问题：为了解决redis单点问题，我们会部署redis集群，<strong>在 Sentinel 集群中，主节点突然挂掉了。同时主节点中有把锁还没有来得及同步到从节点。这样就会导致系统中同样一把锁被两个客户端同时持有，不安全性由此产生</strong>。redis官方为了解决这个问题，推出了Redlock 算法解决这个问题。但是带来的网络消耗较大。</p><p>使用redisson（一个redis的作用于java的第三方库）可以解决这个问题。</p><h2 id="Zookeeper">6.4 Zookeeper</h2><p><strong>原理:</strong> </p><p>zookeeper通过创建<strong>临时序列节点</strong>来实现分布式锁，适用于顺序执行的程序，大体思路就是创建临时序列节点,找出最小的序列节点,获取分布式锁,程序执行完成之后此序列节点消失，<strong>通过watch来监控自己前一个节点的删除，当自己为序列中编号最小的节点的时候，获得分布式锁。</strong>当释放锁的时候，只需将这个瞬时节点删除即可。同时，其可以避免服务宕机导致的锁无法释放，而产生的死锁问题。</p><p><strong>优点</strong></p><ol><li><strong>无单点问题。</strong>ZK 是集群部署的，只要集群中有半数以上的机器存活，就可以对外提供服务。</li><li>持有锁任意长的时间，可自动释放锁。使用 Zookeeper 可以有效的解决锁无法释放的问题，因为在创建锁的时候，客户端会在 ZK 中创建一个临时节点，<strong>一旦客户端获取到锁之后突然挂掉（Session 连接断开），那么这个临时节点就会自动删除掉。其他客户端就可以再次获得锁。</strong>这避免了基于 Redis 的锁对于有效时间(lock validity time)到底设置多长的两难问题。实际上，基于 ZooKeeper 的锁是依靠 Session（心跳）来维持锁的持有状态的，而 Redis 不支持 Session。</li><li>可阻塞。使用 Zookeeper 可以实现阻塞的锁，<strong>客户端可以通过在 ZK 中创建顺序节点，并且在节点上绑定监听器，一旦节点有变化，Zookeeper 会通知客户端，客户端可以检查自己创建的节点是不是当前所有节点中序号最小的，如果是，那么自己就获取到锁，便可以执行业务逻辑了。</strong></li><li>可重入。客户端在创建节点的时候，把当前客户端的主机信息和线程信息直接写入到节点中，<strong>下次想要获取锁的时候和当前最小的节点中的数据比对一下就可以了。如果和自己的信息一样，那么自己直接获取到锁，如果不一样就再创建一个临时的顺序节点，参与排队。</strong>zookeeper 第三方库Curator 客户端中封装了一个可重入的锁服务。</li></ol><p><strong>缺点</strong></p><p>zookeeper 实现的分布式锁其实存在一个缺点，那就是<strong>性能上可能并没有缓存服务那么高。因为每次在创建锁和释放锁的过程中，都要动态创建、销毁瞬时节点来实现锁功能。</strong>ZK 中创建和删除节点只能通过 Leader 服务器来执行，然后将数据同不到所有的 Follower 机器上。</p><h1 id="分布式队列">7 分布式队列</h1><p>队列特性：FIFO（先入先出），zookeeper实现分布式队列的步骤：</p><ul><li>在队列节点下创建临时顺序节点，例如<code>/queue_info/192.168.1.1-0000001</code></li><li>调用 getChildren()接口来获取/queue_info节点下所有子节点，获取队列中所有元素</li><li>比较自己节点是否是序号最小的节点，如果不是，则等待其他节点出队列，在序号最小的节点注册watcher</li><li>获取watcher通知后，重复步骤</li></ul><p><img src="https://api.codetool.top/img/15845314156477.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;该文参考资源：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/dingjianmin/article/details/82763871&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浅谈分布式锁–基于数据库实现篇_数据库_po
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="分布式" scheme="https://www.codetool.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="zookeeper" scheme="https://www.codetool.top/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper中的Watcher机制与源码分析</title>
    <link href="https://www.codetool.top/article/Zookeeper%E4%B8%AD%E7%9A%84Watcher%E6%9C%BA%E5%88%B6/"/>
    <id>https://www.codetool.top/article/Zookeeper中的Watcher机制/</id>
    <published>2020-03-18T03:02:14.000Z</published>
    <updated>2020-03-18T11:35:28.073Z</updated>
    
    <content type="html"><![CDATA[<h1 id="watcher机制概述">1 watcher机制概述</h1><p>zookeeper中非常重要的一个机制就是watcher，在zkCli中可以在get、ls、ls2、stat 等操作中添加watch，从而监听节点变化，起到在分布式系统中收到消息通知作用。</p><p>Watcher机制包括三部分：注册、存储、通知</p><p><strong>注册：</strong> 注册Watcher<br><strong>存储：</strong> Watcher对象存在客户端的WatcherManager中<br><strong>通知：</strong> 服务端触发Watcher事件，通知客户端，客户端从WatcherManager中取出对应的Watcher对象执行回调   </p><p><img src="https://api.codetool.top/img/15845014504308.webp" alt></p><h1 id="源码分析">2 源码分析</h1><h2 id="客户端注册">2.1 客户端注册</h2><p>我们通过zkCli的执行命令流程来看一下watch起到了什么作用：</p><p><img src="https://api.codetool.top/img/15845035952250.png" alt="zkCli.sh"></p><p>找到对应的类下的main方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CliException<span class="token punctuation">,</span> IOException<span class="token punctuation">,</span> InterruptedException<span class="token punctuation">{</span>    ZooKeeperMain main <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeperMain</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    main<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//跟进去</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CliException<span class="token punctuation">,</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cl<span class="token punctuation">.</span><span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Welcome to ZooKeeper!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> jlinemissing <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//这一部分使用反射生成ConsoleReader实例读取命令行指令</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> consoleC <span class="token operator">=</span> Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"jline.console.ConsoleReader"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> completorC <span class="token operator">=</span>                Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.apache.zookeeper.JLineZNodeCompleter"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"JLine support is enabled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object console <span class="token operator">=</span>                consoleC<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Object completor <span class="token operator">=</span>                completorC<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span>ZooKeeper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>zk<span class="token punctuation">)</span><span class="token punctuation">;</span>            Method addCompletor <span class="token operator">=</span> consoleC<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"addCompleter"</span><span class="token punctuation">,</span>                    Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"jline.console.completer.Completer"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            addCompletor<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>console<span class="token punctuation">,</span> completor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//执行指令</span>            String line<span class="token punctuation">;</span>            Method readLine <span class="token operator">=</span> consoleC<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"readLine"</span><span class="token punctuation">,</span> String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>line <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span>readLine<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>console<span class="token punctuation">,</span> <span class="token function">getPrompt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//执行！此处跟进</span>                <span class="token function">executeLine</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//catch ...</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">executeLine</span><span class="token punctuation">(</span>String line<span class="token punctuation">)</span> <span class="token keyword">throws</span> CliException<span class="token punctuation">,</span> InterruptedException<span class="token punctuation">,</span> IOException <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>line<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//将命令字符串转换成MyCommandOptions对象</span>        cl<span class="token punctuation">.</span><span class="token function">parseCommand</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//添加命令到历史记录</span>        <span class="token function">addToHistory</span><span class="token punctuation">(</span>commandCount<span class="token punctuation">,</span>line<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行命令，此处跟进</span>        <span class="token function">processCmd</span><span class="token punctuation">(</span>cl<span class="token punctuation">)</span><span class="token punctuation">;</span>        commandCount<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">processCmd</span><span class="token punctuation">(</span>MyCommandOptions co<span class="token punctuation">)</span> <span class="token keyword">throws</span> CliException<span class="token punctuation">,</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">boolean</span> watch <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//执行命令，此处跟进</span>        watch <span class="token operator">=</span> <span class="token function">processZKCmd</span><span class="token punctuation">(</span>co<span class="token punctuation">)</span><span class="token punctuation">;</span>        exitCode <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CliException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        exitCode <span class="token operator">=</span> ex<span class="token punctuation">.</span><span class="token function">getExitCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> watch<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">processZKCmd</span><span class="token punctuation">(</span>MyCommandOptions co<span class="token punctuation">)</span> <span class="token keyword">throws</span> CliException<span class="token punctuation">,</span> IOException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> co<span class="token punctuation">.</span><span class="token function">getArgArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String cmd <span class="token operator">=</span> co<span class="token punctuation">.</span><span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//命令没输入</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MalformedCommandException</span><span class="token punctuation">(</span><span class="token string">"No command entered"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//不存在该指令</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>commandMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CommandNotFoundException</span><span class="token punctuation">(</span><span class="token string">"Command not found "</span> <span class="token operator">+</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">boolean</span> watch <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    LOG<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Processing "</span> <span class="token operator">+</span> cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//quit等无实际操作的指令</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"quit"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        zk<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>exitCode<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"redo"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> args<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer i <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>commandCount <span class="token operator">&lt;=</span> i <span class="token operator">||</span> i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// don't allow redoing this redo</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MalformedCommandException</span><span class="token punctuation">(</span><span class="token string">"Command index out of range"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        cl<span class="token punctuation">.</span><span class="token function">parseCommand</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cl<span class="token punctuation">.</span><span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"redo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MalformedCommandException</span><span class="token punctuation">(</span><span class="token string">"No redoing redos"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        history<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>commandCount<span class="token punctuation">,</span> history<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">processCmd</span><span class="token punctuation">(</span>cl<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"history"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> commandCount <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> commandCount<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" - "</span> <span class="token operator">+</span> history<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"printwatches"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"printwatches is "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>printWatches <span class="token operator">?</span> <span class="token string">"on"</span> <span class="token operator">:</span> <span class="token string">"off"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            printWatches <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"on"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cmd<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"connect"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">connectToZK</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">connectToZK</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// Below commands all need a live connection</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>zk <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token operator">!</span>zk<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Not connected"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 如果是正常的操作命令，使用cliCmd的子类执行</span>    CliCommand cliCmd <span class="token operator">=</span> commandMapCli<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>cliCmd <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cliCmd<span class="token punctuation">.</span><span class="token function">setZk</span><span class="token punctuation">(</span>zk<span class="token punctuation">)</span><span class="token punctuation">;</span>        watch <span class="token operator">=</span> cliCmd<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此处跟进</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>commandMap<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> watch<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里我们选择cliCmd的子类GetCommand跟进exec方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CliException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//根据是否具有'-w'参数判断是否监听</span>    <span class="token keyword">boolean</span> watch <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">hasOption</span><span class="token punctuation">(</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String path <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    Stat stat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">byte</span> data<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//使用getData命令获取数据，此处跟进</span>        data <span class="token operator">=</span> zk<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> watch<span class="token punctuation">,</span> stat<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MalformedPathException</span><span class="token punctuation">(</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">KeeperException</span><span class="token operator">|</span>InterruptedException ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">CliException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    data <span class="token operator">=</span> <span class="token punctuation">(</span>data <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">"null"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> data<span class="token punctuation">;</span>    out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cl<span class="token punctuation">.</span><span class="token function">hasOption</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">StatPrinter</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>stat<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> watch<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getData</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span> <span class="token keyword">boolean</span> watch<span class="token punctuation">,</span> Stat stat<span class="token punctuation">)</span>        <span class="token keyword">throws</span> KeeperException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//可以看到这里有一个watchManager.defaultWatcher，它是一个默认的watcher</span>    <span class="token keyword">return</span> <span class="token function">getData</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> watch <span class="token operator">?</span> watchManager<span class="token punctuation">.</span>defaultWatcher <span class="token operator">:</span> null<span class="token punctuation">,</span> stat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getData</span><span class="token punctuation">(</span><span class="token keyword">final</span> String path<span class="token punctuation">,</span> Watcher watcher<span class="token punctuation">,</span> Stat stat<span class="token punctuation">)</span>    <span class="token keyword">throws</span> KeeperException<span class="token punctuation">,</span> InterruptedException    <span class="token punctuation">{</span>    <span class="token keyword">final</span> String clientPath <span class="token operator">=</span> path<span class="token punctuation">;</span>    PathUtils<span class="token punctuation">.</span><span class="token function">validatePath</span><span class="token punctuation">(</span>clientPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// the watch contains the un-chroot path</span>    WatchRegistration wcb <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>watcher <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//如果watcher不为空注册watcher，此处跟进，返回一个WatchRegistration</span>        wcb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataWatchRegistration</span><span class="token punctuation">(</span>watcher<span class="token punctuation">,</span> clientPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">final</span> String serverPath <span class="token operator">=</span> <span class="token function">prependChroot</span><span class="token punctuation">(</span>clientPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    RequestHeader h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RequestHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    h<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span>ZooDefs<span class="token punctuation">.</span>OpCode<span class="token punctuation">.</span>getData<span class="token punctuation">)</span><span class="token punctuation">;</span>    GetDataRequest request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetDataRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span>serverPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    request<span class="token punctuation">.</span><span class="token function">setWatch</span><span class="token punctuation">(</span>watcher <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    GetDataResponse response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetDataResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//此处用到了返回的WatchRegistration，跟进</span>    ReplyHeader r <span class="token operator">=</span> cnxn<span class="token punctuation">.</span><span class="token function">submitRequest</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> wcb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getErr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> KeeperException<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>KeeperException<span class="token punctuation">.</span>Code<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getErr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                clientPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stat <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DataTree<span class="token punctuation">.</span><span class="token function">copyStat</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">getStat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stat<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">DataWatchRegistration</span><span class="token punctuation">(</span>Watcher watcher<span class="token punctuation">,</span> String clientPath<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>watcher<span class="token punctuation">,</span> clientPath<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用WatchRegistration的构造方法</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">WatchRegistration</span><span class="token punctuation">(</span>Watcher watcher<span class="token punctuation">,</span> String clientPath<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token comment" spellcheck="true">//包含一个watcher和一个监听地址</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>watcher <span class="token operator">=</span> watcher<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>clientPath <span class="token operator">=</span> clientPath<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ReplyHeader <span class="token function">submitRequest</span><span class="token punctuation">(</span>RequestHeader h<span class="token punctuation">,</span> Record request<span class="token punctuation">,</span>        Record response<span class="token punctuation">,</span> WatchRegistration watchRegistration<span class="token punctuation">)</span>        <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">submitRequest</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> watchRegistration<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> ReplyHeader <span class="token function">submitRequest</span><span class="token punctuation">(</span>RequestHeader h<span class="token punctuation">,</span> Record request<span class="token punctuation">,</span>        Record response<span class="token punctuation">,</span> WatchRegistration watchRegistration<span class="token punctuation">,</span>        WatchDeregistration watchDeregistration<span class="token punctuation">)</span>        <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    ReplyHeader r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReplyHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//使用watchRegistration构建了一个queuePacket</span>    Packet packet <span class="token operator">=</span> <span class="token function">queuePacket</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> r<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span>            null<span class="token punctuation">,</span> watchRegistration<span class="token punctuation">,</span> watchDeregistration<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>packet<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>requestTimeout <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Wait for request completion with timeout</span>            <span class="token function">waitForPacketFinish</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> packet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Wait for request completion infinitely</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>packet<span class="token punctuation">.</span>finished<span class="token punctuation">)</span> <span class="token punctuation">{</span>                packet<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r<span class="token punctuation">.</span><span class="token function">getErr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Code<span class="token punctuation">.</span>REQUESTTIMEOUT<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        sendThread<span class="token punctuation">.</span><span class="token function">cleanAndNotifyState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Packet <span class="token function">queuePacket</span><span class="token punctuation">(</span>RequestHeader h<span class="token punctuation">,</span> ReplyHeader r<span class="token punctuation">,</span> Record request<span class="token punctuation">,</span>        Record response<span class="token punctuation">,</span> AsyncCallback cb<span class="token punctuation">,</span> String clientPath<span class="token punctuation">,</span>        String serverPath<span class="token punctuation">,</span> Object ctx<span class="token punctuation">,</span> WatchRegistration watchRegistration<span class="token punctuation">,</span>        WatchDeregistration watchDeregistration<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Packet packet <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Note that we do not generate the Xid for the packet yet. It is</span>    <span class="token comment" spellcheck="true">// generated later at send-time, by an implementation of ClientCnxnSocket::doIO(),</span>    <span class="token comment" spellcheck="true">// where the packet is actually sent.</span>    packet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Packet</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> r<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">,</span> watchRegistration<span class="token punctuation">)</span><span class="token punctuation">;</span>    packet<span class="token punctuation">.</span>cb <span class="token operator">=</span> cb<span class="token punctuation">;</span>    packet<span class="token punctuation">.</span>ctx <span class="token operator">=</span> ctx<span class="token punctuation">;</span>    packet<span class="token punctuation">.</span>clientPath <span class="token operator">=</span> clientPath<span class="token punctuation">;</span>    packet<span class="token punctuation">.</span>serverPath <span class="token operator">=</span> serverPath<span class="token punctuation">;</span>    packet<span class="token punctuation">.</span>watchDeregistration <span class="token operator">=</span> watchDeregistration<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// The synchronized block here is for two purpose:</span>    <span class="token comment" spellcheck="true">// 1. synchronize with the final cleanup() in SendThread.run() to avoid race</span>    <span class="token comment" spellcheck="true">// 2. synchronized against each packet. So if a closeSession packet is added,</span>    <span class="token comment" spellcheck="true">// later packet will be notified.</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">.</span><span class="token function">isAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> closing<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">conLossPacket</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// If the client is asking to close the session then</span>            <span class="token comment" spellcheck="true">// mark as closing</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>h<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> OpCode<span class="token punctuation">.</span>closeSession<span class="token punctuation">)</span> <span class="token punctuation">{</span>                closing <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            outgoingQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>packet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//将该packet添加到了sendThread的ClientCnxnSocket中</span>    sendThread<span class="token punctuation">.</span><span class="token function">getClientCnxnSocket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">packetAdded</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> packet<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在将packet添加到了<code>sendThread</code>的<code>ClientCnxnSocket</code>中之后，注意SendThread是不停地在<code>doIO</code>，而这里<code>packetAdded</code>之后还会调用selector的wakeup()方法，通知服务端这边有一个packet发过去了，并且在<code>finishPacket</code>之后，向ZooKeeper中的一个静态内部类<code>ZKWatchManager</code>内的hashmap添加了这个watcher</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>Watcher<span class="token operator">>></span> dataWatches <span class="token operator">=</span>    <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>Watcher<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>Watcher<span class="token operator">>></span> existWatches <span class="token operator">=</span>    <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>Watcher<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>Watcher<span class="token operator">>></span> childWatches <span class="token operator">=</span>    <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>Watcher<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="服务端存储">2.2 服务端存储</h2><p>那么服务端干了什么呢？</p><p>研究服务端源码可以发现，在服务端是leading状态时，通过调用LeaderZooKeeperServer的startup方法，里面再调用ZooKeeperServer中的startup方法，在调用setupRequestProcessors()进行请求处理:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">setupRequestProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    RequestProcessor finalProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinalRequestProcessor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    RequestProcessor syncProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SyncRequestProcessor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>            finalProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>SyncRequestProcessor<span class="token punctuation">)</span>syncProcessor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    firstProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrepRequestProcessor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> syncProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span><span class="token punctuation">(</span>PrepRequestProcessor<span class="token punctuation">)</span>firstProcessor<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里面有一个PrepRequestProcessor和一个封装了FinalRequestProcessor的SyncRequestProcessor，通过阅读源码发现FinalRequestProcessor的processRequest中</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processRequest</span><span class="token punctuation">(</span>Request request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//prehandling...</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//case...</span>        <span class="token keyword">case</span> OpCode<span class="token punctuation">.</span>getData<span class="token operator">:</span> <span class="token punctuation">{</span>            lastOp <span class="token operator">=</span> <span class="token string">"GETD"</span><span class="token punctuation">;</span>            GetDataRequest getDataRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetDataRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ByteBufferInputStream<span class="token punctuation">.</span><span class="token function">byteBuffer2Record</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>request<span class="token punctuation">,</span>                    getDataRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>            DataNode n <span class="token operator">=</span> zks<span class="token punctuation">.</span><span class="token function">getZKDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNode</span><span class="token punctuation">(</span>getDataRequest<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">KeeperException<span class="token punctuation">.</span>NoNodeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            PrepRequestProcessor<span class="token punctuation">.</span><span class="token function">checkACL</span><span class="token punctuation">(</span>zks<span class="token punctuation">,</span> zks<span class="token punctuation">.</span><span class="token function">getZKDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">aclForNode</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span>                    ZooDefs<span class="token punctuation">.</span>Perms<span class="token punctuation">.</span>READ<span class="token punctuation">,</span>                    request<span class="token punctuation">.</span>authInfo<span class="token punctuation">)</span><span class="token punctuation">;</span>            Stat stat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//通过getWatch获取是否监视，如果监视传递一个ServerCnxn对象，继承自Watcher</span>            <span class="token keyword">byte</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> zks<span class="token punctuation">.</span><span class="token function">getZKDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>getDataRequest<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stat<span class="token punctuation">,</span>                    getDataRequest<span class="token punctuation">.</span><span class="token function">getWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> cnxn <span class="token operator">:</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>            rsp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GetDataResponse</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> stat<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//case...</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getData</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span> Stat stat<span class="token punctuation">,</span> Watcher watcher<span class="token punctuation">)</span><span class="token keyword">throws</span> KeeperException<span class="token punctuation">.</span>NoNodeException <span class="token punctuation">{</span>    <span class="token keyword">return</span> dataTree<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> stat<span class="token punctuation">,</span> watcher<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getData</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span> Stat stat<span class="token punctuation">,</span> Watcher watcher<span class="token punctuation">)</span>        <span class="token keyword">throws</span> KeeperException<span class="token punctuation">.</span>NoNodeException <span class="token punctuation">{</span>    DataNode n <span class="token operator">=</span> nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">KeeperException<span class="token punctuation">.</span>NoNodeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        n<span class="token punctuation">.</span><span class="token function">copyStat</span><span class="token punctuation">(</span>stat<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>watcher <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//添加监视，跟进</span>            dataWatches<span class="token punctuation">.</span><span class="token function">addWatch</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> watcher<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> n<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">addWatch</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span> Watcher watcher<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//使用watchTable记录某路径所有的监视器</span>    HashSet<span class="token operator">&lt;</span>Watcher<span class="token operator">></span> list <span class="token operator">=</span> watchTable<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// don't waste memory if there are few watches on a node</span>        <span class="token comment" spellcheck="true">// rehash when the 4th entry is added, doubling size thereafter</span>        <span class="token comment" spellcheck="true">// seems like a good compromise</span>        list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Watcher<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        watchTable<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span><span class="token punctuation">;</span>    HashSet<span class="token operator">&lt;</span>String<span class="token operator">></span> paths <span class="token operator">=</span> watch2Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>watcher<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>paths <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// cnxns typically have many watches, so use default cap here</span>        paths <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        watch2Paths<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>watcher<span class="token punctuation">,</span> paths<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    paths<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这样就把监视器和path关联起来了，而服务端可以通过刚刚传入的ServerCnxn联系客户端。</p><h2 id="服务端通知">2.3 服务端通知</h2><p>而如果数据发生变动无非就是处理了set命令，找到对应的函数：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Stat <span class="token function">setData</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data<span class="token punctuation">,</span> <span class="token keyword">int</span> version<span class="token punctuation">,</span> <span class="token keyword">long</span> zxid<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoNodeException <span class="token punctuation">{</span>    Stat s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    DataNode n <span class="token operator">=</span> <span class="token punctuation">(</span>DataNode<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>nodes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoNodeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lastdata <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> lastdata<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 赋值node</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>            lastdata <span class="token operator">=</span> n<span class="token punctuation">.</span>data<span class="token punctuation">;</span>            n<span class="token punctuation">.</span>data <span class="token operator">=</span> data<span class="token punctuation">;</span>            n<span class="token punctuation">.</span>stat<span class="token punctuation">.</span><span class="token function">setMtime</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>            n<span class="token punctuation">.</span>stat<span class="token punctuation">.</span><span class="token function">setMzxid</span><span class="token punctuation">(</span>zxid<span class="token punctuation">)</span><span class="token punctuation">;</span>            n<span class="token punctuation">.</span>stat<span class="token punctuation">.</span><span class="token function">setVersion</span><span class="token punctuation">(</span>version<span class="token punctuation">)</span><span class="token punctuation">;</span>            n<span class="token punctuation">.</span><span class="token function">copyStat</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String lastPrefix<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>lastPrefix <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMaxPrefixWithQuota</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">updateBytes</span><span class="token punctuation">(</span>lastPrefix<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span>data <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> data<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>lastdata <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> lastdata<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 触发watcher</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dataWatches<span class="token punctuation">.</span><span class="token function">triggerWatch</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> EventType<span class="token punctuation">.</span>NodeDataChanged<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Watcher<span class="token operator">></span> <span class="token function">triggerWatch</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span> EventType type<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">triggerWatch</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> type<span class="token punctuation">,</span> <span class="token punctuation">(</span>Set<span class="token punctuation">)</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Watcher<span class="token operator">></span> <span class="token function">triggerWatch</span><span class="token punctuation">(</span>String path<span class="token punctuation">,</span> EventType type<span class="token punctuation">,</span> Set<span class="token operator">&lt;</span>Watcher<span class="token operator">></span> supress<span class="token punctuation">)</span> <span class="token punctuation">{</span>    WatchedEvent e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WatchedEvent</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> KeeperState<span class="token punctuation">.</span>SyncConnected<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>    HashSet watchers<span class="token punctuation">;</span>    <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//移除watcher！</span>        watchers <span class="token operator">=</span> <span class="token punctuation">(</span>HashSet<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>watchTable<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>watchers <span class="token operator">==</span> null <span class="token operator">||</span> watchers<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>LOG<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                ZooTrace<span class="token punctuation">.</span><span class="token function">logTraceMessage</span><span class="token punctuation">(</span>LOG<span class="token punctuation">,</span> 64L<span class="token punctuation">,</span> <span class="token string">"No watchers for "</span> <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Iterator i$ <span class="token operator">=</span> watchers<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i$<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//移除watcher！</span>            Watcher w <span class="token operator">=</span> <span class="token punctuation">(</span>Watcher<span class="token punctuation">)</span>i$<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            HashSet<span class="token operator">&lt;</span>String<span class="token operator">></span> paths <span class="token operator">=</span> <span class="token punctuation">(</span>HashSet<span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>watch2Paths<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>paths <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                paths<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    Iterator i$ <span class="token operator">=</span> watchers<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Watcher w<span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>i$<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> watchers<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            w <span class="token operator">=</span> <span class="token punctuation">(</span>Watcher<span class="token punctuation">)</span>i$<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span>supress <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> supress<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// watcher调用，这里的e对象里只有通知状态（KeeperState）、事件类型（EventType）以及节点路径（Path）</span>        <span class="token comment" spellcheck="true">// 没有修改过后的新值也没有老的值</span>        w<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>WatchedEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span> 　　<span class="token comment" spellcheck="true">// 请求头标记-1，表明是通知</span>    ReplyHeader h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReplyHeader</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>1L<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>LOG<span class="token punctuation">.</span><span class="token function">isTraceEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        ZooTrace<span class="token punctuation">.</span><span class="token function">logTraceMessage</span><span class="token punctuation">(</span>LOG<span class="token punctuation">,</span> 64L<span class="token punctuation">,</span> <span class="token string">"Deliver event "</span> <span class="token operator">+</span> event <span class="token operator">+</span> <span class="token string">" to 0x"</span> <span class="token operator">+</span> Long<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>sessionId<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" through "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    WatcherEvent e <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getWrapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 发送通知给客户端</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sendResponse</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token string">"notification"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在此处就把监听的事件类型和状态返回给了客户端，那么再返回客户端看看客户端的处理</p><h2 id="客户端处理事件（依客户端而定）">2.4 客户端处理事件（依客户端而定）</h2><p>在客户端的SendThread中调用了doTransport-&gt;doIO-&gt;readResponse来接收服务器的响应</p><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">readResponse</span><span class="token punctuation">(</span>ByteBuffer incomingBuffer<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    ByteBufferInputStream bbis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteBufferInputStream</span><span class="token punctuation">(</span>            incomingBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span>    BinaryInputArchive bbia <span class="token operator">=</span> BinaryInputArchive<span class="token punctuation">.</span><span class="token function">getArchive</span><span class="token punctuation">(</span>bbis<span class="token punctuation">)</span><span class="token punctuation">;</span>    ReplyHeader replyHdr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReplyHeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    replyHdr<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>bbia<span class="token punctuation">,</span> <span class="token string">"header"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//if replyHdr.getXid() == ...</span>    <span class="token comment" spellcheck="true">// 如果是通知</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>replyHdr<span class="token punctuation">.</span><span class="token function">getXid</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// -1 means notification</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LOG<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOG<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Got notification sessionid:0x"</span>                <span class="token operator">+</span> Long<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>sessionId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//反序列化</span>        WatcherEvent event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WatcherEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        event<span class="token punctuation">.</span><span class="token function">deserialize</span><span class="token punctuation">(</span>bbia<span class="token punctuation">,</span> <span class="token string">"response"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 从服务器地址转换为客户端地址</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>chrootPath <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String serverPath <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>serverPath<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>chrootPath<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>                event<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>serverPath<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> chrootPath<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                event<span class="token punctuation">.</span><span class="token function">setPath</span><span class="token punctuation">(</span>serverPath<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>chrootPath<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">{</span>                LOG<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Got server path "</span> <span class="token operator">+</span> event<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token operator">+</span> <span class="token string">" which is too short for chroot path "</span>                        <span class="token operator">+</span> chrootPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        WatchedEvent we <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WatchedEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LOG<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            LOG<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Got "</span> <span class="token operator">+</span> we <span class="token operator">+</span> <span class="token string">" for sessionid 0x"</span>                    <span class="token operator">+</span> Long<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>sessionId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//交给eventThread线程处理</span>        eventThread<span class="token punctuation">.</span><span class="token function">queueEvent</span><span class="token punctuation">(</span> we <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">queueEvent</span><span class="token punctuation">(</span>WatchedEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">queueEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">queueEvent</span><span class="token punctuation">(</span>WatchedEvent event<span class="token punctuation">,</span>        Set<span class="token operator">&lt;</span>Watcher<span class="token operator">></span> materializedWatchers<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> EventType<span class="token punctuation">.</span>None            <span class="token operator">&amp;&amp;</span> sessionState <span class="token operator">==</span> event<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取状态</span>    sessionState <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> Set<span class="token operator">&lt;</span>Watcher<span class="token operator">></span> watchers<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>materializedWatchers <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// materialize the watchers based on the event</span>        <span class="token comment" spellcheck="true">// 因为只有路径、事件类型，要通过这些信息获取获取所有的watcher</span>        watchers <span class="token operator">=</span> watcher<span class="token punctuation">.</span><span class="token function">materialize</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                event<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        watchers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Watcher<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        watchers<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>materializedWatchers<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//将Watchers和WatchedEvent关联起来</span>    WatcherSetEventPair pair <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WatcherSetEventPair</span><span class="token punctuation">(</span>watchers<span class="token punctuation">,</span> event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// queue the pair (watch set &amp; event) for later processing</span>    <span class="token comment" spellcheck="true">// 加入到一个阻塞队列中待处理</span>    waitingEvents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>pair<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Watcher<span class="token operator">></span> <span class="token function">materialize</span><span class="token punctuation">(</span>Watcher<span class="token punctuation">.</span>Event<span class="token punctuation">.</span>KeeperState state<span class="token punctuation">,</span>                                    Watcher<span class="token punctuation">.</span>Event<span class="token punctuation">.</span>EventType type<span class="token punctuation">,</span>                                    String clientPath<span class="token punctuation">)</span>    <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>Watcher<span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span>Watcher<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//收集并移除事件</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> None<span class="token operator">:</span>            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>defaultWatcher<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">boolean</span> clear <span class="token operator">=</span> disableAutoWatchReset <span class="token operator">&amp;&amp;</span> state <span class="token operator">!=</span> Watcher<span class="token punctuation">.</span>Event<span class="token punctuation">.</span>KeeperState<span class="token punctuation">.</span>SyncConnected<span class="token punctuation">;</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span>dataWatches<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>Watcher<span class="token operator">></span> ws<span class="token operator">:</span> dataWatches<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    result<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>ws<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>clear<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    dataWatches<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span>existWatches<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>Watcher<span class="token operator">></span> ws<span class="token operator">:</span> existWatches<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    result<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>ws<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>clear<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    existWatches<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">synchronized</span><span class="token punctuation">(</span>childWatches<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>Watcher<span class="token operator">></span> ws<span class="token operator">:</span> childWatches<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    result<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>ws<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>clear<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    childWatches<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token keyword">case</span> NodeDataChanged<span class="token operator">:</span>        <span class="token keyword">case</span> NodeCreated<span class="token operator">:</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>dataWatches<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">addTo</span><span class="token punctuation">(</span>dataWatches<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>clientPath<span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>existWatches<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">addTo</span><span class="token punctuation">(</span>existWatches<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>clientPath<span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> NodeChildrenChanged<span class="token operator">:</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>childWatches<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">addTo</span><span class="token punctuation">(</span>childWatches<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>clientPath<span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> NodeDeleted<span class="token operator">:</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>dataWatches<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">addTo</span><span class="token punctuation">(</span>dataWatches<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>clientPath<span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// XXX This shouldn't be needed, but just in case</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>existWatches<span class="token punctuation">)</span> <span class="token punctuation">{</span>                Set<span class="token operator">&lt;</span>Watcher<span class="token operator">></span> list <span class="token operator">=</span> existWatches<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>clientPath<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">addTo</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>                    LOG<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"We are triggering an exists watch for delete! Shouldn't happen!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>childWatches<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">addTo</span><span class="token punctuation">(</span>childWatches<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>clientPath<span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>            String msg <span class="token operator">=</span> <span class="token string">"Unhandled watch event type "</span> <span class="token operator">+</span> type                <span class="token operator">+</span> <span class="token string">" with state "</span> <span class="token operator">+</span> state <span class="token operator">+</span> <span class="token string">" on path "</span> <span class="token operator">+</span> clientPath<span class="token punctuation">;</span>            LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里可以看到客户端根据事件类型和路径从<code>ZKWatchManager</code>中取出了对应的watcher并移除了它，说明客户端的watcher也是一次性的，</p><p>在ClientCnxn的EventThread中，不断地从waitingEvents中取事件：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        isRunning <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//取事件</span>            Object event <span class="token operator">=</span> waitingEvents<span class="token punctuation">.</span><span class="token function">take</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token operator">==</span> eventOfDeath<span class="token punctuation">)</span> <span class="token punctuation">{</span>                wasKilled <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//处理事件，跟进</span>                <span class="token function">processEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>wasKilled<span class="token punctuation">)</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>waitingEvents<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>waitingEvents<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    isRunning <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Event thread exiting due to interruption"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    LOG<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"EventThread shut down for session: 0x{}"</span><span class="token punctuation">,</span>                Long<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token function">getSessionId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">processEvent</span><span class="token punctuation">(</span>Object event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 如果是WatcherSetEventPair</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>event <span class="token keyword">instanceof</span> <span class="token class-name">WatcherSetEventPair</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// each watcher will process the event</span>            WatcherSetEventPair pair <span class="token operator">=</span> <span class="token punctuation">(</span>WatcherSetEventPair<span class="token punctuation">)</span> event<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Watcher watcher <span class="token operator">:</span> pair<span class="token punctuation">.</span>watchers<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//使用watcher的process</span>                    watcher<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span>pair<span class="token punctuation">.</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Error while calling watcher "</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// else if...</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LOG<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"Caught unexpected throwable"</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>而watcher.process在zkCli中的实现就是:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">MyWatcher</span> <span class="token keyword">implements</span> <span class="token class-name">Watcher</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>WatchedEvent event<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getPrintWatches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ZooKeeperMain<span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span><span class="token string">"WATCHER::"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ZooKeeperMain<span class="token punctuation">.</span><span class="token function">printMessage</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>toString:</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">"WatchedEvent state:"</span> <span class="token operator">+</span> keeperState        <span class="token operator">+</span> <span class="token string">" type:"</span> <span class="token operator">+</span> eventType <span class="token operator">+</span> <span class="token string">" path:"</span> <span class="token operator">+</span> path<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>完全符合客户端的监听输出，就这样一个监听过程就完成了。而对于java中zk api的使用，添加的watcher有我们提供的回调函数，就会自动调用了。</p><p>源码看完了，来点其他优秀博主的总结压压惊：</p><p><a href="https://www.cnblogs.com/guoyu1/p/12269344.html" target="_blank" rel="noopener">Zookeeper Watcher 机制详解 - 大数据up - 博客园</a></p><p><a href="https://blog.csdn.net/hohoo1990/article/details/78617336#watcher-%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93" target="_blank" rel="noopener">zookeeper 中 Watcher 通知机制的一点理解_大数据_韦一笑的专栏-CSDN博客</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;watcher机制概述&quot;&gt;1 watcher机制概述&lt;/h1&gt;&lt;p&gt;zookeeper中非常重要的一个机制就是watcher，在zkCli中可以在get、ls、ls2、stat 等操作中添加watch，从而监听节点变化，起到在分布式系统中收到消息通知作用。&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="源码分析" scheme="https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="zookeeper" scheme="https://www.codetool.top/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper启动和选举过程简要源码分析</title>
    <link href="https://www.codetool.top/article/Zookeeper%E5%90%AF%E5%8A%A8%E5%92%8C%E9%80%89%E4%B8%BE%E8%BF%87%E7%A8%8B%E7%AE%80%E8%A6%81%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://www.codetool.top/article/Zookeeper启动和选举过程简要源码分析/</id>
    <published>2020-03-18T02:56:42.000Z</published>
    <updated>2020-03-18T02:57:03.153Z</updated>
    
    <content type="html"><![CDATA[<p>按启动流程分析</p><p><img src="https://api.codetool.top/img/15845001013701.png" alt="zkServer.sh"></p><p>位于QuorumPeerMain中的main方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    QuorumPeerMain main <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QuorumPeerMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>            main<span class="token punctuation">.</span><span class="token function">initializeAndRun</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//catch...</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initializeAndRun</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token keyword">throws</span> ConfigException<span class="token punctuation">,</span> IOException<span class="token punctuation">,</span> AdminServerException<span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//加载配置文件zoo.cfg</span>    QuorumPeerConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QuorumPeerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        config<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 启动清除任务，主要清除旧的快照和日志文件</span>    DatadirCleanupManager purgeMgr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DatadirCleanupManager</span><span class="token punctuation">(</span>config            <span class="token punctuation">.</span><span class="token function">getDataDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getDataLogDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config            <span class="token punctuation">.</span><span class="token function">getSnapRetainCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getPurgeInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    purgeMgr<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 单机启动和集群启动</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> config<span class="token punctuation">.</span><span class="token function">isDistributed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">runFromConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        LOG<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Either no config or no quorum defined in config, running "</span>                <span class="token operator">+</span> <span class="token string">" in standalone mode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// there is only server in the quorum -- run as standalone</span>        ZooKeeperServerMain<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="单机启动">1 单机启动</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ZooKeeperServerMain main <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeperServerMain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        main<span class="token punctuation">.</span><span class="token function">initializeAndRun</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment" spellcheck="true">//catch...</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initializeAndRun</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>    <span class="token keyword">throws</span> ConfigException<span class="token punctuation">,</span> IOException<span class="token punctuation">,</span> AdminServerException<span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//日志相关工具的加载</span>        ManagedUtil<span class="token punctuation">.</span><span class="token function">registerLog4jMBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JMException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LOG<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Unable to register log4j JMX control"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//包装config</span>    ServerConfig config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        config<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        config<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//使用config启动</span>    <span class="token function">runFromConfig</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runFromConfig</span><span class="token punctuation">(</span>ServerConfig config<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> AdminServerException <span class="token punctuation">{</span>    LOG<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Starting server"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    FileTxnSnapLog txnLog <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建FileTxnLog和FileSnap实例，并保存刚启动时候日志数据</span>        txnLog <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileTxnSnapLog</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>dataLogDir<span class="token punctuation">,</span> config<span class="token punctuation">.</span>dataDir<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建服务器</span>        <span class="token keyword">final</span> ZooKeeperServer zkServer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeperServer</span><span class="token punctuation">(</span>txnLog<span class="token punctuation">,</span>                config<span class="token punctuation">.</span>tickTime<span class="token punctuation">,</span> config<span class="token punctuation">.</span>minSessionTimeout<span class="token punctuation">,</span> config<span class="token punctuation">.</span>maxSessionTimeout<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>        txnLog<span class="token punctuation">.</span><span class="token function">setServerStats</span><span class="token punctuation">(</span>zkServer<span class="token punctuation">.</span><span class="token function">serverStats</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 注册关闭服务器的处理器</span>        <span class="token keyword">final</span> CountDownLatch shutdownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        zkServer<span class="token punctuation">.</span><span class="token function">registerServerShutdownHandler</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">ZooKeeperServerShutdownHandler</span><span class="token punctuation">(</span>shutdownLatch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 启动 Admin server</span>        adminServer <span class="token operator">=</span> AdminServerFactory<span class="token punctuation">.</span><span class="token function">createAdminServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        adminServer<span class="token punctuation">.</span><span class="token function">setZooKeeperServer</span><span class="token punctuation">(</span>zkServer<span class="token punctuation">)</span><span class="token punctuation">;</span>        adminServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//启动NIOServerCnxnFactory</span>        <span class="token keyword">boolean</span> needStartZKServer <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从解析出的配置中配置NIOServerCnxnFactory</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getClientPortAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cnxnFactory <span class="token operator">=</span> ServerCnxnFactory<span class="token punctuation">.</span><span class="token function">createFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cnxnFactory<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getClientPortAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getMaxClientCnxns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//启动zookeeper server</span>            cnxnFactory<span class="token punctuation">.</span><span class="token function">startup</span><span class="token punctuation">(</span>zkServer<span class="token punctuation">)</span><span class="token punctuation">;</span>            needStartZKServer <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getSecureClientPortAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            secureCnxnFactory <span class="token operator">=</span> ServerCnxnFactory<span class="token punctuation">.</span><span class="token function">createFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            secureCnxnFactory<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getSecureClientPortAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> config<span class="token punctuation">.</span><span class="token function">getMaxClientCnxns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            secureCnxnFactory<span class="token punctuation">.</span><span class="token function">startup</span><span class="token punctuation">(</span>zkServer<span class="token punctuation">,</span> needStartZKServer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        containerManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContainerManager</span><span class="token punctuation">(</span>zkServer<span class="token punctuation">.</span><span class="token function">getZKDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> zkServer<span class="token punctuation">.</span>firstProcessor<span class="token punctuation">,</span>                Integer<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span><span class="token string">"znode.container.checkIntervalMs"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> TimeUnit<span class="token punctuation">.</span>MINUTES<span class="token punctuation">.</span><span class="token function">toMillis</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                Integer<span class="token punctuation">.</span><span class="token function">getInteger</span><span class="token punctuation">(</span><span class="token string">"znode.container.maxPerMinute"</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        containerManager<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 等到使用shutdownLatch的线程数清零就关闭服务器</span>        shutdownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cnxnFactory <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cnxnFactory<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>secureCnxnFactory <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            secureCnxnFactory<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>zkServer<span class="token punctuation">.</span><span class="token function">canShutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            zkServer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// warn, but generally this is ok</span>        LOG<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Server interrupted"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>txnLog <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            txnLog<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="集群启动">2 集群启动</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">runFromConfig</span><span class="token punctuation">(</span>QuorumPeerConfig config<span class="token punctuation">)</span>        <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> AdminServerException<span class="token punctuation">{</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//日志相关工具的加载</span>        ManagedUtil<span class="token punctuation">.</span><span class="token function">registerLog4jMBeans</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">JMException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LOG<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Unable to register log4j JMX control"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//创建NIOServerCnxnFactory</span>    LOG<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Starting quorum peer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        ServerCnxnFactory cnxnFactory <span class="token operator">=</span> null<span class="token punctuation">;</span>        ServerCnxnFactory secureCnxnFactory <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getClientPortAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            cnxnFactory <span class="token operator">=</span> ServerCnxnFactory<span class="token punctuation">.</span><span class="token function">createFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cnxnFactory<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getClientPortAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    config<span class="token punctuation">.</span><span class="token function">getMaxClientCnxns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getSecureClientPortAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            secureCnxnFactory <span class="token operator">=</span> ServerCnxnFactory<span class="token punctuation">.</span><span class="token function">createFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            secureCnxnFactory<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getSecureClientPortAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    config<span class="token punctuation">.</span><span class="token function">getMaxClientCnxns</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// quorumPeer是和集群相关的配置信息</span>        quorumPeer <span class="token operator">=</span> <span class="token function">getQuorumPeer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        quorumPeer<span class="token punctuation">.</span><span class="token function">setTxnFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileTxnSnapLog</span><span class="token punctuation">(</span>                    config<span class="token punctuation">.</span><span class="token function">getDataLogDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    config<span class="token punctuation">.</span><span class="token function">getDataDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        quorumPeer<span class="token punctuation">.</span><span class="token function">enableLocalSessions</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">areLocalSessionsEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        quorumPeer<span class="token punctuation">.</span><span class="token function">enableLocalSessionsUpgrading</span><span class="token punctuation">(</span>            config<span class="token punctuation">.</span><span class="token function">isLocalSessionsUpgradingEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//quorumPeer.setQuorumPeers(config.getAllMembers());</span>        quorumPeer<span class="token punctuation">.</span><span class="token function">setElectionType</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getElectionAlg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        quorumPeer<span class="token punctuation">.</span><span class="token function">setMyid</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getServerId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        quorumPeer<span class="token punctuation">.</span><span class="token function">setTickTime</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getTickTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        quorumPeer<span class="token punctuation">.</span><span class="token function">setMinSessionTimeout</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getMinSessionTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        quorumPeer<span class="token punctuation">.</span><span class="token function">setMaxSessionTimeout</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getMaxSessionTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        quorumPeer<span class="token punctuation">.</span><span class="token function">setInitLimit</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getInitLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        quorumPeer<span class="token punctuation">.</span><span class="token function">setSyncLimit</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getSyncLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        quorumPeer<span class="token punctuation">.</span><span class="token function">setConfigFileName</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getConfigFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        quorumPeer<span class="token punctuation">.</span><span class="token function">setZKDatabase</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ZKDatabase</span><span class="token punctuation">(</span>quorumPeer<span class="token punctuation">.</span><span class="token function">getTxnFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        quorumPeer<span class="token punctuation">.</span><span class="token function">setQuorumVerifier</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getQuorumVerifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getLastSeenQuorumVerifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            quorumPeer<span class="token punctuation">.</span><span class="token function">setLastSeenQuorumVerifier</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getLastSeenQuorumVerifier</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        quorumPeer<span class="token punctuation">.</span><span class="token function">initConfigInZKDatabase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        quorumPeer<span class="token punctuation">.</span><span class="token function">setCnxnFactory</span><span class="token punctuation">(</span>cnxnFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        quorumPeer<span class="token punctuation">.</span><span class="token function">setSecureCnxnFactory</span><span class="token punctuation">(</span>secureCnxnFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        quorumPeer<span class="token punctuation">.</span><span class="token function">setSslQuorum</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">isSslQuorum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        quorumPeer<span class="token punctuation">.</span><span class="token function">setUsePortUnification</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">shouldUsePortUnification</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        quorumPeer<span class="token punctuation">.</span><span class="token function">setLearnerType</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getPeerType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        quorumPeer<span class="token punctuation">.</span><span class="token function">setSyncEnabled</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getSyncEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        quorumPeer<span class="token punctuation">.</span><span class="token function">setQuorumListenOnAllIPs</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getQuorumListenOnAllIPs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>sslQuorumReloadCertFiles<span class="token punctuation">)</span> <span class="token punctuation">{</span>            quorumPeer<span class="token punctuation">.</span><span class="token function">getX509Util</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enableCertFileReloading</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// sets quorum sasl authentication configurations</span>        quorumPeer<span class="token punctuation">.</span><span class="token function">setQuorumSaslEnabled</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>quorumEnableSasl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>quorumPeer<span class="token punctuation">.</span><span class="token function">isQuorumSaslAuthEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            quorumPeer<span class="token punctuation">.</span><span class="token function">setQuorumServerSaslRequired</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>quorumServerRequireSasl<span class="token punctuation">)</span><span class="token punctuation">;</span>            quorumPeer<span class="token punctuation">.</span><span class="token function">setQuorumLearnerSaslRequired</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>quorumLearnerRequireSasl<span class="token punctuation">)</span><span class="token punctuation">;</span>            quorumPeer<span class="token punctuation">.</span><span class="token function">setQuorumServicePrincipal</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>quorumServicePrincipal<span class="token punctuation">)</span><span class="token punctuation">;</span>            quorumPeer<span class="token punctuation">.</span><span class="token function">setQuorumServerLoginContext</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>quorumServerLoginContext<span class="token punctuation">)</span><span class="token punctuation">;</span>            quorumPeer<span class="token punctuation">.</span><span class="token function">setQuorumLearnerLoginContext</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>quorumLearnerLoginContext<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        quorumPeer<span class="token punctuation">.</span><span class="token function">setQuorumCnxnThreadsSize</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>quorumCnxnThreadsSize<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//初始化</span>        quorumPeer<span class="token punctuation">.</span><span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//quorumPeer的start方法，这是一个线程</span>        quorumPeer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//等待quorumPeer线程结束</span>        quorumPeer<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// warn, but generally this is ok</span>        LOG<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Quorum Peer interrupted"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">getView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>myid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"My id "</span> <span class="token operator">+</span> myid <span class="token operator">+</span> <span class="token string">" not in the peer list"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token function">loadDataBase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">startServerCnxnFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//启动adminServer</span>        adminServer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AdminServerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LOG<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Problem starting AdminServer"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//开始leader选举，每个节点加入的时候都会进行一轮选举</span>    <span class="token function">startLeaderElection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//开启线程执行run方法</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">updateThreadName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//jmx监控相关</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//主循环 main loop</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>running<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//有四个状态：LOOKING、OBSERVING、FOLLOWING、LEADING</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token function">getPeerState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">case</span> LOOKING<span class="token operator">:</span>                <span class="token comment" spellcheck="true">//刚启动的时候为LOOKING，正在选举</span>                LOG<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"LOOKING"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//当前节点为只读节点，不关心</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>Boolean<span class="token punctuation">.</span><span class="token function">getBoolean</span><span class="token punctuation">(</span><span class="token string">"readonlymode.enabled"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//...</span>                <span class="token comment" spellcheck="true">//不是只读节点</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token function">reconfigFlagClear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>shuttingDownLE<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            shuttingDownLE <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                            <span class="token function">startLeaderElection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">//leader选举</span>                        <span class="token function">setCurrentVote</span><span class="token punctuation">(</span><span class="token function">makeLEStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lookForLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        LOG<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Unexpected exception"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">setPeerState</span><span class="token punctuation">(</span>ServerState<span class="token punctuation">.</span>LOOKING<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                                        <span class="token punctuation">}</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//case ...</span><span class="token punctuation">}</span></code></pre><h2 id="leader选举">2.1 leader选举</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> Vote <span class="token function">lookForLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//jxm监控相关</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//记录当前server接受其他server的本轮投票信息</span>        HashMap<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> Vote<span class="token operator">></span> recvset <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> Vote<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//选举接受后法定server的投票信息</span>        HashMap<span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> Vote<span class="token operator">></span> outofelection <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>Long<span class="token punctuation">,</span> Vote<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//选举超时时间</span>        <span class="token keyword">int</span> notTimeout <span class="token operator">=</span> finalizeWait<span class="token punctuation">;</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//更新逻辑时钟+1</span>            logicalclock<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//初始化选票，给自己投一票，这里看出hashmap的key为myid</span>            <span class="token function">updateProposal</span><span class="token punctuation">(</span><span class="token function">getInitId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getInitLastLoggedZxid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getPeerEpoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        LOG<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"New election. My id =  "</span> <span class="token operator">+</span> self<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span>                <span class="token string">", proposed zxid=0x"</span> <span class="token operator">+</span> Long<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>proposedZxid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//通知给所有其他server新的一票产生，放入sendqueue队列</span>        <span class="token function">sendNotifications</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果当前还是LOOKING并且没有停止一直接受选票直到产生新leader</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span><span class="token function">getPeerState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ServerState<span class="token punctuation">.</span>LOOKING<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                <span class="token punctuation">(</span><span class="token operator">!</span>stop<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//从recvqueue队列中阻塞取出投票信息（其他server发来的）</span>            Notification n <span class="token operator">=</span> recvqueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>notTimeout<span class="token punctuation">,</span>                    TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//判读选票信息是否为空</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//判断是否投递过选票，如果投递过，说明没有断开连接</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>manager<span class="token punctuation">.</span><span class="token function">haveDelivered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//重新发送选票信息</span>                    <span class="token function">sendNotifications</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//如果没有投递过，说明断开连接，重连</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    manager<span class="token punctuation">.</span><span class="token function">connectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token comment" spellcheck="true">//将接收选票时限延长了一倍</span>                <span class="token keyword">int</span> tmpTimeOut <span class="token operator">=</span> notTimeout<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>                notTimeout <span class="token operator">=</span> <span class="token punctuation">(</span>tmpTimeOut <span class="token operator">&lt;</span> maxNotificationInterval<span class="token operator">?</span>                        tmpTimeOut <span class="token operator">:</span> maxNotificationInterval<span class="token punctuation">)</span><span class="token punctuation">;</span>                LOG<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Notification time out: "</span> <span class="token operator">+</span> notTimeout<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>             <span class="token comment" spellcheck="true">//检查选举voter和投票的leader是否合法</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">validVoter</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>sid<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">validVoter</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>leader<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//看voter的state状态</span>                <span class="token keyword">switch</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//如果还是looking</span>                <span class="token keyword">case</span> LOOKING<span class="token operator">:</span>                    <span class="token comment" spellcheck="true">// 如果选票的epoch大于自己的逻辑时钟，说明选票是最新的，自己的选票这一轮已经过时</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span>electionEpoch <span class="token operator">></span> logicalclock<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//更新自己的逻辑时钟，并清空当前收到的其他server的投票</span>                        logicalclock<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>electionEpoch<span class="token punctuation">)</span><span class="token punctuation">;</span>                        recvset<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//比较自己和选票中谁更适合做leader，根据zxid、peerEpoch做决定</span>                        <span class="token comment" spellcheck="true">//并生成新的选票</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">totalOrderPredicate</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>leader<span class="token punctuation">,</span> n<span class="token punctuation">.</span>zxid<span class="token punctuation">,</span> n<span class="token punctuation">.</span>peerEpoch<span class="token punctuation">,</span>                                <span class="token function">getInitId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getInitLastLoggedZxid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getPeerEpoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            <span class="token function">updateProposal</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>leader<span class="token punctuation">,</span> n<span class="token punctuation">.</span>zxid<span class="token punctuation">,</span> n<span class="token punctuation">.</span>peerEpoch<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                            <span class="token function">updateProposal</span><span class="token punctuation">(</span><span class="token function">getInitId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                    <span class="token function">getInitLastLoggedZxid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                    <span class="token function">getPeerEpoch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">//发送新的投票给其他server</span>                        <span class="token function">sendNotifications</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 否则选票的epoch小于自己的逻辑时钟，说明该选票是过期的，不做操作</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span>electionEpoch <span class="token operator">&lt;</span> logicalclock<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>LOG<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                            LOG<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Notification election epoch is smaller than logicalclock. n.electionEpoch = 0x"</span>                                    <span class="token operator">+</span> Long<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>electionEpoch<span class="token punctuation">)</span>                                    <span class="token operator">+</span> <span class="token string">", logicalclock=0x"</span> <span class="token operator">+</span> Long<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>logicalclock<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 等于，则还是比较自己和选票中谁更适合做leader，并生成新的选票</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">totalOrderPredicate</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>leader<span class="token punctuation">,</span> n<span class="token punctuation">.</span>zxid<span class="token punctuation">,</span> n<span class="token punctuation">.</span>peerEpoch<span class="token punctuation">,</span>                            proposedLeader<span class="token punctuation">,</span> proposedZxid<span class="token punctuation">,</span> proposedEpoch<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">updateProposal</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>leader<span class="token punctuation">,</span> n<span class="token punctuation">.</span>zxid<span class="token punctuation">,</span> n<span class="token punctuation">.</span>peerEpoch<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">sendNotifications</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>LOG<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        LOG<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Adding vote: from="</span> <span class="token operator">+</span> n<span class="token punctuation">.</span>sid <span class="token operator">+</span>                                <span class="token string">", proposed leader="</span> <span class="token operator">+</span> n<span class="token punctuation">.</span>leader <span class="token operator">+</span>                                <span class="token string">", proposed zxid=0x"</span> <span class="token operator">+</span> Long<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>zxid<span class="token punctuation">)</span> <span class="token operator">+</span>                                <span class="token string">", proposed election epoch=0x"</span> <span class="token operator">+</span> Long<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>electionEpoch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 将收到的选票放入recvset</span>                    recvset<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>sid<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Vote</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>leader<span class="token punctuation">,</span> n<span class="token punctuation">.</span>zxid<span class="token punctuation">,</span> n<span class="token punctuation">.</span>electionEpoch<span class="token punctuation">,</span> n<span class="token punctuation">.</span>peerEpoch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">termPredicate</span><span class="token punctuation">(</span>recvset<span class="token punctuation">,</span>                            <span class="token keyword">new</span> <span class="token class-name">Vote</span><span class="token punctuation">(</span>proposedLeader<span class="token punctuation">,</span> proposedZxid<span class="token punctuation">,</span>                                    logicalclock<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> proposedEpoch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// Verify if there is any change in the proposed leader</span>                        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> recvqueue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>finalizeWait<span class="token punctuation">,</span>                                TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">totalOrderPredicate</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>leader<span class="token punctuation">,</span> n<span class="token punctuation">.</span>zxid<span class="token punctuation">,</span> n<span class="token punctuation">.</span>peerEpoch<span class="token punctuation">,</span>                                    proposedLeader<span class="token punctuation">,</span> proposedZxid<span class="token punctuation">,</span> proposedEpoch<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                recvqueue<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">break</span><span class="token punctuation">;</span>                            <span class="token punctuation">}</span>                        <span class="token punctuation">}</span>                        <span class="token comment" spellcheck="true">/*                            * This predicate is true once we don't read any new                            * relevant message from the reception queue                            */</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                            self<span class="token punctuation">.</span><span class="token function">setPeerState</span><span class="token punctuation">(</span><span class="token punctuation">(</span>proposedLeader <span class="token operator">==</span> self<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span>                                    ServerState<span class="token punctuation">.</span>LEADING<span class="token operator">:</span> <span class="token function">learningState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            Vote endVote <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vote</span><span class="token punctuation">(</span>proposedLeader<span class="token punctuation">,</span>                                    proposedZxid<span class="token punctuation">,</span> logicalclock<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                     proposedEpoch<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token function">leaveInstance</span><span class="token punctuation">(</span>endVote<span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">return</span> endVote<span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> OBSERVING<span class="token operator">:</span>                    LOG<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Notification from observer: "</span> <span class="token operator">+</span> n<span class="token punctuation">.</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> FOLLOWING<span class="token operator">:</span>                <span class="token keyword">case</span> LEADING<span class="token operator">:</span>                   <span class="token comment" spellcheck="true">//再次判断选举epoch是否等于逻辑时钟....</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">validVoter</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>leader<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    LOG<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Ignoring notification for non-cluster member sid {} from sid {}"</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>leader<span class="token punctuation">,</span> n<span class="token punctuation">.</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">validVoter</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>sid<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    LOG<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"Ignoring notification for sid {} from non-quorum member sid {}"</span><span class="token punctuation">,</span> n<span class="token punctuation">.</span>leader<span class="token punctuation">,</span> n<span class="token punctuation">.</span>sid<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//jmx相关...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;按启动流程分析&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://api.codetool.top/img/15845001013701.png&quot; alt=&quot;zkServer.sh&quot;&gt;&lt;/p&gt;
&lt;p&gt;位于QuorumPeerMain中的main方法&lt;/p&gt;
&lt;pre cla
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="源码分析" scheme="https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="zookeeper" scheme="https://www.codetool.top/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>leetcode836-矩形重叠</title>
    <link href="https://www.codetool.top/article/leetcode836-%E7%9F%A9%E5%BD%A2%E9%87%8D%E5%8F%A0/"/>
    <id>https://www.codetool.top/article/leetcode836-矩形重叠/</id>
    <published>2020-03-18T01:18:03.000Z</published>
    <updated>2020-03-18T01:25:16.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>矩形以列表 <code>[x1, y1, x2, y2]</code> 的形式表示，其中 <code>(x1, y1)</code> 为左下角的坐标，<code>(x2, y2)</code> 是右上角的坐标。</p><p>如果相交的面积为正，则称两矩形重叠。需要明确的是，只在角或边接触的两个矩形不构成重叠。</p><p>给出两个矩形，判断它们是否重叠并返回结果。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入：</strong> rec1 = [0,0,2,2], rec2 = [1,1,3,3]<br><strong>输出：</strong> true</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入：</strong> rec1 = [0,0,1,1], rec2 = [1,0,2,1]<br><strong>输出：</strong> false</p></blockquote><p><strong>说明：</strong></p><ol><li>两个矩形 <code>rec1</code> 和 <code>rec2</code> 都以含有四个整数的列表的形式给出。</li><li>矩形中的所有坐标都处于 <code>-10^9</code> 和 <code>10^9</code> 之间。</li></ol><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>逆向思维，如果两个矩形不重叠则投影到x、y轴上的两个区间都不会重叠，可以写出下面表达式：</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isRectangleOverlap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rec1<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rec2<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>rec1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>rec2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">||</span>rec2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>rec1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">||</span>rec1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>rec2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">||</span>rec2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>rec1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;矩形以列表 &lt;code&gt;[x1, y1, x2, y2]&lt;/code&gt; 的形式表示，其中 &lt;code&gt;(x1, y1)&lt;/code&gt; 为左下角的坐标，&lt;code&gt;(x2, y2)&lt;/code&gt; 是右上角的坐标。&lt;/p&gt;
&lt;p&gt;如果相
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper基本使用</title>
    <link href="https://www.codetool.top/article/Zookeeper%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.codetool.top/article/Zookeeper基本使用/</id>
    <published>2020-03-17T13:39:13.000Z</published>
    <updated>2020-03-18T03:15:16.734Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考资源：</p><p><a href="https://www.jianshu.com/p/cbe5f0dd6cca" target="_blank" rel="noopener">一文了解Zookeeper数据节点-znode - 简书</a></p><h1 id="数据结构">1 数据结构</h1><p>ZooKeeper数据模型的结构与Unix文件系统很类似，整体上可以看作是一棵树，每个节点称做一个ZNode，每个ZNode都可以通过其路径唯一标识</p><p><img src="https://api.codetool.top/img/15844417208023.png" alt></p><p>Znode 节点类型</p><ul><li>持久化目录节点（PERSISTENT）<br>客户端与zookeeper断开连接后，该节点依旧存在</li><li>持久化顺序编号目录节点（PERSISTENT_SEQUENTIAL）<br>客户端与zookeeper断开连接后，该节点依旧存在，Zookeeper会给该节点按照顺序编号</li><li>临时目录节点（EPHEMERAL）<br>客户端与zookeeper断开连接后，该节点被删除</li><li>临时顺序编号目录节点（ EPHEMERAL_SEQUENTIAL）<br>客户端与zookeeper断开连接后，该节点被删除，Zookeeper会给该节点按照顺序编号</li></ul><h2 id="znode状态信息">1.1 znode状态信息</h2><table><thead><tr><th>znode状态信息</th><th>解释</th></tr></thead><tbody><tr><td>cZxid</td><td>create ZXID，即该数据节点被创建时的事务id</td></tr><tr><td>ctime</td><td>create time，即该节点的创建时间</td></tr><tr><td>mZxid</td><td>modified ZXID，即该节点最终一次更新时的事务id</td></tr><tr><td>mtime</td><td>modified time，即该节点最后一次的更新时间</td></tr><tr><td>pZxid</td><td>该节点的子节点列表最后一次修改时的事务id，只有子节点列表变更才会更新pZxid，子节点内容变更不会更新</td></tr><tr><td>cversion</td><td>子节点版本号，当前节点的子节点每次变化时值增加1</td></tr><tr><td>dataVersion</td><td>数据节点内容版本号，节点创建时为0，每更新一次节点内容(不管内容有无变化)该版本号的值增加1</td></tr><tr><td>aclVersion</td><td>节点的ACL版本号，表示该节点ACL信息变更次数</td></tr><tr><td>ephemeralOwner</td><td>创建该临时节点的会话的sessionId；如果当前节点为持久节点，则ephemeralOwner=0</td></tr><tr><td>dataLength</td><td>数据节点内容长度</td></tr><tr><td>numChildren</td><td>当前节点的子节点个数</td></tr></tbody></table><h2 id="ACL权限">1.2 ACL权限</h2><p>ZooKeeper提供了一套完善的ACL权限控制机制保障数据安全性。</p><p>对于身份认证，提供了以下几种方式：</p><table><thead><tr><th>身份认证方式</th><th>解释</th></tr></thead><tbody><tr><td>world</td><td>默认方式，所有用户都可无条件访问，组合形式为：<code>world:anyone:[permissions]</code></td></tr><tr><td>digest</td><td>用户名:密码认证方式，最常用，组合形式为：<code>digest:username:BASE64(SHA1(password)):[permissions]</code></td></tr><tr><td>ip</td><td>对指定ip进行限制，组合形式为：<code>ip:127.0.0.1:[permissions]</code></td></tr><tr><td>auth</td><td>认证登录形式，需要用户获取权限后才可访问，组合形式为 <code>auth:userpassword:[permissions]</code></td></tr></tbody></table><p>对于znode权限，提供了以下5种操作权限。</p><table><thead><tr><th>权限</th><th>简写</th><th>解释</th></tr></thead><tbody><tr><td>CREATE</td><td>C</td><td>允许授权对象在当前节点下创建子节点</td></tr><tr><td>DELETE</td><td>D</td><td>允许授权对象在当前节点下删除子节点</td></tr><tr><td>WRITE</td><td>W</td><td>允许授权对象在当前节点进行更新操作</td></tr><tr><td>READ</td><td>R</td><td>允许授权对象在当前节点获取节点内容或获取子节点列表</td></tr><tr><td>ADMIN</td><td>A</td><td>允许授权对象对当前节点进行ACL相关的设置操作</td></tr></tbody></table><h1 id="命令行使用">2 命令行使用</h1><p>使用Zookeeper下的<code>bin/zkCli.sh</code>进入命令行</p><pre class=" language-shell"><code class="language-shell">bin/zkCli.sh -server host:port</code></pre><p>相关命令有：</p><pre><code>ZooKeeper -server host:port cmd argsaddauth scheme authcloseconfig [-c] [-w] [-s]connect host:portcreate [-s] [-e] [-c] [-t ttl] path [data] [acl]delete [-v version] pathdeleteall pathdelquota [-n|-b] pathget [-s] [-w] pathgetAcl [-s] pathhistorylistquota pathls [-s] [-w] [-R] pathls2 path [watch]printwatches on|offquitreconfig [-s] [-v version] [[-file path] | [-members serverID=host:port1:port2;port3[,...]*]] | [-add serverId=host:port1:port2;port3[,...]]* [-remove serverId[,...]*]redo cmdnoremovewatches path [-c|-d|-a] [-l]rmr pathset [-s] [-v version] path datasetAcl [-s] [-v version] [-R] path aclsetquota -n|-b val pathstat [-w] pathsync path</code></pre><p>常用命令：</p><p>使用 ls 命令来查看当前znode中所包含的内容</p><pre><code>ls [-s] [-w] [-R] path</code></pre><p>查看当前节点数据并能看到更新次数等数据，watch可以监控节点的变化</p><pre><code>ls2 path [watch]</code></pre><p>创建节点，参数：<code>-s</code> 含有序列 <code>-e</code> 临时</p><pre><code>create</code></pre><p>获得节点的值，watch可以监控值的变化</p><pre><code>get path [watch]</code></pre><p>设置节点的值</p><pre><code>set</code></pre><p>查看节点状态</p><pre><code>stat</code></pre><p>删除节点(deleteall递归删除)</p><pre><code>deletedeleteall</code></pre><h2 id="示例">2.1 示例</h2><p>在上次<a href="../ZAB协议概述和Zookeeper集群搭建">ZAB协议概述和Zookeeper集群搭建</a>搭建的集群其中一个节点客户端：</p><pre><code>bin/zkCli.sh -server localhost:2181</code></pre><p>输入以下命令并执行：</p><pre><code>[zk: localhost:2181(CONNECTED) 0] ls /[zookeeper]</code></pre><p>创建节点<code>/app1</code>并再次查看根节点</p><pre><code>[zk: localhost:2181(CONNECTED) 1] create /app1Created /app1[zk: localhost:2181(CONNECTED) 2] ls /[app1, zookeeper]</code></pre><p>创建节点<code>/app1/name</code>并查看状态：</p><pre><code>[zk: localhost:2181(CONNECTED) 3] create /app1/name rhettCreated /app1/name[zk: localhost:2181(CONNECTED) 4] stat /app1/namecZxid = 0x10000000bctime = Tue Mar 17 19:13:54 CST 2020mZxid = 0x10000000bmtime = Tue Mar 17 19:13:54 CST 2020pZxid = 0x10000000bcversion = 0dataVersion = 0aclVersion = 0ephemeralOwner = 0x0dataLength = 5numChildren = 0</code></pre><p>获取<code>/app1/name</code>的值：</p><pre><code>[zk: localhost:2181(CONNECTED) 5] get /app1/namerhett</code></pre><p>换一台zk节点，打开客户端，输入以下命令：</p><pre><code>[zk: localhost:2182(CONNECTED) 0] ls /[app1, zookeeper][zk: localhost:2182(CONNECTED) 1] get /app1/namerhett[zk: localhost:2182(CONNECTED) 2] set /app1/name another[zk: localhost:2182(CONNECTED) 3] stat /app1/namecZxid = 0x10000000bctime = Tue Mar 17 19:13:54 CST 2020mZxid = 0x100000014mtime = Tue Mar 17 20:12:16 CST 2020pZxid = 0x10000000bcversion = 0dataVersion = 1aclVersion = 0ephemeralOwner = 0x0dataLength = 7numChildren = 0</code></pre><h1 id="java使用zookeeper-api">3 java使用zookeeper api</h1><p>maven依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>zookeeper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> KeeperException<span class="token punctuation">,</span> InterruptedException <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建zookeeper连接</span>    ZooKeeper zooKeeper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZooKeeper</span><span class="token punctuation">(</span><span class="token string">"localhost:2181"</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Watcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span>WatchedEvent watchedEvent<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"触发了"</span> <span class="token operator">+</span> watchedEvent<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"的事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建父节点，第一个参数路径，第二个参数值，第三个参数权限，第四个参数节点类型</span>    String path <span class="token operator">=</span> zooKeeper<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"/app2"</span><span class="token punctuation">,</span> <span class="token string">"app2Value"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ZooDefs<span class="token punctuation">.</span>Ids<span class="token punctuation">.</span>OPEN_ACL_UNSAFE<span class="token punctuation">,</span> CreateMode<span class="token punctuation">.</span>PERSISTENT<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//创建子节点</span>    String childrenPath <span class="token operator">=</span> zooKeeper<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token string">"/app2/children"</span><span class="token punctuation">,</span> <span class="token string">"childrenValue"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ZooDefs<span class="token punctuation">.</span>Ids<span class="token punctuation">.</span>OPEN_ACL_UNSAFE<span class="token punctuation">,</span> CreateMode<span class="token punctuation">.</span>PERSISTENT<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>childrenPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取节点中的值，第一个参数路径，第二个参数是否监听，第三个参数stat</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> zooKeeper<span class="token punctuation">.</span><span class="token function">getData</span><span class="token punctuation">(</span><span class="token string">"/app2"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> children <span class="token operator">=</span> zooKeeper<span class="token punctuation">.</span><span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token string">"/app2"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>String child <span class="token operator">:</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//修改值，第一个参数路径，第二个参数值</span>    <span class="token comment" spellcheck="true">//第三个参数指定版本号，即znode的dataVersion，可以保证操作的顺序性，-1可匹配任何版本。</span>    Stat stat <span class="token operator">=</span> zooKeeper<span class="token punctuation">.</span><span class="token function">setData</span><span class="token punctuation">(</span><span class="token string">"/app2"</span><span class="token punctuation">,</span> <span class="token string">"app2Update"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stat<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//判断某个节点是否存在，第二个参数是否监听</span>    Stat exists <span class="token operator">=</span> zooKeeper<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"/app2/children"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>exists<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//删除节点，第二个参数版本号</span>    zooKeeper<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">"/app2/children"</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Stat stillExists <span class="token operator">=</span> zooKeeper<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"/app2/children"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stillExists<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文参考资源：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/cbe5f0dd6cca&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;一文了解Zookeeper数据节点-znode - 简书&lt;/a&gt;&lt;/p&gt;
&lt;h1 i
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="分布式" scheme="https://www.codetool.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="zookeeper" scheme="https://www.codetool.top/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>ZAB协议概述和Zookeeper集群搭建</title>
    <link href="https://www.codetool.top/article/ZAB%E5%8D%8F%E8%AE%AE%E6%A6%82%E8%BF%B0%E5%92%8CZookeeper%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/"/>
    <id>https://www.codetool.top/article/ZAB协议概述和Zookeeper集群搭建/</id>
    <published>2020-03-17T08:13:10.000Z</published>
    <updated>2020-03-17T13:39:52.912Z</updated>
    
    <content type="html"><![CDATA[<p>推荐阅读：</p><p><a href="../分布式一致性理论和一致性协议2PC、3PC">分布式一致性理论和一致性协议2PC、3PC</a></p><p><a href="../拜占庭将军问题和共识算法Paxos、Raft">拜占庭将军问题和共识算法Paxos、Raft</a></p><h1 id="Zookeeper概述">1 Zookeeper概述</h1><p>Zookeeper 为分布式应用提供了高效且可靠的分布式协调服务，提供了诸如统一命名服务、发布订阅、负载均衡、配置管理和分布式锁等分布式的基础服务。</p><p>设计目标是将那些复杂且容易出错的分布式一致性服务封装起来，构成一个高效可靠的原语集，并以一系列简单易用的接口提供给用户使用。</p><p>可以保证以下特性：</p><ul><li>顺序一致性：从同一个客户端发起的事务请求，最终将会严格地按照其发起顺序被应用到 Zookeeper 中。</li><li>原子性：要么集群中所有机器都成功应用了某一个事务，要么都没有应用。</li><li>单一视图：无论客户端连接的是哪一个 Zookeeper 服务器，其看到的服务端数据模型都是一致性的</li><li>可靠性：一旦服务端成功应用了某个事务，并完成对客户端的响应，那么该事务所引起<br>的服务端状态变更将会被一直保留下来。</li><li>实时性：Zookeeper 能保证在一定的时间段内，客户端最终一定能够从服务端上读取到最新的数据状态。</li></ul><h1 id="ZAB协议">2 ZAB协议</h1><p>ZAB（zookeeper atomic broadcast）是Zookeeper采用的协议，是一种支持<strong>崩溃恢复</strong>的原子广播协议，基于multi paxos实现。</p><h2 id="三种角色">2.1 三种角色</h2><ul><li>leader<br>leader负责处理集群的写请求，并发起投票，只有超过半数的节点同意后才会提交该写请求</li><li>follower<br>处理读请求，响应结果。转发写请求到leader，在选举leader过程中参与投票</li><li>observer<br>observer可以理解为没有投票权的follower，主要职责是协助follower处理读请求。那么当整个zk集群读请求负载很高时，为什么不增加follower节点呢？原因是增加follower节点会让leader在提出写请求提案时，需要半数以上的follower投票节点同意，这样会增加leader和follower的通信通信压力，降低写操作效率。</li></ul><p>ZooKeeper使用单一主进程Leader用于处理客户端所有事务请求，即写请求。当服务器数据发生变更，集群采用ZAB原子广播协议，<strong>以事务提交proposal的形式广播到所有的副本进程，每一个事务分配一个全局的递增的事务编号xid。</strong> </p><p>若客户端提交的请求为读请求时，则接受请求的节点直接根据自己保存的数据响应。若是写请求，且当前节点不是leader，那么<strong>该节点就会将请求转发给leader，leader会以提案的方式广播此写请求，如果超过半数的节点同意写请求，则该写请求就会提交。</strong>leader会通知所有的订阅者同步数据。</p><p>ZAB的工作基本可以分为leader选举阶段和消息广播阶段：</p><h2 id="leader选举">2.2 leader选举</h2><p>当服务启动或leader崩溃后，zk进入leader选举阶段，leader选出后，将完成leader和其他机器的数据同步，当大多数server完成和leader的同步后，该阶段结束。</p><p>每个节点有一个zxid：zxid一个是64位长度的Long类型，其中高32位表示纪元epoch，低32位表示事务标识xid。即zxid由两部分构成：epoch和xid。epoch类似于raft的term，每一个新的选举开启时都会生成一个新的epoch，新的leader产生，会更新所有的zkServer的zxid的epoch，xid是一个依次递增的事务编号。</p><p><strong>启动过程</strong></p><ul><li>每一个 server发出一个投票给集群中其他节点</li><li>收到各个服务器的投票后，判断该投票有效性，比如是否是本轮投票，是否是looking状态</li><li>处理投票， pk别人的投票和自己的投票 比较规则xid&gt;myid “取大原则”</li><li>统计是否超过半数的接受相同的选票</li><li>确认 leader，改变服务器状态</li><li>添加新 server，leader已经选举出来，只能以follower身份加入集群中</li></ul><p>注意一个节点可以投多票，即每次收到竞选信息的时候都可以决定是否投票，而不是raft的先来先得。</p><p><strong>崩溃恢复过程</strong></p><p>leader 挂掉后，集群中其他follower会将状态从FOLLOWING变为LOOKING，重新进入leader选举</p><p>同上启动过程</p><h2 id="消息广播">2.3 消息广播</h2><p>一旦Leader已经和多数的Follower进行了状态同步后，进入广播模式。进入广播模式后，如果有新加入的服务器，会自动从leader中同步数据。leader在接收客户端请求后，会生成事务提案广播给其他机器，有超过半数以上的follower同意该提议后，再提交事务。注意在ZAB的事务的二阶段提交中，移除了事务中断的逻辑，follower要么ack，要么放弃，leader无需等待所有的follower的ack。</p><ul><li>leader 接受到消息后，消息通过全局唯一的64位自增事务id，zxid标识</li><li>leader 发送给follower的提案是有序的，leader会创建一个FIFO队列，将提案顺序写入队列中发送给follower</li><li>follower 接受到提案后，会比较提案zxid和本地事务日志最大的zxid，若提案zxid比本地事务id大，将提案记录到本地日志中，反馈ack给leader，否则拒绝</li><li>leader 接收到过半ack后，leader向所有的follower发送commit，通知每个follower执行本地事务</li></ul><p>更多Raft对比ZAB相关可以参考：</p><p><a href="https://my.oschina.net/pingpangkuangmo/blog/782702" target="_blank" rel="noopener">Raft对比ZAB协议 - 乒乓狂魔 - OSCHINA</a></p><h1 id="Zookeeper集群搭建">3 Zookeeper集群搭建</h1><p>zookeeper下载：</p><pre class=" language-shell"><code class="language-shell">wget https://mirrors.tuna.tsinghua.edu.cn/apache/zookeeper/zookeeper-3.5.7/apache-zookeeper-3.5.7-bin.tar.gz</code></pre><p>下载完成后解压：</p><pre class=" language-shell"><code class="language-shell">tar -zxvf apache-zookeeper-3.5.7-bin.tar.gz</code></pre><p>进入文件夹并创建一个data目录：</p><pre class=" language-shell"><code class="language-shell">cd apache-zookeeper-3.5.7-binmkdir data</code></pre><p>我们在单机使用三个zookeeper进程来搭建伪集群：</p><pre class=" language-shell"><code class="language-shell">cd ..mv apache-zookeeper-3.5.7-bin zookeeper-01cp -r zookeeper-01 zookeeper-02cp -r zookeeper-01 zookeeper-03</code></pre><p>为每个zookeeper文件夹下的data文件夹新建一个myid文件，内容分别为1、2、3</p><pre class=" language-shell"><code class="language-shell">cd zookeeper-01/datavim myid</code></pre><p>将每一个zookeeper文件夹下的<code>conf/zoo_sample.cfg</code>重命名为<code>zoo.cfg</code>，并修改内容：</p><pre class=" language-shell"><code class="language-shell">mv zoo_sample.cfg zoo.cfgvim zoo.cfg</code></pre><p>配置文件中默认<code>dataDir=/temp/zookeeper</code>，修改为各自目录下的data文件夹，并将zookeeper02、zookeeper03的端口号修改为2182和2183（默认为2181）</p><pre class=" language-conf"><code class="language-conf"># 安装的文件夹dataDir=/root/zookeeper-02/dataclientPort=2182</code></pre><p>并在末尾添加：</p><pre><code>server.1=192.168.91.1:2881:3881server.2=192.168.91.1:2882:3882server.3=192.168.91.1:2883:3883</code></pre><p>它的格式是：<code>server.服务器ID=服务器IP地址：服务器之间通信端口：服务器之间投票选举端口</code></p><p>保存并退出，依次启动1、2、3：</p><pre class=" language-shell"><code class="language-shell">bin/zkServer.sh start</code></pre><p>按照ZAB的投票机制，2号主机将会成为leader：</p><pre><code>root@DESKTOP-TTLFG6F:~/zookeeper-02# bin/zkServer.sh status/usr/bin/javaZooKeeper JMX enabled by defaultUsing config: /root/zookeeper-02/bin/../conf/zoo.cfgClient port found: 2182. Client address: localhost.Mode: leader</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;推荐阅读：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../分布式一致性理论和一致性协议2PC、3PC&quot;&gt;分布式一致性理论和一致性协议2PC、3PC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../拜占庭将军问题和共识算法Paxos、Raft&quot;&gt;拜占庭将军问题和共识算法Paxos、Ra
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="分布式" scheme="https://www.codetool.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="zookeeper" scheme="https://www.codetool.top/tags/zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>leetcode1160-拼写单词</title>
    <link href="https://www.codetool.top/article/leetcode1160-%E6%8B%BC%E5%86%99%E5%8D%95%E8%AF%8D/"/>
    <id>https://www.codetool.top/article/leetcode1160-拼写单词/</id>
    <published>2020-03-16T17:04:10.000Z</published>
    <updated>2020-03-16T17:07:04.338Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给你一份『词汇表』（字符串数组） <code>words</code> 和一张『字母表』（字符串） <code>chars</code>。</p><p>假如你可以用 <code>chars</code> 中的『字母』（字符）拼写出 <code>words</code> 中的某个『单词』（字符串），那么我们就认为你掌握了这个单词。</p><p>注意：每次拼写时，<code>chars</code> 中的每个字母都只能用一次。</p><p>返回词汇表 <code>words</code> 中你掌握的所有单词的 <strong>长度之和</strong>。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入：</strong> words = [“cat”,”bt”,”hat”,”tree”], chars = “atach”<br><strong>输出：</strong> 6<br><strong>解释：</strong><br>可以形成字符串 “cat” 和 “hat”，所以答案是 3 + 3 = 6。</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入：</strong> words = [“hello”,”world”,”leetcode”], chars = “welldonehoneyr”<br><strong>输出：</strong> 10<br><strong>解释：</strong><br>可以形成字符串 “hello” 和 “world”，所以答案是 5 + 5 = 10。  </p></blockquote><p><strong>提示：</strong></p><ol><li><code>1 &lt;= words.length &lt;= 1000</code></li><li><code>1 &lt;= words[i].length, chars.length &lt;= 100</code></li><li>所有字符串中都仅包含小写英文字母</li></ol><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>数组下标对应字母计数</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">distributeCandies</span><span class="token punctuation">(</span><span class="token keyword">int</span> candies<span class="token punctuation">,</span> <span class="token keyword">int</span> num_people<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> candie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>num_people<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cur_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cur_count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>candies<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>candies <span class="token operator">-</span> cur_count <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                candie<span class="token punctuation">[</span>cur_index<span class="token punctuation">]</span><span class="token operator">+=</span>candies<span class="token punctuation">;</span>                candies <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            candie<span class="token punctuation">[</span>cur_index<span class="token punctuation">]</span><span class="token operator">+=</span>cur_count<span class="token punctuation">;</span>            candies <span class="token operator">-=</span> cur_count<span class="token punctuation">;</span>            cur_index<span class="token operator">++</span><span class="token punctuation">;</span>            cur_count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur_index <span class="token operator">==</span> num_people<span class="token punctuation">)</span> cur_index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         <span class="token keyword">return</span> candie<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给你一份『词汇表』（字符串数组） &lt;code&gt;words&lt;/code&gt; 和一张『字母表』（字符串） &lt;code&gt;chars&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;假如你可以用 &lt;code&gt;chars&lt;/code&gt; 中的『字母』（字符）拼写出
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>拜占庭将军问题和共识算法Paxos、Raft</title>
    <link href="https://www.codetool.top/article/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98%E5%92%8C%E5%85%B1%E8%AF%86%E7%AE%97%E6%B3%95Paxos%E3%80%81Raft/"/>
    <id>https://www.codetool.top/article/拜占庭将军问题和共识算法Paxos、Raft/</id>
    <published>2020-03-16T16:44:46.000Z</published>
    <updated>2020-03-16T16:50:53.207Z</updated>
    
    <content type="html"><![CDATA[<p>本文并不会对每种算法进行深入，我只是参考了部分网上的博客和整理的资料，也只是处于一种懵懂的状态。</p><p>本文参考资源：</p><p><a href="https://zh.wikipedia.org/wiki/Paxos%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">Paxos算法 - 维基百科，自由的百科全书</a></p><p><a href="https://www.zhihu.com/question/54997169" target="_blank" rel="noopener">raft协议应用方面的疑问？ - 知乎</a></p><p><a href="https://www.zhihu.com/question/19787937" target="_blank" rel="noopener">如何浅显易懂地解说 Paxos 的算法？ - 知乎</a></p><p><a href="https://www.bilibili.com/video/av21667358?from=search&seid=3548054564060124942" target="_blank" rel="noopener">一致性算法（Paxos、Raft、ZAB）_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><p><a href="https://www.cnblogs.com/xybaby/p/10124083.html" target="_blank" rel="noopener">一文搞懂Raft算法 - xybaby - 博客园一文搞懂Raft算法 - xybaby - 博客园</a></p><p>还有一些没记下来，研究这些东西有英文能力的还是尽量去读发明者所著论文吧。。</p><h1 id="拜占庭将军问题">1 拜占庭将军问题</h1><p>拜占庭帝国有许多支军队，不同军队的将军之间必须制定一个统一的行动计划，从而做出仅供或者撤退的决定，同时，各个将军在地理上都是被分隔开的，只能依靠军队的通讯员来进行通讯。然而，在所有的通讯员中可能会存在叛徒，这些叛徒可以篡改信息，从而达到欺骗将军的目的。</p><p>为了解决网络分区情况下，部分节点之间的通讯可能出现消失丢失或消息被篡改的情况。衍生出了几种共识算法：</p><h1 id="Basic-Paxos">2 Basic Paxos</h1><p>Paxos是早期的共识算法，由拜占庭将军问题的提出者 Leslie Lamport 所发明。谷歌的分布式锁服务 Chubby 就是以 Paxos 算法为基础。</p><p>在古希腊有一个叫做 Paxos 的小岛，岛上采用议会的形式来通过法令，议会中的议员通过信使进行消息的传递。议员和信使都是兼职的，他们随时有可能会离开议会厅，并且信使可能会重复地传递消息，也可能一去不复返。因此，议会协议要保证在这种情况下法令仍然能够正确的产生，并且不会出现冲突。</p><p>Paxos算法假设没有拜占庭将军问题，即虽然有可能一个消息被传递了两次，但是绝对不会出现错误的消息。</p><p>paxos有三个版本：</p><ul><li>Basic Paxos</li><li>Multi Paxos</li><li>Fast Paxos</li></ul><p>在paxos算法中，有四种角色，分别具有三种不同的行为，但多数情况，一个进程可能同时充当多种角色。</p><ul><li>client ：系统外部角色，请求发起者，不参与决策</li><li>proposer ：提案提议者（至少一个）</li><li>acceptor ：提案的表决者，即是否accept该提案，只有超过半数以上的acceptor接受了提案，该提案才被认为被“选定”（至少三个，必须单数）</li><li>learners ：提案的学习者，当提案被选定后，其同步执行提案，不参与决策</li></ul><p>paxos算法的思想是，proposer 将发起提案（value）给所有 accpetor，超过半数 accpetor 获得批准后，proposer将提案写入 accpetor 内，最终所有 accpetor 获得一致性的确定性取值，且后续不允许再修改。learners只能“学习”被批准的提案。</p><p>Paxos算法分为两个阶段：prepare阶段、accept阶段，这两个阶段是针对proposer的，多个proposer进入accpet的时间具有先后顺序。</p><h2 id="Prepare阶段">2.1 Prepare阶段</h2><ol><li>proposer提出一个提案，编号为N,发送给所有的acceptor。（Proposal Number：提议编号，可理解为提议版本号，要求不能冲突，每次生成必须是递增的）</li><li>每个acceptor都保存自己的accept的最大提案编号maxN，<strong>当acceptor收到prepare(N)请求时，会比较N与maxN的值，若N小于maxN,则提案已过时，拒绝prepare(N)请求</strong>。若N大于等于maxN，则接受提案，并<strong>将该acceptor曾经接受过的编号最大的提案Proposal(myid,maxN,value)反馈给proposer</strong>：其中myid表示acceptor的标识id，maxN表示接受过的最大提案编号maxN，value表示提案内容。若当前acceptor未曾accept任何提议，会将proposal(myid,null,null)反馈给提议者。</li></ol><p>acceptor在接收提案之后做出两个保证（Promise）：</p><ol><li>不再接受Proposal Number小于等于（注意：这里是&lt;= ）当前请求的Prepare请求。</li><li>不再接受Proposal Number小于（注意：这里是&lt; ）当前请求的Propose请求。</li></ol><h2 id="accept-阶段">2.2 accept 阶段</h2><ol><li><strong>proposal发出prepare(N),若收到超过半数acceptor的反馈，proposal将真正的提案内容proposal(N,value)发送给acceptor。</strong></li><li>acceptor接受提议者发送的proposal(N,value)提案后，会比较自己曾经accept过的最大提案编号maxN和反馈过的prepare的最大编号，若N<strong>大于</strong>这两个编号，则当前表决者accept该提案，并反馈给提议者。否则拒绝该提议。（最后确认的提议基本上就是版本号最新的提议，而版本号最新的提议内容永远是被大多数acceptor接收提案内容）</li></ol><p>被拒绝的Proposer可以重新进入Prepare阶段，并将自己的提案编号自增。</p><p><img src="https://api.codetool.top/img/1584371218469.png" alt="正常流程"></p><p><img src="https://api.codetool.top/img/15843714449059.png" alt="部分失联"></p><p><img src="https://api.codetool.top/img/15843716226127.png" alt="proposer单点失败"></p><p>Basic Paxos存在活锁问题，两个Proposers交替Prepare成功，而Accept失败，形成活锁（Livelock）。</p><h1 id="Multi-Paxos">3 Multi-Paxos</h1><p>Multi-Paxos引入了Leader概念，它是唯一的Proposer，所有的请求都需经过Leader。</p><p><strong>Multi-Paxos首先需要选举Leader，Leader的确定也是一次决议的形成，所以可执行一次Basic Paxos实例来选举出一个Leader。</strong> 选出Leader之后只能由Leader提交Proposal，在Leader宕机之后服务临时不可用，需要重新选举Leader继续服务。在系统中仅有一个Leader进行Proposal提交的情况下，Prepare阶段可以跳过。</p><p>Multi-Paxos通过改变Prepare阶段的作用范围至后面Leader提交的所有实例，从而使得<strong>Leader的连续提交只需要执行一次Prepare阶段，后续只需要执行Accept阶段，将两阶段变为一阶段，提高了效率。</strong>为了区分连续提交的多个实例，每个实例使用一个Instance ID标识，Instance ID由Leader本地递增生成即可。</p><p><img src="https://api.codetool.top/img/15843723595393.png" alt="上图：竞选leader，下图：有leader后的请求"></p><p>Multi-Paxos允许有多个自认为是Leader的节点并发提交Proposal而不影响其安全性，这样的场景即退化为Basic Paxos。</p><p>Chubby和Boxwood均使用Multi-Paxos。ZooKeeper使用的ZAB也是Multi-Paxos的变形。</p><h1 id="Raft">4 Raft</h1><p>之前写的博客<a href="../Redis主从复制、哨兵、集群详解">Redis主从复制、哨兵、集群详解</a>中，redis的哨兵机制sentinel就是使用的raft思想，有leader sentinel和leader选举。</p><p>Raft基于Multi-Paxos思想，它把Multi-Paxos划分为三个子问题：</p><ul><li>Leader Election：Leader的选举</li><li>Log Replication：leader同步log到其他节点</li><li>safety：保证被复制到大多数节点的日志不会被回滚</li></ul><p>Raft定义的角色：</p><ul><li>Leader：</li><li>Follower：</li><li>Candidate：如果Leader失效（宕机），follower中会产生candidate竞选leader</li></ul><p>leader会不停的给follower发心跳消息，表明自己的存活状态。如果leader故障，follower会在一段时间内没有收到leader的心跳包，过了超时时间那么follower会转换成candidate，重新选出leader。</p><p>raft官方参考：</p><p><a href="https://raft.github.io/" target="_blank" rel="noopener">https://raft.github.io/</a>  </p><p><a href="http://thesecretlivesofdata.com/raft/" target="_blank" rel="noopener">http://thesecretlivesofdata.com/raft/</a></p><h2 id="Leader-Election">4.1 Leader Election</h2><p>leader选举的过程：</p><ul><li>增加节点本地的 current term ，切换到candidate状态</li><li>投自己一票</li><li>并行给其他节点发送 RequestVote RPCs</li><li>等待其他节点的回复</li><li>在这个过程中，根据来自其他节点的消息，可能出现三种结果<ul><li>收到majority的投票（含自己的一票），则赢得选举，成为leader</li><li>被告知别人已当选，那么自行切换到follower</li><li>一段时间内没有收到majority投票，则保持candidate状态，重新发出选举</li></ul></li></ul><p>第一种情况，赢得了选举之后，新的leader会立刻给所有节点发消息，广而告之，避免其余节点触发新的选举。</p><p>而一个节点是否给其他节点投票的原则是</p><ul><li>对方term（任期） 和 log 都至少和自己的一样新</li><li>先到先得</li></ul><p>如果出现平票的情况，各候选人会产生一个随机的timeout之后重新发起竞选，依据先到先得原则不会再平票。（并且很多实现是需要节点个数为奇数）</p><h2 id="log-replication">4.2 log replication</h2><p>当有了leader，系统应该进入对外工作期了。客户端的一切请求来发送到leader，leader来调度这些并发请求的顺序，并且保证leader与followers状态的一致性。raft中的做法是，将这些请求以及执行顺序告知followers。leader和followers以相同的顺序来执行这些请求，保证状态一致。</p><p>leader将客户端请求（command）封装到一个个log entry，将这些log entries复制（replicate）到所有follower节点，然后大家按相同顺序应用（apply）log entry中的command。下一次的的心跳包follower给leader返回ack，leader再把响应返回给请求发起者（Client）。</p><h2 id="safety">4.3 safety</h2><h3 id="Follower-宕机">4.3.1 Follower 宕机</h3><p>当 leader 在 commit log 时, 某 follower 宕机，然后这个 follower 后来被选为 leader,它会覆盖掉现在 follwer 那些已经 committed log, 由于这些 log 是已经执行过的,所以结果不同的机器就执行不同的指令. 在选举过程中,再加多一个限制就可以防止这种情况发生, 即:</p><p>Leader completeness property:<br><strong>对于任意一个 term, leader 都要包含所有在之前 term 里 committed 的 log。</strong></p><h3 id="Leader-宕机">4.3.2 Leader 宕机</h3><h4 id="数据到达Leader节点前">4.3.2.1 数据到达Leader节点前</h4><p>这个阶段 Leader 挂掉不影响一致性</p><h4 id="数据到达Leader节点，但未复制到Follower节点">4.3.2.2 数据到达Leader节点，但未复制到Follower节点</h4><p>这个阶段 Leader 挂掉，数据属于未提交状态，Client 不会收到 Ack 会认为超时失败可安全发起重试。Follower 节点上没有该数据，<strong>重新选主后 Client 重试重新提交可成功</strong>。原来的 Leader 节点恢复后作为 Follower 加入集群重新从当前任期的新 Leader 处同步数据，强制保持和 Leader 数据一致。</p><h4 id="数据到达Leader节点，成功复制到所有Follower节点，但还未向Leader响应接收">4.3.2.3 数据到达Leader节点，成功复制到所有Follower节点，但还未向Leader响应接收</h4><p>这个阶段 Leader 挂掉，虽然数据在 Follower 节点处于未提交状态（Uncommitted）但保持一致，<strong>重新选出 Leader 后可完成数据提交</strong>，此时 Client 由于不知到底提交成功没有，可重试提交。针对这种情况 Raft <strong>要求 RPC 请求实现幂等性，也就是要实现内部去重机制。</strong></p><h4 id="数据到达Leader节点，成功复制到部分Follower节点，但还未向Leader响应接收">4.3.2.4 数据到达Leader节点，成功复制到部分Follower节点，但还未向Leader响应接收</h4><p>这个阶段 Leader 挂掉，数据在 Follower 节点处于未提交状态（Uncommitted）且不一致，Raft 协议要求投票只能投给拥有最新数据的节点。所以<strong>拥有最新数据的节点会被选为Leader 再强制同步数据到 Follower，数据不会丢失并最终一致。</strong></p><h4 id="数据到达Leader节点，成功复制到Follower所有或多数节点，数据在所有节点都处于已提交状态，但还未响应Client">4.3.2.5 数据到达Leader节点，成功复制到Follower所有或多数节点，数据在所有节点都处于已提交状态，但还未响应Client</h4><p>这个阶段 Leader 挂掉，集群内部数据其实已经是一致的，Client 重复重试基于幂等策略对一致性无影响。</p><h4 id="网络分区导致的脑裂情况，出现双-Leader">4.3.2.6 网络分区导致的脑裂情况，出现双 Leader</h4><p>如果出现网络分区情况，可能会出现两边各推选出一个leader，但如果leader不能将log复制到大多数节点（majority），就不会给请求发起者返回成功消息，并让接收到自己日志复制的请求的节点回滚。（还有一个last_index, term_id作为leader竞选的依据，只有拥有最新的redo log的candidate才能成为leader）</p><p>网络恢复后旧的 Leader 发现集群中有更新任期（Term）的新 Leader 则自动降级为Follower 并从新 Leader 处同步数据达成集群数据一致。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文并不会对每种算法进行深入，我只是参考了部分网上的博客和整理的资料，也只是处于一种懵懂的状态。&lt;/p&gt;
&lt;p&gt;本文参考资源：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zh.wikipedia.org/wiki/Paxos%E7%AE%97%E6%B3%95&quot; ta
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="分布式" scheme="https://www.codetool.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>分布式一致性理论和一致性协议2PC、3PC</title>
    <link href="https://www.codetool.top/article/%E5%88%86%E5%B8%83%E5%BC%8F%E4%B8%80%E8%87%B4%E6%80%A7%E7%90%86%E8%AE%BA%E5%92%8C%E4%B8%80%E8%87%B4%E6%80%A7%E5%8D%8F%E8%AE%AE2PC%E3%80%813PC/"/>
    <id>https://www.codetool.top/article/分布式一致性理论和一致性协议2PC、3PC/</id>
    <published>2020-03-16T14:32:27.000Z</published>
    <updated>2020-03-16T14:36:51.167Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分布式一致性">1 分布式一致性</h1><h2 id="数据的一致性模型">1.1 数据的一致性模型</h2><ul><li>强一致性：要求无论更新操作实在哪一个副本执行，之后所有的读操作都要能获得最新的数据。</li><li>弱一致性：<strong>用户读到某一操作对系统特定数据的更新需要一段时间</strong>，我们称这段时间为“不一致性窗口”。</li><li>最终一致性：<strong>是弱一致性的一种特例，保证用户最终能够读取到某操作对系统特定数据的更新。</strong></li></ul><p>数据的强一致性要求如果数据不一致，就不对外提供数据服务，保证用户读取的数据始终是一致的。数据强一致性只需要通过锁机制即可解决。</p><p>常用的锁实现算法有 Lamport bakery algorithm （俗称面包店算法）， 还有 Paxos 算法以及<br>乐观锁。</p><h2 id="CAP">1.2 CAP</h2><p>CAP 定理是 2000 年，由 Eric Brewer 提出来的。Brewer 认为在分布式的环境下设计和部署系统时，有 3 个核心的需求，以一种特殊的关系存在。这里的分布式系统说的是在物理上分布的系统。</p><p>CAP 理论的核心是：一个分布式系统不可能同时很好的满足<strong>一致性，可用性和分区容错性</strong>这三个需求，<strong>最多只能同时较好的满足两个。</strong></p><ul><li><code>Consistency</code>（一致性）：<strong>所有的节点在同一时间读到相同的数据。这就是数据上的一致性</strong>，当数据写入成功后，所有的节点会同时看到这个新的数据</li><li><code>Availability</code>（可用性）：<strong>保证无论是成功还是失败，每个请求都能够收到一个反馈。</strong>这<br>就是数据的可用性。重点是系统一定要有响应。</li><li><code>Partition-Tolerance</code>（分区容错性）：<strong>即使系统中有部分问题或者有消息的丢失，系统仍能够继续运行</strong>，这被称为分区容错性，也就是在系统的一部分出问题时，系统仍能继续工作。</li></ul><p>因为在一个分布式系统中不可能同时满足一致性、可用性、分区容错性，最多满足两个，发展而来的有三大类系统：</p><ul><li><code>CA</code> - <strong>单点集群，满足一致性，可用性的系统</strong>，通常在可扩展性上不太强大。<br>一种较为简单的做法是<strong>将所有的数据（或者是仅仅与事务相关的数据）都放在一个分布式节点上</strong>。这样的做法虽然无法100%地保证系统不会出错，但至少不会碰到由于网络分区带来的负面影响，放弃 P 的同时也意味着放弃了系统的可扩展性。</li><li><code>CP</code> - 满足一致性，分区容错性的系统。  </li></ul><p><strong>一旦系统遇到网络分区或者其他故障时，那么受到影响的服务需要等待一定的时间，因此在等待期间系统无法对外提供正常服务，即不可用。</strong></p><ul><li><code>AP</code> - 满足可用性，分区容错性的系统，通常可能对一致性要求低一些。<br>放弃一致性指的是<strong>放弃强一致性，而保留数据的最终一致性</strong>，这样的系统无法保证数据保持实时的一致性，但是能够承诺的是，数据最终会达到一个一致的状态。<strong>这就引入了一个时间窗口的概念，具体多久能够达到数据一致性取决于系统的设计，主要包括数据副本在不同节点之间的复制时间长短。</strong></li></ul><p><strong>对于分布式互联网应用而言，必须保证P，所以要么满足AP模型、要么满足CP模型。</strong></p><p>很多 NoSQL 都是 AP 模型</p><p>对于CP模型，网络的问题可能会让整个系统不可用</p><h2 id="BASE">1.3 BASE</h2><p>BASE 就是为了解决关系数据库强一致性引起的问题而造成可用性降低（分布式事务的低性能）而提出的解决方案。</p><p>BASE 其实是下面三个术语的缩写：</p><ul><li>基本可用（Basically Available）</li><li>软状态（Soft state）</li><li>最终一致（Eventually consistent）</li></ul><p>它的思想是通过<strong>让系统放松对某一时刻数据一致性的要求来换取系统整体伸缩性和性能上改观。</strong>为什么这么说呢，缘由就在于<strong>大型系统往往由于地域分布和极高性能的要求，不可能采用分布式事务来完成这些指标</strong>，要想获得这些指标，我们必须采用另外一种方式来完成，这里 BASE 就是解决这个问题的办法。</p><h3 id="基本可用">1.3.1 基本可用</h3><p>分布式系统在出现不可预知故障的时候，允许损失部分可用性，比如</p><ol><li>响应时间上的损失：出现故障时响应稍慢</li><li>功能上的损失：部分用户可能会被引导到一个降级页面</li></ol><h3 id="软状态">1.3.2 软状态</h3><p><strong>允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性</strong>，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时。</p><h3 id="最终一致">1.3.3 最终一致</h3><p>系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。</p><h1 id="2PC">2 2PC</h1><p>要达成分布式一致性，发展出了许多一致性协议，其中2PC是在分布式环境下保证事务原子性和一致性设计的算法，也被认为是一种一致性协议，用来保证分布式系统数据的一致性。<strong>目前，绝大多数数据库都是采用 2PC 协议来完成分布式事务处理的。</strong></p><p>它将事务的提交分成两个阶段：</p><h2 id="阶段一：提交事务请求-投票阶段">2.1 阶段一：提交事务请求 投票阶段</h2><p><strong>由一方进行提议(propose)并收集其他节点的反馈(vote)</strong>，我们将<strong>提议的节点称为协调者，其他参与决议节点称为参与者</strong>。</p><ol><li>事务询问<br>协调者向所有参与者发送事务内容，询问是否可以执行事务提交操作，并开始等待各参与者的响应。</li><li>执行事务<br>各参与者节点执行事务操作，并将 Undo 和 Redo 信息记入事务日志中。</li><li>各参与者向协调者反馈事务询问的响应<br>如果参与者成功执行了事务操作，那么就反馈给协调者 yes 响应，表示事务可以执行；如果参与者没有成功执行事务，那么就反馈给协调者 no 响应，表示事务不可以执行。</li></ol><h2 id="阶段二：执行事务提交-执行阶段">2.2 阶段二：执行事务提交 执行阶段</h2><p>协调者根据反馈决定提交(commit)或中止(abort)事务。</p><p>正常情况下，包括以下两种可能：</p><h3 id="执行事务提交">2.2.1 执行事务提交</h3><p>假如协调者从所有的参与者获得反馈都是 yes，那么就会执行事务提交。</p><ol><li>发送提交请求<br>协调者向所有参与者节点发出 commit 请求</li><li>事务提交<br>参与者接收到 commit 请求后，会正式执行事务提交操作，并在完成提交之后释放在整个事务执行期间占用的事务资源。</li><li>反馈事务提交结果<br>参与者在完成事务提交之后，向协调者发送 ACK 消息。</li><li>完成事务<br>协调者接收到所有参与者反馈的 ACK 消息，完成事务</li></ol><h3 id="中断事务">2.2.2 中断事务</h3><p>假如任何一个参与者向协调者反馈了 no 响应，或者在等待超时之后，协调者无法接收到所有参与者的反馈响应，那么就会中断事务。</p><ol><li>发送回滚请求<br>协调者向所有参与者节点发出 rollback 请求</li><li>事务回滚<br>参与者接收到 rollback 请求后，会利用其在阶段一中记录的 Undo 信息来中事务回滚操作，并在完成回滚之后释放在整个事务执行期间占用的资源。</li><li>反馈事务回滚结果<br>参与者在完成事务回滚之后，向协调者发送 ACK 消息</li><li>中断事务<br>协调者接收到所有参与者反馈的 ACK 消息，完成事务中断。</li></ol><h2 id="优缺点">2.3 优缺点</h2><p>2PC的优点是原理简单，实现方便，缺点有</p><ul><li>同步阻塞：两阶段提交中的第二阶段, 协调者需要等待所有参与者发出 yes 请求, 或者一个参与者发出 no 请求后, 才能执行提交或者中断操作. 这会造成长时间同时锁住多个资源, 造成性能瓶颈，<strong>如果参与者有一个耗时长的操作, 性能损耗会更明显。</strong></li><li>单点问题：协调者的角色在整个 2PC 中起到了非常重要的作用。<strong>一旦协调者出现问题，那么整个 2PC流程将无法运转。</strong>如果协调者是在阶段二出现问题的话，那么其他参与者将会一直处于锁定事务资源的状态中，而无法继续完成事务操作。</li><li>数据不一致/脑裂：在阶段二中，即在执行事务提交的时候，当协调者向所有的参与者发送 commit 请求之后，<strong>发生了局部网络异常或者是协调者在尚未完全发送完commit请求之前自身发生了崩溃，导致最终只有部分参与者收到了 commit 请求。</strong>于是，这部分收到了 commit 请求的参与者就会进行事务的提交，而其他没有收到 commit 请求的参与者则无法进行事务提交，于是出现数据不一致的情况。</li><li>太过保守：如果在协调者指示参与者进行事务提交询问的过程中，参与者出现故障而导致协调者始终无法获取到所有参与者的响应信息的话，这时协调者只能依靠其自身的超时机制来判断是否需要中断事务，这样的策略显得比较保守。2PC 没有涉及较为完善的容错机制，任意一个节点的失败都会导致整个事务的失败。</li></ul><p>根据2PC协议，衍生出一种分布式事务规范XA，目前许多数据库都支持。</p><h1 id="3PC">3 3PC</h1><p>是2PC的改进版，其将2PC的提交事务请求过程一分为二，形成了<strong>由CanCommit、PreCommit和 doCommit 三个阶段组成的事务处理协议。</strong></p><p>在 2PC 中一个参与者的状态只有它自己和协调者知晓，假如协调者提议后自身宕机，一个参与者又宕机，其他参与者就会进入既不能回滚、又不能强制 commit 的阻塞状态，直到参与者宕机恢复。这引出两个疑问：</p><ul><li>能不能去掉阻塞，使系统可以在 commit/abort 前回滚(rollback)到决议发起前的初始状态？</li><li>当次决议中，参与者间能不能相互知道对方的状态，又或者参与者间根本不依赖对方的状态？</li></ul><h2 id="阶段一：CanCommit">3.1 阶段一：CanCommit</h2><ol><li>事务询问<br>协调者向所有的参与者发送一个包含事务内容的 canCommit 请求，询问是否可以执行事务提交操作，并开始等待各参与者的响应</li><li>各参与者向协调者反馈事务询问的响应<br>参与者接收到来自协调者的 canCommit 请求后，正常情况下，<strong>如果其自身认为可以顺利执行事务（通常是尝试获取数据库锁）</strong>，那么会反馈 yes 响应，并进入预备状态，否则反馈 no 响应。</li></ol><h2 id="阶段二：PreCommit">3.2 阶段二：PreCommit</h2><p>在阶段二中，协调者会根据各参与者的反馈情况来决定是否可以进行事务的 PreCommit 操<br>作，正确情况下，包含两种可能。</p><h3 id="执行事务预提交">3.2.1 执行事务预提交</h3><p>假如协调者从所有的参与者获得的反馈都是 yes，那么就会执行事务预提交。</p><ol><li>发送预提交请求<br>协调者向所有参与者节点发出 preCommit 请求，并进入 Prepared 阶段</li><li>事务预提交<br>参与者接收到 preCommit 请求后，会执行事务操作，并将 Undo 和 Redo 信息记录到事务日志中</li><li>各参与者向协调者反馈事务执行的响应<br>如果参与者成功执行了事务操作，那么就会反馈给协调者 ACK 响应，同时等待最终的指令：提交（commit）或中止（abort）。如果失败，那么会反馈给协调者 no 响应。</li></ol><h3 id="中断事务-1">3.2.2 中断事务</h3><p>假如任何一个参与者向协调者反馈了 no 响应，<strong>或者在等待超时之后</strong>，协调者尚无法接收到所有参与者的反馈响应，那么就会中断事务。</p><ol><li>发送中断请求<br>协调者向所有参与者节点发出 abort 请求</li><li>中断事务<br>无论是收到来自协调者的 abort 请求，或者是在等待协调者请求过程中出现超时，参与者都会中断事务</li></ol><h2 id="阶段三：doCommit">3.3 阶段三：doCommit</h2><p>该阶段将进行真正的事务提交，会存在以下两种可能的情况</p><h3 id="执行提交">3.3.1 执行提交</h3><ol><li>发送提交请求<br>假设协调者处于正常工作状态，并且它接收到了来自所有参与者的 ACK 响应，那么它将从“预提交”状态转换到“提交”状态，并向所有的参与者发送 doCommit 请求。</li><li>事务提交<br>参与者接收到 doCommit 请求后，会正式执行事务提交操作，并在完成提交之后释放在整个事务执行阶段占用的事务资源</li><li>反馈事务提交结果<br>参与者在完成事务提交之后，向协调者发送 ACK 消息</li><li>完成事务<br>协调者接收到所有参与者反馈的 ACK 消息后，完成事务。</li></ol><h3 id="中断事务-2">3.3.2 中断事务</h3><p>进入这一阶段，假设协调者处于正常工作状态，并且有任意一个参与者向协调者反馈 no 响应，<strong>或者在等待超时之后，协调者尚无法接收到所有参与者的反馈响应</strong>，那么就会中断事务。</p><ol><li>发送中断请求<br>协调者向所有的参与者发送 abort 请求</li><li>事务回滚<br>参与者接收到 abort 请求后，会利用其在阶段二记录的 Undo 信息来执行事务回滚操作，并在完成回滚之后释放在整个事务执行期间占用的资源。</li><li>反馈事务回滚结果<br>参与者在完成事务回滚之后，向协调者发送 ACK 消息</li><li>中断事务<br>协调者接收到所有参与者反馈的 ACK 消息后，中断事务。</li></ol><p>一旦进入阶段三，可能会存在以下两种故障：</p><ol><li>协调者出现问题</li><li>协调者和参与者之间的网络出现故障<br>无论出现哪种情况，都会导致参与者无法及时接收到来自协调者的doCommit或abort请求，针对这种异常情况，参与者会在等待超时之后，继续进行事务提交。</li></ol><h2 id="优缺点-1">3.4 优缺点</h2><p><strong>优点：</strong> 相较于 2PC，引入超时机制，最大的优点是降低了参与者的阻塞范围，并且能够在出现单点故障后继续达成一致。</p><p><strong>缺点：</strong> 在参与者接收到 preCommit 消息后，如果网络出现分区，此时协调者所在的节点和参与者无法进行正常的网络通信，此时该参与者依然会进行事务的提交，这必然会出现数据的不一致性。</p><p>由于2PC、3PC都没有解决网络分区引起的数据不一致问题，后来又出现了许多共识协议，等到下篇博客再谈。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;分布式一致性&quot;&gt;1 分布式一致性&lt;/h1&gt;&lt;h2 id=&quot;数据的一致性模型&quot;&gt;1.1 数据的一致性模型&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;强一致性：要求无论更新操作实在哪一个副本执行，之后所有的读操作都要能获得最新的数据。&lt;/li&gt;
&lt;li&gt;弱一致性：&lt;strong&gt;用户
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="分布式" scheme="https://www.codetool.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Netty源码初探-NioEventLoopGroup</title>
    <link href="https://www.codetool.top/article/Netty%E6%BA%90%E7%A0%81%E5%88%9D%E6%8E%A2-NioEventLoopGroup/"/>
    <id>https://www.codetool.top/article/Netty源码初探-NioEventLoopGroup/</id>
    <published>2020-03-16T10:37:54.000Z</published>
    <updated>2020-03-18T08:15:52.105Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总结">1 总结</h1><p>把总结放前面今后好复习：</p><p>这样看下来netty源码确实设计的挺复杂的，我阅读起来有点吃力，因为之前我阅读源码都是过程驱动的，这次直接从某一个类开始读，也不知道这个类在哪个地方用到了，下次就还是按netty运行的某块流程去跟踪源码。（这篇文章是失败的）</p><ul><li>NioEventLoopGroup中含一个children数组，类型为NioEventLoop，如果调用默认构造方法构造NioEventLoopGroup，其大小默认为可用CPU核数*2（或与配置属性之间的最大值）</li><li>NioEventLoop继承自SingleThreadEventExecutor，他是一个主要的父类，具体有什么用下次看到相关源码再研究</li><li>NioEventLoop中有个SelectorProvider，它在不同操作系统中的实现是不同的，windows的SelectorProvider提供的selector是使用<code>select</code>实现的，linux使用<code>epoll</code>，salaris使用<code>poll</code>，macosx使用<code>kqueue</code></li></ul><h1 id="源码分析">2 源码分析</h1><p><img src="https://api.codetool.top/img/15843448603841.png" alt></p><p>实现了ExecutorService，说明它具有类似线程池的性质，ExecutorService和ScheduledExecuterService分别对应submit和schedule方法（任务和定时任务）</p><p>然后就要看这个核心接口：EventExecutorGroup，这个接口算是netty提供的最顶层的接口了，再往上就是jdk的地盘了，它的javadoc描述是</p><blockquote><p>The EventExecutorGroup is responsible for providing the EventExecutor’s to use via its next() method. Besides this, it is also responsible for handling their life-cycle and allows shutting them down in a global fashion.  </p></blockquote><p><code>EventExecutorGroup</code>负责通过其<code>next()</code>方法提供要使用的<code>EventExecutor</code>。除此之外，它还负责处理它们的生命周期，并允许以全局方式关闭它们。（shutdownGracefully）</p><p>而EventExecutor实际上是一个实现了EventExecutorGroup的子接口，它提供了<code>parent()</code>方法获取所属的EventExecutorGroup。</p><p>通过<code>AbstractEventExecutorGroup</code>发现，他调用submit、schedule等方法实际上是在<code>next()</code>返回的EventExecutor上调用。</p><p>然后看<code>MultithreadEventExecutorGroup</code>类，这个类已经提供了绝大部分实现，</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">MultithreadEventExecutorGroup</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractEventExecutorGroup</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//维护了一个EventExecutor数组</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> EventExecutor<span class="token punctuation">[</span><span class="token punctuation">]</span> children<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//只读的EventExecutor</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Set<span class="token operator">&lt;</span>EventExecutor<span class="token operator">></span> readonlyChildren<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//终止的EventExecutor计数</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> AtomicInteger terminatedChildren <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Promise是一个可写的Future</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> Promise<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> terminationFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPromise</span><span class="token punctuation">(</span>GlobalEventExecutor<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//Chooses the next EventExecutor to use.选择下一个EventExecutor</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> EventExecutorChooserFactory<span class="token punctuation">.</span>EventExecutorChooser chooser<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span></code></pre><p>然后从最底下NioEventLoopGroup的构造方法看起，这个类没有什么新增的属性和方法，基本是提供了一些构造方法，默认构造</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>传递链：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//nThreads = 0</span><span class="token keyword">public</span> <span class="token function">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> <span class="token punctuation">(</span>Executor<span class="token punctuation">)</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//nThreads = 0, executor = null</span><span class="token keyword">public</span> <span class="token function">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">,</span> Executor executor<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> SelectorProvider<span class="token punctuation">.</span><span class="token function">provider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//nThreads = 0, executor = null,selectorProvider = SelectorProvider.provider()</span><span class="token comment" spellcheck="true">//selectorProvider使用来提供NIO核心selector的一个类</span><span class="token keyword">public</span> <span class="token function">NioEventLoopGroup</span><span class="token punctuation">(</span>        <span class="token keyword">int</span> nThreads<span class="token punctuation">,</span> Executor executor<span class="token punctuation">,</span> <span class="token keyword">final</span> SelectorProvider selectorProvider<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> selectorProvider<span class="token punctuation">,</span> DefaultSelectStrategyFactory<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//nThreads = 0, executor = null,selectorProvider = SelectorProvider.provider()</span><span class="token comment" spellcheck="true">//selectStrategyFactory = DefaultSelectStrategyFactory()</span><span class="token keyword">public</span> <span class="token function">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">,</span> Executor executor<span class="token punctuation">,</span> <span class="token keyword">final</span> SelectorProvider selectorProvider<span class="token punctuation">,</span>                            <span class="token keyword">final</span> SelectStrategyFactory selectStrategyFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> selectorProvider<span class="token punctuation">,</span> selectStrategyFactory<span class="token punctuation">,</span> RejectedExecutionHandlers<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>接下来调用父类MultithreadEventLoopGroup的构造方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//nThreads = 0, executor = null</span><span class="token comment" spellcheck="true">//args = [SelectorProvider.provider(),DefaultSelectStrategyFactory(),RejectedExecutionHandlers.reject()]</span><span class="token keyword">protected</span> <span class="token function">MultithreadEventLoopGroup</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">,</span> Executor executor<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>nThreads <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">?</span> DEFAULT_EVENT_LOOP_THREADS <span class="token operator">:</span> nThreads<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里如果nThreads是0，传了一个DEFAULT_EVENT_LOOP_THREADS给父类的构造方法，而前面传过来的nThreads就是0，那么这个DEFAULT_EVENT_LOOP_THREADS是多少呢？</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_EVENT_LOOP_THREADS<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token punctuation">{</span>    DEFAULT_EVENT_LOOP_THREADS <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> SystemPropertyUtil<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span>            <span class="token string">"io.netty.eventLoopThreads"</span><span class="token punctuation">,</span> NettyRuntime<span class="token punctuation">.</span><span class="token function">availableProcessors</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"-Dio.netty.eventLoopThreads: {}"</span><span class="token punctuation">,</span> DEFAULT_EVENT_LOOP_THREADS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可见它是从1、环境配置中的<code>io.netty.eventLoopThreads</code>、<code>NettyRuntime.availableProcessors() * 2</code>中取最大值，而<code>NettyRuntime.availableProcessors() * 2</code>是netty可用主机CPU的核数*2。</p><p>最后，它调用MultithreadEventExecutorGroup的构造方法：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** nThreads：这个MultithreadEventExecutorGroup会用几个线程* executor：使用的线程池，如果是null使用默认的* chooserFactory，给chooserFactory赋值*/</span><span class="token keyword">protected</span> <span class="token function">MultithreadEventExecutorGroup</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">,</span> Executor executor<span class="token punctuation">,</span>                                        EventExecutorChooserFactory chooserFactory<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nThreads <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"nThreads: %d (expected: > 0)"</span><span class="token punctuation">,</span> nThreads<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//前面默认传过来的就是空，使用new ThreadPerTaskExecutor(newDefaultThreadFactory());</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>executor <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        executor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPerTaskExecutor</span><span class="token punctuation">(</span><span class="token function">newDefaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//children的大小为nThreads，即默认是netty可用主机CPU的核数*2（如果是最大值）</span>    children <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventExecutor</span><span class="token punctuation">[</span>nThreads<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//给children赋值</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nThreads<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">boolean</span> success <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            children<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">newChild</span><span class="token punctuation">(</span>executor<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>            success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO: Think about if this is a good exception type</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"failed to create a child event loop"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>success<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    children<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    EventExecutor e <span class="token operator">=</span> children<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">try</span> <span class="token punctuation">{</span>                        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>e<span class="token punctuation">.</span><span class="token function">isTerminated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            e<span class="token punctuation">.</span><span class="token function">awaitTermination</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> interrupted<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// Let the caller handle the interruption.</span>                        Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    chooser <span class="token operator">=</span> chooserFactory<span class="token punctuation">.</span><span class="token function">newChooser</span><span class="token punctuation">(</span>children<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">final</span> FutureListener<span class="token operator">&lt;</span>Object<span class="token operator">></span> terminationListener <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureListener</span><span class="token operator">&lt;</span>Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operationComplete</span><span class="token punctuation">(</span>Future<span class="token operator">&lt;</span>Object<span class="token operator">></span> future<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>terminatedChildren<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> children<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                terminationFuture<span class="token punctuation">.</span><span class="token function">setSuccess</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>EventExecutor e<span class="token operator">:</span> children<span class="token punctuation">)</span> <span class="token punctuation">{</span>        e<span class="token punctuation">.</span><span class="token function">terminationFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addListener</span><span class="token punctuation">(</span>terminationListener<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Set<span class="token operator">&lt;</span>EventExecutor<span class="token operator">></span> childrenSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span>EventExecutor<span class="token operator">></span><span class="token punctuation">(</span>children<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>childrenSet<span class="token punctuation">,</span> children<span class="token punctuation">)</span><span class="token punctuation">;</span>    readonlyChildren <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">unmodifiableSet</span><span class="token punctuation">(</span>childrenSet<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>newChild，对于NioEventLoopGroup的实现为：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> EventLoop <span class="token function">newChild</span><span class="token punctuation">(</span>Executor executor<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    EventLoopTaskQueueFactory queueFactory <span class="token operator">=</span> args<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">4</span> <span class="token operator">?</span> <span class="token punctuation">(</span>EventLoopTaskQueueFactory<span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">:</span> null<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoop</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> executor<span class="token punctuation">,</span> <span class="token punctuation">(</span>SelectorProvider<span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token punctuation">(</span>SelectStrategyFactory<span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">newSelectStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>RejectedExecutionHandler<span class="token punctuation">)</span> args<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> queueFactory<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>它返回一个EventLoop，可以看到对于NioEventLoopGroup，它的children数组中存放的实际是一个NioEventLoop对象。</p><p><img src="https://api.codetool.top/img/15843496948104.png" alt></p><pre class=" language-java"><code class="language-java"><span class="token function">NioEventLoop</span><span class="token punctuation">(</span>NioEventLoopGroup parent<span class="token punctuation">,</span> Executor executor<span class="token punctuation">,</span> SelectorProvider selectorProvider<span class="token punctuation">,</span>                SelectStrategy strategy<span class="token punctuation">,</span> RejectedExecutionHandler rejectedExecutionHandler<span class="token punctuation">,</span>                EventLoopTaskQueueFactory queueFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>parent<span class="token punctuation">,</span> executor<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token function">newTaskQueue</span><span class="token punctuation">(</span>queueFactory<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">newTaskQueue</span><span class="token punctuation">(</span>queueFactory<span class="token punctuation">)</span><span class="token punctuation">,</span>            rejectedExecutionHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>selectorProvider <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"selectorProvider"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>strategy <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"selectStrategy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    provider <span class="token operator">=</span> selectorProvider<span class="token punctuation">;</span>    <span class="token keyword">final</span> SelectorTuple selectorTuple <span class="token operator">=</span> <span class="token function">openSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    selector <span class="token operator">=</span> selectorTuple<span class="token punctuation">.</span>selector<span class="token punctuation">;</span>    unwrappedSelector <span class="token operator">=</span> selectorTuple<span class="token punctuation">.</span>unwrappedSelector<span class="token punctuation">;</span>    selectStrategy <span class="token operator">=</span> strategy<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>NioEventLoop有以下属性：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> Selector selector<span class="token punctuation">;</span><span class="token keyword">private</span> Selector unwrappedSelector<span class="token punctuation">;</span><span class="token keyword">private</span> SelectedSelectionKeySet selectedKeys<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> SelectorProvider provider<span class="token punctuation">;</span></code></pre><p>而它继承的SingleThreadEventExecutor有以下属性：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> Queue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> taskQueue<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> Thread thread<span class="token punctuation">;</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unused"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> ThreadProperties threadProperties<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> Executor executor<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> interrupted<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> CountDownLatch threadLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> Set<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> shutdownHooks <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">boolean</span> addTaskWakesUp<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> maxPendingTasks<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> RejectedExecutionHandler rejectedExecutionHandler<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">long</span> lastExecutionTime<span class="token punctuation">;</span><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">"FieldMayBeFinal"</span><span class="token punctuation">,</span> <span class="token string">"unused"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> state <span class="token operator">=</span> ST_NOT_STARTED<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> gracefulShutdownQuietPeriod<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> gracefulShutdownTimeout<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">long</span> gracefulShutdownStartTime<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">final</span> Promise<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> terminationFuture <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultPromise</span><span class="token operator">&lt;</span>Void<span class="token operator">></span><span class="token punctuation">(</span>GlobalEventExecutor<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>不同操作系统的I/O多路复用选择器各自内核实现不同，目前有select、poll、epoll、kqueue四种实现，JDK里与之对应的实现也随着操作系统的不同而不同，</p><p>JDK里对于Selector的实现都交由SelectorProvider的方法<code>openSelector()</code>来提供，而SelectorProvider的实现根据操作系统而变化：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> SelectorProvider <span class="token function">provider</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lock<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>provider <span class="token operator">!=</span> null<span class="token punctuation">)</span>            <span class="token keyword">return</span> provider<span class="token punctuation">;</span>        <span class="token keyword">return</span> AccessController<span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span>            <span class="token keyword">new</span> <span class="token class-name">PrivilegedAction</span><span class="token operator">&lt;</span>SelectorProvider<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">public</span> SelectorProvider <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">loadProviderFromProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token keyword">return</span> provider<span class="token punctuation">;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">loadProviderAsService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token keyword">return</span> provider<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//根据不同操作系统的实现来创建SelectorProvider</span>                        provider <span class="token operator">=</span> sun<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ch<span class="token punctuation">.</span>DefaultSelectorProvider<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">return</span> provider<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Windows实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> SelectorProvider <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">sun<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ch<span class="token punctuation">.</span>WindowsSelectorProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowsSelectorProvider</span> <span class="token keyword">extends</span> <span class="token class-name">SelectorProviderImpl</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> AbstractSelector <span class="token function">openSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WindowsSelectorImpl</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过阅读<code>WindowsSelectorImpl.c</code>源码发现它是通过<code>select</code>实现的</p><p>Unix系实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> SelectorProvider <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String osname <span class="token operator">=</span> AccessController        <span class="token punctuation">.</span><span class="token function">doPrivileged</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GetPropertyAction</span><span class="token punctuation">(</span><span class="token string">"os.name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>osname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"SunOS"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">createProvider</span><span class="token punctuation">(</span><span class="token string">"sun.nio.ch.DevPollSelectorProvider"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>osname<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Linux"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">createProvider</span><span class="token punctuation">(</span><span class="token string">"sun.nio.ch.EPollSelectorProvider"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">sun<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ch<span class="token punctuation">.</span>PollSelectorProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EPollSelectorProvider</span>    <span class="token keyword">extends</span> <span class="token class-name">SelectorProviderImpl</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> AbstractSelector <span class="token function">openSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">EPollSelectorImpl</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Channel <span class="token function">inheritedChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>        <span class="token keyword">return</span> InheritedChannel<span class="token punctuation">.</span><span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Linux是通过EPollSelectorImpl中调用EPollArrayWrapper类来通过系统函数<code>epoll</code>实现的<br>SunOS（solaris）则是调用DevPollArrayWrapper通过系统函数<code>poll</code>实现的</p><p>MacosX实现：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> SelectorProvider <span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">sun<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>ch<span class="token punctuation">.</span>KQueueSelectorProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>KQueue是另一种多路复用的方法，这里就不去看了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;总结&quot;&gt;1 总结&lt;/h1&gt;&lt;p&gt;把总结放前面今后好复习：&lt;/p&gt;
&lt;p&gt;这样看下来netty源码确实设计的挺复杂的，我阅读起来有点吃力，因为之前我阅读源码都是过程驱动的，这次直接从某一个类开始读，也不知道这个类在哪个地方用到了，下次就还是按netty运行的某块流程
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="源码分析" scheme="https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="Netty" scheme="https://www.codetool.top/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>程序员面试金典01.06-字符串压缩</title>
    <link href="https://www.codetool.top/article/%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E9%87%91%E5%85%B801-06-%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%8B%E7%BC%A9/"/>
    <id>https://www.codetool.top/article/程序员面试金典01-06-字符串压缩/</id>
    <published>2020-03-15T16:38:54.000Z</published>
    <updated>2020-03-15T16:41:30.493Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题（来源Leetcode）">1 原题（来源Leetcode）</h1><p>字符串压缩。利用字符重复出现的次数，编写一种方法，实现基本的字符串压缩功能。比如，字符串<code>aabcccccaaa</code>会变为<code>a2b1c5a3</code>。若“压缩”后的字符串没有变短，则返回原先的字符串。你可以假设字符串中只包含大小写英文字母（a至z）。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> “aabcccccaaa”<br><strong>输出:</strong> “a2b1c5a3”</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> “abbccd”<br><strong>输出:</strong> “abbccd”<br><strong>解释:</strong> “abbccd”压缩后为”a1b2c2d1”，比原字符串长度更长。</p></blockquote><p><strong>提示：</strong></p><ol><li>字符串长度在[0, 50000]范围内。</li></ol><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>重复的计数，用StringBuilder字符串拼接就行了。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">compressString</span><span class="token punctuation">(</span>String S<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> S<span class="token punctuation">;</span>        <span class="token keyword">char</span> last <span class="token operator">=</span> chars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> last<span class="token punctuation">)</span><span class="token punctuation">{</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>                count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                last <span class="token operator">=</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> S<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题（来源Leetcode）&quot;&gt;1 原题（来源Leetcode）&lt;/h1&gt;&lt;p&gt;字符串压缩。利用字符重复出现的次数，编写一种方法，实现基本的字符串压缩功能。比如，字符串&lt;code&gt;aabcccccaaa&lt;/code&gt;会变为&lt;code&gt;a2b1c5a3&lt;/code&gt;
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Netty心跳检测和基于Websocket协议的服务端开发</title>
    <link href="https://www.codetool.top/article/Netty%E5%BF%83%E8%B7%B3%E6%A3%80%E6%B5%8B%E5%92%8C%E5%9F%BA%E4%BA%8EWebsocket%E5%8D%8F%E8%AE%AE%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    <id>https://www.codetool.top/article/Netty心跳检测和基于Websocket协议的服务端开发/</id>
    <published>2020-03-15T14:47:59.000Z</published>
    <updated>2020-03-15T17:35:27.958Z</updated>
    
    <content type="html"><![CDATA[<h1 id="心跳检测">1 心跳检测</h1><p>在 TCP 长连接中，Netty服务端感知客户端（或是客户端感知服务端）断开连接的其中一个方法是handler的channelInactive。但可能会有一些情况，比如线路出现问题，让客户端和服务端虽然是连接状态但事实无法通信。这种情况就通过心跳检测对方是否有响应，心跳检测（心跳包的发送）需要编程人员在客户端和服务端层面实现，而Netty中提供了IdleStateHandler用于处理通道空闲的情况（在心跳机制启用的情况下就代表连接断开）。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//第一个参数没有读事件的时间，第二个参数没有写事件的时间</span><span class="token comment" spellcheck="true">//第三个参数既没有读事件也没有写事件的时间</span><span class="token comment" spellcheck="true">//设置为0代表不限制</span><span class="token comment" spellcheck="true">//满足任意一个则触发IdleStateEvent，可以在userEventTriggered中处理</span>pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">IdleStateHandler</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>handler中：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">userEventTriggered</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object evt<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>evt <span class="token keyword">instanceof</span> <span class="token class-name">IdleStateEvent</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        IdleStateEvent event <span class="token operator">=</span> <span class="token punctuation">(</span>IdleStateEvent<span class="token punctuation">)</span>evt<span class="token punctuation">;</span>        String eventType <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">state</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">case</span> ALL_IDLE<span class="token operator">:</span>                eventType <span class="token operator">=</span> <span class="token string">"读写空闲"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> READER_IDLE<span class="token operator">:</span>                eventType <span class="token operator">=</span> <span class="token string">"读空闲"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> WRITER_IDLE<span class="token operator">:</span>                eventType <span class="token operator">=</span> <span class="token string">"写空闲"</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"--超时时间--"</span><span class="token operator">+</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//服务器可以断开该channel连接</span>        <span class="token comment" spellcheck="true">//ctx.channel.close();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="基于Websocket的服务端开发">2 基于Websocket的服务端开发</h1><p>首先Websocket协议是基于Http协议的，它借用了HTTP协议来完成一部分握手，所以连接的请求看起来可能是这样的：</p><pre><code>GET /chat HTTP/1.1Host: server.example.comUpgrade: websocketConnection: UpgradeSec-WebSocket-Key: x3JJHMbDL1EzLkh9GBhXDw==Sec-WebSocket-Protocol: chat, superchatSec-WebSocket-Version: 13Origin: http://example.com</code></pre><p>所以首先要给pipeline加一个<code>HttpServerCodec</code>：</p><pre class=" language-java"><code class="language-java">pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"MyHttpServerCodec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">HttpServerCodec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后是Http相关的handler</p><pre class=" language-java"><code class="language-java">pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChunkedWriteHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpObjectAggregator</span><span class="token punctuation">(</span><span class="token number">8192</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后是websocket核心handler：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//将http协议升级为websocket协议，参数代表请求的uri</span>pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebSocketServerProtocolHandler</span><span class="token punctuation">(</span><span class="token string">"/ws"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>然后写一个处理消息的处理器：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextWebsocketFrameHandler</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleChannelInboundHandler</span><span class="token operator">&lt;</span>TextWebSocketFrame<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">channelRead0</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> TextWebSocketFrame msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务端收到消息："</span><span class="token operator">+</span>msg<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//回复消息</span>        ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextWebSocketFrame</span><span class="token punctuation">(</span><span class="token string">"服务器时间【"</span><span class="token operator">+</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"】:"</span><span class="token operator">+</span>msg<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//连接建立时，handlerAdded被调用</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerAdded</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"handlerAdded被调用"</span><span class="token operator">+</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asLongText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//连接断开时，handlerRemoved被调用</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerRemoved</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"handlerRemoved被调用"</span><span class="token operator">+</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asLongText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常发生"</span><span class="token operator">+</span>cause<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭连接</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个处理器中的<code>channelRead0</code>可以将客户端发来的消息加上服务器时间返回给客户端</p><p>服务器启动类总体看起来是这样的：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebsocketServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        EventLoopGroup bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EventLoopGroup workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            ServerBootstrap serverBootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            serverBootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span>workerGroup<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioServerSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_BACKLOG<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                            ChannelPipeline pipeline <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpServerCodec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChunkedWriteHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpObjectAggregator</span><span class="token punctuation">(</span><span class="token number">8192</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebSocketServerProtocolHandler</span><span class="token punctuation">(</span><span class="token string">"/ws"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextWebsocketFrameHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------服务器正在启动---------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ChannelFuture future <span class="token operator">=</span> serverBootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            future<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            bossGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            workerGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">7000</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">WebsocketServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>编写网页进行测试：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">onsubmit</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>return false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>发送消息<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>send(this.form.message.value)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>responseText<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>清空内容<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>document.getElementById(<span class="token punctuation">'</span>responseText<span class="token punctuation">'</span>).value<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">let</span> socket<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>WebSocket<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> rt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"responseText"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">"ws://localhost:7000/ws"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//收到消息</span>        socket<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>            rt<span class="token punctuation">.</span>value <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"\n"</span> <span class="token operator">+</span> ev<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//连接开启</span>        socket<span class="token punctuation">.</span>onopen <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>            rt<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"--------连接开启了---------"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        socket<span class="token punctuation">.</span>onclose <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>ev<span class="token punctuation">)</span> <span class="token punctuation">{</span>            rt<span class="token punctuation">.</span>value <span class="token operator">+</span><span class="token operator">=</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"-------连接关闭了-------"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"当前浏览器不支持websocket"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//发送消息</span>    <span class="token keyword">function</span> <span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>socket<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//先判断socket是否创建好</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span>readyState <span class="token operator">==</span> WebSocket<span class="token punctuation">.</span>OPEN<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//发送消息</span>            socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"连接没有开启"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>测试：</p><p><img src="https://api.codetool.top/img/15842934886547.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;心跳检测&quot;&gt;1 心跳检测&lt;/h1&gt;&lt;p&gt;在 TCP 长连接中，Netty服务端感知客户端（或是客户端感知服务端）断开连接的其中一个方法是handler的channelInactive。但可能会有一些情况，比如线路出现问题，让客户端和服务端虽然是连接状态但事实无法通
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Netty" scheme="https://www.codetool.top/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>Netty基于Http协议的服务端开发</title>
    <link href="https://www.codetool.top/article/Netty%E5%9F%BA%E4%BA%8EHttp%E5%8D%8F%E8%AE%AE%E7%9A%84%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    <id>https://www.codetool.top/article/Netty基于Http协议的服务端开发/</id>
    <published>2020-03-15T14:14:59.000Z</published>
    <updated>2020-03-15T16:28:11.783Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单案例">1 简单案例</h1><p>先照常写一个Handler，注意收到的是HttpObject（实际上是一个DefaultHttpRequest）类型。它附带了客户端的请求信息（uri、请求method、请求头）</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestHttpServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleChannelInboundHandler</span><span class="token operator">&lt;</span>HttpObject<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//读取事件</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">channelRead0</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> HttpObject msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"msg 类型="</span><span class="token operator">+</span>msg<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端地址"</span> <span class="token operator">+</span> ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//构建HttpResponse</span>            ByteBuf content <span class="token operator">=</span> Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"hello,我是服务器"</span><span class="token punctuation">,</span> CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>            DefaultFullHttpResponse response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultFullHttpResponse</span><span class="token punctuation">(</span>HttpVersion<span class="token punctuation">.</span>HTTP_1_1<span class="token punctuation">,</span> HttpResponseStatus<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置响应头</span>            response<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>HttpHeaderNames<span class="token punctuation">.</span>CONTENT_TYPE<span class="token punctuation">,</span><span class="token string">"text/plain; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>HttpHeaderNames<span class="token punctuation">.</span>CONTENT_LENGTH<span class="token punctuation">,</span>content<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//返回response</span>            ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在ChannelInitializer这里，为channel的pipeline添加上面写的handler。注意在前面添加一个HttpServerCodec，是Netty提供的基于HTTP的编解码器。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestServerInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//向管道加入处理器</span>        <span class="token comment" spellcheck="true">//得到管道</span>        ChannelPipeline pipeline <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//加入netty提供的httpServerCodec （coder+decoder）</span>        <span class="token comment" spellcheck="true">//基于HTTP的编解码器</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"MyHttpServerCodec"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">HttpServerCodec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token string">"MyTestHttpServerHandler"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">TestHttpServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>启动服务端的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestHttpServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//配置服务器的NIO线程组</span>        EventLoopGroup bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EventLoopGroup workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            ServerBootstrap serverBootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            serverBootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span>workerGroup<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioServerSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_BACKLOG<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TestServerInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------服务器正在启动---------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ChannelFuture future <span class="token operator">=</span> serverBootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//等待服务端监听端口关闭</span>            future<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            bossGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            workerGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">TestHttpServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样一个简单案例就实现了，只要客户端向该服务端的主机、端口发起HTTP请求，就会收到对应的响应，而由于没有判断请求方法、uri，无论什么请求都会收到一样的响应。</p><h1 id="对请求资源（uri）进行过滤">2 对请求资源（uri）进行过滤</h1><p>浏览器在对某网站发起get请求的时候，通常还会发起对该网站<code>/favicon.ico</code>的请求，如果我们不想对这个请求做出404回应，可以这样写：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestHttpServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleChannelInboundHandler</span><span class="token operator">&lt;</span>HttpObject<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//读取事件</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">channelRead0</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> HttpObject msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>msg <span class="token keyword">instanceof</span> <span class="token class-name">HttpRequest</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"msg 类型="</span><span class="token operator">+</span>msg<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端地址"</span> <span class="token operator">+</span> ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取到请求URI</span>            HttpRequest httpRequest <span class="token operator">=</span> <span class="token punctuation">(</span>HttpRequest<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>            URI uri <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URI</span><span class="token punctuation">(</span>httpRequest<span class="token punctuation">.</span><span class="token function">uri</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"/favicon.ico"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>uri<span class="token punctuation">.</span><span class="token function">getPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请求了图标，返回404"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ByteBuf error <span class="token operator">=</span> Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"该资源不存在"</span><span class="token punctuation">,</span> CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>                DefaultFullHttpResponse response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultFullHttpResponse</span><span class="token punctuation">(</span>HttpVersion<span class="token punctuation">.</span>HTTP_1_1<span class="token punctuation">,</span> HttpResponseStatus<span class="token punctuation">.</span>NOT_FOUND<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span>                response<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>HttpHeaderNames<span class="token punctuation">.</span>CONTENT_TYPE<span class="token punctuation">,</span><span class="token string">"text/plain; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                response<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>HttpHeaderNames<span class="token punctuation">.</span>CONTENT_LENGTH<span class="token punctuation">,</span>error<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//构建HttpResponse</span>            ByteBuf content <span class="token operator">=</span> Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"hello,我是服务器"</span><span class="token punctuation">,</span> CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>            DefaultFullHttpResponse response <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultFullHttpResponse</span><span class="token punctuation">(</span>HttpVersion<span class="token punctuation">.</span>HTTP_1_1<span class="token punctuation">,</span> HttpResponseStatus<span class="token punctuation">.</span>OK<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>HttpHeaderNames<span class="token punctuation">.</span>CONTENT_TYPE<span class="token punctuation">,</span><span class="token string">"text/plain; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            response<span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>HttpHeaderNames<span class="token punctuation">.</span>CONTENT_LENGTH<span class="token punctuation">,</span>content<span class="token punctuation">.</span><span class="token function">readableBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//返回response</span>            ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里通过HttpRequest来获取了客户端请求的uri，除了uri外，通过HttpRequest还可以获取：</p><ul><li><code>httpRequest.method()</code>：获取请求方法，这些方法在HttpMethod中被枚举</li><li><code>httpRequest.protocolVersion()</code>：获取协议版本，是<code>HttpVersion.HTTP_1_0</code>或<code>HttpVersion.HTTP_1_1</code></li><li><code>httpRequest.headers()</code>：请求头，可读可写，使用get/set方法</li></ul><h1 id="其他handler">3 其他handler</h1><p>在简单案例中只用了一个HttpServerCodec作为http编解码器，还有一些自带的handler可以使用：</p><ul><li><code>HttpObjectAggregator</code>，对于POST请求存在请求体，HTTP数据在传输过程中是分段传输的，HttpObjectAggregator可以将多个段聚合。</li><li><code>ChunkedWriteHandler</code>，在简单案例中，我们用了响应头的<code>CONTENT_LENGTH</code>来指定响应体的长度，而有的时候无法确定信息大小，就可以使用Chunked编码传输（分块）。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简单案例&quot;&gt;1 简单案例&lt;/h1&gt;&lt;p&gt;先照常写一个Handler，注意收到的是HttpObject（实际上是一个DefaultHttpRequest）类型。它附带了客户端的请求信息（uri、请求method、请求头）&lt;/p&gt;
&lt;pre class=&quot; langu
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Netty" scheme="https://www.codetool.top/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>Netty解决TCP粘包拆包-四种自带解码器</title>
    <link href="https://www.codetool.top/article/Netty%E8%A7%A3%E5%86%B3TCP%E7%B2%98%E5%8C%85%E6%8B%86%E5%8C%85-%E5%9B%9B%E7%A7%8D%E8%87%AA%E5%B8%A6%E8%A7%A3%E7%A0%81%E5%99%A8/"/>
    <id>https://www.codetool.top/article/Netty解决TCP粘包拆包-四种自带解码器/</id>
    <published>2020-03-15T10:09:30.000Z</published>
    <updated>2020-03-15T10:13:16.274Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考资源：</p><p><a href="https://www.cnblogs.com/crazymakercircle/p/10294745.html" target="_blank" rel="noopener">LengthFieldBasedFrameDecoder 秒懂 - 疯狂创客圈 - 博客园</a></p><p>在TCP协议中，一个完整的包可能会被拆分为多个包进行发送，也有可能把多个小的包封装成一个大的数据包进行发送，这就是所谓的TCP粘包和拆包问题。</p><h1 id="粘包-拆包发生的原因">1 粘包/拆包发生的原因</h1><ol><li>应用程序write写入的字节大小大于套接口发送缓冲区大小</li><li>进行MSS大小的TCP分段（最大报文长度）</li><li>以太网帧的payload大于MTU进行IP分片（链路层的最大传输单元）</li></ol><h2 id="发生粘包问题的时间服务器案例">1.1 发生粘包问题的时间服务器案例</h2><h3 id="服务端">1.1.1 服务端</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//配置服务器的NIO线程组</span>        EventLoopGroup bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EventLoopGroup workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            ServerBootstrap serverBootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            serverBootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span>workerGroup<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioServerSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_BACKLOG<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChildChannelHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//绑定端口，同步等待成功</span>            ChannelFuture future <span class="token operator">=</span> serverBootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//等待服务端监听端口关闭</span>            future<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            bossGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            workerGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ChildChannelHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NettyServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">NettyServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">8080</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> counter<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ByteBuf buf <span class="token operator">=</span> <span class="token punctuation">(</span>ByteBuf<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>        String body <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The time server receive order: "</span><span class="token operator">+</span> body <span class="token operator">+</span> <span class="token string">"; the counter is: "</span> <span class="token operator">+</span> <span class="token operator">++</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//如果收到的请求是QUERY TIME ORDER就返回当前时间</span>        String currentTime <span class="token operator">=</span> <span class="token string">"QUERY TIME ORDER"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token operator">?</span><span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span>                System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">"BAD ORDER"</span><span class="token punctuation">;</span>        currentTime <span class="token operator">=</span> currentTime <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ByteBuf resp <span class="token operator">=</span> Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="客户端">1.1.2 客户端</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">,</span>String host<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//配置客户端NIO线程组</span>        EventLoopGroup group <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Bootstrap bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>TCP_NODELAY<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NettyClientHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ChannelFuture future <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            future<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            group<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">NettyClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyClientHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger logger <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>NettyClientHandler<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> counter<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> req<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">NettyClientHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        req <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"QUERY TIME ORDER"</span> <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelActive</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ByteBuf message <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//连续发送一百条QUERY TIME ORDER消息</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            message <span class="token operator">=</span> Unpooled<span class="token punctuation">.</span><span class="token function">buffer</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            message<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ByteBuf buf <span class="token operator">=</span> <span class="token punctuation">(</span>ByteBuf<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>        String body <span class="token operator">=</span> buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Now is："</span><span class="token operator">+</span>body<span class="token operator">+</span><span class="token string">"; the counter is: "</span><span class="token operator">+</span> <span class="token operator">++</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        logger<span class="token punctuation">.</span><span class="token function">warning</span><span class="token punctuation">(</span><span class="token string">"Unexpected exception from downstream: "</span><span class="token operator">+</span>cause<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>分别运行服务端和客户端，预期结果应该是服务端响应100次时间，然而服务端打印：</p><pre><code>The time server receive order: QUERY TIME ORDERQUERY TIME ORDERQUERY TIME ORDERQUERY TIME ORDERQUERY TIME ORDERQUERY TIME ORDER---省略部分，此处共57条QUERY TIME ORDER----QUERY TIME ORDERQUERY TIME ORDER; the counter is: 1The time server receive order: QUERY TIME ORDER---省略部分，此处共43条QUERY TIME ORDER----QUERY TIME ORDERQUERY TIME ORDER; the counter is: 2</code></pre><p>可见发生了粘包问题，自然客户端也没有收到正确的响应：</p><pre><code>Now is：BAD ORDERBAD ORDER; the counter is: 1</code></pre><h1 id="解决策略">2 解决策略</h1><ol><li>消息定长，例如每个报文的大小为固定长度200字节，如果不够，空位补空格;</li><li>在包尾增加回车换行符进行分割，例如FTP协议;</li><li>将消息分为消息头和消息体，消息头中包含表示消息总长度(或者消息体长度)的字段，通常设计思路为消息头的第一个字段使用int32来表示消息的总长度;</li><li>更复杂的应用层协议。</li></ol><h2 id="使用LineBasedFrameDecoder解决TCP粘包问题">2.1 使用LineBasedFrameDecoder解决TCP粘包问题</h2><p>为了解决TCP粘包/拆包导致的半包读写问题，Netty 默认提供了多种编解码器用于处理半包，LineBasedFrameDecoder是其中的一种，通过换行符来分包。</p><h2 id="使用LineBasedFrameDecoder改写后的案例">2.2 使用LineBasedFrameDecoder改写后的案例</h2><p>需要改写的有四个地方：</p><p>在NettyServer中pipeline添加处理器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ChildChannelHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LineBasedFrameDecoder</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NettyServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在NettyServerHandler中把消息当字符串处理</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//转String</span>    String body <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The time server receive order: "</span><span class="token operator">+</span> body <span class="token operator">+</span> <span class="token string">"; the counter is: "</span> <span class="token operator">+</span> <span class="token operator">++</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span>    String currentTime <span class="token operator">=</span> <span class="token string">"QUERY TIME ORDER"</span><span class="token punctuation">.</span><span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token operator">?</span><span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span>            System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token string">"BAD ORDER"</span><span class="token punctuation">;</span>    currentTime <span class="token operator">=</span> currentTime <span class="token operator">+</span> System<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"line.separator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ByteBuf resp <span class="token operator">=</span> Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span>currentTime<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在NettyClient中pipeline添加处理器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LineBasedFrameDecoder</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NettyClientHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在NettyClientHandler中把消息当字符串处理</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    String body <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Now is："</span><span class="token operator">+</span>body<span class="token operator">+</span><span class="token string">"; the counter is: "</span><span class="token operator">+</span> <span class="token operator">++</span>counter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>再次分别运行服务端、客户端，发现问题解决：</p><pre><code>The time server receive order: QUERY TIME ORDER; the counter is: 1The time server receive order: QUERY TIME ORDER; the counter is: 2The time server receive order: QUERY TIME ORDER; the counter is: 3-----------------------省略---------------------------The time server receive order: QUERY TIME ORDER; the counter is: 98The time server receive order: QUERY TIME ORDER; the counter is: 99The time server receive order: QUERY TIME ORDER; the counter is: 100</code></pre><pre><code>Now is：Sun Mar 15 16:39:58 CST 2020; the counter is: 1Now is：Sun Mar 15 16:39:58 CST 2020; the counter is: 2Now is：Sun Mar 15 16:39:58 CST 2020; the counter is: 3-----------------------省略-------------------------Now is：Sun Mar 15 16:39:58 CST 2020; the counter is: 98Now is：Sun Mar 15 16:39:58 CST 2020; the counter is: 99Now is：Sun Mar 15 16:39:58 CST 2020; the counter is: 100</code></pre><h2 id="LineBasedFrameDecoder工作原理">2.3 LineBasedFrameDecoder工作原理</h2><p><code>LineBasedFrameDecoder</code>的工作原理是它<strong>依次遍历ByteBuf中的可读字节，判断看是否有“<code>\n</code>”或者“<code>\r\n</code>”</strong>， 如果有，就以此位置为结束位置，从可读索引到结束位置区间的字节就组成了一行。<strong>它是以换行符为结束标志的解码器</strong>，支持携带结束符或者不携带结束符两种解码方式，同时支持配置单行的最大长度。如果连续读取到最大长度后仍然没有发现换行符，就会抛出异常，同时忽略掉之前读到的异常码流。</p><p><strong>StringDecoder的功能非常简单，就是将接收到的对象转换成字符串，然后继续调用后面的Handler。 <code>LineBasedFrameDecoder + StringDecoder</code> 组合就是按行切换的文本解码器，它被设计用来支持TCP的粘包和拆包。</strong></p><p>如果发送的消息不是以换行符结束的，或者没有回车换行符，希望根据消息头中的长度字段来分包，Netty提供了多种支持TCP粘包/拆包的解码器，用来满足用户的不同诉求。</p><h2 id="其他解码器">2.4 其他解码器</h2><h3 id="DelimiterBasedFrameDecoder">2.4.1 DelimiterBasedFrameDecoder</h3><p>这是一个根据自定义分隔符分包的解码器</p><p>使用：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ChildChannelHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ByteBuf delimiter <span class="token operator">=</span> Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"$_"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//第一个参数代表单条消息的最大长度，当达到该长度仍没有查到分隔符抛出异常</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DelimiterBasedFrameDecoder</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span>delimiter<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NettyServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>发消息的时候也要在消息末尾增加”<code>$_</code>“，和LineBasedFrameDecoder加换行符差不多的做法。</p><h3 id="FixedLengthFrameDecoder">2.4.2 FixedLengthFrameDecoder</h3><p>这是一个按固定长度分包的解码器</p><p>使用：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ChildChannelHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FixedLengthFrameDecoder</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NettyServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>无论一次接收到多少数据报，它都会按照构造函数中设置的固定长度进行解码。适用于数据长度固定的情况，否则在handler中手动填充长度也行。</p><h3 id="LengthFieldBasedFrameDecoder">2.4.3 LengthFieldBasedFrameDecoder</h3><p>这个就是在在数据包中，加了一个长度字段（长度域），保存上层包的长度。解码的时候，会按照这个长度，进行上层ByteBuf应用包的提取。</p><p>使用：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">ChildChannelHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LengthFieldBasedFrameDecoder</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NettyServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其中五个参数：</p><p>（1）<code>maxFrameLength</code> - 发送的数据包最大长度；</p><p>（2）<code>lengthFieldOffset</code> - 长度域偏移量，指的是长度域位于整个数据包字节数组中的下标；</p><p>（3）<code>lengthFieldLength</code> - 长度域的自己的字节数长度。</p><p>（4）<code>lengthAdjustment</code> – 长度域的偏移量矫正。 如果长度域的值，除了包含有效数据域的长度外，还包含了其他域（如长度域自身）长度，那么，就需要进行矫正。矫正的值为：包长 - 长度域的值 – 长度域偏移 – 长度域长。</p><p>（5）<code>initialBytesToStrip</code> – 丢弃的起始字节数。丢弃处于有效数据前面的字节数量。比如前面有4个节点的长度域，则它的值为4。</p><p><code>LengthFieldBasedFrameDecoder(1024,0,4,0,4)</code>的意思就是，数据包最大长度为1024，长度域占首部的四个字节，在读数据的时候去掉首部四个字节（即长度域）</p><p>在使用的时候handler写ByteBuf数据的时候应该在首部增添一个四个字节的长度域，代表数据长度。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文参考资源：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/crazymakercircle/p/10294745.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LengthFieldBasedFrameDec
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Netty" scheme="https://www.codetool.top/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>Netty使用入门案例</title>
    <link href="https://www.codetool.top/article/Netty%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/"/>
    <id>https://www.codetool.top/article/Netty使用入门案例/</id>
    <published>2020-03-15T07:42:54.000Z</published>
    <updated>2020-03-15T07:43:28.770Z</updated>
    
    <content type="html"><![CDATA[<p>maven依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.netty<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>netty-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.1.42.Final<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h1 id="服务端">1 服务端</h1><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//写服务端的pipeline管道处理器，如果worker group中的NioEventLoop监听到了channel的read/write事件就会触发</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyServerHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token comment" spellcheck="true">/**     * 读取数据事件，可以读取客户端发送的消息     * ChannelHandlerContext上下文对象，含有管道pipeline，通道channel，地址     * Object 客户端发送的数据     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"server ctx = "</span><span class="token operator">+</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将msg转成一个ByteBuf</span>        ByteBuf buf <span class="token operator">=</span> <span class="token punctuation">(</span>ByteBuf<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端发送消息是："</span><span class="token operator">+</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端地址："</span><span class="token operator">+</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//数据读取完毕</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelReadComplete</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//write+flush，将数据写入到缓存，并刷新</span>        ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"hello，客户端~"</span><span class="token punctuation">,</span>CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//处理异常，一般是要关闭通道</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建BossGroup和WorkerGroup</span>        <span class="token comment" spellcheck="true">//1. bossGroup只处理连接请求</span>        <span class="token comment" spellcheck="true">//2. workerGroup处理业务请求</span>        <span class="token comment" spellcheck="true">//两个中都有无限循环的NioEventLoop</span>        NioEventLoopGroup bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        NioEventLoopGroup workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建服务器端的启动类</span>            ServerBootstrap bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//使用链式编程配置</span>            bootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span>workerGroup<span class="token punctuation">)</span><span class="token comment" spellcheck="true">//设置两个线程组</span>                    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioServerSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//使用NioServerSocketChannel作为服务器的通道实现</span>                    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_BACKLOG<span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//设置线程队列得到连接个数</span>                    <span class="token punctuation">.</span><span class="token function">childOption</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_KEEPALIVE<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//设置保持活动连接状态</span>                    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//创建一个通道初始化对象</span>                        <span class="token comment" spellcheck="true">//给pipeline设置处理器</span>                        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NettyServerHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//给workerGroup的EventLoop对应的管道设置处理器</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------服务器 is ready-----------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//sync同步阻塞等待绑定完成，返回一个ChannelFuture用于异步操作的通知回调</span>            <span class="token comment" spellcheck="true">//启动服务器</span>            ChannelFuture cf <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token number">6668</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//对关闭通道进行监听</span>            cf<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//关闭循环线程组</span>            bossGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            workerGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="客户端">2 客户端</h1><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyClientHandler</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInboundHandlerAdapter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//通道就绪事件</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelActive</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"client "</span> <span class="token operator">+</span> ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span>Unpooled<span class="token punctuation">.</span><span class="token function">copiedBuffer</span><span class="token punctuation">(</span><span class="token string">"hello,server"</span><span class="token punctuation">,</span> CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//当通道有读取事件时，会触发</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        ByteBuf buf <span class="token operator">=</span> <span class="token punctuation">(</span>ByteBuf<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器回复的消息："</span><span class="token operator">+</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"服务器的地址："</span><span class="token operator">+</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        cause<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NettyClient</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//客户端只需要一个事件循环组</span>        NioEventLoopGroup eventExecutors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//创建客户端的启动对象</span>            Bootstrap bootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//设置相关参数</span>            bootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>eventExecutors<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                            ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NettyClientHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//加入处理器</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------客户端 ok------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//启动客户端去连接服务器</span>            ChannelFuture channelFuture <span class="token operator">=</span> bootstrap<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6668</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//给关闭通道进行监听</span>            channelFuture<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            eventExecutors<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="异步模型">3 异步模型</h1><p>异步的概念和同步相对。当一个异步过程调用发出后，调用者不能立刻得到结果。实际处理这个调用的组件在完成后，通过状态、通知和回调来通知调用者。</p><p>Netty 中的 I/O 操作是异步的，包括 Bind、Write、Connect 等操作会简单的返回一个 ChannelFuture。</p><p><code>public interface ChannelFuture extends Future&lt;Void&gt;</code></p><p>调用者并不能立刻获得结果，而是通过 Future-Listener 机制，用户可以方便的主动获取或者通过通知机制获得 IO 操作结果</p><p><img src="https://api.codetool.top/img/1584256994325.png" alt></p><h1 id="异步任务的支持">4 异步任务的支持</h1><h2 id="TaskQueue">4.1 TaskQueue</h2><p>Handler中可以通过使用NioEventLoopGroup中的TaskQueue来实现异步任务，解决Handler中可能会出现的长时间阻塞问题。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"handling..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"server ctx = "</span><span class="token operator">+</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//将msg转成一个ByteBuf</span>                ByteBuf buf <span class="token operator">=</span> <span class="token punctuation">(</span>ByteBuf<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端发送消息是："</span><span class="token operator">+</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端地址："</span><span class="token operator">+</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="ScheduleTaskQueue">4.2 ScheduleTaskQueue</h2><p>可以使用ScheduleTaskQueue定义一个定时任务</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">channelRead</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Object msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 在指定延迟后执行任务</span>    ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eventLoop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">schedule</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是一个定时任务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"server ctx = "</span><span class="token operator">+</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//将msg转成一个ByteBuf</span>    ByteBuf buf <span class="token operator">=</span> <span class="token punctuation">(</span>ByteBuf<span class="token punctuation">)</span> msg<span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端发送消息是："</span><span class="token operator">+</span>buf<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>CharsetUtil<span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户端地址："</span><span class="token operator">+</span>ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remoteAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;maven依赖：&lt;/p&gt;
&lt;pre class=&quot; language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token pun
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Netty" scheme="https://www.codetool.top/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>leetcode695-岛屿的最大面积</title>
    <link href="https://www.codetool.top/article/leetcode695-%E5%B2%9B%E5%B1%BF%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%A2%E7%A7%AF/"/>
    <id>https://www.codetool.top/article/leetcode695-岛屿的最大面积/</id>
    <published>2020-03-14T17:12:35.000Z</published>
    <updated>2020-03-14T17:52:49.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定一个包含了一些 0 和 1的非空二维数组 <code>grid</code> , 一个 <strong>岛屿</strong> 是由四个方向 (水平或垂直) 的 1 (代表土地) 构成的组合。你可以假设二维矩阵的四个边缘都被水包围着。</p><p>找到给定的二维数组中最大的岛屿面积。(如果没有岛屿，则返回面积为0。)</p><p><strong>示例 1:</strong></p><pre><code>[[0,0,1,0,0,0,0,1,0,0,0,0,0], [0,0,0,0,0,0,0,1,1,1,0,0,0], [0,1,1,0,1,0,0,0,0,0,0,0,0], [0,1,0,0,1,1,0,0,1,0,1,0,0], [0,1,0,0,1,1,0,0,1,1,1,0,0], [0,0,0,0,0,0,0,0,0,0,1,0,0], [0,0,0,0,0,0,0,1,1,1,0,0,0], [0,0,0,0,0,0,0,1,1,0,0,0,0]]</code></pre><p>对于上面这个给定矩阵应返回 <code>6</code>。注意答案不应该是11，因为岛屿只能包含水平或垂直的四个方向的‘1’。</p><p><strong>示例 2:</strong></p><pre><code>[[0,0,0,0,0,0,0,0]]</code></pre><p>对于上面这个给定的矩阵, 返回 <code>0</code>。</p><p><strong>注意:</strong> 给定的矩阵<code>grid</code> 的长度和宽度都不超过 50。</p><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>对于每个点dfs搜索四周为1的点，搜索到之后把该点标记为0，防止重复搜索。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxAreaOfIsland</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>                     ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>         <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> i <span class="token operator">>=</span> grid<span class="token punctuation">.</span>length <span class="token operator">||</span> j <span class="token operator">>=</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">||</span> grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>         grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        num <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span>        num <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span>        num <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span>        num <span class="token operator">+=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> grid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定一个包含了一些 0 和 1的非空二维数组 &lt;code&gt;grid&lt;/code&gt; , 一个 &lt;strong&gt;岛屿&lt;/strong&gt; 是由四个方向 (水平或垂直) 的 1 (代表土地) 构成的组合。你可以假设二维矩阵的四个边缘都被水包
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="DFS" scheme="https://www.codetool.top/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>Netty概述（线程模型）</title>
    <link href="https://www.codetool.top/article/Netty%E6%A6%82%E8%BF%B0%EF%BC%88%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%EF%BC%89/"/>
    <id>https://www.codetool.top/article/Netty概述（线程模型）/</id>
    <published>2020-03-14T14:26:37.000Z</published>
    <updated>2020-03-14T14:27:25.545Z</updated>
    
    <content type="html"><![CDATA[<p>netty官网： <a href="https://netty.io/" target="_blank" rel="noopener">https://netty.io/</a>  </p><h1 id="原生NIO存在的问题">1 原生NIO存在的问题</h1><ol><li>NIO 的类库和 API 繁杂，使用麻烦：需要熟练掌握 Selector、ServerSocketChannel、SocketChannel、ByteBuffer等。</li><li>需要具备其他的额外技能：要熟悉 Java 多线程编程，因为 NIO 编程涉及到 Reactor 模式，你必须对多线程和网络编程非常熟悉，才能编写出高质量的 NIO 程序。</li><li>开发工作量和难度都非常大：例如客户端面临断连重连、网络闪断、半包读写、失败缓存、网络拥塞和异常流的处理等等。</li><li>JDK NIO 的 Bug：例如臭名昭著的 Epoll Bug，它会导致 Selector 空轮询，最终导致 CPU 100%。直到 JDK 1.7 版本该问题仍旧存在，没有被根本解决。</li></ol><h1 id="Netty特点">2 Netty特点</h1><ol><li>Netty 是由 JBOSS 提供的一个 Java 开源框架，现为 Github上的独立项目。</li><li>Netty 是一个异步的、基于事件驱动的网络应用框架，用以快速开发高性能、高可靠性的网络 IO 程序。</li><li>Netty主要针对在TCP协议下，面向Clients端的高并发应用，或者Peer-to-Peer场景下的大量数据持续传输的应用。</li><li>Netty本质是一个NIO框架，适用于服务器通讯相关的多种应用场景</li></ol><h1 id="Netty线程模型">3 Netty线程模型</h1><p>目前存在的线程模型有：</p><ul><li>传统阻塞 I/O 服务模型 （即一个线程处理一个IO）</li><li>Reactor 模式</li></ul><p>Reactor模式又称反应器模式、分发者模式(Dispatcher) 、通知者模式(notifier)</p><p><img src="https://api.codetool.top/img/15841892584472.png" alt></p><p>Reactor 在一个单独的线程中运行，负责监听和分发事件，分发给适当的处理程序来对 IO 事件做出反应。 它就像公司的电话接线员，它接听来自客户的电话并将线路转移到适当的联系人。</p><p>根据 Reactor 的数量和处理资源池线程的数量不同，有 3 种典型的实现</p><ul><li>单 Reactor 单线程</li><li>单 Reactor 多线程</li><li>主从 Reactor 多线程 </li></ul><p><img src="https://api.codetool.top/img/15841895862658.png" alt="单Reactor单线程"></p><p><img src="https://api.codetool.top/img/15841904345420.png" alt="单Reactor多线程"></p><p><img src="https://api.codetool.top/img/15841907466063.png" alt="主从Reactor多线程"></p><p>mainReactor负责监听server socket，accept新连接，并将建立的socket分派给subReactor。subReactor负责多路分离已连接的socket，读写网 络数据，对业务处理功能，其扔给worker线程池完成。通常，subReactor个数上可与CPU个数等同</p><p>Netty 主要基于主从 Reactor 多线程模型，做了一定的改进，其中主从 Reactor 多线程模型有多个 Reactor</p><h1 id="netty架构">4 netty架构</h1><p><img src="https://api.codetool.top/img/1584193734966.png" alt></p><ol><li>Netty抽象出<strong>两组线程池 <code>BossGroup</code> 专门负责接收客户端的连接, <code>WorkerGroup</code> 专门负责网络的读写。</strong></li><li>BossGroup 和 WorkerGroup 类型都是 NioEventLoopGroup</li><li>NioEventLoopGroup 相当于一个事件循环组, 这个组中含有多个事件循环 ，每一个事件循环是 NioEventLoop</li><li>NioEventLoop 表示一个不断循环的执行处理任务的线程， 每个NioEventLoop 都有一个selector , 用于监听绑定在其上的socket的网络通讯</li><li>NioEventLoopGroup 可以有多个线程, 即可以含有多个NioEventLoop</li><li>每个Boss NioEventLoop 循环执行的步骤有3步<ol><li><code>select</code>: 轮询accept 事件</li><li><code>processSelectedKeys</code>: 处理accept 事件 , 与client建立连接 , 生成NioScocketChannel , 并将其注册到某个worker NIOEventLoop 上的 selector </li><li><code>runAllTasks</code>: 处理任务队列的任务 </li></ol></li><li>每个 Worker NIOEventLoop 循环执行的步骤<ol><li><code>select</code>: 轮询read, write事件</li><li><code>processSelectedKeys</code>: 处理i/o事件， 即read , write 事件，在对应NioSocketChannel处理</li><li><code>runAllTasks</code>: 处理任务队列的任务，即 runAllTasks</li></ol></li><li>每个Worker NIOEventLoop 处理业务时，会使用pipeline(管道), pipeline 中包含了 channel , 即通过pipeline 可以获取到对应通道, 管道中维护了很多的处理器</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;netty官网： &lt;a href=&quot;https://netty.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://netty.io/&lt;/a&gt;  &lt;/p&gt;
&lt;h1 id=&quot;原生NIO存在的问题&quot;&gt;1 原生NIO存在的问题&lt;/h1&gt;&lt;ol&gt;
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Netty" scheme="https://www.codetool.top/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>NIO零拷贝与其系统函数调用</title>
    <link href="https://www.codetool.top/article/NIO%E9%9B%B6%E6%8B%B7%E8%B4%9D%E4%B8%8E%E5%85%B6%E7%B3%BB%E7%BB%9F%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/"/>
    <id>https://www.codetool.top/article/NIO零拷贝与其系统函数调用/</id>
    <published>2020-03-14T11:37:17.000Z</published>
    <updated>2020-03-14T11:44:09.572Z</updated>
    
    <content type="html"><![CDATA[<p>本文参考资源：</p><p><a href="https://blog.csdn.net/u013096088/article/details/79122671" target="_blank" rel="noopener">Java NIO学习笔记四（零拷贝详解）_Java_拿笔小星的博客-CSDN博客</a></p><h1 id="关于Buffer和Channel的注意事项和细节">1 关于Buffer和Channel的注意事项和细节</h1><ul><li>ByteBuffer不止可以存取byte类型的数据，它支持类型化的put和get, put放入的是什么数据类型，get就应该使用相应的数据类型来取出（按照顺序），否则可能有 BufferUnderflowException 异常。</li><li><code>buffer.asReadOnlyBuffer()</code>可以从一个buffer获取一个只读buffer。</li><li>NIO 中提供了<code>DirectBuffer</code>、<code>MappedByteBuffer</code> 以提高IO效率。（使用堆外内存，映射操作系统的内存），使用<code>FileChannel::map</code>返回一个MappedByteBuffer</li></ul><p><img src="https://api.codetool.top/img/1584169757224.png" alt></p><ul><li>NIO 还支持通过多个Buffer (即 Buffer 数组) 完成读写操作，即 Scattering 和 Gathering，依次写入和依次读入。</li></ul><h1 id="零拷贝">2 零拷贝</h1><p>零拷贝从操作系统角度，是指<strong>CPU不执行拷贝数据从一个存储区域到另一个存储区域的任务</strong>，这通常用于通过网络传输一个文件时以减少CPU周期和内存带宽。</p><h2 id="传统IO">2.1 传统IO</h2><p>在Java中，我们可以通过InputStream从源数据中读取数据流到一个缓冲区里，然后再将它们输入到OutputStream里。我们知道，这种IO方式传输效率是比较低的。那么，当使用上面的代码时操作系统会发生什么情况：</p><p><img src="https://api.codetool.top/img/15841726118751.png" alt="传统IO"></p><ol><li>JVM发出<code>read()</code>系统调用。</li><li>OS<strong>上下文切换到内核模式</strong>（第一次上下文切换）并将数据读取到<strong>内核空间缓冲区</strong>。(第一次拷贝：hardware —-&gt; kernel buffer）这里的数据读取是<code>DMA copy</code>，是必经步骤，不能优化掉。</li><li>OS<strong>内核然后将数据复制到用户空间缓冲区</strong>(第二次拷贝: kernel buffer ——&gt; user buffer)，然后read系统调用返回。而<strong>系统调用的返回又会导致一次内核空间到用户空间的上下文切换</strong>(第二次上下文切换)。</li><li>JVM处理代码逻辑并发送<code>write()</code>系统调用。</li><li>OS<strong>上下文切换到内核模式</strong>(第三次上下文切换)，并从用户空间缓冲区复制数据到内核空间缓冲区(第三次拷贝: user buffer ——&gt; kernel buffer)。</li><li><strong><code>write</code>系统调用返回</strong>，导致<strong>内核空间到用户空间的再次上下文切换</strong>(第四次上下文切换)。将内核空间缓冲区中的数据写到hardware(第四次拷贝: kernel buffer ——&gt; hardware)。</li></ol><p>为了减少拷贝和上下文切换的次数，常见的方法有<code>mmap</code>(内存映射)<code>sendFile</code>。</p><h2 id="mmap">2.2 mmap</h2><p>mmap通过内存映射，将文件映射到内核缓冲区，同时，用户空间可以共享内核空间的数据。这样，在进行网络传输时，就可以减少内核空间到用户控件的拷贝次数。</p><p><img src="https://api.codetool.top/img/15841829151018.png" alt="mmap"></p><ol><li><strong>发出mmap系统调用，导致用户空间到内核空间的上下文切换</strong>(第一次上下文切换)。通过DMA引擎<strong>将磁盘文件中的内容拷贝到内核空间缓冲区中</strong>(第一次拷贝: hard drive ——&gt; kernel buffer)。</li><li><strong>mmap系统调用返回，导致内核空间到用户空间的上下文切换</strong>(第二次上下文切换)。<strong>接着用户空间和内核空间共享这个缓冲区，而不需要将数据从内核空间拷贝到用户空间。</strong>因为用户空间和内核空间共享了这个缓冲区数据，所以用户空间就可以像在操作自己缓冲区中数据一般操作这个由内核空间共享的缓冲区数据。</li><li><strong>发出write系统调用，导致用户空间到内核空间的上下文切换</strong>(第三次上下文切换)。将数据从内核空间缓冲区拷贝到内核空间socket相关联的缓冲区(第二次拷贝: kernel buffer ——&gt; socket buffer)。</li><li><strong>write系统调用返回，导致内核空间到用户空间的上下文切换</strong>(第四次上下文切换)。通过DMA引擎将内核空间socket缓冲区中的数据传递到协议引擎(第三次拷贝: socket buffer ——&gt; protocol engine)</li></ol><p>通过mmap实现的零拷贝I/O进行了4次用户空间与内核空间的上下文切换，以及3次数据拷贝。其中3次数据拷贝中包括了2次DMA拷贝和1次CPU拷贝。明显，<strong>它与传统I/O相比仅仅少了1次内核空间缓冲区和用户空间缓冲区之间的CPU拷贝。</strong>这样的好处是，我们可以将整个文件或者整个文件的一部分映射到内存当中，用户直接对内存中对文件进行操作，然后是由操作系统来进行相关的页面请求并将内存的修改写入到文件当中。我们的应用程序只需要处理内存的数据，这样可以实现非常迅速的I/O操作。</p><h2 id="sendFile">2.3 sendFile</h2><p>Linux 2.1版本提供了sendFile函数，其基本原理如下：<strong>数据根本不经过用户态，直接从内核缓冲区进入到 Socket Buffer</strong>，同时，由于和用户态完全无关，就减少了一次上下文切换。</p><p><img src="https://api.codetool.top/img/15841726453552.png" alt="sendfile"></p><ol><li><strong>发出sendfile系统调用，导致用户空间到内核空间的上下文切换</strong>(第一次上下文切换)。通过DMA将磁盘文件中的内容拷贝到内核空间缓冲区中(第一次拷贝: hard driver ——&gt; kernel buffer)。</li><li>然后再<strong>将数据从内核空间缓冲区拷贝到内核中与socket相关的缓冲区中</strong>(第二次拷贝: kernel buffer ——&gt; socket buffer)。</li><li><strong>sendfile系统调用返回，导致内核空间到用户空间的上下文切换</strong>(第二次上下文切换)。通过DMA引擎将内核空间socket缓冲区中的数据传递到协议引擎(第三次拷贝: socket buffer ——&gt; protocol engine)。</li></ol><p><strong>通过sendfile实现的零拷贝I/O只使用了2次用户空间与内核空间的上下文切换，以及3次数据的拷贝。</strong> 你可能会说操作系统仍然需要在内核内存空间中复制数据（kernel buffer —&gt;socket buffer）。 是的，但从操作系统的角度来看，这已经是零拷贝，因为没有数据从内核空间复制到用户空间。 内核需要复制的原因是因为通用硬件DMA访问需要连续的内存空间（因此需要缓冲区）。 但是，如果硬件支持scatter-and-gather，这是可以避免的。</p><p>Linux 在 2.4 版本中，做了一些修改，避免了从内核缓冲区拷贝到 Socket buffer 的操作，直接拷贝到协议栈，从而再一次减少了数据拷贝。</p><p><img src="https://api.codetool.top/img/15841728116351.png" alt="sendfile改进"></p><h1 id="NIO中的零拷贝">3 NIO中的零拷贝</h1><p>NIO中有一个transferTo，它可以在两个FileChannel直接传递数据而不需要经过buffer，这对大文件的读写帮助是很大的，那它究竟使用了什么方法实现呢？我在openjdk1.8下找到了它的源码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">long</span> position<span class="token punctuation">,</span> <span class="token keyword">long</span> count<span class="token punctuation">,</span>                        WritableByteChannel target<span class="token punctuation">)</span>    <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>    <span class="token function">ensureOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>target<span class="token punctuation">.</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">ClosedChannelException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>readable<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NonReadableChannelException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token keyword">instanceof</span> <span class="token class-name">FileChannelImpl</span> <span class="token operator">&amp;&amp;</span>        <span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">(</span>FileChannelImpl<span class="token punctuation">)</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span>writable<span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NonWritableChannelException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>position <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> sz <span class="token operator">=</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">></span> sz<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> icount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sz <span class="token operator">-</span> position<span class="token punctuation">)</span> <span class="token operator">&lt;</span> icount<span class="token punctuation">)</span>        icount <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>sz <span class="token operator">-</span> position<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> n<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注意这个部分------------------------------------------</span>    <span class="token comment" spellcheck="true">// Attempt a direct transfer, if the kernel supports it</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">transferToDirectly</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> icount<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Attempt a mapped transfer, but only to trusted channel types</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">transferToTrustedChannel</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> icount<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Slow path for untrusted targets</span>    <span class="token keyword">return</span> <span class="token function">transferToArbitraryChannel</span><span class="token punctuation">(</span>position<span class="token punctuation">,</span> icount<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注意这个部分------------------------------------------</span><span class="token punctuation">}</span></code></pre><p>可以看出优先使用transferToDirectly，其次是transferToTrustedChannel</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">long</span> <span class="token function">transferToDirectly</span><span class="token punctuation">(</span><span class="token keyword">long</span> position<span class="token punctuation">,</span> <span class="token keyword">int</span> icount<span class="token punctuation">,</span>                                WritableByteChannel target<span class="token punctuation">)</span>    <span class="token keyword">throws</span> IOException<span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>transferSupported<span class="token punctuation">)</span>        <span class="token keyword">return</span> IOStatus<span class="token punctuation">.</span>UNSUPPORTED<span class="token punctuation">;</span>    FileDescriptor targetFD <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token keyword">instanceof</span> <span class="token class-name">FileChannelImpl</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fileSupported<span class="token punctuation">)</span>            <span class="token keyword">return</span> IOStatus<span class="token punctuation">.</span>UNSUPPORTED_CASE<span class="token punctuation">;</span>        targetFD <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>FileChannelImpl<span class="token punctuation">)</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span>fd<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token keyword">instanceof</span> <span class="token class-name">SelChImpl</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Direct transfer to pipe causes EINVAL on some configurations</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>target <span class="token keyword">instanceof</span> <span class="token class-name">SinkChannelImpl</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>pipeSupported<span class="token punctuation">)</span>            <span class="token keyword">return</span> IOStatus<span class="token punctuation">.</span>UNSUPPORTED_CASE<span class="token punctuation">;</span>        targetFD <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>SelChImpl<span class="token punctuation">)</span>target<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFD</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>targetFD <span class="token operator">==</span> null<span class="token punctuation">)</span>        <span class="token keyword">return</span> IOStatus<span class="token punctuation">.</span>UNSUPPORTED<span class="token punctuation">;</span>    <span class="token keyword">int</span> thisFDVal <span class="token operator">=</span> IOUtil<span class="token punctuation">.</span><span class="token function">fdVal</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> targetFDVal <span class="token operator">=</span> IOUtil<span class="token punctuation">.</span><span class="token function">fdVal</span><span class="token punctuation">(</span>targetFD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>thisFDVal <span class="token operator">==</span> targetFDVal<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Not supported on some configurations</span>        <span class="token keyword">return</span> IOStatus<span class="token punctuation">.</span>UNSUPPORTED<span class="token punctuation">;</span>    <span class="token keyword">long</span> n <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ti <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ti <span class="token operator">=</span> threads<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注意这个部分------------------------------------------</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            n <span class="token operator">=</span> <span class="token function">transferTo0</span><span class="token punctuation">(</span>thisFDVal<span class="token punctuation">,</span> position<span class="token punctuation">,</span> icount<span class="token punctuation">,</span> targetFDVal<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">==</span> IOStatus<span class="token punctuation">.</span>INTERRUPTED<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isOpen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注意这个部分------------------------------------------</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> IOStatus<span class="token punctuation">.</span>UNSUPPORTED_CASE<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token keyword">instanceof</span> <span class="token class-name">SinkChannelImpl</span><span class="token punctuation">)</span>                pipeSupported <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token keyword">instanceof</span> <span class="token class-name">FileChannelImpl</span><span class="token punctuation">)</span>                fileSupported <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> IOStatus<span class="token punctuation">.</span>UNSUPPORTED_CASE<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> IOStatus<span class="token punctuation">.</span>UNSUPPORTED<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Don't bother trying again</span>            transferSupported <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> IOStatus<span class="token punctuation">.</span>UNSUPPORTED<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> IOStatus<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        threads<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>ti<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">end</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在WINDOWS下：</p><pre class=" language-c"><code class="language-c">JNIEXPORT jlong JNICALL<span class="token function">Java_sun_nio_ch_FileChannelImpl_transferTo0</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject this<span class="token punctuation">,</span>                                            jint srcFD<span class="token punctuation">,</span>                                            jlong position<span class="token punctuation">,</span> jlong count<span class="token punctuation">,</span>                                            jint dstFD<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> IOS_UNSUPPORTED<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>即Windows不支持transferToDirectly。</p><p>在unix系操作系统下：</p><pre class=" language-c"><code class="language-c">JNIEXPORT jlong JNICALL<span class="token function">Java_sun_nio_ch_FileChannelImpl_transferTo0</span><span class="token punctuation">(</span>JNIEnv <span class="token operator">*</span>env<span class="token punctuation">,</span> jobject this<span class="token punctuation">,</span>                                            jint srcFD<span class="token punctuation">,</span>                                            jlong position<span class="token punctuation">,</span> jlong count<span class="token punctuation">,</span>                                            jint dstFD<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token macro property">#<span class="token directive keyword">if</span> defined(__linux__)</span>    off64_t offset <span class="token operator">=</span> <span class="token punctuation">(</span>off64_t<span class="token punctuation">)</span>position<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注意 linux -> sendfile ---------------------------------</span>    jlong n <span class="token operator">=</span> <span class="token function">sendfile64</span><span class="token punctuation">(</span>dstFD<span class="token punctuation">,</span> srcFD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>offset<span class="token punctuation">,</span> <span class="token punctuation">(</span>size_t<span class="token punctuation">)</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EAGAIN<span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_UNAVAILABLE<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>errno <span class="token operator">==</span> EINVAL<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ssize_t<span class="token punctuation">)</span>count <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_UNSUPPORTED_CASE<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> IOS_INTERRUPTED<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">JNU_ThrowIOExceptionWithLastError</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">"Transfer failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> IOS_THROWN<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> n<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">elif</span> defined (__solaris__)</span>    sendfilevec64_t sfv<span class="token punctuation">;</span>    size_t numBytes <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    jlong result<span class="token punctuation">;</span>    sfv<span class="token punctuation">.</span>sfv_fd <span class="token operator">=</span> srcFD<span class="token punctuation">;</span>    sfv<span class="token punctuation">.</span>sfv_flag <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    sfv<span class="token punctuation">.</span>sfv_off <span class="token operator">=</span> <span class="token punctuation">(</span>off64_t<span class="token punctuation">)</span>position<span class="token punctuation">;</span>    sfv<span class="token punctuation">.</span>sfv_len <span class="token operator">=</span> count<span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token function">sendfilev64</span><span class="token punctuation">(</span>dstFD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sfv<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>numBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* Solaris sendfilev() will return -1 even if some bytes have been     * transferred, so we check numBytes first.     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>numBytes <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> numBytes<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EAGAIN<span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_UNAVAILABLE<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EOPNOTSUPP<span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_UNSUPPORTED_CASE<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>errno <span class="token operator">==</span> EINVAL<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ssize_t<span class="token punctuation">)</span>count <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_UNSUPPORTED_CASE<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_INTERRUPTED<span class="token punctuation">;</span>        <span class="token function">JNU_ThrowIOExceptionWithLastError</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">"Transfer failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> IOS_THROWN<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">elif</span> defined(__APPLE__)</span>    off_t numBytes<span class="token punctuation">;</span>    <span class="token keyword">int</span> result<span class="token punctuation">;</span>    numBytes <span class="token operator">=</span> count<span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token function">sendfile</span><span class="token punctuation">(</span>srcFD<span class="token punctuation">,</span> dstFD<span class="token punctuation">,</span> position<span class="token punctuation">,</span> <span class="token operator">&amp;</span>numBytes<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>numBytes <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> numBytes<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EAGAIN<span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_UNAVAILABLE<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EOPNOTSUPP <span class="token operator">||</span> errno <span class="token operator">==</span> ENOTSOCK <span class="token operator">||</span> errno <span class="token operator">==</span> ENOTCONN<span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_UNSUPPORTED_CASE<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>errno <span class="token operator">==</span> EINVAL<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ssize_t<span class="token punctuation">)</span>count <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_UNSUPPORTED_CASE<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_INTERRUPTED<span class="token punctuation">;</span>        <span class="token function">JNU_ThrowIOExceptionWithLastError</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">"Transfer failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> IOS_THROWN<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">elif</span> defined(_AIX)</span>    jlong max <span class="token operator">=</span> <span class="token punctuation">(</span>jlong<span class="token punctuation">)</span>java_lang_Integer_MAX_VALUE<span class="token punctuation">;</span>    <span class="token keyword">struct</span> sf_parms sf_iobuf<span class="token punctuation">;</span>    jlong result<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>position <span class="token operator">></span> max<span class="token punctuation">)</span>        <span class="token keyword">return</span> IOS_UNSUPPORTED_CASE<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> max<span class="token punctuation">)</span>        count <span class="token operator">=</span> max<span class="token punctuation">;</span>    <span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>sf_iobuf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>sf_iobuf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sf_iobuf<span class="token punctuation">.</span>file_descriptor <span class="token operator">=</span> srcFD<span class="token punctuation">;</span>    sf_iobuf<span class="token punctuation">.</span>file_offset <span class="token operator">=</span> <span class="token punctuation">(</span>off_t<span class="token punctuation">)</span>position<span class="token punctuation">;</span>    sf_iobuf<span class="token punctuation">.</span>file_bytes <span class="token operator">=</span> count<span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token function">send_file</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>dstFD<span class="token punctuation">,</span> <span class="token operator">&amp;</span>sf_iobuf<span class="token punctuation">,</span> SF_SYNC_CACHE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* AIX send_file() will return 0 when this operation complete successfully,     * return 1 when partial bytes transfered and return -1 when an error has     * Occured.     */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EWOULDBLOCK<span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_UNAVAILABLE<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>errno <span class="token operator">==</span> EINVAL<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ssize_t<span class="token punctuation">)</span>count <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_UNSUPPORTED_CASE<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> EINTR<span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_INTERRUPTED<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>errno <span class="token operator">==</span> ENOTSOCK<span class="token punctuation">)</span>            <span class="token keyword">return</span> IOS_UNSUPPORTED<span class="token punctuation">;</span>        <span class="token function">JNU_ThrowIOExceptionWithLastError</span><span class="token punctuation">(</span>env<span class="token punctuation">,</span> <span class="token string">"Transfer failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> IOS_THROWN<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sf_iobuf<span class="token punctuation">.</span>bytes_sent <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>jlong<span class="token punctuation">)</span>sf_iobuf<span class="token punctuation">.</span>bytes_sent<span class="token punctuation">;</span>    <span class="token keyword">return</span> IOS_UNSUPPORTED_CASE<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">else</span></span>    <span class="token keyword">return</span> IOS_UNSUPPORTED_CASE<span class="token punctuation">;</span><span class="token macro property">#<span class="token directive keyword">endif</span></span><span class="token punctuation">}</span></code></pre><p>sendfile64就是linux2.4改进后的sendfile，具体可以参考 <a href="https://linux.die.net/man/2/sendfile64" target="_blank" rel="noopener">https://linux.die.net/man/2/sendfile64</a></p><p>而<code>transferToTrustedChannel</code>就和FileChannel的map方法原理一致了，使用的是mmap，这里就不贴源码跟踪了，在windows下使用的是系统函数<code>CreateFileMapping</code>，在linux下使用的是系统函数<code>mmap64</code></p><h1 id="总结">4 总结</h1><ul><li>mmap 适合小数据量读写，sendFile 适合大文件传输。</li><li>mmap 需要 4 次上下文切换，3 次数据拷贝；sendFile 需要 3 次上下文切换，最少 2 次数据拷贝。</li><li>sendFile 可以利用 DMA 方式，减少 CPU 拷贝，mmap 则不能（必须从内核拷贝到 Socket 缓冲区）。</li><li>在Java中可以使用FileChannel的transferTo方法实现零拷贝，在windows下使用的是mmap方式，调用系统函数<code>CreateFileMapping</code>，在linux下优先使用改进后的sendFile，调用系统函数<code>sendFile64</code>。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文参考资源：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/u013096088/article/details/79122671&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Java NIO学习笔记四（零拷贝详解）_Ja
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="java" scheme="https://www.codetool.top/tags/java/"/>
    
      <category term="IO" scheme="https://www.codetool.top/tags/IO/"/>
    
      <category term="NIO" scheme="https://www.codetool.top/tags/NIO/"/>
    
      <category term="操作系统" scheme="https://www.codetool.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>leetcode300-最长上升子序列</title>
    <link href="https://www.codetool.top/article/leetcode300-%E6%9C%80%E9%95%BF%E4%B8%8A%E5%8D%87%E5%AD%90%E5%BA%8F%E5%88%97/"/>
    <id>https://www.codetool.top/article/leetcode300-最长上升子序列/</id>
    <published>2020-03-13T16:33:27.000Z</published>
    <updated>2020-03-13T16:43:58.421Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定一个无序的整数数组，找到其中最长上升子序列的长度。</p><p><strong>示例：</strong></p><blockquote><p><strong>输入:</strong> [10,9,2,5,3,7,101,18]<br><strong>输出:</strong> 4<br><strong>解释:</strong> 最长的上升子序列是 [2,3,7,101]，它的长度是 4。   </p></blockquote><p><strong>说明：</strong></p><ul><li>可能会有多种最长上升子序列的组合，你只需要输出对应的长度即可。</li><li>你算法的时间复杂度应该为 O(n<sup>2</sup>) 。</li></ul><p><strong>进阶:</strong> 你能将算法的时间复杂度降低到 O(n log n) 吗?</p><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>动态规划，对于某个元素，其dp值应该等于左边比其小的元素中最大的dp值+1。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dp<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> maxval <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> maxval <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxval<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> maxval <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            maxCount <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxCount<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> maxCount<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定一个无序的整数数组，找到其中最长上升子序列的长度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/strong&gt; [10,9,2,5,3,7,101,1
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="动态规划" scheme="https://www.codetool.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Spring整合RabbitMQ及其各组件介绍</title>
    <link href="https://www.codetool.top/article/Spring%E6%95%B4%E5%90%88RabbitMQ%E5%8F%8A%E5%85%B6%E5%90%84%E7%BB%84%E4%BB%B6%E4%BB%8B%E7%BB%8D/"/>
    <id>https://www.codetool.top/article/Spring整合RabbitMQ及其各组件介绍/</id>
    <published>2020-03-13T14:54:21.000Z</published>
    <updated>2020-03-13T15:42:56.170Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-rabbit">1 Spring-rabbit</h1><p>使用Spring-rabbit，maven依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-rabbit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>各组件介绍：</p><h2 id="RabbitAdmin">1.1 RabbitAdmin</h2><p>编写配置类，RabbitAdmin为核心操作RabbitMQ的类，我们要注入一个它的bean：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ConnectionFactory <span class="token function">connectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        CachingConnectionFactory connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CachingConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setAddresses</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> connectionFactory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RabbitAdmin <span class="token function">rabbitAdmin</span><span class="token punctuation">(</span>ConnectionFactory connectionFactory<span class="token punctuation">)</span><span class="token punctuation">{</span>        RabbitAdmin rabbitAdmin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RabbitAdmin</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitAdmin<span class="token punctuation">.</span><span class="token function">setAutoStartup</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//必须设置为true</span>        <span class="token keyword">return</span> rabbitAdmin<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>RabbitAdmin可以声明队列、交换器、绑定等。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span>classes <span class="token operator">=</span> SpringConfiguration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RabbitAdmin rabbitAdmin<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdmin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//声明</span>        rabbitAdmin<span class="token punctuation">.</span><span class="token function">declareExchange</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">"test.direct"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitAdmin<span class="token punctuation">.</span><span class="token function">declareExchange</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TopicExchange</span><span class="token punctuation">(</span><span class="token string">"test.topic"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitAdmin<span class="token punctuation">.</span><span class="token function">declareQueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"test.direct.queue"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitAdmin<span class="token punctuation">.</span><span class="token function">declareQueue</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"test.topic.queue"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitAdmin<span class="token punctuation">.</span><span class="token function">declareBinding</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Binding</span><span class="token punctuation">(</span><span class="token string">"test.direct.queue"</span><span class="token punctuation">,</span>Binding<span class="token punctuation">.</span>DestinationType<span class="token punctuation">.</span>QUEUE<span class="token punctuation">,</span>                <span class="token string">"test.direct"</span><span class="token punctuation">,</span><span class="token string">"direct"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitAdmin<span class="token punctuation">.</span><span class="token function">declareBinding</span><span class="token punctuation">(</span>                BindingBuilder                        <span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"test.topic.queue"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//队列</span>                        <span class="token punctuation">.</span><span class="token function">to</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TopicExchange</span><span class="token punctuation">(</span><span class="token string">"test.topic"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//交换机</span>                        <span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token string">"user.#"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//指定路由key</span>        <span class="token comment" spellcheck="true">//清空队列数据</span>        rabbitAdmin<span class="token punctuation">.</span><span class="token function">purgeQueue</span><span class="token punctuation">(</span><span class="token string">"test.topic.queue"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>也可以把Queue、Exchange、Binding注入到IoC容器中，再使用。</p><h2 id="RabbitTemplate">1.2 RabbitTemplate</h2><p>该类提供了丰富的发送消息方法，包括可靠性投递消息方法、回调监听消息接口ConfirmCallback、返回值确认接口ReturnCallback等等。 同样我们需要进行注入到Spring容器中，然后直接使用。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ConnectionFactory <span class="token function">connectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        CachingConnectionFactory connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CachingConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setAddresses</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> connectionFactory<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RabbitAdmin <span class="token function">rabbitAdmin</span><span class="token punctuation">(</span>ConnectionFactory connectionFactory<span class="token punctuation">)</span><span class="token punctuation">{</span>        RabbitAdmin rabbitAdmin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RabbitAdmin</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        rabbitAdmin<span class="token punctuation">.</span><span class="token function">setAutoStartup</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//必须设置为true</span>        <span class="token keyword">return</span> rabbitAdmin<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> RabbitTemplate <span class="token function">rabbitTemplate</span><span class="token punctuation">(</span>ConnectionFactory connectionFactory<span class="token punctuation">)</span><span class="token punctuation">{</span>        RabbitTemplate rabbitTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RabbitTemplate</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rabbitTemplate<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>    MessageProperties messageProperties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    messageProperties<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"desc"</span><span class="token punctuation">,</span> <span class="token string">"信息描述.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    messageProperties<span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"type"</span><span class="token punctuation">,</span> <span class="token string">"自定义消息类型.."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Message message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">"Hello RabbitMQ"</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> messageProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">"test.topic"</span><span class="token punctuation">,</span><span class="token string">"user.template"</span><span class="token punctuation">,</span>message<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">MessagePostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> Message <span class="token function">postProcessMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span> <span class="token keyword">throws</span> AmqpException <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----添加额外的设置------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"desc"</span><span class="token punctuation">,</span> <span class="token string">"额外修改的信息描述"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"attr"</span><span class="token punctuation">,</span> <span class="token string">"额外新加的信息描述"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> message<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>send或convertAndSend用来发送消息，MessagePostProcessor可以帮我们在消息发送前再对消息做一些处理。</p><p><img src="https://api.codetool.top/img/1584107981686.png" alt></p><p>convertAndSend可以传的消息是一个Object对象，如果不是Message类型，会帮我们用转换器转换成消息对象，默认的Converter是<code>SimpleMessageConverter</code>，可以自定义Converter然后使用setMessageConverter设置转换器。</p><p>其他自带可用的Converter还有<code>Jackson2MessageConvertor</code>、<code>SerializerMessageConverter</code>等等。</p><p>SimpleMessageConverter如何将Java对象转成消息：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> Message <span class="token function">createMessage</span><span class="token punctuation">(</span>Object object<span class="token punctuation">,</span> MessageProperties messageProperties<span class="token punctuation">)</span> <span class="token keyword">throws</span> MessageConversionException <span class="token punctuation">{</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如果是字节数组，直接设置成消息体</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        bytes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> object<span class="token punctuation">;</span>        messageProperties<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>MessageProperties<span class="token punctuation">.</span>CONTENT_TYPE_BYTES<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果是String，转成字节数组设置消息体，默认以UTF-8编码</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            bytes <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>String<span class="token punctuation">)</span> object<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultCharset<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MessageConversionException</span><span class="token punctuation">(</span>                    <span class="token string">"failed to convert to Message content"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        messageProperties<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>MessageProperties<span class="token punctuation">.</span>CONTENT_TYPE_TEXT_PLAIN<span class="token punctuation">)</span><span class="token punctuation">;</span>        messageProperties<span class="token punctuation">.</span><span class="token function">setContentEncoding</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>defaultCharset<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//如果是可序列化的，就将对象序列化</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token keyword">instanceof</span> <span class="token class-name">Serializable</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            bytes <span class="token operator">=</span> SerializationUtils<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MessageConversionException</span><span class="token punctuation">(</span>                    <span class="token string">"failed to convert to serialized Message content"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        messageProperties<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>MessageProperties<span class="token punctuation">.</span>CONTENT_TYPE_SERIALIZED_OBJECT<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        messageProperties<span class="token punctuation">.</span><span class="token function">setContentLength</span><span class="token punctuation">(</span>bytes<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span> messageProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//否则就是不支持的类型</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token operator">+</span> <span class="token string">" only supports String, byte[] and Serializable payloads, received: "</span> <span class="token operator">+</span> object<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="SimpleMessageListenerContainer">1.3 SimpleMessageListenerContainer</h2><p>SimpleMessageListenerContainer是一个消息监听容器（就是消费者的容器，可以监听多个队列上的消息）</p><ul><li>这个类非常的强大，我们可以对它进行很多设置，对于消费者的配置项，这个类都可以满足</li><li>监听队列(多个队列)、自动启动、自动声明功能</li><li>设置事务特性、事务管理器、事务属性、事务容量(并发)、是否开启事务、回滚消息等</li><li>设置消费者数量、最小最大数量、批量消费</li><li>设置消息确认和自动确认模式、是否重回队列、异常捕获handler函数。</li><li>设置消费者标签生成策略、是否独占模式、消费者属性等</li><li>设置具体的监听器、消息转换器等等。</li></ul><p>注意: <code>SimpleMessageListenerContainer</code>可以进行动态设置， 比如在运行中的应用可以动态的修改其消费者数量的大小、接收消息的模式等。</p><p>很多基于RabbitMQ的自制定化后端管控台在进行动态设置的时候，也是根据这一特性去实现的。可以看出SpringAMQP非常的强大。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMQConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//略。。。</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">directQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"test.direct.queue"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Queue <span class="token function">topicQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">"test.topic.queue"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> SimpleMessageListenerContainer <span class="token function">simpleMessageListenerContainer</span><span class="token punctuation">(</span>ConnectionFactory connectionFactory<span class="token punctuation">)</span><span class="token punctuation">{</span>        SimpleMessageListenerContainer container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMessageListenerContainer</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setQueues</span><span class="token punctuation">(</span><span class="token function">directQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">topicQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setConcurrentConsumers</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setDefaultRequeueRejected</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setAcknowledgeMode</span><span class="token punctuation">(</span>AcknowledgeMode<span class="token punctuation">.</span>AUTO<span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setConsumerTagStrategy</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConsumerTagStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> String <span class="token function">createConsumerTag</span><span class="token punctuation">(</span>String queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">return</span> queue<span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        container<span class="token punctuation">.</span><span class="token function">setMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChannelAwareMessageListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">,</span> Channel channel<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------消费者："</span> <span class="token operator">+</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> container<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>只要它在IoC容器中，就保持监听注册队列上的消息，监听到消息就可以通过内部的MessageListener来处理消息。如果收到的消息是序列化的、json等其他类型，可以使用Converter转换。或写一个MessageListenerAdapter，它可以注册Converter。</p><h2 id="MessageListenerAdapter">1.4 MessageListenerAdapter</h2><p>MessageListenerAdapter</p><ol><li>可以把一个没有实现MessageListener和ChannelAwareMessageListener接口的类适配成一个可以处理消息的处理器</li><li>默认的方法名称为：handleMessage，可以通过setDefaultListenerMethod设置新的消息处理方法</li><li>MessageListenerAdapter支持不同的队列交给不同的方法去执行。使用setQueueOrTagToMethodName方法设置，当根据queue名称没有找到匹配的方法的时候，就会交给默认的方法去处理。</li></ol><blockquote><p>作者：二月_春风<br>链接：<a href="https://www.jianshu.com/p/d21bafe3b9fd" target="_blank" rel="noopener">https://www.jianshu.com/p/d21bafe3b9fd</a></p></blockquote><p>MessageListenerAdapter还可以通过MessageConverter将收到的消息转换成其他类型的数据，从而给Delegate中的方法处理。</p><h2 id="MessageConverter">1.5 MessageConverter</h2><p>Java对象和Message互转。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MessageConverter</span> <span class="token punctuation">{</span>    Message <span class="token function">toMessage</span><span class="token punctuation">(</span>Object object<span class="token punctuation">,</span> MessageProperties messageProperties<span class="token punctuation">)</span> <span class="token keyword">throws</span> MessageConversionException<span class="token punctuation">;</span>    Object <span class="token function">fromMessage</span><span class="token punctuation">(</span>Message message<span class="token punctuation">)</span> <span class="token keyword">throws</span> MessageConversionException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="SpringBoot整合RabbitMQ">2 SpringBoot整合RabbitMQ</h1><p>maven依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>使用SpringBoot就不用我们手动去注入组件了，显然这些本来是应该在ConnectionFactory中配置的东西现在都可以拿出来，SpringBoot预先帮我们注入各种组件bean。</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#RABBITMQ START</span><span class="token attr-name">spring.rabbitmq.host</span><span class="token punctuation">=</span><span class="token attr-value">127.0.0.1</span><span class="token attr-name">spring.rabbitmq.port</span><span class="token punctuation">=</span><span class="token attr-value">5672</span><span class="token attr-name">spring.rabbitmq.username</span><span class="token punctuation">=</span><span class="token attr-value">guest</span><span class="token attr-name">spring.rabbitmq.password</span><span class="token punctuation">=</span><span class="token attr-value">guest</span><span class="token comment" spellcheck="true"># 消息确认机制：none不启用，simple使用waitForConfirms，correlated使用CorrelationData</span><span class="token attr-name">spring.rabbitmq.publisher-confirm-type</span><span class="token punctuation">=</span><span class="token attr-value">none</span><span class="token comment" spellcheck="true"># 自定义的属性，定义了两个队列的名称</span><span class="token attr-name">rabbitmq.queue.msg</span><span class="token punctuation">=</span><span class="token attr-value">spring-boot-queue-msg</span><span class="token attr-name">rabbitmq.queue.user</span><span class="token punctuation">=</span><span class="token attr-value">spring-boot-queue-user</span><span class="token comment" spellcheck="true">#RABBITMQ END</span></code></pre><p>先配置<code>@EnableRabbit</code>，可以使用<code>@RabbitListener(queues={})</code>来给方法注册一个<code>MessageListenerContainer</code>，这个<code>MessageListenerContainer</code>是从SpringBoot默认注入的<code>MessageListenerContainerFactory</code>获取的，如果要修改默认的Converter，就要自己注入<code>MessageListenerContainerFactory</code>，然后更改converter。</p><p>更多的注解相关见：<a href="https://blog.csdn.net/u012129558/article/details/85099861" target="_blank" rel="noopener">使用@RabbitListener注解消费消息_Java_思考、总结、专注-CSDN博客</a></p><p>其他的用法就没有很大区别了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-rabbit&quot;&gt;1 Spring-rabbit&lt;/h1&gt;&lt;p&gt;使用Spring-rabbit，maven依赖：&lt;/p&gt;
&lt;pre class=&quot; language-xml&quot;&gt;&lt;code class=&quot;language-xml&quot;&gt;&lt;span class
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://www.codetool.top/tags/Spring/"/>
    
      <category term="RabbitMQ" scheme="https://www.codetool.top/tags/RabbitMQ/"/>
    
  </entry>
  
</feed>
