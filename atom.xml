<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>代码段小站</title>
  <icon>https://www.gravatar.com/avatar/4c71a513a84e4d430b9f9aed224237fc</icon>
  <subtitle>CodeTool - 个人计算机类练手小博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.codetool.top/"/>
  <updated>2020-06-26T04:20:10.684Z</updated>
  <id>https://www.codetool.top/</id>
  
  <author>
    <name>Rhett Peng</name>
    <email>pctdyx@qq.net</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>为什么说Java只有值传递？</title>
    <link href="https://www.codetool.top/article/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4Java%E5%8F%AA%E6%9C%89%E5%80%BC%E4%BC%A0%E9%80%92%EF%BC%9F/"/>
    <id>https://www.codetool.top/article/为什么说Java只有值传递？/</id>
    <published>2020-06-26T03:20:14.000Z</published>
    <updated>2020-06-26T04:20:10.684Z</updated>
    
    <content type="html"><![CDATA[<p>先说一下。。以后可能不会怎么写Java相关的博客了，因为找到了字节跳动的实习工作，用Go/Python开发后端，所以这几天在抓紧时间学Go，在学Go的时候，了解到Go语言只有值传递，我突然就想起网上对Java是引用传递还是值传递有很多种说法，那么我的看法是：Java中同样只有值传递。理由且听我慢慢道来。</p><h1 id="最简单的验证方法">1 最简单的验证方法</h1><p>其实要验证Java只有值传递有个非常简单的方法。首先我们要了解值传递和引用传递的区别是什么，其实“引用传递”这个词，在C++语言中听到得最多，在值传递中，实参是传入对象的一份拷贝，因此对参数的修改不会影响传入的对象。而在引用传递中，传递的是对象的一个别名，若创建引用后，原对象的地址发生改变，引用的对象依然不会改变，而这种机制目前我只在C++语言中听说过。（主要还是学过的编程语言太少）</p><p>这种机制甚至在C语言中都没有，那么C语言要通过函数去改变一个参数该怎么办呢？正确的做法是<strong>指针传递</strong>。</p><pre class=" language-c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    temp <span class="token operator">=</span> <span class="token operator">*</span>a    <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token operator">*</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>指针传递</strong>可以改变传入的参数，那么它是引用传递吗？并不是，它只是传递了指针的值，而函数内部因为获取了指针的值，于是可以通过指针获取指向的对象，从而修改它。</p><p><strong>指针传递</strong>在C++中也可以使用，而C++要实现同样的功能还可以使用引用传递：</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> swap <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> swap<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>那么这两种方法有什么区别呢？区别就是，在指针传递的方法中，改变指针的值，外部并不会变化。</p><p>例如下面这段代码（引用传递）输出10，引用发生改变：</p><iframe src="https://run.codetool.top/?id=36" frameborder="0" height="500" style="width:100%;border:1px solid #ccc;"></iframe><p>而下面这段代码（指针传递）则还是输出5，因为外部的指针不会随之发生改变：</p><iframe src="https://run.codetool.top/?id=38" frameborder="0" height="500" style="width:100%;border:1px solid #ccc;"></iframe><p>那么，通过这两个示例，我们就可以写出一段Java代码来验证一下Java中是引用传递还是值传递：</p><iframe src="https://run.codetool.top/?id=39" frameborder="0" height="500" style="width:100%;border:1px solid #ccc;"></iframe><p>既然网上很多资料说，Java除了基本类型，都是引用传递，那么我们这里就写了一个类进行测试，在函数内部去修改了一下获取的参数。</p><p>你可以尝试运行这段代码，输出的结果仍是：<code>TestObject{value=1}</code>，说明它和C++中的<strong>指针传递</strong>的机制是一样的。这也是为什么我认为Java中都是值传递的原因。</p><h1 id="Java中不是没有指针吗？">2 Java中不是没有指针吗？</h1><p>Java只是对使用者封装了指针的概念，我们看下面这行代码：</p><pre class=" language-java"><code class="language-java">Object o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>new Object()</code>实际上是在堆上创建了一个对象，<strong>而<code>o</code>这个局部变量，是分配在栈上的，一个八字节的引用（reference）类型，指向堆上的对象</strong> </p><p>所以可以认为<code>o</code>就是一个指针，具体的机制在<a href="../深入理解java虚拟机第三版读书笔记03">深入理解java虚拟机第三版读书笔记03–1.3 对象的访问定位</a>中也有提到，<strong>HotSpot使用的对象访问定位的方式是直接指针访问，栈上的reference数据存储的就是对象在堆中的地址。</strong></p><p>因此我倾向于认为，Java的这种传参方式，类似于C++中的指针传递，并没有引用传递的概念，因此可以说，Java中只有值传递。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先说一下。。以后可能不会怎么写Java相关的博客了，因为找到了字节跳动的实习工作，用Go/Python开发后端，所以这几天在抓紧时间学Go，在学Go的时候，了解到Go语言只有值传递，我突然就想起网上对Java是引用传递还是值传递有很多种说法，那么我的看法是：Java中同样只
      
    
    </summary>
    
    
      <category term="编程语言" scheme="https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="Java" scheme="https://www.codetool.top/tags/Java/"/>
    
      <category term="基础知识" scheme="https://www.codetool.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>leetcode1413-逐步求和得到正数的最小值</title>
    <link href="https://www.codetool.top/article/leetcode1413-%E9%80%90%E6%AD%A5%E6%B1%82%E5%92%8C%E5%BE%97%E5%88%B0%E6%AD%A3%E6%95%B0%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/"/>
    <id>https://www.codetool.top/article/leetcode1413-逐步求和得到正数的最小值/</id>
    <published>2020-06-21T13:28:43.000Z</published>
    <updated>2020-06-21T13:30:58.527Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给你一个整数数组 <code>nums</code> 。你可以选定任意的 <strong>正数</strong> startValue 作为初始值。</p><p>你需要从左到右遍历 <code>nums</code> 数组，并将 startValue 依次累加上 <code>nums</code> 数组中的值。</p><p>请你在确保累加和始终大于等于 1 的前提下，选出一个最小的 <strong>正数</strong> 作为 startValue 。</p><p><strong>示例 1:</strong></p><pre><strong>输入：</strong>nums = [-3,2,-3,4,2]<strong>输出：</strong>5<strong>解释：</strong>如果你选择 startValue = 4，在第三次累加时，和小于 1 。<strong>                累加求和&nbsp;               startValue = 4 | startValue = 5 | nums</strong>&nbsp;                 (4 <strong>-3</strong> ) = 1  | (5 <strong>-3</strong> ) = 2    |  -3&nbsp;                 (1 <strong>+2</strong> ) = 3  | (2 <strong>+2</strong> ) = 4    |   2&nbsp;                 (3 <strong>-3</strong> ) = 0  | (4 <strong>-3</strong> ) = 1    |  -3&nbsp;                 (0 <strong>+4</strong> ) = 4  | (1 <strong>+4</strong> ) = 5    |   4&nbsp;                 (4 <strong>+2</strong> ) = 6  | (5 <strong>+2</strong> ) = 7    |   2</pre><p><strong>示例 2：</strong></p><pre><strong>输入：</strong>nums = [1,2]<strong>输出：</strong>1<strong>解释：</strong>最小的 startValue 需要是正数。</pre><p><strong>示例 3：</strong></p><pre><strong>输入：</strong>nums = [1,-2,-3]<strong>输出：</strong>5</pre><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 100</code></li><li><code>-100 &lt;= nums[i] &lt;= 100</code></li></ul><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>找到最小的前缀和，算出与1的差值。（如果大于等于1则返回1）</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minStartValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>min<span class="token punctuation">)</span> min <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>        <span class="token keyword">return</span> min<span class="token operator">>=</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span><span class="token operator">-</span>min<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给你一个整数数组 &lt;code&gt;nums&lt;/code&gt; 。你可以选定任意的 &lt;strong&gt;正数&lt;/strong&gt; startValue 作为初始值。&lt;/p&gt;
&lt;p&gt;你需要从左到右遍历 &lt;code&gt;nums&lt;/code&gt; 数组，并将 
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode题解链接合集</title>
    <link href="https://www.codetool.top/article/leetcode%E9%A2%98%E8%A7%A3%E9%93%BE%E6%8E%A5%E5%90%88%E9%9B%86/"/>
    <id>https://www.codetool.top/article/leetcode题解链接合集/</id>
    <published>2020-06-20T05:06:52.000Z</published>
    <updated>2020-07-05T10:31:21.645Z</updated>
    
    <content type="html"><![CDATA[<p>慢慢更，把以前做过的题解整理在一起，方便找一些。</p><h1 id="leetcode">1 leetcode</h1><ul><li><a href="../leetcode1-两数之和">leetcode1-两数之和</a> （已二刷）</li><li><a href="../leetcode2-两数相加">leetcode2-两数相加</a> （已二刷）</li><li><a href="../leetcode3-无重复字符的最长子串">leetcode3-无重复字符的最长子串</a> （已二刷）</li><li><a href="../leetcode4-寻找两个有序数组的中位数">leetcode4-寻找两个有序数组的中位数</a></li><li><a href="../leetcode5-最长回文子串">leetcode5-最长回文子串</a></li><li><a href="../leetcode7-整数反转">leetcode7-整数反转</a></li><li><a href="../leetcode8-字符串转换整数atoi">leetcode8-字符串转换整数atoi</a></li><li><a href="../leetcode9-回文数">leetcode9-回文数</a></li><li><a href="../leetcode11-盛最多水的容器">leetcode11-盛最多水的容器</a></li><li><a href="../leetcode12-整数转罗马数字">leetcode12-整数转罗马数字</a></li><li><a href="../leetcode13-罗马数字转整数">leetcode13-罗马数字转整数</a></li><li><a href="../leetcode14-最长公共前缀">leetcode14-最长公共前缀</a></li><li><a href="../leetcode15-三数之和">leetcode15-三数之和</a></li><li><a href="../leetcode16-最接近的三数之和">leetcode16-最接近的三数之和</a></li><li><a href="../leetcode17-电话号码的字母组合">leetcode17-电话号码的字母组合</a></li><li><a href="../leetcode18-四数之和">leetcode18-四数之和</a></li><li><a href="../leetcode19-删除链表的倒数第N个节点">leetcode19-删除链表的倒数第N个节点</a></li><li><a href="../leetcode20-有效的括号">leetcode20-有效的括号</a></li><li><a href="../leetcode21-合并两个有序链表">leetcode21-合并两个有序链表</a></li><li><a href="../leetcode22-括号生成/">leetcode22-括号生成</a></li><li><a href="../leetcode23-合并K个排序链表">leetcode23-合并K个排序链表</a></li><li><a href="../leetcode24-两两交换链表中的节点">leetcode24-两两交换链表中的节点</a></li><li><a href="../leetcode25-K个一组翻转链表">leetcode25-K个一组翻转链表</a></li><li><a href="../leetcode26-删除排序数组中的重复项">leetcode26-删除排序数组中的重复项</a></li><li><a href="../leetcode27-移除元素">leetcode27-移除元素</a></li><li><a href="../leetcode28-实现strStr">leetcode28-实现strStr</a></li><li><a href="../leetcode32-最长有效括号">leetcode32-最长有效括号</a></li><li><a href="../leetcode33-搜索旋转排序数组">leetcode33-搜索旋转排序数组</a></li><li><a href="../leetcode34-在排序数组中查找元素的第一个和最后一个位置/">leetcode34-在排序数组中查找元素的第一个和最后一个位置</a></li><li><a href="../leetcode35-搜索插入位置">leetcode35-搜索插入位置</a></li><li><a href="../leetcode36-有效的数独">leetcode36-有效的数独</a></li><li><a href="../leetcode38-外观数列">leetcode38-外观数列</a></li><li><a href="../leetcode39-组合总和">leetcode39-组合总和</a></li><li><a href="../leetcode40-组合总和II">leetcode40-组合总和II</a></li><li><a href="../leetcode41-缺失的第一个正数">leetcode41-缺失的第一个正数</a></li><li><a href="../leetcode42-接雨水">leetcode42-接雨水</a></li><li><a href="../leetcode45-跳跃游戏II">leetcode45-跳跃游戏II</a></li><li><a href="../leetcode46-全排列">leetcode46-全排列</a></li><li><a href="../leetcode47-全排列II">leetcode47-全排列II</a></li><li><a href="../leetcode49-字母异位词分组">leetcode49-字母异位词分组</a></li><li><a href="../leetcode50-Pow-x-n">leetcode50-Pow(x,n)</a></li><li><a href="../leetcode53-最大子序和">leetcode53-最大子序和</a></li><li><a href="../leetcode54-螺旋矩阵">leetcode54-螺旋矩阵</a></li><li><a href="../leetcode55-跳跃游戏">leetcode55-跳跃游戏</a></li><li><a href="../leetcode56-合并区间">leetcode56-合并区间</a> （已二刷）</li><li><a href="../leetcode57-插入区间">leetcode57-插入区间</a></li><li><a href="../leetcode59-螺旋矩阵II">leetcode59-螺旋矩阵II</a></li><li><a href="../leetcode60-第k个排列">leetcode60-第k个排列</a></li><li><a href="../leetcode61-旋转链表">leetcode61-旋转链表</a></li><li><a href="../leetcode62-不同路径">leetcode62-不同路径</a></li><li><a href="../leetcode63-不同路径II">leetcode63-不同路径II</a></li><li><a href="../leetcode64-最小路径和">leetcode64-最小路径和</a></li><li><a href="../leetcode66-加一">leetcode66-加一</a></li><li><a href="../leetcode67-二进制求和">leetcode67-二进制求和</a></li><li><a href="../leetcode69-x的平方根">leetcode69-x的平方根</a></li><li><a href="../leetcode70-爬楼梯">leetcode70-爬楼梯</a></li><li><a href="../leetcode71-简化路径">leetcode71-简化路径</a></li><li><a href="../leetcode72-编辑距离">leetcode72-编辑距离</a></li><li><a href="../leetcode73-矩阵置零">leetcode73-矩阵置零</a></li><li><a href="../leetcode74-搜索二维矩阵">leetcode74-搜索二维矩阵</a></li><li><a href="../leetcode75-颜色分类">leetcode75-颜色分类</a></li><li><a href="../leetcode76-最小覆盖子串">leetcode76-最小覆盖子串</a></li><li><a href="../leetcode77-组合">leetcode77-组合</a></li><li><a href="../leetcode78-子集">leetcode78-子集</a></li><li><a href="../leetcode79-单词搜索">leetcode79-单词搜索</a></li><li><a href="../leetcode80-删除排序数组中的重复项II">leetcode80-删除排序数组中的重复项II</a></li><li><a href="../leetcode81-搜索旋转排序数组II">leetcode81-搜索旋转排序数组II</a></li><li><a href="../leetcode82-删除排序链表中的重复元素II">leetcode82-删除排序链表中的重复元素II</a></li><li><a href="../leetcode83-删除排序链表中的重复元素">leetcode83-删除排序链表中的重复元素</a></li><li><a href="../leetcode84-柱状图中最大的矩形">leetcode84-柱状图中最大的矩形</a></li><li><a href="../leetcode85-最大矩形">leetcode85-最大矩形</a></li><li><a href="../leetcode86-分隔链表">leetcode86-分隔链表</a></li><li><a href="../leetcode88-合并两个有序数组">leetcode88-合并两个有序数组</a></li><li><a href="../leetcode94-二叉树的中序遍历">leetcode94-二叉树的中序遍历</a></li><li><a href="../leetcode95-不同的二叉搜索树II">leetcode95-不同的二叉搜索树II</a></li><li><a href="../leetcode96-不同的二叉搜索树">leetcode96-不同的二叉搜索树</a></li><li><a href="../leetcode98-验证二叉搜索树">leetcode98-验证二叉搜索树</a></li><li><a href="../leetcode99-恢复二叉搜索树">leetcode99-恢复二叉搜索树</a></li><li><a href="../leetcode100-相同的树">leetcode100-相同的树</a></li><li><a href="../leetcode101-对称二叉树">leetcode101-对称二叉树</a></li><li><a href="../leetcode102-二叉树的层次遍历">leetcode102-二叉树的层次遍历</a></li><li><a href="../leetcode103-二叉树的锯齿形层次遍历">leetcode103-二叉树的锯齿形层次遍历</a></li><li><a href="../leetcode104-二叉树的最大深度">leetcode104-二叉树的最大深度</a></li><li><a href="../leetcode105-从前序与中序遍历序列构造二叉树">leetcode105-从前序与中序遍历序列构造二叉树</a></li><li><a href="../leetcode106-从中序与后序遍历序列构造二叉树">leetcode106-从中序与后序遍历序列构造二叉树</a></li><li><a href="../leetcode108-将有序数组转换为二叉搜索树">leetcode108-将有序数组转换为二叉搜索树</a></li><li><a href="../leetcode110-平衡二叉树">leetcode110-平衡二叉树</a></li><li><a href="../leetcode111-二叉树的最小深度">leetcode111-二叉树的最小深度</a></li><li><a href="../leetcode112-路径总和">leetcode112-路径总和</a></li><li><a href="../leetcode116-填充每个节点的下一个右侧节点指针">leetcode116-填充每个节点的下一个右侧节点指针</a></li><li><a href="../leetcode117-填充每个节点的下一个右侧节点指针II">leetcode117-填充每个节点的下一个右侧节点指针II</a></li><li><a href="../leetcode118-杨辉三角">leetcode118-杨辉三角</a></li><li><a href="../leetcode119-杨辉三角II">leetcode119-杨辉三角II</a></li><li><a href="../leetcode121-买卖股票的最佳时机">leetcode121-买卖股票的最佳时机</a></li><li><a href="../leetcode122-买卖股票的最佳时机II">leetcode122-买卖股票的最佳时机II</a></li><li><a href="../leetcode123-买卖股票的最佳时机III">leetcode123-买卖股票的最佳时机III</a></li><li><a href="../leetcode124-二叉树中的最大路径和">leetcode124-二叉树中的最大路径和</a></li><li><a href="../leetcode125-验证回文串">leetcode125-验证回文串</a></li><li><a href="../leetcode128-最长连续序列">leetcode128-最长连续序列</a></li><li><a href="../leetcode131-分割回文串">leetcode131-分割回文串</a></li><li><a href="../leetcode133-克隆图">leetcode133-克隆图</a></li><li><a href="../leetcode134-加油站">leetcode134-加油站</a></li><li><a href="../leetcode135-分发糖果">leetcode135-分发糖果</a></li><li><a href="../leetcode136-只出现一次的数字">leetcode136-只出现一次的数字</a></li><li><a href="../leetcode138-复制带随机指针的链表">leetcode138-复制带随机指针的链表</a></li><li><a href="../leetcode141-环形链表">leetcode141-环形链表</a></li><li><a href="../leetcode142-环形链表II">leetcode142-环形链表II</a></li><li><a href="../leetcode144-二叉树的前序遍历">leetcode144-二叉树的前序遍历</a></li><li><a href="../leetcode145-二叉树的后序遍历">leetcode145-二叉树的后序遍历</a></li><li><a href="../leetcode146-LRU缓存机制">leetcode146-LRU缓存机制</a></li><li><a href="../leetcode150-逆波兰表达式求值">leetcode150-逆波兰表达式求值</a></li><li><a href="../leetcode724-寻找数组的中心索引">leetcode724-寻找数组的中心索引</a> （已二刷）</li><li><a href="../leetcode1413-逐步求和得到正数的最小值">leetcode1413-逐步求和得到正数的最小值</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;慢慢更，把以前做过的题解整理在一起，方便找一些。&lt;/p&gt;
&lt;h1 id=&quot;leetcode&quot;&gt;1 leetcode&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;../leetcode1-两数之和&quot;&gt;leetcode1-两数之和&lt;/a&gt; （已二刷）&lt;/li&gt;
&lt;li&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>程序员面试金典08.01-三步问题</title>
    <link href="https://www.codetool.top/article/%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E9%87%91%E5%85%B808-01-%E4%B8%89%E6%AD%A5%E9%97%AE%E9%A2%98/"/>
    <id>https://www.codetool.top/article/程序员面试金典08-01-三步问题/</id>
    <published>2020-06-19T15:40:47.000Z</published>
    <updated>2020-06-19T15:51:15.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题（来源Leetcode）">1 原题（来源Leetcode）</h1><p>三步问题。有个小孩正在上楼梯，楼梯有n阶台阶，小孩一次可以上1阶、2阶或3阶。实现一种方法，计算小孩有多少种上楼梯的方式。结果可能很大，你需要对结果模1000000007。</p><p><strong>示例1:</strong></p><blockquote><p><strong>输入:</strong> n = 3<br><strong>输出:</strong> 4<br><strong>说明:</strong> 有四种走法</p></blockquote><p><strong>示例2:</strong></p><blockquote><p><strong>输入：</strong> n = 5<br><strong>输出：</strong> 13</p></blockquote><p><strong>提示：</strong></p><ol><li>n范围在[1, 1000000]之间</li></ol><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>动态规划，注意溢出的问题。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">waysToStep</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> n<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000007</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1000000007</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题（来源Leetcode）&quot;&gt;1 原题（来源Leetcode）&lt;/h1&gt;&lt;p&gt;三步问题。有个小孩正在上楼梯，楼梯有n阶台阶，小孩一次可以上1阶、2阶或3阶。实现一种方法，计算小孩有多少种上楼梯的方式。结果可能很大，你需要对结果模1000000007。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode1028-从先序遍历还原二叉树</title>
    <link href="https://www.codetool.top/article/leetcode1028-%E4%BB%8E%E5%85%88%E5%BA%8F%E9%81%8D%E5%8E%86%E8%BF%98%E5%8E%9F%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    <id>https://www.codetool.top/article/leetcode1028-从先序遍历还原二叉树/</id>
    <published>2020-06-18T03:08:25.000Z</published>
    <updated>2020-06-18T03:34:38.615Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>我们从二叉树的根节点 <code>root</code> 开始进行深度优先搜索。</p><p>在遍历中的每个节点处，我们输出 <code>D</code> 条短划线（其中 <code>D</code> 是该节点的深度），然后输出该节点的值。（如果节点的深度为 <em><code>D</code></em>，则其直接子节点的深度为 <em><code>D + 1</code></em>。根节点的深度为 <em><code>0</code></em>）。</p><p>如果节点只有一个子节点，那么保证该子节点为左子节点。</p><p>给出遍历输出 <code>S</code>，还原树并返回其根节点 <code>root</code>。</p><p><strong>示例 1:</strong></p><p><img src="https://api.codetool.top/img/15924511889636.png" alt></p><blockquote><p><strong>输入：</strong> “1-2–3–4-5–6–7”<br><strong>输出：</strong> [1,2,5,3,4,6,7]</p></blockquote><p><strong>示例 2:</strong></p><p><img src="https://api.codetool.top/img/15924512241063.png" alt></p><blockquote><p><strong>输入：</strong> “1-2–3—4-5–6—7”<br><strong>输出：</strong> [1,2,5,3,null,6,null,4,null,7]</p></blockquote><p><strong>示例 3:</strong></p><p><img src="https://api.codetool.top/img/15924512434233.png" alt></p><blockquote><p><strong>输入：</strong> “1-401–349—90–88”<br><strong>输出：</strong> [1,401,null,349,88,90]</p></blockquote><p><strong>提示：</strong></p><ul><li>原始树中的节点数介于 <code>1</code> 和 <code>1000</code> 之间。</li><li>每个节点的值介于 <code>1</code> 和 <code>10 ^ 9</code> 之间。</li></ul><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>好感动。。我也只能写得出这样的困难题了。</p><p>用栈来模拟DFS的过程，并记录当前节点的深度和上一个节点的深度，如果当前节点的深度 = 上一个节点的深度+1，那么说明当前节点是上一个节点的子节点，否则需要将栈中的元素弹出。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> TreeNode <span class="token function">recoverFromPreorder</span><span class="token punctuation">(</span>String S<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> prevDepth <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> S<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        TreeNode root <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 是数字</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>Character<span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                num <span class="token operator">=</span> num<span class="token operator">*</span><span class="token number">10</span><span class="token operator">+</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 若是一个数字的结尾字符</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span>chars<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token operator">!</span>Character<span class="token punctuation">.</span><span class="token function">isDigit</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    TreeNode node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 如果depth为0，记录当前节点为根节点</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>depth <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> root <span class="token operator">=</span> node<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 如果depth不等于prevDepth+1，说明该节点不是上一个节点的子节点，需要从栈中弹出相应的元素个数</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>depth <span class="token operator">!=</span> prevDepth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span>prevDepth<span class="token operator">+</span><span class="token number">1</span><span class="token operator">-</span>depth<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span>                            stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token comment" spellcheck="true">// 将该节点添加到上一个节点的子节点</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        TreeNode prev <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>prev<span class="token punctuation">.</span>left <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>                            prev<span class="token punctuation">.</span>left <span class="token operator">=</span> node<span class="token punctuation">;</span>                        <span class="token punctuation">}</span><span class="token keyword">else</span> prev<span class="token punctuation">.</span>right <span class="token operator">=</span> node<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>                    num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    prevDepth <span class="token operator">=</span> depth<span class="token punctuation">;</span>                    depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 是中划线，深度+1</span>            <span class="token keyword">else</span> depth <span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;我们从二叉树的根节点 &lt;code&gt;root&lt;/code&gt; 开始进行深度优先搜索。&lt;/p&gt;
&lt;p&gt;在遍历中的每个节点处，我们输出 &lt;code&gt;D&lt;/code&gt; 条短划线（其中 &lt;code&gt;D&lt;/code&gt; 是该节点的深度），然后输出该
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode1014-最佳观光组合</title>
    <link href="https://www.codetool.top/article/leetcode1014-%E6%9C%80%E4%BD%B3%E8%A7%82%E5%85%89%E7%BB%84%E5%90%88/"/>
    <id>https://www.codetool.top/article/leetcode1014-最佳观光组合/</id>
    <published>2020-06-17T09:46:36.000Z</published>
    <updated>2020-06-17T09:55:42.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定正整数数组 <code>A</code>，<code>A[i]</code> 表示第 <code>i</code> 个观光景点的评分，并且两个景点 <code>i</code> 和 <code>j</code> 之间的距离为 <code>j - i</code>。</p><p>一对景点（<code>i &lt; j</code>）组成的观光组合的得分为（<code>A[i] + A[j] + i - j</code>）：景点的评分之和<strong>减去</strong>它们两者之间的距离。</p><p>返回一对观光景点能取得的最高分。</p><p><strong>示例:</strong></p><blockquote><p><strong>输入：</strong> [8,1,5,2,6]<br><strong>输出：</strong> 11<br><strong>解释：</strong> i = 0, j = 2, A[i] + A[j] + i - j = 8 + 5 + 0 - 2 = 11</p></blockquote><p><strong>提示：</strong></p><ol><li><code>2 &lt;= A.length &lt;= 50000</code></li><li><code>1 &lt;= A[i] &lt;= 1000</code></li></ol><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p><code>A[i] + A[j] + i - j</code>可以视作<code>A[i] + i</code>+<code>A[j] - j</code>。</p><p>那么可以一次遍历，用一个变量max，记录遍历中出现的最大的<code>A[i] + i</code>，并与遍历过程中出现的<code>A[j] - j</code>相加，比较出<code>A[i] + i</code>+<code>A[j] - j</code>的最大值。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxScoreSightseeingPair</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> A<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> ans <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> A<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> A<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            ans <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>ans<span class="token punctuation">,</span> max <span class="token operator">+</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> A<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定正整数数组 &lt;code&gt;A&lt;/code&gt;，&lt;code&gt;A[i]&lt;/code&gt; 表示第 &lt;code&gt;i&lt;/code&gt; 个观光景点的评分，并且两个景点 &lt;code&gt;i&lt;/code&gt; 和 &lt;code&gt;j&lt;/code&gt; 之间的距离为 &lt;
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode403-青蛙过河</title>
    <link href="https://www.codetool.top/article/leetcode403-%E9%9D%92%E8%9B%99%E8%BF%87%E6%B2%B3/"/>
    <id>https://www.codetool.top/article/leetcode403-青蛙过河/</id>
    <published>2020-06-16T03:30:26.000Z</published>
    <updated>2020-06-16T06:38:01.006Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>一只青蛙想要过河。 假定河流被等分为 x 个单元格，并且在每一个单元格内都有可能放有一石子（也有可能没有）。 青蛙可以跳上石头，但是不可以跳入水中。</p><p>给定石子的位置列表（用单元格序号升序表示）， <strong>请判定青蛙能否成功过河</strong>（即能否在最后一步跳至最后一个石子上）。 开始时， 青蛙默认已站在第一个石子上，并可以假定它第一步只能跳跃一个单位（即只能从单元格1跳至单元格2）。</p><p>如果青蛙上一步跳跃了 k 个单位，那么它接下来的跳跃距离只能选择为 k - 1、k 或 k + 1个单位。 另请注意，青蛙只能向前方（终点的方向）跳跃。</p><p><strong>请注意：</strong></p><ul><li>石子的数量 ≥ 2 且 &lt; 1100；</li><li>每一个石子的位置序号都是一个非负整数，且其 &lt; 2<sup>31</sup>；</li><li>第一个石子的位置永远是0。</li></ul><p><strong>示例 1:</strong></p><pre><strong>[0,1,3,5,6,8,12,17]</strong>总共有8个石子。第一个石子处于序号为0的单元格的位置, 第二个石子处于序号为1的单元格的位置,第三个石子在序号为3的单元格的位置， 以此定义整个数组...最后一个石子处于序号为17的单元格的位置。返回 <strong>true</strong>。即青蛙可以成功过河，按照如下方案跳跃： 跳1个单位到第2块石子, 然后跳2个单位到第3块石子, 接着 跳2个单位到第4块石子, 然后跳3个单位到第6块石子, 跳4个单位到第7块石子, 最后，跳5个单位到第8个石子（即最后一块石子）。</pre><p><strong>示例 2:</strong></p><pre><strong>[0,1,2,3,4,8,9,11]</strong>返回 <strong>false。</strong>青蛙没有办法过河。 这是因为第5和第6个石子之间的间距太大，没有可选的方案供青蛙跳跃过去。</pre><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>见代码部分</p><h2 id="代码">2.2 代码</h2><p>记忆化搜索+二分查找：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stones<span class="token punctuation">;</span>    Boolean canCross<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canCross</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stones<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>stones <span class="token operator">=</span> stones<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>stones<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> stones<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        canCross <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> step<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> step <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>canCross<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>step<span class="token punctuation">]</span><span class="token operator">!=</span>null<span class="token punctuation">)</span> <span class="token keyword">return</span> canCross<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>step<span class="token punctuation">]</span><span class="token punctuation">;</span>        Boolean result <span class="token operator">=</span> k <span class="token operator">==</span> stones<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span>             <span class="token function">dfs</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>stones<span class="token punctuation">,</span> stones<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>stones<span class="token punctuation">,</span> stones<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>step<span class="token punctuation">)</span><span class="token punctuation">,</span> step<span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>stones<span class="token punctuation">,</span> stones<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>step<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> step<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        canCross<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span>step<span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>使用这种方法特别骚的是，我看到有人交了下面这段代码成为了全站最快题解：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canCross</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stones<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> stones<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>stones<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> stones<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> i<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>stones<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stones<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> step<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> step <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> k <span class="token operator">==</span> stones<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>stones<span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>stones<span class="token punctuation">,</span> stones<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>stones<span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>stones<span class="token punctuation">,</span> stones<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>step<span class="token punctuation">)</span><span class="token punctuation">,</span> step<span class="token punctuation">)</span> <span class="token operator">||</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>stones<span class="token punctuation">,</span> Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>stones<span class="token punctuation">,</span> stones<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">+</span>step<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> step<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这个写法甚至没有对搜索结果进行记忆化处理。只是因为一开始顺序遍历一遍排除了一些步数不可能达到的情况，然后进行搜索，但是可能由于测试用例大多都是因为这个原因而判错。并且配合这种搜索算法可能比较巧，使得很多用例都快速通过了。</p><p>记忆化递归一般都能转换为动态规划，并且能避免一些递归调用带来的复杂度，因此一般都会更快，然而对于这道题，由于动态规划没有二分的优化，导致动态规划实际更慢一些：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">canCross</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stones<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> stones<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> step <span class="token operator">=</span> stones<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> stones<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>step<span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">||</span>step<span class="token operator">></span>n<span class="token operator">||</span><span class="token operator">!</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>step<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>step<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>step <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>step<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>step <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> n<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>step<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;一只青蛙想要过河。 假定河流被等分为 x 个单元格，并且在每一个单元格内都有可能放有一石子（也有可能没有）。 青蛙可以跳上石头，但是不可以跳入水中。&lt;/p&gt;
&lt;p&gt;给定石子的位置列表（用单元格序号升序表示）， &lt;strong&gt;请判定
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode123-买卖股票的最佳时机III</title>
    <link href="https://www.codetool.top/article/leetcode123-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAIII/"/>
    <id>https://www.codetool.top/article/leetcode123-买卖股票的最佳时机III/</id>
    <published>2020-06-16T03:07:55.000Z</published>
    <updated>2020-06-16T03:31:42.431Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。</p><p>设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。</p><p><strong>注意:</strong> 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> [3,3,5,0,0,3,1,4]<br><strong>输出:</strong> 6<br><strong>解释:</strong> 在第 4 天（股票价格 = 0）的时候买入，在第 6 天（股票价格 = 3）的时候卖出，这笔交易所能获得利润 = 3-0 = 3 。<br>     随后，在第 7 天（股票价格 = 1）的时候买入，在第 8 天 （股票价格 = 4）的时候卖出，这笔交易所能获得利润 = 4-1 = 3 。</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> [1,2,3,4,5]<br><strong>输出:</strong> 4<br><strong>解释:</strong> 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。<br>    注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。<br>    因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。</p></blockquote><p><strong>示例 3:</strong></p><blockquote><p><strong>输入:</strong> [7,6,4,3,1]<br><strong>输出:</strong> 0<br><strong>解释:</strong> 在这个情况下, 没有交易完成, 所以最大利润为 0。</p></blockquote><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>可以看这篇题解学习一下这种多维动态规划的思想：<a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/solution/yi-ge-tong-yong-fang-fa-tuan-mie-6-dao-gu-piao-wen/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock-iii/solution/yi-ge-tong-yong-fang-fa-tuan-mie-6-dao-gu-piao-wen/</a></p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>prices<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 第一个维度代表当前是第几天，第二个维度是已买入几次，第三个维度是当前是否持有股票。</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> k <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> k<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>prices<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定一个数组，它的第 i 个元素是一支给定的股票在第 i 天的价格。&lt;/p&gt;
&lt;p&gt;设计一个算法来计算你所能获取的最大利润。你最多可以完成 两笔 交易。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt; 你不能同时参与多笔交易
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode83-删除排序链表中的重复元素</title>
    <link href="https://www.codetool.top/article/leetcode83-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"/>
    <id>https://www.codetool.top/article/leetcode83-删除排序链表中的重复元素/</id>
    <published>2020-06-16T01:40:05.000Z</published>
    <updated>2020-06-16T01:45:59.653Z</updated>
    
    <content type="html"><![CDATA[<p>今天打算多刷几道算法题</p><h1 id="原题">1 原题</h1><p>给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> 1-&gt;1-&gt;2<br><strong>输出:</strong> 1-&gt;2</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> 1-&gt;1-&gt;2-&gt;3-&gt;3<br><strong>输出:</strong> 1-&gt;2-&gt;3</p></blockquote><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>较简单</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ListNode <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>ListNode head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ListNode cur <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>cur <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> cur<span class="token punctuation">.</span>next <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>cur<span class="token punctuation">.</span>val <span class="token operator">==</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>val<span class="token punctuation">)</span> <span class="token punctuation">{</span>                cur<span class="token punctuation">.</span>next <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                cur <span class="token operator">=</span> cur<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天打算多刷几道算法题&lt;/p&gt;
&lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定一个排序链表，删除所有重复的元素，使得每个元素只出现一次。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;/st
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer44-数字序列中某一位的数字</title>
    <link href="https://www.codetool.top/article/%E5%89%91%E6%8C%87offer44-%E6%95%B0%E5%AD%97%E5%BA%8F%E5%88%97%E4%B8%AD%E6%9F%90%E4%B8%80%E4%BD%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
    <id>https://www.codetool.top/article/剑指offer44-数字序列中某一位的数字/</id>
    <published>2020-06-15T03:52:01.000Z</published>
    <updated>2020-06-15T03:56:52.738Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题（来源Leetcode）">1 原题（来源Leetcode）</h1><p>数字以0123456789101112131415…的格式序列化到一个字符序列中。在这个序列中，第5位（从下标0开始计数）是5，第13位是1，第19位是4，等等。</p><p>请写一个函数，求任意第n位对应的数字。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> n = 3<br><strong>输出:</strong> 3 </p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> n = 11<br><strong>输出:</strong> 0  </p></blockquote><p><strong>限制:</strong></p><ul><li><code>0 &lt;= n &lt; 2^31</code></li></ul><p>注意：本题与主站 400 题相同：<a href="https://leetcode-cn.com/problems/nth-digit/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/nth-digit/</a></p><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><ol><li>确定下标处在几位数区间（10,11…99两位数区间，100,101…999三位数区间，…)</li><li>确定下标在该区间的第几个数上（如：101是三位数区间的第2个数）</li><li>计算下标所处的实际数字以及在第几位</li></ol><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findNthDigit</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 防止溢出</span>        <span class="token keyword">long</span> base <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> k <span class="token operator">=</span> <span class="token number">90</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> num_n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>n<span class="token operator">>=</span>base<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">long</span> newBase <span class="token operator">=</span> k<span class="token operator">*</span>num_n<span class="token operator">+</span>base<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">&lt;=</span>newBase<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">long</span> count <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">-</span>base<span class="token punctuation">)</span><span class="token operator">/</span>num_n<span class="token punctuation">;</span>                <span class="token keyword">long</span> in_count <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token operator">-</span>base<span class="token punctuation">)</span><span class="token operator">%</span>num_n<span class="token punctuation">;</span>                <span class="token keyword">long</span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span>num_n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>count<span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> in_count<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            base <span class="token operator">=</span> newBase<span class="token punctuation">;</span>            k <span class="token operator">=</span> k<span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">;</span>            num_n<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题（来源Leetcode）&quot;&gt;1 原题（来源Leetcode）&lt;/h1&gt;&lt;p&gt;数字以0123456789101112131415…的格式序列化到一个字符序列中。在这个序列中，第5位（从下标0开始计数）是5，第13位是1，第19位是4，等等。&lt;/p&gt;
&lt;p&gt;请写一
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="https://www.codetool.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>leetcode1300-转变数组后最接近目标值的数组和</title>
    <link href="https://www.codetool.top/article/leetcode1300-%E8%BD%AC%E5%8F%98%E6%95%B0%E7%BB%84%E5%90%8E%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9B%AE%E6%A0%87%E5%80%BC%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8C/"/>
    <id>https://www.codetool.top/article/leetcode1300-转变数组后最接近目标值的数组和/</id>
    <published>2020-06-14T03:32:41.000Z</published>
    <updated>2020-06-14T03:54:59.065Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给你一个整数数组 <code>arr</code> 和一个目标值 <code>target</code> ，请你返回一个整数 <code>value</code> ，使得将数组中所有大于 <code>value</code> 的值变成 <code>value</code> 后，数组的和最接近  <code>target</code> （最接近表示两者之差的绝对值最小）。</p><p>如果有多种使得和最接近 <code>target</code> 的方案，请你返回这些整数中的最小值。</p><p>请注意，答案不一定是 <code>arr</code> 中的数字。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入：</strong> arr = [4,9,3], target = 10<br><strong>输出：</strong> 3<br><strong>解释：</strong> 当选择 value 为 3 时，数组会变成 [3, 3, 3]，和为 9 ，这是最接近 target 的方案。  </p></blockquote><p><strong>示例 2：</strong></p><blockquote><p><strong>输入：</strong> arr = [2,3,5], target = 10<br><strong>输出：</strong> 5</p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> arr = [60864,25176,27249,21296,20204], target = 56803<br><strong>输出：</strong> 11361</p></blockquote><p><strong>提示：</strong></p><ul><li><code>1 &lt;= arr.length &lt;= 10^4</code></li><li><code>1 &lt;= arr[i], target &lt;= 10^5</code></li></ul><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>先排序，然后遍历累加，如果到某个元素的时候，若后面都加这个数，总和会大于target，说明这个数及后面的数都应该被削减。削减的值算一下平均数就好。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findBestValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//已算入的总和</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> leftCount <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token punctuation">;</span>            <span class="token keyword">int</span> extra <span class="token operator">=</span> sum<span class="token operator">+</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>leftCount<span class="token operator">-</span>target<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>extra<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 算一个后面累加最接近target的平均值</span>                <span class="token keyword">return</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>extra<span class="token operator">/</span>leftCount<span class="token operator">-</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token punctuation">(</span>extra<span class="token operator">%</span>leftCount<span class="token punctuation">)</span><span class="token operator">>=</span>leftCount<span class="token operator">?</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sum<span class="token operator">+=</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> arr<span class="token punctuation">[</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给你一个整数数组 &lt;code&gt;arr&lt;/code&gt; 和一个目标值 &lt;code&gt;target&lt;/code&gt; ，请你返回一个整数 &lt;code&gt;value&lt;/code&gt; ，使得将数组中所有大于 &lt;code&gt;value&lt;/code&gt; 的值变
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer35-复杂链表的复制</title>
    <link href="https://www.codetool.top/article/%E5%89%91%E6%8C%87offer35-%E5%A4%8D%E6%9D%82%E9%93%BE%E8%A1%A8%E7%9A%84%E5%A4%8D%E5%88%B6/"/>
    <id>https://www.codetool.top/article/剑指offer35-复杂链表的复制/</id>
    <published>2020-06-13T11:26:19.000Z</published>
    <updated>2020-06-18T03:37:33.445Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题（来源Leetcode）">1 原题（来源Leetcode）</h1><p>请实现 <code>copyRandomList</code> 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 <code>next</code> 指针指向下一个节点，还有一个 <code>random</code> 指针指向链表中的任意节点或者 <code>null</code>。</p><p><strong>示例 1:</strong></p><p><img src="https://api.codetool.top/img/15924514074768.png" alt></p><blockquote><p><strong>输入:</strong> head = [[7,null],[13,0],[11,4],[10,2],[1,0]]<br><strong>输出:</strong> [[7,null],[13,0],[11,4],[10,2],[1,0]]  </p></blockquote><p><strong>示例 2:</strong></p><p><img src="https://api.codetool.top/img/15924514252157.png" alt></p><blockquote><p><strong>输入:</strong> head = [[1,1],[2,1]]<br><strong>输出:</strong> [[1,1],[2,1]]  </p></blockquote><p><strong>示例 3:</strong></p><p><img src="https://api.codetool.top/img/1592451441117.png" alt></p><blockquote><p><strong>输入：</strong> head = [[3,null],[3,0],[3,null]]<br><strong>输出：</strong> [[3,null],[3,0],[3,null]]  </p></blockquote><p><strong>示例 4：</strong></p><blockquote><p><strong>输入：</strong> head = []<br><strong>输出：</strong> []<br><strong>解释：</strong> 给定的链表为空（空指针），因此返回 null。</p></blockquote><p><strong>提示:</strong></p><ul><li><code>-10000 &lt;= Node.val &lt;= 10000</code></li><li><code>Node.random</code> 为空（null）或指向链表中的节点。</li><li>节点数目不超过 1000 。</li></ul><p><strong>注意：</strong> 本题与主站 138 题相同：<a href="https://leetcode-cn.com/problems/copy-list-with-random-pointer/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/copy-list-with-random-pointer/</a></p><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>我第一个想到的居然是Spring IOC解决循环依赖的思想。。先扫描一遍把节点都缓存下来，并用HashMap记录新旧节点的对应关系，然后再扫描一遍设置random节点。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> Node <span class="token function">copyRandomList</span><span class="token punctuation">(</span>Node head<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>Node<span class="token punctuation">,</span>Node<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Node sentinel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Node curOld <span class="token operator">=</span> head<span class="token punctuation">;</span>        Node curNew <span class="token operator">=</span> sentinel<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>curOld<span class="token operator">!=</span>null <span class="token punctuation">)</span><span class="token punctuation">{</span>            Node copy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span>curOld<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            curNew<span class="token punctuation">.</span>next <span class="token operator">=</span> copy<span class="token punctuation">;</span>            curNew <span class="token operator">=</span> copy<span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>curOld<span class="token punctuation">,</span>copy<span class="token punctuation">)</span><span class="token punctuation">;</span>            curOld <span class="token operator">=</span> curOld<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Node<span class="token punctuation">,</span>Node<span class="token operator">></span> entry<span class="token operator">:</span>map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Node old <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span>random <span class="token operator">!=</span> null<span class="token punctuation">)</span>                map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>old<span class="token punctuation">)</span><span class="token punctuation">.</span>random <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>old<span class="token punctuation">.</span>random<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sentinel<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题（来源Leetcode）&quot;&gt;1 原题（来源Leetcode）&lt;/h1&gt;&lt;p&gt;请实现 &lt;code&gt;copyRandomList&lt;/code&gt; 函数，复制一个复杂链表。在复杂链表中，每个节点除了有一个 &lt;code&gt;next&lt;/code&gt; 指针指向下一个节点，还有一
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="https://www.codetool.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>leetcode32-最长有效括号</title>
    <link href="https://www.codetool.top/article/leetcode32-%E6%9C%80%E9%95%BF%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7/"/>
    <id>https://www.codetool.top/article/leetcode32-最长有效括号/</id>
    <published>2020-06-12T07:40:04.000Z</published>
    <updated>2020-06-12T10:05:28.196Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定一个只包含 <code>&#39;(&#39;</code> 和 <code>&#39;)&#39;</code> 的字符串，找出最长的包含有效括号的子串的长度。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> “(()”<br><strong>输出:</strong> 2<br><strong>解释:</strong> 最长有效括号子串为 “()”</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> “)()())”<br><strong>输出:</strong> 4<br><strong>解释:</strong> 最长有效括号子串为 “()()” </p></blockquote><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>见代码部分</p><h2 id="代码">2.2 代码</h2><p>动态规划解法：</p><p><code>dp[i]</code>代表截至到某个元素的包含有效括号的子串的最长长度（必须包含该字符）。</p><p>那么若<code>s.charAt(i) == &#39;(&#39;</code>，则<code>dp[i]</code>必为0。若<code>s.charAt(i) == &#39;)&#39;</code>，分情况：</p><ul><li><code>s.charAt(i-1) == &#39;(&#39;</code>，则字符串是<code>...()</code>的形式，此时的<code>dp[i] == dp[i-2]+2</code>。</li><li><code>s.charAt(i-1) == &#39;)&#39;</code>，则字符串是<code>...))</code>的形式，此时要看与<code>s.charAt(i-1)</code>相匹配的左括号的前一个字符是否为<code>(</code>，若是，则<code>dp[i] == dp[i-1]+2+dp[prev-1]</code>，若不是，则<code>dp[i] == 0</code>。</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>dp<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> prev <span class="token operator">=</span> i<span class="token operator">>=</span><span class="token number">2</span><span class="token operator">?</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> prev <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>max<span class="token punctuation">)</span> max <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                    <span class="token keyword">int</span> prev <span class="token operator">=</span> i<span class="token operator">-</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>prev<span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>prev<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>prev<span class="token operator">==</span><span class="token number">0</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>dp<span class="token punctuation">[</span>prev<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>max<span class="token punctuation">)</span> max <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>栈的解法需要一些精妙的设计，要保证栈底必须有一个元素（始终留下一个最左边没参与匹配的下标在栈内）：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">longestValidParentheses</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Stack<span class="token operator">&lt;</span>Integer<span class="token operator">></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'('</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> i <span class="token operator">-</span> stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定一个只包含 &lt;code&gt;&amp;#39;(&amp;#39;&lt;/code&gt; 和 &lt;code&gt;&amp;#39;)&amp;#39;&lt;/code&gt; 的字符串，找出最长的包含有效括号的子串的长度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer47-礼物的最大价值</title>
    <link href="https://www.codetool.top/article/%E5%89%91%E6%8C%87offer47-%E7%A4%BC%E7%89%A9%E7%9A%84%E6%9C%80%E5%A4%A7%E4%BB%B7%E5%80%BC/"/>
    <id>https://www.codetool.top/article/剑指offer47-礼物的最大价值/</id>
    <published>2020-06-12T06:46:17.000Z</published>
    <updated>2020-06-12T06:48:33.450Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题（来源Leetcode）">1 原题（来源Leetcode）</h1><p>在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个棋盘及其上面的礼物的价值，请计算你最多能拿到多少价值的礼物？</p><p><strong>示例 1:</strong></p><pre><strong>输入:</strong> <code>[&nbsp; [1,3,1],&nbsp; [1,5,1],&nbsp; [4,2,1]]</code><strong>输出:</strong> <code>12</code><strong>解释:</strong> 路径 1→3→5→2→1 可以拿到最多价值的礼物</pre><p>提示:</p><ul><li><code>0 &lt; grid.length &lt;= 200</code></li><li><code>0 &lt; grid[0].length &lt;= 200</code></li></ul><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>动态规划：<code>value[i][j] = Math.max(top,left)+grid[i][j]</code>，正好层次顺序扫描一遍就行。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxValue</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> height <span class="token operator">=</span> grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> width <span class="token operator">=</span> grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>height<span class="token punctuation">]</span><span class="token punctuation">[</span>width<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>height<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>width<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> top <span class="token operator">=</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>value<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> left <span class="token operator">=</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token operator">?</span><span class="token number">0</span><span class="token operator">:</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span>left<span class="token punctuation">)</span><span class="token operator">+</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> value<span class="token punctuation">[</span>height<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>width<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题（来源Leetcode）&quot;&gt;1 原题（来源Leetcode）&lt;/h1&gt;&lt;p&gt;在一个 m*n 的棋盘的每一格都放有一个礼物，每个礼物都有一定的价值（价值大于 0）。你可以从棋盘的左上角开始拿格子里的礼物，并每次向右或者向下移动一格、直到到达棋盘的右下角。给定一个
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="https://www.codetool.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer45-把数组排成最小的数</title>
    <link href="https://www.codetool.top/article/%E5%89%91%E6%8C%87offer45-%E6%8A%8A%E6%95%B0%E7%BB%84%E6%8E%92%E6%88%90%E6%9C%80%E5%B0%8F%E7%9A%84%E6%95%B0/"/>
    <id>https://www.codetool.top/article/剑指offer45-把数组排成最小的数/</id>
    <published>2020-06-11T13:23:51.000Z</published>
    <updated>2020-06-11T13:27:14.163Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题（来源Leetcode）">1 原题（来源Leetcode）</h1><p>输入一个非负整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> [10,2]<br><strong>输出:</strong> “102”</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> [3,30,34,5,9]<br><strong>输出:</strong> “3033459”</p></blockquote><p><strong>提示:</strong></p><ul><li><code>0 &lt; nums.length &lt;= 100</code></li></ul><p><strong>说明:</strong></p><ul><li>输出结果可能非常大，所以你需要返回一个字符串而不是整数</li><li>拼接起来的数字可能会有前导 0，最后结果不需要去掉前导 0</li></ul><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>将数组排序，类似于动态规划的思想，两个数之间相互连接比较一下。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> String <span class="token function">minNumber</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> strings <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            strings<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>strings<span class="token punctuation">,</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            String link1 <span class="token operator">=</span> s1<span class="token operator">+</span>s2<span class="token punctuation">;</span>            String link2 <span class="token operator">=</span> s2<span class="token operator">+</span>s1<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>link1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>link1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">!=</span>link2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> link1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">-</span>link2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String i<span class="token operator">:</span>strings<span class="token punctuation">)</span><span class="token punctuation">{</span>            sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题（来源Leetcode）&quot;&gt;1 原题（来源Leetcode）&lt;/h1&gt;&lt;p&gt;输入一个非负整数数组，把数组里所有数字拼接起来排成一个数，打印能拼接出的所有数字中最小的一个。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquot
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="https://www.codetool.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer50-第一个只出现一次的字符</title>
    <link href="https://www.codetool.top/article/%E5%89%91%E6%8C%87offer50-%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E5%AD%97%E7%AC%A6/"/>
    <id>https://www.codetool.top/article/剑指offer50-第一个只出现一次的字符/</id>
    <published>2020-06-10T14:39:58.000Z</published>
    <updated>2020-06-10T14:56:34.515Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题（来源Leetcode）">1 原题（来源Leetcode）</h1><p>在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。 s 只包含小写字母。</p><p><strong>示例:</strong></p><pre>s = "abaccdeff"返回 "b"s = "" 返回 " "</pre><p><strong>限制：</strong></p><p><code>0 &lt;= s 的长度 &lt;= 50000</code></p><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>既然是第一个只出现一次的字符，我觉得可以用LinkedHashMap，Entries是自然按照插入顺序排序的，遍历的时候也好找。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">firstUniqChar</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span>Integer<span class="token operator">></span> counts <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> i<span class="token operator">:</span>s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            counts<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>counts<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span>Integer<span class="token operator">>></span> entries <span class="token operator">=</span> counts<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span>Integer<span class="token operator">></span> entry<span class="token operator">:</span>entries<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题（来源Leetcode）&quot;&gt;1 原题（来源Leetcode）&lt;/h1&gt;&lt;p&gt;在字符串 s 中找出第一个只出现一次的字符。如果没有，返回一个单空格。 s 只包含小写字母。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;s = &quot;aba
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="https://www.codetool.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>使用Netty+Docker重构我的在线运行代码项目</title>
    <link href="https://www.codetool.top/article/%E4%BD%BF%E7%94%A8Netty-Docker%E9%87%8D%E6%9E%84%E6%88%91%E7%9A%84%E5%9C%A8%E7%BA%BF%E8%BF%90%E8%A1%8C%E4%BB%A3%E7%A0%81%E9%A1%B9%E7%9B%AE/"/>
    <id>https://www.codetool.top/article/使用Netty-Docker重构我的在线运行代码项目/</id>
    <published>2020-06-10T13:05:46.000Z</published>
    <updated>2020-06-12T15:01:44.608Z</updated>
    
    <content type="html"><![CDATA[<h1 id="项目介绍">1 项目介绍</h1><p>很久很久以前，做过一个在线运行代码的项目，见：</p><p><a href="../在线运行C++、java、python代码的小项目实现">在线运行C++、java、python代码的小项目实现</a></p><p>做这个项目的初衷，是可以在博客里嵌入一段可运行的代码，提升阅读体验。不过后来发现，除了一些Java的基础知识，也没什么知识点是单个文件可以演示出来的，所以到后面用的就不多了。</p><p>不过还是一直想把这个项目更新重构一下，毕竟之前做的那个版本安全问题太严重了（只需要写一段空循环代码，就能让CPU长时间处于100%负载，甚至还可以通过文件API去控制修改我服务器上的一些文件，而我之前是一直把这个项目跑在主力服务器上的，只是因为我的博客访问量太小，也没什么人会用这个东西，而且即使会用通常也不会想着搞点破坏，才让我这个安全漏洞百出的项目跑了这么久）</p><h1 id="技术点">2 技术点</h1><p>重构之后，我使用了 <code>Netty + Websocket + Docker</code> 的技术点，<code>WebSocket</code>用于提升一些功能性，因为有一些代码的运行时间是可以很长的（例如循环输出代码），而用户不能等待很长一段时间都没有响应，于是可以通过<code>Websocket</code>在程序运行期间即时返回一些已输出信息。</p><p>之所以为什么选用<code>Netty</code>开发<code>Websocket</code>服务端，其实主流目前使用Java开发<code>Websocket</code>服务端的技术一般就是<code>Netty</code>和<code>SpringBoot</code>，我选用<code>Netty</code>一方面是考虑平时使用<code>Netty</code>开发不多，可以通过这次项目练习巩固一下。另一方面是因为，之前考虑着和同学配合，使用Java与Go实现后端功能，由Go语言来在服务器上运行代码，然后Java和Go后端（进程间通信）通过socket连接来实现，那么Netty正好也方便socket开发。</p><p>使用<code>Docker</code>的原因则是考虑安全性了，因为使用<code>Docker</code>可以实现隔离式地运行代码，每次运行一段代码都即时创建一个容器来完成，这样即使一次运行破坏了容器也没有关系，缺点就是创建容器比较消耗时间，响应时间比较长。而对于空循环消耗系统资源的情况，目前是考虑使用超时机制来保障安全，限制一段代码最多只能运行10秒，以后可以进一步进行优化。</p><h1 id="连接Docker的关键技术——docker-java">3 连接Docker的关键技术——docker-java</h1><p>Docker服务可以通过监听端口，通过TCP、HTTP连接暴露API，供远程调用。</p><p>maven依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.docker-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>docker-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>我学习这个的使用主要是通过下面这两篇文章：</p><ul><li><a href="https://blog.csdn.net/qq_36956154/article/details/81335886" target="_blank" rel="noopener">Docker-java在java中连接Docker（一）–简单连接_杨-CSDN博客_docker-java</a></li><li><a href="https://blog.csdn.net/qq_36956154/article/details/82180551" target="_blank" rel="noopener">Docker-java在java中连接Docker（二）–安全连接_杨-CSDN博客_docker-javax509</a></li></ul><p>主要是看第二篇文章，让服务器上的Docker服务暴露一个端口，供远程连接，并通过证书来保证安全连接。</p><h1 id="开发WebSocket服务端">4 开发WebSocket服务端</h1><p>这部分可以看以前的文章：<a href="../Netty心跳检测和基于Websocket协议的服务端开发">Netty心跳检测和基于Websocket协议的服务端开发</a></p><p>启动类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebsocketServer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token number">7000</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 绑定端口并启动服务器     * @param port     * @throws Exception     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception<span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//配置服务器的NIO线程组</span>        EventLoopGroup bossGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EventLoopGroup workerGroup <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">NioEventLoopGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            ServerBootstrap serverBootstrap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerBootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            serverBootstrap<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span>bossGroup<span class="token punctuation">,</span>workerGroup<span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span>NioServerSocketChannel<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">option</span><span class="token punctuation">(</span>ChannelOption<span class="token punctuation">.</span>SO_BACKLOG<span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">childHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebSocketChannelInitializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------服务器正在启动---------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ChannelFuture future <span class="token operator">=</span> serverBootstrap<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//等待服务端监听端口关闭</span>            future<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">closeFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            bossGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            workerGroup<span class="token punctuation">.</span><span class="token function">shutdownGracefully</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">WebsocketServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通道初始化：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WebSocketChannelInitializer</span> <span class="token keyword">extends</span> <span class="token class-name">ChannelInitializer</span><span class="token operator">&lt;</span>SocketChannel<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">initChannel</span><span class="token punctuation">(</span>SocketChannel ch<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//向管道加入处理器</span>        <span class="token comment" spellcheck="true">//得到管道</span>        ChannelPipeline pipeline <span class="token operator">=</span> ch<span class="token punctuation">.</span><span class="token function">pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//基于HTTP的编解码器</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpServerCodec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//以块方式传输数据</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ChunkedWriteHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//HTTP数据在传输过程中是分段，HttpObjectAggregator可以将多个段聚合</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HttpObjectAggregator</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将http协议升级为websocket协议，参数代表请求的uri</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebSocketServerProtocolHandler</span><span class="token punctuation">(</span><span class="token string">"/runcode"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pipeline<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextWebsocketFrameHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>自定义一个WebSocket帧的处理器：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TextWebsocketFrameHandler</span> <span class="token keyword">extends</span> <span class="token class-name">SimpleChannelInboundHandler</span><span class="token operator">&lt;</span>TextWebSocketFrame<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> DockerJavaClient dockerJavaClient <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DockerJavaClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 读取Websocket客户端发来的信息     * @param ctx     * @param msg     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">channelRead0</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> TextWebSocketFrame msg<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            CodeWrapper codeWrapper <span class="token operator">=</span> CodeWrapperUtil<span class="token punctuation">.</span><span class="token function">fromJson</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dockerJavaClient<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>CodeLang<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>codeWrapper<span class="token punctuation">.</span><span class="token function">getLangType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>codeWrapper<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ctx<span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"收到客户端信息："</span><span class="token operator">+</span>msg<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"执行过程中出现异常："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextWebSocketFrame</span><span class="token punctuation">(</span><span class="token string">"发生意外，运行出错！"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 建立连接     * @param ctx     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerAdded</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"与客户端建立连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 连接关闭     * @param ctx     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handlerRemoved</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"与客户端断开连接"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 捕获异常     * @param ctx     * @param cause     * @throws Exception     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exceptionCaught</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span> Throwable cause<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"异常发生"</span><span class="token operator">+</span>cause<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ctx<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//关闭连接</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="各种编程语言的枚举">5 各种编程语言的枚举</h1><p>直接看代码：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 编程语言及其相关属性的枚举 * @author RhettPeng */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> CodeLang <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * Python语言     */</span>    PYTHON3<span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">getImageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"python:3"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">getContainerNamePrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"python-running-script-"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getExecCommand</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">"python"</span><span class="token punctuation">,</span>fileName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"temp.py"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * C++语言     */</span>    CPP<span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">getImageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"gcc:7.3"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">getContainerNamePrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"cpp-running-file-"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getExecCommand</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">"g++"</span><span class="token punctuation">,</span>fileName<span class="token punctuation">,</span><span class="token string">"-o"</span><span class="token punctuation">,</span><span class="token string">"temp"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">"./temp"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"temp.cpp"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * JAVA语言     */</span>    JAVA<span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">getImageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"openjdk:11"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">getContainerNamePrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"java-running-file-"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getExecCommand</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// jdk11可以不经过javac</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">"java"</span><span class="token punctuation">,</span>fileName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"Untitled.java"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">/**     * Go语言     */</span>    GOLANG<span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">getImageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"golang:1.14"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">getContainerNamePrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"golang-running-file-"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getExecCommand</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// Go可不经过编译</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token string">"go"</span><span class="token punctuation">,</span><span class="token string">"run"</span><span class="token punctuation">,</span>fileName<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"temp.go"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String SRC_PATH <span class="token operator">=</span> <span class="token string">"/root/sourcecode/"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getImageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getContainerNamePrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 代表将一个文件运行起来需要执行的指令，供Docker EXEC调用</span>    <span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getExecCommand</span><span class="token punctuation">(</span>String fileName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> null<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这部分的功能，我一开始是考虑使用接口或枚举二者选其一来完成，后来还是选择了枚举，虽然使用接口实现更容易拓展，但枚举一可以实现单例，二能避免写很多冗杂的小类。</p><h1 id="Docker客户端的开发">6 Docker客户端的开发</h1><p>这个类是实现核心功能的类了，我一开始的思路是，在宿主机上创建几个用于存放用户源代码的目录，接收用户传来的代码后通过File API在宿主机上创建对应的文件，然后创建容器时通过数据卷绑定，让容器运行源文件。</p><p>但是这样的思路我在实现的时候遇到了一些问题，例如多个用户同时运行一段Java代码，会创建多个Java容器，由于多个容器之间是共享数据卷的，因此创建的文件名不能相同，否则会冲突，而Java文件的命名要求又必须和public类相同，因此会比较麻烦。</p><p>最终我通过创建容器的时候通过EXEC，直接将代码写入容器中的一个文件，而不经过宿主机，得到了更高的隔离性，不过这样也遇到了一些麻烦，比如我一开始是这样写的：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 将程序代码写入容器中的一个文件* @param dockerClient* @param containerId* @param langType* @param sourcecode* @return 文件名* @throws InterruptedException*/</span><span class="token keyword">private</span> String <span class="token function">writeFileToContainer</span><span class="token punctuation">(</span>DockerClient dockerClient<span class="token punctuation">,</span>String containerId<span class="token punctuation">,</span>CodeLang langType<span class="token punctuation">,</span>String sourcecode<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    String workDir <span class="token operator">=</span> <span class="token string">"/usr/src/myapp"</span><span class="token punctuation">;</span>    String fileName <span class="token operator">=</span> langType<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String path <span class="token operator">=</span> workDir <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> fileName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建一个指令请求</span>    ExecCreateCmdResponse createCmdResponse <span class="token operator">=</span> dockerClient<span class="token punctuation">.</span><span class="token function">execCreateCmd</span><span class="token punctuation">(</span>containerId<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 通过重定向符写入文件</span>            <span class="token punctuation">.</span><span class="token function">withCmd</span><span class="token punctuation">(</span><span class="token string">"echo"</span><span class="token punctuation">,</span> <span class="token string">"'"</span><span class="token operator">+</span>sourcecode<span class="token operator">+</span><span class="token string">"'"</span><span class="token punctuation">,</span> <span class="token string">">"</span> <span class="token punctuation">,</span> path<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 执行指令</span>    dockerClient<span class="token punctuation">.</span><span class="token function">execStartCmd</span><span class="token punctuation">(</span>createCmdResponse<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExecStartResultCallback</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token punctuation">,</span>System<span class="token punctuation">.</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">awaitCompletion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> fileName<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>主要思路是通过<code>echo</code>+重定向符，将源代码写入容器中的一个文件，但是这样写最终却发现没有创建任何文件!</p><p>后来通过搜索发现，<strong>使用<code>Docker EXEC</code>的时候，重定向符确实会失效，这是因为EXEC的环境其实不在用户SHELL中</strong>，如果要使用重定向符，需要这样修改：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/*** 将程序代码写入容器中的一个文件* @param dockerClient* @param containerId* @param langType* @param sourcecode* @return* @throws InterruptedException*/</span><span class="token keyword">private</span> String <span class="token function">writeFileToContainer</span><span class="token punctuation">(</span>DockerClient dockerClient<span class="token punctuation">,</span>String containerId<span class="token punctuation">,</span>CodeLang langType<span class="token punctuation">,</span>String sourcecode<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>    String workDir <span class="token operator">=</span> <span class="token string">"/usr/src/myapp"</span><span class="token punctuation">;</span>    String fileName <span class="token operator">=</span> langType<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String path <span class="token operator">=</span> workDir <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> fileName<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 通过重定向符写入文件，注意必须要带前面两个参数，否则重定向符会失效，和Docker CMD的机制有关</span>    ExecCreateCmdResponse createCmdResponse <span class="token operator">=</span> dockerClient<span class="token punctuation">.</span><span class="token function">execCreateCmd</span><span class="token punctuation">(</span>containerId<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">withCmd</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"echo '"</span><span class="token operator">+</span>sourcecode<span class="token operator">+</span><span class="token string">"' > "</span><span class="token operator">+</span>path<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dockerClient<span class="token punctuation">.</span><span class="token function">execStartCmd</span><span class="token punctuation">(</span>createCmdResponse<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExecStartResultCallback</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token punctuation">,</span>System<span class="token punctuation">.</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">awaitCompletion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> fileName<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>最终整个类：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author RhettPeng */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DockerJavaClient</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 计数器，用于给容器名取后缀     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取一个docker连接     * @return     */</span>    <span class="token keyword">public</span> DockerClient <span class="token function">getDockerClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        DockerCmdExecFactory dockerCmdExecFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JerseyDockerCmdExecFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withReadTimeout</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withConnectTimeout</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        DockerClientConfig config <span class="token operator">=</span> DefaultDockerClientConfig<span class="token punctuation">.</span><span class="token function">createDefaultConfigBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withDockerHost</span><span class="token punctuation">(</span><span class="token string">"tcp://8.129.170.210:2375"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withDockerTlsVerify</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withDockerCertPath</span><span class="token punctuation">(</span><span class="token string">"D:\\certs\\docker"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withDockerConfig</span><span class="token punctuation">(</span><span class="token string">"D:\\certs\\docker"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withRegistryUrl</span><span class="token punctuation">(</span><span class="token string">"https://index.docker.io/v1/"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withRegistryUsername</span><span class="token punctuation">(</span><span class="token string">"Rhett"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withRegistryPassword</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withRegistryEmail</span><span class="token punctuation">(</span><span class="token string">"995632825@qq.com"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> DockerClientBuilder<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withDockerCmdExecFactory</span><span class="token punctuation">(</span>dockerCmdExecFactory<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 创建运行代码的容器     * @param dockerClient     * @param langType     * @return     */</span>    <span class="token keyword">private</span> String <span class="token function">createContainer</span><span class="token punctuation">(</span>DockerClient dockerClient<span class="token punctuation">,</span>CodeLang langType<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建容器请求</span>        CreateContainerResponse containerResponse <span class="token operator">=</span> dockerClient<span class="token punctuation">.</span><span class="token function">createContainerCmd</span><span class="token punctuation">(</span>langType<span class="token punctuation">.</span><span class="token function">getImageName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withName</span><span class="token punctuation">(</span>langType<span class="token punctuation">.</span><span class="token function">getContainerNamePrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>counter<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withWorkingDir</span><span class="token punctuation">(</span><span class="token string">"/usr/src/myapp"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withStdinOpen</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> containerResponse<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将程序代码写入容器中的一个文件     * @param dockerClient     * @param containerId     * @param langType     * @param sourcecode     * @return     * @throws InterruptedException     */</span>    <span class="token keyword">private</span> String <span class="token function">writeFileToContainer</span><span class="token punctuation">(</span>DockerClient dockerClient<span class="token punctuation">,</span>String containerId<span class="token punctuation">,</span>CodeLang langType<span class="token punctuation">,</span>String sourcecode<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        String workDir <span class="token operator">=</span> <span class="token string">"/usr/src/myapp"</span><span class="token punctuation">;</span>        String fileName <span class="token operator">=</span> langType<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String path <span class="token operator">=</span> workDir <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> fileName<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过重定向符写入文件，注意必须要带前面两个参数，否则重定向符会失效，和Docker CMD的机制有关</span>        ExecCreateCmdResponse createCmdResponse <span class="token operator">=</span> dockerClient<span class="token punctuation">.</span><span class="token function">execCreateCmd</span><span class="token punctuation">(</span>containerId<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withCmd</span><span class="token punctuation">(</span><span class="token string">"/bin/sh"</span><span class="token punctuation">,</span><span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"echo '"</span><span class="token operator">+</span>sourcecode<span class="token operator">+</span><span class="token string">"' > "</span><span class="token operator">+</span>path<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dockerClient<span class="token punctuation">.</span><span class="token function">execStartCmd</span><span class="token punctuation">(</span>createCmdResponse<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExecStartResultCallback</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token punctuation">,</span>System<span class="token punctuation">.</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">awaitCompletion</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> fileName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 在容器上EXEC一条CMD命令     * @param dockerClient docker客户端     * @param command 命令，EXEC数组     * @param containerId 容器ID     * @param timeout 超时时间（单位为秒）     * @param ctx     * @param isFinal 是否是最后一条指令     * @throws InterruptedException     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">runCommandOnContainer</span><span class="token punctuation">(</span>DockerClient dockerClient<span class="token punctuation">,</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> command<span class="token punctuation">,</span> String containerId<span class="token punctuation">,</span>                                       <span class="token keyword">int</span> timeout<span class="token punctuation">,</span>ChannelHandlerContext ctx<span class="token punctuation">,</span><span class="token keyword">boolean</span> isFinal<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        ExecCreateCmdResponse createCmdResponse <span class="token operator">=</span> dockerClient<span class="token punctuation">.</span><span class="token function">execCreateCmd</span><span class="token punctuation">(</span>containerId<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withAttachStdout</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withAttachStderr</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withCmd</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dockerClient<span class="token punctuation">.</span><span class="token function">execStartCmd</span><span class="token punctuation">(</span>createCmdResponse<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RunCodeResultCallback</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span>isFinal<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">awaitCompletion</span><span class="token punctuation">(</span>timeout<span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 执行一个程序     * @param langType 编程语言类型     * @param sourcecode 源代码     * @throws InterruptedException     * @throws IOException     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exec</span><span class="token punctuation">(</span>CodeLang langType<span class="token punctuation">,</span> String sourcecode<span class="token punctuation">,</span> ChannelHandlerContext ctx<span class="token punctuation">)</span><span class="token punctuation">{</span>        DockerClient dockerClient <span class="token operator">=</span> <span class="token function">getDockerClient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 计数器加一</span>        counter<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建容器</span>        String containerId <span class="token operator">=</span> <span class="token function">createContainer</span><span class="token punctuation">(</span>dockerClient<span class="token punctuation">,</span> langType<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 运行容器</span>        dockerClient<span class="token punctuation">.</span><span class="token function">startContainerCmd</span><span class="token punctuation">(</span>containerId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token function">writeFileToContainer</span><span class="token punctuation">(</span>dockerClient<span class="token punctuation">,</span> containerId<span class="token punctuation">,</span> langType<span class="token punctuation">,</span> sourcecode<span class="token punctuation">)</span><span class="token punctuation">;</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> commands <span class="token operator">=</span> langType<span class="token punctuation">.</span><span class="token function">getExecCommand</span><span class="token punctuation">(</span>langType<span class="token punctuation">.</span><span class="token function">getFileName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>commands<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">runCommandOnContainer</span><span class="token punctuation">(</span>dockerClient<span class="token punctuation">,</span> commands<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> containerId<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> ctx<span class="token punctuation">,</span>i<span class="token operator">==</span>commands<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 移除容器</span>            dockerClient<span class="token punctuation">.</span><span class="token function">killContainerCmd</span><span class="token punctuation">(</span>containerId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dockerClient<span class="token punctuation">.</span><span class="token function">removeContainerCmd</span><span class="token punctuation">(</span>containerId<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            counter<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                dockerClient<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> exception<span class="token punctuation">)</span> <span class="token punctuation">{</span>                exception<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="将Docker的响应返回给用户">7 将Docker的响应返回给用户</h1><p>至于怎么将Docker的响应返回给用户，就是在EXEC执行指令的时候，通过一个结果回调，让它持有WebSocket处理器的一个引用，这样收到一个响应就能立刻返回给用户：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 接收到docker信息的回调 * @author RhettPeng */</span><span class="token annotation punctuation">@Slf4j</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RunCodeResultCallback</span> <span class="token keyword">extends</span> <span class="token class-name">ResultCallbackTemplate</span><span class="token operator">&lt;</span>ExecStartResultCallback<span class="token punctuation">,</span> Frame<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ChannelHandlerContext ctx<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">boolean</span> isFinal<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> startTime<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RunCodeResultCallback</span><span class="token punctuation">(</span>ChannelHandlerContext ctx<span class="token punctuation">,</span><span class="token keyword">boolean</span> isFinal<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ctx <span class="token operator">=</span> ctx<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>isFinal <span class="token operator">=</span> isFinal<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isFinal<span class="token punctuation">)</span> <span class="token punctuation">{</span>            startTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onNext</span><span class="token punctuation">(</span>Frame frame<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"收到docker响应"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>frame <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            String msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>frame<span class="token punctuation">.</span><span class="token function">getStreamType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">case</span> STDOUT<span class="token operator">:</span>                <span class="token keyword">case</span> RAW<span class="token operator">:</span>                <span class="token keyword">case</span> STDERR<span class="token operator">:</span>                    ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextWebSocketFrame</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">default</span><span class="token operator">:</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isFinal<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">long</span> endTime <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ctx<span class="token punctuation">.</span><span class="token function">channel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writeAndFlush</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextWebSocketFrame</span><span class="token punctuation">(</span><span class="token string">"程序运行结束，总耗费时间："</span><span class="token operator">+</span><span class="token punctuation">(</span>endTime<span class="token operator">-</span>startTime<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1000.0</span><span class="token operator">+</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;项目介绍&quot;&gt;1 项目介绍&lt;/h1&gt;&lt;p&gt;很久很久以前，做过一个在线运行代码的项目，见：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../在线运行C++、java、python代码的小项目实现&quot;&gt;在线运行C++、java、python代码的小项目实现&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;做
      
    
    </summary>
    
    
      <category term="项目/编程理论" scheme="https://www.codetool.top/categories/%E9%A1%B9%E7%9B%AE-%E7%BC%96%E7%A8%8B%E7%90%86%E8%AE%BA/"/>
    
    
      <category term="CodeMirror" scheme="https://www.codetool.top/tags/CodeMirror/"/>
    
      <category term="项目" scheme="https://www.codetool.top/tags/%E9%A1%B9%E7%9B%AE/"/>
    
      <category term="Docker" scheme="https://www.codetool.top/tags/Docker/"/>
    
      <category term="Netty" scheme="https://www.codetool.top/tags/Netty/"/>
    
  </entry>
  
  <entry>
    <title>程序员面试金典17.01-不用加号的加法</title>
    <link href="https://www.codetool.top/article/%E7%A8%8B%E5%BA%8F%E5%91%98%E9%9D%A2%E8%AF%95%E9%87%91%E5%85%B817-01-%E4%B8%8D%E7%94%A8%E5%8A%A0%E5%8F%B7%E7%9A%84%E5%8A%A0%E6%B3%95/"/>
    <id>https://www.codetool.top/article/程序员面试金典17-01-不用加号的加法/</id>
    <published>2020-06-09T05:26:22.000Z</published>
    <updated>2020-06-09T05:54:53.418Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题（来源Leetcode）">1 原题（来源Leetcode）</h1><p>设计一个函数把两个数字相加。不得使用 + 或者其他算术运算符。</p><p><strong>示例:</strong></p><blockquote><p><strong>输入:</strong> a = 1, b = 1<br><strong>输出:</strong> 2</p></blockquote><p><strong>提示：</strong></p><ul><li><code>a</code>, <code>b</code> 均可能是负数或 0</li><li>结果不会溢出 32 位整数</li></ul><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>位运算，如果把两个数看作二进制，异或之后的结果就是未算入进位部分的结果。而需要进位的数可以通过两个数的与运算得到。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>b <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            sum <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 异或计算未进位的部分</span>            carry <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 进位部分</span>            a <span class="token operator">=</span> sum<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 保存未进位部分，再次计算</span>            b <span class="token operator">=</span> carry<span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">// 保存进位部分，再次计算</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 最后无进位，异或的结果即加法结果</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题（来源Leetcode）&quot;&gt;1 原题（来源Leetcode）&lt;/h1&gt;&lt;p&gt;设计一个函数把两个数字相加。不得使用 + 或者其他算术运算符。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;输入:&lt;
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode990-等式方程的可满足性</title>
    <link href="https://www.codetool.top/article/leetcode990-%E7%AD%89%E5%BC%8F%E6%96%B9%E7%A8%8B%E7%9A%84%E5%8F%AF%E6%BB%A1%E8%B6%B3%E6%80%A7/"/>
    <id>https://www.codetool.top/article/leetcode990-等式方程的可满足性/</id>
    <published>2020-06-08T04:47:47.000Z</published>
    <updated>2020-06-08T05:03:23.854Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定一个由表示变量之间关系的字符串方程组成的数组，每个字符串方程 <code>equations[i]</code> 的长度为 <code>4</code>，并采用两种不同的形式之一：<code>&quot;a==b&quot;</code> 或 <code>&quot;a!=b&quot;</code>。在这里，a 和 b 是小写字母（不一定不同），表示单字母变量名。</p><p>只有当可以将整数分配给变量名，以便满足所有给定的方程时才返回 <code>true</code>，否则返回 <code>false</code>。 </p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入：</strong> [“a==b”,”b!=a”]<br><strong>输出：</strong> false<br><strong>解释：</strong> 如果我们指定，a = 1 且 b = 1，那么可以满足第一个方程，但无法满足第二个方程。没有办法分配变量同时满足这两个方程。</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入：</strong> [“b==a”,”a==b”]<br><strong>输出：</strong> true<br><strong>说明：</strong> 我们可以指定 a = 1 且 b = 1 以满足满足这两个方程。  </p></blockquote><p><strong>示例 3：</strong></p><blockquote><p><strong>输入：</strong> [“a==b”,”b==c”,”a==c”]<br><strong>输出：</strong> true</p></blockquote><p><strong>示例 4：</strong></p><blockquote><p><strong>输入：</strong> [“a==b”,”b!=c”,”c==a”]<br><strong>输出：</strong> false</p></blockquote><p><strong>示例 5：</strong></p><blockquote><p><strong>输入：</strong> [“c==c”,”b==d”,”x!=z”]<br><strong>输出：</strong> true</p></blockquote><p><strong>提示：</strong></p><ol><li><code>1 &lt;= equations.length &lt;= 500</code></li><li><code>equations[i].length == 4</code></li><li><code>equations[i][0]</code> 和 <code>equations[i][3]</code> 是小写字母</li><li><code>equations[i][1]</code> 要么是 <code>&#39;=&#39;</code>，要么是 <code>&#39;!&#39;</code></li><li><code>equations[i][2]</code> 是 <code>&#39;=&#39;</code></li></ol><h1 id="解法">2 解法</h1><p>本题解同步发于leetcode题解：<a href="https://leetcode-cn.com/problems/satisfiability-of-equality-equations/solution/jian-ji-de-javabing-cha-ji-by-codetool/" target="_blank" rel="noopener">简洁的Java并查集</a></p><h2 id="思想">2.1 思想</h2><p>见代码部分</p><h2 id="代码">2.2 代码</h2><p>我写的这个代码没有任何优化但是很简洁，使用的HashMap实现的并查集（如果不了解并查集建议先去学习一下哦，还是蛮实用的一个数据结构的）</p><p>比较重要的思路是一定要<strong>先将字符串方程按相等到不等来排序，相等的方程用于建立并查集，不等的方程用于判断是否出错（即不等的两个代数是否出现在了同一个集合中）。</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equationsPossible</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> equations<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 并查集</span>        Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span>Character<span class="token operator">></span> father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 先将字符串方程从相等到不等排序</span>        Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>equations<span class="token punctuation">,</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span>s2<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span>s2<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> s1<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token string">'='</span><span class="token operator">?</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String s<span class="token operator">:</span>equations<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> first <span class="token operator">=</span> chars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">char</span> second <span class="token operator">=</span> chars<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 获取根代表</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>father<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token punctuation">)</span> first <span class="token operator">=</span> father<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>father<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">)</span> second <span class="token operator">=</span> father<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果是不等，但根代表相同，说明出错</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>first <span class="token operator">==</span> second<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果是相等，跳过根代表相同的情况，把一个根代表连接到另一个根代表上（合并集合）</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>first <span class="token operator">==</span> second<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                father<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>刚看了下官方的题解并没有先排序，而是进行了两次遍历，第一次处理相等的，第二次处理不等的，确实比我写的时间复杂度要好，那么按这个思路修改之后就是：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equationsPossible</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> equations<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>Character<span class="token punctuation">,</span>Character<span class="token operator">></span> father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//建立并查集</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String s<span class="token operator">:</span>equations<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">char</span> first <span class="token operator">=</span> chars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">char</span> second <span class="token operator">=</span> chars<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>father<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token punctuation">)</span> first <span class="token operator">=</span> father<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>father<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">)</span> second <span class="token operator">=</span> father<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>first <span class="token operator">==</span> second<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                father<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span> second<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//检查是否有错</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String s<span class="token operator">:</span>equations<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>chars<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">char</span> first <span class="token operator">=</span> chars<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">char</span> second <span class="token operator">=</span> chars<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>father<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span> <span class="token punctuation">)</span> first <span class="token operator">=</span> father<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span><span class="token punctuation">(</span>father<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">)</span> second <span class="token operator">=</span> father<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>first <span class="token operator">==</span> second<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以发现有一些重复代码，如果抽取成一个函数会更简洁，还有哈希集可以写成数组，时间成本会更低一些，感兴趣的小伙伴自己试试优化啦(<em>^_^</em>)。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定一个由表示变量之间关系的字符串方程组成的数组，每个字符串方程 &lt;code&gt;equations[i]&lt;/code&gt; 的长度为 &lt;code&gt;4&lt;/code&gt;，并采用两种不同的形式之一：&lt;code&gt;&amp;quot;a==b&amp;quot;&lt;/
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>leetcode453-最小移动次数使数组元素相等</title>
    <link href="https://www.codetool.top/article/leetcode453-%E6%9C%80%E5%B0%8F%E7%A7%BB%E5%8A%A8%E6%AC%A1%E6%95%B0%E4%BD%BF%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%E7%9B%B8%E7%AD%89/"/>
    <id>https://www.codetool.top/article/leetcode453-最小移动次数使数组元素相等/</id>
    <published>2020-06-07T05:51:25.000Z</published>
    <updated>2020-06-07T05:58:41.412Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定一个长度为 n 的<strong>非空</strong>整数数组，找到让数组所有元素相等的最小移动次数。每次移动将会使 n - 1 个元素增加 1。</p><p><strong>示例:</strong></p><pre><strong>输入:</strong>[1,2,3]<strong>输出:</strong>3<strong>解释:</strong>只需要3次移动（注意每次移动会增加两个元素的值）：[1,2,3]  =&gt;  [2,3,3]  =&gt;  [3,4,3]  =&gt;  [4,4,4]</pre><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>根据峡谷相对论，给n-1个数加一，相当于给剩下的那个数减一</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">minMoves</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Integer min <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>min <span class="token operator">==</span> null <span class="token operator">||</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum <span class="token operator">-</span> min<span class="token operator">*</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定一个长度为 n 的&lt;strong&gt;非空&lt;/strong&gt;整数数组，找到让数组所有元素相等的最小移动次数。每次移动将会使 n - 1 个元素增加 1。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;s
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
