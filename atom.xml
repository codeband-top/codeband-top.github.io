<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>代码段小站</title>
  <icon>https://www.gravatar.com/avatar/4c71a513a84e4d430b9f9aed224237fc</icon>
  <subtitle>CodeTool - 个人计算机类练手小博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.codetool.top/"/>
  <updated>2020-03-10T13:44:12.838Z</updated>
  <id>https://www.codetool.top/</id>
  
  <author>
    <name>Rhett Peng</name>
    <email>pctdyx@qq.net</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringBoot开发RESTful API</title>
    <link href="https://www.codetool.top/article/SpringBoot%E5%BC%80%E5%8F%91RESTful%20API/"/>
    <id>https://www.codetool.top/article/SpringBoot开发RESTful API/</id>
    <published>2020-03-10T13:43:20.000Z</published>
    <updated>2020-03-10T13:44:12.838Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RESTful-API">1 RESTful API</h1><p>RESTful API是面向<strong>资源</strong>的，他认为一切URI皆资源，所以URI一定要是名词而不是动词，动词的含义通过请求方法来表达。有了资源还需要确定如何表现这个资源，例如JSON、XML，这就称为<strong>表现层。</strong></p><p><code>GET /getUserInfo?id=15</code>-&gt;<code>GET /users/15</code></p><p>也不要在URI中加入版本号，例如<code>/v1/users</code>，如果需要多版本的API，请在请求中带上版本号，例如<code>Accept: version = 1.0</code>。</p><p>概括：</p><ul><li>看URL就知道要什么资源</li><li>看http method就知道针对资源干什么</li><li>看http status code就知道结果如何</li></ul><p>常用请求方法：</p><ul><li>GET ： 获取、读取资源</li><li>POST ： 添加资源</li><li>PUT ： 修改资源</li><li>DELETE ： 删除资源</li></ul><p>基础状态码：</p><ul><li><code>200</code> OK </li><li><code>400</code> Bad Request </li><li><code>500</code> Internal Server Error</li></ul><p>通常200表示成功，400表示客户端错误（请求格式），500表示服务端错误（服务内部异常）</p><p>其他常用状态码：</p><ul><li><code>201</code> 已创建。成功请求并创建了新的资源</li><li><code>3xx</code> 代表的是重定向，例如301（永久移动）、303重定向、302（暂时移动）</li><li><code>401</code> 未通过身份认证</li><li><code>403</code> 拒绝服务该请求</li><li><code>409</code> 服务器完成客户端的 PUT 请求时可能返回此代码，服务器处理请求时发生了冲突</li><li><code>410</code> 资源曾经存在，但目前被永久删除。</li><li><code>502</code> 作为网关或者代理工作的服务器尝试执行请求时，从远程服务器接收到了一个无效的响应</li><li><code>504</code> 充当网关或代理的服务器，未及时从远端服务器获取请求</li></ul><p>其他状态码可以参考：</p><p><a href="https://www.runoob.com/http/http-status-codes.html" target="_blank" rel="noopener">HTTP状态码 | 菜鸟教程</a></p><h1 id="RESTful-API相关注解">2 RESTful API相关注解</h1><ul><li><code>@RestController</code>：代替<code>@Controller</code>+<code>@ResponseBody</code></li><li><code>@xxxMapping</code><ul><li><code>@GetMapping</code>：代替<code>@RequestMapping(...,method=GET)</code></li><li><code>@PostMapping</code>：代替<code>@RequestMapping(...,method=POST)</code></li><li><code>@PutMapping</code>：代替<code>@RequestMapping(...,method=PUT)</code></li><li><code>@DeleteMapping</code>：代替<code>@RequestMapping(...,method=DELETE)</code></li></ul></li><li><code>@PathVariable</code>：接收URL上的参数</li><li><code>@RequestParam</code>：接收请求体上的参数</li></ul><p>在<code>@xxxMapping</code>和<code>@RequestMapping</code>中，有两个属性需要关注：consumes和produces，可以为它们指定<code>MediaType</code>中的值来限定该方法接收什么类型的请求体和返回什么类型。</p><p><code>@PathVariable</code>示例：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//请求的url例如“/article/1”</span><span class="token annotation punctuation">@DeleteMapping</span><span class="token punctuation">(</span><span class="token string">"/article/{id}"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> AjaxResponse <span class="token function">deleteArticle</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> Long id<span class="token punctuation">)</span> <span class="token punctuation">{</span></code></pre><ul><li><code>@RequestBody</code>：接收请求体中的复杂数据并转为java对象</li></ul><p>JSON数据和Java对象自动通过HttpMessageConverter（这是一个接口，具体到JSON有Jackson提供的实现类）完成转换。</p><h1 id="处理HTTP状态码、异常和响应头">3 处理HTTP状态码、异常和响应头</h1><p>如果只用<code>@RestController</code>搭配方法返回String，那么显然只能关注响应体，如果需要处理HTTP状态码、方法中可能出现的异常和响应头，就需要额外的操作。</p><p>Spring提供了实体封装类<code>ResponseEntity</code>和注解<code>@ResponseStatus</code>。</p><p><code>ResponseEntity</code>可以有效地封装错误消息、响应头和状态码，<code>@ResponseStatus</code>相对功能更少，可以配置指定的状态码返回给客户端。（<code>HttpStatus</code>中枚举了许多状态码）</p><p>示例：（使用了lombok）</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@RestController</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/article"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArticleRestController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//增加一篇Article ，使用POST方法</span>    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>CREATED<span class="token punctuation">)</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> POST<span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">saveArticle</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> Article article<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"saveArticle：{}"</span><span class="token punctuation">,</span>article<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"{\"status\":1,\"msg\":\"success\"}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取一篇Article ，使用GET方法</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/{id}"</span><span class="token punctuation">,</span> method <span class="token operator">=</span> GET<span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token string">"application/json"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ResponseEntity<span class="token operator">&lt;</span>Article<span class="token operator">></span> <span class="token function">getArticle</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">long</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Article article <span class="token operator">=</span> Article<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">author</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">content</span><span class="token punctuation">(</span><span class="token string">"456"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">createTime</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">title</span><span class="token punctuation">(</span><span class="token string">"789"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpHeaders headers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpHeaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        headers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">,</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ResponseEntity</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>article<span class="token punctuation">,</span>headers<span class="token punctuation">,</span>HttpStatus<span class="token punctuation">.</span>OK<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>至于处理异常，需要两个注解：<code>@ControllerAdvice</code>和<code>@ExceptionHandler</code>。</p><p><code>@ControllerAdvice</code>的作用是给控制器增加通知，作用于类上，定义了一个控制器的通知类。</p><p><code>@ExceptionHandler</code>配合<code>@ControllerAdvice</code>使用定义控制器发生异常后的操作，一般来说，发生异常后，可以跳转到指定的错误页面，以避免用户使用的不友好。</p><p>示例（在MVC中）：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token punctuation">(</span>        <span class="token comment" spellcheck="true">//指定拦截的包</span>        basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.rhett.bootweb.controller.*"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">//被标注为@Controller的类才拦截</span>        annotations <span class="token operator">=</span> Controller<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorControllerAdvice</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span>    <span class="token keyword">public</span> String <span class="token function">exception</span><span class="token punctuation">(</span>Model model<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//给数据模型增加异常信息</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"exception_message"</span><span class="token punctuation">,</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//返回异常视图</span>        <span class="token keyword">return</span> <span class="token string">"exception"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>示例（在RESTful API中）：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token punctuation">(</span>        basePackages <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"com.rhett.bootweb.controller.*"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        annotations <span class="token operator">=</span> Controller<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorControllerAdvice</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token comment" spellcheck="true">//返回错误状态码</span>    <span class="token annotation punctuation">@ResponseStatus</span><span class="token punctuation">(</span>HttpStatus<span class="token punctuation">.</span>INTERNAL_SERVER_ERROR<span class="token punctuation">)</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> <span class="token function">exception</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span><span class="token punctuation">{</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> msgMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取异常信息</span>        msgMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span>ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        msgMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cause"</span><span class="token punctuation">,</span>ex<span class="token punctuation">.</span><span class="token function">getStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> msgMap<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>@ExceptionHandler</code>还可以指定一个value，为某一个具体Excepetion的class对象，只针对某一具体异常进行拦截。</p><p><code>@ControllerAdvice</code>还可以配合<code>@InitBinder</code>使用（在控制器参数转换前被执行的代码）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RESTful-API&quot;&gt;1 RESTful API&lt;/h1&gt;&lt;p&gt;RESTful API是面向&lt;strong&gt;资源&lt;/strong&gt;的，他认为一切URI皆资源，所以URI一定要是名词而不是动词，动词的含义通过请求方法来表达。有了资源还需要确定如何表现这个资源，例
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SpringBoot" scheme="https://www.codetool.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Spring声明式事务管理介绍</title>
    <link href="https://www.codetool.top/article/Spring%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E4%BB%8B%E7%BB%8D/"/>
    <id>https://www.codetool.top/article/Spring声明式事务管理介绍/</id>
    <published>2020-03-10T11:23:43.000Z</published>
    <updated>2020-03-10T11:34:33.255Z</updated>
    
    <content type="html"><![CDATA[<p>为了减少手动编写管理事务的语句，Spring利用AOP为我们提供了一个数据库事务的约定流程。</p><p>spring 框架为我们提供了一组事务控制的接口。这组接口是在<code>spring-tx-5.0.2.RELEASE.jar</code> 中。</p><p>对于事务,需要通过标注告诉Spring在什么地方启用数据库事务功能。对于声明式事务,是使用<code>@Transactional</code>进行标注的。这个注解可以标注在类或者方法上，<strong>当它标注在类上时，代表这个类所有公共(public)非静态的方法都将启用事务功能。</strong> 在<code>@Transactional</code>中,还允许配置许多的属性,如事务的隔离级别和传播行为、异常类型,从而确定方法发生什么异常下回滚事务或者发生什么异常下不回滚事务等。这些配置内容,是在 Spring IoC容器在加载时就会将这些配置信息解析出来,然后把这些信息存到事务定义器(TransactionDefinition接口的实现类）里,并且记录哪些类或者方法需要启动事务功能,采取什么策略去执行事务。这个过程中,我们所需要做的只是给需要事务的类或者方法标注<code>@Transactional</code>和配置其属性而已,并不是很复杂。</p><h1 id="Spring中的事务控制API介绍">1 Spring中的事务控制API介绍</h1><p>maven依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-tx<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.3.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>如果使用springboot可以配合jpa、mybatis，或者导入jdbc-starter，都会包含：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="PlatformTransactionManager">1.1 PlatformTransactionManager</h2><p>此接口是 spring 的事务管理器，它里面提供了我们常用的操作事务的方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PlatformTransactionManager</span> <span class="token keyword">extends</span> <span class="token class-name">TransactionManager</span> <span class="token punctuation">{</span>    TransactionStatus <span class="token function">getTransaction</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> TransactionDefinition definition<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*提交事务*/</span>    <span class="token keyword">void</span> <span class="token function">commit</span><span class="token punctuation">(</span>TransactionStatus status<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*回滚事务*/</span>    <span class="token keyword">void</span> <span class="token function">rollback</span><span class="token punctuation">(</span>TransactionStatus status<span class="token punctuation">)</span> <span class="token keyword">throws</span> TransactionException<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>我们在开发中都是使用它的实现类，对于Mybatis，我们用的就是<code>org.springframework.jdbc.datasource.DataSourceTransactionManager</code></p><h2 id="TransactionDefinition">1.2 TransactionDefinition</h2><p>它是事务的定义信息对象：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransactionDefinition</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//传播行为</span>    <span class="token keyword">int</span> PROPAGATION_REQUIRED <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> PROPAGATION_SUPPORTS <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> PROPAGATION_MANDATORY <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> PROPAGATION_REQUIRES_NEW <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> PROPAGATION_NOT_SUPPORTED <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> PROPAGATION_NEVER <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> PROPAGATION_NESTED <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//事务隔离级别</span>    <span class="token comment" spellcheck="true">//默认级别，可能是四个隔离级别中的一种</span>    <span class="token keyword">int</span> ISOLATION_DEFAULT <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//读未提交</span>    <span class="token keyword">int</span> ISOLATION_READ_UNCOMMITTED <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//读已提交</span>    <span class="token keyword">int</span> ISOLATION_READ_COMMITTED <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//重复读</span>    <span class="token keyword">int</span> ISOLATION_REPEATABLE_READ <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//串行化</span>    <span class="token keyword">int</span> ISOLATION_SERIALIZABLE <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> TIMEOUT_DEFAULT <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取事务传播行为</span>    <span class="token keyword">default</span> <span class="token keyword">int</span> <span class="token function">getPropagationBehavior</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取事务隔离级别</span>    <span class="token keyword">default</span> <span class="token keyword">int</span> <span class="token function">getIsolationLevel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取事务超时时间</span>    <span class="token keyword">default</span> <span class="token keyword">int</span> <span class="token function">getTimeout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取事务是否只读</span>    <span class="token keyword">default</span> <span class="token keyword">boolean</span> <span class="token function">isReadOnly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取事务对象名称</span>    <span class="token annotation punctuation">@Nullable</span>    <span class="token keyword">default</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> TransactionDefinition <span class="token function">withDefaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> StaticTransactionDefinition<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>具体事务的隔离级别介绍见：<a href="../数据库理论之事务与恢复技术">数据库理论之事务与恢复技术</a></p><p>对于事务的传播行为，有：</p><ul><li><code>REQUIRED</code>:如果当前没有事务，就新建一个事务，如果已经存在一个事务中，加入到这个事务中。一般的选择（默认值）</li><li><code>SUPPORTS</code>:支持当前事务，如果当前没有事务，就以非事务方式执行（没有事务）</li><li><code>MANDATORY</code>：使用当前的事务，如果当前没有事务，就抛出异常</li><li><code>REQUERS_NEW</code>:新建事务，如果当前在事务中，把当前事务挂起。</li><li><code>NOT_SUPPORTED</code>:以非事务方式执行操作，如果当前存在事务，就把当前事务挂起</li><li><code>NEVER</code>:以非事务方式运行，如果当前存在事务，抛出异常</li><li><code>NESTED</code>:如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则执行 REQUIRED 类似的操作。</li></ul><h2 id="TransactionStatus">1.3 TransactionStatus</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TransactionStatus</span> <span class="token keyword">extends</span> <span class="token class-name">TransactionExecution</span><span class="token punctuation">,</span> SavepointManager<span class="token punctuation">,</span> Flushable <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//是否有存储点</span>    <span class="token keyword">boolean</span> <span class="token function">hasSavepoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//刷新事务</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span> <span class="token function">flush</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>对于TransactionExecution，还具有<code>isNewTransaction()</code>：是不是新的事务，<code>setRollbackOnly()</code>：设置事务回滚，<code>isRollbackOnly()</code>：事务是否回滚等方法。</p><h1 id="XML配置事务管理">2 XML配置事务管理</h1><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>tx</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/tx<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span><span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beanshttp://www.springframework.org/schema/beans/spring-beans.xsdhttp://www.springframework.org/schema/aophttp://www.springframework.org/schema/aop/spring-aop.xsdhttp://www.springframework.org/schema/txhttp://www.springframework.org/schema/tx/spring-tx.xsdhttp://www.springframework.org/schema/contexthttp://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 省去DataSource配置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 事务的配置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>advice</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">transaction-manager</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>advice</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 指定方法名称：是业务核心方法    read-only：是否是只读事务。默认 false，不只读。    isolation：指定事务的隔离级别。默认值是使用数据库的默认隔离级别。    propagation：指定事务的传播行为。    timeout：指定超时时间。默认值为：-1。永不超时。    rollback-for：用于指定一个异常，当执行产生该异常时，事务回滚。产生其他异常，事务不回滚。    没有默认值，任何异常都回滚。    no-rollback-for：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时，事务回    滚。没有默认值，任何异常都回滚。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>REQUIRED<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">tx:</span>method</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>find*<span class="token punctuation">"</span></span> <span class="token attr-name">read-only</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">propagation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SUPPORTS<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">tx:</span>attributes</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 配置 aop --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 配置切入点表达式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>pointcut</span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>execution(* com.rhett.service.impl.*.*(..))<span class="token punctuation">"</span></span><span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">aop:</span>config</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 在 aop:config 标签内部：建立事务的通知和切入点表达式的关系 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">aop:</span>advisor</span> <span class="token attr-name">advice-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>txAdvice<span class="token punctuation">"</span></span> <span class="token attr-name">pointcut-ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pt1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h1 id="注解配置事务管理">3 注解配置事务管理</h1><ol><li><p>首先注入事务管理器bean，可以通过注解<code>@Bean</code>，如果使用spring-boot，无论是<code>mybatis-spring-boot-starter</code>还是jpa-starter，都会自动帮我们注入一个相关的实例对象，我们只需要使用注解<code>@Transactional</code>即可。</p></li><li><p>在配置类上开启注解事务支持：<code>@EnableTransactionManagement</code>，当然也得开启<code>@EnableAspectJAutoProxy</code>AOP支持</p></li><li><p>在业务层使用<code>@Transactional</code>注解，属性和xml中的类似。</p></li></ol><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token punctuation">(</span><span class="token string">"accountService"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>readOnly<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">,</span>propagation<span class="token operator">=</span>Propagation<span class="token punctuation">.</span>SUPPORTS<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> IAccountDao accountDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Account <span class="token function">findAccountById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> accountDao<span class="token punctuation">.</span><span class="token function">findAccountById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token annotation punctuation">@Transactional</span><span class="token punctuation">(</span>readOnly<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">,</span>propagation<span class="token operator">=</span>Propagation<span class="token punctuation">.</span>REQUIRED<span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transfer</span><span class="token punctuation">(</span>String sourceName<span class="token punctuation">,</span> String targeName<span class="token punctuation">,</span> Float money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.根据名称查询两个账户</span>        Account source <span class="token operator">=</span> accountDao<span class="token punctuation">.</span><span class="token function">findAccountByName</span><span class="token punctuation">(</span>sourceName<span class="token punctuation">)</span><span class="token punctuation">;</span>        Account target <span class="token operator">=</span> accountDao<span class="token punctuation">.</span><span class="token function">findAccountByName</span><span class="token punctuation">(</span>targeName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.修改两个账户的金额</span>        source<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转出账户减钱</span>        target<span class="token punctuation">.</span><span class="token function">setMoney</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getMoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//转入账户加钱</span>        <span class="token comment" spellcheck="true">//3.更新两个账户</span>        accountDao<span class="token punctuation">.</span><span class="token function">updateAccount</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//int i=1/0;</span>        accountDao<span class="token punctuation">.</span><span class="token function">updateAccount</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="注意">4 注意</h1><p>因为Spring是通过AOP来实现管理事务的，如果某个类使用了<code>@Transactional</code>，但如果在这个类中的其他方法调用了该方法，称为”自调用”，没有经过代理对象，这种情况<code>@Transactional</code>就失效了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;为了减少手动编写管理事务的语句，Spring利用AOP为我们提供了一个数据库事务的约定流程。&lt;/p&gt;
&lt;p&gt;spring 框架为我们提供了一组事务控制的接口。这组接口是在&lt;code&gt;spring-tx-5.0.2.RELEASE.jar&lt;/code&gt; 中。&lt;/p&gt;
&lt;p&gt;对
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Spring" scheme="https://www.codetool.top/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot日志框架的使用</title>
    <link href="https://www.codetool.top/article/SpringBoot%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.codetool.top/article/SpringBoot日志框架的使用/</id>
    <published>2020-03-09T18:46:53.000Z</published>
    <updated>2020-03-09T18:59:46.148Z</updated>
    
    <content type="html"><![CDATA[<p>前置知识：</p><ul><li><a href="日志门面SLF4J介绍和使用">日志门面SLF4J介绍和使用（日志系列03）</a></li><li><a href="../Java日志框架Logback介绍和使用">Java日志框架Logback介绍和使用（日志系列04）</a></li></ul><p>推荐阅读：</p><ul><li><a href="../Java日志框架JUL和Log4j介绍">Java日志框架JUL和Log4j介绍（日志系列01）</a></li><li><a href="../日志门面介绍和JCL使用">日志门面介绍和JCL使用（日志系列02）</a></li><li><a href="../Java日志框架LOG4J2的介绍和使用">Java日志框架LOG4J2的介绍和使用（日志系列05）</a></li></ul><p>（Java日志系列到这篇算是完结了吧，完结撒花<em>★,°</em>:.☆(￣▽￣)/$:<em>.°★</em> 。）</p><h1 id="logging-starter概述">1 logging-starter概述</h1><p>SpringBoot使用日志功能依赖于</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>实际上，不需要导入这个依赖，因为springboot的核心spring-boot-starter存在对spring-boot-starter-logging的传递依赖。</p><p><img src="https://api.codetool.top/img/15837774833693.png" alt="logging-stater依赖"></p><ul><li><code>jul-to-slf4j</code>：将JUL转为SLF4J（使用SLF4J作为日志门面）</li><li><code>log4j-to-slf4j</code>：将LOG4J2日志门面转为SLF4J</li><li><code>logback-classic</code>：使用logback作为默认日志实现</li></ul><p>SpringBoot 2.0 之前还会有一个<code>log4j-over-slf4j</code>用来转换log4j，<strong>2.0之后就取消了对log4j的支持。</strong>（虽然可以通过starter使用log4j，但已经不推荐了）</p><p>可以看出，SpringBoot使用SLF4J作为日志门面，logback作为默认日志实现。</p><p>如果是其他日志门面和日志框架会自动桥接至SLF4J。</p><h1 id="日志相关配置">2 日志相关配置</h1><h2 id="SpringBoot配置">2.1 SpringBoot配置</h2><p>这里使用properties语法，yaml也只是转换一下格式</p><pre class=" language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 设置自定义logger的日志级别</span><span class="token attr-name">logging.level.com.rhett.FileLogger</span><span class="token punctuation">=</span><span class="token attr-value">trace</span><span class="token comment" spellcheck="true"># 设置console appender的pattern</span><span class="token attr-name">logging.pattern.console</span><span class="token punctuation">=</span><span class="token attr-value">[%-5level] %d{yyyy-MM-dd HH:mm:ss} %c [%thread] --- %m%n</span><span class="token comment" spellcheck="true"># 指定日志文件存放的目录，默认的文件名是spring.log</span><span class="token attr-name">logging.file.path</span><span class="token punctuation">=</span><span class="token attr-value">logs/springboot/</span><span class="token comment" spellcheck="true"># 设置file appender的pattern</span><span class="token attr-name">logging.pattern.file</span><span class="token punctuation">=</span><span class="token attr-value">[%-5level] %d{yyyy-MM-dd HH:mm:ss} %c [%thread] --- %m%n</span></code></pre><h2 id="指定配置">2.2 指定配置</h2><p>如果想配置一些高级功能，可以需要导入具体某个日志框架的配置，SpringBoot会自动查找遵循如下命名的配置文件：</p><table><thead><tr><th>日志实现</th><th>文件命名</th></tr></thead><tbody><tr><td>Logback</td><td>logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy</td></tr><tr><td>Log4j2</td><td>log4j2-spring.xml , log4j2.xml</td></tr><tr><td>JUL</td><td>logging.properties</td></tr></tbody></table><p>对于logback来说，logback-spring还可以使用profile功能：</p><ul><li><code>logback.xml</code>：直接就被日志框架识别了；</li><li><code>logback-spring.xml</code>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的Profile功能</li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>console<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.PatternLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dev<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} ----> [%thread] ---> %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>springProfile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>test<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%d{yyyy-MM-dd HH:mm:ss.SSS} ==== [%thread] ==== %-5level %logger{50} - %msg%n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>springProfile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span></code></pre><p>在springboot配置中切换profile环境：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value">dev</span></code></pre><h1 id="将日志实现切换为log4j2">3 将日志实现切换为log4j2</h1><p>禁用logback、启用log4j2，然后就可以正常使用log4j2了。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 禁用logback--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 添加log4j2 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-log4j2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前置知识：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;日志门面SLF4J介绍和使用&quot;&gt;日志门面SLF4J介绍和使用（日志系列03）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;../Java日志框架Logback介绍和使用&quot;&gt;Java日志框架Logback介绍和使用（日志
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="日志" scheme="https://www.codetool.top/tags/%E6%97%A5%E5%BF%97/"/>
    
      <category term="SpringBoot" scheme="https://www.codetool.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>leetcode543-二叉树的直径</title>
    <link href="https://www.codetool.top/article/leetcode543-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%9B%B4%E5%BE%84/"/>
    <id>https://www.codetool.top/article/leetcode543-二叉树的直径/</id>
    <published>2020-03-09T17:57:29.000Z</published>
    <updated>2020-03-09T19:00:01.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过根结点。</p><p><strong>示例:</strong></p><p>给定二叉树</p><pre><code>          1         / \        2   3       / \           4   5    </code></pre><p>返回 <strong>3</strong>, 它的长度是路径 [4,2,1,3] 或者 [5,2,1,3]。</p><p><strong>注意:</strong> 两结点之间的路径长度是以它们之间边的数目表示。</p><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>自底向上dfs，首先要了解这个最长边不一定经过根节点，对于每个结点，经过它的最长直径为左边的最长边和右边的最长边之和。这个结点的深度为左边最长边和右边最长边的最大值+1。这样获取出所有经过某节点的最长直径，比较出最大值。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">diameterOfBinaryTree</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ans<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode root<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        max <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> left <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定一棵二叉树，你需要计算它的直径长度。一棵二叉树的直径长度是任意两个结点路径长度中的最大值。这条路径可能穿过根结点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;给定二叉树&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="DFS" scheme="https://www.codetool.top/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>Java日志框架LOG4J2的介绍和使用</title>
    <link href="https://www.codetool.top/article/Java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6LOG4J2%E7%9A%84%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.codetool.top/article/Java日志框架LOG4J2的介绍和使用/</id>
    <published>2020-03-09T17:35:20.000Z</published>
    <updated>2020-03-09T18:49:48.554Z</updated>
    
    <content type="html"><![CDATA[<p>前置知识： <a href="../日志门面SLF4J介绍和使用">日志门面SLF4J介绍和使用</a></p><p>推荐阅读： <a href="../Java日志框架Logback介绍和使用/">Java日志框架Logback介绍和使用</a></p><h1 id="log4j2概述">1 log4j2概述</h1><p>Apache Log4j2是对Log4j的升级版，参考了logback的一些优秀的设计，并且修复了一些问题，因此带来了一些重大的提升,主要有:</p><ul><li>异常处理，在logback中, Appender中的异常不会被应用感知到,但是在log4j2中,提供了一些异常处理机制。</li><li>性能提升，log4j2相较于log4j和logback都具有很明显的性能提升。</li><li>自动重载配置，参考了logback的设计，当然会提供自动刷新参数配置，最实用的就是我们在生产上可以动态地修改日志的级别而不需要重启应用。</li><li>无垃圾机制，log4j2在大部分情况下，都可以使用其设计的一套无垃圾机制，避免频繁的日志收集导致的jvm gc。</li></ul><p>Log4j2其实也是一个日志门面，但slf4j已经足够优秀，较少人把Log4j2用作日志门面，通常还是把它当成一个日志实现搭配slf4j使用。</p><h1 id="log4j2日志门面">2 log4j2日志门面</h1><p>简要介绍一下log4j2作为日志门面的使用</p><p>maven依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.12.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.12.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>这样使用的就是Log4j2日志门面+本身的实现</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LogManager<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>LOG4J2Test<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    LOGGER<span class="token punctuation">.</span><span class="token function">fatal</span><span class="token punctuation">(</span><span class="token string">"fatal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">"warn"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"info"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"debug"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token string">"trace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="log4j2-slf4j使用">3 log4j2+slf4j使用</h1><p>maven配置</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- slf4j日志门面 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- log4j2适配器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-slf4j-impl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.13.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- log4j2 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.logging.log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.13.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>这是最简单的写法，<code>log4j-slf4j-impl</code>依赖于<code>log4j-api</code>，它更像是桥接Log4j2日志门面。</p><p>使用就是SLF4J的使用方法（假设你没跳前置知识🌚）</p><h1 id="log4j2配置">4 log4j2配置</h1><p>log4j2默认加载classpath下的<code>log4j2.xml</code>文件中的配置</p><p>它和logback实在是太像了，毕竟本来就是抄袭的logback（这是可以说的吗🌚）</p><p>logback的配置见<a href="../Java日志框架Logback介绍和使用/">Java日志框架Logback介绍和使用</a></p><p>所以我把配置贴出来应该就能看懂：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token comment" spellcheck="true">&lt;!-- status，代表日志框架本身的输出日志级别；monitorInterval，配置为120，单位为秒。类似于logback的scanPeriod --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Configuration</span> <span class="token attr-name">status</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WARN<span class="token punctuation">"</span></span> <span class="token attr-name">monitorInterval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>120<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 类似于logback的property，但是放入了properties节点 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOG_HOME<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/logs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 将所有Appender放入了Appenders节点 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Appenders</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--Console节点就直接指定了这个appender使用的类是logback自带的，name是自己命名的,target=SYSTEM_OUT表示输出到控制台。--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Console</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SYSTEM_OUT<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--pattern和logback几乎也没有区别--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%d{HH:mm:ss.SSS} [%t] [%-5level] %c{36}:%L --- %m%n<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Console</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--File节点就直接指定了这个appender使用的类是logback自带的，fileName指定文件路径，可以使用属性值${}，append="true"追加到文件末尾--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>File</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${LOG_HOME}/test.log<span class="token punctuation">"</span></span> <span class="token attr-name">append</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%d{HH:mm:ss.SSS} [%t] [%-5level] %c{36}:%L --- %m%n<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>File</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--RandomAccessFile，文件随机读写流Appender，比File性能较好--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RandomAccessFile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${LOG_HOME}/test.log<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%d{HH:mm:ss.SSS} [%t] [%-5level] %c{36}:%L --- %m%n<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RandomAccessFile</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--RollingFile或使用RollingRandomAccessFile，自动拆分的文件随机读写流Appender， filePattern：历史日志封存路径。log4j2也自动识别zip等后缀，表示历史日志需要压缩。--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RollingRandomAccessFile</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>File<span class="token punctuation">"</span></span> <span class="token attr-name">immediateFlush</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">fileName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${LOG_HOME}/today.log<span class="token punctuation">"</span></span>                                 <span class="token attr-name">filePattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${LOG_HOME}/$${date:yyyy-MM-dd}/myrollog-%d{yyyy-MM-dd}-%i.log<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 和logback的过滤器类似，onMatch、onMismatch可以为NEUTRAL表示中立 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Filters</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!-- 日志级别过滤器 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ThresholdFilter</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span> <span class="token attr-name">onMatch</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ACCEPT<span class="token punctuation">"</span></span> <span class="token attr-name">onMismatch</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DENY<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Filters</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>PatternLayout</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>%d{HH:mm:ss.SSS} [%t] [%-5level] %c{36}:%L --- %m%n<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!--                也可以是类似于logback的HTMLLayout                &lt;HTMLLayout pattern="%d{HH:mm:ss.SSS}%t%-5level%c{36}%L%m%n" />            --></span>            <span class="token comment" spellcheck="true">&lt;!--RollingRandomAccessFile的必配项,TriggeringPolicy(触发策略) --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Policies</span><span class="token punctuation">></span></span>                <span class="token comment" spellcheck="true">&lt;!--在系统启动时，触发拆分规则，产生一个新的日志文件--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OnStartupTriggeringPolicy</span> <span class="token punctuation">/></span></span>                <span class="token comment" spellcheck="true">&lt;!--按时间划分日志文件，单位是filePattern中配置的 --></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TimeBasedTriggeringPolicy</span> <span class="token punctuation">/></span></span>                <span class="token comment" spellcheck="true">&lt;!--按大小划分日志文件--></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SizeBasedTriggeringPolicy</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10 MB<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Policies</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--覆盖策略，限定同一个目录下日志文件的最大数量--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>DefaultRolloverStrategy</span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RollingRandomAccessFile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Appenders</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置Root Logger和自定义logger --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Loggers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>trace<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Root</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Loggers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Configuration</span><span class="token punctuation">></span></span></code></pre><h1 id="异步日志">5 异步日志</h1><p>Log4j2提供了AsyncAppender和AsyncLogger，通过BlockingQueue来实现异步。（比logback做的更全面一点）</p><p>通常使用AsyncLogger。</p><p>使用异步日志需要配置依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.lmax<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>disruptor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.4.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="使用AsyncAppender">5.1 使用AsyncAppender</h2><p>这种方式和logback类似</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Appenders</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Async</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Async<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Async</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Appenders</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Loggers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>trace<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Console<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Async<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Loggers</span><span class="token punctuation">></span></span></code></pre><h2 id="使用AsyncLogger">5.2 使用AsyncLogger</h2><p>这种方法异步性能更高一点</p><h3 id="全局异步">5.2.1 全局异步</h3><p>所有日志都异步，在配置文件上不用做任何改动，只需要添加一个<code>log4j2.component.properties</code>配置：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">Log4jContextSelector</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.logging.log4j.core.async.AsyncLoggerContextSelector</span></code></pre><h3 id="混合异步">5.2.2 混合异步</h3><p>可以在应用中同时使用同步日志和异步日志，这使得日志的配置方式更加灵活。</p><p>需要配置自定义logger：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Loggers</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- includeLocation关闭文件信息、行号信息，这些信息影响性能 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AsyncLogger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.rhett.AsyncLogger<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>trace<span class="token punctuation">"</span></span> <span class="token attr-name">includeLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>AppenderRef</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>AsyncLogger</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Loggers</span><span class="token punctuation">></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前置知识： &lt;a href=&quot;../日志门面SLF4J介绍和使用&quot;&gt;日志门面SLF4J介绍和使用&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;推荐阅读： &lt;a href=&quot;../Java日志框架Logback介绍和使用/&quot;&gt;Java日志框架Logback介绍和使用&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="java" scheme="https://www.codetool.top/tags/java/"/>
    
      <category term="日志" scheme="https://www.codetool.top/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>Java日志框架Logback介绍和使用</title>
    <link href="https://www.codetool.top/article/Java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6Logback%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.codetool.top/article/Java日志框架Logback介绍和使用/</id>
    <published>2020-03-09T15:07:24.000Z</published>
    <updated>2020-03-09T15:55:54.323Z</updated>
    
    <content type="html"><![CDATA[<p>前置知识：</p><p><a href="../日志门面SLF4J介绍和使用">日志门面SLF4J介绍和使用</a></p><h1 id="Logback概述">1 Logback概述</h1><p>Logback是由log4j、slf4j创始人Ceki Gülcü设计的另一个开源日志组件，性能比log4j要好。它自然地实现了slf4j规范。</p><p>Logback主要分为三个模块：</p><ul><li><code>logback-core</code>：logback的核心模块，也是其它两个模块的基础模块</li><li><code>logback-classic</code>：它是log4j的一个改良版本,同时它完整实现了slf4jAPI</li><li><code>logback-access</code>: 访问模块与Servlet容器集成提供通过Http来访问日志的功能</li></ul><p>Logback的核心组件：</p><ul><li>Logger：日志的记录器,把它关联到应用的对应的context上后，主要用于存放日志对象,也可以定义日志类型、级别。</li><li>Appender：用于指定日志输出的目的地,目的地可以是控制台、文件、数据库等等。</li><li>Layout：负责把事件转换成字符串,格式化的日志信息的输出。在 logbackLayoutencoder中对象被封装在中。</li></ul><h1 id="Logback使用">2 Logback使用</h1><p>maven依赖：</p><p>这里使用slf4j来管理</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h1 id="Logback配置">3 Logback配置</h1><p>logback会依次读取以下类型配置文件：</p><ul><li>logback.groovy</li><li>logback-test.xml</li><li>logback.xml</li></ul><p>如果均不存在会采用默认配置</p><p>logback官方提供的log4j配置转logback配置工具：<a href="http://logback.qos.ch/translator/" target="_blank" rel="noopener">http://logback.qos.ch/translator/</a></p><h2 id="基本配置">3.1 基本配置</h2><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pattern<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} %c %M %L [%thread] %m%n<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>log_dir<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/logs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 控制台日志输出的 appender--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>console<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.ConsoleAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 控制输出流对象，默认System.out改为System.err--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>System.err<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 日志消息格式配置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.encoder.PatternLayoutEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>${pattern}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 日志文件输出的 appender--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.FileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 日志文件保存路径 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${log_dir}/logback.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 日志消息格式配置--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.encoder.PatternLayoutEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>${pattern}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- root logger 配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ALL<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>console<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender-ref</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender-ref</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><p>pattern常用转换符：</p><ul><li><code>%c/%logger</code>：输出日志的logger名，可有一个整形参数，功能是缩短logger名，例如%logger{5}</li><li><code>%cn</code>：输出上下文名称。</li><li><code>%d{pattern}</code>：输出日志的打印日志，模式语法与<code>java.text.SimpleDateFormat</code>兼容。</li><li><code>%p/%le/%level</code>：输出日志级别。</li><li><code>%t/%thread</code>:    输出产生日志的线程名。</li><li><code>%n</code>：输出平台相关的分行符“\n”或者“\r\n”。</li><li><code>%m/%msg/%message</code>：输出应用程序提供的信息。</li><li><code>%L/%line</code>：输出执行日志请求的行号。</li></ul><p>使用HTML格式输出：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 日志文件输出的 appender--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>htmlFile<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.FileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 日志文件保存路径 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${log_dir}/logback.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 日志消息格式配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.encoder.LayoutWrappingEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>layout</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.html.HTMLLayout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>%level%d{yyyy-MM-dd HH:mm:ss.SSS}%c%M%L%thread%m<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>layout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span></code></pre><h2 id="动态刷新配置">3.2 动态刷新配置</h2><p>根节点<code>configuration</code>可以配置两个属性：</p><ul><li><code>scan</code>: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</li><li><code>scanPeriod</code>: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。</li></ul><p>通过配置这两个属性，可以在系统运行时修改logback的配置而不需要重写部署，例如修改日志级别</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span> <span class="token attr-name">scan</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token attr-name">scanPeriod</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60 seconds<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- ... --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><h2 id="日志拆分和归档压缩的appender">3.3 日志拆分和归档压缩的appender</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rollFile<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 日志文件保存路径 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${log_dir}/roll_logback.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 日志消息格式配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.encoder.PatternLayoutEncoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>${pattern}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 指定拆分规则 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 按照时间和压缩格式声明拆分的文件名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>${log_dir}/rolling.%d{yyyy-MM-dd}.log%i.gz<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 按照文件大小拆分 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>maxFileSize</span><span class="token punctuation">></span></span>1MB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>maxFileSize</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span></code></pre><h2 id="过滤器">3.4 过滤器</h2><p>写在Appender中</p><p>级别过滤器：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.filter.LevelFilter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 日志过滤规则 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>level</span><span class="token punctuation">></span></span>ERROR<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>level</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMatch</span><span class="token punctuation">></span></span>ACCEPT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMatch</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>onMismatch</span><span class="token punctuation">></span></span>DENY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>onMismatch</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span></code></pre><p>其他的还有ThresholdFilter（临界值过滤器）、EvaluatorFilter（求值过滤器）等。</p><h2 id="异步日志">3.5 异步日志</h2><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>async<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.classic.AsyncAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 指定某个具体的appender --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender-ref</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span></code></pre><h2 id="自定义Logger">3.6 自定义Logger</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 自定义logger对象    additivity：是否继承自rootLogger--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>logger</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.rhett.consoleLogger<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>INFO<span class="token punctuation">"</span></span> <span class="token attr-name">additivity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>console<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender-ref</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>logger</span><span class="token punctuation">></span></span></code></pre><h1 id="logback-access的使用">4 logback-access的使用</h1><p>logback-access模块与Servlet容器(如Tomcat和Jetty)集成,以提供HTTP访问日志功能。我们可以使用logback-acces模块来替换tomcat的访问日志。</p><p>步骤：</p><ol><li>将<code>logback-access.jar</code>与<code>logback-core.jar</code>复制到<code>$TOMCAT_HOME/lib/</code>目录下</li><li>在<code>$TOMCAT_HOME/conf/server.xml</code>中的Host元素中添加：</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Value</span> <span class="token attr-name">className</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.access.tomcat.LogbackValue<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre><ol start="3"><li>logback默认会在<code>$TOMCAT_HOME/conf</code>下查找文件<code>logback-access.xml</code></li></ol><p>示例配置：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- always a good activate OnConsoleStatusListener--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>statusListener</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.status.OnConsoleStatusListener<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOG_DIR<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${catalina.base}/logs<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.RollingFileAppender<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>${LOG_DIR}/access.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rollingPolicy</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ch.qos.logback.core.rolling.TimeBasedRollingPolicy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fileNamePattern</span><span class="token punctuation">></span></span>access.%d{yyyy-MM-dd).log.zip<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fileNamePattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rollingPolicy</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>encoder</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pattern</span><span class="token punctuation">></span></span>combined<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pattern</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>encoder</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>appender</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>appender-ref</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FILE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前置知识：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;../日志门面SLF4J介绍和使用&quot;&gt;日志门面SLF4J介绍和使用&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Logback概述&quot;&gt;1 Logback概述&lt;/h1&gt;&lt;p&gt;Logback是由log4j、slf4j创始人Ceki Gülcü设计
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="java" scheme="https://www.codetool.top/tags/java/"/>
    
      <category term="日志" scheme="https://www.codetool.top/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>日志门面SLF4J介绍和使用</title>
    <link href="https://www.codetool.top/article/%E6%97%A5%E5%BF%97%E9%97%A8%E9%9D%A2SLF4J%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.codetool.top/article/日志门面SLF4J介绍和使用/</id>
    <published>2020-03-09T12:43:21.000Z</published>
    <updated>2020-03-09T16:11:37.656Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SLF4j概述">1 SLF4j概述</h1><p>上篇文章写了<a href="../日志门面介绍和JCL使用">日志门面介绍和JCL使用</a>，作为一个曾经的主流日志门面技术，JCL终究因为设计时的产生问题所限，导致至今已没什么人使用，而一款优秀的日志门面技术SLF4j，吸取了JCL的教训与经验，出现在java开发者的视野中，开始被广泛关注和使用。</p><p>这里如果谈谈历史还蛮好玩的，涉及到一位Java日志领域知名人物Ceki Gülcü，log4j、slf4j、logback都是出自他之手，在Apache组织开发的log4j，后来离开了apache开发了logback，apache反而又推出了log4j2与之竞争，感兴趣的可以去看看<a href="https://segmentfault.com/a/1190000021121882" target="_blank" rel="noopener">Java日志系统历史从入门到崩溃 - 个人文章 - SegmentFault 思否</a></p><p>SLF4J，即<strong>简单日志门面</strong>（Simple Logging Facade for Java）,也为Java日志访问提供了一套标准、规范的API框架，它支持了log4j和logback，它本身也提供了功能较简单的日志实现，但一般很少用到，它的设计思想和JCL较为不同，要么遵循slf4j规范开发，要么使用<strong>适配器</strong>来完成slf-api与具体日志实现框架的整合。</p><h1 id="SLF4j使用">2 SLF4j使用</h1><h2 id="maven依赖">2.1 maven依赖</h2><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- slf4j日志门面 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- slf4j内置的简单实现 --></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-simple<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="日志绑定">2.2 日志绑定</h2><p>SLF4J使用指定的日志框架需要通过“日志绑定”，通过一些jar文件实现。</p><p>绑定具体的日志实现框架：</p><ol><li>绑定已经实现了sf4的日志框架直接添加对应依赖</li><li>绑定没有实现sf4的日志框架先添加日志的适配器再添加实现类的依赖</li></ol><p>logback、slf4j-simple遵循了slf4j-api的开发，只需要导入对应依赖。</p><p>slf4j-nop是关闭日志功能。</p><p>如果绑定了多个日志实现，使用第一个找到的日志实现。</p><p><img src="https://api.codetool.top/img/15837539283526.png" alt></p><p>例：绑定log4j</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h2 id="桥接">2.3 桥接</h2><p>slf4j的强大之处还在于它对遗留代码的支持，如果项目之前使用的是例如Log4j等日志框架实现，可以通过slf4j提供的“桥接器”将其转移至slf4j使用。甚至还可以桥接JCL。</p><p><img src="https://api.codetool.top/img/15837554998133.png" alt></p><p>例如：log4j代码通过桥接器转移至logback实现，首先移除log4j依赖，然后添加桥接器：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j-over-slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>这里会出现一个问题比如<code>log4j-over-slf4j</code>与<code>slf4j-log4j12</code>共存出现stack overflow，就是因为slf4j&lt;-&gt;log4j死循环</p><h2 id="特性">2.4 特性</h2><p><strong>核心类：</strong></p><ul><li>Logger：日志记录器，用于写日志</li><li>LoggerFactory：日志记录器的工厂类，用于获取日志记录器。</li></ul><p><strong>日志级别：</strong></p><ul><li>trace</li><li>debug</li><li>info</li><li>warn</li><li>error</li></ul><p>比JCL还少一个fatal级别。</p><p><strong>使用占位符输出日志信息：</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>SLF4JTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testQuick</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    String name <span class="token operator">=</span> <span class="token string">"rhett"</span><span class="token punctuation">;</span>    LOGGER<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"名字：{}"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><strong>将系统异常信息输出：</strong></p><p>Logger提供了带throwable参数的方法重载，可以便捷地输出错误信息：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Logger LOGGER <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>SLF4JTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>        LOGGER<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"出现异常："</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h1 id="SLF4J原理">3 SLF4J原理</h1><p>这个阶段推荐自己进行源码跟踪，我大概把方法栈贴一下</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Logger <span class="token function">getLogger</span><span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Logger logger <span class="token operator">=</span> <span class="token function">getLogger</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//!!!</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>DETECT_LOGGER_NAME_MISMATCH<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> autoComputedCallingClass <span class="token operator">=</span> Util<span class="token punctuation">.</span><span class="token function">getCallingClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>autoComputedCallingClass <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token function">nonMatchingClasses</span><span class="token punctuation">(</span>clazz<span class="token punctuation">,</span> autoComputedCallingClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Util<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"Detected logger name mismatch. Given name: \"%s\"; computed name: \"%s\"."</span><span class="token punctuation">,</span> logger<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                            autoComputedCallingClass<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Util<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">"See "</span> <span class="token operator">+</span> LOGGER_NAME_MISMATCH_URL <span class="token operator">+</span> <span class="token string">" for an explanation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> logger<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> Logger <span class="token function">getLogger</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>    ILoggerFactory iLoggerFactory <span class="token operator">=</span> <span class="token function">getILoggerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> iLoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> ILoggerFactory <span class="token function">getILoggerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>INITIALIZATION_STATE <span class="token operator">==</span> UNINITIALIZED<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LoggerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>INITIALIZATION_STATE <span class="token operator">==</span> UNINITIALIZED<span class="token punctuation">)</span> <span class="token punctuation">{</span>                INITIALIZATION_STATE <span class="token operator">=</span> ONGOING_INITIALIZATION<span class="token punctuation">;</span>                <span class="token function">performInitialization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通往bind方法</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>INITIALIZATION_STATE<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> SUCCESSFUL_INITIALIZATION<span class="token operator">:</span>        <span class="token keyword">return</span> StaticLoggerBinder<span class="token punctuation">.</span><span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLoggerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> NOP_FALLBACK_INITIALIZATION<span class="token operator">:</span>        <span class="token keyword">return</span> NOP_FALLBACK_FACTORY<span class="token punctuation">;</span>    <span class="token keyword">case</span> FAILED_INITIALIZATION<span class="token operator">:</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>UNSUCCESSFUL_INIT_MSG<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> ONGOING_INITIALIZATION<span class="token operator">:</span>        <span class="token comment" spellcheck="true">// support re-entrant behavior.</span>        <span class="token comment" spellcheck="true">// See also http://jira.qos.ch/browse/SLF4J-97</span>        <span class="token keyword">return</span> SUBST_FACTORY<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Unreachable code"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>URL<span class="token operator">></span> staticLoggerBinderPathSet <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// skip check under android, see also</span>        <span class="token comment" spellcheck="true">// http://jira.qos.ch/browse/SLF4J-328</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isAndroid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            staticLoggerBinderPathSet <span class="token operator">=</span> <span class="token function">findPossibleStaticLoggerBinderPathSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//!!!</span>            <span class="token function">reportMultipleBindingAmbiguity</span><span class="token punctuation">(</span>staticLoggerBinderPathSet<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// the next line does the binding</span>        StaticLoggerBinder<span class="token punctuation">.</span><span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        INITIALIZATION_STATE <span class="token operator">=</span> SUCCESSFUL_INITIALIZATION<span class="token punctuation">;</span>        <span class="token function">reportActualBinding</span><span class="token punctuation">(</span>staticLoggerBinderPathSet<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoClassDefFoundError</span> ncde<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String msg <span class="token operator">=</span> ncde<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">messageContainsOrgSlf4jImplStaticLoggerBinder</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            INITIALIZATION_STATE <span class="token operator">=</span> NOP_FALLBACK_INITIALIZATION<span class="token punctuation">;</span>            Util<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">"Failed to load class \"org.slf4j.impl.StaticLoggerBinder\"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Util<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">"Defaulting to no-operation (NOP) logger implementation"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Util<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">"See "</span> <span class="token operator">+</span> NO_STATICLOGGERBINDER_URL <span class="token operator">+</span> <span class="token string">" for further details."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">failedBinding</span><span class="token punctuation">(</span>ncde<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> ncde<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>NoSuchMethodError</span> nsme<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String msg <span class="token operator">=</span> nsme<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>msg <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> msg<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"org.slf4j.impl.StaticLoggerBinder.getSingleton()"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            INITIALIZATION_STATE <span class="token operator">=</span> FAILED_INITIALIZATION<span class="token punctuation">;</span>            Util<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">"slf4j-api 1.6.x (or later) is incompatible with this binding."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Util<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">"Your binding is version 1.5.5 or earlier."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Util<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">"Upgrade your binding to version 1.6.x."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">throw</span> nsme<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">failedBinding</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">"Unexpected initialization failure"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        <span class="token function">postBindCleanUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> Set<span class="token operator">&lt;</span>URL<span class="token operator">></span> <span class="token function">findPossibleStaticLoggerBinderPathSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// use Set instead of list in order to deal with bug #138</span>    <span class="token comment" spellcheck="true">// LinkedHashSet appropriate here because it preserves insertion order</span>    <span class="token comment" spellcheck="true">// during iteration</span>    Set<span class="token operator">&lt;</span>URL<span class="token operator">></span> staticLoggerBinderPathSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span>URL<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>        ClassLoader loggerFactoryClassLoader <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Enumeration<span class="token operator">&lt;</span>URL<span class="token operator">></span> paths<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loggerFactoryClassLoader <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            paths <span class="token operator">=</span> ClassLoader<span class="token punctuation">.</span><span class="token function">getSystemResources</span><span class="token punctuation">(</span>STATIC_LOGGER_BINDER_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            paths <span class="token operator">=</span> loggerFactoryClassLoader<span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>STATIC_LOGGER_BINDER_PATH<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>paths<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            URL path <span class="token operator">=</span> paths<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            staticLoggerBinderPathSet<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> ioe<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Util<span class="token punctuation">.</span><span class="token function">report</span><span class="token punctuation">(</span><span class="token string">"Error getting resources from path"</span><span class="token punctuation">,</span> ioe<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> staticLoggerBinderPathSet<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">static</span> String STATIC_LOGGER_BINDER_PATH <span class="token operator">=</span> <span class="token string">"org/slf4j/impl/StaticLoggerBinder.class"</span><span class="token punctuation">;</span></code></pre><p><strong>注意:</strong> 虽然<code>StaticLoggerBinder</code>是在<code>org.slf4j.impl</code>包下,但日志门面jar包中并无此类,此类是由桥接器实现的。</p><p>桥接器的原理其实就是在其jar包中存在StaticLoggerBinder.class,这样就可在运行时动态绑定底层的日志实现框架。</p><p>然后回到bind方法：</p><pre class=" language-java"><code class="language-java">StaticLoggerBinder<span class="token punctuation">.</span><span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>获取了一个<code>StaticLoggerBinder</code>的单例对象</p><p>然后返回getILoggerFactory方法：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">case</span> SUCCESSFUL_INITIALIZATION<span class="token operator">:</span>    <span class="token keyword">return</span> StaticLoggerBinder<span class="token punctuation">.</span><span class="token function">getSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getLoggerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>总结：桥接器会调用的日志框架实现的相关代码生成其内部的Logger(此Logger与org.slf4j.Logger)不兼容,再通过适配器包装日志框架实现内部的Logger.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SLF4j概述&quot;&gt;1 SLF4j概述&lt;/h1&gt;&lt;p&gt;上篇文章写了&lt;a href=&quot;../日志门面介绍和JCL使用&quot;&gt;日志门面介绍和JCL使用&lt;/a&gt;，作为一个曾经的主流日志门面技术，JCL终究因为设计时的产生问题所限，导致至今已没什么人使用，而一款优秀的日志门面技
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="java" scheme="https://www.codetool.top/tags/java/"/>
    
      <category term="日志" scheme="https://www.codetool.top/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>日志门面介绍和JCL使用</title>
    <link href="https://www.codetool.top/article/%E6%97%A5%E5%BF%97%E9%97%A8%E9%9D%A2%E4%BB%8B%E7%BB%8D%E5%92%8CJCL%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.codetool.top/article/日志门面介绍和JCL使用/</id>
    <published>2020-03-09T09:45:50.000Z</published>
    <updated>2020-03-09T10:59:29.223Z</updated>
    
    <content type="html"><![CDATA[<h1 id="日志门面概述">1 日志门面概述</h1><p>之前有写过<a href="../Java日志框架JUL和Log4j介绍/">Java日志框架JUL和Log4j介绍</a>，可以对比发现它们之间的使用还是有一些区别的，比如有一些类名是不同的、日志的输出级别也不完全一致。</p><p>那么实际上是增大了日志框架与程序的耦合性，使得难以更换日志框架。<br>甚至会造成一些优秀的框架强制性依赖某一个具体的日志实现类，为了解决这个问题，日志门面技术就诞生了。</p><p>日志门面实质上就是提供了一套通用的日志API技术，和JDBC的思想类似，使用日志门面，就可以轻松地更换日志实现。</p><p>我们为什么要使用日志门面：</p><ol><li>面向接口开发,不再依赖具体的实现类减少代码的耦合</li><li>项目通过导入不同的日志实现类,可以灵活的切换日志框架</li><li>统一API,方便开发者学习和使用</li><li>统一配置便于项目日志的管理</li></ol><p>常见的日志门面：JCL、slf4j</p><h1 id="JCL">2 JCL</h1><h2 id="JCL介绍">2.1 JCL介绍</h2><p>JCL全称为<code>Jakarta Commons Logging</code>，是 Apache提供的一个<strong>通用日志API</strong></p><p>它是为“所有的Java日志实现”提供一个统一的接口,它自身也提供一个日志的实现,但是功能非常常弱<br>(SimpleLog)。所以一般不会单独使用它。他允许开发人员使用不同的具体日志实现工具:Log4j、jdk自带的日志(JUL)。</p><h2 id="JCL使用">2.2 JCL使用</h2><p>maven依赖：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-logging<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>如果要使用log4j还需加上log4j的依赖</p><p>核心类：</p><ul><li>Log：日志记录器，用于写日志</li><li>LogFactory：日志记录器的工厂类，用于获取日志记录器。</li></ul><p>JCL的日志级别：</p><ul><li>trace</li><li>debug</li><li>info</li><li>warn</li><li>error</li><li>fatal</li></ul><p>可以看出和log4j的日志级别一致，但它把JUL的日志级别也适配到了这套日志级别上。</p><p>对于配置文件，如果使用JUL就添加JUL的配置文件，如果使用log4j就添加Log4j的配置文件。</p><p>JCL默认会根据如下顺序查找日志的实现类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> classesToDiscover <span class="token operator">=</span> <span class="token punctuation">{</span>        LOGGING_IMPL_LOG4J_LOGGER<span class="token punctuation">,</span>        <span class="token string">"org.apache.commons.logging.impl.Jdk14Logger"</span><span class="token punctuation">,</span>        <span class="token string">"org.apache.commons.logging.impl.Jdk13LumberjackLogger"</span><span class="token punctuation">,</span>        <span class="token string">"org.apache.commons.logging.impl.SimpleLog"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>classesToDiscover<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> result <span class="token operator">==</span> null<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>    result <span class="token operator">=</span> <span class="token function">createLogFromClass</span><span class="token punctuation">(</span>classesToDiscover<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> logCategory<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>其中<code>LOGGING_IMPL_LOG4J_LOGGER</code>代表的是log4j的<code>org.apache.commons.logging.impl.Log4JLogger</code>，可以看到JCL支持的日志实现有：</p><ul><li>log4j</li><li>jdk1.4的日志（JUL）</li><li>jdk1.3前的LumberjackLogger（已经淘汰）</li><li>JCL自带的SimpleLog</li></ul><p>如果用户不指定使用哪个日志实现类，JCL会按这个顺序查找，使用最先找到的实现类。</p><p>如果需要指定，还需要添加一个配置文件<code>commons-logging.properties</code>在类路径下：</p><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">org.apache.commons.logging.Log</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.commons.logging.impl.SimpleLog</span></code></pre><p>此后就可以使用了：</p><pre class=" language-java"><code class="language-java">Log log <span class="token operator">=</span> LogFactory<span class="token punctuation">.</span><span class="token function">getLog</span><span class="token punctuation">(</span>JCLTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello JCL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="JCL的问题">2.3 JCL的问题</h2><p>JCL的问题是，当初设计的时候只考虑到了在当时比较主流的日志框架log4j、JUL，也只支持这几个日志框架，导致后面如果出现了更强大的日志框架，比如说logback出现后，如果需要使用logback，JCL需要通过修改代码的方式来适配，当然这会造成很大的麻烦。</p><p>JCL获取日志工厂的过程中使用了classLoader来寻找日志工厂实现，进而导致了其他组件，如若使用自己的classloader，则不能获取具体的日志工厂对象，则导致启动失败。（即无法动态查找）</p><p>于是不久commons-logging就退出了人们的视线，更好的日志门面技术slf4j诞生以取代它的位置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;日志门面概述&quot;&gt;1 日志门面概述&lt;/h1&gt;&lt;p&gt;之前有写过&lt;a href=&quot;../Java日志框架JUL和Log4j介绍/&quot;&gt;Java日志框架JUL和Log4j介绍&lt;/a&gt;，可以对比发现它们之间的使用还是有一些区别的，比如有一些类名是不同的、日志的输出级别也不完全
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="java" scheme="https://www.codetool.top/tags/java/"/>
    
      <category term="日志" scheme="https://www.codetool.top/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>leetcode121-买卖股票的最佳时机</title>
    <link href="https://www.codetool.top/article/leetcode121-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/"/>
    <id>https://www.codetool.top/article/leetcode121-买卖股票的最佳时机/</id>
    <published>2020-03-08T16:12:45.000Z</published>
    <updated>2020-03-08T16:22:43.537Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。</p><p>如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。</p><p>注意你不能在买入股票前卖出股票。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> [7,1,5,3,6,4]<br><strong>输出:</strong> 5<br><strong>解释:</strong> 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。<br>     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。  </p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> [7,6,4,3,1]<br><strong>输出:</strong> 0<br><strong>解释:</strong> 在这种情况下, 没有交易完成, 所以最大利润为 0。  </p></blockquote><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>从左往右记录最低点，记录下当前价格与最低点的差值的最大值。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> minprice <span class="token operator">=</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>        <span class="token keyword">int</span> maxprofit <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> minprice<span class="token punctuation">)</span>                minprice <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> minprice <span class="token operator">></span> maxprofit<span class="token punctuation">)</span>                maxprofit <span class="token operator">=</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> minprice<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> maxprofit<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。&lt;/p&gt;
&lt;p&gt;如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。&lt;/p&gt;
&lt;p&gt;注意你不能在买入股票前卖出股票。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot自动配置原理与自定义配置介绍</title>
    <link href="https://www.codetool.top/article/SpringBoot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D/"/>
    <id>https://www.codetool.top/article/SpringBoot自动配置原理与自定义配置介绍/</id>
    <published>2020-03-08T13:34:46.000Z</published>
    <updated>2020-03-10T14:27:21.277Z</updated>
    
    <content type="html"><![CDATA[<p>SpringBoot配置与自动配置原理</p><h1 id="自动配置原理">1 自动配置原理</h1><p>SpringBoot启动的时候加载主配置类，开启了自动配置功能 <code>@EnableAutoConfiguration</code>：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@SpringBootConfiguration</span> <span class="token annotation punctuation">@EnableAutoConfiguration</span> <span class="token comment" spellcheck="true">//!!!</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>excludeFilters <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> TypeExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token annotation punctuation">@Filter</span><span class="token punctuation">(</span>type <span class="token operator">=</span> FilterType<span class="token punctuation">.</span>CUSTOM<span class="token punctuation">,</span> classes <span class="token operator">=</span> AutoConfigurationExcludeFilter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">SpringBootApplication</span></code></pre><p><code>@EnableAutoConfiguration</code> 的作用：</p><ul><li>利用<code>EnableAutoConfigurationImportSelector</code>给容器中导入一些组件</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span>ElementType<span class="token punctuation">.</span>TYPE<span class="token punctuation">)</span><span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span>RetentionPolicy<span class="token punctuation">.</span>RUNTIME<span class="token punctuation">)</span><span class="token annotation punctuation">@Documented</span><span class="token annotation punctuation">@Inherited</span><span class="token annotation punctuation">@AutoConfigurationPackage</span><span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>AutoConfigurationImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//!!!</span><span class="token keyword">public</span> @<span class="token keyword">interface</span> <span class="token class-name">EnableAutoConfiguration</span></code></pre><ul><li>可以查看<code>AutoConfigurationImportSelector.selectImports()</code>方法的内容；</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">selectImports</span><span class="token punctuation">(</span>AnnotationMetadata annotationMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> NO_IMPORTS<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    AutoConfigurationMetadata autoConfigurationMetadata <span class="token operator">=</span> AutoConfigurationMetadataLoader            <span class="token punctuation">.</span><span class="token function">loadMetadata</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>    AutoConfigurationEntry autoConfigurationEntry <span class="token operator">=</span> <span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span>autoConfigurationMetadata<span class="token punctuation">,</span>            annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//!!!</span>    <span class="token keyword">return</span> StringUtils<span class="token punctuation">.</span><span class="token function">toStringArray</span><span class="token punctuation">(</span>autoConfigurationEntry<span class="token punctuation">.</span><span class="token function">getConfigurations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><code>getAutoConfigurationEntry()</code>方法：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> AutoConfigurationEntry <span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span>AutoConfigurationMetadata autoConfigurationMetadata<span class="token punctuation">,</span>        AnnotationMetadata annotationMetadata<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isEnabled</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> EMPTY_ENTRY<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    AnnotationAttributes attributes <span class="token operator">=</span> <span class="token function">getAttributes</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> configurations <span class="token operator">=</span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//!!!</span>    configurations <span class="token operator">=</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>configurations<span class="token punctuation">)</span><span class="token punctuation">;</span>    Set<span class="token operator">&lt;</span>String<span class="token operator">></span> exclusions <span class="token operator">=</span> <span class="token function">getExclusions</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkExcludedClasses</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>    configurations<span class="token punctuation">.</span><span class="token function">removeAll</span><span class="token punctuation">(</span>exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>    configurations <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> autoConfigurationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fireAutoConfigurationImportEvents</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">AutoConfigurationEntry</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> exclusions<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li><code>getCandidateConfigurations()</code>方法：</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">protected</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>AnnotationMetadata metadata<span class="token punctuation">,</span> AnnotationAttributes attributes<span class="token punctuation">)</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>String<span class="token operator">></span> configurations <span class="token operator">=</span> SpringFactoriesLoader<span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span><span class="token function">getSpringFactoriesLoaderFactoryClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Assert<span class="token punctuation">.</span><span class="token function">notEmpty</span><span class="token punctuation">(</span>configurations<span class="token punctuation">,</span> <span class="token string">"No auto configuration classes found in META-INF/spring.factories. If you "</span>            <span class="token operator">+</span> <span class="token string">"are using a custom packaging, make sure that file is correct."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> configurations<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>从META-INF下面找<code>spring.factories</code>文件，将里面配置的所有EnableAutoConfiguration的值加入到了容器中</p><p><img src="https://api.codetool.top/img/15836660223144.png" alt></p><p>每一个这样的<code>xxxAutoConfiguration</code>类都是容器中的一个组件，都加入到容器中；用他们来做自动配置。</p><p>例如：自动配置类<code>DispatcherServletAutoConfiguration</code></p><p>（节选内部类DispatcherServletConfiguration）</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//配置文件</span><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//配置条件满足类DefaultDispatcherServletCondition的验证</span><span class="token annotation punctuation">@Conditional</span><span class="token punctuation">(</span>DefaultDispatcherServletCondition<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果存在ServletRegistration类则进行配置</span><span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span>ServletRegistration<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//如果存在对应的属性配置（WebMvcProperties对应的是spring.mvc.*）则启用配置</span><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span> HttpProperties<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> WebMvcProperties<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">protected</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DispatcherServletConfiguration</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DEFAULT_DISPATCHER_SERVLET_BEAN_NAME<span class="token punctuation">)</span>    <span class="token keyword">public</span> DispatcherServlet <span class="token function">dispatcherServlet</span><span class="token punctuation">(</span>HttpProperties httpProperties<span class="token punctuation">,</span> WebMvcProperties webMvcProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DispatcherServlet dispatcherServlet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DispatcherServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//注意</span>        dispatcherServlet<span class="token punctuation">.</span><span class="token function">setDispatchOptionsRequest</span><span class="token punctuation">(</span>webMvcProperties<span class="token punctuation">.</span><span class="token function">isDispatchOptionsRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dispatcherServlet<span class="token punctuation">.</span><span class="token function">setDispatchTraceRequest</span><span class="token punctuation">(</span>webMvcProperties<span class="token punctuation">.</span><span class="token function">isDispatchTraceRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dispatcherServlet<span class="token punctuation">.</span><span class="token function">setThrowExceptionIfNoHandlerFound</span><span class="token punctuation">(</span>webMvcProperties<span class="token punctuation">.</span><span class="token function">isThrowExceptionIfNoHandlerFound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dispatcherServlet<span class="token punctuation">.</span><span class="token function">setPublishEvents</span><span class="token punctuation">(</span>webMvcProperties<span class="token punctuation">.</span><span class="token function">isPublishRequestHandledEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dispatcherServlet<span class="token punctuation">.</span><span class="token function">setEnableLoggingRequestDetails</span><span class="token punctuation">(</span>httpProperties<span class="token punctuation">.</span><span class="token function">isLogRequestDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> dispatcherServlet<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token comment" spellcheck="true">//如果存在类定义则配置</span>    <span class="token annotation punctuation">@ConditionalOnBean</span><span class="token punctuation">(</span>MultipartResolver<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//判断如果不存在bean名称为DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME，则配置 bean</span>    <span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> DispatcherServlet<span class="token punctuation">.</span>MULTIPART_RESOLVER_BEAN_NAME<span class="token punctuation">)</span>    <span class="token keyword">public</span> MultipartResolver <span class="token function">multipartResolver</span><span class="token punctuation">(</span>MultipartResolver resolver<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// Detect if the user has created a MultipartResolver but named it incorrectly</span>        <span class="token keyword">return</span> resolver<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>通过上面的代码,可以看到这个自动配置类使用了许多<code>@Conditional**</code>注解来条件性地加载配置（比如说是否存在指定的类），配置的默认值从一个<code>**Properties</code>类中取出，如果用户配置了自定义属性，会覆盖掉<code>**Properties</code>中的默认值。</p><p>到这里,应该明白为什么几乎在没有任何配置下就能用Spring Boot启动 Spring MVC项目。但是有时候,我们需要对这些默认的环境进行修改以适应个性化的要求,这些在 Spring Boot中也是非常简单的,正如<code>@EnableConfigurationProperties</code>注解那样，它允许读入配置文件的内容来自定义自动初始化所需的内容。</p><h1 id="Spring-Boot配置文件">2 Spring Boot配置文件</h1><p>Spring Boot的所有的AutoConfiguration属性项可以在 <a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#common-application-properties</a> 看到。这一节我们主要介绍自定义配置。</p><h2 id="yaml语法">2.1 yaml语法</h2><p>配置文件推荐使用yaml语法来写，通过缩进来表达数据关系。</p><h2 id="字符串">2.2 字符串</h2><p>字符串​可以不加引号，如果加引号：</p><ul><li><code>&quot;&quot;</code>：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思<ul><li><code>name: &quot;zhangsan \n lisi&quot;</code>：<code>\n</code>会解析为回车</li></ul></li><li><code>&#39;&#39;</code>：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据<ul><li><code>name: &#39;zhangsan \n lisi&#39;</code>：<code>\n</code>不会解析为回车</li></ul></li></ul><h2 id="对象、Map">2.3 对象、Map</h2><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">friends</span><span class="token punctuation">:</span>    <span class="token key atrule">lastName</span><span class="token punctuation">:</span> zhangsan    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">20</span></code></pre><p>行内写法：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">friends</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">lastName</span><span class="token punctuation">:</span> zhangsan<span class="token punctuation">,</span><span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span></code></pre><h3 id="数组（List、Set）">2.3.1 数组（List、Set）</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">pets</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> cat    <span class="token punctuation">-</span> dog    <span class="token punctuation">-</span> pig</code></pre><p>行内写法：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">pets</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>cat<span class="token punctuation">,</span>dog<span class="token punctuation">,</span>pig<span class="token punctuation">]</span></code></pre><h2 id="自定义属性配置">2.4 自定义属性配置</h2><p>可以在类上加上<code>@ConfigurationProperties(prefix=&quot;&quot;)</code>注解，把本类中所有属性和配置文件中相关的配置进行绑定。</p><p>只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能。</p><p>例：</p><p>JavaBean</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Boolean boss<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> maps<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> lists<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//getter and setter...</span><span class="token punctuation">}</span></code></pre><p>配置：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>    <span class="token key atrule">lastName</span><span class="token punctuation">:</span> hello    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">18</span>    <span class="token key atrule">boss</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">birth</span><span class="token punctuation">:</span> 2000/01/01    <span class="token key atrule">maps</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token key atrule">k1</span><span class="token punctuation">:</span> v1<span class="token punctuation">,</span><span class="token key atrule">k2</span><span class="token punctuation">:</span> <span class="token number">12</span><span class="token punctuation">}</span>    <span class="token key atrule">lists</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> lisi      <span class="token punctuation">-</span> zhaoliu    <span class="token key atrule">dog</span><span class="token punctuation">:</span>      <span class="token key atrule">name</span><span class="token punctuation">:</span> 小狗      <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">7</span></code></pre><p>它默认从全局配置中获取值，可以使用<code>@PropertySource(value={})</code>来指定配置文件。</p><p>还有一种方法是使用<code>@Value</code>，它必须配合SpEL来指定对应配置的名称，不支持松散语法绑定（即大小写等不匹配）。</p><h2 id="配置文件占位符">2.5 配置文件占位符</h2><h3 id="随机数">2.5.1 随机数</h3><ul><li><code>${random.value}</code></li><li><code>${random.int}</code></li><li><code>${random.long}</code></li><li><code>${random.int(10)}</code></li><li><code>${random.int[1024,65536]}</code></li></ul><h3 id="占位符获取之前配置的值，如果没有可以是用-指定默认值">2.5.2 占位符获取之前配置的值，如果没有可以是用:指定默认值</h3><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">person.last-name</span><span class="token punctuation">=</span><span class="token attr-value">张三${random.uuid}</span><span class="token attr-name">person.age</span><span class="token punctuation">=</span><span class="token attr-value">${random.int}</span><span class="token attr-name">person.birth</span><span class="token punctuation">=</span><span class="token attr-value">2017/12/15</span><span class="token attr-name">person.boss</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">person.maps.k1</span><span class="token punctuation">=</span><span class="token attr-value">v1</span><span class="token attr-name">person.maps.k2</span><span class="token punctuation">=</span><span class="token attr-value">14</span><span class="token attr-name">person.lists</span><span class="token punctuation">=</span><span class="token attr-value">a,b,c</span><span class="token attr-name">person.dog.name</span><span class="token punctuation">=</span><span class="token attr-value">${person.hello:hello}_dog</span><span class="token attr-name">person.dog.age</span><span class="token punctuation">=</span><span class="token attr-value">15</span></code></pre><h2 id="配置文件加载位置">2.6 配置文件加载位置</h2><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p><ul><li><code>file:./config/</code></li><li><code>file:./</code></li><li><code>classpath:/config/</code></li><li><code>classpath:/</code></li></ul><p>优先级由高到底，高优先级的配置会覆盖低优先级的配置</p><p>SpringBoot会从这四个位置全部加载主配置文件，<strong>互补配置</strong></p><p>我们还可以通过<code>spring.config.location</code>来改变默认的配置文件位置。</p><p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</strong></p><pre class=" language-shell"><code class="language-shell">java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --spring.config.location=G:/application.properties</code></pre><p>SpringBoot支持的所有的外部配置文件加载方法见：</p><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config</a></p><h2 id="ImportResource注解">2.7 @ImportResource注解</h2><p><code>@ImportResource</code>可以帮助导入传统xml类型的配置，例如springcontext配置，直接将它写在启动类上就行了。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//导入Spring的配置文件让其生效</span><span class="token annotation punctuation">@ImportResource</span><span class="token punctuation">(</span>locations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"classpath:beans.xml"</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BootHelloworldApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>BootHelloworldApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="多环境化配置Profile">2.8 多环境化配置Profile</h2><h3 id="properties">2.8.1 properties</h3><p>在真实的应用中，常常会有多个环境（如：开发，测试，生产等），不同的环境数据库连接都不一样，这个时候就需要用到spring.profile.active的强大功能了，它的格式为 <code>application-{profile}.properties</code>，这里的 application 为前缀不能改，<code>{profile}</code>是我们自己定义的。</p><p>application.properties就是默认的配置文件。</p><p>在 <code>application.properties</code> 配置文件中写入 <code>spring.profiles.active=dev</code>，就可以指定使用profile为dev的配置文件。</p><p>也可以使用虚拟机参数<code>-Dspring.profiles.active=dev</code>指定</p><h3 id="yaml文档块">2.8.2 yaml文档块</h3><pre class=" language-yaml"><code class="language-yaml"><span class="token comment" spellcheck="true"># document 1</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>    <span class="token key atrule">active</span><span class="token punctuation">:</span> prod<span class="token punctuation">---</span><span class="token comment" spellcheck="true"># document 2</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8083</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> dev<span class="token punctuation">---</span><span class="token comment" spellcheck="true"># document 3</span><span class="token key atrule">server</span><span class="token punctuation">:</span>  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8084</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">profiles</span><span class="token punctuation">:</span> prod  <span class="token comment" spellcheck="true">#指定属于哪个环境</span></code></pre><p>文档块之间使用<code>---</code>分隔，第一个文档块为默认使用的配置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;SpringBoot配置与自动配置原理&lt;/p&gt;
&lt;h1 id=&quot;自动配置原理&quot;&gt;1 自动配置原理&lt;/h1&gt;&lt;p&gt;SpringBoot启动的时候加载主配置类，开启了自动配置功能 &lt;code&gt;@EnableAutoConfiguration&lt;/code&gt;：&lt;/p&gt;
&lt;pre c
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SpringBoot" scheme="https://www.codetool.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>leetcode322-零钱兑换</title>
    <link href="https://www.codetool.top/article/leetcode322-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2/"/>
    <id>https://www.codetool.top/article/leetcode322-零钱兑换/</id>
    <published>2020-03-08T09:53:09.000Z</published>
    <updated>2020-03-08T09:55:34.373Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 <code>-1</code>。</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong> coins = [1, 2, 5], amount = 11<br><strong>输出:</strong> 3<br><strong>解释:</strong> 11 = 5 + 5 + 1</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong> coins = [1, 2, 5], amount = 11<br><strong>输出:</strong> 3<br><strong>解释:</strong> 11 = 5 + 5 + 1</p></blockquote><p><strong>说明:</strong></p><p>你可以认为每种硬币的数量是无限的。</p><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>这道题和<a href="../leetcode279-完全平方数">leetcode279-完全平方数</a>类似，可以使用BFS+剪枝的方法来做。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> visited<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">coinChange</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> coins<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>amount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span>amount<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Integer num <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                depth<span class="token operator">++</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>coins<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">int</span> left <span class="token operator">=</span> num<span class="token operator">-</span>coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>left <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>visited<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>                visited<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 &lt;code&gt;-1&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;示例 1:
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="leetcode" scheme="https://www.codetool.top/tags/leetcode/"/>
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="搜索树" scheme="https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot介绍和HelloWorld入门程序</title>
    <link href="https://www.codetool.top/article/SpringBoot%E4%BB%8B%E7%BB%8D%E5%92%8CHelloWorld%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F/"/>
    <id>https://www.codetool.top/article/SpringBoot介绍和HelloWorld入门程序/</id>
    <published>2020-03-08T08:47:27.000Z</published>
    <updated>2020-03-08T13:35:14.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Boot-简介">1 Spring Boot 简介</h1><ul><li>简化Spring应用开发的一个框架；</li><li>整个Spring技术栈的一个大整合；</li><li>J2EE开发的一站式解决方案；</li></ul><p>Spring Boot用来简化Spring应用开发，约定大于配置，去繁从简，just run就能创建一个独立的，产品级别的应用</p><h2 id="优点">1.1 优点</h2><ul><li>快速创建独立运行的Spring项目以及与主流框架集成</li><li>使用嵌入式的Servlet容器，应用无需打成WAR包</li><li>starters自动依赖与版本控制</li><li>大量的自动配置，简化开发，也可修改默认值</li><li>无需配置XML，无代码生成，开箱即用</li><li>准生产环境的运行时应用监控</li><li>与云计算的天然集成</li></ul><h2 id="starter概念">1.2 starter概念</h2><p>Spring Boot Starter是一组被依赖第三方类库的集合。</p><p>如果你要开发一个web应用程序，就通过包管理工具(如maven)引入<code>spring-boot-starter-web</code>就可以了，而不用分别引入下面这么多依赖类库，spring-boot-starter-web一次性帮你引入下面的这些常用类库。</p><ul><li>Spring — spring 核心, beans, context上下文, AOP面向切面</li><li>Web MVC — Spring MVC</li><li>Jackson — JSON数据的序列化与反序列化</li><li>Validation — Hibernate参数校验及校验API</li><li>嵌入式 Servlet Container — Tomcat</li><li>日志框架Logging — logback, slf4j</li></ul><p>Spring Boot 默认支持的starter见 <a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-starter" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-starter</a></p><h2 id="Spring-Boot-Starter-Parent">1.3 Spring Boot Starter Parent</h2><p>所有的Spring Boot项目默认使用spring-boot-starter-parent作为应用程序的父项目。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span></code></pre><p>继承父项目的好处在于： 统一java版本配置和其他的一些依赖类库的版本。也就是说，你引入的第三方类库不要加版本号，父项目替你管理版本，而且是经过兼容性测试的。比你自己随便引入一个版本兼容性更好。</p><h2 id="Spring-Boot集成第三方类库的步骤">1.4 Spring Boot集成第三方类库的步骤</h2><ol><li>通过maven引入springboot-XXXX-starter</li><li>修改ymal或properties全局统一配置文件</li><li>加入一个Java Config。这个属于个性化配置，如果使用通用配置，这一步不需要。</li></ol><h2 id="Spring-Boot2-x新特性">1.5 Spring Boot2.x新特性</h2><h3 id="基础环境升级">1.5.1 基础环境升级</h3><ul><li><p>最低 JDK 8，支持 JDK 9，不再支持 Java 6 和 7。Spring Boot 2.0 要求 Java 8 作为最低版本，许多现有的 API 已更新，以利用 Java 8 的特性。<br>例如，接口上的默认方法，函数回调以及新的 API，如 javax.time。</p></li><li><p>如果你正在使用 Java 7 或更早版本，则在开发 Spring Boot 2.0 应用程序之前，需要升级你的 JDK。</p></li></ul><h3 id="依赖组件升级">1.5.2 依赖组件升级</h3><ul><li>Jetty 9.4，Jetty 是一个开源的 Servlet 容器，它为基于 Java 的 Web 内容，例如 JSP 和 Servlet 提供运行环境。Jetty 是使用 Java 语言编写的，它的 API 以一组 JAR 包的形式发布。</li><li>Tomcat 8.5，Apache Tomcat 8.5.x 旨在取代 8.0.x，完全支持 Java 9。</li><li>Flyway 5，Flyway 是独立于数据库的应用、管理并跟踪数据库变更的数据库版本管理工具。用通俗的话讲，Flyway 可以像 SVN 管理不同人的代码那样，管理不同人的 SQL 脚本，从而做到数据库同步。</li><li>Hibernate 5.2，Hibernate 是一款非常流行的 ORM 框架。</li><li>Gradle 3.4，Spring Boot 的 Gradle 插件在很大程度上已被重写，有了重大的改进。</li><li>Thymeleaf 3.0，Thymeleaf 3 相对于 Thymeleaf 2 有非常大的性能提升</li></ul><h3 id="默认软件替换">1.5.3 默认软件替换</h3><ul><li>默认数据库连接池已从 Tomcat 切换到 HikariCP，HikariCP 是一个高性能的 JDBC 连接池，Hikari 是日语“光”的意思。</li><li>Redis客户端默认使用 Lettuce，替换掉Jedis。Lettuce 是一个可伸缩的线程安全的 Redis 客户端，用于同步、异步和反应使用。多个线程可以共享同一个 RedisConnection，它利用优秀 Netty NIO 框架来高效地管理多个连接，支持先进的 Redis 功能，如 Sentinel、集群、流水线、自动重新连接和 Redis 数据模型。</li></ul><h3 id="新技术的引入">1.5.4 新技术的引入</h3><ul><li>响应式编程WebFlux，重要的变革</li><li>支持 <code>Quartz</code>,Spring Boot 1.0 并没有提供对 Quartz 的支持，之前出现了各种集成方案，Spring Boot 2.0 给出了最简单的集成方式。</li><li>对Kotlin 的支持</li><li>JOOQ 的支持,JOOQ 是基于 Java 访问关系型数据库的工具包。JOOQ 既吸取了传统 ORM 操作数据的简单性和安全性，又保留了原生 SQL 的灵活性，它更像是介于 ORMS 和 JDBC 的中间层。</li></ul><h1 id="Spring-Boot-HelloWorld">2 Spring Boot HelloWorld</h1><p>使用Spring Boot来做一个Hello World入门程序：</p><p>1) 在idea中创建Spring Initializr项目</p><p><img src="https://api.codetool.top/img/15836538134655.png" alt></p><p>2) 添加maven依赖</p><p>Idea会自动为我们生成如下pom文件：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">></span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.5.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- lookup parent from repository --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.rhett<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>boot-helloworld<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.0.1-SNAPSHOT<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>boot-helloworld<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Demo project for Spring Boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.junit.vintage<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit-vintage-engine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">></span></span></code></pre><p>添加web-starter进去：</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>可以移除相关maven管理的文件，使用idea管理：</p><p><img src="https://api.codetool.top/img/15836538608240.png" alt></p><p>resources文件夹中目录结构</p><ul><li><code>static</code>：保存所有的静态资源； js css  images；</li><li><code>templates</code>：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）；</li><li><code>application.properties</code>：Spring Boot应用的配置文件；可以修改一些默认设置，可以使用yml语法进行配置。</li></ul><p>3) 查看启动类</p><p>idea默认为我们生成了启动类：</p><p><img src="https://api.codetool.top/img/15836540733254.png" alt></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @SpringBootApplication来标记一个主程序类，说明这是一个Spring Boot应用 */</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BootHelloworldApplication</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SpringApplication<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>BootHelloworldApplication<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>4) 编写Controller</p><p>springboot只会扫描启动类当前包和以下的包，创建以下包层次，编写一个HelloController：</p><p><img src="https://api.codetool.top/img/15836542358252.png" alt></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>@RestController</code>相当于<code>@ResponseBody</code>+<code>@Controller</code>，返回的内容直接写入响应体，不会解析到视图。</p><p>5) 启动程序</p><p>运行启动类中的main方法，程序就启动起来了，在浏览器中输入<code>localhost:8080/hello</code>来观察运行结果：</p><p><img src="https://api.codetool.top/img/1583654442364.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Boot-简介&quot;&gt;1 Spring Boot 简介&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;简化Spring应用开发的一个框架；&lt;/li&gt;
&lt;li&gt;整个Spring技术栈的一个大整合；&lt;/li&gt;
&lt;li&gt;J2EE开发的一站式解决方案；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="SpringBoot" scheme="https://www.codetool.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>MySQL之分区表介绍</title>
    <link href="https://www.codetool.top/article/MySQL%E4%B9%8B%E5%88%86%E5%8C%BA%E8%A1%A8%E4%BB%8B%E7%BB%8D/"/>
    <id>https://www.codetool.top/article/MySQL之分区表介绍/</id>
    <published>2020-03-07T14:10:45.000Z</published>
    <updated>2020-03-07T14:22:04.547Z</updated>
    
    <content type="html"><![CDATA[<p>本文大部分参考自《MySQL技术内幕：InnoDB存储引擎》</p><h1 id="概述">1 概述</h1><p>对于InnoDB，分区就是把一个数据表的物理存储拆分为多个ibd文件（相当于独立表空间再拆分成了多个表空间）。分区后的MyISAM，则是每个分区有一个myi文件（表的索引信息）和一个myd文件（表的数据信息）。每一个分区，在MySQL看来都是一张独立的表。</p><h1 id="分区类型">2 分区类型</h1><h2 id="水平分区">2.1 水平分区</h2><p>这种形式分区是对表的行进行分区，通过这样的方式不同分组里面的物理列分割的数据集得以组合，从而进行个体分割（单分区）或集体分割（1个或多个分区）。所有在表中定义的列在每个数据集中都能找到，所以表的特性依然得以保持。</p><h2 id="垂直分区">2.2 垂直分区</h2><p>这种分区方式一般来说是通过对表的垂直划分来减少目标表的宽度，使某些特定的列被划分到特定的分区，每个分区都包含了其中的列所对应的行。</p><p><strong>MySQL在5.1时添加了对水平分区的支持。并不支持垂直分区。</strong></p><p>MySQL数据库的分区是局部分区索引，一个分区中既存了数据，又放了索引。也就是说，<strong>每个区的聚集索引和非聚集索引都放在各自区的</strong>（不同的物理文件）。目前MySQL数据库还不支持全局分区（数据存放在各个分区中，但是所有数据的索引放在一个对象中）。</p><h1 id="分区算法">3 分区算法</h1><p>当前MySQL支持以下几种类型的分区：</p><ul><li>RANGE分区：行数据基于属于一个给定连续区间的列值被放入分区，MySQL5.5开始支持。</li><li>LIST分区：和RANGE类似，只是LIST分区面向的是离散的值。MySQL5.5开始支持。</li><li>HASH分区：根据用户自定义的表达式的返回值来进行分区，返回值不能为负数。</li><li>KEY分区：根据MySQL数据库提供的哈希函数来进行分区。</li></ul><p>无论哪种类型的分区，如果表中存在主键或唯一索引时，分区列（用来判断该分往哪个分区）必须是唯一索引的一个组成部分。</p><h2 id="RANGE分区">3.1 RANGE分区</h2><p>示例</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> tbl_new<span class="token punctuation">(</span>    id <span class="token keyword">INT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span><span class="token punctuation">,</span>    title <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> RANGE<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">(</span>    <span class="token keyword">PARTITION</span> t0 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> t1 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">PARTITION</span> t2 <span class="token keyword">VALUES</span> LESS THAN<span class="token punctuation">(</span>MAXVALUE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个表会把以id列作为分区依据，当id：</p><ul><li>0~10 放在 t0</li><li>10~20 放在 t1</li><li>&gt;20 放在 t2</li></ul><p>当插入一个不在分区范围内的值的时候，MySQL会报异常。</p><h2 id="LIST分区">3.2 LIST分区</h2><p>示例</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token keyword">user</span> <span class="token punctuation">(</span>    uid <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    userName <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    gender <span class="token keyword">tinyint</span><span class="token punctuation">)</span><span class="token keyword">partition</span> <span class="token keyword">by</span> list<span class="token punctuation">(</span>gender<span class="token punctuation">)</span> <span class="token punctuation">(</span>    <span class="token keyword">partition</span> male <span class="token keyword">values</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">partition</span> female <span class="token keyword">values</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">partition</span> unknown <span class="token keyword">values</span> <span class="token operator">in</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这个表会把以gender列（性别）作为分区依据，当gender：</p><ul><li>= 1 放在 male</li><li>= 2 放在 female</li><li>= 3 放在 unknown</li></ul><p>当插入一个不在分区范围内的值的时候，MySQL同样会报异常。</p><p>当一条Insert语句插入多个值的时候，而其中有一些值是在分区范围内的，MyISAM引擎会把第一个不满足范围的数据前面的数据全部插入，而后面的不处理。而InnoDB则把它当成一个事务，都不会处理。</p><h2 id="HASH分区">3.3 HASH分区</h2><p>示例：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_hash<span class="token punctuation">(</span>    <span class="token number">a</span> <span class="token keyword">INT</span><span class="token punctuation">,</span>    <span class="token number">b</span> <span class="token keyword">DATETIME</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token keyword">HASH</span><span class="token punctuation">(</span>YEAR<span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span><span class="token punctuation">)</span>PARTITIONS <span class="token number">4</span><span class="token punctuation">;</span></code></pre><p>用户给数据库提供分区的依据，<code>YEAR(b)</code>，必须是一个正整数，然后需要通过<code>PARTITIONS num</code>告知数据库分区的数量，然后数据库自动根据<code>YEAR(b)</code>将数据均匀分到这些分区中。如果没有<code>PARTITIONS num</code>语句，分区的数量默认为1。</p><h2 id="KEY分区">3.4 KEY分区</h2><p>KEY分区和HASH分区相似，不同之处在于HASH分区使用用户定义的函数进行分区，KEY分区使用MySQL数据库提供的函数进行分区。对于大多数存储引擎，MySQL数据库使用其内部的哈希函数，这些函数基于与PASSWORD()一样的运算法则。</p><p>示例：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> t_key<span class="token punctuation">(</span>    <span class="token number">a</span> <span class="token keyword">INT</span><span class="token punctuation">,</span>    <span class="token number">b</span> <span class="token keyword">DATETIME</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span><span class="token keyword">PARTITION</span> <span class="token keyword">BY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span>PARTITIONS <span class="token number">4</span><span class="token punctuation">;</span></code></pre><h2 id="其他">3.5 其他</h2><p>COLUMNS分区、子分区</p><h1 id="分区的应用场景">4 分区的应用场景</h1><ol><li>表非常大以至于无法全部放在内存中，或者只在表的最后部分有热点数据，其他均为历史数据（可以将热点数据提取出来，加快热点数据的查询、访问效率）</li><li>分区表的数据更容易维护。（批量删除数据-&gt;清除整个分区）</li><li>分区表的数据可以分布在不同的物理设备上，从而高效地利用多个硬件设备</li><li>可以使用分区表来避免某些特殊的瓶颈。比如 InnoDB 的单个索引的互斥访问，ext3 文件系统的 inode 锁竞争。</li><li>还可以备份和恢复独立的分区</li></ol><h1 id="分区的限制">5 分区的限制</h1><ol><li>一个表最多只能有 1024 个分区</li><li>如果表中存在主键或唯一索引时，分区列必须是唯一索引的一个组成部分。</li><li>分区表中无法使用外键索引</li></ol><h1 id="分区的陷阱">6 分区的陷阱</h1><h2 id="NULL值会使分区过滤无效">6.1 NULL值会使分区过滤无效</h2><p>分区的表达式的值可以是 NULL；第一个分区是一个特殊分区，如果表达式的值为 NULL 或非法值，记录都会被存放到第一个分区。WHERE 查询时即使看起来可以过滤到只有一个分区，但实际会检查两个分区，即第一个分区。最好是设置分区的列为NOT NULL。</p><h2 id="分区列和索引列不匹配">6.2 分区列和索引列不匹配</h2><p>如果定义的索引列和分区列不匹配，会导致索引无法进行分区过滤。</p><p>假设在列 a 上定义了索引，而在列 b 上进行分区。因为每个分区都有其独立的索引，所以扫描 b 上的索引就需要扫描每一个分区内对应的索引。</p><h2 id="选择分区的成本可能很高">6.3 选择分区的成本可能很高</h2><p>尤其是范围分区，对于回答“这一行属于哪个分区”、“这些符合查询条件的行在哪些分区”这样的问题的成本可能会非常高。其他的分区类型，比如KEY分区和HASH分区，就没有这样的问题。在批量插入时问题尤其严重。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文大部分参考自《MySQL技术内幕：InnoDB存储引擎》&lt;/p&gt;
&lt;h1 id=&quot;概述&quot;&gt;1 概述&lt;/h1&gt;&lt;p&gt;对于InnoDB，分区就是把一个数据表的物理存储拆分为多个ibd文件（相当于独立表空间再拆分成了多个表空间）。分区后的MyISAM，则是每个分区有一个myi
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="数据库" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://www.codetool.top/tags/MySQL/"/>
    
      <category term="优化" scheme="https://www.codetool.top/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>MySQL主从复制简介</title>
    <link href="https://www.codetool.top/article/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E7%AE%80%E4%BB%8B/"/>
    <id>https://www.codetool.top/article/MySQL主从复制简介/</id>
    <published>2020-03-07T11:30:48.000Z</published>
    <updated>2020-03-07T11:34:26.870Z</updated>
    
    <content type="html"><![CDATA[<p>该文不谈及良好的主从复制拓扑结构和主从复制中可能出现的问题，以后有时间再写。</p><h1 id="概述">1 概述</h1><p>复制解决的基本问题是让一台服务器的数据与其他服务器保持同步。一台主库的数据可以同步到多台备库上，备库本身也可以被配置成另外一台服务器的主库。</p><p>MySQL 支持两种复制方式：基于行的复制和基于语句的复制。这两种方式都是通过在主库上记录 binlog，在备库重放日志的方式来实现异步的数据复制。这意味着，在同一时间点备库上的数据可能与主库存在不一致，并且保证主备之间的延迟。</p><p>复制通常不会增加主库的开销，主要是启用 binlog 带来的开销，但出于备份或及时从崩溃中恢复的目的，这点开销也是必要的。除此之外，每个备库也会对主库增加一些负载（网络IO），尤其当备库请求从主库读取旧的 binlog 时，可能会造成更高的 IO 开销。</p><p>通过复制可以将读操作指向备库来获得更好的读扩展，但对于写操作，除非设计得当，否则并不适合通过复制来扩展写操作。</p><h2 id="复制解决的问题">1.1 复制解决的问题</h2><ul><li>数据分布</li><li>负载均衡，读写分离</li><li>备份</li><li>高可用和故障切换</li></ul><h1 id="复制原理">2 复制原理</h1><h2 id="复制如何工作">2.1 复制如何工作</h2><p><img src="https://api.codetool.top/img/15835759827402.png" alt></p><ol><li>在主库上把数据更改记录在 <code>binlog</code> 中（这些记录称为二进制日志事件）</li><li>备库将主库上的日志<strong>复制到自己的中继日志中</strong></li><li>备库读取中继日志中的事件，将其重放到备库数据之上</li></ol><h2 id="基于语句的复制">2.2 基于语句的复制</h2><p>主库会记录那些造成数据更改的查询，当备库读取并重放这些事件时，实际上只是<strong>把主库上执行过的 SQL 再执行一遍。</strong> 即binlog的statement模式</p><p>优点：</p><ol><li>实现简单 </li><li>binlog 中的事件更加紧凑</li></ol><p>问题：</p><ol><li>同一条 SQL 在主库和备库上执行的时间可能稍微或很不相同，因此在传输的 binlog 中，<br>除了 SQL，还有一些元数据，比如时间戳</li><li>一些无法被正确复制的 SQL，存储过程、触发器</li><li>更新必须是串行的，这需要更多的锁</li></ol><h2 id="基于行的复制">2.3 基于行的复制</h2><p>会将实际数据记录在 binlog 中。即binlog的row模式</p><p>好处：</p><ol><li>可以正确地复制每一行，一些语句可以被更加有效地复制</li><li>复制更加高效（但也视情况而定）</li></ol><h1 id="搭建步骤">3 搭建步骤</h1><h2 id="master">3.1 master</h2><ol><li>在master的配置文件中，配置如下内容：</li></ol><pre class=" language-conf"><code class="language-conf">#mysql 服务ID,保证整个集群环境中唯一server-id=1#mysql binlog 日志的存储路径和文件名，主从复制是基于binlog的log-bin=/var/lib/mysql/mysqlbin#错误日志,默认已经开启#log-err#mysql的安装目录#basedir#mysql的临时目录#tmpdir#mysql的数据存放目录#datadir#是否只读,1 代表只读, 0 代表读写read-only=0#忽略的数据, 指不需要同步的数据库binlog-ignore-db=mysql#指定同步的数据库#binlog-do-db=db01</code></pre><ol start="2"><li>在客户端中建同步数据的账户，并且进行授权操作：</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">grant</span> <span class="token keyword">replication</span> slave <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'slave1'</span>@'slave_host<span class="token string">' identified by '</span>password'<span class="token punctuation">;</span>    flush <span class="token keyword">privileges</span><span class="token punctuation">;</span></code></pre><p>如果需要配置多个从机就创建多个账户，<code>&#39;slave_host&#39;</code>代表从机的ip地址。</p><ol start="3"><li>查看master状态：</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> master <span class="token keyword">status</span><span class="token punctuation">;</span></code></pre><ul><li>File : 从哪个日志文件开始推送日志文件 </li><li>Position ： 从哪个位置开始推送日志</li><li>Binlog_Ignore_DB : 指定不需要同步的数据库</li></ul><h2 id="slave">3.2 slave</h2><ol><li>在 slave 端配置文件中，配置如下内容：</li></ol><pre class=" language-conf"><code class="language-conf">#mysql服务端ID,唯一server-id=2#指定binlog日志log-bin=/var/lib/mysql/mysqlbin</code></pre><ol start="2"><li>在客户端内执行如下指令 ：</li></ol><pre class=" language-sql"><code class="language-sql">change master <span class="token keyword">to</span> master_host<span class="token operator">=</span> <span class="token string">'master_host'</span><span class="token punctuation">,</span> master_user<span class="token operator">=</span><span class="token string">'slave1'</span><span class="token punctuation">,</span> master_password<span class="token operator">=</span><span class="token string">'password'</span><span class="token punctuation">,</span> master_log_file<span class="token operator">=</span><span class="token string">'mysqlbin.000001'</span><span class="token punctuation">,</span> master_log_pos<span class="token operator">=</span><span class="token number">413</span><span class="token punctuation">;</span></code></pre><p>指定当前从库对应的主库的IP地址，用户名，密码，从哪个日志文件开始的那个位置开始同步推送日志。（这些都是在master status中看到的）</p><ol start="3"><li>开启同步操作</li></ol><pre class=" language-sql"><code class="language-sql"><span class="token keyword">start</span> slave<span class="token punctuation">;</span><span class="token keyword">show</span> slave <span class="token keyword">status</span><span class="token punctuation">;</span></code></pre><ol start="4"><li>停止同步操作</li></ol><pre class=" language-sql"><code class="language-sql">stop slave<span class="token punctuation">;</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;该文不谈及良好的主从复制拓扑结构和主从复制中可能出现的问题，以后有时间再写。&lt;/p&gt;
&lt;h1 id=&quot;概述&quot;&gt;1 概述&lt;/h1&gt;&lt;p&gt;复制解决的基本问题是让一台服务器的数据与其他服务器保持同步。一台主库的数据可以同步到多台备库上，备库本身也可以被配置成另外一台服务器的主库。
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="数据库" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://www.codetool.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL之日志配置全解</title>
    <link href="https://www.codetool.top/article/MySQL%E4%B9%8B%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E5%85%A8%E8%A7%A3/"/>
    <id>https://www.codetool.top/article/MySQL之日志配置全解/</id>
    <published>2020-03-07T09:43:59.000Z</published>
    <updated>2020-03-07T09:44:31.028Z</updated>
    
    <content type="html"><![CDATA[<h1 id="错误日志">1 错误日志</h1><p>错误日志是 MySQL 中最重要的日志之一，它记录了当 mysqld 启动和停止时，以及服务器在运行过程中发生任何严重错误时的相关信息。当数据库出现任何故障导致无法正常使用时，可以首先查看此日志。</p><p>该日志是默认开启的 ， 默认存放目录为 mysql 的数据目录（var/lib/mysql）, 默认的日志文件名为 <code>hostname.err</code>（hostname是主机名）。</p><h2 id="相关配置">1.1 相关配置</h2><ul><li><code>log-error</code>：错误日志存放路径</li><li><code>log-warnings</code>：是否将警告信息也输入错误日志，1代表是（5.7后废弃）</li><li><code>log_error_verbosity</code>：（代替log-warnings）错误日志级别<ul><li>1：errors only</li><li>2：errors and warnings</li><li>3：errors，warnings and notes</li></ul></li></ul><h1 id="二进制日志">2 二进制日志</h1><p>二进制日志包含了所有的 DDL（数据定义语言）语句和 DML（数据操纵语言）语句的事件信息，但是不包括数据查询语句。语句以”事件”的形式保存，所以包含了时间、事件开始和结束位置等信息。此日志对于灾难时的数据恢复起着极其重要的作用，MySQL的主从复制， 就是通过该binlog实现的。</p><p>二进制日志，默认情况下是没有开启的，需要到MySQL的配置文件中开启，并配置MySQL日志的格式。 </p><p>mysqld还创建一个二进制日志<strong>索引文件</strong>，当二进制日志文件滚动的时候会向该文件中写入对应的信息。所以该文件<strong>包含所有使用的二进制日志文件的文件名</strong>。默认情况下该文件与二进制日志文件的文件名相同，扩展名为’.index’。</p><h2 id="相关配置-1">2.1 相关配置</h2><ul><li><code>log_bin=[on|off|file_name]</code>：开启binlog，如果没有给定file_name，则默认为datadir下的主机名加”-bin”，并在后面跟上一串数字表示日志序列号。</li><li><code>binlog_format=[STATEMENT|ROW|MIXED]</code>：指定二进制日志的格式。<ul><li>STATEMENT：该日志格式在日志文件中记录的都是SQL语句（statement），每一条对数据进行修改的SQL都会记录在日志文件中，通过Mysql提供的mysqlbinlog工具，可以清晰的查看到每条语句的文本。主从复制的时候，从库（slave）会将日志解析为原文本，并在从库重新执行一次。</li><li>ROW：该日志格式在日志文件中记录的是每一行的数据变更，而不是记录SQL语句。比如，执行SQL语句 ： update tb_book set status=’1’ , 如果是STATEMENT 日志格式，在日志中会记录一行SQL文件； 如果是ROW，由于是对全表进行更新，也就是每一行记录都会发生变更，ROW 格式的日志中会记录每一行的数据变更。</li><li>MIXED：这是目前MySQL默认的日志格式，即混合了STATEMENT 和 ROW两种格式。默认情况下采用STATEMENT，但是在一些特殊情况下采用ROW来进行记录。MIXED 格式能尽量利用两种模式的优点，而避开他们的缺点。</li></ul></li><li><code>log_bin_index = file_name</code>：配置索引文件的名字</li><li><code>expire_logs_days</code>：指定自动删除二进制日志的时间，即日志过期时间</li><li><code>binlog_do_db</code> ：明确指定要记录日志的数据库</li><li><code>binlog_ignore_db</code> ：指定不记录二进制日志的数据库</li><li><code>binlog_cache_size = 32768</code> : 基于事务类型的日志会先记录在缓冲区，当达到该缓冲大小时这些日志会写入磁盘</li><li><code>max_binlog_size</code> ：指定二进制日志文件最大值，超出指定值将自动滚动。但由于事务不会跨文件，所以并不一定总是精确。</li><li><code>sync_binlog = { 0 | n }</code> ：日志何时刷到磁盘<ul><li>0:不同步，日志何时刷到磁盘由FileSystem决定，这个性能最好。</li><li>n:每写n次二进制日志事件(不是事务)，MySQL将执行一次磁盘同步指令fdatasync()将缓存日志刷新到磁盘日志文件中。Mysql中默认的设置是sync_binlog=0，即不同步，这时性能最好，但风险最大。一旦系统奔溃，缓存中的日志都会丢失。</li><li>在Innodb的主从复制结构中，如果启用了二进制日志(几乎都会启用)，要保证事务的一致性和持久性的时候，必须将sync_binlog的值设置为1，因为每次事务提交都会写入二进制日志，设置为1就保证了每次事务提交时二进制日志都会写入到磁盘中，从而立即被从服务器复制过去。</li></ul></li></ul><h2 id="日志查看">2.2 日志查看</h2><p>由于日志以二进制方式存储，不能直接读取，需要用mysqlbinlog工具来查看，语法如下 ：</p><p><code>mysqlbinlog log-file</code></p><h2 id="日志删除">2.3 日志删除</h2><p>对于比较繁忙的系统，由于每天生成日志量大 ，这些日志如果长时间不清除，将会占用大量的磁盘空间。下面介绍几种删除日志的常见方法 ：</p><p>1) 通过 <code>Reset Master</code> 指令删除全部 binlog 日志，删除之后，日志编号将从 xxxx.000001重新开始。</p><p>2) 执行指令 <code>purge master logs to &#39;mysqlbin.******&#39;</code> ，该命令将删除 <code>******</code> 编号之前的所有日志。 </p><p>3) 执行指令 <code>purge master logs before &#39;yyyy-mm-dd hh24:mi:ss&#39;</code> ，该命令将删除日志为 “yyyy-mm-dd hh24:mi:ss” 之前产生的所有日志。</p><p>4) 设置参数 <code>--expire_logs_days=#</code> ，此参数的含义是设置日志的过期天数， 过了指定的天数后日志将会被自动删除，这样将有利于减少DBA 管理日志的工作量。</p><h1 id="查询日志">3 查询日志</h1><p>查询日志中记录了客户端的所有操作语句，而二进制日志不包含查询数据的SQL语句。</p><p>默认情况下， 查询日志是未开启的。如果需要开启查询日志，需要手动配置。通常不需要开启此日志。</p><h2 id="相关配置-2">3.1 相关配置</h2><ul><li><code>general_log = {0 | 1}</code> ： 是否开启查询日志</li><li><code>general_log_file</code> ： 查询日志存放路径，不给定路径时默认的文件名以 <code>hostname.log</code> 命名。</li></ul><h1 id="慢查询日志">4 慢查询日志</h1><p>MySQL 的慢查询日志是 MySQL 提供的一种日志记录，它用来记录在 MySQL 中响应时间超过阈值的语句，具体指运行时间超过 <code>long_query_time</code> 值的 SQL，则会被记录到慢查询日志中。</p><p><code>long_query_time</code> 的默认值为 10，意思是运行 10s 以上的语句。<strong>默认情况下，Mysql 数据库并不启动慢查询日志，需要我们手动来设置这个参数</strong>，当然，如果不是调优需要的话，一般不建议启动该参数，因为开启慢查询日志会或多或少带来一定的性能影响。慢查询日志支持将日志记录写入文件，也支持将日志记录写入数据库表。</p><p>格式大致如下：</p><pre><code># Time: 180118 14:58:37# User@Host: root[root] @ localhost []  Id:   150# Query_time: 0.000270  Lock_time: 0.000109 Rows_sent: 0  Rows_examined: 6SET timestamp=1516258717;delete from user where User=&#39;app&#39;;</code></pre><p>是哪条语句导致慢查询（sql_text），该慢查询语句的查询时间（query_time），锁表时间（Lock_time），以及扫描过的行数（rows_examined）</p><h2 id="相关配置-3">4.1 相关配置</h2><ul><li><code>slow_query_log</code> ：是否开启慢查询日志，1 表示开启，0 表示关闭。</li><li><code>slow-query-log-file</code>：新版（5.6 及以上版本）：MySQL 数据库慢查询日志存储路径。可以不设置该参数，系统则会默认给一个缺省的文件 host_name-slow.log</li><li><code>long_query_time</code> ：慢查询阈值，当查询时间多于设定的阈值时，记录日志。</li><li><code>log_queries_not_using_indexes</code>：未使用索引的查询也被记录到慢查询日志中（可选项）。</li><li><code>log_output</code>：日志存储方式。默认值是<code>&#39;FILE&#39;</code>，表示将日志存入文件。<code>&#39;TABLE&#39;</code>表示将日志存入数据库，这样日志信息就会被写入到 <code>mysql.slow_log</code> 表中，支持同时记录到文件和数据库，配置的时候以逗号隔开即可。</li></ul><h2 id="慢日志分析工具-mysqldumpslow">4.2 慢日志分析工具 mysqldumpslow</h2><p>在实际生产环境中，如果要手工分析日志，查找、分析 SQL，显然是个体力活，MySQL 提供了日志分析工具 mysqldumpslow。</p><p>参数：</p><ul><li><code>-s</code> 按照那种方式排序<ul><li><code>c</code>：访问计数</li><li><code>l</code>：锁定时间</li><li><code>r</code>:返回记录</li><li><code>al</code>：平均锁定时间</li><li><code>ar</code>：平均访问记录数</li><li><code>at</code>：平均查询时间</li></ul></li><li><code>-t</code> 是top n的意思，返回多少条数据。</li><li><code>-g</code> 可以跟上正则匹配模式，大小写不敏感。</li></ul><p><strong>例：</strong></p><p>得到返回记录集最多的 10 个 SQL。</p><p><code>mysqldumpslow -s r -t 10 /database/mysql/mysql06_slow.log</code></p><p>得到访问次数最多的 10 个 SQL</p><p><code>mysqldumpslow -s c -t 10 /database/mysql/mysql06_slow.log</code></p><p>得到按照时间排序的前 10 条里面含有左连接的查询语句。</p><p><code>mysqldumpslow -s t -t 10 -g “left join” /database/mysql/mysql06_slow.log</code></p><p>另外建议在使用这些命令时结合 | 和 more 使用 ，否则有可能出现刷屏的情况。</p><p><code>mysqldumpslow -s r -t 20 /mysqldata/mysql/mysql06-slow.log | more</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;错误日志&quot;&gt;1 错误日志&lt;/h1&gt;&lt;p&gt;错误日志是 MySQL 中最重要的日志之一，它记录了当 mysqld 启动和停止时，以及服务器在运行过程中发生任何严重错误时的相关信息。当数据库出现任何故障导致无法正常使用时，可以首先查看此日志。&lt;/p&gt;
&lt;p&gt;该日志是默认
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="数据库" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://www.codetool.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>大型网站架构的演变过程</title>
    <link href="https://www.codetool.top/article/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E7%9A%84%E6%BC%94%E5%8F%98%E8%BF%87%E7%A8%8B/"/>
    <id>https://www.codetool.top/article/大型网站架构的演变过程/</id>
    <published>2020-03-07T02:41:31.000Z</published>
    <updated>2020-03-07T02:45:15.871Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单机时代">1 单机时代</h1><p>大型网站都是从小型网站发展而来,网站架构也是一样,是从小型网站架构逐步演化而来。小型网站最开始时没有太多人访问,只需要一台服务器就绰绰有余,最典型的是在小型网站上称霸的LAMP（Linux+Apache+MySQL+PHP）。此时的网站架构如图所示：</p><p><img src="https://api.codetool.top/img/15835099733096.png" alt></p><h1 id="应用服务和数据服务分离">2 应用服务和数据服务分离</h1><p>随着网站业务的发展,一台服务器逐渐不能满足需求:越来越多的用户访问导致性能越来越差,越来越多的数据导致存储空间不足。这时就需要将应用和数据分离。应用和数据分离后整个网站使用三台服务器:应用服务器、文件服务器和数据库服务器，如图所示：</p><p><img src="https://api.codetool.top/img/15835100957354.png" alt></p><p>这三台服务器对硬件资源的要求各不相同,应用服务器需要处理大量的业务逻辑,因此需要更快更强大的CPU;数据库服务器需要快速磁盘检索和数据缓存,因此需要更快的硬盘和更大的内存;文件服务器需要存储大量用户上传的文件,因此需要更大的硬盘。</p><p>随着用户数增多，网站又一次面临挑战：数据库压力太大导致访问延迟，进而影响整个网站的性能。</p><h1 id="使用缓存改善网站性能">3 使用缓存改善网站性能</h1><p>网站访问特点和现实世界的财富分配一样遵循二八定律:80%的业务访问集中在20%的数据上。淘宝买家浏览的商品集中在少部分成交数多、评价良好的商品上;百度搜索关键词集中在少部分热门词汇上;只有经常登录的用户才会发微博、看微博,而这部分用户也只占总用户数目的一小部分。</p><p>既然大部分的业务访问集中在一小部分数据上,那么如果把这一小部分数据缓存在内存中,是不是就可以减少数据库的访问压力,提高整个网站的数据访问速度,改善数据库的写入性能了呢?</p><p>网站使用的缓存可以分为两种:缓存在应用服务器上的本地缓存和缓存在专门的分布式缓存服务器上的远程缓存。<strong>本地缓存的访问速度更快一些,但是受应用服务器内存限制</strong>,其缓存数据量有限,而且会出现和应用程序争用内存的情况。远程分布式缓存可以使用集群的方式,部署大内存的服务器作为专门的缓存服务器,可以在理论上做到不受内存容量限制的缓存服务,如图所示：</p><p><img src="https://api.codetool.top/img/15835104734486.png" alt></p><p>使用缓存后,数据访问压力得到有效缓解,但是单一应用服务器能够处理的请求连接有限,在网站访问高峰期,应用服务器成为整个网站的瓶颈。</p><h1 id="使用应用服务器集群改善网站的并发处理能力">4 使用应用服务器集群改善网站的并发处理能力</h1><p>这也被称为负载均衡：</p><p><img src="https://api.codetool.top/img/15835105892447.png" alt></p><h1 id="数据库读写分离">5 数据库读写分离</h1><p>网站在使用缓存后,使绝大部分数据读操作访问都可以不通过数据库就能完成,但是仍有一部分读操作(缓存访问不命中、缓存过期)和全部的写操作需要访问数据库,在网站的用户达到一定规模后,数据库因为负载压力过高而成为网站的瓶颈。</p><p>通常使用主从复制技术，只<strong>在主机上写数据，在从机上读数据</strong>。</p><p><img src="https://api.codetool.top/img/15835107374315.png" alt></p><h1 id="使用反向代理和CDN加速网站响应">6 使用反向代理和CDN加速网站响应</h1><p>随着网站业务不断发展,用户规模越来越大,由于中国复杂的网络环境,不同地区的用户访问网站时,速度差别也极大。有研究表明,网站访问延迟和用户流失率正相关,</p><p>网站访问越慢,用户越容易失去耐心而离开。为了提供更好的用户体验,留住用户,网站需要加速网站访问速度。主要手段有使用CDN和反向代理,如图所示：</p><p><img src="https://api.codetool.top/img/15835450828492.png" alt></p><p><strong>CDN和反向代理的基本原理都是缓存</strong>,区别在于CDN部署在网络提供商的机房,使用户在请求网站服务时,可以从距离自己最近的网络提供商机房获取数据;而反向代理则部署在网站的中心机房,当用户请求到达中心机房后,首先访问的服务器是反向代理服务器,如果反向代理服务器中缓存着用户请求的资源,就将其直接返回给用户。</p><h1 id="使用分布式文件系统和分布式数据库系统">7 使用分布式文件系统和分布式数据库系统</h1><p>任何强大的单一服务器都满足不了大型网站持续增长的业务需求。数据库经过读写分离后,从一台服务器拆分成两台服务器,但是随着网站业务的发展依然不能满足需求,这时需要使用分布式数据库。文件系统也是一样,需要使用分布式文件系统,如图所示:</p><p><img src="https://api.codetool.top/img/15835452178957.png" alt></p><p><strong>分布式数据库是网站数据库拆分的最后手段</strong>，只有在单表数据规模非常庞大的时候才使用。不到不得已时,网站更常用的数据库拆分手段是<strong>业务分库</strong>,将不同业务的数据库部署在不同的物理服务器上。</p><h1 id="使用NoSQL和搜索引擎">8 使用NoSQL和搜索引擎</h1><p>随着网站业务越来越复杂,对数据存储和检索的需求也越来越复杂,网站需要采用一些非关系数据库技术如 NoSQL和非数据库查询技术如搜索引擎,如图所示：</p><p><img src="https://api.codetool.top/img/15835453037260.png" alt></p><p>NoSQL和搜索引擎都是源自互联网的技术手段,对可伸缩的分布式特性具有更好的支持。应用服务器则通过一个统一数据访问模块访问各种数据,减轻应用程序管理诸多数据源的麻烦。</p><h1 id="业务拆分">9 业务拆分</h1><p>大型网站为了应对日益复杂的业务场景,通过使用分而治之的手段将整个网站业务分成不同的产品线,如大型购物交易网站就会将首页、商铺、订单、买家、卖家等拆分成不同的产品线,分归不同的业务团队负责。</p><p>具体到技术上,也会根据产品线划分,<strong>将一个网站拆分成许多不同的应用,每个应用独立部署维护。</strong>应用之间可以通过一个超链接建立关系(在首页上的导航链接每个都指向不同的应用地址),也可以通过消息队列进行数据分发,当然最多的还是通过访问同一个数据存储系统来构成一个关联的完整系统,如图所示。</p><p><img src="https://api.codetool.top/img/1583545568710.png" alt></p><h1 id="分布式服务">10 分布式服务</h1><p>随着业务拆分越来越小，存储系统越来越庞大，应用系统的整体复杂度呈指数级增加，部署维护越来越困难。由于所有应用要和所有数据库系统连接，在数万台服务器规模的网站中,这些连接的数目是服务器规模的平方,导致存数据库接资源不足,拒绝服务。</p><p>既然每一个应用系统都需要执行许多相同的业务操作,比如用户管理、商品管理等,那么可以将这些共用的业务提取出来,独立部署。由这些可复用的业务连接数据库,提供共用业务服务,而应用系统只需要管理用户界面,通过分布式服务调用共用业务服务完成具体业务操作,如图所示：</p><p><img src="https://api.codetool.top/img/15835457289108.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;单机时代&quot;&gt;1 单机时代&lt;/h1&gt;&lt;p&gt;大型网站都是从小型网站发展而来,网站架构也是一样,是从小型网站架构逐步演化而来。小型网站最开始时没有太多人访问,只需要一台服务器就绰绰有余,最典型的是在小型网站上称霸的LAMP（Linux+Apache+MySQL+PHP）
      
    
    </summary>
    
    
      <category term="计算机相关" scheme="https://www.codetool.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/"/>
    
    
      <category term="架构" scheme="https://www.codetool.top/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>剑指offer59-队列的最大值</title>
    <link href="https://www.codetool.top/article/%E5%89%91%E6%8C%87offer59-%E9%98%9F%E5%88%97%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
    <id>https://www.codetool.top/article/剑指offer59-队列的最大值/</id>
    <published>2020-03-06T16:53:23.000Z</published>
    <updated>2020-03-06T16:58:05.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原题">1 原题</h1><p>请定义一个队列并实现函数 <code>max_value</code> 得到队列里的最大值，要求函数<code>max_value</code>、<code>push_back</code> 和 <code>pop_front</code> 的时间复杂度都是O(1)。</p><p>若队列为空，<code>pop_front</code> 和 <code>max_value</code> 需要返回 -1</p><p><strong>示例 1:</strong></p><blockquote><p><strong>输入:</strong><br>[“MaxQueue”,”push_back”,”push_back”,”max_value”,”pop_front”,”max_value”]<br>[[],[1],[2],[],[],[]]<br><strong>输出:</strong> [null,null,null,2,1,2]</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p><strong>输入:</strong><br>[“MaxQueue”,”pop_front”,”max_value”]<br>[[],[],[]]<br><strong>输出:</strong> [null,-1,-1] </p></blockquote><p><strong>限制：</strong></p><ul><li><code>1 &lt;= push_back,pop_front,max_value的总操作数 &lt;= 10000</code></li><li><code>1 &lt;= value &lt;= 10^5</code></li></ul><h1 id="解法">2 解法</h1><h2 id="思想">2.1 思想</h2><p>我一开始以为是要手写个堆。。。写完了之后发现自己理解错了题意 : )</p><p>就是另外使用一个双向队列维护一个单调递减的队列，如果要弹出的元素也是递减队列的头元素，就把它也弹出。</p><h2 id="代码">2.2 代码</h2><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MaxQueue</span> <span class="token punctuation">{</span>    Queue<span class="token operator">&lt;</span>Integer<span class="token operator">></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Deque<span class="token operator">&lt;</span>Integer<span class="token operator">></span> deque <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MaxQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">max_value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> deque<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">int</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        queue<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>deque<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>deque<span class="token punctuation">.</span><span class="token function">peekLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>            deque<span class="token punctuation">.</span><span class="token function">pollLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        deque<span class="token punctuation">.</span><span class="token function">offer</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> pop <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>pop <span class="token operator">==</span> deque<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            deque<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> pop<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;原题&quot;&gt;1 原题&lt;/h1&gt;&lt;p&gt;请定义一个队列并实现函数 &lt;code&gt;max_value&lt;/code&gt; 得到队列里的最大值，要求函数&lt;code&gt;max_value&lt;/code&gt;、&lt;code&gt;push_back&lt;/code&gt; 和 &lt;code&gt;pop_front&lt;/c
      
    
    </summary>
    
    
      <category term="算法/数据结构" scheme="https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="剑指offer" scheme="https://www.codetool.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>MySQL之表锁、行锁、MVCC详解</title>
    <link href="https://www.codetool.top/article/MySQL%E4%B9%8B%E8%A1%A8%E9%94%81%E3%80%81%E8%A1%8C%E9%94%81%E3%80%81MVCC%E8%AF%A6%E8%A7%A3/"/>
    <id>https://www.codetool.top/article/MySQL之表锁、行锁、MVCC详解/</id>
    <published>2020-03-06T14:10:34.000Z</published>
    <updated>2020-03-06T14:24:03.550Z</updated>
    
    <content type="html"><![CDATA[<p>该文建议配合<a href="../数据库理论之并发控制/">数据库理论之并发控制</a>阅读。</p><h1 id="概述">1 概述</h1><p>锁是计算机协调多个进程或线程并发访问某一资源的机制（避免争抢）。</p><p>在数据库中，除传统的计算资源（如 CPU、RAM、I/O 等）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。</p><h2 id="锁分类">1.1 锁分类</h2><p>从对数据操作的粒度分 ： </p><ol><li>表锁：操作时，会锁定整个表。</li><li>行锁：操作时，会锁定当前操作行。</li></ol><p>从对数据操作的类型分：</p><ol><li>读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响。</li><li>写锁（排它锁）：当前操作没有完成之前，它会阻断其他写锁和读锁。</li></ol><h2 id="MySQL中的锁">1.2 MySQL中的锁</h2><p>相对其他数据库而言，MySQL的锁机制比较简单，其最显著的特点是不同的存储引擎支持不同的锁机制。下表中罗列出了各存储引擎对锁的支持情况：</p><table><thead><tr><th>存储引擎</th><th>表级锁</th><th>行级锁</th><th>页面锁</th></tr></thead><tbody><tr><td>MyISAM</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>InnoDB</td><td>支持</td><td>支持</td><td>不支持</td></tr><tr><td>MEMORY</td><td>支持</td><td>不支持</td><td>不支持</td></tr><tr><td>BDB</td><td>支持</td><td>不支持</td><td>支持</td></tr></tbody></table><p>MySQL这3种锁的特性可大致归纳如下 ：</p><table><thead><tr><th>锁类型</th><th>特点</th></tr></thead><tbody><tr><td>表级锁</td><td>偏向MyISAM 存储引擎，开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。</td></tr><tr><td>行级锁</td><td>偏向InnoDB 存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。</td></tr><tr><td>页面锁</td><td>开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</td></tr></tbody></table><p>从上述特点可见，很难笼统地说哪种锁更好，只能就具体应用的特点来说哪种锁更合适。</p><p>仅从锁的角度来说：</p><ul><li>表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如Web 应用</li><li>行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有并查询的应用，如一些在线事务处理（OLTP）系统。</li></ul><p><strong>所有的存储引擎都以自己的方式实现了锁机制</strong>，服务器层完全不了解存储引擎中的锁实现。但服务器层也会使用各种有效的表锁来实现不同的目的。</p><p>对于 MySQL 而言，事务机制更多是靠底层的存储引擎实现的，<strong>在服务器层面只有表锁。支持事务的 InnoDB 存储引擎实现了行锁。</strong></p><h1 id="MyISAM-表锁">2 MyISAM 表锁</h1><p>偏向 MyISAM 存储引擎，开销小，加锁快，无死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。</p><p>在特定的场景中，表锁也可能有良好的性能。比如，READ LOCAL 表锁支持某些类型的并发写操作；另外，写锁也比读锁有更高的优先级，因此一个写锁请求可以会被插入到读锁队列的前面。</p><p>尽管存储引擎可以管理自己的锁，服务器还是会使用各种有效的表锁来实现不同的目的。比如<strong>服务器在 ALTER TABLE 时使用表锁，而忽略存储引擎的锁机制。MyISAM 在读表前自动对表加读锁，在写表前自动对表加写锁。</strong></p><h2 id="SQL语法">2.1 SQL语法</h2><p>添加表锁：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">lock</span> <span class="token keyword">table</span> table1 <span class="token keyword">read</span><span class="token operator">/</span><span class="token keyword">write</span> <span class="token punctuation">,</span> table2 <span class="token keyword">read</span><span class="token operator">/</span><span class="token keyword">write</span> <span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span></code></pre><p>read为读锁，共享锁；write为写锁，独占锁。</p><p>显示加过锁的表：</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">open</span> <span class="token keyword">tables</span><span class="token punctuation">;</span></code></pre><ul><li><code>In_use</code> : 表当前被查询使用的次数。如果该数为零，则表是打开的，但是当前没有被使用。为1代表已加锁。</li><li><code>Name_locked</code>：表名称是否被锁定。名称锁定用于取消表或对表进行重命名等操作。</li></ul><p>释放表锁：</p><pre class=" language-sql"><code class="language-sql">unlock <span class="token keyword">tables</span><span class="token punctuation">;</span></code></pre><h2 id="总结">2.2 总结</h2><ol><li>对 MyISAM 表的读操作（加读锁），不会阻塞其他进程对同一表的读请求，但会阻塞对同一表的写请求。只有当读锁释放后，才会执行其它进程的写操作。</li><li>对 MyISAM 表的写操作（加写锁），会阻塞其他进程对同一表的读和写操作，只有当写锁释放后，才会执行其它进程的读写操作。</li></ol><p>简而言之，就是读锁会阻塞写，但是不会堵塞读。而写锁则会把读和写都堵塞。这也是MyISAM不适合做写为主表的引擎的原因。因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞。</p><h1 id="InnoDB-行锁">3 InnoDB 行锁</h1><p><strong>特点：</strong></p><ul><li>锁粒度小，并发度高；开销大，加锁慢，会出现死锁</li><li>支持事务</li></ul><p>InnoDB也实现了共享锁和排他锁两种类型的行锁。</p><p>InnoDB也支持意向锁，可以对表级别上意向锁。</p><p><strong>对于<code>UPDATE</code>、<code>DELETE</code>和<code>INSERT</code>语句，InnoDB会自动给涉及的数据集加排他锁</strong></p><p><strong>对于普通<code>SELECT</code>语句，InnoDB不会加任何锁，使用一致性非锁定读</strong></p><h2 id="了解：一致性非锁定读">3.1 了解：一致性非锁定读</h2><p>一致性非锁定读是指InnoDB存储引擎通过行多版本控制（MVCC）的方式来读取当前执行时间数据库中行的数据。如果读取的行正在执行DELETE或UPDATE，这时读取操作不会因此去等待行上锁的释放，而是去读取行的一个快照数据。</p><p><img src="https://api.codetool.top/img/15835025427688.png" alt></p><p>快照数据是该行的之前版本的数据，实现是通过undo段来完成（即为了回滚事务而产生的重做日志）。</p><p>通过读取不同的快照版本实现不同的事务隔离级别：</p><ul><li>读已提交：一致性非锁定读总是读取被锁定行的最新一份快照数据。产生了不可重复读的问题。</li><li>重复读：一致性非锁定读总是读取事务开始时的行数据版本. 解决不可重复读的问题。</li></ul><p>一致性非锁定读是InnoDB默认的读取方式，不会占用和等待表上的锁。</p><h2 id="一致性锁定读">3.2 一致性锁定读</h2><p>某些情况下，用户需要显式地对数据库读取操作进行加锁以保证数据逻辑的一致性。可以通过以下语句显示给记录集加共享锁或排他锁（一致性锁定读）。</p><pre class=" language-sql"><code class="language-sql">共享锁（S）：<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">LOCK</span> <span class="token operator">IN</span> <span class="token keyword">SHARE MODE</span>排他锁（X<span class="token punctuation">)</span> ：<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> table_name <span class="token keyword">WHERE</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">FOR</span> <span class="token keyword">UPDATE</span></code></pre><p>当事务提交了，锁就释放了。</p><p>可以使用<code>show status like &#39;innodb_row_lock%&#39;;</code>查看innodb行锁的争用情况</p><ul><li><p><code>Innodb_row_lock_current_waits</code>: 当前正在等待锁定的数量</p></li><li><p><code>Innodb_row_lock_time</code>: 从系统启动到现在锁定总时间长度</p></li><li><p><code>Innodb_row_lock_time_avg</code>:每次等待所花平均时长</p></li><li><p><code>Innodb_row_lock_time_max</code>:从系统启动到现在等待最长的一次所花的时间</p></li><li><p><code>Innodb_row_lock_waits</code>: 系统启动后到现在总共等待的次数</p></li></ul><h2 id="行锁的三种算法">3.3 行锁的三种算法</h2><h3 id="record-lock">3.3.1 record lock</h3><p>InnoDB 里的行锁（record lock）是索引记录的锁。</p><p>record lock 锁住的是索引记录，即使该表上没有任何索引，那么 innodb会在后台创建一个隐藏的聚集主键索引，那么锁住的就是这个隐藏的聚集主键索引。所以说<strong>当一条 sql 没有走任何索引时，那么将会在每一条聚簇索引后面加 X 锁，这个类似于表锁</strong>，但原理上和表锁应该是完全不同的。</p><h3 id="gap-lock">3.3.2 gap lock</h3><p>当我们用范围条件，而不是使用相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据进行加锁； 对于键值在条件范围内但并不存在的记录，叫做 “间隙（GAP）”，InnoDB也会对这个 “间隙” 加锁，这种锁机制就是所谓的间隙锁（gap lock），它<strong>锁定一个范围的记录,但不包括记录本身</strong>。锁加在未使用的空闲空间上,可能是两个索引记录之间，也可能是第一个索引记录之前或最后一个索引之后的空间。间隙锁针对事务隔离级别为可重复读或以上级别。</p><h3 id="next-key-lock">3.3.3 next-key lock</h3><p>行锁与间隙锁组合起来用就叫做 Next-Key Lock。<strong>锁定一个范围，并且锁定记录本身</strong>。对于行的查询，都是采用该方法，主要目的是阻止多个事务将记录插入到同一范围内，解决幻读的问题。</p><p>InnoDB 工作在可重复读隔离级别下，并且会以 Next-Key Lock 的方式对数据行进行加锁，这样可以有效防止幻读的发生。Next-Key Lock 是行锁和间隙锁的组合，当 InnoDB 扫描索引记录的时候，会首先对索引记录加上行锁（Record Lock），再对索引记录两边的间隙加上间隙锁（Gap Lock）。加上间隙锁之后，其他事务就不能在这个间隙修改或者插入记录。</p><p>如果一个索引有10，11，13和20这四个值，那么该索引可能被Next-key Locking的区间为：</p><pre><code>(-∞,10](10,11](11,13](13,20](20,＋∞]</code></pre><p>若事务T1已经锁定了如下范围：</p><p><code>(10,11]</code>，<code>(11,13]</code></p><p>则插入新的记录12时，锁定的范围会变成：</p><p><code>(10,11]</code>，<code>(11,12]</code>，<code>(12,13]</code></p><p>当查询的索引含有唯一属性时，InnoDB存储引擎会对Next-key Lock进行优化，将其降级为Record lock，即仅锁住索引本身，而不是范围。</p><h3 id="如何理解三种算法">3.3.4 如何理解三种算法</h3><p>我这里谈谈我自己的理解：</p><p>对于唯一索引（比如主键），只要保证锁住该索引记录，就不可能出现幻读，这对应的就是Record Lock</p><p>比如对于sql查询</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> t_user <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">5</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span></code></pre><p>这种情况就只会加一个Record Lock，第一次查询数据之后锁住了该记录，此后在同一事务内一直到第二次查询不可能会出现其他事务也将其他记录插入到id = 5这个位置。</p><p>而如果不是唯一索引，第一次查询数据之后即使所住了该记录，但可能还会有记录被插到id = 5这个位置，所以此时需要范围索引，锁住索引为5这个值，对于范围查询，范围索引更重要。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;该文建议配合&lt;a href=&quot;../数据库理论之并发控制/&quot;&gt;数据库理论之并发控制&lt;/a&gt;阅读。&lt;/p&gt;
&lt;h1 id=&quot;概述&quot;&gt;1 概述&lt;/h1&gt;&lt;p&gt;锁是计算机协调多个进程或线程并发访问某一资源的机制（避免争抢）。&lt;/p&gt;
&lt;p&gt;在数据库中，除传统的计算资源（如 CPU
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="数据库" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://www.codetool.top/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL之并发参数调整</title>
    <link href="https://www.codetool.top/article/MySQL%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%8F%82%E6%95%B0%E8%B0%83%E6%95%B4/"/>
    <id>https://www.codetool.top/article/MySQL之并发参数调整/</id>
    <published>2020-03-06T08:56:08.000Z</published>
    <updated>2020-03-06T09:23:45.404Z</updated>
    
    <content type="html"><![CDATA[<p>从实现上来说，MySQL Server 是多线程结构，包括后台线程和客户服务线程。多线程可以有效利用服务器资源，提高数据库的并发性能。在Mysql中，控制并发连接和线程的主要参数包括 <code>max_connections</code>、<code>back_log</code>、<code>thread_cache_size</code>、<code>table_open_cahce</code>。</p><h1 id="max-connections">1 max_connections</h1><p>采用max_connections 控制允许连接到MySQL数据库的最大数量，默认值是 151。<strong>如果状态变量 <code>connection_errors_max_connections</code> 不为零，并且一直增长，则说明不断有连接请求因数据库连接数已达到允许最大值而失败</strong>，这时可以考虑增大<code>max_connections</code> 的值。</p><p>Mysql 最大可支持的连接数，取决于很多因素，包括给定操作系统平台的线程库的质量、内存大小、每个连接的负荷、CPU的处理速度，期望的响应时间等。在Linux 平台下，性能好的服务器，支持 500-1000 个连接不是难事，需要根据服务器性能进行评估设定。</p><h1 id="back-log">2 back_log</h1><p><code>back_log</code> 参数控制MySQL监听TCP端口时设置的积压请求栈大小。<strong>如果MySql的连接数达到<code>max_connections</code>时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即<code>back_log</code></strong>，如果等待连接的数量超过back_log，将不被授予连接资源，将会报错。5.6.6 版本之前默认值为 50 ， 之后的版本默认为 <code>50 + （max_connections / 5）</code>， 但最大不超过900。</p><p>如果需要数据库在较短的时间内处理大量连接请求， 可以考虑适当增大back_log 的值。</p><h1 id="table-open-cache">3 table_open_cache</h1><p>该参数用来控制所有SQL语句执行线程可打开表缓存的数量， 而在执行SQL语句时，每一个SQL执行线程至少要打开 1 个表缓存。该参数的值应该根据设置的最大连接数 max_connections 以及每个连接执行关联查询中涉及的表的最大数量来设定 ：</p><p>​<code>max_connections x N</code></p><h1 id="thread-cache-size">4 thread_cache_size</h1><p>为了加快连接数据库的速度，MySQL 会<strong>缓存一定数量的客户服务线程</strong>以备重用，通过参数 <code>thread_cache_size</code> 可控制 MySQL 缓存客户服务线程的数量。</p><h1 id="innodb-lock-wait-timeout">5 innodb_lock_wait_timeout</h1><p>该参数是用来设置InnoDB 事务<strong>等待行锁的时间</strong>，默认值是50ms ， 可以根据需要进行动态设置。对于需要快速反馈的业务系统来说，可以将行锁的等待时间调小，以避免事务长时间挂起； 对于后台运行的批量处理程序来说， 可以将行锁的等待时间调大， 以避免发生大的回滚操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;从实现上来说，MySQL Server 是多线程结构，包括后台线程和客户服务线程。多线程可以有效利用服务器资源，提高数据库的并发性能。在Mysql中，控制并发连接和线程的主要参数包括 &lt;code&gt;max_connections&lt;/code&gt;、&lt;code&gt;back_log&lt;/
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="数据库" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://www.codetool.top/tags/MySQL/"/>
    
      <category term="优化" scheme="https://www.codetool.top/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>MySQL之内存管理和优化</title>
    <link href="https://www.codetool.top/article/MySQL%E4%B9%8B%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%92%8C%E4%BC%98%E5%8C%96/"/>
    <id>https://www.codetool.top/article/MySQL之内存管理和优化/</id>
    <published>2020-03-06T08:55:28.000Z</published>
    <updated>2020-03-06T09:26:59.592Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内存优化原则">1 内存优化原则</h1><ol><li><p>将尽量多的内存分配给MySQL做缓存，但要给操作系统和其他程序预留足够内存。</p></li><li><p>MyISAM 存储引擎的数据文件读取依赖于操作系统自身的IO缓存，因此，如果有MyISAM表，就要预留更多的内存给操作系统做IO缓存。</p></li><li><p>排序区、连接区等缓存是分配给每个数据库会话（session）专用的，其默认值的设置要根据最大连接数合理分配，如果设置太大，不但浪费资源，而且在并发连接较高时会导致物理内存耗尽。</p></li></ol><h1 id="MyISAM-内存优化">2 MyISAM 内存优化</h1><p>MyISAM存储引擎使用 <code>key_buffer</code> 缓存<strong>索引块</strong>，加速MyISAM索引的读写速度。<strong>对于MyISAM表的数据块，mysql没有特别的缓存机制，完全依赖于操作系统的IO缓存。</strong></p><h2 id="key-buffer-size">2.1 key_buffer_size</h2><p><strong><code>key_buffer_size</code>决定MyISAM索引块缓存区的大小，直接影响到MyISAM表的存取效率。</strong>可以在MySQL参数文件中设置<code>key_buffer_size</code>的值，对于一般MyISAM数据库，建议至少将<code>1/4</code>可用内存分配给<code>key_buffer_size</code>。</p><p>在配置文件中做如下配置：</p><pre><code>key_buffer_size=512M</code></pre><h2 id="read-buffer-size">2.2 read_buffer_size</h2><p>为需要全表扫描的MYISAM数据表线程指定缓存。</p><p>如果需要经常顺序扫描MyISAM表，可以通过增大<code>read_buffer_size</code>的值来改善性能。但需要注意的是<code>read_buffer_size</code>是每个session独占的，如果默认值设置太大，就会造成内存浪费。</p><h2 id="read-rnd-buffer-size">2.3 read_rnd_buffer_size</h2><p>对于需要做排序的MyISAM表的查询，如带有order by子句的sql，适当增加 <code>read_rnd_buffer_size</code> 的值，可以改善此类的sql性能。但需要注意的是 <code>read_rnd_buffer_size</code> 是每个session独占的，如果默认值设置太大，就会造成内存浪费。</p><h1 id="InnoDB-内存优化">3 InnoDB 内存优化</h1><p>InnoDB用一块内存区做IO缓存池，该缓存池不仅用来缓存InnoDB的索引块，而且也用来缓存InnoDB的数据块。</p><h2 id="innodb-buffer-pool-size">3.1 innodb_buffer_pool_size</h2><p>该变量决定了 <strong>InnoDB 存储引擎表数据和索引数据的最大缓存区大小</strong>。在保证操作系统及其他程序有足够内存可用的情况下，<code>innodb_buffer_pool_size</code> 的值越大，缓存命中率越高，访问InnoDB表需要的磁盘I/O 就越少，性能也就越高。</p><pre><code>innodb_buffer_pool_size=512M</code></pre><h2 id="innodb-log-buffer-size">3.2 innodb_log_buffer_size</h2><p>决定了<strong>InnoDB重做日志缓存的大小</strong>，对于可能产生大量更新记录的大事务，增加<code>innodb_log_buffer_size</code> 的大小，可以避免InnoDB在事务提交前就执行不必要的日志写入磁盘操作。</p><pre><code>innodb_log_buffer_size=10M</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内存优化原则&quot;&gt;1 内存优化原则&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;将尽量多的内存分配给MySQL做缓存，但要给操作系统和其他程序预留足够内存。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MyISAM 存储引擎的数据文件读取依赖于操作系统自身的IO缓存，因此，如果有MyIS
      
    
    </summary>
    
    
      <category term="中间件/工具/框架" scheme="https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="数据库" scheme="https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="MySQL" scheme="https://www.codetool.top/tags/MySQL/"/>
    
      <category term="优化" scheme="https://www.codetool.top/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
</feed>
