{"meta":{"title":"代码段小站","subtitle":"CodeTool - 个人计算机类练手小博客","description":"","author":"Rhett Peng","url":"https://www.codetool.top","root":"/"},"pages":[{"title":"关于","date":"2018-09-30T09:25:30.000Z","updated":"2020-01-10T10:07:22.666Z","comments":true,"path":"about/index.html","permalink":"https://www.codetool.top/about/index.html","excerpt":"","text":"@column-2{ } @column-2{ @card{ 1 神秘的站长现南昌大学软件学院大三学生，学习作风差，不务正业.喜欢折腾新奇的东西，学习黑科技正在由一只小菜鸡成为一只大菜鸡的转变的路上（其实我也不知道小菜鸡为啥要写博客，反正也没人看） } @card{ 2 关于小站代码段小站（CodeBand）创建于2018年8月19日，闲时在这里随便写点东西。可能是脑海里的一些闪光点，也可能是某一天的学习内容的记录，更多的是有关编程方面的、我觉得有意义记下来的一些知识。也希望这个网站能伴随我从编程新手小白成长为一个不算太小白的小白? } } @timeline{ 2.0.0.0.1 2019@item{ 2.0.0.0.1.1 12月19日写博客历史上最黑暗的一天 } @item{ 2.0.0.0.1.2 12月10日在右下角放了只狗，背景加了点动画效果 } @item{ 2.0.0.0.1.3 11月8日抛弃wordpress，使用hexo重新搭建博客，完全搬至国内服务器 } @item{ 2.0.0.0.1.4 9月6日新服务器域名通过备案，使用国内服务器反向代理 } @item{ 2.0.0.0.1.5 8月19日更换wordpress主题 } 2.0.0.0.2 2018@item{ 2.0.0.0.2.1 8月19日使用wordpress搭建了第一版博客写下了我的第一篇博客《Java抽象类和接口的区别》 } }"},{"title":"分类","date":"2018-09-30T09:25:30.000Z","updated":"2020-01-10T10:46:37.167Z","comments":true,"path":"categories/index.html","permalink":"https://www.codetool.top/categories/index.html","excerpt":"","text":""},{"title":"contact","date":"2018-09-30T09:25:30.000Z","updated":"2020-01-10T10:07:52.273Z","comments":true,"path":"contact/index.html","permalink":"https://www.codetool.top/contact/index.html","excerpt":"","text":""},{"title":"在线写代码","date":"2019-11-08T14:16:45.000Z","updated":"2020-01-10T11:34:38.770Z","comments":true,"path":"runcode/index.html","permalink":"https://www.codetool.top/runcode/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-09-30T10:23:38.000Z","updated":"2020-01-10T10:07:22.666Z","comments":true,"path":"tags/index.html","permalink":"https://www.codetool.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"leetcode496-下一个更大元素I","slug":"leetcode496-下一个更大元素I","date":"2020-01-30T18:38:53.000Z","updated":"2020-01-30T18:43:53.323Z","comments":true,"path":"article/leetcode496-下一个更大元素I/","link":"","permalink":"https://www.codetool.top/article/leetcode496-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0I/","excerpt":"","text":"1 原题给定两个没有重复元素的数组 nums1 和 nums2 ，其中nums1 是 nums2 的子集。找到 nums1 中每个元素在 nums2 中的下一个比其大的值。 nums1 中数字 x 的下一个更大元素是指 x 在 nums2 中对应位置的右边的第一个比 x 大的元素。如果不存在，对应位置输出-1。 示例1: 输入： nums1 = [4,1,2], nums2 = [1,3,4,2].输出： [-1,3,-1]解释：&nbsp;&nbsp;&nbsp;&nbsp;对于num1中的数字4，你无法在第二个数组中找到下一个更大的数字，因此输出 -1。&nbsp;&nbsp;&nbsp;&nbsp;对于num1中的数字1，第二个数组中数字1右边的下一个较大数字是 3。&nbsp;&nbsp;&nbsp;&nbsp;对于num1中的数字2，第二个数组中没有下一个更大的数字，因此输出 -1。 示例2: 输入： nums1 = [2,4], nums2 = [1,2,3,4].输出： [3,-1]解释：&nbsp;&nbsp;&nbsp;&nbsp;对于num1中的数字2，第二个数组中的下一个较大数字是3。&nbsp;&nbsp;&nbsp;&nbsp;对于num1中的数字4，第二个数组中没有下一个更大的数字，因此输出 -1。 2 解法2.1 思想单调栈，维持一个递减的栈，遇到一个比栈顶元素值大的元素弹出栈顶元素，直到栈顶元素比该元素值大，压入该元素。 2.2 代码class Solution { public int[] nextGreaterElement(int[] nums1, int[] nums2) { Map&lt;Integer,Integer> map = new HashMap&lt;>(); Stack&lt;Integer> stack = new Stack&lt;>(); int ans[] = new int[nums1.length]; for(int i=0;i&lt;nums2.length;i++){ if(!stack.isEmpty()&amp;&amp;nums2[i]>stack.peek()){ while(!stack.isEmpty()&amp;&amp;nums2[i]>stack.peek()) map.put(stack.pop(),nums2[i]); } stack.push(nums2[i]); } for(int i = 0;i&lt;nums1.length;i++){ ans[i] = map.getOrDefault(nums1[i],-1); } return ans; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"栈","slug":"栈","permalink":"https://www.codetool.top/tags/%E6%A0%88/"}]},{"title":"深入理解java虚拟机第三版读书笔记13","slug":"深入理解java虚拟机第三版读书笔记13","date":"2020-01-30T08:08:33.000Z","updated":"2020-01-30T14:08:21.509Z","comments":true,"path":"article/深入理解java虚拟机第三版读书笔记13/","link":"","permalink":"https://www.codetool.top/article/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89%E7%89%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B013/","excerpt":"","text":"以下是第十三章 Java内存模型与线程的内容 1 线程安全当多个线程同时访问一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象的行为都可以获得正确的结果，那就称这个对象是线程安全的。 1.1 Java语言中的线程安全我们可以将Java语言中各种操作共享的数据分为以下五类：不可变、绝对线程安全、相对线程安全、线程兼容和线程对立。 1.1.1 不可变不可变的对象一定是线程安全的，“不可变”带来的安全性是最直接、最纯粹的。 Java语言中，如果多线程共享的数据是一个基本数据类型，那么只要在定义时使用final关键字修饰它就可以保证它是不可变的。如果共享数据是一个对象，由于Java语言目前暂时还没有提供值类型的支持，那就需要对象自行保证其行为不会对其状态产生任何影响才行。 String就是一个典型的不可变对象。 1.1.2 绝对线程安全不管运行时环境如何，调用者都不需要任何额外的同步措施，即使在方法调用端。 1.1.3 相对线程安全相对线程安全就是我们通常意义上所讲的线程安全，它需要保证对这个对象单次的操作是线程安全的，我们在调用的时候不需要进行额外的保障措施，但是对于一些特定顺序的连续调用，就可能需要在调用端使用额外的同步手段来保证调用的正确性。 1.1.4 线程兼容对象本身并不是线程安全的，但是可以通过在调用端正确地使用同步手段来保证对象在并发环境中可以安全地使用。我们平常说一个类不是线程安全的，通常就是指这种情况。Java类库API中大部分的类都是线程兼容的，如与前面的Vector和HashTable相对应的集合类ArrayList和HashMap等。 1.1.5 线程对立线程对立是指不管调用端是否采取了同步措施，都无法在多线程环境中并发使用代码。由于Java语言天生就支持多线程的特性，线程对立这种排斥多线程的代码是很少出现的，而且通常都是有害的，应当尽量避免。一个线程对立的例子是Thread类的suspend()和resume()方法。如果有两个线程同时持有一个线程对象，一个尝试去中断线程，一个尝试去恢复线程，在并发进行的情况下，无论调用时是否进行了同步，目标线程都存在死锁风险——假如suspend()中断的线程就是即将要执行resume()的那个线程，那就肯定要产生死锁了。也正是这个原因，suspend()和resume()方法都已经被声明废弃了。常见的线程对立的操作还有System.setIn()、System.setOut()和System.runFinalizersOnExit()等。 1.2 线程安全的实现方法1.2.1 互斥同步互斥同步是一种最常见也是最主要的并发正确性保障手段。同步是指在多个线程并发访问共享数据时，保证共享数据在同一个时刻只被一条（或者是一些，当使用信号量的时候）线程使用。而互斥是实现同步的一种手段，临界区、互斥量和信号量都是常见的互斥实现方式。因此在“互斥同步”这四个字里面，互斥是因，同步是果；互斥是方法，同步是目的。 在Java里面，最基本的互斥同步手段就是synchronized关键字，这是一种块结构的同步语法。synchronized关键字经过Javac编译之后，会在同步块的前后分别形成monitorenter和monitorexit这两个字节码指令。这两个字节码指令都需要一个reference类型的参数来指明要锁定和解锁的对象。如果Java源码中的synchronized明确指定了对象参数，那就以这个对象的引用作为reference；如果没有明确指定，那将根据synchronized修饰的方法类型（如实例方法或类方法），来决定是取代码所在的对象实例还是取类型对应的Class对象来作为线程要持有的锁。 注意： 被synchronized修饰的同步块对同一条线程来说是可重入的。这意味着同一线程反复进入同步块也不会出现自己把自己锁死的情况。 被synchronized修饰的同步块在持有锁的线程执行完毕并释放锁之前，会无条件地阻塞后面其他线程的进入。这意味着无法像处理某些数据库中的锁那样，强制已获取锁的线程释放锁；也无法强制正在等待锁的线程中断等待或超时退出。 从执行成本的角度看，持有锁是一个重量级的操作。Java如果要阻塞或唤醒一条线程，则需要操作系统来帮忙完成，这就不可避免地陷入用户态到核心态的转换中，进行这种状态转换需要耗费很多的处理器时间。所以说synchronized是Java的一个重量级操作。而虚拟机本身也会进行一些优化，譬如在通知操作系统阻塞线程之前加入一段自旋等待过程，以避免频繁地切入核心态之中。 自JDK 5起，Java类库中新提供了java.util.concurrent包，其中的java.util.concurrent.locks.Lock接口便成了Java的另一种全新的互斥同步手段。基于Lock接口，用户能够以非块结构来实现互斥同步，从而摆脱了语言特性的束缚，改为在类库层面去实现同步，这也为日后扩展出不同调度算法、不同特征、不同性能、不同语义的各种锁提供了广阔的空间。 重入锁（ReentrantLock）是Lock接口最常见的一种实现，顾名思义，它与synchronized一样是可重入的。在基本用法上，ReentrantLock也与synchronized很相似，只是代码写法上稍有区别而已。不过，ReentrantLock与synchronized相比增加了一些高级功能，主要有以下三项： 等待可中断：是指当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。 可中断特性对处理执行时间非常长的同步块很有帮助。 公平锁：是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁；而非公平锁则不保证这一点，在锁被释放时，任何一个等待锁的线程都有机会获得锁。synchronized中的锁是非公平的，ReentrantLock在默认情况下也是非公平的，但可以通过带布尔值的构造函数要求使用公平锁。不过一旦使用了公平锁，将会导致ReentrantLock的性能急剧下降，会明显影响吞吐量。 锁绑定多个条件：是指一个ReentrantLock对象可以同时绑定多个Condition对象。 在synchronized中，锁对象的wait()跟它的notify()或者notifyAll()方法配合可以实现一个隐含的条件，如果要和多于一个的条件关联的时候，就不得不额外添加一个锁；而ReentrantLock则无须这样做，多次调用newCondition()方法即可。 JDK6以后synchronized和ReentrantLock的性能差距已经不大。 synchronized的优点： synchronized是在Java语法层面的同步，足够清晰，也足够简单。每个Java程序员都熟悉 synchronized，但J.U.C中的Lock接口则并非如此。因此在只需要基础的同步功能时，更推荐 synchronized。 Lock应该确保在finally块中释放锁，否则一旦受同步保护的代码块中抛出异常，则有可能永远不会释放持有的锁。这一点必须由程序员自己来保证，而使用synchronized的话则可以由Java虚拟机来确保即使出现异常，锁也能被自动释放。 尽管在JDK 5时代ReentrantLock曾经在性能上领先过synchronized，但这已经是十多年之前的胜利了。从长远来看，Java虚拟机更容易针对synchronized来进行优化，因为Java虚拟机可以在线程和对象的元数据中记录synchronized中锁的相关信息，而使用J.U.C中的Lock的话，Java虚拟机是很难得知具体哪些锁对象是由特定线程锁持有的。 1.2.2 非阻塞同步互斥同步面临的主要问题是进行线程阻塞和唤醒所带来的性能开销，因此这种同步也被称为阻塞同步（Blocking Synchronization）。 从解决问题的方式上看，互斥同步属于一种悲观的并发策略，其总是认为只要不去做正确的同步措施（例如加锁），那就肯定会出现问题。随着硬件指令集的发展，我们已经有了另外一个选择：基于冲突检测的乐观并发策略，通俗地说就是不管风险，先进行操作，如果没有其他线程争用共享数据，那操作就直接成功了；如果共享的数据的确被争用，产生了冲突，那再进行其他的补偿措施，最常用的补偿措施是不断地重试，直到出现没有竞争的共享数据为止。这种乐观并发策略的实现不再需要把线程阻塞挂起，因此这种同步操作被称为非阻塞同步，使用这种措施的代码也常被称为无锁编程。 为了实现乐观并发策略，硬件保证某些从语义上看起来需要多次操作的行为可以只通过一条处理器指令就能完成，这类指令常用的有： 测试并设置（Test-and-Set） 获取并增加（Fetch-and-Increment） 交换（Swap） 比较并交换（Compare-and-Swap，简称CAS） 加载链接/条件储存（Load-Linked/Store-Conditional，简称LL/SC） CAS指令需要有三个操作数，分别是内存位置（在Java中可以简单地理解为变量的内存地址，用V表示）、旧的预期值（用A表示）和准备设置的新值（用B表示）。CAS指令执行时，当且仅当V符合A时，处理器才会用B更新V的值，否则它就不执行更新。 但是，不管是否更新了V的值，都会返回V的旧值，上述的处理过程是一个原子操作，执行期间不会被其他线程中断。 在JDK 5之后，sun.misc.Unsafe类里面的compareAndSwapInt()和compareAndSwapLong()等几个方法包装提供CAS操作。HotSpot虚拟机在内部对这些方法做了特殊处理，即时编译出来的结果就是一条平台相关的处理器CAS指令，没有方法调用的过程，或者可以认为是无条件内联进去了。不过由于Unsafe类在设计上就不是提供给用户程序调用的类（Unsafe::getUnsafe()的代码中限制了只有启动类加载器加载的Class才能访问它），因此在JDK 9之前只有Java类库可以使用CAS。而如果用户程序也有使用CAS操作的需求，那要么就采用反射手段突破Unsafe的访问限制，要么就只能通过Java类库API来间接使用它。直到JDK 9之后，Java类库才在VarHandle类里开放了面向用户程序使用的CAS操作。 例：（使用AtomicInteger实现原子操作） CAS存在一个逻辑漏洞：如果一个变量V初次读取的时候是A值，并且在准备赋值的时候检查到它仍然为A值，仍有可能是因为在这段期间它的值曾经被改成B，后来又被改回为A，那CAS操作就会误认为它从来没有被改变过。这个漏洞称为CAS操作的“ABA问题”。J.U.C包为了解决这个问题，提供了一个带有标记的原子引用类AtomicStampedReference，它可以通过控制变量值的版本来保证CAS的正确性。不过目前来说这个类处于相当鸡肋的位置，大部分情况下ABA问题不会影响程序并发的正确性，如果需要解决ABA问题，改用传统的互斥同步可能会比原子类更为高效。 1.2.3 无同步方案有一些代码天生就是线程安全的： 可重入代码：可以在代码执行的任何时刻中断它，转而去执行另外一段代码（包括递归调用它本身），而在控制权返回后，原来的程序不会出现任何错误，也不会对结果有所影响。 线程本地存储：如果一段代码中所需要的数据必须与其他代码共享，那就看看这些共享数据的代码是否能保证在同一个线程中执行。如果能保证，我们就可以把共享数据的可见范围限制在同一个线程之内，这样，无须同步也能保证线程之间不出现数据争用的问题。 我们可以通过java.lang.ThreadLocal类来实现线程本地存储的功能。每一个线程的Thread对象中都有一个ThreadLocalMap对象，这个对象存储了一组以ThreadLocal.threadLocalHashCode为键，以本地线程变量为值的K-V值对。 2 锁优化2.1 自旋锁与自适应自旋现在绝大多数的个人电脑和服务器都是多路（核）处理器系统，如果物理机器有一个以上的处理器或者处理器核心，能让两个或以上的线程同时并行执行，我们就可以让后面请求锁的那个线程“稍等一会”，但不放弃处理器的执行时间，看看持有锁的线程是否很快就会释放锁。为了让线程等待，我们只须让线程执行一个忙循环（自旋），这项技术就是所谓的自旋锁。 自旋等待的时间有一定的限度，如果自旋超过了限定的次数仍然没有成功获得锁，就应当使用传统的方式去挂起线程，默认值是十次，用户也可以使用参数-XX：PreBlockSpin来自行更改。 2.2 锁消除锁消除是指虚拟机即时编译器在运行时，对一些代码要求同步，但是对被检测到不可能存在共享数据竞争的锁进行消除。如果判断到一段代码中，在堆上的所有数据都不会逃逸出去被其他线程访问到，那就可以把它们当作栈上数据对待，认为它们是线程私有的，同步加锁自然就无须再进行。 2.3 锁粗化通常编写代码时推荐将同步块的作用范围限制得尽量小，但是如果一系列的连续操作都对同一个对象反复加锁和解锁，甚至加锁操作是出现在循环体之中的，那即使没有线程竞争，频繁地进行互斥同步操作也会导致不必要的性能损耗。 如果虚拟机探测到有这样一串零碎的操作都对同一个对象加锁，将会把加锁同步的范围扩展（粗化）到整个操作序列的外部。 2.4 轻量级锁轻量级锁是JDK 6时加入的新型锁机制，“轻量级”是相对于使用操作系统互斥量来实现的传统锁而言的，因此传统的锁机制就被称为“重量级”锁。它设计的初衷是在没有多线程竞争的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗。 HotSpot虚拟机的对象头分为两部分，第一部分用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄等。这部分数据的长度在32位和64位的Java虚拟机中分别会占用32个或64个比特，官方称它为“Mark Word”。这部分是实现轻量级锁和偏向锁的关键。另外一部分用于存储指向方法区对象类型数据的指针，如果是数组对象，还会有一个额外的部分用于存储数组长度。 轻量级锁的工作过程: 在代码即将进入同步块的时候，如果此同步对象没有被锁定（锁标志位为“01”状态），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝（官方为这份拷贝加了一个Displaced前缀，即Displaced Mark Word），这时候线程堆栈与对象头的状态如图: 然后，虚拟机将使用CAS操作尝试把对象的Mark Word更新为指向Lock Record的指针。如果这个更新动作成功了，即代表该线程拥有了这个对象的锁，并且对象Mark Word的锁标志位（Mark Word的最后两个比特）将转变为“00”，表示此对象处于轻量级锁定状态。这时候线程堆栈与对象头的状态如图所示: 如果这个更新操作失败了，那就意味着至少存在一条线程与当前线程竞争获取该对象的锁。虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是，说明当前线程已经拥有了这个对象的锁，那直接进入同步块继续执行就可以了，否则就说明这个锁对象已经被其他线程抢占了。如果出现两条以上的线程争用同一个锁的情况，那轻量级锁就不再有效，必须要膨胀为重量级锁，锁标志的状态值变为“10”，此时Mark Word中存储的就是指向重量级锁（互斥量）的指针，后面等待锁的线程也必须进入阻塞状态。 轻量级锁的解锁过程同样是通过CAS操作来进行的，如果对象的Mark Word仍然指向线程的锁记录，那就用CAS操作把对象当前的Mark Word和线程中复制的Displaced Mark Word替换回来。假如能够成功替换，那整个同步过程就顺利完成了；如果替换失败，则说明有其他线程尝试过获取该锁，就要在释放锁的同时，唤醒被挂起的线程。 轻量级锁能提升程序同步性能的依据是“对于绝大部分的锁，在整个同步周期内都是不存在竞争的”这一经验法则。如果没有竞争，轻量级锁便通过CAS操作成功避免了使用互斥量的开销；但如果确实存在锁竞争，除了互斥量的本身开销外，还额外发生了CAS操作的开销。因此在有竞争的情况下，轻量级锁反而会比传统的重量级锁更慢。 2.5 偏向锁偏向锁也是JDK 6中引入的一项锁优化措施，它的目的是消除数据在无竞争情况下的同步原语，进一步提高程序的运行性能。如果说轻量级锁是在无竞争的情况下使用CAS操作去消除同步使用的互斥量，那偏向锁就是在无竞争的情况下把整个同步都消除掉，连CAS操作都不去做了。 偏向锁的意思是这个锁会偏向于第一个获得它的线程，如果在接下来的执行过程中，该锁一直没有被其他的线程获取，则持有偏向锁的线程将永远不需要再进行同步。 假设当前虚拟机启用了偏向锁，那么当锁对象第一次被线程获取的时候，虚拟机将会把对象头中的标志位设置为“01”、把偏向模式设置为“1”，表示进入偏向模式。同时使用CAS操作把获取到这个锁的线程的ID记录在对象的Mark Word之中。如果CAS操作成功，持有偏向锁的线程以后每次进入这个锁相关的同步块时，虚拟机都可以不再进行任何同步操作。 一旦出现另外一个线程去尝试获取这个锁的情况，偏向模式就马上宣告结束。根据锁对象目前是否处于被锁定的状态决定是否撤销偏向（偏向模式设置为“0”），撤销后标志位恢复到未锁定（标志位为“01”）或轻量级锁定（标志位为“00”）的状态，后续的同步操作就按照上面介绍的轻量级锁那样去执行。偏向锁、轻量级锁的状态转化及对象Mark Word的关系如图所示： 当一个对象已经计算过一致性哈希码后，它就再也无法进入偏向锁状态了；而当一个对象当前正处于偏向锁状态，又收到需要计算其一致性哈希码请求时，它的偏向状态会被立即撤销，并且锁会膨胀为重量级锁。在重量级锁的实现中，对象头指向了重量级锁的位置，代表重量级锁的ObjectMonitor类里有字段可以记录非加锁状态（标志位为“01”）下的Mark Word，其中自然可以存储原来的哈希码。 如果程序中大多数的锁都总是被多个不同的线程访问，那偏向模式就是多余的。在具体问题具体分析的前提下，有时候使用参数-XX：-UseBiasedLocking来禁止偏向锁优化反而可以提升性能。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"深入理解java虚拟机","slug":"深入理解java虚拟机","permalink":"https://www.codetool.top/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"leetcode456-132模式","slug":"leetcode456-132模式","date":"2020-01-29T18:19:44.000Z","updated":"2020-01-29T18:44:21.865Z","comments":true,"path":"article/leetcode456-132模式/","link":"","permalink":"https://www.codetool.top/article/leetcode456-132%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"1 原题给定一个整数序列：a1, a2, …, an，一个132模式的子序列 ai, aj, ak 被定义为：当 i &lt; j &lt; k 时，ai &lt; ak &lt; aj。设计一个算法，当给定有 n 个数字的序列时，验证这个序列中是否含有132模式的子序列。 注意： n 的值小于15000。 示例1: 输入： [1, 2, 3, 4]输出： False解释： 序列中不存在132模式的子序列。 示例2: 输入： [3, 1, 4, 2]输出： True解释： 序列中有 1 个132模式的子序列： [1, 4, 2]. 示例3: 输入： [-1, 3, 2, 0]输出： True解释： 序列中有 3 个132模式的的子序列: [-1, 3, 2], [-1, 3, 0] 和 [-1, 2, 0]. 2 解法2.1 思想 暴力，从尾向头遍历，如果当前元素是132中的最后一个元素，则前面和中间一定分别有一个小于当前元素的元素和一个大于当前元素的元素。 栈，参考 https://leetcode-cn.com/problems/132-pattern/solution/132mo-shi-by-leetcode-2/ 2.2 代码 暴力 class Solution { public boolean find132pattern(int[] nums) { for(int i = nums.length-1;i>=2;i--){ int tail = nums[i]; boolean hasPeek = false; for(int j = i-1;j>=0;j--){ if(nums[j]>tail) hasPeek = true; else if(hasPeek&amp;&amp;nums[j]&lt;tail) return true; } } return false; } } 栈 public class Solution { public boolean find132pattern(int[] nums) { if (nums.length &lt; 3) return false; Stack&lt;Integer> stack = new Stack&lt;>(); int[] min = new int[nums.length]; min[0] = nums[0]; for (int i = 1; i &lt; nums.length; i++) min[i] = Math.min(min[i - 1], nums[i]); for (int j = nums.length - 1; j >= 0; j--) { if (nums[j] > min[j]) { while (!stack.isEmpty() &amp;&amp; stack.peek() &lt;= min[j]) stack.pop(); if (!stack.isEmpty() &amp;&amp; stack.peek() &lt; nums[j]) return true; stack.push(nums[j]); } } return false; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"栈","slug":"栈","permalink":"https://www.codetool.top/tags/%E6%A0%88/"}]},{"title":"深入理解java虚拟机第三版读书笔记12","slug":"深入理解java虚拟机第三版读书笔记12","date":"2020-01-29T08:25:14.000Z","updated":"2020-01-29T18:42:57.391Z","comments":true,"path":"article/深入理解java虚拟机第三版读书笔记12/","link":"","permalink":"https://www.codetool.top/article/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89%E7%89%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B012/","excerpt":"","text":"以下是第十二章 Java内存模型与线程的内容 1 硬件的效率与一致性基于高速缓存的存储交互很好地解决了处理器与内存速度之间的矛盾，但是也为计算机系统带来更高的复杂度，它引入了一个新的问题：缓存一致性。在多路处理器系统中，每个处理器都有自己的高速缓存，而它们又共享同一主内存。当多个处理器的运算任务都涉及同一块主内存区域时，将可能导致各自的缓存数据不一致。为了解决一致性的问题，需要各个处理器访问缓存时都遵循一些协议，在读写时要根据协议来进行操作，这类协议有MSI、MESI（Illinois Protocol）、MOSI、Synapse、Firefly及Dragon Protocol等。 不同架构的物理机器可以拥有不一样的内存模型，而Java虚拟机也有自己的内存模型，并且与这里介绍的内存访问操作及硬件的缓存访问操作具有高度的可类比性。 2 Java内存模型2.1 主内存与工作内存Java内存模型规定了所有的变量都存储在主内存中，每条线程还有自己的工作内存，线程对变量的所有操作都必须在工作内存中进行，而不能直接读写主内存中的数据，不同的线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成。 主内存、工作内存与Java内存区域中的Java堆、栈、方法区等并不是同一个层次的对内存的划分，这两者基本上是没有任何关系的。 2.2 内存间交互操作关于主内存与工作内存之间具体的交互协议，Java内存模型中定义了以下8种操作来完成。每一种操作都是原子的、不可再分的： lock（锁定）：作用于主内存的变量，它把一个变量标识为一条线程独占的状态。 unlock（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。 read（读取）：作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用。 load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。 use（使用）：作用于工作内存的变量，它把工作内存中一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用变量的值的字节码指令时将会执行这个操作。 assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。 store（存储）：作用于工作内存的变量，它把工作内存中一个变量的值传送到主内存中，以便随后的write操作使用。 write（写入）：作用于主内存的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中。 如果要把一个变量从主内存拷贝到工作内存，那就要按顺序执行read和load操作，相反就要顺序执行store和write操作。可以不连续执行，但必须相对地顺序在执行。 这些操作必须满足规则： 不允许read和load、store和write操作之一单独出现，即不允许一个变量从主内存读取了但工作内存不接受，或者工作内存发起回写了但主内存不接受的情况出现。 不允许一个线程丢弃它最近的assign操作，即变量在工作内存中改变了之后必须把该变化同步回主内存。 不允许一个线程无原因地（没有发生过任何assign操作）把数据从线程的工作内存同步回主内存中。 一个新的变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化（load或 assign）的变量，换句话说就是对一个变量实施use、store操作之前，必须先执行assign和load操作。 一个变量在同一个时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。 如果对一个变量执行lock操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load或assign操作以初始化变量的值。 如果一个变量事先没有被lock操作锁定，那就不允许对它执行unlock操作，也不允许去unlock一个被其他线程锁定的变量。 对一个变量执行unlock操作之前，必须先把此变量同步回主内存中（执行store、write操作）。 最近JSR-133文档中把Java内存模型的操作简化成read、write、lock和unlock四种，但实际设计没有变。 2.3 对于volatile型变量的特殊规则当一个变量被定义成volatile之后，它将具备两项特性： 第一项是保证此变量对所有线程的可见性，这里的“可见性”是指当一条线程修改了这个变量的值，新值对于其他线程来说是可以立即得知的。而普通变量并不能做到这一点，普通变量的值在线程间传递时均需要通过主内存来完成。 Java里面的运算操作符并非原子操作，这导致volatile变量的运算在并发下一样是不安全的，示例： 这段代码发起了20个线程，每个线程对race变量进行10000次自增操作，如果这段代码能够正确并发的话，最后输出的结果应该是200000。读者运行完这段代码之后，并不会获得期望的结果，而且会发现每次运行程序，输出的结果都不一样，都是一个小于200000的数字。 问题就出在自增运算“race++”之中，反编译这段代码后，发现只有一行代码的increase()方法在Class文件中是由4条字节码指令构成。从字节码层面上已经很容易分析出并发失败的原因了：当getstatic指令把 race的值取到操作栈顶时，volatile关键字保证了race的值在此时是正确的，但是在执行iconst_1、iadd这些指令的时候，其他线程可能已经把race的值改变了，而操作栈顶的值就变成了过期的数据，所以 putstatic指令执行后就可能把较小的race值同步回主内存之中。 public static void increase(); Code: Stack=2, Locals=0, Args_size=0 0: getstatic #13; //Field race:I 3: iconst_1 4: iadd 5: putstatic #13; //Field race:I 8: return LineNumberTable: line 14: 0 line 15: 8由于volatile变量只能保证可见性，在不符合以下两条规则的运算场景中，我们仍然要通过加锁（使用synchronized、java.util.concurrent中的锁或原子类）来保证原子性： 运算结果并不依赖变量的当前值，或者能够确保只有单一的线程修改变量的值。 变量不需要与其他的状态变量共同参与不变约束。 第二项是禁止指令重排序优化。 2.4 针对long和double型变量的特殊规则对于64位的数据类型（long和double），允许虚拟机将没有被volatile修饰的64位数据的读写操作划分为两次32位的操作来进行，即允许虚拟机实现自行选择是否要保证64位数据类型的load、store、read和write这四个操作的原子性，这就是所谓的“long和double的非原子性协定”。 但是目前主流平台下商用的64位Java虚拟机中并不会出现非原子性访问行为。并且JDK9开始实验性的虚拟机参数-XX：+AlwaysAtomicAccesses要求对所有数据类型进行原子性的访问。 2.5 原子性、可见性与有序性Java内存模型是围绕着在并发过程中如何处理原子性、可见性和有序性这三个特征来建立的。 2.5.1 原子性由Java内存模型来直接保证的原子性变量操作包括read、load、assign、use、store和write这六个，我们大致可以认为，基本数据类型的访问、读写都是具备原子性的（例外就是long和double的非原子性协定） 如果应用场景需要一个更大范围的原子性保证，通常通过synchronized来实现。 2.5.2 可见性可见性就是指当一个线程修改了共享变量的值时，其他线程能够立即得知这个修改。普通变量与volatile变量的区别是，volatile的特殊规则保证了新值能立即同步到主内存，以及每次使用前立即从主内存刷新。因此我们可以说volatile保证了多线程操作时变量的可见性，而普通变量则不能保证这一点。 除了volatile之外，Java还有两个关键字能实现可见性，它们是synchronized和final。 同步块的可见性是由“对一个变量执行unlock操作之前，必须先把此变量同步回主内存中（执行store、write操作）”这条规则获得的。而final关键字的可见性是指：被final修饰的字段在构造器中一旦被初始化完成，并且构造器没有把“this”的引用传递出去（this引用逃逸是一件很危险的事情，其他线程有可能通过这个引用访问到“初始化了一半”的对象），那么在其他线程中就能看见final字段的值。 2.5.3 有序性Java程序中天然的有序性可以总结为一句话：如果在本线程内观察，所有的操作都是有序的；如果在一个线程中观察另一个线程，所有的操作都是无序的。前半句是指“线程内似表现为串行的语义”，后半句是指“指令重排序”现象和“工作内存与主内存同步延迟”现象。 Java语言提供了volatile和synchronized两个关键字来保证线程之间操作的有序性，volatile关键字本身就包含了禁止指令重排序的语义，而synchronized则是由“一个变量在同一个时刻只允许一条线程对其进行lock操作”这条规则获得的，这个规则决定了持有同一个锁的两个同步块只能串行地进入。 2.6 先行发生原则先行发生是Java内存模型中定义的两项操作之间的偏序关系，比如说操作A先行发生于操作B，其实就是说在发生操作B之前，操作A产生的影响能被操作B 观察到，“影响”包括修改了内存中共享变量的值、发送了消息、调用了方法等。 // 以下操作在线程A中执行 i = 1; // 以下操作在线程B中执行 j = i; // 以下操作在线程C中执行 i = 2; 假设线程A中的操作“i=1”先行发生于线程B的操作“j=i”，那我们就可以确定在线程B的操作执行后，变量j的值一定是等于1，得出这个结论的依据有两个：一是根据先行发生原则，“i=1”的结果可以被观察到；二是线程C还没登场，线程A操作结束之后没有其他线程会修改变量i的值。现在再来考虑线程C，我们依然保持线程A和B之间的先行发生关系，而C出现在线程A和B的操作之间，但是C与B没有先行发生关系，那j的值会是多少呢？答案是不确定！1和2都有可能，因为线程C对变量i的影响可能会被线程B观察到，也可能不会，这时候线程B就存在读取到过期数据的风险，不具备多线程安全性。 下面是Java内存模型下一些“天然的”先行发生关系，这些先行发生关系无须任何同步器协助就已经存在，可以在编码中直接使用。如果两个操作之间的关系不在此列，并且无法从下列规则推导出来，则它们就没有顺序性保障，虚拟机可以对它们随意地进行重排序。 程序次序规则：在一个线程内，按照控制流顺序，书写在前面的操作先行发生于书写在后面的操作。注意，这里说的是控制流顺序而不是程序代码顺序，因为要考虑分支、循环等结构。 管程锁定规则：一个unlock操作先行发生于后面对同一个锁的lock操作。这里必须强调的是“同一个锁”，而“后面”是指时间上的先后。 volatile变量规则：对一个volatile变量的写操作先行发生于后面对这个变量的读操作，这里的“后面”同样是指时间上的先后。 线程启动规则：Thread对象的start()方法先行发生于此线程的每一个动作。 线程终止规则：线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过Thread::join()方法是否结束、Thread::isAlive()的返回值等手段检测线程是否已经终止执行。 线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过Thread::interrupted()方法检测到是否有中断发生。 对象终结规则：一个对象的初始化完成（构造函数执行结束）先行发生于它的 finalize()方法的开始。 传递性：如果操作A先行发生于操作B，操作B先行发生于操作C，那就可以得出操作A先行发生于操作C的结论。 3 Java与线程3.1 线程的实现目前线程是Java里面进行处理器资源调度的最基本单位，主流的操作系统都提供了线程实现，Java语言则提供了在不同硬件和操作系统平台下对线程操作的统一处理，每个已经调用过start()方法且还未结束的java.lang.Thread类的实例就代表着一个线程。 实现线程主要有三种方式：使用内核线程实现（1：1实现），使用用户线程实现（1：N实现），使用用户线程加轻量级进程混合实现（N：M实现）。 3.1.1 内核线程实现使用内核线程实现的方式也被称为1：1实现。内核线程（Kernel-Level Thread，KLT）就是直接由操作系统内核支持的线程，这种线程由内核来完成线程切换，内核通过操纵调度器（Scheduler）对线程进行调度，并负责将线程的任务映射到各个处理器上。每个内核线程可以视为内核的一个分身，这样操作系统就有能力同时处理多件事情，支持多线程的内核就称为多线程内核。 程序一般不会直接使用内核线程，而是使用内核线程的一种高级接口——轻量级进程（LightWeight Process，LWP），轻量级进程就是我们通常意义上所讲的线程，由于每个轻量级进程都由一个内核线程支持，因此只有先支持内核线程，才能有轻量级进程。这种轻量级进程与内核线程之间1：1 的关系称为一对一的线程模型。 由于内核线程的支持，每个轻量级进程都成为一个独立的调度单元，即使其中某一个轻量级进程在系统调用中被阻塞了，也不会影响整个进程继续工作。轻量级进程也具有它的局限性：首先，由于是基于内核线程实现的，所以各种线程操作，如创建、析构及同步，都需要进行系统调用。而系统调用的代价相对较高，需要在用户态（User Mode）和内核态（Kernel Mode）中来回切换。其次，每个轻量级进程都需要有一个内核线程的支持，因此轻量级进程要消耗一定的内核资源（如内核线程的栈空间），因此一个系统支持轻量级进程的数量是有限的。 3.1.2 用户线程实现广义上来讲，一个线程只要不是内核线程，都可以认为是用户线程（User Thread，UT）的一种，因此从这个定义上看，轻量级进程也属于用户线程，但轻量级进程的实现始终是建立在内核之上的，许多操作都要进行系统调用，因此效率会受到限制，并不具备通常意义上的用户线程的优点。 而狭义上的用户线程指的是完全建立在用户空间的线程库上，系统内核不能感知到用户线程的存在及如何实现的。用户线程的建立、同步、销毁和调度完全在用户态中完成，不需要内核的帮助。如果程序实现得当，这种线程不需要切换到内核态，因此操作可以是非常快速且低消耗的，也能够支持规模更大的线程数量，部分高性能数据库中的多线程就是由用户线程实现的。这种进程与用户线程之间1：N的关系称为一对多的线程模型。 用户线程的优势在于不需要系统内核支援，但也正由于不依赖于系统内核，应用程序很难独立实现线程的创建、销毁、切换和调度等操作或者实现起来较为复杂。 3.1.3 混合实现线程除了依赖内核线程实现和完全由用户程序自己实现之外，还有一种将内核线程与用户线程一起使用的实现方式，被称为N：M实现。在这种混合实现下，既存在用户线程，也存在轻量级进程。用户线程还是完全建立在用户空间中，因此用户线程的创建、切换、析构等操作依然廉价，并且可以支持大规模的用户线程并发。而操作系统支持的轻量级进程则作为用户线程和内核线程之间的桥梁，这样可以使用内核提供的线程调度功能及处理器映射，并且用户线程的系统调用要通过轻量级进程来完成，这大大降低了整个进程被完全阻塞的风险。在这种混合模式中，用户线程与轻量级进程的数量比是不定的，是N：M的关系。 3.1.4 Java线程的实现Java线程如何实现并不受Java虚拟机规范的约束，这是一个与具体虚拟机相关的话题。从JDK 1.3起，“主流”平台上的“主流”商用Java虚拟机的线程模型普遍都被替换为基于操作系统原生线程模型来实现，即采用1：1的线程模型。 以HotSpot为例，它的每一个Java线程都是直接映射到一个操作系统原生线程来实现的，而且中间没有额外的间接结构，所以HotSpot自己是不会去干涉线程调度的（可以设置线程优先级给操作系统提供调度建议），全权交给底下的操作系统去处理，所以何时冻结或唤醒线程、该给线程分配多少处理器执行时间、该把线程安排给哪个处理器核心去执行等，都是由操作系统完成的，也都是由操作系统全权决定的。 3.2 Java线程调度线程调度是指系统为线程分配处理器使用权的过程，调度主要方式有两种，分别是协同式线程调度和抢占式线程调度。 如果使用协同式调度的多线程系统，线程的执行时间由线程本身来控制，线程把自己的工作执行完了之后，要主动通知系统切换到另外一个线程上去。协同式多线程的最大好处是实现简单，而且由于线程要把自己的事情干完后才会进行线程切换，切换操作对线程自己是可知的，所以一般没有什么线程同步的问题。它的坏处也很明显：线程执行时间不可控制，甚至如果一个线程的代码编写有问题，一直不告知系统进行线程切换，那么程序就会一直阻塞在那里。 如果使用抢占式调度的多线程系统，那么每个线程将由系统来分配执行时间，线程的切换不由线程本身来决定。譬如在Java中，有Thread::yield()方法可以主动让出执行时间，但是如果想要主动获取执行时间，线程本身是没有什么办法的。在这种实现线程调度的方式下，线程的执行时间是系统可控的，也不会有一个线程导致整个进程甚至整个系统阻塞的问题。Java使用的线程调度方式就是抢占式调度。 虽然说Java线程调度是系统自动完成的，但是我们仍然可以“建议”操作系统给某些线程多分配一点执行时间，另外的一些线程则可以少分配一点——这项操作是通过设置线程优先级来完成的。Java 语言一共设置了10个级别的线程优先级（Thread.MIN_PRIORITY至Thread.MAX_PRIORITY）。 不过，线程优先级并不是一项稳定的调节手段，线程调度最终还是由操作系统说了算。如果操作系统原生提供的线程优先级的数量比Java少，就不得不出现几个线程优先级对应到同一个操作系统优先级的情况，例如Windows中就只有七种优先级。 3.3 状态转换Java语言定义了6种线程状态，在任意一个时间点中，一个线程只能有且只有其中的一种状态，并且可以通过特定的方法在不同状态之间转换。这6种状态分别是： 新建（New）：创建后尚未启动的线程处于这种状态。 运行（Runnable）：包括操作系统线程状态中的Running和Ready，也就是处于此状态的线程有可能正在执行，也有可能正在等待着操作系统为它分配执行时间。 无限期等待（Waiting）：处于这种状态的线程不会被分配处理器执行时间，它们要等待被其他线程显式唤醒。以下方法会让线程陷入无限期的等待状态： 没有设置Timeout参数的Thread::join()方法； LockSupport::park()方法。 限期等待（Timed Waiting）：处于这种状态的线程也不会被分配处理器执行时间，不过无须等待被其他线程显式唤醒，在一定时间之后它们会由系统自动唤醒。以下方法会让线程进入限期等待状态： Thread::sleep()方法； 设置了Timeout参数的Object::wait()方法； 设置了Timeout参数的Thread::join()方法； LockSupport::parkNanos()方法； LockSupport::parkUntil()方法。 阻塞（Blocked）：线程被阻塞了，“阻塞状态”与“等待状态”的区别是“阻塞状态”在等待着获取到一个排它锁，这个事件将在另外一个线程放弃这个锁的时候发生；而“等待状态”则是在等待一段时间，或者唤醒动作的发生。在程序等待进入同步区域的时候，线程将进入这种状态。 结束（Terminated）：已终止线程的线程状态，线程已经结束执行。 4 Java与协程4.1 内核线程的局限今天对Web应用的服务要求，不论是在请求数量上还是在复杂度上，与十多年前相比已不可同日而语，这一方面是源于业务量的增长，另一方面来自于为了应对业务复杂化而不断进行的服务细分。 Java目前的并发编程机制产生了一些矛盾，1：1的内核线程模型是如今Java虚拟机线程实现的主流选择，但是这种映射到操作系统上的线程天然的缺陷是切换、调度成本高昂，系统能容纳的线程数量也很有限。以前处理一个请求可以允许花费很长时间在单体应用中，具有这种线程切换的成本也是无伤大雅的，但现在在每个请求本身的执行时间变得很短、数量变得很多的前提下，用户线程切换的开销甚至可能会接近用于计算本身的开销，这就会造成严重的浪费。 传统的Java Web服务器的线程池的容量通常在几十个到两百之间，当程序员把数以百万计的请求往线程池里面灌时，系统即使能处理得过来，但其中的切换损耗也是相当可观的。 4.2 协程的复苏协程采用协同调度，通过应用来模拟多线程，分为有栈协程、无栈协程。 各种语言中的await、async、yield这类关键字是无栈协程，更轻量，但功能也相对有限。 4.3 Java的解决方案对于有栈协程，有一种特例实现名为纤程（Fiber），这个词最早是来自微软公司，后来微软还推出过系统层面的纤程包来方便应用做现场保存、恢复和纤程调度。 OpenJDK在2018年创建了Loom项目，这是Java用来应对本节开篇所列场景的官方解决方案，根据目前公开的信息，如无意外，日后该项目为Java语言引入的、与现在线程模型平行的新并发编程机制中应该也会采用“纤程”这个名字。 Loom项目背后的意图是重新提供对用户线程的支持，但与过去的绿色线程不同，这些新功能不是为了取代当前基于操作系统的线程实现，而是会有两个并发编程模型在Java虚拟机中并存，可以在程序中同时使用。新模型有意地保持了与目前线程模型相似的API设计，它们甚至可以拥有一个共同的基类，这样现有的代码就不需要为了使用纤程而进行过多改动，甚至不需要知道背后采用了哪个并发编程模型。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"深入理解java虚拟机","slug":"深入理解java虚拟机","permalink":"https://www.codetool.top/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"leetcode402-移掉K位数字","slug":"leetcode402-移掉K位数字","date":"2020-01-28T19:44:58.000Z","updated":"2020-01-28T19:58:35.192Z","comments":true,"path":"article/leetcode402-移掉K位数字/","link":"","permalink":"https://www.codetool.top/article/leetcode402-%E7%A7%BB%E6%8E%89K%E4%BD%8D%E6%95%B0%E5%AD%97/","excerpt":"","text":"1 原题给定一个以字符串表示的非负整数 num，移除这个数中的 k 位数字，使得剩下的数字最小。 注意： num 的长度小于 10002 且 ≥ k。 num 不会包含任何前导零。 示例 1： 输入: num = “1432219”, k = 3输出: “1219”解释: 移除掉三个数字 4, 3, 和 2 形成一个新的最小的数字 1219。 示例 2： 输入: num = “10200”, k = 1输出: “200”解释: 移掉首位的 1 剩下的数字为 200. 注意输出不能有任何前导零。789 示例 3 : 输入: num = “10”, k = 2输出: “0”解释: 从原数字移除所有的数字，剩余为空就是0。 2 解法2.1 思想要在一个长度为length的字符数组中去掉k位，留下一个最小数字，则是要留下一个length-k位的数字，我们每一次都要保证在剩余位数充足的情况下选择最小的数字。 对于示例一，&quot;1432219&quot;要选出7-3=4位数字，我们可以保留最后三位，在前五位中选出一个最小数字1，然后在剩下的&quot;432219&quot;中选出3位数字，我们可以保留最后两位，在前四位中选出一个最小数字2，然后在剩下的&quot;219&quot;中选出2位数字，我们可以保留最后一位，在前两位中选出一个最小数字1，然后在剩下的&quot;9&quot;中选出1位数字，选取9。 得到的结果就是&quot;1219&quot; 2.2 代码class Solution { public String removeKdigits(String num, int k) { char[] nums = num.toCharArray(); int start = 0;//下一次选取数字开始的位置 int min = 0; int origink = k; char[] result = new char[nums.length-k];//保存结果 while(k&lt;nums.length){ for(int i = start;i&lt;k+1;i++){//保留有限位数，选取最小数字 if(nums[i]&lt;nums[min]){ min = i; } } result[k-origink] = nums[min]; k++; start = min+1; min = start; } for(int i = 0;i&lt;=result.length;i++){//去除开头的0 if(i==result.length) return \"0\"; if(result[i]!='0'){ result = Arrays.copyOfRange(result,i,result.length); break; } } return String.valueOf(result); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"动态规划","slug":"动态规划","permalink":"https://www.codetool.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]},{"title":"leetcode385-迷你语法分析器","slug":"leetcode385-迷你语法分析器","date":"2020-01-27T18:14:31.000Z","updated":"2020-01-27T18:37:12.316Z","comments":true,"path":"article/leetcode385-迷你语法分析器/","link":"","permalink":"https://www.codetool.top/article/leetcode385-%E8%BF%B7%E4%BD%A0%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8/","excerpt":"","text":"1 原题给定一个用字符串表示的整数的嵌套列表，实现一个解析它的语法分析器。 列表中的每个元素只可能是整数或整数嵌套列表 提示： 你可以假定这些字符串都是格式良好的： 字符串非空 字符串不包含空格 字符串只包含数字0-9, [, - ,,, ] 示例 1： 给定 s = “324”, 你应该返回一个 NestedInteger 对象，其中只包含整数值 324。 示例 2： 给定 s = “[123,[456,[789]]]”, 返回一个 NestedInteger 对象包含一个有两个元素的嵌套列表： 1. 一个 integer 包含值 1232. 一个包含两个元素的嵌套列表：&nbsp;&nbsp;&nbsp;&nbsp;i. 一个 integer 包含值 456&nbsp;&nbsp;&nbsp;&nbsp;ii. 一个包含一个元素的嵌套列表&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a. 一个 integer 包含值 789 2 解法2.1 思想设定一个getNest()函数用于返回一个列表类型的NestedInteger。 相当于每个[ ]中都代表一次递归函数调用。 最重要的思想是通过类的全局字符数组和一个下标值让每次调用递归函数都知道要处理哪个位置。 2.2 代码class Solution { //递归函数通过字符数组和cur下标确定要处理的位置 char[] chars; int cur = 0; public NestedInteger deserialize(String s) { chars = s.toCharArray(); //本身不是一个集合而是一个整数的情况 if(chars[0]!='[') return new NestedInteger(Integer.valueOf(s)); //调用递归函数返回根集合 return getNest(); } public NestedInteger getNest(){ NestedInteger nest = new NestedInteger(); int num = 0;//num用于缓存用逗号分割的整数类型的值 boolean negative = false;//当前记录的整数是不是负数 while(cur!=chars.length-1){ cur ++; if(chars[cur]==',') continue; if(chars[cur]=='[') nest.add(getNest());//遇到[递归获取子集合 else if(chars[cur]==']') return nest; else if(chars[cur]=='-') negative = true; else{//是数字的情况 if(negative) num = 10*num - (chars[cur]-48); else num = 10*num + (chars[cur]-48); //如果下一个字符是,或者]说明当前数字已经记录完了，需要加入集合中 if(chars[cur+1]==','||chars[cur+1]==']'){ nest.add(new NestedInteger(num)); num = 0; negative = false; } } } return null; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"深入理解java虚拟机第三版读书笔记11","slug":"深入理解java虚拟机第三版读书笔记11","date":"2020-01-27T12:32:40.000Z","updated":"2020-01-29T08:24:41.480Z","comments":true,"path":"article/深入理解java虚拟机第三版读书笔记11/","link":"","permalink":"https://www.codetool.top/article/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89%E7%89%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B011/","excerpt":"","text":"以下是第十一章 后端编译与优化的内容 把Class文件转换成与本地基础设施（硬件指令集、操作系统）相关的二进制机器码可以视为整个编译过程的后端。 最近几年提前编译也开始兴起，我们在这章把它和即时编译共称为后端编译。 1 即时编译器目前主流的两款商用Java虚拟机（HotSpot、OpenJ9）里，Java程序最初都是通过解释器进行解释执行的，当虚拟机发现某个方法或代码块的运行特别频繁，就会把这些代码认定为“热点代码”（Hot Spot Code），为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成本地机器码，并以各种手段尽可能地进行代码优化，运行时完成这个任务的后端编译器被称为即时编译器。 1.1 解释器与编译器目前主流的商用Java虚拟机内部都同时包含解释器与编译器。解释器与编译器两者各有优势：当程序需要迅速启动和执行的时候，解释器可以首先发挥作用，省去编译的时间，立即运行。当程序启动后，随着时间的推移，编译器逐渐发挥作用，把越来越多的代码编译成本地代码，这样可以减少解释器的中间损耗，获得更高的执行效率。 HotSpot虚拟机中内置了两个（或三个）即时编译器，其中有两个编译器存在已久，分别被称为“客户端编译器”（Client Compiler）和“服务端编译器”（Server Compiler），或者简称为C1编译器和C2编译器,第三个是在JDK 10时才出现的、长期目标是代替C2的Graal编译器。 解释器与编译器搭配使用的方式在虚拟机中被称为“混合模式”，用户也可以使用参数-Xint强制虚拟机运行于“解释模式”。另外，也可以使用参数-Xcomp强制虚拟机运行于“编译模式”，这时候将优先采用编译方式执行程序，但是解释器仍然要在编译无法进行的情况下介入执行过程。 由于即时编译器编译本地代码需要占用程序运行时间，通常要编译出优化程度越高的代码，所花费的时间便会越长；而且想要编译出优化程度更高的代码，解释器可能还要替编译器收集性能监控信息，这对解释执行阶段的速度也有所影响。为了在程序启动响应速度与运行效率之间达到最佳平衡， HotSpot虚拟机在编译子系统中加入了分层编译的功能。 分层编译根据编译器编译、优化的规模与耗时，划分出不同的编译层次，其中包括： 第0层。程序纯解释执行，并且解释器不开启性能监控功能（Profiling）。 第1层。使用客户端编译器将字节码编译为本地代码来运行，进行简单可靠的稳定优化，不开启性能监控功能。 第2层。仍然使用客户端编译器执行，仅开启方法及回边次数统计等有限的性能监控功能。 第3层。仍然使用客户端编译器执行，开启全部性能监控，除了第2层的统计信息外，还会收集如分支跳转、虚方法调用版本等全部的统计信息。 第4层。使用服务端编译器将字节码编译为本地代码，相比起客户端编译器，服务端编译器会启用更多编译耗时更长的优化，还会根据性能监控信息进行一些不可靠的激进优化。 1.2 编译对象与触发条件热点代码： 被多次调用的方法 被多次执行的循环体 对于这两种情况，编译的目标对象都是整个方法体，而不会是单独的循环体。 要知道某段代码是不是热点代码，称为“热点探测”，有两种方法： 基于采样的热点探测：周期性地检查各个线程的调用栈顶，如果发现某个（或某些）方法经常出现在栈顶，那这个方法就是“热点方法”。 基于计数器的热点探测：为每个方法（甚至是代码块）建立计数器，统计方法的执行次数，如果执行次数超过一定的阈值就认为它是“热点方法”，更精确。 HotSpot使用了第二种方法，为了实现热点计数，HotSpot为每个方法准备了两类计数器：方法调用计数器（Invocation Counter）和回边计数器（Back Edge Counter，“回边”的意思就是指在循环边界往回跳转）。当虚拟机运行参数确定的前提下，这两个计数器都有一个明确的阈值，一旦溢出，就会触发即时编译。 方法调用计数器默认阈值在客户端模式下是1500次，在服务端模式下是10000次，这个阈值可以通过虚拟机参数-XX： CompileThreshold来人为设定。 在默认设置下，方法调用计数器统计的并不是方法被调用的绝对次数，而是一段时间之内方法被调用的次数。当超过一定的时间限度，如果方法的调用次数仍然不足以让它提交给即时编译器编译，那该方法的调用计数器就会被减少一半，这个过程被称为方法调用计数器热度的衰减，而这段时间就称为此方法统计的半衰周期，进行热度衰减的动作是在虚拟机进行垃圾收集时顺便进行的，可以使用虚拟机参数-XX：-UseCounterDecay来关闭热度衰减，让方法计数器统计方法调用的绝对次数，这样只要系统运行时间足够长，程序中绝大部分方法都会被编译成本地代码。另外还可以使用-XX：CounterHalfLifeTime参数设置半衰周期的时间，单位是秒。 回边计数器统计一个方法中循环体代码执行的次数，阈值使用-XX：OnStackReplacePercentage间接设置： 虚拟机运行在客户端模式下，回边计数器阈值计算公式为：方法调用计数器阈值（-XX：CompileThreshold）乘以OSR比率（-XX：OnStackReplacePercentage）除以100。其中-XX：OnStackReplacePercentage默认值为933，如果都取默认值，那客户端模式虚拟机的回边计数器的阈值为13995。 虚拟机运行在服务端模式下，回边计数器阈值的计算公式为：方法调用计数器阈值（-XX：CompileThreshold）乘以（OSR比率（-XX：OnStackReplacePercentage）减去解释器监控比率（-XX：InterpreterProfilePercentage）的差值）除以100。其中-XX：OnStack ReplacePercentage默认值为140，XX：InterpreterProfilePercentage默认值为33，如果都取默认值，那服务端模式虚拟机回边计数器的阈值为10700。 与方法计数器不同，回边计数器没有计数热度衰减的过程，因此这个计数器统计的就是该方法循环执行的绝对次数。当计数器溢出的时候，它还会把方法计数器的值也调整到溢出状态，这样下次再进入该方法的时候就会执行标准编译过程。 1.3 编译过程在默认条件下，编译的过程中，虚拟机仍然将按照解释方式继续执行代码，编译动作则在后台的编译线程中进行。用户可以通过参数-XX：-BackgroundCompilation来禁止后台编译，后台编译被禁止后，编译的时候将会一直阻塞等待，直到编译过程完成再开始执行代码。 服务端编译器和客户端编译器的编译过程是有所差别的。对于客户端编译器来说，它是一个相对简单快速的三段式编译器，主要的关注点在于局部性的优化，而放弃了许多耗时较长的全局优化手段。 在第一个阶段，一个平台独立的前端将字节码构造成一种高级中间代码表示（HIR，即与目标机器指令集无关的中间表示）。HIR使用静态单分配（Static Single Assignment，SSA）的形式来代表代码值，这可以使得一些在HIR的构造过程之中和之后进行的优化动作更容易实现。在此之前编译器已经会在字节码上完成一部分基础优化，如方法内联、常量传播等优化将会在字节码被构造成HIR之前完成。 在第二个阶段，一个平台相关的后端从HIR中产生低级中间代码表示（LIR，即与目标机器指令集相关的中间表示），而在此之前会在HIR上完成另外一些优化，如空值检查消除、范围检查消除等，以便让HIR达到更高效的代码表示形式。 最后的阶段是在平台相关的后端使用线性扫描算法在LIR上分配寄存器，并在LIR上做窥孔（Peephole）优化，然后产生机器代码。 而服务端编译器则是专门面向服务端的典型应用场景，并为服务端的性能配置针对性调整过的编译器，也是一个能容忍很高优化复杂度的高级编译器，几乎能达到GNU C++编译器使用-O2参数时的优化强度。它会执行大部分经典的优化动作，如：无用代码消除、循环展开、循环表达式外提、消除公共子表达式、常量传播、基本块重排序等，还会实施一些与Java语言特性密切相关的优化技术，如范围检查消除、空值检查消除（不过并非所有的空值检查消除都是依赖编译器优化的，有一些是代码运行过程中自动优化了）等。另外，还可能根据解释器或客户端编译器提供的性能监控信息，进行一些不稳定的预测性激进优化，如守护内联、分支频率预测等。 2 提前编译器Android中的ART（Android Runtime）就是提前编译的。 2.1 提前编译的优劣得失字节膨胀：提前编译的本地二进制码的体积会明显大于字节码的体积。 动态扩展：提前编译通常要求程序是封闭的，不能在外部动态加载新的字节码。 提前编译有两种分支： 做与传统C、C++编译器类似的，在程序运行之前把程序代码编译成机器码的静态翻译工作 把原本即时编译器在运行时要做的编译工作提前做好并保存下来，下次运行到这些代码（譬如公共库代码在被同一台机器其他Java进程使用）时直接把它加载进来使用。 第一条是传统的提前编译应用形式。编译期间需要消耗很多资源和时间用来优化，例如“过程间分析”，将它节省下来给运行能明显提高效率。 第二条则是给即时编译器做缓存加速，去改善Java程序的启动时间。这种提前编译被称为动态提前编译（DynamicAOT）或者索性就大大方方地直接叫即时编译缓存（JIT Caching）。 而即时编译器的优势有： 性能分析制导优化：在解释器或者客户端编译器运行过程中，会不断收集性能监控信息，有助于在运行期动态优化。 激进预测性优化：提前编译做的优化较为保守，需要考虑程序实际运行的效果不能有差错，而即时编译可以大胆地按照高概率的假设进行优化，万一真的走到罕见分支上，大不了退回到低级编译器甚至解释器上去执行。 链接时优化：Java语言天生就是动态链接的，如果要连接的代码在运行前在不同的机器、编译器上进行编译，最后连接可能会出现边界隔阂。 3 编译器优化技术3.1 优化技术概览参考地址：https://wiki.openjdk.java.net/display/HotSpot/PerformanceTacticIndex 编译器策略 延迟编译 分层编译 栈上替换 延迟优化 程序依赖图表示 静态单赋值表示 基于性能监控的优化技术 乐观空值断言 乐观类型断言 乐观类型增强 乐观数组长度加强 裁剪未被选择的分支 乐观的多态内联 分支频率预测 调用频率预测 基于证据的优化技术 精确类型推断 内存值推断 内存值跟踪 常量折叠 重组 操作符退化 空值检查消除 类型检测退化 类型检测消除 代数化简 公共子表达式消除 数据流敏感重写 条件常量传播 基于流承载的类型缩减转换 无用代码消除 语言相关的优化技术 类型继承关系分析 去虚拟机化 符号常量传播 自动装箱消除 逃逸分析 锁消除 锁膨胀 消除反射 内存及代码位置变换 表达式提升 表达式下沉 冗余存储消除 相邻存储合并 交汇点分离 循环变换 循环展开 循环剥离 安全点消除 迭代范围分离 范围检查消除 循环向量化 全局代码调整 内联 全局代码外提 基于热度的代码布局 Switch 调整 控制流图变换 本地代码编排 本地代码封包 延迟槽填充 着色图寄存器分配 线性扫描寄存器分配 复写聚合 常量分裂 复写移除 地址模式匹配 下面介绍四种优化技术： 最重要的优化技术之一：方法内联。 最前沿的优化技术之一：逃逸分析。 语言无关的经典优化技术之一：公共子表达式消除。 语言相关的经典优化技术之一：数组边界检查消除。 3.2 方法内联内联为除了消除方法调用的成本之外，它更重要的意义是为其他优化手段建立良好的基础。 内联可能会遇到虚方法无法确定的问题。为了解决虚方法的内联问题，Java虚拟机首先引入了一种名为类型继承关系分析（CHA）的技术，用于确定在目前已加载的类中，某个接口是否有多于一种的实现、某个类是否存在子类、某个子类是否覆盖了父类的某个虚方法等信息。这样，编译器在进行内联时，如果遇到虚方法，则会向CHA查询此方法在当前程序状态下是否有多个目标版本可供选择，如果查询到只有一个版本，那就可以假设“应用程序的全貌就是现在运行的这个样子”来进行内联，这种内联被称为守护内联。不过由于后面可能会加载其他类，这属于激进优化。如果在后面的加载过程加载了导致继承关系发生变化的新类，那么就必须抛弃已经编译的代码，退回到解释状态进行执行，或者重新进行编译。 假如向CHA查询出来的结果是该方法确实有多个版本的目标方法可供选择，那即时编译器还将进行最后一次努力，使用内联缓存的方式来缩减方法调用的开销。 这种状态下方法调用是真正发生了的，但是比起直接查虚方法表还是要快一些。内联缓存是一个建立在目标方法正常入口之前的缓存，它的工作原理大致为：在未发生方法调用之前，内联缓存状态为空，当第一次调用发生后，缓存记录下方法接收者的版本信息，并且每次进行方法调用时都比较接收者的版本。如果以后进来的每次调用的方法接收者版本都是一样的，那么这时它就是一种单态内联缓存。通过该缓存来调用，比用不内联的非虚方法调用，仅多了一次类型判断的开销而已。但如果真的出现方法接收者不一致的情况，就说明程序用到了虚方法的多态特性，这时候会退化成超多态内联缓存，其开销相当于真正查找虚方法表来进行方法分派。 3.3 逃逸分析逃逸分析（Escape Analysis）是目前Java虚拟机中比较前沿的优化技术，它与类型继承关系分析一样，并不是直接优化代码的手段，而是为其他优化措施提供依据的分析技术。 逃逸分析的基本原理是：分析对象动态作用域，当一个对象在方法里面被定义后，它可能被外部方法所引用，例如作为调用参数传递到其他方法中，这种称为方法逃逸；甚至还有可能被外部线程访问到，譬如赋值给可以在其他线程中访问的实例变量，这种称为线程逃逸；从不逃逸、方法逃逸到线程逃逸，称为对象由低到高的不同逃逸程度。如果能证明一个对象不会逃逸到方法或线程之外（换句话说是别的方法或线程无法通过任何途径访问到这个对象），或者逃逸程度比较低（只逃逸出方法而不会逃逸出线程），则可能为这个对象实例采取不同程度的优化，如： 栈上分配：栈上分配变量可以避免对这个变量进行垃圾回收，从而提高效率，（同时，栈上存储的数据，很大机会被虚拟机分配至物理机器的高速寄存器中存储）栈上分配支持方法逃逸，但不能支持线程逃逸。 标量替换：不能分解的，例如int、long等数值类型及reference类型等称为标量。相对的，可以继续分解称为聚合量，例如Java中的对象。如果把一个Java对象拆散，将其用到的成员变量恢复为原始类型来访问，这个过程就称为标量替换。假如逃逸分析能够证明一个对象不会被方法外部访问，并且这个对象可以被拆散，那么程序真正执行的时候将可能不去创建这个对象，而改为直接创建它的若干个被这个方法使用的成员变量来代替。将对象拆分后，除了可以让对象的成员变量在栈上分配和读写之外，还可以为后续进一步的优化手段创建条件。标量替换可以视作栈上分配的一种特例，实现更简单，但对逃逸程度的要求更高，它不允许对象逃逸出方法范围内。 同步消除：线程同步本身是一个相对耗时的过程，如果逃逸分析能够确定一个变量不会逃逸出线程，无法被其他线程访问，那么这个变量的读写肯定就不会有竞争，对这个变量实施的同步措施也就可以安全地消除掉。 3.4 公共子表达式消除如果一个表达式E之前已经被计算过了，并且从先前的计算到现在E中所有变量的值都没有发生变化，那么E 的这次出现就称为公共子表达式。对于这种表达式，没有必要花时间再对它重新进行计算，只需要直接用前面计算过的表达式结果代替E。 3.5 数组边界检查消除有些代码在编译的时候就可以确定运行的时候数组下标一定不会越界，那么运行时就可以不做检查。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"深入理解java虚拟机","slug":"深入理解java虚拟机","permalink":"https://www.codetool.top/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"leetcode341-扁平化嵌套列表迭代器","slug":"leetcode341-扁平化嵌套列表迭代器","date":"2020-01-26T18:18:33.000Z","updated":"2020-01-26T18:36:09.178Z","comments":true,"path":"article/leetcode341-扁平化嵌套列表迭代器/","link":"","permalink":"https://www.codetool.top/article/leetcode341-%E6%89%81%E5%B9%B3%E5%8C%96%E5%B5%8C%E5%A5%97%E5%88%97%E8%A1%A8%E8%BF%AD%E4%BB%A3%E5%99%A8/","excerpt":"","text":"1 原题给定一个嵌套的整型列表。设计一个迭代器，使其能够遍历这个整型列表中的所有整数。 列表中的项或者为一个整数，或者是另一个列表。 示例1： 输入: [[1,1],2,[1,1]]输出: [1,1,2,1,1]解释: 通过重复调用 next 直到 hasNext 返回false，next 返回的元素的顺序应该是: [1,1,2,1,1]。 示例2： 输入: 14输出: False解释: 通过重复调用 next 直到 hasNext 返回false，next 返回的元素的顺序应该是: [1,4,6]。 2 解法2.1 思想构造通过递归构造，获取元素就是通用迭代器的方法。 2.2 代码public class NestedIterator implements Iterator&lt;Integer> { List&lt;Integer> list = new ArrayList&lt;>(); int cur = 0; public NestedIterator(List&lt;NestedInteger> nestedList) { addViaList(nestedList); } public void addViaList(List&lt;NestedInteger> nestedList){ for(NestedInteger i:nestedList){ if(i.isInteger()) list.add(i.getInteger()); else addViaList(i.getList()); } } @Override public Integer next() { return list.get(cur++); } @Override public boolean hasNext() { return cur&lt;list.size(); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode331-验证二叉树的前序序列化","slug":"leetcode331-验证二叉树的前序序列化","date":"2020-01-26T15:51:46.000Z","updated":"2020-01-26T16:14:19.038Z","comments":true,"path":"article/leetcode331-验证二叉树的前序序列化/","link":"","permalink":"https://www.codetool.top/article/leetcode331-%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E5%BA%8F%E5%88%97%E5%8C%96/","excerpt":"","text":"1 原题序列化二叉树的一种方法是使用前序遍历。当我们遇到一个非空节点时，我们可以记录下这个节点的值。如果它是一个空节点，我们可以使用一个标记值记录，例如 #。 _9_ / \\ 3 2 / \\ / \\ 4 1 # 6 / \\ / \\ / \\ # # # # # #例如，上面的二叉树可以被序列化为字符串 &quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;，其中 # 代表一个空节点。 给定一串以逗号分隔的序列，验证它是否是正确的二叉树的前序序列化。编写一个在不重构树的条件下的可行算法。 每个以逗号分隔的字符或为一个整数或为一个表示 null 指针的 &#39;#&#39; 。 你可以认为输入格式总是有效的，例如它永远不会包含两个连续的逗号，比如 &quot;1,,3&quot; 。 示例 1: 输入: “9,3,4,#,#,1,#,#,2,#,6,#,#”输出: true 示例 2: 输入: “1,#”输出: false 示例 3: 输入: “9,#,#,1”输出: false 2 解法2.1 思想可能导致前序序列化验证失败的情况有： null做空节点 子节点不完全 # 1 / \\ / \\ 1 2 3假设任一状态待填充的节点数为count，第一种情况会导致在某一个时刻count小于0，第二种情况会导致最后count大于0。而这两种情况是不会同时存在的。 每次遇到一个节点count的值减一，遇到一个非null的节点count的值加二，最后看count是否为0。 2.2 代码class Solution { public boolean isValidSerialization(String preorder) { String[] nodes = preorder.split(\",\"); int count = 1; for(String i:nodes){ count-=1; if(count&lt;0) return false; if(!i.equals(\"#\")) count+=2; } return count==0; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode224-基本计算器","slug":"leetcode224-基本计算器","date":"2020-01-25T19:07:56.000Z","updated":"2020-01-25T19:19:58.588Z","comments":true,"path":"article/leetcode224-基本计算器/","link":"","permalink":"https://www.codetool.top/article/leetcode224-%E5%9F%BA%E6%9C%AC%E8%AE%A1%E7%AE%97%E5%99%A8/","excerpt":"","text":"1 原题实现一个基本的计算器来计算一个简单的字符串表达式的值。 字符串表达式可以包含左括号 ( ，右括号 )，加号 + ，减号 -，非负整数和空格 。 示例1： 输入: “1 + 1”输出: 2 示例2： 输入: “ 2-1 + 2 “输出: 3 示例 3: 输入: “(1+(4+5+2)-3)+(6+8)”输出: 23 说明： 你可以假设所给定的表达式都是有效的。 请不要使用内置的库函数 eval。 2 解法2.1 思想操作数栈的思想 2.2 代码原来以为递归会很取巧，结果遇到了很多细节问题。 class Solution { public int calculate(String s) { if(s.indexOf(\"(\")==-1){ int num = 0; int sum = 0; boolean negative = false; boolean hasNum = false; for(char i:s.toCharArray()){ if(i==' ') continue; if(i>='0'&amp;&amp;i&lt;='9') { hasNum = true; if(negative==false) num=(num*10)+(i-48); else num=(num*10)-(i-48); } if(i=='+'){ hasNum = false; sum+=num; num = 0; negative = false; }if(i=='-'){ if(hasNum == false) negative = !negative; else negative = true; hasNum = false; sum+=num; num = 0; } } sum+=num; return sum; } int lastLeft = s.lastIndexOf(\"(\"); int right = s.substring(lastLeft,s.length()).indexOf(\")\")+lastLeft; return calculate(s.substring(0,lastLeft)+calculate(s.substring(lastLeft+1,right))+s.substring(right+1)); } } 栈的方法： class Solution { public int calculate(String s) { Deque&lt;Integer> signs = new ArrayDeque&lt;>(); int num = 0; int res = 0; int sign = 1; signs.push(sign); for (char c : s.toCharArray()) { if (Character.isDigit(c)) { num = num * 10 + (c - '0'); } else if (c == '(') { signs.push(sign); } else if (c == ')') { signs.pop(); } else if (c == '+' || c == '-') { res += sign * num; num = 0; sign = signs.peek() * (c == '+' ? 1 : -1); } } return res + sign * num; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"栈","slug":"栈","permalink":"https://www.codetool.top/tags/%E6%A0%88/"}]},{"title":"深入理解java虚拟机第三版读书笔记10","slug":"深入理解java虚拟机第三版读书笔记10","date":"2020-01-25T13:15:55.000Z","updated":"2020-01-29T18:40:41.513Z","comments":true,"path":"article/深入理解java虚拟机第三版读书笔记10/","link":"","permalink":"https://www.codetool.top/article/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89%E7%89%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B010/","excerpt":"","text":"以下是第十章 前端编译与优化的内容 Java中的编译可能是指： 前端编译：把*.java文件转变成*.class文件的过程 即时编译（JIT）：运行期把字节码转变成本地机器码的过程 提前编译（AOT）：直接把程序编译成与目标机器指令集相关的二进制代码的过程 这一章讲的是前端编译 1 Javac编译器javac是一个由java语言编写的程序 1.1 Javac的源码与调试Java6以后，Javac的源码放在了JDK_SRC_HOME/langtools/src/share/classes/com/sun/tools/javac Javac的工作流程 准备过程：初始化插入式注解处理器。 解析与填充符号表过程，包括：·词法、语法分析。将源代码的字符流转变为标记集合，构造出抽象语法树。·填充符号表。产生符号地址和符号信息。 插入式注解处理器的注解处理过程：插入式注解处理器的执行阶段。 分析与字节码生成过程，包括： 标注检查。对语法的静态信息进行检查。 数据流及控制流分析。对程序动态运行过程进行检查。 解语法糖。将简化代码编写的语法糖还原为原有的形式。 字节码生成。将前面各个步骤所生成的信息转化成字节码。 执行插入式注解时又可能会产生新的符号，如果有新的符号产生，就必须转回到之前的解析、填充符号表的过程中重新处理这些新符号。 2 Java语法糖的味道2.1 泛型2.1.1 Java与C#的泛型Java是 “类型擦除式泛型”，C#是 “具现化式泛型”。 Java语言中的泛型只在程序源码中存在，在编译后的字节码文件中，全部泛型都被替换为原来的裸类型，并且在相应的地方插入了强制转型代码。 Java的类型擦除式泛型无论在使用效果上还是运行效率上，几乎是全面落后于C#的具现化式泛型，而它的唯一优势是在于实现这种泛型的影响范围上。 Java选择类型擦除主要是因为遗留代码多，向前兼容。 2.1.2 类型擦除实现：泛型类原地泛型化变成裸类型 Java是简单粗暴地直接在编译时把ArrayList&lt;Integer&gt;还原回ArrayList，只在元素访问、修改时自动插入一些强制类型转换和检查指令。 类型擦除的缺陷： 不支持基本类型，例如ArrayList&lt;int&gt;，因为无法实现int和Object互转，只能自动装箱、拆箱使用Integer，导致执行效率低。 运行期无法取到泛型类型信息，导致不能出现下列操作： if (item instanceof E) { // 不合法，无法对泛型进行实例判断 E newItem = new E(); // 不合法，无法使用泛型创建对象 E[] itemArray = new E[10]; // 不合法，无法使用泛型创建数组 方法重载即使是不同泛型类型的参数也不能作为不一样的特征签名。但是返回值类型不同实际是可以正常运行的，虽然特征签名还是一致，但class文件支持不同描述符的方法共存，后续JVM有优化。 2.1.3 值类型和未来的泛型在2014年，刚好是Java泛型出现的十年之后，Oracle建立了一个名为Valhalla的语言改进项目，希望改进Java语言留下的各种缺陷（解决泛型的缺陷就是项目主要目标其中之一）。 在Valhalla项目中规划了几种不同的新泛型实现方案，在这些新的泛型设计中，泛型类型有可能被具现化，也有可能继续维持类型擦除以保持兼容（取决于采用哪种实现方案），即使是继续采用类型擦除的方案，泛型的参数化类型也可以选择不被完全地擦除掉，而是相对完整地记录在Class文件中，能够在运行期被使用，也可以指定编译器默认要擦除哪些类型。相对于使用不同方式实现泛型，目前比较明确的是未来的Java应该会提供“值类型”（Value Type）的语言层面的支持。 值类型可以与引用类型一样，具有构造函数、方法或是属性字段，等等，而它与引用类型的区别在于它在赋值的时候通常是整体复制，而不是像引用类型那样传递引用的。更为关键的是，值类型的实例很容易实现分配在方法的调用栈上的，这意味着值类型会随着当前方法的退出而自动释放，不会给垃圾收集子系统带来任何压力。 在Valhalla项目中，Java的值类型方案被称为“内联类型”，计划通过一个新的关键字inline来定义。 2.2 条件编译使用条件为常量的if语句，可以在编译期间过滤掉一些代码 public static void main(String[] args) { if (true) { System.out.println(\"block 1\"); } else { System.out.println(\"block 2\"); } } 反编译的结果 public static void main(String[] args) { System.out.println(\"block 1\"); } 2.3 可变参数public void foo(String... args){} =&gt; public void foo(String[] args){} 2.4 switch-字符串和switch-enum2.4.1 switch-字符串配合字符串的哈希值使用。 String i = \"hello\"; switch (i){ case \"hello\": System.out.println(\"h\"); break; case \"world\": System.out.println(\"w\"); break; } 反编译后 String i = \"hello\"; byte var3 = -1; switch(i.hashCode()) { case 99162322: if (i.equals(\"hello\")) { var3 = 0; } break; case 113318802: if (i.equals(\"world\")) { var3 = 1; } } switch(var3) { case 0: System.out.println(\"h\"); break; case 1: System.out.println(\"w\"); } 2.4.2 switch-enumenum Sex{ MALE,FEMALE } public static void foo(Sex sex){ switch (sex){ case MALE: System.out.println(\"男\"); break; case FEMALE: System.out.println(\"女\"); break; } } 反编译后 /* *定义一个合成类（仅jvm使用，对我们不可见） *用来映射枚举的ordina1与数组元素的关系 *枚举的ordinal表示枚举对象的序号，从0开始 *即MALE的ordinal()=0，FEMALE的ordinal()=1 */ static class $MAP{ //数组大小即为枚举元素个数，里面存储case用来对比的数字 static int[] map = new int[2]; static{ map[Sex.MALE.ordinal()]=1; map[Sex.FEMALE.ordinal()]=2; } } public static void foo(Sex sex) { int x = $MAP.map[sex.ordinal()]; switch(x){ case 1: System.out.println(\"男\"）; break; case 2: System.out.println(\"女\"）; break; } } 2.5 枚举enum Sex{ MALE,FEMALE } 实际上是编译成了 public final class Sex extends Enum&lt;Sex>{ public static final Sex MALE; public static final Sex FEMALE; private static final Sex[] $VALUES; static{ MALE = new Sex(\"MALE\",0); FEMALE = new Sex(\"FEMALE\",1); $VALUES = new Sex[]{MALE,FEMALE}; } private Sex(String name,int ordinal){ super(name,ordinal); } public static Sex[] values(){ return $VALUES.clone(); } public static Sex valueOf(String name){ return Enum.valueOf(Sex.class,name); } } 2.6 try-with-resourcesJDK7开始新增了对需要关闭的资源处理的特殊语法try-with-resources: try(资源变量=创建资源对象){ }catch(){ } 其中资源对象需要实现Autocloseable接口，例如InputStream、OutputStream、Connection、Statement、Resultset等接口都实现了Autocloseable，使用try-with-resources可以不用写finally语句块，编译器会帮助生成关闭资源代码，例如： public static void main(String[]args){ try(InputStream is = new FileInputStream(\"d:\\\\1.txt\")){ System.out.println(is); }catch(IOException e){ e.printStackTrace(); } } 反编译后： try { InputStream is = new FileInputStream(\"d:\\\\1.txt\"); Throwable var2 = null; try { System.out.println(is); } catch (Throwable var12) { var2 = var12; throw var12; } finally { if (is != null) { if (var2 != null) { try { is.close(); } catch (Throwable var11) { var2.addSuppressed(var11); } } else { is.close(); } } } } catch (IOException var14) { var14.printStackTrace(); }","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"深入理解java虚拟机","slug":"深入理解java虚拟机","permalink":"https://www.codetool.top/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"leetcode103-二叉树的锯齿形层次遍历","slug":"leetcode103-二叉树的锯齿形层次遍历","date":"2020-01-24T18:52:24.000Z","updated":"2020-01-24T19:04:58.773Z","comments":true,"path":"article/leetcode103-二叉树的锯齿形层次遍历/","link":"","permalink":"https://www.codetool.top/article/leetcode103-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%BD%A2%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/","excerpt":"","text":"1 原题给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。 例如:给定二叉树: [3,9,20,null,null,15,7], &nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;/ \\&nbsp;&nbsp;9&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;15&nbsp;&nbsp;&nbsp;7 返回锯齿形层次遍历如下： [&nbsp;&nbsp;[3],&nbsp;&nbsp;[20,9],&nbsp;&nbsp;[15,7]] 2 解法2.1 思想用两个栈来交替存储某一层和下一层的节点: 读取第一个栈的时候，从左向右的读取节点，将它们的子节点从左向右入第二个栈，能使读取第二个栈的时候是以从右向左的顺序出栈的。 读取第二个栈的时候，从右向左的读取节点，将它们的子节点从右向左入第一个栈，能使读取第一个栈的时候是以从左向右的顺序出栈的。 这样交替使用两个栈，可以实现两层之间的顺序反转。 2.2 代码class Solution { public List&lt;List&lt;Integer>> zigzagLevelOrder(TreeNode root) { List&lt;List&lt;Integer>> ans = new ArrayList&lt;>(); Stack&lt;TreeNode> first = new Stack&lt;>(); Stack&lt;TreeNode> second = new Stack&lt;>(); List&lt;Integer> cur; if(root == null) return ans; first.push(root); while(!first.isEmpty()||!second.isEmpty()){ //当前层的节点按从左向右的顺序依次出栈，子节点按从左向右的顺序入second栈，实现顺序逆转 cur = new ArrayList&lt;>(); while(!first.isEmpty()){ TreeNode node = first.pop(); cur.add(node.val); if(node.left!=null) second.push(node.left); if(node.right!=null) second.push(node.right); } ans.add(cur); //下一层的节点按从右向左的顺序依次出栈，子节点按从右向左的顺序入first栈，实现顺序逆转 if(second.isEmpty()) break; cur = new ArrayList&lt;>(); while(!second.isEmpty()){ TreeNode node = second.pop(); cur.add(node.val); if(node.right!=null) first.push(node.right); if(node.left!=null) first.push(node.left); } ans.add(cur); } return ans; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"栈","slug":"栈","permalink":"https://www.codetool.top/tags/%E6%A0%88/"}]},{"title":"愿广大国人都能平安度过这个春节","slug":"愿广大国人都能平安度过这个春节","date":"2020-01-24T16:30:44.000Z","updated":"2020-01-24T16:51:20.114Z","comments":true,"path":"article/愿广大国人都能平安度过这个春节/","link":"","permalink":"https://www.codetool.top/article/%E6%84%BF%E5%B9%BF%E5%A4%A7%E5%9B%BD%E4%BA%BA%E9%83%BD%E8%83%BD%E5%B9%B3%E5%AE%89%E5%BA%A6%E8%BF%87%E8%BF%99%E4%B8%AA%E6%98%A5%E8%8A%82/","excerpt":"","text":"今天是2020年1月25日，农历正月初一，是咱们国家的传统佳节——春节。我一直觉得春节是中国很重要的一个文化符号，我相信对于所有华人来说，春节的特殊性已经融于血液之中，是不可替代的节日。我在这里恭祝所有华人新年快乐，鼠年大吉。 同时我也希望，大家应时刻把自己的健康安全放在第一位，在2019-nCoV（武汉肺炎）肆虐之际，要时刻注意清洁卫生，出门戴好口罩，这段时间尽量避免和别人接触。 截至目前，大多数省级行政区都启动了突发公共卫生事件一级响应，这件事的重要程度不言而喻，我也有在持续关注疫情的动态。我相信只要大家齐心协力，我们一定能打好这场攻坚战，我们也不用太过恐慌，保护好自己就是最重要的。 目前已经可以看到很多市民的防范意识都有提高，我觉得我们现在做的一切都在步入正轨。 希望这个春节所有人都平平安安！武汉加油！中国加油！","categories":[{"name":"日常/随笔","slug":"日常-随笔","permalink":"https://www.codetool.top/categories/%E6%97%A5%E5%B8%B8-%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"日常","slug":"日常","permalink":"https://www.codetool.top/tags/%E6%97%A5%E5%B8%B8/"}]},{"title":"leetcode85-最大矩形","slug":"leetcode85-最大矩形","date":"2020-01-24T05:19:04.000Z","updated":"2020-01-24T05:53:01.977Z","comments":true,"path":"article/leetcode85-最大矩形/","link":"","permalink":"https://www.codetool.top/article/leetcode85-%E6%9C%80%E5%A4%A7%E7%9F%A9%E5%BD%A2/","excerpt":"","text":"1 原题给定一个仅包含 0 和 1 的二维二进制矩阵，找出只包含 1 的最大矩形，并返回其面积。 示例： 输入:[&nbsp;&nbsp;[“1”,”0”,”1”,”0”,”0”],&nbsp;&nbsp;[“1”,”0”,”1”,”1”,”1”],&nbsp;&nbsp;[“1”,”1”,”1”,”1”,”1”],&nbsp;&nbsp;[“1”,”0”,”0”,”1”,”0”]]输出: 6 2 解法2.1 思想这道题可以分解成若干leetcode84-柱状图中最大的矩形的子问题，可以使用相同的方法。 我们从上往下动态规划二维数组，每增加一行就会出现不同的柱状区域。 从每一次得到的最大矩形面积中获取最大值，就是该题的答案 2.2 代码class Solution { public int largestRectangleArea(int[] heights) { int length = heights.length; if(length==0) return 0; int max = 0; int left[] = new int[length]; int right[] = new int[length]; left[0] = -1; right[length-1] = length; for(int i = 1;i&lt;length;i++){ //如果左边一列比当前列矮，则left就等于左边一列的下标。 if(heights[i]>heights[i-1]) left[i] = i-1; else{ //否则沿着左边这列的left一直查找过去，直到找到比当前列低的一列 left[i] = left[i-1]; while(left[i]!=-1&amp;&amp;heights[left[i]]>=heights[i]) left[i] = left[left[i]]; } } for(int i = length-2;i>=0;i--){ //如果右边一列比当前列矮，则right就等于右边一列的下标。 if(heights[i]>heights[i+1]) right[i] = i+1; else{ //否则沿着右边这列的right一直查找过去，直到找到比当前列低的一列 right[i] = right[i+1]; while(right[i]!=length&amp;&amp;heights[right[i]]>=heights[i]) right[i] = right[right[i]]; } } for(int i = 0;i&lt;length;i++){ int area = (right[i]-left[i]-1)*heights[i]; if(area>max) max = area; } return max; } public int maximalRectangle(char[][] matrix) { if(matrix.length == 0) return 0; int height[] = new int[matrix[0].length]; int max = 0; for(char[] line:matrix){ //每增加一行改变height数组 for(int i=0;i&lt;line.length;i++){ if(line[i]=='0') height[i]=0; else height[i] += 1; } int area = largestRectangleArea(height); if(area>max) max=area; } return max; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"https://www.codetool.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]},{"title":"leetcode84-柱状图中最大的矩形","slug":"leetcode84-柱状图中最大的矩形","date":"2020-01-23T19:01:50.000Z","updated":"2020-01-23T19:12:16.370Z","comments":true,"path":"article/leetcode84-柱状图中最大的矩形/","link":"","permalink":"https://www.codetool.top/article/leetcode84-%E6%9F%B1%E7%8A%B6%E5%9B%BE%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E7%9F%A9%E5%BD%A2/","excerpt":"","text":"1 原题给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。 求在该柱状图中，能够勾勒出来的矩形的最大面积。 以上是柱状图的示例，其中每个柱子的宽度为 1，给定的高度为 [2,1,5,6,2,3]。 图中阴影部分为所能勾勒出的最大矩形面积，其面积为 10 个单位。 示例： 输入： [2,1,5,6,2,3]输出： 10 2 解法2.1 思想这道题和leetcode42-接雨水较为相似。 对于每列来说，以当前列高为高的最大矩形区域的宽度区域为被左边最近较矮一列和右边最近较矮一列围起来的宽度。 如果两边有一边没有比当前列矮的一列，则左边算作-1，右边算作length。 2.2 代码class Solution { public int largestRectangleArea(int[] heights) { int length = heights.length; if(length==0) return 0; int max = 0; int left[] = new int[length]; int right[] = new int[length]; left[0] = -1; right[length-1] = length; for(int i = 1;i&lt;length;i++){ //如果左边一列比当前列矮，则left就等于左边一列的下标。 if(heights[i]>heights[i-1]) left[i] = i-1; else{ //否则沿着左边这列的left一直查找过去，直到找到比当前列低的一列 left[i] = left[i-1]; while(left[i]!=-1&amp;&amp;heights[left[i]]>=heights[i]) left[i] = left[left[i]]; } } for(int i = length-2;i>=0;i--){ //如果右边一列比当前列矮，则right就等于右边一列的下标。 if(heights[i]>heights[i+1]) right[i] = i+1; else{ //否则沿着右边这列的right一直查找过去，直到找到比当前列低的一列 right[i] = right[i+1]; while(right[i]!=length&amp;&amp;heights[right[i]]>=heights[i]) right[i] = right[right[i]]; } } for(int i = 0;i&lt;length;i++){ int area = (right[i]-left[i]-1)*heights[i]; if(area>max) max = area; } return max; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"https://www.codetool.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]},{"title":"深入理解java虚拟机第三版读书笔记09","slug":"深入理解java虚拟机第三版读书笔记09","date":"2020-01-23T13:14:13.000Z","updated":"2020-01-25T13:15:49.781Z","comments":true,"path":"article/深入理解java虚拟机第三版读书笔记09/","link":"","permalink":"https://www.codetool.top/article/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89%E7%89%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B009/","excerpt":"","text":"续深入理解java虚拟机第三版读书笔记08 1 类加载器通过一个类的全限定名来获取描述该类的二进制字节流称为类加载器。类加载器可以用户自定义，是java语言流行的一项原因 1.1 类与类加载器对于任意一个类，都必须由加载它的类加载器和这个类本身一起共同确立其在Java虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。 或者说：比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义，否则，即使这两个类来源于同一个Class文件，被同一个Java虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相等。 这里所指的“相等”，包括代表类的Class对象的equals()方法、isAssignableFrom()方法、isInstance()方法的返回结果，也包括了使用instanceof关键字做对象所属关系判定等各种情况。 1.2 双亲委派模型站在Java虚拟机的角度来看，只存在两种不同的类加载器：一种是启动类加载器（BootstrapClassLoader），这个类加载器使用C++语言实现，是虚拟机自身的一部分；另外一种就是其他所有的类加载器，这些类加载器都由Java语言实现，独立存在于虚拟机外部，并且全都继承自抽象类 java.lang.ClassLoader。 自JDK 1.2以来，Java一直保持着三层类加载器、双亲委派的类加载架构。 对于JDK8及之前版本的Java，绝大多数程序都会使用到以下3个系统提供的类加载器来进行加载 启动类加载器（Bootstrap Class Loader）：这个类加载器负责加载存放在 &lt;JAVA_HOME&gt;\\lib目录，或者被-Xbootclasspath参数所指定的路径中存放的，而且是Java虚拟机能够识别的类库加载到虚拟机的内存中。用户在编写自定义类加载器时，如果需要把加载请求委派给引导类加载器去处理，那直接使用null代替即可。 扩展类加载器（Extension Class Loader）：这个类加载器是在类sun.misc.Launcher$ExtClassLoader中以Java代码的形式实现的。它负责加载&lt;JAVA_HOME&gt;\\lib\\ext目录中，或者被java.ext.dirs系统变量所指定的路径中所有的类库。JDK的开发团队允许用户将具有通用性的类库放置在ext目录里以扩展Java SE的功能，在JDK 9之后，这种扩展机制被模块化带来的天然的扩展能力所取代。由于扩展类加载器是由Java代码实现的，开发者可以直接在程序中使用扩展类加载器来加载Class文件。 应用程序类加载器（Application Class Loader）：这个类加载器由 sun.misc.Launcher$AppClassLoader来实现。由于应用程序类加载器是ClassLoader类中的getSystemClassLoader()方法的返回值，所以有些场合中也称它为“系统类加载器”。它负责加载用户类路径（ClassPath）上所有的类库，开发者同样可以直接在代码中使用这个类加载器。如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。 双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应有自己的父类加载器。不过这里类加载器之间的父子关系一般不是以继承（Inheritance）的关系来实现的，而是通常使用组合（Composition）关系来复用父加载器的代码。（子加载器将部分动作委派给父加载器） 双亲委派模型的工作过程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去完成加载。 好处是Java中的类随着它的类加载器一起具备了一种带有优先级的层次关系，例如类java.lang.Object都是交给启动类加载器进行加载，因此Object类在程序的各种类加载器环境中都能够保证是同一个类。 实现双亲委派模型的代码： protected synchronized Class&lt;?> loadClass(String name, boolean resolve) throws ClassNotFoundException { // 首先，检查请求的类是否已经被加载过了 Class c = findLoadedClass(name); if (c == null) { try { if (parent != null) { c = parent.loadClass(name, false); } else {//代表找到了启动类加载器 c = findBootstrapClassOrNull(name); } } catch (ClassNotFoundException e) { // 如果父类加载器抛出ClassNotFoundException // 说明父类加载器无法完成加载请求 } if (c == null) { // 在父类加载器无法加载时 // 再调用本身的findClass方法来进行类加载 c = findClass(name);//findClass实现加载过程 } } if (resolve) { resolveClass(c); } return c; } 1.3 破坏双亲委派模型为什么要破坏双亲委派模型？ 如果基础类型要调用回用户的代码。 实例： 启动类加载器加载的DriverManager在loadInitialDriver()加载com.mysql.jdbc.Driver应用程序类 JNDI服务对资源进行查找和集中管理，可以通过接口名获取所有实现类，需要调用由其他厂商实现并部署在应用程序的ClassPath下的JNDI服务提供者接口（Service Provider Interface，SPI）的代码。 JDK9的模块化实现热部署。 解决方案： 线程上下文类加载器（Thread Context ClassLoader）。这个类加载器可以通过java.lang.Thread类的setContextClassLoader()方法进行设置，如果创建线程时还未设置，它将会从父线程中继承一个，如果在应用程序的全局范围内都没有设置过的话，那这个类加载器默认就是应用程序类加载器。 使用Class.forName(String name, boolean initialize,ClassLoader loader)方法使用指定的类加载器加载类。 1.4 自定义类加载器 继承ClassLoader父类 要遵从双亲委派模型，重写findClass方法。 读取类文件的字节码 调用父类的defineClass方法来加载类 使用者调用该类加载器的loadClass方法 class MyClassLoader extends ClassLoader{ @Override protected Class&lt;?> findClass(String name) throws ClassNotFoundException { String path = \"e:\\\\mypath\\\\\" + name + \".class\"; try { ByteArrayOutputStream os = new ByteArrayOutputStream(); Files.copy(Paths.get(path),os); byte[] bytes = os.toByteArray(); return defineClass(name,bytes,0,bytes.length); }catch (IOException e){ e.printStackTrace(); throw new ClassNotFoundException(); } } } 1.5 补充 Class.getClassLoader()可以获取一个类的加载器，启动类加载器是null -Xbootclasspath/a:&lt;追加路径&gt;可以在JAVA_HOME/lib的基础上追加路径让启动类加载器加载。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"深入理解java虚拟机","slug":"深入理解java虚拟机","permalink":"https://www.codetool.top/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"Java字节码实例探究","slug":"Java字节码实例探究","date":"2020-01-23T10:22:05.000Z","updated":"2020-01-23T13:11:56.515Z","comments":true,"path":"article/Java字节码实例探究/","link":"","permalink":"https://www.codetool.top/article/Java%E5%AD%97%E8%8A%82%E7%A0%81%E5%AE%9E%E4%BE%8B%E6%8E%A2%E7%A9%B6/","excerpt":"","text":"深入理解java虚拟机第三版读书笔记06中介绍了class文件结构，这里我们动手实践，编译一个类查看一下它的字节码。 java源码： public class Main { private int i = 10; private static int j = 40000; public static String str = \"Hello World!\"; public static void main(String[] args){ System.out.println(str); } } 这个类有方法有实例变量有静态变量，在JDK8环境下编译后的字节码开头部分如下图： 我们来逐字节分析： 1 魔数、次版本号、主版本号00~03：CA FE BA BE，魔数。 04~05：00 00 Minor Version，次版本号06~07：00 34 十进制52，Major Version，主版本号，两者对应JDK8 2 常量池08~09：00 2F 十进制47，代表常量池内项的数量。 10开始为常量池中的各表： #10A：0A 十进制10，代表CONSTANT_Methodref_info类型，0B~0E：00 0A 00 1E #10，#30 #20F：09 十进制9，代表CONSTANT_Fieldref_info类型，10~13：00 09 00 1F #9，#31 #314：09 十进制9，代表CONSTANT_Fieldref_info类型，15~18：00 20 00 21 #32，#33 #419：09 十进制9，代表CONSTANT_Fieldref_info类型，1A~1D：00 09 00 22 #9，#34 #51E：0A 十进制9，代表CONSTANT_Methodref_info类型，1F~22：00 23 00 24 #35，#36 #61E：03 十进制3，代表CONSTANT_Integer_info类型，15~18：00 00 9C 40 40000 #728：09 十进制9，代表CONSTANT_Fieldref_info类型，29~2C：00 09 00 25 #9，#37 #82D：08 十进制8，代表CONSTANT_String_info类型，2E~2F：00 26 #38 #930：07 十进制7，代表CONSTANT_Class_info类型，31~32：00 27 #39 #1033：07 十进制7，代表CONSTANT_Class_info类型，34~35：00 28 #40 #1136：01 十进制1，代表CONSTANT_Utf8_info类型，37~38：00 01代表长度为1，39：69 代表字符&#39;i&#39; #123A：01 十进制1，代表CONSTANT_Utf8_info类型，3B~3C：00 01代表长度为1，3D：49 代表字符&#39;I&#39; 剩余常量池的项我们用javap得到（其实累了）： #13 = Utf8 j #14 = Utf8 str #15 = Utf8 Ljava/lang/String; #16 = Utf8 &lt;init&gt; #17 = Utf8 ()V #18 = Utf8 Code #19 = Utf8 LineNumberTable #20 = Utf8 LocalVariableTable #21 = Utf8 this #22 = Utf8 LMain; #23 = Utf8 main #24 = Utf8 ([Ljava/lang/String;)V #25 = Utf8 args #26 = Utf8 [Ljava/lang/String; #27 = Utf8 &lt;clinit&gt; #28 = Utf8 SourceFile #29 = Utf8 Main.java #30 = NameAndType #16:#17 // &quot;&lt;init&gt;&quot;:()V #31 = NameAndType #11:#12 // i:I #32 = Class #41 // java/lang/System #33 = NameAndType #42:#43 // out:Ljava/io/PrintStream; #34 = NameAndType #14:#15 // str:Ljava/lang/String; #35 = Class #44 // java/io/PrintStream #36 = NameAndType #45:#46 // println:(Ljava/lang/String;)V #37 = NameAndType #13:#12 // j:I #38 = Utf8 Hello World! #39 = Utf8 Main #40 = Utf8 java/lang/Object #41 = Utf8 java/lang/System #42 = Utf8 out #43 = Utf8 Ljava/io/PrintStream; #44 = Utf8 java/io/PrintStream #45 = Utf8 println #46 = Utf8 (Ljava/lang/String;)V3 访问标志、类索引、父类索引、接口索引集合跳过常量池，到了访问标志： 01C1~01C2：00 21，代表ACC_SUPER（0x0020）和ACC_PUBLIC（0x0001）。 接着是类索引： 01C3~01C4：00 09 代表常量池中#9，#9又指向#39，可以得知是Main，即类名 父类索引： 01C5~01C6：00 0A 代表常量池中#10，#10又指向#40，可以得知是java/lang/Object 接口索引集合： 01C7~01D8：00 00 代表接口索引集合中没有数据，长度是0 4 字段表集合01C9~01CA: 00 03 十进制3，代表字段表中有三项数据： 第一个字段： 01CB~01CC: 00 02 ，访问标志，代表ACC_PRIVATE（0x0002）01CD~01CE：00 0B ，name_index，指向常量池#11，#11代表&#39;i&#39;01CF~01D0：00 0C , discriptor_index，指向常量池#12，#12代表&#39;I&#39;（即int类型）01D1~01D2：00 00 , attributes_count，代表该字段无属性表。 第二个字段： 01D3~01D4: 00 0A ，访问标志，代表ACC_STATIC（0x0008）和ACC_PRIVATE（0x0002）01D5~01D6：00 0D ，name_index，指向常量池#13，#13代表&#39;j&#39;01D7~01D8：00 0C , discriptor_index，指向常量池#12，#12代表&#39;I&#39;（即int类型）01D9~01DA：00 00 , attributes_count，代表该字段无属性表。 第三个字段： 01DB~01DC: 00 09 ，访问标志，代表ACC_STATIC（0x0008）和ACC_PUBLIC（0x0001）01DD~01DE：00 0E ，name_index，指向常量池#14，#14代表&quot;str&quot;01DF~01E0：00 0F , discriptor_index，指向常量池#15，#15代表&quot;Ljava/lang/String;&quot;（即String类型）01E1~01E2：00 00 , attributes_count，代表该字段无属性表。 5 方法表集合01E3~01E4：00 03 ，十进制3，代表方法表中有三项数据： 第一个方法： 01E5~01E6: 00 01 ，访问标志，代表ACC_PUBLIC（0x0001）01E7~01E8：00 10 ，name_index，指向常量池#16，#16代表&quot;&lt;init&gt;&quot;（即对象构造器）01E9~01EA：00 11 , discriptor_index，指向常量池#17，#17代表&quot;()V&quot;（即无参、无返回值）01EB~01EC：00 01 , attributes_count，代表属性表中有一项数据。01ED~01EE: 00 12 ，attribute_name_index，指向常量池#18，#18代表&quot;Code&quot;（即Code属性）01EF~01F2：00 00 00 39，代表Code内容长度为57个字节。 接下来57个字节我们不查表逐一翻译，查看javap提供的内容： 01F3~022B Code: stack=2, locals=1, args_size=1 0: aload_0 1: invokespecial #1 // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V 4: aload_0 5: bipush 10 7: putfield #2 // Field i:I 10: return LineNumberTable: line 7: 0 line 8: 4 LocalVariableTable: Start Length Slot Name Signature 0 11 0 this LMain;我们来解释一下它的字节码指令： aload_0 将局部变量表slot 0加载到操作数栈，那么局部变量表slot 0原来存放的是什么呢？非静态方法局部变量表0位置一开始都是存放的this，即调用方法的当前对象。这句话就是把this入操作数栈。 invokespecial #1 this调用#1代表的方法，我们查常量表#1，#1又指向#10和#30，#10指向#40，是java/lang/Object，#30是&quot;&lt;init&gt;&quot;:()V，即调用父类Object的构造方法。 aload_0 再次加载this bipush 10 将常量10压入操作数栈。 putfield #2 putfield是设置对象的字段值，通过查常量表，#2代表Main中的i:I，这句话就把栈里的两个操作数：10设置给this.i return 返回 第二个方法： 022C~022D: 00 09 ，访问标志，代表ACC_PUBLIC（0x0001）和ACC_STATIC（0x0008）022E~022F：00 17 ，name_index，指向常量池#23，#23代表&quot;main&quot;0230~0231：00 18 , discriptor_index，指向常量池#24，#24代表&quot;([Ljava/lang/String;)V&quot;（即参数为String数组、无返回值）0232~0233：00 01 , attributes_count，代表属性表中有一项数据。0234~0235: 00 12 ，attribute_name_index，指向常量池#18，#18代表&quot;Code&quot;（即Code属性）0236~0239：00 00 00 38，代表Code内容长度为56个字节。 接下来56个字节我们不查表逐一翻译，查看javap提供的内容： 023A~0271 Code: stack=2, locals=1, args_size=1 0: getstatic #3 // Field java/lang/System.out:Ljava/io/PrintStream; 3: getstatic #4 // Field str:Ljava/lang/String; 6: invokevirtual #5 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 9: return LineNumberTable: line 12: 0 line 13: 9 LocalVariableTable: Start Length Slot Name Signature 0 10 0 args [Ljava/lang/String;我们来解释一下它的字节码指令： getstatic #3 获取一个类的静态字段，通过查常量表可知#3是java/lang/System的out:Ljava/io/PrintStream;即获取System.out getstatic #4 获取一个类的静态字段，通过查常量表可知#4是Main的str:Ljava/lang/String;即获取str字段。 invokevirtual #5 调用#5方法，通过查常量表可知#5是java/io/PrintStream的println:(Ljava/lang/String;)V，即在操作栈的基础上调用System.out.println(str) return 返回 第三个方法： 0272~0273: 00 08 ，访问标志，代表ACC_STATIC（0x0008）0274~0275：00 1B ，name_index，指向常量池#27，#27代表&quot;&lt;clinit&gt;&quot;（即类构造器）0276~0277：00 11 , discriptor_index，指向常量池#17，#17代表&quot;()V&quot;（即无参无返回值）0278~0279：00 01 , attributes_count，代表属性表中有一项数据。027A~027B: 00 12 ，attribute_name_index，指向常量池#18，#18代表&quot;Code&quot;（即Code属性）027C~027F：00 00 00 27，代表Code内容长度为39个字节。 接下来39个字节我们不查表逐一翻译，查看javap提供的内容： 0280~02A6 Code: stack=1, locals=0, args_size=0 0: ldc #6 // int 40000 2: putstatic #7 // Field j:I 5: ldc #8 // String Hello World! 7: putstatic #4 // Field str:Ljava/lang/String; 10: return LineNumberTable: line 9: 0 line 10: 5我们来解释一下它的字节码指令： ldc #6 把一个常量#6加载到操作数栈，通过查常量表可知#6是40000。 putstatic #7 设置一个类的静态字段，通过查常量表可知#7是Main的j:I，即设置j的值为40000。（注意这里与第一个方法不同的是，设置小于等于short最大值的值的时候常数放在字节码中，而大于short最大值的常量放在常量表中） ldc #8 把一个常量#8加载到操作数栈，通过查常量表可知#8是&quot;Hello World!&quot;。 putstatic #4 设置一个类的静态字段，通过查常量表可知#4是Main的str:Ljava/lang/String;，即将str的值设置为&quot;Hello World!&quot;。 return 返回 6 属性表02A7~02A8：00 01 attributes_count，代表属性表中有一项数据02A9~02AA：00 1C attribute_name_index，指向常量池#28，#28代表&quot;SourceFile&quot;（记录源文件名称）02AB~02AE: 00 00 00 02 代表属性内容长度为2个字节。02AF~02B0: 00 1D 代表属性的值，指向常量池#29，#29代表&quot;Main.java&quot; 到此，该class文件的字节码全部分析完","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"Class文件","slug":"Class文件","permalink":"https://www.codetool.top/tags/Class%E6%96%87%E4%BB%B6/"}]},{"title":"leetcode71-简化路径","slug":"leetcode71-简化路径","date":"2020-01-23T06:40:01.000Z","updated":"2020-01-23T07:10:01.470Z","comments":true,"path":"article/leetcode71-简化路径/","link":"","permalink":"https://www.codetool.top/article/leetcode71-%E7%AE%80%E5%8C%96%E8%B7%AF%E5%BE%84/","excerpt":"","text":"1 原题以 Unix 风格给出一个文件的绝对路径，你需要简化它。或者换句话说，将其转换为规范路径。 在 Unix 风格的文件系统中，一个点（.）表示当前目录本身；此外，两个点 （..） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。更多信息请参阅：Linux / Unix中的绝对路径 vs 相对路径 请注意，返回的规范路径必须始终以斜杠 / 开头，并且两个目录名之间必须只有一个斜杠 /。最后一个目录名（如果存在）不能以 / 结尾。此外，规范路径必须是表示绝对路径的最短字符串。 示例 1： 输入： “/home/“输出： “/home”解释： 注意，最后一个目录名后面没有斜杠。 示例 2： 输入： “/../“输出： “/“解释： 从根目录向上一级是不可行的，因为根是你可以到达的最高级。 示例 3： 输入： “/home//foo/“输出： “/home/foo”解释： 在规范路径中，多个连续斜杠需要用一个斜杠替换。 示例 4： 输入： “/a/./b/../../c/“输出： “/c” 示例 5： 输入： “/a/../../b/../c//.//“输出： “/c” 示例 6： 输入： “/a//b////c/d//././/..”输出： “/a/b/c” 2 解法2.1 思想使用栈的思想来解决该问题，将给定的字符串使用&quot;/&quot;分割，会得到由空字符串、&quot;.&quot;、&quot;..&quot;、目录名组成的字符串数组，然后根据它们的特点对元素进行入栈出栈等操作。 2.2 代码class Solution { public String simplifyPath(String path) { StringBuilder sb = new StringBuilder(); //因为最后要遍历栈，这里用ArrayList来模拟栈 List&lt;String> stack = new ArrayList&lt;>(); String[] dirs = path.split(\"/\"); for(String i:dirs){ //空字符串和\".\"都表示当前目录 if(i.equals(\"\") || i.equals(\".\")) continue; //\"..\"表示上一级目录，出栈一个元素 if(i.equals(\"..\")){ if(stack.size()!=0) stack.remove(stack.size()-1); } //其他目录名入栈 else stack.add(i); } if(stack.size()==0) return \"/\"; //通过\"/\"连接起来 for(String i:stack){ sb.append(\"/\"); sb.append(i); } return sb.toString(); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"栈","slug":"栈","permalink":"https://www.codetool.top/tags/%E6%A0%88/"}]},{"title":"leetcode42-接雨水","slug":"leetcode42-接雨水","date":"2020-01-22T17:09:42.000Z","updated":"2020-01-22T17:39:56.787Z","comments":true,"path":"article/leetcode42-接雨水/","link":"","permalink":"https://www.codetool.top/article/leetcode42-%E6%8E%A5%E9%9B%A8%E6%B0%B4/","excerpt":"","text":"1 原题给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。 上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 示例： 输入： [0,1,0,2,1,0,1,3,2,1,2,1]输出： 6 2 解法2.1 思想每一列能存下的雨水单位等于左右最高两列当中的较矮一列与当前高度的高度差。 如图，第五列的积雨水量，等于左边最高一列（第四列left）和右边最高一列（第八列right）的较矮一列（left）与当前列高度的高度差（2-1=1） 如果两边有一边没有比当前列高的列，则当前列不会积水。 2.2 代码我一开始是这样写的： class Solution { public int trap(int[] height) { int total = 0; int count = height.length; Integer[] left = new Integer[count]; Integer[] right = new Integer[count]; for(int i = 0;i&lt;count;i++){ for(int j = 1;j&lt;=i;j++){//更新左边所有列的right if(right[j]==null||height[i]>right[j]) right[j] = height[i]; } for(int j = i;j&lt;count-1;j++){//更新右边所有列的left if(left[j]==null||height[i]>left[j]) left[j] = height[i]; } } for(int i = 0;i&lt;count;i++){ if(left[i]==null || right[i] == null) continue; total += (Math.min(left[i],right[i])-height[i]); } return total; } } 时间复杂度达到了N2级别，那么如何优化呢？ 不必使用null来表示没有比当前列高的列，即使两列相等，高度差也是0，相当于不积水。 利用动态规划的思想，如果前一列的left比当前列高，则当前列的left也等于前一列的left。对于right也是一样的。 优化后： class Solution { public int trap(int[] height) { int total = 0; int count = height.length; if(count==0) return 0; Integer[] left = new Integer[count]; Integer[] right = new Integer[count]; left[0] = height[0]; right[count-1] = height[count-1]; for(int i = 1;i&lt;count;i++){//从左向右更新left if(height[i]>left[i-1]) left[i] = height[i]; else left[i] = left[i-1]; } for(int i = count-2;i>=0;i--){//从右向左更新right if(height[i]>right[i+1]) right[i] = height[i]; else right[i] = right[i+1]; } for(int i = 0;i&lt;count;i++){ total += (Math.min(left[i],right[i])-height[i]); } return total; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"https://www.codetool.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]},{"title":"leetcode95-不同的二叉搜索树II","slug":"leetcode95-不同的二叉搜索树II","date":"2020-01-22T15:12:01.000Z","updated":"2020-01-22T15:20:18.019Z","comments":true,"path":"article/leetcode95-不同的二叉搜索树II/","link":"","permalink":"https://www.codetool.top/article/leetcode95-%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91II/","excerpt":"","text":"1 原题给定一个整数 n，求以 1 … n 为节点组成的二叉搜索树有多少种？ 示例: 输入: 3输出:[&nbsp;&nbsp;[1,null,3,2],&nbsp;&nbsp;[3,2,null,1],&nbsp;&nbsp;[3,1,null,null,2],&nbsp;&nbsp;[2,1,3],&nbsp;&nbsp;[1,null,2,null,3]]解释:以上的输出对应以下 5 种不同结构的二叉搜索树：&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;\\ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;\\ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3 2 解法2.1 思想这道题的思想和leetcode96-不同的二叉搜索树类似，通过各种左右组合情况得到为一个list返回。 2.2 代码class Solution { public List&lt;TreeNode> generateTrees(int n) { if(n==0) return new ArrayList&lt;TreeNode>(); return nodesInRange(1,n); } public List&lt;TreeNode> nodesInRange(int start,int end){ List&lt;TreeNode> list = new ArrayList&lt;>(); if(start>end){//返回一个包含null的list使得for嵌套能正常工作 list.add(null); return list; } if(start==end){//返回一个包含本数字的list list.add(new TreeNode(start)); return list; } for(int i = start;i&lt;=end;i++){ //自由组合左子树和右子树的情况 for(TreeNode left:nodesInRange(start,i-1)){ for(TreeNode right:nodesInRange(i+1,end)){ TreeNode root = new TreeNode(i); root.left = left; root.right = right; list.add(root); } } } return list; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"搜索树","slug":"搜索树","permalink":"https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode96-不同的二叉搜索树","slug":"leetcode96-不同的二叉搜索树","date":"2020-01-22T14:15:52.000Z","updated":"2020-01-22T15:16:07.897Z","comments":true,"path":"article/leetcode96-不同的二叉搜索树/","link":"","permalink":"https://www.codetool.top/article/leetcode96-%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/","excerpt":"","text":"1 原题给定一个整数 n，求以 1 … n 为节点组成的二叉搜索树有多少种？ 示例: 输入: 3输出: 5解释: 给定 n = 3, 一共有 5 种不同结构的二叉搜索树: &nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;\\ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;\\ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3 2 解法2.1 思想对于每一个n对应的数量应该是相同的，我们从1~n中任选一个做根节点（假设是第i个），那么左右两边各有F(i-1)和F(n-i)中情况，将它们相乘就是此时第i个元素做根节点的情况。如此递归计算总数量。 2.2 代码我一开始的写法： class Solution { public int numTrees(int n) { return kindsCount(1,n); } public int kindsCount(int start,int end){ if(start >= end) return 1; int count = 0; for(int i = start;i&lt;=end;i++){ count += kindsCount(start,i-1)*kindsCount(i+1,end); } return count; } } 但是发现这样写消耗非常多时间，leetcode执行用时1700 ms。 优化的思路主要是： end和start并不关键，只要start-end（即范围内的数字数量,用n表示）相同，对应的值就相同。 假如优化上条，很多F(n)单元会被重复计算，可以使用数组做缓存。 优化后： class Solution { Integer[] cache; public int numTrees(int n) { cache = new Integer[n+1]; return kindsCount(n); } public int kindsCount(int n){ if(n &lt;= 1) return 1; if(cache[n]!=null) return cache[n]; int count = 0; for(int i = 1;i&lt;=n;i++){ count += kindsCount(i-1)*kindsCount(n-i); } cache[n] = count; return count; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"搜索树","slug":"搜索树","permalink":"https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"深入理解java虚拟机第三版读书笔记08","slug":"深入理解java虚拟机第三版读书笔记08","date":"2020-01-22T08:54:44.000Z","updated":"2020-01-22T19:37:45.581Z","comments":true,"path":"article/深入理解java虚拟机第三版读书笔记08/","link":"","permalink":"https://www.codetool.top/article/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89%E7%89%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B008/","excerpt":"","text":"以下是第七章 虚拟机类加载机制的内容 1 概述Java虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这个过程被称作虚拟机的类加载机制。在Java语言里面，类型的加载、连接和初始化过程都是在程序运行期间完成的，这种策略让Java语言进行提前编译会面临额外的困难，也会让类加载时稍微增加一些性能开销，但是却为Java应用提供了极高的扩展性和灵活性。 2 类加载的时机一个类型从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期将会经历加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading）七个阶段，其中验证、准备、解析三个部分统称为连接（Linking）。 加载、验证、准备、初始化和卸载这五个阶段的顺序是确定的，类型的加载过程必须按照这种顺序按部就班地开始，而解析阶段则不一定：它在某些情况下可以在初始化阶段之后再开始，这是为了支持Java语言的运行时绑定特性。 加载阶段并没有严格规定开始的时机，而有且只有六种情况必须立即对类进行“初始化”： 遇到new、getstatic、putstatic或invokestatic这四条字节码指令 使用java.lang.reflect包的方法对类型进行反射调用 当初始化类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。 当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会先初始化这个主类。 当使用JDK 7新加入的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果为REF_getStatic、REF_putStatic、REF_invokeStatic、REF_newInvokeSpecial四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化。 当一个接口中定义了JDK 8新加入的默认方法（被default关键字修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。 这六种操作称为主动引用，其他引用称为被动引用，不会触发初始化。 接口的初始化稍有不同：对于第三点，接口只有真正用到父接口的时候才会使父接口初始化。 3 类加载的过程3.1 加载在加载阶段，Java虚拟机需要完成以下三件事情： 通过一个类的全限定名来获取定义此类的二进制字节流。 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。 在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。 其中第一步自由度就很高，从ZIP压缩包中读取、从网络中获取、运行时计算生成等等。 加载阶段既可以使用Java虚拟机里内置的引导类加载器来完成，也可以由用户自定义的类加载器去完成，开发人员通过定义自己的类加载器去控制字节流的获取方式（重写一个类加载器的findClass()或loadClass()方法），实现根据自己的想法来赋予应用程序获取运行代码的动态性。 数组类本身不通过类加载器创建，它是由Java虚拟机直接在内存中动态构造出来的。但数组类与类加载器仍然有很密切的关系，因为数组类的元素类型（指的是数组去掉所有维度的类型）最终还是要靠类加载器来完成加载，一个数组类（下面简称为C）创建过程遵循以下规则： 如果数组的组件类型（指的是数组去掉一个维度的类型）是引用类型，那就递归采用本节中定义的加载过程去加载这个组件类型，数组C将被标识在加载该组件类型的类加载器的类名称空间上。 如果数组的组件类型不是引用类型（例如int[]数组的组件类型为int），Java虚拟机将会把数组C标记为与引导类加载器关联。 数组类的可访问性与它的组件类型的可访问性一致，如果组件类型不是引用类型，它的数组类的可访问性将默认为public，可被所有的类和接口访问到。 加载阶段与连接阶段的部分动作（如一部分字节码文件格式验证动作）是交叉进行的，但加载阶段提前开始于连接阶段。 3.2 验证这一阶段的目的是确保Class文件的字节流中包含的信息符合《Java虚拟机规范》的全部约束要求，保证这些信息被当作代码运行后不会危害虚拟机自身的安全。 尽管Java代码编译时会拒绝编译一些致命错误，但字节码可以被轻易修改，字节码检查也是必不可少的。 3.2.1 文件格式验证 是否以魔数0xCAFEBABE开头。 主、次版本号是否在当前Java虚拟机接受范围之内。 常量池的常量中是否有不被支持的常量类型（检查常量tag标志）。 指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量。 CONSTANT_Utf8_info型的常量中是否有不符合UTF-8编码的数据。 Class文件中各个部分及文件本身是否有被删除的或附加的其他信息。 …… 该验证阶段的主要目的是保证输入的字节流能正确地解析并存储于方法区之内，格式上符合描述一个Java类型信息的要求。这阶段的验证是基于二进制字节流进行的，只有通过了这个阶段的验证之后，这段字节流才被允许进入Java虚拟机内存的方法区中进行存储。 3.2.2 元数据验证 这个类是否有父类（除了java.lang.Object之外，所有的类都应当有父类）。 这个类的父类是否继承了不允许被继承的类（被final修饰的类）。 如果这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法。 类中的字段、方法是否与父类产生矛盾（例如覆盖了父类的final字段，或者出现不符合规则的方法重载，例如方法参数都一致，但返回值类型却不同等）。 …… 第二阶段的主要目的是对类的元数据信息进行语义校验，保证不存在与《Java语言规范》定义相悖的元数据信息。 3.2.3 字节码验证 保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，例如不会出现类似于“在操作栈放置了一个int类型的数据，使用时却按long类型来加载入本地变量表中”这样的情况。 保证任何跳转指令都不会跳转到方法体以外的字节码指令上。 保证方法体中的类型转换总是有效的，例如可以把一个子类对象赋值给父类数据类型，这是安全的，但是把父类对象赋值给子类数据类型，甚至把对象赋值给与它毫无继承关系、完全不相干的一个数据类型，则是危险和不合法的。 目的是通过数据流分析和控制流分析，确定程序语义是合法的、符合逻辑的，不会危害虚拟机安全。 3.2.4 符号引用验证最后一个阶段的校验行为发生在虚拟机将符号引用转化为直接引用的时候，这个转化动作在解析阶段中发生。符号引用验证可以看作是对类自身以外（常量池中的各种符号引用）的各类信息进行匹配性校验，通俗来说就是，该类是否缺少或者被禁止访问它依赖的某些外部类、方法、字段等资源。 符号引用中通过字符串描述的全限定名是否能找到对应的类。 在指定类中是否存在符合方法的字段描述符及简单名称所描述的方法和字段。 符号引用中的类、字段、方法的可访问性（private、protected、public、&lt;package&gt;）是否可被当前类访问。 …… 符号引用验证的主要目的是确保解析行为能正常执行，如果无法通过符号引用验证，Java虚拟机将会抛出一个java.lang.IncompatibleClassChangeError的子类异常，典型的如：java.lang.IllegalAccessError、java.lang.NoSuchFieldError、java.lang.NoSuchMethodError等。 验证阶段不是必需的，如果程序运行使用的所有字节码都是安全的，可以考虑使用-Xverify：none参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。 3.3 准备准备阶段是正式为类中定义的变量（即静态变量，被static修饰的变量）分配内存并设置类变量初始值的阶段。（初始值指的是零值，类初始化阶段中调用类构造器方法才会对类变量赋值） 特殊情况：如果字段存在ConstantValue属性（声明为final，会在字段表的属性表中增加一项ConstantValue属性），那在准备阶段变量值就会被初始化为ConstantValue属性所指定的初始值。 3.4 解析解析阶段是Java虚拟机将常量池内的符号引用替换为直接引用的过程。 直接引用是可以直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局直接相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经在虚拟机的内存中存在。 而符号引用只是能无歧义定位到目标的一套自定符号表述。 解析阶段发生的具体时间并未强制规定，只要求了在执行ane-warray、checkcast、getfield、getstatic、instanceof、invokedynamic、invokeinterface、invoke-special、invokestatic、invokevirtual、ldc、ldc_w、ldc2_w、multianewarray、new、putfield和putstatic这17个用于操作符号引用的字节码指令之前，先对它们所使用的符号引用进行解析。 对同一个符号引用可以进行多次解析请求，虚拟机也可以缓存解析的结果，但对于invokedynamic指令不能缓存，执行到该条指令时才能解析，它对应的引用称为“动态调用点限定符”。 invokedynamic本是为了支持如JRuby、 Scala等动态语言，JDK8后Lambda表达式和接口的默认方法的底层也会用到invokedynamic。 3.4.1 类或接口的解析将符号代表的类的全限定名交给当前类的类加载器来加载，如果是数组类型，则是加载它的数组元素类型，再由虚拟机生成对应的数组类型。 之后，验证当前类是否具有对该类的访问权限，若没有抛出异常java.lang.IllegalAccessError 3.4.2 字段解析要解析一个未被解析过的字段符号引用，会先找到字段表中对应的所属类并解析。 如果该类本身就包含了简单名称和字段描述符都与目标相匹配的字段，则返回这个字段的直接引用，查找结束。 否则，如果该类实现了接口，将会按照继承关系从下往上递归搜索各个接口和它的父接口，如果接口中包含了简单名称和字段描述符都与目标相匹配的字段，则返回这个字段的直接引用，查找结束。 否则。如果该类不是java.lang.Object的话，将会按照继承关系从下往上递归搜索其父类，如果在父类中包含了简单名称和字段描述符都与目标相匹配的字段，则返回这个字段的直接引用，查找结束。 否则，查找失败，抛出java.lang.NoSuchFieldError异常。 如果查找过程成功返回了引用，将会对这个字段进行权限验证，如果发现不具备对字段的访问权限，将抛出java.lang.IllegalAccessError异常。 如果一个字段具有多义性（如果不严格按照顺序可能多种方式都能找到），javac可能会拒绝编译。 3.4.3 方法解析方法解析也会先找到方法表中对应的所属类并解析。 类的方法和接口的方法符号引用的常量类型定义是分开的，如果发现该类是个接口的话，那就直接抛出java.lang.IncompatibleClassChangeError 异常。 如果通过了第一步，在该类中查找是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方法的直接引用，查找结束。 否则，在该类的父类中递归查找是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方法的直接引用，查找结束。 否则，在该类实现的接口列表及它们的父接口之中递归查找是否有简单名称和描述符都与目标相匹配的方法，如果存在匹配的方法，说明该类是一个抽象类，这时候查找结束，抛出 java.lang.AbstractMethodError异常。 否则，宣告方法查找失败，抛出java.lang.NoSuchMethodError。 最后，如果查找过程成功返回了直接引用，将会对这个方法进行权限验证，如果发现不具备对此方法的访问权限，将抛出java.lang.IllegalAccessError异常。 3.4.4 接口方法解析接口方法解析也会先找到方法表中对应的所属类并解析。 与类的方法解析相反，如果发现该类是个类而不是接口，那么就直接抛出java.lang.IncompatibleClassChangeError异常。 否则，在该接口中查找是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方法的直接引用，查找结束。 否则，在该接口的父接口中递归查找，直到java.lang.Object类（接口方法的查找范围也会包括Object类中的方法）为止，看是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方法的直接引用，查找结束。 如果多重继承多个父接口都有该方法，可能会返回其中一个方法的直接引用，在编译期间javac也可能拒绝编译。 否则，宣告方法查找失败，抛出java.lang.NoSuchMethodError异常。 JDK9模块化之后也可能抛出java.lang.IllegalAccessError异常。 3.5 初始化初始化阶段就是执行类构造器&lt;clinit&gt;()方法的过程。&lt;clinit&gt;()并不是程序员在Java代码中直接编写的方法，它是Javac编译器的自动生成物。 &lt;clinit&gt;()方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static{}块）中的语句合并产生的，顺序为出现的顺序。 Java虚拟机会保证在子类的&lt;clinit&gt;()方法执行前，父类的&lt;clinit&gt;()方法已经执行完毕。因此在Java虚拟机中第一个被执行的&lt;clinit&gt;()方法的类型肯定是java.lang.Object。 这个方法不是必需的，如果一个类中没有静态语句块，也没有对变量的赋值操作，那么编译器可以不为这个类生成&lt;clinit&gt;()方法。 在多线程环境下，如果多个线程同时去初始化一个类，那么只会有其中一个线程去执行这个类的&lt;clinit&gt;()方法，其他线程都需要阻塞等待。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"深入理解java虚拟机","slug":"深入理解java虚拟机","permalink":"https://www.codetool.top/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"leetcode779-第K个语法符号","slug":"leetcode779-第K个语法符号","date":"2020-01-21T18:06:24.000Z","updated":"2020-01-21T18:11:32.523Z","comments":true,"path":"article/leetcode779-第K个语法符号/","link":"","permalink":"https://www.codetool.top/article/leetcode779-%E7%AC%ACK%E4%B8%AA%E8%AF%AD%E6%B3%95%E7%AC%A6%E5%8F%B7/","excerpt":"","text":"1 原题在第一行我们写上一个 0。接下来的每一行，将前一行中的0替换为01，1替换为10。 给定行数 N 和序数 K，返回第 N 行中第 K个字符。（K从1开始） 例子： 输入: N = 1, K = 1输出: 0 输入: N = 2, K = 1输出: 0 输入: N = 2, K = 2输出: 1 输入: N = 4, K = 5输出: 1 解释:第一行: 0第二行: 01第三行: 0110第四行: 01101001 注意: N 的范围 [1, 30]. K 的范围 [1, 2^(N-1)]. 2 解法2.1 思想递归分析要查找的字符是上一行的哪个数字得到的，然后根据奇偶性得到目标字符 2.2 代码class Solution { public int kthGrammar(int N, int K) { if(N==0) return 0; if(K%2 == 1){ if(kthGrammar(N-1,(K+1)/2)==0) return 0; else return 1; }else{ if(kthGrammar(N-1,(K+1)/2)==0) return 1; else return 0; } } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode70-爬楼梯","slug":"leetcode70-爬楼梯","date":"2020-01-21T05:58:10.000Z","updated":"2020-01-21T06:11:07.542Z","comments":true,"path":"article/leetcode70-爬楼梯/","link":"","permalink":"https://www.codetool.top/article/leetcode70-%E7%88%AC%E6%A5%BC%E6%A2%AF/","excerpt":"","text":"1 原题假设你正在爬楼梯。需要 n 阶你才能到达楼顶。 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？ 注意： 给定 n 是一个正整数。 示例 1： 输入： 2输出： 2解释： 有两种方法可以爬到楼顶。1. 1 阶 + 1 阶2. 2 阶 示例 2： 输入： 3输出： 2解释： 有三种方法可以爬到楼顶。1. 1 阶 + 1 阶 + 1 阶2. 1 阶 + 2 阶3. 2 阶 + 1 阶 2 解法2.1 思想实际上是斐波那契数问题： 假设现在要走三阶楼梯，那么第一次走一阶楼梯时，还有f(2)种可能性，第一次走两阶楼梯时，还有f(1)种可能性，则f(3)=f(2)+f(1)，以此类推。 2.2 代码class Solution { Map&lt;Integer,Integer> map = new HashMap&lt;>(); public int climbStairs(int n) { if(n == 1) return 1; if(n == 2) return 2; if(map.containsKey(n)){ return map.get(n); } int ans = climbStairs(n-1)+climbStairs(n-2); map.put(n,ans); return ans; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode509-斐波那契数","slug":"leetcode509-斐波那契数","date":"2020-01-20T18:39:37.000Z","updated":"2020-01-21T06:11:11.023Z","comments":true,"path":"article/leetcode509-斐波那契数/","link":"","permalink":"https://www.codetool.top/article/leetcode509-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0/","excerpt":"","text":"1 原题斐波那契数，通常用 F(n) 表示，形成的序列称为斐波那契数列。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是： F(0) = 0, F(1) = 1F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1. 给定 N，计算 F(N)。 示例 1： 输入： 2输出： 1解释： F(2) = F(1) + F(0) = 1 + 0 = 1. 示例 2： 输入： 3输出： 2解释： F(3) = F(2) + F(1) = 1 + 1 = 2. 示例 3： 输入： 4输出： 3解释： F(4) = F(3) + F(2) = 2 + 1 = 3. 提示： 0 ≤ N ≤ 30 2 解法2.1 思想递归，由于很多递归单元会被重复计算，需要做缓存。 2.2 代码class Solution { Integer[] cache = new Integer[30]; public int fib(int N) { if(N == 0) return 0; if(N == 1) return 1; if(cache[N-1]!=null){ return cache[N-1]; } int ans = fib(N-1)+fib(N-2); cache[N-1] = ans; return ans; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"深入理解java虚拟机第三版读书笔记07","slug":"深入理解java虚拟机第三版读书笔记07","date":"2020-01-20T17:41:55.000Z","updated":"2020-01-23T10:17:17.175Z","comments":true,"path":"article/深入理解java虚拟机第三版读书笔记07/","link":"","permalink":"https://www.codetool.top/article/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89%E7%89%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B007/","excerpt":"","text":"附： Java虚拟机规范-Java虚拟机指令集：JDK8 Java虚拟机规范-Java虚拟机指令集：JDK13 续深入理解java虚拟机第三版读书笔记06 1 字节码指令简介Java虚拟机的指令由一个字节长度的、代表着某种特定操作含义的数字（称为操作码，Opcode）以及跟随其后的零至多个代表此操作所需的参数（称为操作数，Operand）构成。 1.1 字节码数据类型字节码指令集中存在大量与数据类型相关的字节码指令，它们的操作码助记符中都有特殊的字符来表明专门为哪种数据类型服务：i代表对int类型的数据操作，l代表long，s代表short，b代表byte，c代表char，f代表float，d代表double，a代表reference。 因为操作码一字节的限制，并非每种数据类型和每一种操作都有对应的指令，有一些单独的指令可以在必要的时候用来将一些不支持的类型转换为可被支持的类型。 下表列举了Java虚拟机所支持的与数据类型相关的字节码指令，通过使用数据类型列所代表的特殊字符替换opcode列的指令模板中的T，就可以得到一个具体的字节码指令。如果在表中指令模板与数据类型两列共同确定的格为空，则说明虚拟机不支持对这种数据类型执行这项操作： opcode byte short int long float double char reference Tipush bipush sipush Tconst iconst lconst fconst dconst aconst Tload iload lload fload dload aload Tstore istore lstore fstore dstore astore Taload baload saload iaload laload faload daload caload aaload Tastore bastore sastore iastore lastore fastore dastore castore aastore Tadd iadd ladd fadd dadd Tsub isub lsub fsub dsub Tmul imul lmul fmul dmul Tdiv idiv ldiv fdiv ddiv Tneg ineg lneg fneg dneg Tshl ishl lshl Tshr ishr lshr Tushr iushr lushr Tand iand land Tor ior lor Txor ixor lxor i2T i2b i2s i2l i2f i2d 12T 12i 12f 12d f2T f2i f2l f2d d2T d2i d2l d2f Tcmp lcmp Tcmpl fcmpl dcmpl Tcmpg fcmpg dcmpg if_TempOP if_icmpOP if_acmpOP Treturn ireturn lreturn fretun dretun areturn 大部分指令都没有支持整数类型byte、char和short，甚至没有任何指令支持boolean类型。编译器会在编译期或运行期将byte和short类型的数据带符号扩展（Sign-Extend）为相应的int类型数据，将boolean和char类型数据零位扩展（Zero-Extend）为相应的int类型数据。与之类似，在处理boolean、byte、short和char类型的数组时，也会转换为使用对应的int类型的字节码指令来处理。 1.2 加载和存储指令加载和存储指令用于将数据在栈帧中的局部变量表和操作数栈之间来回传输，这类指令包括： 将一个局部变量加载到操作数栈：iload、iload_&lt;n&gt;、lload、lload_&lt;n&gt;、fload、fload_&lt;n&gt;、dload、 dload_&lt;n&gt;、aload、aload_&lt;n&gt; 将一个数值从操作数栈存储到局部变量表：istore、istore_&lt;n&gt;、lstore、lstore_&lt;n&gt;、fstore、 fstore_&lt;n&gt;、dstore、dstore_&lt;n&gt;、astore、astore_&lt;n&gt; 将一个常量加载到操作数栈：bipush、sipush、ldc、ldc_w、ldc2_w、aconst_null、iconst_m1、 iconst_&lt;i&gt;、lconst_&lt;l&gt;、fconst_&lt;f&gt;、dconst_&lt;d&gt; 扩充局部变量表的访问索引的指令：wide 存储数据的操作数栈和局部变量表主要由加载和存储指令进行操作，除此之外，还有少量指令，如访问对象的字段或数组元素的指令也会向操作数栈传输数据。 上面所列举的指令助记符中，有一部分是以尖括号结尾的（例如iload_），这些指令助记符实际上代表了一组指令（例如iload_，它代表了iload_0、iload_1、iload_2和iload_3这几条指令）。这几组指令都是某个带有一个操作数的通用指令（例如iload）的特殊形式，对于这几组特殊指令，它们省略掉了显式的操作数，不需要进行取操作数的动作，因为实际上操作数就隐含在指令中。除了这点不同以外，它们的语义与原生的通用指令是完全一致的（例如iload_0的语义与操作数为0时的iload指令语义完全一致）。 1.3 运算指令算术指令用于对两个操作数栈上的值进行某种特定运算，并把结果重新存入到操作栈顶。 大体上运算指令可以分为两种：对整型数据进行运算的指令与对浮点型数据进行运算的指令。整数与浮点数的算术指令在溢出和被零除的时候也有各自不同的行为表现。 加法指令：iadd、ladd、fadd、dadd 减法指令：isub、lsub、fsub、dsub 乘法指令：imul、lmul、fmul、dmul 除法指令：idiv、ldiv、fdiv、ddiv 求余指令：irem、lrem、frem、drem 取反指令：ineg、lneg、fneg、dneg 位移指令：ishl、ishr、iushr、lshl、lshr、lushr 按位或指令：ior、lor 按位与指令：iand、land 按位异或指令：ixor、lxor 局部变量自增指令：iinc 比较指令：dcmpg、dcmpl、fcmpg、fcmpl、lcmp 非精确的结果必须舍入为可被表示的最接近的精确值；如果有两种可表示的形式与该值一样接近，那将优先选择最低有效位为零的，称为向最接近数舍入模式。而在把浮点数转换为整数时，使用向零舍入模式，这种模式的舍入结果会导致数字被截断，所有小数部分的有效字节都会被丢弃掉。向零舍入模式将在目标数值类型中选择一个最接近，但是不大于原值的数字来作为最精确的舍入结果。 在对long类型数值进行比较时，Java虚拟机采用带符号的比较方式，而对浮点数值进行比较时（dcmpg、dcmpl、fcmpg、fcmpl），虚拟机会采用IEEE 754规范所定义的无信号比较（Nonsignaling Comparison）方式进行。 iinc直接在局部变量槽slot上运算。 1.4 类型转换指令类型转换指令可以将两种不同的数值类型相互转换，这些转换操作一般用于实现用户代码中的显式类型转换操作，或者用来处理字节码指令集中数据类型相关指令无法与数据类型一一对应的问题。 Java虚拟机直接支持（即转换时无须显式的转换指令）以下数值类型的宽化类型转换（WideningNumeric Conversion，即小范围类型向大范围类型的安全转换）： int类型到long、float或者double类型 long类型到float、double类型 float类型到double类型 与之相对的，处理窄化类型转换（Narrowing Numeric Conversion）时，就必须显式地使用转换指令来完成，这些转换指令包括i2b、i2c、i2s、l2i、f2i、f2l、d2i、d2l和d2f。窄化类型转换可能会导致转换结果产生不同的正负号、不同的数量级的情况，转换过程很可能会导致数值的精度丢失。 1.5 对象创建与访问指令虽然类实例和数组都是对象，但Java虚拟机对类实例和数组的创建与操作使用了不同的字节码指令。对象创建后，就可以通过对象访问指令获取对象实例或者数组实例中的字段或者数组元素，这些指令包括： 创建类实例的指令：new 创建数组的指令：newarray、anewarray、multianewarray 访问类字段（static字段，或者称为类变量）和实例字段（非static字段，或者称为实例变量）的指令：getfield、putfield、getstatic、putstatic 把一个数组元素加载到操作数栈的指令：baload、caload、saload、iaload、laload、faload、 daload、aaload 将一个操作数栈的值储存到数组元素中的指令：bastore、castore、sastore、iastore、fastore、 dastore、aastore 取数组长度的指令：arraylength 检查类实例类型的指令：instanceof、checkcast 1.6 操作数栈管理指令Java虚拟机提供了一些用于直接操作操作数栈的指令，包括： 将操作数栈的栈顶一个或两个元素出栈：pop、pop2 复制栈顶一个或两个数值并将复制值或双份的复制值重新压入栈顶：dup、dup2、dup_x1、 dup2_x1、dup_x2、dup2_x2 将栈最顶端的两个数值互换：swap 1.7 控制转移指令控制转移指令可以让Java虚拟机有条件或无条件地从指定位置指令（而不是控制转移指令）的下一条指令继续执行程序，从概念模型上理解，可以认为控制指令就是在有条件或无条件地修改PC寄存器的值。控制转移指令包括：·条件分支：ifeq、iflt、ifle、ifne、ifgt、ifge、ifnull、ifnonnull、if_icmpeq、if_icmpne、if_icmplt、 if_icmpgt、if_icmple、if_icmpge、if_acmpeq和if_acmpne·复合条件分支：tableswitch、lookupswitch·无条件分支：goto、goto_w、jsr、jsr_w、ret 1.8 方法调用和返回指令 invokevirtual指令：用于调用对象的实例方法，根据对象的实际类型进行分派（虚方法分派），这也是Java语言中最常见的方法分派方式。 invokeinterface指令：用于调用接口方法，它会在运行时搜索一个实现了这个接口方法的对象，找出适合的方法进行调用。 invokespecial指令：用于调用一些需要特殊处理的实例方法，包括实例初始化方法、私有方法和父类方法。 invokestatic指令：用于调用类静态方法（static方法）。 invokedynamic指令：用于在运行时动态解析出调用点限定符所引用的方法。并执行该方法。前面四条调用指令的分派逻辑都固化在Java虚拟机内部，用户无法改变，而invokedynamic指令的分派逻辑是由用户所设定的引导方法决定的。 方法调用指令与数据类型无关，而方法返回指令是根据返回值的类型区分的，包括ireturn（当返回值是boolean、byte、char、short和int类型时使用）、lreturn、freturn、dreturn和areturn，另外还有一条return指令供声明为void的方法、实例初始化方法、类和接口的类初始化方法使用。 1.9 异常处理指令在Java程序中显式抛出异常的操作（throw语句）都由athrow指令来实现，除了用throw语句显式抛出异常的情况之外，《Java虚拟机规范》还规定了许多运行时异常会在其他Java虚拟机指令检测到异常状况时自动抛出。例如前面介绍整数运算中，当除数为零时，虚拟机会在idiv或ldiv指令中抛出ArithmeticException异常。 而在Java虚拟机中，处理异常（catch语句）不是由字节码指令来实现的（很久之前曾经使用jsr和ret指令来实现，现在已经不用了），而是采用异常表来完成。 1.10 同步指令Java虚拟机可以支持方法级的同步和方法内部一段指令序列的同步，这两种同步结构都是使用管程（Monitor，更常见的是直接将它称为“锁”）来实现的。 方法级的同步是隐式的，无须通过字节码指令来控制，它实现在方法调用和返回操作之中。虚拟机可以从方法常量池中的方法表结构中的ACC_SYNCHRONIZED访问标志得知一个方法是否被声明为同步方法。当方法调用时，调用指令将会检查方法的ACC_SYNCHRONIZED访问标志是否被设置，如果设置了，执行线程就要求先成功持有管程，然后才能执行方法，最后当方法完成（无论是正常完成还是非正常完成）时释放管程。在方法执行期间，执行线程持有了管程，其他任何线程都无法再获取到同一个管程。如果一个同步方法执行期间抛出了异常，并且在方法内部无法处理此异常，那这个同步方法所持有的管程将在异常抛到同步方法边界之外时自动释放。 同步一段指令集序列通常是由Java语言中的synchronized语句块来表示的，Java虚拟机的指令集中有monitorenter和monitorexit两条指令来支持synchronized关键字的语义。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"深入理解java虚拟机","slug":"深入理解java虚拟机","permalink":"https://www.codetool.top/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"leetcode24-两两交换链表中的节点","slug":"leetcode24-两两交换链表中的节点","date":"2020-01-20T12:55:44.000Z","updated":"2020-01-20T13:00:14.489Z","comments":true,"path":"article/leetcode24-两两交换链表中的节点/","link":"","permalink":"https://www.codetool.top/article/leetcode24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/","excerpt":"","text":"1 原题给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。 你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。 示例: 给定 1-&gt;2-&gt;3-&gt;4, 你应该返回 2-&gt;1-&gt;4-&gt;3.2 解法2.1 思想递归，自底向上 终止点： head为null，返回null head的next为null，代表此时是倒数第一个元素（链表节点是奇数个），直接返回head 否则，直接交换当前节点和下一个节点，下一个节点的next使用swapPairs()计算 2.2 代码class Solution { public ListNode swapPairs(ListNode head) { if(head==null) return null; if(head.next == null) return head; ListNode next = head.next; head.next = swapPairs(next.next); next.next = head; return next; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"},{"name":"链表","slug":"链表","permalink":"https://www.codetool.top/tags/%E9%93%BE%E8%A1%A8/"}]},{"title":"leetcode559-N叉树的最大深度","slug":"leetcode559-N叉树的最大深度","date":"2020-01-20T12:39:39.000Z","updated":"2020-01-20T12:42:58.684Z","comments":true,"path":"article/leetcode559-N叉树的最大深度/","link":"","permalink":"https://www.codetool.top/article/leetcode559-N%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/","excerpt":"","text":"1 原题给定一个 N 叉树，找到其最大深度。 最大深度是指从根节点到最远叶子节点的最长路径上的节点总数。 例如，给定一个 3叉树 : 我们应返回其最大深度，3。 说明: 树的深度不会超过 1000。 树的节点总不会超过 5000。 2 解法2.1 思想 自底向上，每个节点是所有孩子节点的深度的最大值+1 自顶向下，依次更新最大高度 2.2 代码自底向上： class Solution { public int maxDepth(Node root) { return depth(root,0); } public int depth(Node root,int depth){ if(root == null) return depth; int max = 0; for(Node node:root.children){ int level = depth(node,depth+1); if(level>max) max = level; } return max+1; } } 自顶向下： class Solution { int depth = 0; public int maxDepth(Node root) { depth(root,1); return depth; } public void depth(Node root,int cur){ if(root == null) return; if(cur>depth) depth = cur; for(Node node:root.children) depth(node,cur+1); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"},{"name":"树","slug":"树","permalink":"https://www.codetool.top/tags/%E6%A0%91/"}]},{"title":"leetcode429-N叉树的层序遍历","slug":"leetcode429-N叉树的层序遍历","date":"2020-01-19T18:36:06.000Z","updated":"2020-01-19T18:43:26.060Z","comments":true,"path":"article/leetcode429-N叉树的层序遍历/","link":"","permalink":"https://www.codetool.top/article/leetcode429-N%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/","excerpt":"","text":"1 原题给定一个 N 叉树，返回其节点值的层序遍历。 (即从左到右，逐层遍历)。 例如，给定一个 3叉树 : 返回其层序遍历: [ [1], [3,2,4], [5,6] ]说明: 树的深度不会超过 1000。 树的节点总数不会超过 5000。 2 解法2.1 思想类似leetcode102-二叉树的层次遍历，通过DFS或BFS实现。 2.2 代码迭代（BFS）： class Solution { public List&lt;List&lt;Integer>> levelOrder(Node root) { Queue&lt;Node> queue = new LinkedList&lt;>(); List&lt;List&lt;Integer>> ans = new ArrayList&lt;>(); List&lt;Integer> cur = new ArrayList&lt;>(); if(root == null) return new ArrayList&lt;List&lt;Integer>>(); queue.offer(root); queue.offer(null);//以null作为每层结束的标志符 while(!queue.isEmpty()){ Node node = queue.poll(); if(node == null){ if(cur.size()!=0) ans.add(cur); cur = new ArrayList&lt;>(); }else{ cur.add(node.val); for(Node child:node.children){ if(child!=null) queue.offer(child); } //若队首为null说明这一层的节点的子节点已经全部加入队列了，需要加入一个null if(queue.peek()==null) queue.offer(null); } } return ans; } } 递归（DFS）： class Solution { List&lt;List&lt;Integer>> ans = new ArrayList&lt;>(); public List&lt;List&lt;Integer>> levelOrder(Node root) { if(root==null) return ans; DFS(root,0); return ans; } public void DFS(Node root,int level){ if(ans.size()==level) ans.add(new ArrayList&lt;Integer>()); ans.get(level).add(root.val); for(Node node:root.children){ if(node!=null) DFS(node,level+1); } } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"},{"name":"树","slug":"树","permalink":"https://www.codetool.top/tags/%E6%A0%91/"}]},{"title":"leetcode590-N叉树的后序遍历","slug":"leetcode590-N叉树的后序遍历","date":"2020-01-19T18:23:52.000Z","updated":"2020-01-19T18:25:30.736Z","comments":true,"path":"article/leetcode590-N叉树的后序遍历/","link":"","permalink":"https://www.codetool.top/article/leetcode590-N%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/","excerpt":"","text":"1 原题给定一个 N 叉树，返回其节点值的后序遍历。 例如，给定一个 3叉树 : 返回其前序遍历: [5,6,3,2,4,1]. 说明: 递归法很简单，你可以使用迭代法完成此题吗? 2 解法2.1 思想类似二叉树的后序遍历，递归回溯时将根节点加入集合中。 2.2 代码class Solution { List&lt;Integer> list; public List&lt;Integer> postorder(Node root) { list = new ArrayList&lt;>(); recursion(root); return list; } public void recursion(Node root){ if(root == null) return; for(Node node:root.children){ recursion(node); } list.add(root.val); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"},{"name":"树","slug":"树","permalink":"https://www.codetool.top/tags/%E6%A0%91/"}]},{"title":"leetcode589-N叉树的前序遍历","slug":"leetcode589-N叉树的前序遍历","date":"2020-01-18T18:52:50.000Z","updated":"2020-01-18T18:59:06.364Z","comments":true,"path":"article/leetcode589-N叉树的前序遍历/","link":"","permalink":"https://www.codetool.top/article/leetcode589-N%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/","excerpt":"","text":"1 原题给定一个 N 叉树，返回其节点值的前序遍历。 例如，给定一个 3叉树 : 返回其前序遍历: [1,3,5,6,2,4]。 说明: 递归法很简单，你可以使用迭代法完成此题吗? 2 解法2.1 思想类似二叉树的前序遍历，递归将根节点加入集合中。 2.2 代码class Solution { List&lt;Integer> list; public List&lt;Integer> preorder(Node root) { list = new ArrayList&lt;>(); recursion(root); return list; } public void recursion(Node root){ if(root == null) return; list.add(root.val); for(Node node:root.children){ recursion(node); } } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"},{"name":"树","slug":"树","permalink":"https://www.codetool.top/tags/%E6%A0%91/"}]},{"title":"深入理解java虚拟机第三版读书笔记06","slug":"深入理解java虚拟机第三版读书笔记06","date":"2020-01-18T14:12:50.000Z","updated":"2020-01-23T10:17:24.346Z","comments":true,"path":"article/深入理解java虚拟机第三版读书笔记06/","link":"","permalink":"https://www.codetool.top/article/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89%E7%89%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B006/","excerpt":"","text":"附： Java虚拟机规范-Class文件格式：JDK8 Java虚拟机规范-Class文件格式：JDK13 以下是第六章 类文件结构的内容 1 Class类文件的结构Class文件是一组以8个字节为基础单位的二进制流，各个数据项都是紧凑排列的，如果有需要占用8个字节以上的数据项时，会按照高位在前的方式分割成多个8字节进行存储。 Class文件格式采用一种类似于C语言结构体的伪结构来存储数据，这种伪结构中只有两种数据类型——“无符号数”和“表”： 无符号数：基本的数据类型，以u1、u2、u4、u8来分别代表1个字节、2个字节、4个字节和8个字节的无符号数，无符号数可以用来描述数字、索引引用、数量值或者按照UTF-8编码构成字符串值。 表：由多个无符号数或者其他表作为数据项构成的复合数据类型，为了便于区分，所有表的命名都习惯性地以“_info”结尾。 Class文件由以下这些数据项组成： 类型 名称 数量 u4 magic 1 u2 minor_version 1 u2 major_version 1 u2 constant_pool_count 1 cp_info constant_pool constant_pool_count-1 u2 access_flags 1 u2 this_class 1 u2 super_class 1 u2 interfaces_count 1 u2 interfaces interfaces_count u2 fields_count 1 field_info fields fields_count u2 methods_count 1 method_info methods methods_count u2 attributes_count 1 attribute_info attributes attributes_count 1.1 魔数与Class文件的版本每个Class文件的头4个字节被称为魔数（Magic Number），它的唯一作用是确定这个文件是否为一个能被虚拟机接受的Class文件。很多文件格式标准都会用魔数来确认文件格式，使用魔数而不是扩展名来进行识别主要是基于安全考虑，因为文件扩展名可以随意改动。Class文件的魔数值为0xCAFEBABE（咖啡宝贝）。 紧接着魔数的4个字节存储的是Class文件的版本号：第5和第6个字节是次版本号（Minor Version），第7和第8个字节是主版本号（Major Version）。Java的主版本号是从45开始的，JDK 1.1之后的每个JDK大版本发布主版本号向上加1（JDK 1.0～1.1使用了45.0～45.3的版本号），高版本的JDK能向下兼容以前版本的Class文件，但不能运行以后版本的Class文件。 Java1：45Java4：48Java5：49Java8：52以此类推 关于次版本号，曾经在Java 2出现前被短暂使用过，从JDK 1.2以后，直到JDK 12之前次版本号均未使用，全部固定为零。而到了JDK 12时期，由于JDK提供的功能集已经非常庞大，有一些复杂的新特性需要以“公测”的形式放出，所以设计者重新启用了副版本号，将它用于标识“技术预览版”功能特性的支持。如果Class文件中使用了该版本JDK尚未列入正式特性清单中的预览功能，则必须把次版本号标识为65535，以便Java虚拟机在加载类文件时能够区分出来。 JDK版本 -target参数 -source参数 版本号 JDK 1.1.8 不支持target参数 不支持source参数 45.3 JDK 1.2.2 不带（默认为-target 1.1） 1.1~1.2 45.3 JDK 1.2.2 -target 1.2 1.1~1.2 46.0 JDK 1.3.1_19 不带（默认为-target 1.1) 1.1~1.3 45.3 JDK 1.3.1_19 -target 1.3 1.1~1.3 47.0 JDK 1.4.2_10 不带（默认为-target 1.2） 1.1~1.4 46.0 JDK 1.4.2_10 -target 1.4 1.1~1.4 48.0 JDK 5.0_11 不带（默认为-target 1.5），后续版本不带target参数默认编译的Class文件均与其JDK版本相同 11～15 49.0 JDK 5.0_11 -target 1.4 -source 1.4 1.1~1.5 48.0 JDK 6 不带（默认为-target 6） 1.1~6 50.0 JDK 7 不带（默认为-target 7） 1.1～7 51.0 JDK 8 不带（默认为-target 8) 1.1~8 52.0 JDK 9 不带（默认为-target 9） 6～9 53.0 JDK 10 不带（默认为-target 10） 6~10 54.0 JDK 11 不带（默认为-target 11） 6~11 55.0 JDK 12 不带（默认为-target 12） 6~12 56.0 JDK 13 不带（默认为-target 13） 6~13 57.0 1.2 常量池8~9字节是一项u2类型的数据，代表常量池容量计数值（常量池有多少项），这个容量计数是从1而不是0开始的。 常量池中主要存放两大类常量：字面量（Literal）和符号引用（Symbolic References）。字面量比较接近于Java语言层面的常量概念，如文本字符串、被声明为final的常量值等。而符号引用则属于编译原理方面的概念，主要包括下面几类常量： 被模块导出或者开放的包（Package） 类和接口的全限定名（Fully Qualified Name） 字段的名称和描述符（Descriptor） 方法的名称和描述符 方法句柄和方法类型（Method Handle、Method Type、Invoke Dynamic） 动态调用点和动态常量（Dynamically-Computed Call Site、Dynamically-Computed Constant） 最初常量表中共有11种结构各不相同的表结构数据，后来为了更好地支持动态语言调用，额外增加了4种动态语言相关的常量，为了支持Java模块化系统（Jigsaw），又加入了CONSTANT_Module_info和CONSTANT_Package_info两个常量，所以截至JDK13，常量表中分别有17种不同类型的常量。 这17类表都有一个共同的特点，表结构起始的第一位是个u1类型的标志位（tag，取值见下表标志列），代表着当前常量属于哪种常量类型。17种常量类型所代表的具体含义如表所示。 类型 标志 描述 CONSTANT_Utf8_info 1 UTF-8编码的字符串 CONSTANT_Integer_info 3 整型字面量 CONSTANT_Float_info 4 浮点型字面量 CONSTANT_Long_info 5 长整型字面量 CONSTANT_Double_info 6 双精度浮点型字面量 CONSTANT_Class_info 7 类或接口的符号引用 CONSTANT_String_info 8 字符串类型字面量 CONSTANT_Fieldref_info 9 字段的符号引用 CONSTANT_Methodref_info 10 类中方法的符号引用 CONSTANT_InterfaceMethodref_info 11 接口中方法的符号引用 CONSTANT_NameAndType_info 12 字段或方法的部分符号引用 CONSTANT_MethodHandle_info 15 表示方法句柄 CONSTANT_MethodType_info 16 表示方法类型 CONSTANT_Dynamic_info 17 表示一个动态计算常量 CONSTANT_InvokeDynamic_info 18 表示一个动态方法调用点 CONSTANT_Module_info 19 表示一个模块 CONSTANT_Package_info 20 表示一个模块中开放或者导出的包。 常量池中的17种数据类型的结构总表： 常量 项目 类型 描述 CONSTANT_Utf8_info tag u1 值为1 length&nbsp; u2 UTF-8编码的字符串占用的字节数 bytes&nbsp; u1 长度为length的UTF-8编码的字符串 CONSTANT_Integer_info tag u1 值为3 bytes&nbsp; u4 按照高位在前存储的int值 CONSTANT_Float_info tag u1 值为4 bytes&nbsp; u4 按照高位在前存储的float值 CONSTANT_Long_info tag u1 值为5 bytes&nbsp; u8 按照高位在前存储的long值 CONSTANT_Double_info tag u1 值为6 bytes&nbsp; u8 按照高位在前存储的double值 CONSTANT_Class_info tag u1 值为7 index u2 指向全限定名常量项的索引 CONSTANT_String_info tag u1 值为8 index u2 指向字符串字面量的索引 CONSTANT_Fieldref_info tag u1 值为9 index u2 指向声明字段的类或者接口描述符CONSTANT_Class_info的索引项 index u2 指向字段描述符CONSTANT_NameAndType的索引项 CONSTANT_Methodref_info tag u1 值为10 index u2 指向声明方法的类描述符CONSTANT_Class_info的索引项 index u2 指向名称及类型描述符CONSTANT_NameAndType的索引项 CONSTANT_InterfaceMethodref_info tag u1 值为11 index u2 指向声明方法的接口描述符CONSTANT_Class_info的索引项 index u2 指向名称及类型描述符CONSTANT_NameAndType的索引项 CONSTANT_NameAndType_info tag u1 值为12 index u2 指向该字段或方法名称常量项的索引 index u2 指向该字段或方法描述符常量项的索引 CONSTANT_MethodHandle_info tag u1 值为15 reference_kind u1 值必须在1至9之间（包括1和9），它决定了方法句柄的类型。方法句柄类型的值表示方法句柄的字节码行为 reference_index u2 值必须是对常量池的有效索引 CONSTANT_MethodType_info tag u1 值为16 descriptor_index u2 值必须是对常量池的有效索引，常量池在该索引处的项必须是CONSTANT_Utf8_info结构，表示方法的描述符 CONSTANT_Dynamic_info tag u1 值为17 bootstrap_method_attr_ index u2 值必须是对当前Class文件中引导方法表的bootstrap_methods[]数组的有效索引 name_and_type_index u2 值必须是对当前常量池的有效索引，常量池在该索引处的项必须是CONSTANT_NameAndType_info结构，表示方法名和方法描述符。 CONSTANT_InvokeDynamic_info tag u1 值为18 bootstrap_method_attr_ index u2 值必须是对当前Class文件中引导方法表的bootstrap_methods[]数组的有效索引 name_and_type_index u2 值必须是对当前常量池的有效索引，常量池在该索引处的项必须是CONSTANT_NameAndType_info结构，表示方法名和方法描述符。 CONSTANT_Module_info tag u1 值为19 name_index u2 值必须是对常量池的有效索引，常量池在该索引处的项必须是CONSTANT_Utf8_info结构，表示模块名字 CONSTANT_Package_info tag u1 值为20 name_index u2 值必须是对常量池的有效索引，常量池在该索引处的项必须是CONSTANT_Utf8_info结构，表示包名称 1.3 访问标志在常量池结束之后，紧接着的2个字节代表访问标志（access_flags），这个标志用于识别一些类或者接口层次的访问信息 标志名称 标志值 含义 ACC_PUBLIC 0x0001 是否为public类型 ACC_FINAL 0x0010 是否被声明为final，只有类可设置 ACC_SUPER 0x0020 是否允许使用invokespecial字节码指令的新语义，invokespecial指令的语义在JDK1.0.2发生过改变，为了区别这条指令使用哪种语义，JDK1.0.2之后编译出来的类的这个标志都必须为真 ACC_INTERFACE 0X0200 标识这是一个接口 ACC_ABSTRACT 0X0400 是否为abstract类型，对于接口或者抽象类来说，此标志值为真，其他类型值为假 ACC_SYNTHETIC 0x1000 标识这个类并非由用户代码产生的 ACC_ANNOTATION 0X2000 标识这是一个注解 ACC_ENUM 0x4000 标识这是一个枚举 ACC_MODULE 0x8000 标识这是一个模块 access_flags中一共有16个标志位可以使用，当前只定义了其中9个，没有使用到的标志位要求一律为零。 1.4 类索引、父类索引与接口索引集合跟在访问标志后面的，分别是类索引、父类索引和接口索引集合。类索引（this_class）和父类索引（super_class）都是一个u2类型的数据，而接口索引集合（interfaces）是一组u2类型的数据的集合，Class文件中由这三项数据来确定该类型的继承关系。类索引用于确定这个类的全限定名，父类索引用于确定这个类的父类的全限定名。除了java.lang.Object外，所有Java类的父类索引都不为0。接口索引集合就用来描述这个类实现了哪些接口，这些被实现的接口将按implements关键字后的接口顺序从左到右排列在接口索引集合中。 类索引和父类索引用两个u2类型的索引值表示，它们各自指向一个类型为CONSTANT_Class_info的类描述符常量，通过CONSTANT_Class_info类型的常量中的索引值可以找到定义在CONSTANT_Utf8_info类型的常量中的全限定名字符串。 接口索引集合的入口的第一项u2类型的数据为接口计数器（interfaces_count），表示索引表的容量。 1.5 字段表集合字段表（field_info）用于描述接口或者类中声明的变量，包括类级变量以及实例级变量。 字段表结构: 类型 名称 数量 u2 access_flags 1 u2 name_index 1 u2 discriptor_index 1 u2 attributes_count 1 attribute_info attributes attributes_count 其中access_flags代表字段修饰符，含义如下 标志名称 标志值 含义 ACC_PUBLIC 0x0001 字段是否public ACC_PRIVATE 0x0002 字段是否private ACC_PROTECTED 0x0004 字段是否protected ACC_STATIC 0x0008 字段是否static ACC_FINAL 0x0010 字段是否final ACC_VOLATILE 0x0040 字段是否volatile ACC_TRANSIENT 0x0080 字段是否transient ACC_SYNTHETIC 0x1000 字段是否由编译器自动产生 ACC_ENUM 0x4000 字段是否enum 跟随access_flags标志的是两项索引值：name_index和descriptor_index。它们都是对常量池项的引用，分别代表着字段的简单名称以及字段和方法的描述符。 概念解析： 全限定名：”org/fenixsoft/clazz/TestClass”，把类全名中的”.”替换成了”/“，最后一般会加入一个“;”号表示全限定名结束 简单名称：没有类型和参数修饰的方法或者字段名称 描述符：描述字段的数据类型、方法的参数列表和返回值，基本数据类型以及代表无返回值的void类型都用一个大写字符来表示，而对象类型则用字符L加对象的全限定名来表示： 标识字符 含义 B 基本类型byte C 基本类型char D 基本类型double F 基本类型float I 基本类型int J 基本类型long S 基本类型short Z 基本类型boolean V 特殊类型void L 对象类型，如Ljava/lang/Object; 对于数组类型，每一维度将使用一个前置的”[“字符来描述，如一个定义为”java.lang.String[][]”类型的二维数组将被记录成”[[Ljava/lang/String;“ 用描述符来描述方法时，按照先参数列表、后返回值的顺序描述，参数列表按照参数的严格顺序放在一组小括号“()”之内。如方法void inc()的描述符为“()V”，方法java.lang.String toString()的描述符为“()Ljava/lang/String;”。 字段表集合中不会列出从父类或者父接口中继承而来的字段，但有可能出现原本Java代码之中不存在的字段，譬如在内部类中为了保持对外部类的访问性，编译器就会自动添加指向外部类实例的字段。 1.6 方法表集合Class文件中方法表的结构同字段表完全一致： 类型 名称 数量 u2 access_flags 1 u2 name_index 1 u2 discriptor_index 1 u2 attributes_count 1 attribute_info attributes attributes_count 访问标志的内容有所区别： 标志名称 标志值 含义 ACC_PUBLIC 0x0001 字段是否public ACC_PRIVATE 0x0002 字段是否private ACC_PROTECTED 0x0004 字段是否protected ACC_STATIC 0x0008 字段是否static ACC_FINAL 0x0010 字段是否final ACC_SYNCHRONIZED 0x0020 方法是否为synchronized ACC_BRIDGE 0x0040 方法是不是由编译器产生的桥接方法 ACC_VARARGS 0x0080 方法是否接受不定参数 ACC_NATIVE 0x0100 方法是否为native ACC_ABSTRACT 0x0400 方法是否为abstract ACC_STRICT 0X0800 方法是否为strictfp ACC_SYNTHETIC 0x1000 方法是否由编译器自动产生 方法里的Java代码，经过Javac编译器编译成字节码指令之后，存放在方法属性表集合中一个名为“Code”的属性里面 1.7 属性表集合Class文件、字段表、方法表都可以携带自己的属性表集合，以描述某些场景专有的信息。 属性表不再要求各个属性表具有严格顺序，甚至只要不与已有属性名重复，任何人实现的编译器都可以向属性表中写入自己定义的属性信息。 为了能正确解析Class文件，《Java虚拟机规范》最初只预定义了9项所有Java虚拟机实现都应当能识别的属性，而在最新的《Java虚拟机规范》的Java SE 12版本中，预定义属性已经增加到29项： 属性名称 使用位置 含义 Code 方法表 Java代码编译成的字节码指令 Constant Value 字段表 由final关键字定义的常量值 Deprecated 类、方法表、字段表 被声明为deprecated的方法和字段 Exceptions 方法表 方法抛出的异常列表 EnclosingMethod 类文件 仅当一个类为局部类或者匿名类时才能拥有这个属性，这个属性用于标示这个类所在的外围方法 InnerClasses 类文件 内部类列表 LineNumberTable Code属性 Java源码的行号与字节码指令的对应关系 LocalVariableTable Code属性 方法的局部变量描述 StackMapTable Code属性 JDK 6中新增的属性，供新的类型检查验证器（Type Checker)检查和处理目标方法的局部变量和操作数栈所需要的类型是否匹配 Signature 类、方法表、字段表 JDK 5中新增的属性，用于支持范型情况下的方法签名。在Java语言中，任何类、接口、初始化方法或成员的泛型签名如果包含了类型变量（TypeVariables)或参数化类型（Parameterized Types)，则Signature属性会为它记录泛型签名信息。由于Java的范型采用擦除法实现，为了避免类型信息被擦除后导致签名混乱，需要这个属性记录范型中的相关信息 SourceFile 类文件 记录源文件名称 SourceDebugExtension 类文件 JDK 5中新增的属性，用于存储额外的调试信息。譬如在进行JSP文件调试时，无法通过Java堆栈来定位到JSP文件的行号，JSR45提案为这些非Java语言编写，却需要编译成字节码并运行在Java虚拟机中的程序提供了一个进行调试的标准机制，使用该属性就可以用于存储这个标准所新加入的调试信息 Synthetic 类、方法表、字段表 标识方法或字段为编译器自动生成的 LocalVariableTypeTable 类 JDK 5中新增的属性，它使用特征签名代替描述符，是为了引入泛型语法之后能描述泛型参数化类型而添加 RuntimeVisibleAnnotations 类、方法表、字段表 JDK 5中新增的属性，为动态注解提供支持。该属性用于指明哪些注解是运行时（实际上运行时就是进行反射调用）可见的 RuntimeInvisibleAnnotations 类、方法表、字段表 JDK 5中新增的属性，与RuntimeVisibleAnnotations属性作用刚好相反，用于指明哪些注解是运行时不可见的 RuntimeVisibleParameterAnnotations 方法表 JDK 5中新增的属性，作用与RuntimeVisibleAnnotations属性类似，只不过作用对象为方法参数 RuntimeInvisibleParameterAnnotations 方法表 JDK 5中新增的属性，作用与RuntimeInvisibleAnnotations属性类似，只不过作用对象为方法参数 AnnotationDefault 方法表 JDK 5中新增的属性，用于记录注解类元素的默认值 BootstrapMethods 类文件 JDK 7中新增的属性，用于保存invokedynamic指令引用的引导方法限定符 RuntimeVisibleTypeAnnotations 类、方法表、字段表，Code属性 JDK 8中新增的属性，为实现JSR 308中新增的类型注解提供的支持，用于指明哪些类注解是运行时（实际上运行时就是进行反射调用）可见的 RuntimeInvisibleTypeAnnotations 类、方法表、字段表，Code属性 JDK 8中新增的属性，为实现JSR 308中新增的类型注解提供的支持，与RuntimeVisibleTypeAnnotations属性作用刚好相反，用于指明哪些注解是运行时不可见的 MethodParameters 方法表 JDK 8中新增的属性，用于支持（编译时加上-parameters参数)将方法名称编译进Class文件中，并可运行时获取。此前要获取方法名称（典型的如IDE的代码提示）只能通过JavaDoc中得到 Module 类 JDK 9中新增的属性，用于记录一个Module的名称以及相关信息（requires、exports、opens、uses、provides) ModulePackages 类 JDK 9中新增的属性，用于记录一个模块中所有被exports或者opens的包 ModuleMainClass 类 JDK 9中新增的属性，用于指定一个模块的主类 NestHost 类 JDK 11中新增的属性，用于支持嵌套类（Java中的内部类)的反射和访问控制的API，一个内部类通过该属性得知自己的宿主类 NestMembers 类 JDK 11中新增的属性，用于支持嵌套类（Java中的内部类)的反射和访问控制的API，一个宿主类通过该属性得知自己有哪些内部类 对于每一个属性，它的名称都要从常量池中引用一个CONSTANT_Utf8_info类型的常量来表示，而属性值的结构则是完全自定义的，只需要通过一个u4的长度属性去说明属性值所占用的位数即可。一个符合规则的属性表应该满足下表所定义的结构： 类型 名称 数量 u2 attribute_name_index 1 u4 attribute_length 1 u1 info attribute_length 1.7.1 Code属性Java程序方法体里面的代码经过Javac编译器处理之后，最终变为字节码指令存储在Code属性内。结构如下表： 类型 名称 数量 u2 attribute_name_index 1 u4 attribute_length 1 u2 max_stack 1 u2 max_ locals 1 u4 code_length 1 u1 code code_length u2 exception_table_length 1 exception_info exception_table exception_table_length u2 attributes_count 1 attribute_info attributes attributes_count attribute_name_index指向固定常量“Code”，它代表了该属性的属性名称 attribute_length指示了属性值的总长度，不包括attribute_name_index和attribute_length的长度。 max_stack代表了操作数栈深度的最大值。虚拟机运行的时候需要根据这个值来分配栈帧中的操作栈深度。 max_locals代表了局部变量表所需的存储空间。单位是变量槽（Slot），对于byte、char、float、int、short、boolean和returnAddress等长度不超过32位的数据类型，每个局部变量占用一个变量槽，而double和long这两种64位的数据类型则需要两个变量槽来存放。 code_length和code用来存储Java源程序编译后生成的字节码指令。code_length代表字节码长度，code是用于存储字节码指令的一系列字节流。 关于code_length，虽然它是一个u4类型的长度值，理论上最大值可以达到2的32次幂，但是《Java虚拟机规范》中明确限制了一个方法不允许超过65535条字节码指令，即它实际只使用了u2的长度，如果超过这个限制，Javac编译器就会拒绝编译。 code中每个指令就是一个u1类型的单字节。每读取一个字节便可知道指令是什么、后面是否跟着参数。 通过javap可以查看字节码指令 如果存在异常表，它的格式如下表所示 类型 名称 数量 u2 start_pc 1 u2 end_pc 1 u2 handler_pc 1 u2 catch_type 1 如果当字节码从第start_pc行到第end_pc行之间（不含第end_pc行）出现了类型为catch_type或者其子类的异常（catch_type为指向一个CONSTANT_Class_info型常量的索引），则转到第handler_pc行继续处理。当catch_type的值为0时，代表任意异常情况都需要转到handler_pc处进行处理。 尽管字节码中有最初为处理异常而设计的跳转指令，但《Java 虚拟机规范》中明确要求Java语言的编译器应当选择使用异常表而不是通过跳转指令来实现Java异常及finally处理机制。 1.7.2 LineNumberTable属性LineNumberTable属性用于描述Java源码行号与字节码行号（字节码的偏移量）之间的对应关系。它并不是运行时必需的属性，但默认会生成到Class文件之中，可以在Javac中使用-g：none或-g：lines选项来取消或要求生成这项信息。如果选择不生成LineNumberTable属性，对程序运行产生的最主要影响就是当抛出异常时，堆栈中将不会显示出错的行号，并且在调试程序的时候，也无法按照源码行来设置断点。 类型 名称 数量 u2 attribute_name_index 1 u4 attribute_length 1 u2 line_number_table_length 1 line_number_info line_number_table line_number_table_length line_number_table是一个数量为line_number_table_length、类型为line_number_info的集合，line_number_info表包含start_pc和line_number两个u2类型的数据项，前者是字节码行号，后者是Java源码行号。 1.7.3 LocalVariableTable及LocalVariableTypeTable属性LocalVariableTable属性用于描述栈帧中局部变量表的变量与Java源码中定义的变量之间的关系，它也不是运行时必需的属性，但默认会生成到Class文件之中，可以在Javac中使用-g：none或-g：vars选项来取消或要求生成这项信息。如果没有生成这项属性，最大的影响就是当其他人引用这个方法时，所有的参数名称都将会丢失，譬如IDE将会使用诸如arg0、arg1之类的占位符代替原有的参数名，这对程序运行没有影响，但是会对代码编写带来较大不便，而且在调试期间无法根据参数名称从上下文中获得参数值。 类型 名称 数量 u2 attribute_name_index 1 u4 attribute_length 1 u2 local variable table length 1 local_ variable_info local_variable_table local_variable_table_length 其中local_variable_info项目代表了一个栈帧与源码中的局部变量的关联: 类型 名称 数量 u2 start_pe 1 u2 length 1 u2 name index 1 u2 descriptor_index 1 u2 index 1 start_pc和length属性分别代表了这个局部变量的生命周期开始的字节码偏移量及其作用范围覆盖的长度，两者结合起来就是这个局部变量在字节码之中的作用域范围。 name_index和descriptor_index都是指向常量池中CONSTANT_Utf8_info型常量的索引，分别代表了局部变量的名称以及这个局部变量的描述符。 index是这个局部变量在栈帧的局部变量表中变量槽的位置。当这个变量数据类型是64位类型时（double和long），它占用的变量槽为index和index+1两个。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"深入理解java虚拟机","slug":"深入理解java虚拟机","permalink":"https://www.codetool.top/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"leetcode108-将有序数组转换为二叉搜索树","slug":"leetcode108-将有序数组转换为二叉搜索树","date":"2020-01-17T16:59:42.000Z","updated":"2020-01-17T17:16:15.594Z","comments":true,"path":"article/leetcode108-将有序数组转换为二叉搜索树/","link":"","permalink":"https://www.codetool.top/article/leetcode108-%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/","excerpt":"","text":"1 原题将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。 本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。 示例: 给定有序数组: [-10,-3,0,5,9], 一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树： 0 / \\ -3 9 / / -10 52 解法2.1 思想类似于二分查找，每次递归使用数组的中间元素作为根节点。就能最大化利用左右节点空间，使之平衡。 2.2 代码class Solution { public TreeNode sortedArrayToBST(int[] nums) { return sortedArrayToBST(nums, 0, nums.length); } private TreeNode sortedArrayToBST(int[] nums, int start, int end) { if (start == end) { return null; } int mid = (start + end) >>> 1; TreeNode root = new TreeNode(nums[mid]); root.left = sortedArrayToBST(nums, start, mid); root.right = sortedArrayToBST(nums, mid + 1, end); return root; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"},{"name":"树","slug":"树","permalink":"https://www.codetool.top/tags/%E6%A0%91/"}]},{"title":"leetcode110-平衡二叉树","slug":"leetcode110-平衡二叉树","date":"2020-01-17T15:30:21.000Z","updated":"2020-01-17T15:52:10.825Z","comments":true,"path":"article/leetcode110-平衡二叉树/","link":"","permalink":"https://www.codetool.top/article/leetcode110-%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/","excerpt":"","text":"1 原题给定一个二叉树，判断它是否是高度平衡的二叉树。 本题中，一棵高度平衡二叉树定义为： 一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。 示例 1:给定二叉树 [3,9,20,null,null,15,7] 3 / \\ 9 20 / \\ 15 7返回 true 。 示例 2: 给定二叉树 [1,2,2,3,3,null,null,4,4] 1 / \\ 2 2 / \\ 3 3 / \\ 4 4返回 false 。 2 解法2.1 思想自顶向下：每个节点获取左右两棵子树的高度，并比较高度差是否大于1，获取高度通过递归实现。 自底向上：回溯时比较左右节点的高度，如果有任意节点左右子树高度差大于1，则说明不是平衡树。 2.2 代码自顶向下： class Solution { public boolean isBalanced(TreeNode root) { if(root == null) return true; if(Math.abs(Height(root.left)-Height(root.right))>1) return false; return isBalanced(root.left)&amp;&amp;isBalanced(root.right); } public int Height(TreeNode root){ if(root == null) return 0; int left = Height(root.left); int right = Height(root.right); if(left>=right) return left+1; else return right+1; } } 自底向上： public class BalancedBinaryTree { boolean res = true; public boolean isBalanced(TreeNode root) { helper(root); return res; } private int helper(TreeNode root) { if (root == null) return 0; int left = helper(root.left) + 1; int right = helper(root.right) + 1; if (Math.abs(right - left) > 1) res = false; return Math.max(left, right); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"},{"name":"树","slug":"树","permalink":"https://www.codetool.top/tags/%E6%A0%91/"}]},{"title":"leetcode235-二叉搜索树的最近公共祖先","slug":"leetcode235-二叉搜索树的最近公共祖先","date":"2020-01-17T13:03:36.000Z","updated":"2020-01-17T13:33:56.013Z","comments":true,"path":"article/leetcode235-二叉搜索树的最近公共祖先/","link":"","permalink":"https://www.codetool.top/article/leetcode235-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/","excerpt":"","text":"1 原题给定一个二叉二叉树, 找到该树中两个指定节点的最近公共祖先。 百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。” 例如，给定如下二叉搜索树: root = [6,2,8,0,4,7,9,null,null,3,5] 示例1： 输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8输出: 6解释: 节点 2 和节点 8 的最近公共祖先是 6。 示例2： 输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4输出: 2解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。 说明: 所有节点的值都是唯一的。 p、q 为不同节点且均存在于给定的二叉搜索树中。 2 解法2.1 思想利用二叉搜索树的性质，两个节点p、q可以有两种分布情况： 分别位于公共祖先的左、右子树。 其中一个节点就是公共祖先，另一个节点位于子树上。 如此递归查找。 2.2 代码class Solution { public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) { if(root.val>p.val &amp;&amp; root.val>q.val) return lowestCommonAncestor(root.left, p, q); if(root.val&lt;p.val &amp;&amp; root.val&lt;q.val) return lowestCommonAncestor(root.right,p,q); return root; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"},{"name":"树","slug":"树","permalink":"https://www.codetool.top/tags/%E6%A0%91/"}]},{"title":"leetcode450-删除二叉搜索树中的节点","slug":"leetcode450-删除二叉搜索树中的节点","date":"2020-01-16T11:35:34.000Z","updated":"2020-01-16T12:23:07.811Z","comments":true,"path":"article/leetcode450-删除二叉搜索树中的节点/","link":"","permalink":"https://www.codetool.top/article/leetcode450-%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/","excerpt":"","text":"1 原题给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。 一般来说，删除节点可分为两个步骤： 首先找到需要删除的节点； 如果找到了，删除它。 说明： 要求算法时间复杂度为 O(h)，h 为树的高度。 示例: root = [5,3,6,2,4,null,7]key = 3 &nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;6&nbsp;/&nbsp;\\ &nbsp;&nbsp;&nbsp;\\2&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;7 给定需要删除的节点值是 3，所以我们首先找到 3 这个节点，然后删除它。 一个正确的答案是 [5,4,6,2,null,null,7], 如下图所示。 &nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;6&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7 另一个正确答案是 [5,2,6,null,4,null,7]。 &nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;\\ &nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;7 2 解法2.1 思想删除一个节点，可以有三种情况： 它没有子节点，那么直接删除。 它拥有一个子节点，那么直接用子节点替换它 它有两个子节点，则可以： 将它的右子节点附在左子节点的最右边： 或，将它的左子节点附在右子节点的最左边： 实际就是让搜索树线性化，这样操作会让搜索树的高度逐渐失衡，所以并不推荐作为一个数据结构这样实现。 更好的删除方法可以参考官方题解： https://leetcode-cn.com/problems/delete-node-in-a-bst/solution/shan-chu-er-cha-sou-suo-shu-zhong-de-jie-dian-by-l/ 2.2 代码class Solution { public TreeNode deleteNode(TreeNode root, int key) { if(root == null) return null; if(root.val == key) {//根节点就是要删除的节点 if(root.left==null &amp;&amp; root.right==null) return null; else if(root.left!=null){ TreeNode node = root.left; while(node.right!=null){ node = node.right; } node.right = root.right; return root.left; }else return root.right; } if(root.left!=null&amp;&amp;root.left.val==key){//左子节点是要删除的节点 if(root.left.left==null &amp;&amp; root.left.right==null) root.left = null; else if(root.left.left!=null){ TreeNode node = root.left.left; while(node.right!=null){ node = node.right; } node.right = root.left.right; root.left = root.left.left; }else root.left = root.left.right; }else if(root.right!=null&amp;&amp;root.right.val==key){//右子节点是要删除的节点 if(root.right.left==null &amp;&amp; root.right.right==null) root.right = null; else if(root.right.right!=null){ TreeNode node = root.right.right; while(node.left!=null){ node = node.left; } node.left = root.right.left; root.left = root.right.right; }else root.right = root.right.left; }else { deleteNode(root.left,key); deleteNode(root.right,key); } return root; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"搜索树","slug":"搜索树","permalink":"https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode701-二叉搜索树中的插入操作","slug":"leetcode701-二叉搜索树中的插入操作","date":"2020-01-16T09:52:36.000Z","updated":"2020-01-16T10:15:50.606Z","comments":true,"path":"article/leetcode701-二叉搜索树中的插入操作/","link":"","permalink":"https://www.codetool.top/article/leetcode701-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C/","excerpt":"","text":"1 原题给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 保证原始二叉搜索树中不存在新值。 注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回任意有效的结果。 例如, 给定二叉搜索树: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;3 和 插入的值: 5 你可以返回这个二叉搜索树: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;\\ &nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;3&nbsp;5 或者这个树也是有效的: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4 2 解法2.1 思想与搜索操作类似，对于每个节点，我们将： 根据节点值与目标节点值的关系，搜索左子树或右子树； 重复步骤 1 直到到达外部节点； 根据节点的值与目标节点的值的关系，将新节点添加为其左侧或右侧的子节点。 如此递归。 2.2 代码class Solution { public TreeNode insertIntoBST(TreeNode root, int val) { if(val&lt;root.val){ if(root.left==null) root.left = new TreeNode(val); else insertIntoBST(root.left,val); } if(val>root.val){ if(root.right==null) root.right = new TreeNode(val); else insertIntoBST(root.right,val); } return root; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"搜索树","slug":"搜索树","permalink":"https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode700-二叉搜索树中的搜索","slug":"leetcode700-二叉搜索树中的搜索","date":"2020-01-16T05:45:31.000Z","updated":"2020-01-16T09:56:49.231Z","comments":true,"path":"article/leetcode700-二叉搜索树中的搜索/","link":"","permalink":"https://www.codetool.top/article/leetcode700-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%90%9C%E7%B4%A2/","excerpt":"","text":"1 原题给定二叉搜索树（BST）的根节点和一个值。 你需要在BST中找到节点值等于给定值的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 NULL。 例如， 给定二叉搜索树: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;3 和值: 2 你应该返回如下子树: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;3 在上述示例中，如果要找的值是 5，但因为没有节点值为 5，我们应该返回 NULL。 2 解法2.1 思想根据BST的特性，对于每个节点： 如果目标值等于节点的值，则返回节点; 如果目标值小于节点的值，则继续在左子树中搜索; 如果目标值大于节点的值，则继续在右子树中搜索。 如此递归搜索。 2.2 代码class Solution { public TreeNode searchBST(TreeNode root, int val) { if(root==null)return null; if(root.val == val) return root; else if(root.val &lt; val) return searchBST(root.right,val); else return searchBST(root.left,val); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"搜索树","slug":"搜索树","permalink":"https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode173-二叉搜索树迭代器","slug":"leetcode173-二叉搜索树迭代器","date":"2020-01-15T17:05:07.000Z","updated":"2020-01-15T17:09:07.963Z","comments":true,"path":"article/leetcode173-二叉搜索树迭代器/","link":"","permalink":"https://www.codetool.top/article/leetcode173-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BF%AD%E4%BB%A3%E5%99%A8/","excerpt":"","text":"1 原题实现一个二叉搜索树迭代器。你将使用二叉搜索树的根节点初始化迭代器。 调用 next() 将返回二叉搜索树中的下一个最小的数。 示例： BSTIterator iterator = new BSTIterator(root);iterator.next(); // 返回 3iterator.next(); // 返回 7iterator.hasNext(); // 返回 trueiterator.next(); // 返回 9iterator.hasNext(); // 返回 trueiterator.next(); // 返回 15iterator.hasNext(); // 返回 trueiterator.next(); // 返回 20iterator.hasNext(); // 返回 false 提示： next() 和 hasNext() 操作的时间复杂度是 O(1)，并使用 O(h) 内存，其中 h 是树的高度。 你可以假设 next() 调用总是有效的，也就是说，当调用 next() 时，BST 中至少存在一个下一个最小的数。 2 解法2.1 思想理解二叉搜索树的数据结构，像二叉树的中序遍历那样构造一个list。 2.2 代码class BSTIterator { List&lt;TreeNode> list; int cur; public BSTIterator(TreeNode root) { list = new ArrayList&lt;>(); cur = -1; buildList(root); } public void buildList(TreeNode root){ if(root == null) return; buildList(root.left); list.add(root); buildList(root.right); } /** @return the next smallest number */ public int next() { cur++; return list.get(cur).val; } /** @return whether we have a next smallest number */ public boolean hasNext() { if(cur&lt;list.size()-1) return true; return false; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"搜索树","slug":"搜索树","permalink":"https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"JDK8u20字符串去重","slug":"JDK8u20字符串去重","date":"2020-01-15T11:54:37.000Z","updated":"2020-01-15T12:54:11.995Z","comments":true,"path":"article/JDK8u20字符串去重/","link":"","permalink":"https://www.codetool.top/article/JDK8u20%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%BB%E9%87%8D/","excerpt":"","text":"优点：节省大量内存 缺点：略微多占用cpu时间，新生代回收时间略微增加 -XX:+UseStringDeduplication String s1 = new String(\"hello\");//char[] {'h','e','l','l','o'} String s2 = new String(\"hello\");//char[] {'h','e','l','l','o'} 将所有新分配的字符串放入一个队列 当新生代回收时，G1并发检查是否有字符串重复 如果它们值一样，让它们引用同一个char[] 注意，与String.intern()不一样 String.intern()关注的是字符串对象 而字符串去重关注的是char[] 在JVM内部，使用了不同的字符串表","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"优化","slug":"优化","permalink":"https://www.codetool.top/tags/%E4%BC%98%E5%8C%96/"}]},{"title":"leetcode98-验证二叉搜索树","slug":"leetcode98-验证二叉搜索树","date":"2020-01-15T08:20:17.000Z","updated":"2020-01-15T09:11:16.498Z","comments":true,"path":"article/leetcode98-验证二叉搜索树/","link":"","permalink":"https://www.codetool.top/article/leetcode98-%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/","excerpt":"","text":"1 原题给定一个二叉树，判断其是否是一个有效的二叉搜索树。 假设一个二叉搜索树具有如下特征： 节点的左子树只包含小于当前节点的数。 节点的右子树只包含大于当前节点的数。 所有左子树和右子树自身必须也是二叉搜索树。 示例 1: 输入:&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;3输出: true 示例 2: 输入:&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;6输出: false解释: 输入为: [5,1,4,null,null,3,6]。 根节点的值为 5 ，但是其右子节点值为 4 。 2 解法2.1 思想递归，要考虑整个左子树的最大值小于根节点，整个右子树的最小值大于根节点。通过传参来获取这些信息。 2.2 代码class Solution { public boolean isValidBST(TreeNode root) { return recursion(root, null, null); } private boolean recursion(TreeNode root, Integer up, Integer low) { if (root == null) { return true; } if (up != null &amp;&amp; root.val >= up) { return false; } if (low != null &amp;&amp; root.val &lt;= low) { return false; } return recursion(root.left, root.val, low) &amp;&amp; recursion(root.right, up, root.val); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"搜索树","slug":"搜索树","permalink":"https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode297-二叉树的序列化与反序列化","slug":"leetcode297-二叉树的序列化与反序列化","date":"2020-01-14T18:29:14.000Z","updated":"2020-01-14T18:37:25.095Z","comments":true,"path":"article/leetcode297-二叉树的序列化与反序列化/","link":"","permalink":"https://www.codetool.top/article/leetcode297-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/","excerpt":"","text":"1 原题序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。 请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。 示例： 你可以将以下二叉树： &nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5 序列化为 “[1,2,3,null,null,4,5]” 提示: 这与 LeetCode 目前使用的方式一致，详情请参阅 LeetCode 序列化二叉树的格式。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。 说明: 不要使用类的成员 / 全局 / 静态变量来存储状态，你的序列化和反序列化算法应该是无状态的。 2 解法2.1 思想BFS，完全用队列实现就好，我这里会形成1,2,3,null,null,4,5,null,null,null,null,这样的字符串。 2.2 代码public class Codec { // Encodes a tree to a single string. public String serialize(TreeNode root) { Queue&lt;TreeNode> queue = new LinkedList&lt;>(); StringBuilder sb = new StringBuilder(); queue.offer(root); while(!queue.isEmpty()){ TreeNode node = queue.poll(); if(node == null) sb.append(\"null\"); else{ sb.append(node.val); queue.offer(node.left); queue.offer(node.right); } sb.append(\",\"); } return sb.toString(); } // Decodes your encoded data to tree. public TreeNode deserialize(String data) { if(data.equals(\"null,\")) return null; Queue&lt;TreeNode> queue = new LinkedList&lt;>(); String[] datas = data.split(\",\"); int count = 0; TreeNode root = new TreeNode(Integer.valueOf(datas[0])); queue.offer(root); while(!queue.isEmpty()){ TreeNode node = queue.poll(); TreeNode left = null; if(!datas[count+1].equals(\"null\")){ left = new TreeNode(Integer.valueOf(datas[count+1])); queue.offer(left); } TreeNode right = null; if(!datas[count+2].equals(\"null\")){ right = new TreeNode(Integer.valueOf(datas[count+2])); queue.offer(right); } node.left = left; node.right = right; count+=2; } return root; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"BFS","slug":"BFS","permalink":"https://www.codetool.top/tags/BFS/"},{"name":"树","slug":"树","permalink":"https://www.codetool.top/tags/%E6%A0%91/"}]},{"title":"leetcode236-二叉树的最近公共祖先","slug":"leetcode236-二叉树的最近公共祖先","date":"2020-01-14T16:54:05.000Z","updated":"2020-01-14T17:29:55.354Z","comments":true,"path":"article/leetcode236-二叉树的最近公共祖先/","link":"","permalink":"https://www.codetool.top/article/leetcode236-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/","excerpt":"","text":"1 原题给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。 百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。” 例如，给定如下二叉树: root = [3,5,1,6,2,0,8,null,null,7,4] 示例1： 输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1输出: 3解释: 节点 5 和节点 1 的最近公共祖先是节点 3。 示例2： 输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4输出: 5解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。 2 解法2.1 思想我首先的思路就是要有一个reach函数，可以判断一个节点是不是指定节点的祖先，通过dfs实现，返回一个bool值。那么这道题要寻找离p、q最近的祖先节点，就可以再使用一个dfs，我们都知道dfs回溯的时候是从下往上的，那么只要调用函数最早对参数p、q都返回true的节点就是要得到的答案了，然后沿着回溯返回值链传回这个节点。 2.2 代码class Solution { public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) { if(root == null) return null; TreeNode left = lowestCommonAncestor(root.left,p,q); if(left!=null) return left; TreeNode right = lowestCommonAncestor(root.right,p,q); if(right!=null) return right; if(reach(root,p.val)==true&amp;&amp;reach(root,q.val)==true) return root; return null; } public boolean reach(TreeNode root,int value){ if(root == null) return false; if(root.val == value) return true; return reach(root.left,value) || reach(root.right,value); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"},{"name":"树","slug":"树","permalink":"https://www.codetool.top/tags/%E6%A0%91/"}]},{"title":"leetcode117-填充每个节点的下一个右侧节点指针II","slug":"leetcode117-填充每个节点的下一个右侧节点指针II","date":"2020-01-14T13:45:48.000Z","updated":"2020-01-14T13:53:02.704Z","comments":true,"path":"article/leetcode117-填充每个节点的下一个右侧节点指针II/","link":"","permalink":"https://www.codetool.top/article/leetcode117-%E5%A1%AB%E5%85%85%E6%AF%8F%E4%B8%AA%E8%8A%82%E7%82%B9%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%8F%B3%E4%BE%A7%E8%8A%82%E7%82%B9%E6%8C%87%E9%92%88II/","excerpt":"","text":"1 原题给定一个二叉树 struct Node {&nbsp;&nbsp;int val;&nbsp;&nbsp;Node *left;&nbsp;&nbsp;Node *right;&nbsp;&nbsp;Node *next;} 填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。 初始状态下，所有 next 指针都被设置为 NULL。 进阶： 你只能使用常量级额外空间。 使用递归解题也符合要求，本题中递归程序占用的栈空间不算做额外的空间复杂度。 示例： 输入： root = [1,2,3,4,5,null,7]输出：[1,#,2,3,#,4,5,7,#]解释： 给定二叉树如图 A 所示，你的函数应该填充它的每个 next 指针，以指向其下一个右侧节点，如图 B 所示。 提示： 树中的节点数小于 6000 -100 &lt;= node.val &lt;= 100 2 解法2.1 思想我在leetcode116-填充每个节点的下一个右侧节点指针用的方法仍适用于该题 2.2 代码class Solution { List&lt;Node> list; public Node connect(Node root) { list = new ArrayList&lt;Node>(); dfs(root,0); return root; } public void dfs(Node root,int depth){ if(root == null) return; if(list.size()>depth){ Node node = list.get(depth); node.next = root; list.set(depth,root); } else list.add(root); dfs(root.left,depth+1); dfs(root.right,depth+1); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"},{"name":"树","slug":"树","permalink":"https://www.codetool.top/tags/%E6%A0%91/"}]},{"title":"leetcode116-填充每个节点的下一个右侧节点指针","slug":"leetcode116-填充每个节点的下一个右侧节点指针","date":"2020-01-14T12:23:22.000Z","updated":"2020-01-14T13:40:55.452Z","comments":true,"path":"article/leetcode116-填充每个节点的下一个右侧节点指针/","link":"","permalink":"https://www.codetool.top/article/leetcode116-%E5%A1%AB%E5%85%85%E6%AF%8F%E4%B8%AA%E8%8A%82%E7%82%B9%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%8F%B3%E4%BE%A7%E8%8A%82%E7%82%B9%E6%8C%87%E9%92%88/","excerpt":"","text":"1 原题给定一个完美二叉树，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下： struct Node {&nbsp;&nbsp;int val;&nbsp;&nbsp;Node *left;&nbsp;&nbsp;Node *right;&nbsp;&nbsp;Node *next;} 填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。 初始状态下，所有 next 指针都被设置为 NULL。 示例： 输入：{“$id”:”1”,”left”:{“$id”:”2”,”left”:{“$id”:”3”,”left”:null,”next”:null,”right”:null,”val”:4},”next”:null,”right”:{“$id”:”4”,”left”:null,”next”:null,”right”:null,”val”:5},”val”:2},”next”:null,”right”:{“$id”:”5”,”left”:{“$id”:”6”,”left”:null,”next”:null,”right”:null,”val”:6},”next”:null,”right”:{“$id”:”7”,”left”:null,”next”:null,”right”:null,”val”:7},”val”:3},”val”:1}输出： {“$id”:”1”,”left”:{“$id”:”2”,”left”:{“$id”:”3”,”left”:null,”next”:{“$id”:”4”,”left”:null,”next”:{“$id”:”5”,”left”:null,”next”:{“$id”:”6”,”left”:null,”next”:null,”right”:null,”val”:7},”right”:null,”val”:6},”right”:null,”val”:5},”right”:null,”val”:4},”next”:{“$id”:”7”,”left”:{“$ref”:”5”},”next”:null,”right”:{“$ref”:”6”},”val”:3},”right”:{“$ref”:”4”},”val”:2},”next”:null,”right”:{“$ref”:”7”},”val”:1}解释： 给定二叉树如图 A 所示，你的函数应该填充它的每个 next 指针，以指向其下一个右侧节点，如图 B 所示。 提示： 你只能使用常量级额外空间。 使用递归解题也符合要求，本题中递归程序占用的栈空间不算做额外的空间复杂度。 2 解法2.1 思想DFS搜索，用一个list存放每层前一个遍历的节点，再次遍历到该层的时候从list中取出上一个元素并修改next指针。 2.2 代码class Solution { List&lt;Node> list; public Node connect(Node root) { list = new ArrayList&lt;Node>(); dfs(root,0); return root; } public void dfs(Node root,int depth){ if(root == null) return; if(list.size()>depth){ Node node = list.get(depth); node.next = root; list.set(depth,root); } else list.add(root); dfs(root.left,depth+1); dfs(root.right,depth+1); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"},{"name":"树","slug":"树","permalink":"https://www.codetool.top/tags/%E6%A0%91/"}]},{"title":"leetcode105-从前序与中序遍历序列构造二叉树","slug":"leetcode105-从前序与中序遍历序列构造二叉树","date":"2020-01-12T18:50:27.000Z","updated":"2020-01-14T13:40:40.362Z","comments":true,"path":"article/leetcode105-从前序与中序遍历序列构造二叉树/","link":"","permalink":"https://www.codetool.top/article/leetcode105-%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/","excerpt":"","text":"1 原题根据一棵树的前序遍历与中序遍历构造二叉树。 注意:你可以假设树中没有重复的元素。 例如，给出 前序遍历 preorder = [3,9,20,15,7]中序遍历 inorder = [9,3,15,20,7] 返回如下的二叉树： &nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;/ \\&nbsp;&nbsp;9&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;15&nbsp;&nbsp;&nbsp;7 2 解法2.1 思想根据前序遍历第一个元素是根、中序遍历以根为中心划分左子树和右子树的特点，递归构造左子树和右子树。 算法优化过程见：leetcode106-从中序与后序遍历序列构造二叉树 2.2 代码class Solution { int[] preorderGlobal; Map&lt;Integer,Integer> map; public TreeNode buildTree(int[] preorder, int[] inorder) { preorderGlobal = preorder; map = new HashMap&lt;>(); for(int i = 0;i &lt; inorder.length; i++) map.put(inorder[i], i); if(preorder.length == 0) return null; TreeNode root = getUnit(0,preorder.length,0,inorder.length); return root; } public TreeNode getUnit(int preorderStart,int preorderEnd,int inorderStart,int inorderEnd){ if(preorderStart==preorderEnd) return null; TreeNode root = new TreeNode(preorderGlobal[preorderStart]); int index = map.get(preorderGlobal[preorderStart]); int leftCount = index - inorderStart; root.left = getUnit(preorderStart+1,preorderStart+leftCount+1,inorderStart,index); root.right = getUnit(preorderStart+leftCount+1,preorderEnd,index+1,inorderEnd); return root; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"},{"name":"树","slug":"树","permalink":"https://www.codetool.top/tags/%E6%A0%91/"}]},{"title":"leetcode106-从中序与后序遍历序列构造二叉树","slug":"leetcode106-从中序与后序遍历序列构造二叉树","date":"2020-01-12T18:43:49.000Z","updated":"2020-01-14T13:43:31.076Z","comments":true,"path":"article/leetcode106-从中序与后序遍历序列构造二叉树/","link":"","permalink":"https://www.codetool.top/article/leetcode106-%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/","excerpt":"","text":"1 原题根据一棵树的中序遍历与后序遍历构造二叉树。 注意:你可以假设树中没有重复的元素。 例如，给出 中序遍历 inorder = [9,3,15,20,7]后序遍历 postorder = [9,15,7,20,3] 返回如下的二叉树： &nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;/ \\&nbsp;&nbsp;9&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;15&nbsp;&nbsp;&nbsp;7 2 解法2.1 思想根据后序遍历最后一个元素是根、中序遍历以根为中心划分左子树和右子树的特点，递归构造左子树和右子树。 2.2 代码我们逐渐来优化时间复杂度： 第一版，较好懂： class Solution { public int indexOf(int target,int[] order){ for(int i = 0;i&lt;order.length;i++){ if(order[i] == target) return i; } return -1; } public TreeNode buildTree(int[] inorder, int[] postorder) { if(postorder.length == 0) return null; TreeNode root = getUnit(inorder,postorder); return root; } public TreeNode getUnit(int[] inorder,int[] postorder){ if(postorder.length == 0) return null; TreeNode root = new TreeNode(postorder[postorder.length-1]); int index = indexOf(postorder[postorder.length-1],inorder); int[] leftpartInorder = Arrays.copyOfRange(inorder,0,index); int[] rightpartInorder = Arrays.copyOfRange(inorder,index+1,inorder.length); int leftCount = leftpartInorder.length; int[] leftpartPostorder = Arrays.copyOfRange(postorder,0,leftCount); int[] rightpartPostorder = Arrays.copyOfRange(postorder,leftCount,postorder.length-1); root.left = getUnit(leftpartInorder,leftpartPostorder); root.right = getUnit(rightpartInorder,rightpartPostorder); return root; } } 第二版，不用再复制数组，直接在原数组上操作： class Solution { int[] inorderGlobal; int[] postorderGlobal; public int indexOf(int target,int start,int end){ for(int i = 0;i&lt;end-start;i++){ if(inorderGlobal[i+start] == target) return i+start; } return -1; } public TreeNode buildTree(int[] inorder, int[] postorder) { inorderGlobal = inorder; postorderGlobal = postorder; if(postorder.length == 0) return null; TreeNode root = getUnit(0,inorder.length,0,postorder.length); return root; } public TreeNode getUnit(int inorderStart,int inorderEnd,int postorderStart,int postorderEnd){ if(postorderEnd==postorderStart) return null; TreeNode root = new TreeNode(postorderGlobal[postorderEnd-1]); int index = indexOf(postorderGlobal[postorderEnd-1],inorderStart,inorderEnd); int leftCount = index-inorderStart; root.left = getUnit(inorderStart,index,postorderStart,leftCount+postorderStart); root.right = getUnit(index+1,inorderEnd,postorderStart+leftCount,postorderEnd-1); return root; } } 第三版，既然经常要用查找元素在中序遍历中的位置，可以不需要使用indexOf函数，而是一开始则将对应关系保存在哈希表中： class Solution { int[] postorderGlobal; Map&lt;Integer,Integer> map; public TreeNode buildTree(int[] inorder, int[] postorder) { postorderGlobal = postorder; map = new HashMap&lt;>(); for(int i = 0;i &lt; inorder.length; i++) map.put(inorder[i], i); if(postorder.length == 0) return null; TreeNode root = getUnit(0,inorder.length,0,postorder.length); return root; } public TreeNode getUnit(int inorderStart,int inorderEnd,int postorderStart,int postorderEnd){ if(postorderEnd==postorderStart) return null; TreeNode root = new TreeNode(postorderGlobal[postorderEnd-1]); int index = map.get(postorderGlobal[postorderEnd-1]); int leftCount = index-inorderStart; root.left = getUnit(inorderStart,index,postorderStart,leftCount+postorderStart); root.right = getUnit(index+1,inorderEnd,postorderStart+leftCount,postorderEnd-1); return root; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"},{"name":"树","slug":"树","permalink":"https://www.codetool.top/tags/%E6%A0%91/"}]},{"title":"leetcode112-路径总和","slug":"leetcode112-路径总和","date":"2020-01-11T16:31:56.000Z","updated":"2020-01-11T16:43:34.402Z","comments":true,"path":"article/leetcode112-路径总和/","link":"","permalink":"https://www.codetool.top/article/leetcode112-%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C/","excerpt":"","text":"1 原题给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。 说明: 叶子节点是指没有子节点的节点。 示例:给定如下二叉树，以及目标和 sum = 22， &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;13&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;\\ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5-&gt;4-&gt;11-&gt;2。 2 解法2.1 思想DFS搜索，每经过一个节点减去对应节点的值，到叶子节点的时候查看是否为0。 2.2 代码class Solution { public boolean hasPathSum(TreeNode root, int sum) { if(root == null) return false; int left = sum-root.val; if(left == 0 &amp;&amp; root.left==null &amp;&amp; root.right == null) return true; return hasPathSum(root.left,left)||hasPathSum(root.right,left); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"},{"name":"树","slug":"树","permalink":"https://www.codetool.top/tags/%E6%A0%91/"}]},{"title":"深入理解java虚拟机第三版读书笔记05","slug":"深入理解java虚拟机第三版读书笔记05","date":"2020-01-11T16:07:31.000Z","updated":"2020-01-20T17:44:00.617Z","comments":true,"path":"article/深入理解java虚拟机第三版读书笔记05/","link":"","permalink":"https://www.codetool.top/article/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89%E7%89%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B005/","excerpt":"","text":"续深入理解java虚拟机第三版读书笔记04 1 HotSpot的算法细节实现1.1 根节点枚举如何高效的找出所有GC Roots？ 迄今为止，所有收集器在根节点枚举这一步骤时都是必须暂停用户线程的，枚举时必须在一个保障一致性的快照中才能进行。 目前主流Java虚拟机使用的都是准确式垃圾收集，在HotSpot的解决方案里，是使用一组称为OopMap的数据结构来获取那些地方存放着对象引用，一旦类加载动作完成的时候，HotSpot就会把对象内什么偏移量上是什么类型的数据计算出来，在即时编译过程中，也会在特定的位置记录下栈里和寄存器里哪些位置是引用。这样收集器在扫描时就可以直接得知这些信息了，并不需要真正一个不漏地从方法区等GC Roots开始查找。 1.2 安全点如果导致引用关系变化，或者说导致OopMap内容变化的指令非常多，为每一条指令都生成对应的OopMap，那将会需要大量的额外存储空间。 实际上HotSpot也的确没有为每条指令都生成OopMap，只是在“特定的位置”记录了这些信息，这些位置被称为安全点。只有用户程序执行到达安全点才能停下来进行垃圾收集。 对于安全点，另外一个需要考虑的问题是，如何在垃圾收集发生时让所有线程（这里其实不包括执行JNI调用的线程）都跑到最近的安全点，然后停顿下来。有两种方法： 抢先式中断 抢先式中断不需要线程的执行代码主动去配合，在垃圾收集发生时，系统首先把所有用户线程全部中断，如果发现有用户线程中断的地方不在安全点上，就恢复这条线程执行，让它一会再重新中断，直到跑到安全点上。 现在几乎没有虚拟机实现采用抢先式中断来暂停线程响应GC事件。 主动式中断 当垃圾收集需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志位，各个线程执行过程时会不停地主动去轮询这个标志，一旦发现中断标志为真时就自己在最近的安全点上主动中断挂起。 轮询标志的地方和安全点是重合的，另外还要加上所有创建对象和其他需要在Java堆上分配内存的地方，这是为了检查是否即将要发生垃圾收集，避免没有足够内存分配新对象。 由于轮询操作在代码中会频繁出现，这要求它必须足够高效。HotSpot使用内存保护陷阱的方式，把轮询操作精简至只有一条汇编指令的程度。下面代码中的test指令就是HotSpot生成的轮询指令，当需要暂停用户线程时，虚拟机把0x160100的内存页设置为不可读，那线程执行到test指令时就会产生一个自陷异常信号，然后在预先注册的异常处理器中挂起线程实现等待，这样仅通过一条汇编指令便完成安全点轮询和触发线程中断了。 0x01b6d627: call 0x01b2b210 ; OopMap{[60]=Oop off=460} ; *invokeinterface size ; - Client1::main@113 (line 23) ; {virtual_call} 0x01b6d62c: nop ; OopMap{[60]=Oop off=461} ; *if_icmplt ; - Client1::main@118 (line 23) 0x01b6d62d: test %eax,0x160100 ; {poll} 0x01b6d633: mov 0x50(%esp),%esi 0x01b6d637: cmp %eax,%esi1.3 安全区域如果程序没有分配处理器时间，典型的场景便是用户线程处于Sleep状态或者Blocked状态，这时候线程无法响应虚拟机的中断请求，不能再走到安全的地方去中断挂起自己。此时必须引入安全区域来解决。 安全区域是指能够确保在某一段代码片段之中，引用关系不会发生变化，因此，在这个区域中任意地方开始垃圾收集都是安全的。我们也可以把安全区域看作被扩展拉伸了的安全点。 当用户线程执行到安全区域里面的代码时，首先会标识自己已经进入了安全区域，那样当这段时间里虚拟机要发起垃圾收集时就不必去管这些已声明自己在安全区域内的线程了。当线程要离开安全区域时，它要检查虚拟机是否已经完成了根节点枚举（或者垃圾收集过程中其他需要暂停用户线程的阶段），如果完成了，那线程就当作没事发生过，继续执行；否则它就必须一直等待，直到收到可以离开安全区域的信号为止。 1.4 记忆集与卡表为解决对象跨代引用所带来的问题，垃圾收集器在新生代中建立了名为记忆集（Remembered Set）的数据结构，用以避免把整个老年代加进GC Roots扫描范围。事实上并不只是新生代、老年代之间才有跨代引用的问题，所有涉及部分区域收集（Partial GC）行为的垃圾收集器，典型的如G1、ZGC和Shenandoah收集器，都会面临相同的问题。 记忆集是一种用于记录从非收集区域指向收集区域的指针集合的抽象数据结构。如果我们不考虑效率和成本的话，最简单的实现可以用非收集区域中所有含跨代引用的对象数组来实现这个数据结构： Class RememberedSet { Object[] set[OBJECT_INTERGENERATIONAL_REFERENCE_SIZE]; }这种记录全部含跨代引用对象的实现方案，无论是空间占用还是维护成本都相当高昂。而在垃圾收集的场景中，收集器只需要通过记忆集判断出某一块非收集区域是否存在有指向了收集区域的指针就可以了，并不需要了解这些跨代指针的全部细节。那设计者在实现记忆集的时候，便可以选择更为粗犷的记录粒度来节省记忆集的存储和维护成本，下面是一些可供选择的记录精度： 字长精度：每个记录精确到一个机器字长（就是处理器的寻址位数，如常见的32位或64位，这个精度决定了机器访问物理内存地址的指针长度），该字包含跨代指针。 对象精度：每个记录精确到一个对象，该对象里有字段含有跨代指针。 卡精度：每个记录精确到一块内存区域，该区域内有对象含有跨代指针。 其中，第三种“卡精度”所指的是用一种称为“卡表”（Card Table）的方式去实现记忆集，这也是目前最常用的一种记忆集实现形式 卡表最简单的形式可以只是一个字节数组，而HotSpot虚拟机确实也是这样做的。以下这行代码是HotSpot默认的卡表标记逻辑： CARD_TABLE [this address &gt;&gt; 9] = 0;字节数组CARD_TABLE的 每一个元素都对应着其标识的内存区域中一块特定大小的内存块，这个内存块被称作“卡页”。 一般来说，卡页大小都是以2的N次幂的字节数，通过上面代码可以看出HotSpot中使用的卡页是2的9次幂，即512字节。 一个卡页的内存中通常包含不止一个对象， 只要卡页内有一个（或更多）对象的字段存在着跨代指针，那就将对应卡表的数组元素的值标识为1，称为这个元素变脏，没有则标识为0。 在垃圾收集发生时，只要筛选出卡表中变脏的元素，就能轻易得出哪些卡页内存块中包含跨代指针，把它们加入GC Roots中一并扫描。 1.5 写屏障卡表元素何时变脏、谁来把它们变脏？ 卡表元素何时变脏的答案是很明确的——有其他分代区域中对象引用了本区域对象时，其对应的卡表元素就应该变脏，变脏时间点原则上应该发生在引用类型字段赋值的那一刻。但问题是如何变脏，即如何在对象赋值的那一刻去更新维护卡表呢？假如是解释执行的字节码，那相对好处理，虚拟机负责每条字节码指令的执行，有充分的介入空间；但在编译执行的场景中呢？经过即时编译后的代码已经是纯粹的机器指令流了，这就必须找到一个在机器码层面的手段，把维护卡表的动作放到每一个赋值操作之中。 写屏障可以看作在虚拟机层面对“引用类型字段赋值”这个动作的AOP切面，在引用对象赋值时会产生一个环形通知，供程序执行额外的动作，也就是说赋值的前后都在写屏障的覆盖范畴内。在赋值前的部分的写屏障叫作写前屏障，在赋值后的则叫作写后屏障。HotSpot虚拟机的许多收集器中都有使用到写屏障，但直至G1收集器出现之前，其他收集器都只用到了写后屏障。 下面这段代码是一段更新卡表状态的简化逻辑： void oop_field_store(oop* field, oop new_value) { // 引用字段赋值操作 *field = new_value; // 写后屏障，在这里完成卡表状态更新 post_write_barrier(field, new_value); } 应用写屏障后，虚拟机就会为所有赋值操作生成相应的指令，一旦收集器在写屏障中增加了更新卡表操作，无论更新的是不是老年代对新生代对象的引用，每次只要对引用进行更新，就会产生额外的开销，不过开销较小。 卡表在高并发场景下还面临着“伪共享”问题，现代中央处理器的缓存系统中是以缓存行（Cache Line）为单位存储的，当多线程修改互相独立的变量时，如果这些变量恰好共享同一个缓存行，就会彼此影响（写回、无效化或者同步）而导致性能降低。 一种简单的解决方案是不采用无条件的写屏障，而是先检查卡表标记，只有当该卡表元素未被标记过时才将其标记为变脏。 在JDK 7之后，HotSpot虚拟机增加了一个新的参数-XX：+UseCondCardMark，用来决定是否开启卡表更新的条件判断。开启会增加一次额外判断的开销，但能够避免伪共享问题，两者各有性能损耗，是否打开要根据应用实际运行情况来进行测试权衡。 1.6 并发的可达性分析可达性分析算法理论上要求全过程都基于一个能保障一致性的快照中才能够进行分析，这意味着必须全程冻结用户线程的运行。 如果过程前后不一致可能出现两种后果：一种是把原本消亡的对象错误标记为存活，这其实是可以容忍的，只不过产生了一点逃过本次收集的浮动垃圾而已，下次收集清理掉就好。另一种是把原本存活的对象错误标记为已消亡，这就是非常致命的后果了。 我们引入三色标记作为工具来辅助推导，把遍历对象图过程中遇到的对象，按照“是否访问过”这个条件标记成以下三种颜色： 白色：表示对象尚未被垃圾收集器访问过。显然在可达性分析刚刚开始的阶段，所有的对象都是白色的，若在分析结束的阶段，仍然是白色的对象，即代表不可达。 黑色：表示对象已经被垃圾收集器访问过，且这个对象的所有引用都已经扫描过。黑色的对象代表已经扫描过，它是安全存活的，如果有其他对象引用指向了黑色对象，无须重新扫描一遍。黑色对象不可能直接（不经过灰色对象）指向某个白色对象。 灰色：表示对象已经被垃圾收集器访问过，但这个对象上至少存在一个引用还没有被扫描过。 当且仅当以下两个条件同时满足时，会产生“对象消失”的问题，即原本应该是黑色的对象被误标为白色： 赋值器插入了一条或多条从黑色对象到白色对象的新引用； 赋值器删除了全部从灰色对象到该白色对象的直接或间接引用。 要解决这个问题，仅需破坏其中任一条件，由此分别产生了两种解决方案：增量更新和原始快照。 增量更新：当黑色对象插入新的指向白色对象的引用关系时，就将这个新插入的引用记录下来，等并发扫描结束之后，再将这些记录过的引用关系中的黑色对象为根，重新扫描一次。这可以简化理解为，黑色对象一旦新插入了指向白色对象的引用之后，它就变回灰色对象了。 原始快照：当灰色对象要删除指向白色对象的引用关系时，就将这个要删除的引用记录下来，在并发扫描结束之后，再将这些记录过的引用关系中的灰色对象为根，重新扫描一次。这也可以简化理解为，无论引用关系删除与否，都会按照刚刚开始扫描那一刻的对象图快照来进行搜索。 在HotSpot虚拟机中，增量更新和原始快照这两种解决方案都有实际应用，譬如，CMS是基于增量更新来做并发标记的，G1、Shenandoah则是用原始快照来实现。 2 经典垃圾收集器 这里展示了七种作用于不同分代的收集器，如果两个收集器之间存在连线，就说明它们可以搭配使用。重点分析CMS和G1这两款相对复杂而又广泛使用的收集器。 JAVA9取消了对Serial+CMS、ParNew+Serial Old的支持。 2.1 Serail收集器-XX:+UseSerialGC=Serial+SerialOld Serial收集器是最基础、历史最悠久的收集器。这是一个单线程工作的收集器，它进行垃圾收集时，不仅只会使用一个处理器或一条收集线程去完成垃圾收集工作，而且必须暂停其他所有工作线程，直到它收集结束。 对于“Stop The World”，从JDK 1.3开始，一直到现在最新的JDK 13，HotSpot虚拟机开发团队为消除或者降低用户线程因垃圾收集而导致停顿的努力一直持续进行着，从Serial收集器到Parallel收集器，再到Concurrent Mark Sweep（CMS）和Garbage First（G1）收集器，最终至现在垃圾收集器的最前沿成果Shenandoah和ZGC等，我们看到了一个个越来越构思精巧，越来越优秀，也越来越复杂的垃圾收集器不断涌现，用户线程的停顿时间在持续缩短，但是仍然没有办法彻底消除。 迄今为止，它依然是HotSpot虚拟机运行在客户端模式下的默认新生代收集器，有着优于其他收集器的地方，那就是简单而高效。它是所有收集器里额外内存消耗最小的，对于单核处理器或处理器核心数较少的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。 2.2 ParNew收集器-XX：+/-UseParNewGC ParNew收集器实质上是Serial收集器的多线程并行版本，除了同时使用多条线程进行垃圾收集之外，其余的行为包括Serial收集器可用的所有控制参数（例如：-XX：SurvivorRatio、-XX：PretenureSizeThreshold、-XX：HandlePromotionFailure等）、收集算法、Stop The World、对象分配规则、回收策略等都与Serial收集器完全一致 ParNew收集器除了支持多线程并行收集之外，其他与Serial收集器相比并没有太多创新之处，但它却是不少运行在服务端模式下的HotSpot虚拟机，尤其是JDK 7之前的遗留系统中首选的新生代收集器，其中有一个与功能、性能无关但其实很重要的原因是：除了Serial收集器外，目前只有它能与CMS收集器配合工作。 随着更先进的G1收集器带着CMS继承者和替代者的光环登场，从JDK 9开始,ParNew和CMS从此只能互相搭配使用，再也没有其他收集器能够和它们配合了，也可以理解为从此以后，ParNew合并入CMS，成为它专门处理新生代的组成部分。 可以使用-XX：ParallelGCThreads参数来限制垃圾收集的线程数。 2.3 Parallel Scavenge收集器-XX:+UseParallelGC -XX:+UseParallelOldGC Parallel Scavenge收集器也是一款新生代收集器，它同样是基于标记-复制算法实现的收集器，也是能够并行收集的多线程收集器。 Parallel Scavenge收集器的特点是它的关注点与其他收集器不同，CMS等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge收集器的目标则是达到一个可控制的吞吐量（Throughput）。所谓吞吐量就是处理器用于运行用户代码的时间与处理器总消耗时间的比值。 Parallel Scavenge收集器提供了两个参数用于精确控制吞吐量，分别是控制最大垃圾收集停顿时间的-XX：MaxGCPauseMillis参数以及直接设置吞吐量大小的-XX：GCTimeRatio参数。 -XX：GCTimeRatio参数的值则应当是一个大于0小于100的整数，也就是垃圾收集时间占总时间的比率，相当于吞吐量的倒数。譬如把此参数设置为19，那允许的最大垃圾收集时间就占总时间的5%（即1/(1+19)），默认值为99，即允许最大1%（即1/(1+99)）的垃圾收集时间。 参数-XX：+UseAdaptiveSizePolicy：当这个参数被激活之后，就不需要人工指定新生代的大小（-Xmn）、Eden与Survivor区的比例（-XX：SurvivorRatio）、晋升老年代对象大小（-XX：PretenureSizeThreshold）等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量。这种调节方式称为垃圾收集的自适应的调节策略。 2.4 Serial Old收集器Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，使用标记-整理算法。 这个收集器的主要意义也是供客户端模式下的HotSpot虚拟机使用。如果在服务端模式下，它也可能有两种用途： 在JDK 5以及之前的版本中与Parallel Scavenge收集器搭配使用 作为CMS收集器发生失败时的后备预案，在并发收集发生Concurrent Mode Failure时使用。 2.5 Parallel Old收集器Parallel Old是Parallel Scavenge收集器的老年代版本，支持多线程并发收集，基于标记-整理算法实现。这个收集器是直到JDK 6时才开始提供的，配合Parallel Scavenge有着良好的“吞吐量优先”的表现。 2.6 CMS收集器CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用集中在互联网网站或者基于浏览器的B/S系统的服务端上，这类应用通常都会较为关注服务的响应速度，希望系统停顿时间尽可能短，以给用户带来良好的交互体验。CMS收集器就非常符合这类应用的需求。 CMS收集器是基于标记-清除算法实现的，它的运作过程相对于前面几种收集器来说要更复杂一些，整个过程分为四个步骤，包括： 初始标记（CMS initial mark） 并发标记（CMS concurrent mark） 重新标记（CMS remark） 并发清除（CMS concurrent sweep） 其中初始标记、重新标记这两个步骤仍然需要“Stop The World”。初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快；并发标记阶段就是从GC Roots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行；而重新标记阶段则是为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短；最后是并发清除阶段，清理删除掉标记阶段判断的已经死亡的对象，由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的。 由于在整个过程中耗时最长的并发标记和并发清除阶段中，垃圾收集器线程都可以与用户线程一起工作，所以从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。 CMS收集器的缺点： 1) CMS收集器对处理器资源非常敏感。CMS默认启动的回收线程数是（处理器核心数量+3）/4，也就是说，如果处理器核心数在四个或以上，并发回收时垃圾收集线程只占用不超过25%的处理器运算资源，并且会随着处理器核心数量的增加而下降。但是当处理器核心数量不足四个时，CMS对用户程序的影响就可能变得很大。为了缓解这种情况，虚拟机提供了一种称为“增量式并发收集器”（Incremental Concurrent Mark Sweep/i-CMS）的CMS收集器变种，所做的事情和以前单核处理器年代PC机操作系统靠抢占式多任务来模拟多核并行多任务的思想一样，是在并发标记、清理的时候让收集器线程、用户线程交替运行，尽量减少垃圾收集线程的独占资源的时间，这样整个垃圾收集的过程会更长，但对用户程序的影响就会显得较少一些，直观感受是速度变慢的时间更多了，但速度下降幅度就没有那么明显。实践证明增量式的CMS收集器效果很一般，从 JDK 7开始，i-CMS模式已经被声明为“deprecated”，即已过时不再提倡用户使用，到JDK 9发布后i-CMS模式被完全废弃。 2) CMS收集器无法处理“浮动垃圾”,有可能出现“Concurrent Mode Failure”失败进而导致另一次完全“Stop The World”的Full GC的产生。在CMS的并发标记和并发清理阶段，用户线程是还在继续运行的，程序在运行自然就还会伴随有新的垃圾对象不断产生，但这一部分垃圾对象是出现在标记过程结束以后，CMS无法在当次收集中处理掉它们，只好留待下一次垃圾收集时再清理掉。这一部分垃圾就称为“浮动垃圾”。同样也是由于在垃圾收集阶段用户线程还需要持续运行，那就还需要预留足够内存空间提供给用户线程使用，因此CMS收集器不能像其他收集器那样等待到老年代几乎完全被填满了再进行收集，必须预留一部分空间供并发收集时的程序运作使用。在JDK 5的默认设置下，CMS收集器当老年代使用了68%的空间后就会被激活，这是一个偏保守的设置，如果在实际应用中老年代增长并不是太快，可以适当调高参数-XX：CMSInitiatingOccupancyFraction的值来提高CMS的触发百分比，降低内存回收频率，获取更好的性能。到了JDK 6时，CMS收集器的启动阈值就已经默认提升至92%。但这又会更容易面临另一种风险：要是CMS运行期间预留的内存无法满足程序分配新对象的需要，就会出现一次“并发失败”（Concurrent Mode Failure），这时候虚拟机将不得不启动后备预案：冻结用户线程的执行，临时启用Serial Old收集器来重新进行老年代的垃圾收集，但这样停顿时间就很长了。所以参数-XX：CMSInitiatingOccupancyFraction设置得太高将会很容易导致大量的并发失败产生，性能反而降低，用户应在生产环境中根据实际应用情况来权衡设置。 3) CMS是一款基于“标记-清除”算法实现的收集器,收集结束时会有大量空间碎片产生,空间碎片过多时，将会给大对象分配带来很大麻烦。为了解决这个问题，CMS收集器提供了一个-XX：+UseCMSCompactAtFullCollection开关参数（默认是开启的，此参数从 JDK 9开始废弃），用于在CMS收集器不得不进行Full GC时开启内存碎片的合并整理过程，由于这个内存整理必须移动存活对象，（在Shenandoah和ZGC出现前）是无法并发的。这样空间碎片问题是解决了，但停顿时间又会变长，因此虚拟机设计者们还提供了另外一个参数-XX：CMSFullGCsBeforeCompaction（此参数从JDK 9开始废弃），这个参数的作用是要求CMS收集器在执行过若干次（数量由参数值决定）不整理空间的Full GC之后，下一次进入Full GC前会先进行碎片整理（默认值为0，表示每次进入Full GC时都进行碎片整理）。 2.7 Garbage First收集器（G1）-XX:+UseG1GC Garbage First（简称G1）开创了收集器面向局部收集的设计思路和基于Region的内存布局形式。 G1是一款主要面向服务端应用的垃圾收集器。最初期望可以替换掉CMS收集器。JDK 9发布之后代替Parallel Scavenge加Parallel Old成为服务端模式下的默认垃圾收集器，而CMS则沦落至被声明为不推荐使用（Deprecate）的收集器。 目标： 支持可预测的停顿时间模型——能够支持指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间大概率不超过N毫秒，这几乎已经是实时Java（RTSJ）的中软实时垃圾收集器特征了。 那具体要怎么做才能实现这个目标呢？ G1可以面向堆内存任何部分来组成回收集（Collection Set，一般简称CSet）进行回收，衡量标准不再是它属于哪个分代，而是哪块内存中存放的垃圾数量最多，回收收益最大，这就是G1收集器的Mixed GC模式。 G1不再坚持固定大小以及固定数量的分代区域划分，而是把连续的Java堆划分为多个大小相等的独立区域（Region），每一个Region都可以根据需要，扮演新生代的Eden空间、Survivor空间，或者老年代空间。收集器能够对扮演不同角色的Region采用不同的策略去处理，这样无论是新创建的对象还是已经存活了一段时间、熬过多次收集的旧对象都能获取很好的收集效果。 -XX:G1HeapRegionSize=size设定region大小，取值范围为1MB～32MB，且应为2的N次幂。 Region中还有一类特殊的Humongous区域，专门用来存储大对象。 G1认为只要大小超过了一个Region容量一半的对象即可判定为大对象。而对于那些超过了整个Region容量的超级大对象，将会被存放在N个连续的Humongous Region之中，G1的大多数行为都把Humongous Region作为老年代的一部分来进行看待。 虽然G1仍然保留新生代和老年代的概念，但新生代和老年代不再是固定的了，它们都是一系列区域（不需要连续）的动态集合。G1收集器之所以能建立可预测的停顿时间模型，是因为它将Region作为单次回收的最小单元，即每次收集到的内存空间都是Region大小的整数倍，这样可以有计划地避免在整个Java堆中进行全区域的垃圾收集。更具体的处理思路是让G1收集器去跟踪各个Region里面的垃圾堆积的“价值”大小，价值即回收所获得的空间大小以及回收所需时间的经验值，然后在后台维护一个优先级列表，每次根据用户设定允许的收集停顿时间，优先处理回收价值收益最大的那些Region，这也就是“Garbage First”名字的由来。这种使用Region划分内存空间，以及具有优先级的区域回收方式，保证了G1收集器在有限的时间内获取尽可能高的收集效率。 -XX：MaxGCPauseMillis指定用户期望的收集停顿时间，默认值是200毫秒，设置成一百或者两三百是较为合理的。 解决的细节问题： 将Java堆分成多个独立Region后，Region里面存在的跨Region引用对象如何解决？它的每个Region都维护有自己的记忆集，这些记忆集会记录下别的Region 指向自己的指针，并标记这些指针分别在哪些卡页的范围之内。G1的记忆集在存储结构的本质上是一种哈希表，Key是别的Region的起始地址，Value是一个集合，里面存储的元素是卡表的索引号。这种“双向”的卡表结构（卡表是“我指向谁”，这种结构还记录了“谁指向我”）比原来的卡表实现起来更复杂，同时由于Region数量比传统收集器的分代数量明显要多得多，因此G1收集器要比其他的传统垃圾收集器有着更高的内存占用负担。根据经验，G1至少要耗费大约相当于Java堆容量10%至20%的额外内存来维持收集器工作。 在并发标记阶段如何保证收集线程与用户线程互不干扰地运行？CMS收集器采用增量更新算法实现，而G1 收集器则是通过原始快照算法来实现的。G1为每一个Region设计了两个名为TAMS（Top at Mark Start）的指针，把Region中的一部分空间划分出来用于并发回收过程中的新对象分配，并发回收时新分配的对象地址都必须要在这两个指针位置以上。G1收集器默认在这个地址以上的对象是被隐式标记过的，即默认它们是存活的，不纳入回收范围。与CMS中的“Concurrent Mode Failure”失败会导致Full GC类似，如果内存回收的速度赶不上内存分配的速度，G1收集器也要被迫冻结用户线程执行，导致Full GC而产生长时间“Stop The World”。 怎样建立起可靠的停顿预测模型？G1收集器的停顿预测模型是以衰减均值（Decaying Average）为理论基础来实现的，在垃圾收集过程中，G1收集器会记录每个Region的回收耗时、每个Region记忆集里的脏卡数量等各个可测量的步骤花费的成本，并分析得出平均值、标准偏差、置信度等统计信息。 G1收集器的运作过程大致可划分为以下四个步骤： 初始标记：仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS指针的值，让下一阶段用户线程并发运行时，能正确地在可用的Region中分配新对象。这个阶段需要停顿线程，但耗时很短，而且是借用进行Minor GC的时候同步完成的，所以G1收集器在这个阶段实际并没有额外的停顿。 并发标记：从GC Root开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象，这阶段耗时较长，但可与用户程序并发执行。当对象图扫描完成以后，还要重新处理SATB记录下的在并发时有引用变动的对象。 最终标记：对用户线程做另一个短暂的暂停，用于处理并发阶段结束后仍遗留下来的最后那少量的SATB记录。 筛选回收：负责更新Region的统计数据，对各个Region的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，可以自由选择任意多个Region 构成回收集，然后把决定回收的那一部分Region的存活对象复制到空的Region中，再清理掉整个旧Region的全部空间。这里的操作涉及存活对象的移动，是必须暂停用户线程，由多条收集器线程并行完成的。 G1收集器除了并发标记外，其余阶段也是要完全暂停用户线程的，换言之，它并非纯粹地追求低延迟，官方给它设定的目标是在延迟可控的情况下获得尽可能高的吞吐量。 G1收集器常会被拿来与CMS收集器互相比较，毕竟它们都非常关注停顿时间的控制： 与CMS的“标记-清除”算法不同，G1从整体来看是基于“标记-整理”算法实现的收集器，但从局部（两个Region之间）上看又是基于“标记-复制”算法实现，无论如何，这两种算法都意味着G1运作期间不会产生内存空间碎片，垃圾收集完成之后能提供规整的可用内存。 在用户程序运行过程中，G1无论是为了垃圾收集产生的内存占用（Footprint）还是程序运行时的额外执行负载（Overload）都要比CMS要高。 就内存占用来说，虽然G1和CMS都使用卡表来处理跨代指针，但G1的卡表实现更为复杂，而且堆中每个Region，无论扮演的是新生代还是老年代角色，都必须有一份卡表，这导致G1的记忆集（和其他内存消耗）可能会占整个堆容量的20%乃至更多的内存空间；相比起来CMS的卡表就相当简单，只有唯一一份，而且只需要处理老年代到新生代的引用，反过来则不需要。 在执行负载的角度上，同样由于两个收集器各自的细节实现特点导致了用户程序运行时的负载会有不同，譬如它们都使用到写屏障，CMS用写后屏障来更新维护卡表；而G1除了使用写后屏障来进行同样的卡表维护操作外，为了实现原始快照搜索（SATB）算法，还需要使用写前屏障来跟踪并发时的指针变化情况。相比起增量更新算法，原始快照搜索能够减少并发标记和重新标记阶段的消耗，避免CMS那样在最终标记阶段停顿时间过长的缺点，但是在用户程序运行过程中确实会产生由跟踪引用变化带来的额外负担。由于G1对写屏障的复杂操作要比CMS消耗更多的运算资源，所以CMS的写屏障实现是直接的同步操作，而G1就不得不将其实现为类似于消息队列的结构，把写前屏障和写后屏障中要做的事情都放到队列里，然后再异步处理。 3 低延迟垃圾收集器衡量垃圾收集器的三项最重要的指标是：内存占用（Footprint）、吞吐量（Throughput）和延迟（Latency）,在这三项指标里，延迟的重要性日益凸显，越发备受关注。其原因是随着计算机硬件的发展、性能的提升，我们越来越能容忍收集器多占用一点点内存，硬件的规格和性能越高，吞吐量也会越高，但对延迟反而会带来负面的效果。 浅色阶段表示必须挂起用户线程，深色表示收集器线程与用户线程是并发工作的。可以看出，Shenandoah和ZGC，几乎整个工作过程全部都是并发的，只有初始标记、最终标记这些阶段有短暂的停顿，这部分停顿的时间基本上是固定的，与堆的容量、堆中对象的数量没有正比例关系。实际上，它们都可以在任意可管理的堆容量下，实现垃圾收集的停顿都不超过十毫秒。 3.1 Shenandoah收集器Shenandoah是由RedHat领导开发的，受到了Oracle的抵制。Oracle明确拒绝在OracleJDK 12中支持Shenandoah收集器，Shenandoah是一款只有OpenJDK才会包含，而OracleJDK里反而不存在的收集器。 Shenandoah和G1有着相似的堆内存布局，在初始标记、并发标记等许多阶段的处理思路上都高度一致，甚至还直接共享了一部分实现代码。 不同之处： 支持并发的整理算法 默认不使用分代收集，不会有新生代Region和老年代Region 摒弃了记忆集，改用名为 “连接矩阵” 的全局数据结构来记录跨Region的引用关系 连接矩阵可以简单理解为一张二维表格，如果Region N有对象指向Region M，就在表格的N行M列中打上一个标记，如图所示，如果Region 5中的对象Baz引用了Region 3的Foo，Foo又引用了Region 1的Bar，那连接矩阵中的5行3列、3行1列就应该被打上标记。在回收时通过这张表格就可以得出哪些Region之间产生了跨代引用。 Shenandoah收集器的工作过程大致可以划分为以下九个阶段: 初始标记：与G1一样，首先标记与GC Roots直接关联的对象，这个阶段仍是“Stop The World”的，但停顿时间与堆大小无关，只与GC Roots的数量相关。 并发标记：与G1一样，遍历对象图，标记出全部可达的对象，这个阶段是与用户线程一起并发的，时间长短取决于堆中存活对象的数量以及对象图的结构复杂程度。 最终标记：与G1一样，处理剩余的SATB扫描，并在这个阶段统计出回收价值最高的Region，将这些Region构成一组回收集。最终标记阶段也会有一小段短暂的停顿。 并发清理：这个阶段用于清理那些整个区域内连一个存活对象都没有找到的Region（这类Region被称为Immediate Garbage Region）。 并发回收：并发回收阶段是Shenandoah与之前HotSpot中其他收集器的核心差异。在这个阶段，Shenandoah要把回收集里面的存活对象先复制一份到其他未被使用的Region之中。复制对象这件事情如果将用户线程冻结起来再做那是相当简单的，但如果两者必须要同时并发进行的话，就变得复杂起来了。其困难点是在移动对象的同时，用户线程仍然可能不停对被移动的对象进行读写访问，移动对象是一次性的行为，但移动之后整个内存中所有指向该对象的引用都还是旧对象的地址，这是很难一瞬间全部改变过来的。对于并发回收阶段遇到的这些困难，Shenandoah将会通过读屏障和被称为“Brooks Pointers”的转发指针来解决。并发回收阶段运行的时间长短取决于回收集的大小。 初始引用更新：并发回收阶段复制对象结束后，还需要把堆中所有指向旧对象的引用修正到复制后的新地址，这个操作称为引用更新。引用更新的初始化阶段实际上并未做什么具体的处理，设立这个阶段只是为了建立一个线程集合点，确保所有并发回收阶段中进行的收集器线程都已完成分配给它们的对象移动任务而已。初始引用更新时间很短，会产生一个非常短暂的停顿。 并发引用更新：真正开始进行引用更新操作，这个阶段是与用户线程一起并发的，时间长短取决于内存中涉及的引用数量的多少。并发引用更新与并发标记不同，它不再需要沿着对象图来搜索，只需要按照内存物理地址的顺序，线性地搜索出引用类型，把旧值改为新值即可。 最终引用更新：解决了堆中的引用更新后，还要修正存在于GC Roots 中的引用。这个阶段是Shenandoah的最后一次停顿，停顿时间只与GC Roots的数量相关。 并发清理：经过并发回收和引用更新之后，整个回收集中所有的Region已再无存活对象，这些Region都变成Immediate Garbage Regions了，最后再调用一次并发清理过程来回收这些Region的内存空间，供以后新对象分配使用。 原书还有关于转发指针原理的讲解，这里暂时略去。 3.2 ZGC收集器ZGC收集器是一款基于Region内存布局的，（暂时）不设分代的，使用了读屏障、染色指针和内存多重映射等技术来实现可并发的标记-整理算法的，以低延迟为首要目标的一款垃圾收集器。 ZGC也采用基于Region的堆内存布局，但与它们不同的是，ZGC的Region（一些官方资料中将它称为Page或者ZPage）具有动态性——动态创建和销毁，以及动态的区域容量大小。在x64硬件平台下，ZGC的Region可以具有大、中、小三类容量： 小型Region（Small Region）：容量固定为2MB，用于放置小于256KB的小对象。 中型Region（Medium Region）：容量固定为32MB，用于放置大于等于256KB但小于4MB的对象。 大型Region（Large Region）：容量不固定，可以动态变化，但必须为2MB的整数倍，用于放置4MB或以上的大对象。每个大型Region中只会存放一个大对象，这也预示着虽然名字叫作“大型 Region”，但它的实际容量完全有可能小于中型Region，最小容量可低至4MB。大型Region在ZGC的实现中是不会被重分配（重分配是ZGC的一种处理动作，用于复制对象的收集器阶段）的，因为复制一个大对象的代价非常高昂。 接下来是ZGC的核心问题——并发整理算法的实现。Shenandoah使用转发指针和读屏障来实现并发整理，ZGC虽然同样用到了读屏障，但用的却是一条与Shenandoah完全不同，更加复杂精巧的解题思路——染色指针。 原书还有关于染色指针原理的讲解，这里暂时略去。 4 选择合适的垃圾收集器4.1 Epsilon收集器JDK11中，出现了一款以不能够进行垃圾收集为“卖点”的垃圾收集器。这里称这种“垃圾收集器”为“自动内存管理子系统”。一个垃圾收集器除了垃圾收集这个本职工作之外，它还要负责堆的管理与布局、对象的分配、与解释器的协作、与编译器的协作、与监控子系统协作等职责。 传统Java有着内存占用较大，在容器中启动时间长，即时编译需要缓慢优化等特点，这对大型应用来说并不是什么太大的问题，但对短时间、小规模的服务形式就有诸多不适。为了应对新的技术潮流，最近几个版本的JDK逐渐加入了提前编译、面向应用的类数据共享等支持。Epsilon也是有着类似的目标，如果读者的应用只要运行数分钟甚至数秒，只要Java虚拟机能正确分配内存，在堆耗尽之前就会退出，那显然运行负载极小、没有任何回收行为的Epsilon便是很恰当的选择。 4.2 收集器的权衡如何选择一款适合自己应用的收集器呢？ 应用程序的主要关注点是什么？如果是数据分析、科学计算类的任务，目标是能尽快算出结果，那吞吐量就是主要关注点；如果是SLA应用，那停顿时间直接影响服务质量，严重的甚至会导致事务超时，这样延迟就是主要关注点；而如果是客户端应用或者嵌入式应用，那垃圾收集的内存占用则是不可忽视的。 运行应用的基础设施如何？譬如硬件规格，要涉及的系统架构是x86-32/64、SPARC还是ARM/Aarch64；处理器的数量多少，分配内存的大小；选择的操作系统是Linux、Solaris还是Windows等。 使用JDK的发行商是什么？版本号是多少？是ZingJDK/Zulu、OracleJDK、Open-JDK、OpenJ9抑或是其他公司的发行版？该JDK对应了《Java虚拟机规范》的哪个版本？ 4.3 虚拟机及垃圾收集器日志在JDK 9以前，HotSpot并没有提供统一的日志处理框架，虚拟机各个功能模块的日志开关分布在不同的参数上，日志级别、循环日志大小、输出格式、重定向等设置在不同功能上都要单独解决。直到JDK 9，这种混乱不堪的局面才终于消失，HotSpot所有功能的日志都收归到了“-Xlog”参数上，这个参数的能力也相应被极大拓展了。 -Xlog[:[selector][:[output][:[decorators][:output-options]]]]这里不详细列举。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"深入理解java虚拟机","slug":"深入理解java虚拟机","permalink":"https://www.codetool.top/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"leetcode101-对称二叉树","slug":"leetcode101-对称二叉树","date":"2020-01-11T11:05:17.000Z","updated":"2020-01-11T11:23:18.479Z","comments":true,"path":"article/leetcode101-对称二叉树/","link":"","permalink":"https://www.codetool.top/article/leetcode101-%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/","excerpt":"","text":"1 原题给定一个二叉树，检查它是否是镜像对称的。 例如，二叉树 [1,2,2,3,4,4,3] 是对称的。 &nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;2&nbsp;/&nbsp;\\ /&nbsp;\\3&nbsp;&nbsp;4&nbsp;4&nbsp;&nbsp;3 但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的: &nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;\\ &nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;3 说明: 如果你可以运用递归和迭代两种方法解决这个问题，会很加分。 2 解法2.1 思想 迭代，自顶向下比较对称位置的节点。 递归，实际上是模拟迭代，将对称位置的节点前后顺序入队列，每次从队列中取出两个元素进行比较。 2.2 代码递归： class Solution { public boolean isSymmetric(TreeNode root) { if(root == null) return true; return isSymetricUnit(root.left,root.right); } public boolean isSymmetricUnit(TreeNode node1,TreeNode node2){ if(node1 == null &amp;&amp; node2 == null) return true; if(node1 == null || node2 == null) return false; if(node1.val != node2.val) return false; return isSymmetricUnit(node1.left,node2.right) &amp;&amp; isSymmetricUnit(node1.right,node2.left); } } 迭代： public boolean isSymmetric(TreeNode root) { Queue&lt;TreeNode> q = new LinkedList&lt;>(); q.add(root); q.add(root); while (!q.isEmpty()) { TreeNode t1 = q.poll(); TreeNode t2 = q.poll(); if (t1 == null &amp;&amp; t2 == null) continue; if (t1 == null || t2 == null) return false; if (t1.val != t2.val) return false; q.add(t1.left); q.add(t2.right); q.add(t1.right); q.add(t2.left); } return true; }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"},{"name":"树","slug":"树","permalink":"https://www.codetool.top/tags/%E6%A0%91/"}]},{"title":"leetcode104-二叉树的最大深度","slug":"leetcode104-二叉树的最大深度","date":"2020-01-11T09:15:31.000Z","updated":"2020-01-11T09:53:42.265Z","comments":true,"path":"article/leetcode104-二叉树的最大深度/","link":"","permalink":"https://www.codetool.top/article/leetcode104-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/","excerpt":"","text":"1 原题给定一个二叉树，找出其最大深度。 二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。 说明: 叶子节点是指没有子节点的节点。 示例：给定二叉树 [3,9,20,null,null,15,7]， &nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;/ \\&nbsp;&nbsp;9&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;15&nbsp;&nbsp;&nbsp;7 返回它的最大深度 3 。 2 解法2.1 思想 自底向上，每个节点是左右两个孩子节点的深度的最大值+1 自顶向下，依次更新最大高度 2.2 代码自底向上： class Solution { public int maxDepth(TreeNode root) { return depth(root); } public int depth(TreeNode root){ if(root == null) return 0; if(root.left == null &amp;&amp; root.right == null) return 1; return Math.max(depth(root.left),depth(root.right))+1; } } 自顶向下： class Solution { int depth = 0; public int maxDepth(TreeNode root) { depth(root,1); return depth; } public void depth(TreeNode root,int cur){ if(root == null) return; if(cur>depth) depth = cur; depth(root.left,cur+1); depth(root.right,cur+1); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"},{"name":"树","slug":"树","permalink":"https://www.codetool.top/tags/%E6%A0%91/"}]},{"title":"leetcode102-二叉树的层次遍历","slug":"leetcode102-二叉树的层次遍历","date":"2020-01-11T08:33:52.000Z","updated":"2020-01-25T19:20:13.746Z","comments":true,"path":"article/leetcode102-二叉树的层次遍历/","link":"","permalink":"https://www.codetool.top/article/leetcode102-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/","excerpt":"","text":"1 原题给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。 例如:给定二叉树: [3,9,20,null,null,15,7], &nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;/ \\&nbsp;&nbsp;9&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;15&nbsp;&nbsp;&nbsp;7 返回其层次遍历结果： [&nbsp;&nbsp;[3],&nbsp;&nbsp;[9,20],&nbsp;&nbsp;[15,7]] 2 解法2.1 思想 迭代，广度优先搜索，但需要记录元素是哪一层的。 递归，深度优先搜索，将元素加进每层对应的List中 2.2 代码迭代： class Solution { public List&lt;List&lt;Integer>> levelOrder(TreeNode root) { Queue&lt;TreeNode> queue = new LinkedList&lt;>(); List&lt;List&lt;Integer>> ans = new ArrayList&lt;>(); List&lt;Integer> cur = new ArrayList&lt;>(); if(root == null) return new ArrayList&lt;List&lt;Integer>>(); queue.offer(root); queue.offer(null);//以null作为每层结束的标志符 while(!queue.isEmpty()){ TreeNode node = queue.poll(); if(node == null){ if(cur.size()!=0) ans.add(cur); cur = new ArrayList&lt;>(); }else{ cur.add(node.val); if(node.left!=null) queue.offer(node.left); if(node.right!=null) queue.offer(node.right); //若队首为null说明这一层的节点的子节点已经全部加入队列了，需要加入一个null if(queue.peek()==null) queue.offer(null); } } return ans; } } 递归： class Solution { List&lt;List&lt;Integer>> ans = new ArrayList&lt;>(); public List&lt;List&lt;Integer>> levelOrder(TreeNode root) { if(root==null) return ans; DFS(root,0); return ans; } public void DFS(TreeNode root,int level){ if(ans.size()==level) ans.add(new ArrayList&lt;Integer>()); ans.get(level).add(root.val); if(root.left!=null) DFS(root.left,level+1); if(root.right!=null) DFS(root.right,level+1); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"BFS","slug":"BFS","permalink":"https://www.codetool.top/tags/BFS/"},{"name":"队列","slug":"队列","permalink":"https://www.codetool.top/tags/%E9%98%9F%E5%88%97/"}]},{"title":"StringTable性能调优","slug":"stringtable性能调优","date":"2020-01-10T14:55:10.000Z","updated":"2020-01-10T16:01:00.702Z","comments":true,"path":"article/stringtable性能调优/","link":"","permalink":"https://www.codetool.top/article/stringtable%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/","excerpt":"","text":"StringTable是jvm运行时常量池表中的字符串常量池，深入理解java虚拟机第三版读书笔记02有相关的介绍。 无论是运行时常量表还是StringTable，他们内部都是通过哈希表来保证字符串常量的唯一性，可以通过配置jvm参数-XX:+PrintStringTableStatistics来查看常量表的详细信息。 1 验证StringTable的垃圾回收首先我们运行下面这段代码：使用虚拟机参数：-XX:+PrintGCDetails -XX:+PrintStringTableStatistics public static void main(String[] args) throws IOException { for(int i = 0;i&lt;10000;i++){ String.valueOf(i).intern(); } } 截取部分输出： StringTable statistics: Number of buckets : 60013 = 480104 bytes, avg 8.000 Number of entries : 11695 = 280680 bytes, avg 24.000 Number of literals : 11695 = 635176 bytes, avg 54.312可见StringTable总共有60013个桶，10000个字符串全部进入常量池，且没有垃圾回收的信息输出。 那我们让进入堆的内存适度减小，让它有可能发生堆空间不足的情况： 使用虚拟机参数：-Xmx10m -XX:+PrintGCDetails -XX:+PrintStringTableStatistics再次运行上面那段代码 截取部分输出： [GC (Allocation Failure) [PSYoungGen: 2048K-&gt;504K(2560K)] 2048K-&gt;720K(9728K), 0.0014597 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] Number of buckets : 60013 = 480104 bytes, avg 8.000 Number of entries : 7981 = 191544 bytes, avg 24.000 Number of literals : 7981 = 456584 bytes, avg 57.209可以看到，这次10000个字符串并没有全部进入常量池，一部分被回收掉了。 2 调整桶的个数我们都知道哈希表的存取效率和桶的个数是紧密相关的，桶的个数太大则空间有可能浪费，太小则可能效率过低。 我们运行这段代码：使用虚拟机参数-XX:+PrintStringTableStatistics public static void main(String[] args) throws IOException { long start = System.nanoTime(); List&lt;String> list = new ArrayList&lt;>(); for(int i = 0;i&lt;500000;i++){ list.add(String.valueOf(i).intern()); } System.out.println(\"cost:\"+(System.nanoTime()-start)/1000000000.0 + \"s\"); } 截取部分输出： cost:0.0997132sStringTable statistics: Number of buckets : 60013 = 480104 bytes, avg 8.000 Number of entries : 501704 = 12040896 bytes, avg 24.000 Number of literals : 501704 = 28075720 bytes, avg 55.961我们使用虚拟机参数来调整桶的个数：使用虚拟机参数-XX:StringTableSize=1009 -XX:+PrintStringTableStatistics cost:3.1234771s Number of buckets : 1009 = 8072 bytes, avg 8.000 Number of entries : 503097 = 12074328 bytes, avg 24.000 Number of literals : 503097 = 28176912 bytes, avg 56.007可见消耗时间明显增大 我们再将桶的个数调至更大：使用虚拟机参数-XX:StringTableSize=1009 -XX:+PrintStringTableStatistics 截取部分输出： cost:0.0879392sStringTable statistics: Number of buckets : 1000000 = 8000000 bytes, avg 8.000 Number of entries : 501704 = 12040896 bytes, avg 24.000 Number of literals : 501704 = 28075720 bytes, avg 55.961可见消耗时间有所减少 3 是否该使用intern方法将字符串入池我们运行下面这段代码，使用jvisualvm查看堆内存的变化情况： public static void main(String[] args) throws IOException { System.in.read(); List&lt;String> list = new ArrayList&lt;>(); for(int n = 0;n&lt;10;n++){//每个字符串搞出10次 for(int i = 0;i&lt;500000;i++){ list.add(String.valueOf(i)); } System.out.println(\"part \"+n+\" has done\"); } System.in.read(); } 可见String和char[]占用了极高内存（接近300M） 我们在原来代码的基础上使用intern方法： public static void main(String[] args) throws IOException { System.in.read(); List&lt;String> list = new ArrayList&lt;>(); for(int n = 0;n&lt;10;n++){//每个字符串搞出10次 for(int i = 0;i&lt;500000;i++){ list.add(String.valueOf(i).intern()); } System.out.println(\"part \"+n+\" has done\"); } System.in.read(); } 再次查看运行结束后的内存占用： 可见这次String和char[]占用的内存接近100M，相比减少很多。 所以当java程序可能引用很多相同内容的字符串的时候，最好将字符串入池，能有效减轻内存负担，所增开销仅是intern方法内部开销。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"字符串常量池","slug":"字符串常量池","permalink":"https://www.codetool.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%B8%B8%E9%87%8F%E6%B1%A0/"}]},{"title":"leetcode145-二叉树的后序遍历","slug":"leetcode145-二叉树的后序遍历","date":"2020-01-10T08:03:17.000Z","updated":"2020-01-11T11:23:38.568Z","comments":true,"path":"article/leetcode145-二叉树的后序遍历/","link":"","permalink":"https://www.codetool.top/article/leetcode145-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/","excerpt":"","text":"1 原题给定一个二叉树，返回它的 后序 遍历。 示例: 输入: [1,null,2,3]&nbsp;1&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;/&nbsp;3输出: [3,2,1] 进阶: 递归算法很简单，你可以通过迭代算法完成吗？ 2 解法2.1 思想 递归 迭代（不同于前序遍历和中序遍历，后序遍历迭代更麻烦） 逆转前序遍历 2.2 代码递归： /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { List&lt;Integer> ans = new ArrayList&lt;>(); public List&lt;Integer> postorderTraversal(TreeNode root) { if(root!=null){ postorderTraversal(root.left); postorderTraversal(root.right); ans.add(root.val); } return ans; } } 迭代： public List&lt;Integer> postorderTraversal(TreeNode root) { List&lt;Integer> list = new ArrayList&lt;>(); Stack&lt;TreeNode> stack = new Stack&lt;>(); TreeNode cur = root; TreeNode last = null; while (cur != null || !stack.isEmpty()) { if (cur != null) { stack.push(cur); cur = cur.left; } else { TreeNode temp = stack.peek(); //是否变到右子树 if (temp.right != null &amp;&amp; temp.right != last) { cur = temp.right; } else { list.add(temp.val); last = temp; stack.pop(); } } } return list; } 逆转前序遍历：（来源leetcode官方） class Solution { public List&lt;Integer> postorderTraversal(TreeNode root) { LinkedList&lt;TreeNode> stack = new LinkedList&lt;>(); LinkedList&lt;Integer> output = new LinkedList&lt;>(); if (root == null) { return output; } stack.add(root); while (!stack.isEmpty()) { TreeNode node = stack.pollLast(); output.addFirst(node.val); if (node.left != null) { stack.add(node.left); } if (node.right != null) { stack.add(node.right); } } return output; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"},{"name":"树","slug":"树","permalink":"https://www.codetool.top/tags/%E6%A0%91/"}]},{"title":"leetcode144-二叉树的前序遍历","slug":"leetcode144-二叉树的前序遍历","date":"2020-01-10T07:37:59.000Z","updated":"2020-01-10T07:51:06.168Z","comments":true,"path":"article/leetcode144-二叉树的前序遍历/","link":"","permalink":"https://www.codetool.top/article/leetcode144-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/","excerpt":"","text":"1 原题给定一个二叉树，返回它的 前序 遍历。 示例: 输入: [1,null,2,3]&nbsp;1&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;/&nbsp;3输出: [1,2,3] 进阶: 递归算法很简单，你可以通过迭代算法完成吗？ 2 解法2.1 思想递归、迭代，类似 leetcode94-二叉树的中序遍历 2.2 代码递归： /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { List&lt;Integer> ans = new ArrayList&lt;>(); public List&lt;Integer> preorderTraversal(TreeNode root) { if(root!=null){ ans.add(root.val); preorderTraversal(root.left); preorderTraversal(root.right); } return ans; } } 迭代： public class Solution { public List &lt;Integer> inorderTraversal(TreeNode root) { List &lt;Integer> res = new ArrayList&lt;>(); Stack &lt;TreeNode> stack = new Stack&lt;>(); TreeNode curr = root; while (curr != null || !stack.isEmpty()) { while (curr != null) { stack.push(curr); res.add(curr.val); curr = curr.left; } curr = stack.pop(); curr = curr.right; } return res; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"},{"name":"树","slug":"树","permalink":"https://www.codetool.top/tags/%E6%A0%91/"}]},{"title":"leetcode410-分割数组的最大值","slug":"leetcode410-分割数组的最大值","date":"2020-01-09T13:58:22.000Z","updated":"2020-01-09T15:32:05.998Z","comments":true,"path":"article/leetcode410-分割数组的最大值/","link":"","permalink":"https://www.codetool.top/article/leetcode410-%E5%88%86%E5%89%B2%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/","excerpt":"","text":"1 原题给定一个非负整数数组和一个整数 m，你需要将这个数组分成 m 个非空的连续子数组。设计一个算法使得这 m 个子数组各自和的最大值最小。 注意:数组长度 n 满足以下条件: 1 ≤ n ≤ 1000 1 ≤ m ≤ min(50, n) 示例： 输入:nums = [7,2,5,10,8]m = 2 输出:18 解释:一共有四种方法将nums分割为2个子数组。其中最好的方式是将其分为[7,2,5] 和 [10,8]，因为此时这两个子数组各自的和的最大值为18，在所有情况中最小。 2 解法2.1 思想二分查找。要分成连续子数组，子数组的和的下限和上限分别是值最大的元素和所有元素之和，根据和不大于mid的子数组个数来逼近一个值，就是分割数组的最大值。 2.2 代码class Solution { public int splitArray(int[] nums, int m) { int max = nums[0]; int sum = 0; for(int i:nums){ if(i>max) max = i; sum += i; } long start = max, end = sum; while(start&lt;end){ long mid = (start + end)/2; long temp = 0; int count = 1; for(int i:nums) { temp += i; if(temp>mid) { temp = i; ++count; } } if(count>m) start = mid + 1; else end = mid; } return (int)start; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"leetcode4-寻找两个有序数组的中位数","slug":"leetcode4-寻找两个有序数组的中位数","date":"2020-01-09T09:20:24.000Z","updated":"2020-01-09T15:33:57.153Z","comments":true,"path":"article/leetcode4-寻找两个有序数组的中位数/","link":"","permalink":"https://www.codetool.top/article/leetcode4-%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/","excerpt":"","text":"这道题我没想出符合条件的思路 1 原题给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。 请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。 你可以假设 nums1 和 nums2 不会同时为空。 示例1： nums1 = [1, 3]nums2 = [2] 则中位数是 2.0 示例2： nums1 = [1, 2]nums2 = [3, 4] 则中位数是 (2 + 3)/2 = 2.5 2 解法2.1 思想二分查找合并后的数组中第k/2个数，排除法,参考 https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-2/ 2.2 代码class Solution { public double findMedianSortedArrays(int[] nums1, int[] nums2) { int n = nums1.length; int m = nums2.length; int left = (n + m + 1) / 2; int right = (n + m + 2) / 2; //将偶数和奇数的情况合并，如果是奇数，会求两次同样的 k 。 return (getKth(nums1, 0, n - 1, nums2, 0, m - 1, left) + getKth(nums1, 0, n - 1, nums2, 0, m - 1, right)) * 0.5; } private int getKth(int[] nums1, int start1, int end1, int[] nums2, int start2, int end2, int k) { int len1 = end1 - start1 + 1; int len2 = end2 - start2 + 1; //让 len1 的长度小于 len2，这样就能保证如果有数组空了，一定是 len1 if (len1 > len2) return getKth(nums2, start2, end2, nums1, start1, end1, k); if (len1 == 0) return nums2[start2 + k - 1]; if (k == 1) return Math.min(nums1[start1], nums2[start2]); int i = start1 + Math.min(len1, k / 2) - 1; int j = start2 + Math.min(len2, k / 2) - 1; if (nums1[i] > nums2[j]) { return getKth(nums1, start1, end1, nums2, j + 1, end2, k - (j - start2 + 1)); } else { return getKth(nums1, i + 1, end1, nums2, start2, end2, k - (i - start1 + 1)); } } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"深入理解java虚拟机第三版读书笔记04","slug":"深入理解java虚拟机第三版读书笔记04","date":"2020-01-08T14:45:04.000Z","updated":"2020-01-12T15:52:47.219Z","comments":true,"path":"article/深入理解java虚拟机第三版读书笔记04/","link":"","permalink":"https://www.codetool.top/article/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89%E7%89%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B004/","excerpt":"","text":"以下是第三章 垃圾收集器与内存分配策略的内容 1 概述程序计数器、虚拟机栈、本地方法栈是线程独有的，栈帧更是随方法结束而消亡，不需要垃圾回收。而堆和方法区则需要经过垃圾回收的设计 2 对象已死？2.1 引用计数算法在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的。 特点：虽然占用了一些额外的内存空间来进行计数，但它的原理简单，判定效率也很高，在大多数情况下它都是一个不错的算法。但是，在Java 领域，至少主流的Java虚拟机里面都没有选用引用计数算法来管理内存，主要原因是，这个看似简单的算法有很多例外情况要考虑，必须要配合大量额外处理才能保证正确地工作，譬如单纯的引用计数就很难解决对象之间相互循环引用的问题。 2.2 可达性分析算法这个算法的基本思路就是通过一系列称为 “GC Roots” 的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程所走过的路径称为“引用链”，如果某个对象到GC Roots间没有任何引用链相连，或者用图论的话来说就是从GC Roots到这个对象不可达时，则证明此对象是不可能再被使用的。 如图所示，对象object 5、object 6、object 7虽然互有关联，但是它们到GC Roots是不可达的，因此它们将会被判定为可回收的对象。 固定可作为GC Roots的对象包括以下几种： 在虚拟机栈（栈帧中的本地变量表）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。 在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量。 在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用。 ·在本地方法栈中JNI（即通常所说的Native方法）引用的对象。 Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。 所有被同步锁（synchronized关键字）持有的对象。 反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。 2.3 再谈引用需求：有一类对象，当内存空间还足够时，能保留在内存之中，如果内存空间在进行垃圾收集后仍然非常紧张，那就可以抛弃这些对象——很多系统的缓存功能都符合这样的应用场景。 在JDK 1.2版之后，Java对引用的概念进行了扩充，将引用分为强引用、软引用、弱引用和虚引用4种，这4种引用强度依次逐渐减弱。 强引用：传统的引用关系，无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。 软引用：还有用，但非必须的对象。在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，在JDK 1.2版之后提供了SoftReference类来实现软引用。 弱引用：非必须对象，但是它的强度比软引用更弱一些。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK 1.2版之后提供了WeakReference类来实现弱引用 虚引用：一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知。在JDK 1.2版之后提供了PhantomReference类来实现虚引用。 ## 生存还是死亡？ 即使在可达性分析算法中判定为不可达的对象，也不是“非死不可”的，这时候它们暂时还处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经历两次标记过程：如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记，随后进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。假如对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，那么虚拟机将这两种情况都视为“没有必要执行”。 如果这个对象被判定为确有必要执行finalize()方法，那么该对象将会被放置在一个名为F-Queue的队列之中，并在稍后由一条由虚拟机自动建立的、低调度优先级的Finalizer线程去执行它们的finalize()方法。 网上有称这种重写了finalize方法的对象为终结器引用。 finalize()是解救一个对象的最后机会 2.4 回收方法区虚拟机规范不强制要求实现方法区的垃圾回收，方法区的垃圾回收性价比较低。方法区的垃圾收集主要回收两部分内容：废弃的常量和不再使用的类型。 要判定一个类型是否属于“不再被使用的类”需要同时满足下面三个条件： 该类所有的实例都已经被回收，也就是Java堆中不存在该类及其任何派生子类的实例。 加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如OSGi、JSP的重加载等，否则通常是很难达成的。 该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。 然而满足了上面三个条件也不一定要回收，-Xnoclassgc参数可以指定是否要进行类型回收。 -verbose:class、-XX:+TraceClassLoading可以输出类加载信息。-XX:+TraceClassUnLoading可以输出类卸载信息。 3 垃圾收集算法从如何判定对象消亡的角度出发，垃圾收集算法可以划分为“引用计数式垃圾收集”和“追踪式垃圾收集”两大类，这里介绍的都是“追踪式垃圾收集”。 3.1 分代收集理论分代收集理论实际是实质是一套符合大多数程序运行实际情况的经验法则，它建立在两个分代假说上： 弱分代假说：绝大多数对象都是朝生夕灭的。 强分代假说：熬过越多次垃圾收集过程的对象就越难以消亡。 多款常用垃圾收集器的一致的设计原则：收集器应该将Java堆划分出不同的区域，然后将回收对象依据其年龄（年龄即对象熬过垃圾收集过程的次数）分配到不同的区域之中存储。 在Java堆划分出不同的区域之后，垃圾收集器才可以每次只回收其中某一个或者某些部分的区域——因而才有了 “Minor GC” “Major GC” “Full GC” 这样的回收类型的划分；也才能够针对不同的区域安排与里面存储对象存亡特征相匹配的垃圾收集算法——因而发展出了“标记-复制算法”“标记-清除算法”“标记-整理算法”等针对性的垃圾收集算法。 现在的商用Java虚拟机一般至少会把Java堆划分为新生代（Young Generation）和老年代（Old Generation）两个区域。顾名思义，在新生代中，每次垃圾收集时都发现有大批对象死去，而每次回收后存活的少量对象，将会逐步晋升到老年代中存放。 一个明显的困难：对象不是孤立的，对象之间会存在跨代引用。 为了解决这个问题，就需要对分代收集理论添加第三条经验法则：跨代引用假说：跨代引用相对于同代引用来说仅占极少数。（存在互相引用关系的两个对象，是应该倾向于同时生存或者同时消亡的。） 解决方案：在新生代上建立一个全局的数据结构（该结构被称为 “记忆集”），这个结构把老年代划分成若干小块，标识出老年代的哪一块内存会存在跨代引用。此后当发生Minor GC时，只有包含了跨代引用的小块内存里的对象才会被加入到GC Roots进行扫描。 名词解释： 部分收集（Partial GC）：指目标不是完整收集整个Java堆的垃圾收集，其中又分为： 新生代收集（Minor GC/Young GC）：指目标只是新生代的垃圾收集。 老年代收集（Major GC/Old GC）：指目标只是老年代的垃圾收集。目前只有CMS收集器会有单独收集老年代的行为。“Major GC”这个说法现在有点混淆,可能是指老年代的收集或是整堆收集。 混合收集（Mixed GC）：指目标是收集整个新生代以及部分老年代的垃圾收集。目前只有G1收集器会有这种行为。 整堆收集（Full GC）：收集整个Java堆和方法区的垃圾收集。 相关VM参数： 含义 参数 堆初始大小 -Xms 堆最大大小 -Xmx或-XX:MaxHeapSize=size 新生代大小 -Xmn或（-XX:NewSize=size + -XX:MaxNewSize=size） 幸存区比例（动态） -XX:InitialSurvivorRatio=ratio和-XX:UseAdaptiveSizePolicy 幸存区比例 -XX:SurvivorRatio=ratio 晋升阈值 -XX:MaxTenuringThreshold=threshold 晋升详情 -XX:+PrintTenuringDistribution GC详情 -XX:+PrintGCDetails -verbose:gc FullGC前先MinorGC -XX:+ScavengeBeforeFullGC 3.2 标记-清除算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象。 主要缺点： 执行效率不稳定，如果Java堆中包含大量对象，而且其中大部分是需要被回收的，这时必须进行大量标记和清除的动作，导致标记和清除两个过程的执行效率都随对象数量增长而降低 内存空间的碎片化问题，标记、清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作 3.3 标记-复制算法将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。 适用于多数对象是可回收的，缺点是可用内存缩小为了原来的一半，空间浪费太多。 现在的商用Java虚拟机大多都优先采用了这种收集算法去回收新生代。 一种更优化的半区复制分代策略:“Appel式回收”，HotSpot虚拟机的Serial、ParNew等新生代收集器均采用了这种策略来设计新生代的内存布局： 把新生代分为一块较大的Eden空间和两块较小的Survivor空间，每次分配内存只使用Eden和其中一块Survivor。发生垃圾搜集时，将Eden和Survivor中仍然存活的对象一次性复制到另外一块Survivor空间上，然后直接清理掉Eden和已用过的那块Survivor空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8∶1，也即每次新生代中可用内存空间为整个新生代容量的90%（Eden的80%加上一个Survivor的10%），只有一个Survivor空间，即10%的新生代是会被“浪费”的。还有一个充当罕见情况的“逃生门”的安全设计，当Survivor空间不足以容纳一次Minor GC之后存活的对象时，就需要依赖其他内存区域（实际上大多就是老年代）进行分配担保。 3.4 标记-整理算法针对老年代的存亡特征设计的，其中的标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向内存空间一端移动，然后直接清理掉边界以外的内存。 如果移动存活对象，尤其是在老年代这种每次回收都有大量对象存活区域，移动存活对象并更新所有引用这些对象的地方将会是一种极为负重的操作，而且这种对象移动操作必须全程暂停用户应用程序才能进行（最新的ZGC和Shenandoah收集器使用读屏障技术实现了整理过程与用户线程的并发执行）；但如果跟标记-清除算法那样完全不考虑移动和整理存活对象的话，弥散于堆中的存活对象导致的空间碎片化问题就只能依赖更为复杂的内存分配器和内存访问器来解决。 移动则内存回收时会更复杂，不移动则内存分配时会更复杂。HotSpot虚拟机里面关注吞吐量的Parallel Scavenge收集器是基于标记-整理算法的，而关注延迟的CMS收集器则是基于标记-清除算法的。 还有一种解决方案是让虚拟机平时多数时间都采用标记-清除算法，暂时容忍内存碎片的存在，直到内存空间的碎片化程度已经大到影响对象分配时，再采用标记-整理算法收集一次，以获得规整的内存空间。基于标记-清除算法的CMS收集器面临空间碎片过多时采用的就是这种处理办法。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"深入理解java虚拟机","slug":"深入理解java虚拟机","permalink":"https://www.codetool.top/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"leetcode287-寻找重复数","slug":"leetcode287-寻找重复数","date":"2020-01-07T05:07:59.000Z","updated":"2020-01-07T14:05:23.683Z","comments":true,"path":"article/leetcode287-寻找重复数/","link":"","permalink":"https://www.codetool.top/article/leetcode287-%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0/","excerpt":"","text":"1 原题给定一个包含 n + 1 个整数的数组 nums ，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。 示例1： 输入: [1,3,4,2,2]输出: 2 示例2： 输入: [3,1,3,4,2]输出: 3 说明： 不能更改原数组（假设数组是只读的）。 只能使用额外的 O(1) 的空间。 时间复杂度小于 O(n2) 。 数组中只有一个重复的数字，但它可能不止重复出现一次。 2 解法2.1 思想有排序和哈希集的方法，但要满足4点限制，可以使用二分查找或快慢指针： 二分查找，参考 https://leetcode-cn.com/problems/find-the-duplicate-number/solution/er-fen-fa-si-lu-ji-dai-ma-python-by-liweiwei1419/ 快慢指针，将index看成有向图里的节点，将对应的value看成节点指向的节点。那么有重复元素必然会形成环。如图： 那么入环的节点值就是重复出现的元素，可以使用leetcode142-环形链表II的双指针法来找出入环的元素。 2.2 代码哈希集： class Solution { public int findDuplicate(int[] nums) { HashSet&lt;Integer> set = new HashSet&lt;>(); for(int i:nums){ if(set.contains(i)) return i; set.add(i); } return -1; } } 二分查找： public class Solution { public int findDuplicate(int[] nums) { int len = nums.length; int left = 1; int right = len - 1; while (left &lt; right) { // int mid = left + (right - left) / 2; int mid = (left + right) >>> 1; int counter = 0; for (int num : nums) { if (num &lt;= mid) { counter += 1; } } if (counter > mid) { right = mid; } else { left = mid + 1; } } return left; } } 快慢指针： class Solution { public int findDuplicate(int[] nums) { int slow = nums[0]; int fast = nums[0]; do{ slow = nums[slow]; //相当于走一步 fast = nums[nums[fast]]; //相当于走两步 } while (slow!=fast); slow = nums[0]; while (slow != fast){ slow = nums[slow]; fast = nums[fast]; } return slow; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"哈希集","slug":"哈希集","permalink":"https://www.codetool.top/tags/%E5%93%88%E5%B8%8C%E9%9B%86/"}]},{"title":"leetcode154-寻找旋转排序数组中的最小值II","slug":"leetcode154-寻找旋转排序数组中的最小值II","date":"2020-01-07T04:29:31.000Z","updated":"2020-01-07T04:46:01.956Z","comments":true,"path":"article/leetcode154-寻找旋转排序数组中的最小值II/","link":"","permalink":"https://www.codetool.top/article/leetcode154-%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BCII/","excerpt":"","text":"1 原题假设按照升序排序的数组在预先未知的某个点上进行了旋转。 ( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。 请找出其中最小的元素。 注意数组中可能存在重复的元素。 示例1： 输入： [1,3,5]输出： 1 示例2： 输入： [2,2,2,0,1]输出： 0 说明： 这道题是 寻找旋转排序数组中的最小值 的延伸题目。 允许重复会影响算法的时间复杂度吗？会如何影响，为什么？ 2 解法2.1 思想 线性查找 二分查找,参考 https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/solution/154-find-minimum-in-rotated-sorted-array-ii-by-jyd/ 2.2 代码 线性查找 class Solution { public int findMin(int[] nums) { int min = nums[0]; for(int i:nums){ if(i&lt;min){ min=i; break; } } return min; } } 二分查找 class Solution { public int findMin(int[] nums) { int left = 0, right = nums.length - 1; while (left &lt; right) { int mid = (left + right) / 2; if (nums[mid] > nums[right]) left = mid + 1; else if (nums[mid] &lt; nums[right]) right = mid; else right = right - 1; } return nums[left]; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"深入理解java虚拟机第三版读书笔记03","slug":"深入理解java虚拟机第三版读书笔记03","date":"2020-01-06T08:36:25.000Z","updated":"2020-01-20T17:43:56.175Z","comments":true,"path":"article/深入理解java虚拟机第三版读书笔记03/","link":"","permalink":"https://www.codetool.top/article/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89%E7%89%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B003/","excerpt":"","text":"续深入理解java虚拟机第三版读书笔记02 1 HotSpot虚拟机对象探秘1.1 对象的创建 当Java虚拟机遇到一条字节码new指令时，首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程 类加载检查通过后，为新生对象分配内存。有两种方法： 假设Java堆中内存是绝对规整的，所有被使用过的内存都被放在一边，空闲的内存被放在另一边，中间放着一个指针作为分界点的指示器，那所分配内存就仅仅是把那个指针向空闲空间方向挪动一段与对象大小相等的距离，这种分配方式称为 “指针碰撞” 如果Java堆中的内存并不是规整的，已被使用的内存和空闲的内存相互交错在一起，那就没有办法简单地进行指针碰撞了，虚拟机就必须维护一个列表，记录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录，这种分配方式称为“空闲列表” 同步问题：仅仅修改一个指针所指向的位置，在并发情况下也并不是线程安全的，可能出现正在给对象A分配内存，指针还没来得及修改，对象B又同时使用了原来的指针来分配内存的情况。解决方法： 对分配内存空间的动作进行同步处理（实际上虚拟机是采用CAS配上失败重试的方式保证更新操作的原子性） 把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配一小块内存，称为本地线程分配缓冲（TLAB），是否启用TLAB可以通过-XX：+/-UseTLAB参数来设定。 将分配到的内存空间（但不包括对象头）都初始化为零值 对对象进行必要的设置，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码（实际上对象的哈希码会延后到真正调用Object::hashCode()方法时才计算）、对象的GC分代年龄等信息。 执行 ()方法（构造函数） 1.2 对象的内存布局在HotSpot虚拟机里，对象在堆内存中的存储布局可以划分为三个部分：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）。 1.2.1 对象头Markword:存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等，这部分数据的长度在32位和64位的虚拟机（未开启压缩指针）中分别为32个比特和64个比特。 类型指针，即对象指向它的类型元数据的指针，Java虚拟机通过这个指针来确定该对象是哪个类的实例。并不是所有的虚拟机实现都必须在对象数据上保留类型指针，这部分数据的长度在32位和64位的虚拟机（未开启压缩指针）中分别为32个比特和64个比特，如果开启指针压缩，可以在64位机上也变成32比特。 开启指针压缩：-XX:+UseCompressedOops 数组长度： 如果对象是一个Java数组，那在对象头中还必须有一块用于记录数组长度的数据，这部分数据的长度是32比特。 1.2.2 实例数据对象真正存储的有效信息，即我们在程序代码里面所定义的各种类型的字段内容，无论是从父类继承下来的，还是在子类中定义的字段都必须记录起来。 这部分的存储顺序会受到虚拟机分配策略参数（-XX：FieldsAllocationStyle参数）和字段在Java源码中定义顺序的影响。 1.2.3 对齐填充由于HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，因此如果对象实例数据部分没有对齐的话，就需要通过对齐填充来补全。 1.3 对象的访问定位Java程序会通过栈上的reference数据来操作堆上的具体对象。对象访问方式是由虚拟机实现而定的，主流的访问方式主要有使用句柄和直接指针两种： 句柄访问：可能会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自具体的地址信息，其结构如图所示： 好处：好处就是reference中存储的是稳定句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而reference本身不需要被修改。 直接指针访问:Java堆中对象的内存布局就必须考虑如何放置访问类型数据的相关信息，reference中存储的直接就是对象地址，如果只是访问对象本身的话，就不需要多一次间接访问的开销，如图所示: 好处：速度更快，它节省了一次指针定位的时间开销，由于对象访问在Java中非常频繁，因此这类开销积少成多也是一项极为可观的执行成本，HotSpot是使用的这种方式。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"深入理解java虚拟机","slug":"深入理解java虚拟机","permalink":"https://www.codetool.top/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"深入理解java虚拟机第三版读书笔记02","slug":"深入理解java虚拟机第三版读书笔记02","date":"2020-01-05T12:08:33.000Z","updated":"2020-01-20T17:33:45.190Z","comments":true,"path":"article/深入理解java虚拟机第三版读书笔记02/","link":"","permalink":"https://www.codetool.top/article/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89%E7%89%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B002/","excerpt":"","text":"以下是第二章 Java内存区域与内存溢出异常的内容 1 运行时数据区域 1.1 程序计数器1.1.1 特点 程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。 程序计数器是线程私有的，线程轮换之后通过程序计数器确定要执行的指令位置。 不存在内存溢出。 1.2 Java虚拟机栈1.2.1 特点 Java虚拟机栈也是线程私有的,它的生命周期与线程相同。 虚拟机栈描述的是Java方法执行的线程内存模型：每个方法被执行的时候，Java虚拟机都会同步创建一个栈帧用于存储局部变量表、操作数栈、动态连接、方法出口等信息。栈帧的入栈出栈对应一个方法的调用。 局部变量表存放了编译期可知的各种Java虚拟机基本数据类型、对象引用和返回地址。 局部变量表中的存储空间以 局部变量槽（Slot） 来表示，其中64位长度的long和double类型的数据会占用两个变量槽，其余的数据类型只占用一个。局部变量表所需的内存空间在编译期间完成分配。 1.2.2 异常 如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常，可能会有这两种情况： 栈帧过多 栈帧过大 如果Java虚拟机栈容量可以动态扩展，当栈扩展时无法申请到足够的内存会抛出OutOfMemoryError异常。（HotSpot虚拟机的栈容量是不可以动态扩展的，也不会导致这种异常） 代码演示：通过-Xss参数来设定栈的大小 （无限递归导致栈帧过多） /** * VM Args：-Xss128k * @author zzm */ public class JavaVMStackSOF { private int stackLength = 1; public void stackLeak() { stackLength++; stackLeak(); } public static void main(String[] args) throws Throwable { JavaVMStackSOF oom = new JavaVMStackSOF(); try { oom.stackLeak(); } catch (Throwable e) { System.out.println(\"stack length:\" + oom.stackLength); throw e; } } } （栈帧太大） /** * @author zzm */ public class JavaVMStackSOF { private static int stackLength = 0; public static void test() { long unused1, unused2, unused3, unused4, unused5, unused6, unused7, unused8, unused9, unused10, unused11, unused12, unused13, unused14, unused15, unused16, unused17, unused18, unused19, unused20, unused21, unused22, unused23, unused24, unused25, unused26, unused27, unused28, unused29, unused30, unused31, unused32, unused33, unused34, unused35, unused36, unused37, unused38, unused39, unused40, unused41, unused42, unused43, unused44, unused45, unused46, unused47, unused48, unused49, unused50, unused51, unused52, unused53, unused54, unused55, unused56, unused57, unused58, unused59, unused60, unused61, unused62, unused63, unused64, unused65, unused66, unused67, unused68, unused69, unused70, unused71, unused72, unused73, unused74, unused75, unused76, unused77, unused78, unused79, unused80, unused81, unused82, unused83, unused84, unused85, unused86, unused87, unused88, unused89, unused90, unused91, unused92, unused93, unused94, unused95, unused96, unused97, unused98, unused99, unused100; stackLength ++; test(); unused1 = unused2 = unused3 = unused4 = unused5 = unused6 = unused7 = unused8 = unused9 = unused10 = unused11 = unused12 = unused13 = unused14 = unused15 = unused16 = unused17 = unused18 = unused19 = unused20 = unused21 = unused22 = unused23 = unused24 = unused25 = unused26 = unused27 = unused28 = unused29 = unused30 = unused31 = unused32 = unused33 = unused34 = unused35 = unused36 = unused37 = unused38 = unused39 = unused40 = unused41 = unused42 = unused43 = unused44 = unused45 = unused46 = unused47 = unused48 = unused49 = unused50 = unused51 = unused52 = unused53 = unused54 = unused55 = unused56 = unused57 = unused58 = unused59 = unused60 = unused61 = unused62 = unused63 = unused64 = unused65 = unused66 = unused67 = unused68 = unused69 = unused70 = unused71 = unused72 = unused73 = unused74 = unused75 = unused76 = unused77 = unused78 = unused79 = unused80 = unused81 = unused82 = unused83 = unused84 = unused85 = unused86 = unused87 = unused88 = unused89 = unused90 = unused91 = unused92 = unused93 = unused94 = unused95 = unused96 = unused97 = unused98 = unused99 = unused100 = 0; } public static void main(String[] args) { try { test(); }catch (Error e){ System.out.println(\"stack length:\" + stackLength); throw e; } } } 1.3 本地方法栈是java虚拟机栈的native方法版。HotSpot虚拟机中并不区分虚拟机栈和本地方法栈 1.4 Java堆1.4.1 特点 是各个进程共享的。 所有的对象实例以及数组都应当在堆上分配，日后可能出现值类型的支持。 Java堆中可以划分出多个线程私有的分配缓冲区，以提升对象分配时的效率。 Java堆既可以被实现成固定大小的，也可以是可扩展的，不过当前主流的Java虚拟机都是按照可扩展来实现的（通过参数-Xmx和-Xms设定）。 1.4.2 异常如果在Java堆中没有内存完成实例分配，并且堆也无法再扩展时，Java虚拟机将会抛出OutOfMemoryError异常。 代码演示：(将堆的最小值-Xms参数与最大值-Xmx参数设置为一样即可避免堆自动扩展，通过参数-XX：+HeapDumpOnOutOf-MemoryError可以让虚拟机在出现内存溢出异常的时候Dump出当前的内存堆转储快照以便进行事后分析) /**· * VM Args：-Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError * @author zzm */ public class HeapOOM { static class OOMObject { } public static void main(String[] args) { List&lt;OOMObject> list = new ArrayList&lt;OOMObject>(); while (true) { list.add(new OOMObject()); } } } 1.5 方法区1.5.1 特点 是各个进程共享的。 它用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。 JAVA8以前HotSpot使用永久代实现方法区，把堆的垃圾回收机制延申至方法区，JAVA8开始使用位于本地内存中的元空间实现方法区。 JAVA虚拟机规范不要求实现垃圾回收。 -XX：MaxMetaspaceSize：设置元空间最大值，默认是-1，即不限制，或者说只受限于本地内存大小。 -XX：MetaspaceSize：指定元空间的初始空间大小，以字节为单位，达到该值就会触发垃圾收集进行类型卸载，同时收集器会对该值进行调整：如果释放了大量的空间，就适当降低该值；如果释放了很少的空间，那么在不超过-XX：MaxMetaspaceSize（如果设置了的话）的情况下，适当提高该值。 -XX：MinMetaspaceFreeRatio：作用是在垃圾收集之后控制最小的元空间剩余容量的百分比，可减少因为元空间不足导致的垃圾收集的频率。类似的还有-XX：Max-MetaspaceFreeRatio，用于控制最大的元空间剩余容量的百分比。 1.5.2 异常如果方法区无法满足新的内存分配需求时，将抛出OutOfMemoryError异常。(由于JAVA8后方法区位于本地内存中，很少出现这种情况，一般是涉及到动态加载过多类) 1.6 运行时常量池 运行时常量池是方法区的一部分。 类的字节码中有一项信息是常量池表，用于存放编译期生成的类名、方法名、参数类型与字面量，这部分内容将在类加载后存放到方法区的运行时常量池中。 Java语言并不要求常量一定只有编译期才能产生，String类的intern方法可以将字符串常量放进字符串常量池表。 1.6.1 异常常量池无法再申请到内存时会抛出OutOfMemoryError异常。 1.6.2 intern方法有意思的点public class RuntimeConstantPoolOOM { public static void main(String[] args) { String str1 = new StringBuilder(\"计算机\").append(\"软件\").toString(); System.out.println(str1.intern() == str1); String str2 = new StringBuilder(\"ja\").append(\"va\").toString(); System.out.println(str2.intern() == str2); } } 这段代码在JDK 6中运行，会得到两个false，而在JDK 7中运行，会得到一个true和一个false。产生差异的原因是，在JDK 6中，intern()方法会把首次遇到的字符串实例复制到永久代的字符串常量池中存储，返回的也是永久代里面这个字符串实例的引用，而由StringBuilder创建的字符串对象实例在 Java堆上，所以必然不可能是同一个引用，结果将返回false。 而JDK 7（以及部分其他虚拟机，例如JRockit）的intern()方法实现就不需要再拷贝字符串的实例到永久代了，既然字符串常量池已经移到Java堆中，那只需要在常量池里记录一下首次出现的实例引用即可，因此intern()返回的引用和由StringBuilder创建的那个字符串实例就是同一个。而对str2比较返回false，这是因为“java”这个字符串在执行String-Builder.toString()之前就已经出现过了（sun.misc.Version类中加载），字符串常量池中已经有它的引用，不符合intern()方法要求“首次遇到”的原则，“计算机软件”这个字符串则是首次出现的，因此结果返回true。 1.7 直接内存1.7.1 特点 直接内存就是机器的内存，JDK1.4中的NIO可以使用Native函数库直接分配堆外内存 分配回收成本较高，但读写性能高 不受JVM内存回收管理 -XX：MaxDirectMemorySize指定可使用的直接内存大小，如果不去指定，则默认与Java堆最大值（由-Xmx指定）一致 1.7.2 分配与回收 使用了Unsafe对象完成直接内存的分配回收,并且回收需要主动调用freeMemory方法 ByteBuffer的实现类内部,使用了Cleaner(虚引用)来监测ByteBuffer对象,一旦ByteBuffer对象被垃圾回收,那么就会由ReferenceHandler线程通过Cleaner的clean方法调用freeMemory来释放直接内存","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"深入理解java虚拟机","slug":"深入理解java虚拟机","permalink":"https://www.codetool.top/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"leetcode744-寻找比目标字母大的最小字母","slug":"leetcode744-寻找比目标字母大的最小字母","date":"2020-01-05T09:31:46.000Z","updated":"2020-01-05T09:40:41.163Z","comments":true,"path":"article/leetcode744-寻找比目标字母大的最小字母/","link":"","permalink":"https://www.codetool.top/article/leetcode744-%E5%AF%BB%E6%89%BE%E6%AF%94%E7%9B%AE%E6%A0%87%E5%AD%97%E6%AF%8D%E5%A4%A7%E7%9A%84%E6%9C%80%E5%B0%8F%E5%AD%97%E6%AF%8D/","excerpt":"","text":"1 原题给定一个只包含小写字母的有序数组letters 和一个目标字母 target，寻找有序数组里面比目标字母大的最小字母。 数组里字母的顺序是循环的。举个例子，如果目标字母target = &#39;z&#39; 并且有序数组为 letters = [&#39;a&#39;, &#39;b&#39;]，则答案返回 &#39;a&#39;。 示例： 输入:letters = [“c”, “f”, “j”]target = “a”输出: “c”输入:letters = [“c”, “f”, “j”]target = “c”输出: “f”输入:letters = [“c”, “f”, “j”]target = “d”输出: “f”输入:letters = [“c”, “f”, “j”]target = “g”输出: “j”输入:letters = [“c”, “f”, “j”]target = “j”输出: “c”输入:letters = [“c”, “f”, “j”]target = “k”输出: “c” 注: letters长度范围在[2, 10000]区间内。 letters 仅由小写字母组成，最少包含两个不同的字母。 目标字母target 是一个小写字母。 2 解法2.1 思想二分查找。 2.2 代码class Solution { public char nextGreatestLetter(char[] letters, char target) { int start = 0; int end = letters.length-1; while(start&lt;end){ int mid = start + (end-start)/2; if(letters[mid]&lt;=target) start = mid+1; else end = mid; } if(letters[start] &lt;= target) return letters[0]; return letters[start]; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"leetcode367-有效的完全平方数","slug":"leetcode367-有效的完全平方数","date":"2020-01-05T08:52:03.000Z","updated":"2020-01-05T08:55:48.398Z","comments":true,"path":"article/leetcode367-有效的完全平方数/","link":"","permalink":"https://www.codetool.top/article/leetcode367-%E6%9C%89%E6%95%88%E7%9A%84%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/","excerpt":"","text":"1 原题给定一个正整数 num*，编写一个函数，如果 *num 是一个完全平方数，则返回 True，否则返回 False。 说明： 不要使用任何内置的库函数，如 sqrt。 示例1： 输入: 16输出: True 示例2： 输入: 14输出: False 2 解法2.1 思想二分查找。由于平方后可能会超出int范围要注意long的使用。 2.2 代码class Solution { public boolean isPerfectSquare(int num) { if(num == 1) return true; long start = 1; long end = num/2; while(start&lt;=end){ long mid = start + (end-start)/2; if(mid*mid == num) return true; if(mid*mid > num) end = mid-1; else if(mid*mid &lt;num) start = mid + 1; } return false; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"leetcode50-Pow(x,n)","slug":"leetcode50-Pow-x-n","date":"2020-01-05T08:10:49.000Z","updated":"2020-01-05T08:17:50.635Z","comments":true,"path":"article/leetcode50-Pow-x-n/","link":"","permalink":"https://www.codetool.top/article/leetcode50-Pow-x-n/","excerpt":"","text":"1 原题实现 pow(x, n) ，即计算 x 的 n 次幂函数。 示例1： 输入： 2.00000, 10输出： 1024.00000 示例2： 输入： 2.10000, 3输出： 9.26100 示例3： 输入： 2.00000, -2输出： 0.25000解释： 2-2 = 1/22 = 1/4 = 0.25 2 解法2.1 思想这道题使用暴力解法会超出时间限制。 自底向上，快速幂。由xn = (xn/2)2得到。 2.2 代码class Solution { public double myPow(double x, int n) { if (n == 0) return 1; if (n == 1) return x; if (n == -1) return 1 / x; double half = myPow(x, n / 2); double rest = myPow(x, n % 2); return half * half * rest; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"深入理解java虚拟机第三版读书笔记01","slug":"深入理解java虚拟机第三版读书笔记01","date":"2020-01-04T12:54:41.000Z","updated":"2020-01-06T06:43:46.278Z","comments":true,"path":"article/深入理解java虚拟机第三版读书笔记01/","link":"","permalink":"https://www.codetool.top/article/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89%E7%89%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B001/","excerpt":"","text":"1 做笔记之前的感言谈到《深入理解java虚拟机》，在业内可太有名了，是国内的一位大神写的一本关于java虚拟机的畅销书，基本上对java稍有深入的程序员都听说过这本书。不过遗憾的是，这本书第二版的创作背景是java7，而在过了这么多年java的更新之后，jvm内部也发生了许多变化，最近听闻这本书的第三版出来了，赶紧买了一本来看。 以下是第一章 走进Java的内容 2 java技术体系从广义上讲，Kotlin、Clojure、JRuby、Groovy等运行于Java虚拟机上的编程语言及其相关的程序都属于Java技术体系中的一员。如果仅从传统意义上来看，JCP官方所定义的Java技术体系包括了以下几个组成部分： Java程序设计语言 各种硬件平台上的Java虚拟机实现 Class文件格式 Java类库API 来自商业机构和开源社区的第三方Java类库 JavaEE中对JavaSE中的针对性补充一般以javax.*作为包名。 3 java发展史 1995年5月23日，Oak语言改名为Java，并且在SunWorld大会上正式发布Java 1.0版本。Java语言第一次提出了“Write Once，Run Anywhere”的口号。 JDK 1.0版本的代表技术包括：Java虚拟机、Applet、AWT等。 JDK 1.1版的技术代表有：JAR文件格式、JDBC、JavaBeans、RMI等。Java语言的语法也有了一定的增强，如内部类（Inner Class）和反射（Reflection）都是在这时候出现的。 JDK 1.4同样带来了很多新的技术特性，如正则表达式、异常链、NIO、日志类、XML解析器和XSLT转换器。 JDK 5在Java语法易用性上做出了非常大的改进。如：自动装箱、泛型、动态注解、枚举、可变长参数、遍历循环（foreach循环）等语法特性都是在JDK 5中加入的。在虚拟机和API层面上，这个版本改进了Java的内存模型（Java Memory Model，JMM）、提供了java.util.concurrent并发包等。 JDK 6的改进包括：提供初步的动态语言支持（通过内置Mozilla JavaScriptRhino引擎实现）、提供编译期注解处理器和微型HTTP服务器API，等等。同时，这个版本对Java虚拟机内部做了大量改进，包括锁与同步、垃圾收集、类加载等方面的实现都有相当多的改动。 JDK 7包含的改进有：提供新的G1收集器、加强对非Java语言的调用支持（JSR-292，这项特性在到JDK 11还有改动）、可并行的类加载架构等。 JDK 8提供了那些曾在JDK 7中规划过，但最终未能在JDK 7中完成的功能，主要包括：对Lambda表达式的支持，这让Java语言拥有了流畅的函数式表达能力、内置Nashorn JavaScript引擎的支持、新的时间、日期API、彻底移除HotSpot的永久代。 除了Jigsaw外，JDK 9还增强了若干工具（JS Shell、JLink、JHSDB等），整顿了HotSpot各个模块各自为战的日志系统，支持HTTP 2客户单API等91个JEP。 JDK 11发布，这是一个LTS版本的JDK，包含17个JEP，其中有ZGC这样的革命性的垃圾收集器出现。 JDK 12发布，只包含8个JEP，其中主要有Switch表达式、Java微测试套件（JMH）等新功能，最引人注目的特性无疑是加入了由RedHat领导开发的Shen-andoah垃圾收集器。 4 java虚拟机家族虚拟机始祖：Sun Classic/Exact VM 5 java技术的未来5.1 无语言倾向2018年4月，Oracle Labs新公开了一项黑科技：Graal VM Graal VM被官方称为“Universal VM”和“Polyglot VM”，这是一个在HotSpot虚拟机基础上增强而成的跨语言全栈虚拟机，可以作为“任何语言”的运行平台使用，这里“任何语言”包括了Java、Scala、Groovy、Kotlin等基于Java虚拟机之上的语言，还包括了C、C++、Rust等基于LLVM的语言，同时支持其他像JavaScript、Ruby、Python和R语言等。Graal VM可以无额外开销地混合使用这些编程语言，支持不同语言中混用对方的接口和对象，也能够支持这些语言使用已经编写好的本地库文件。 5.2 新一代即时编译器HotSpot虚拟机中含有两个即时编译器，分别是编译耗时短但输出代码优化程度较低的客户端编译器（简称为C1）以及编译耗时长但输出代码优化质量也更高的服务端编译器（简称为C2），通常它们会在分层编译机制下与解释器互相配合来共同构成HotSpot虚拟机的执行子系统 自JDK 10起，HotSpot中又加入了一个全新的即时编译器：Graal编译器，看名字就可以联想到它是来自于前一节提到的Graal VM。Graal编译器是以C2编译器替代者的身份登场的。C2的历史已经非常长了，可以追溯到Cliff Click大神读博士期间的作品，这个由C++写成的编译器尽管目前依然效果拔群，但已经复杂到连Cliff Click本人都不愿意继续维护的程度。而Graal编译器本身就是由Java语言写成，实现时又刻意与C2采用了同一种名为“Sea-of-Nodes”的高级中间表示（High IR）形式，使其能够更容易借鉴C2的优点。Graal编译器比C2编译器晚了足足二十年面世，有着极其充沛的后发优势，在保持输出相近质量的编译代码的同时，开发效率和扩展性上都要显著优于C2编译器，这决定了C2编译器中优秀的代码优化技术可以轻易地移植到Graal编译器上，但是反过来Graal编译器中行之有效的优化在 C2编译器里实现起来则异常艰难。这种情况下，Graal的编译效果短短几年间迅速追平了C2，甚至某些测试项中开始逐渐反超C2编译器。Graal能够做比C2更加复杂的优化，如“部分逃逸分析”（Partial Escape Analysis），也拥有比C2更容易使用激进预测性优化（Aggressive Speculative Optimization）的策略，支持自定义的预测性假设等。 5.3 向Native迈进微服务架构的兴起促进java提前编译技术的发展 Substrate VM是在Graal VM 0.20版本里新出现的一个极小型的运行时环境，包括了独立的异常处理、同步调度、线程管理、内存管理（垃圾收集）和JNI访问等组件，目标是代替HotSpot用来支持提前编译后的程序执行。它还包含了一个本地镜像的构造器（Native Image Generator），用于为用户程序建立基于Substrate VM 的本地运行时镜像。这个构造器采用指针分析（Points-To Analysis）技术，从用户提供的程序入口出发，搜索所有可达的代码。在搜索的同时，它还将执行初始化代码，并在最终生成可执行文件时，将已初始化的堆保存至一个堆快照之中。这样一来，Substrate VM就可以直接从目标程序开始运行，而无须重复进行Java虚拟机的初始化过程。但相应地，原理上也决定了Substrate VM必须要求目标程序是完全封闭的，即不能动态加载其他编译器不可知的代码和类库。基于这个假设，Substrate VM才能探索整个编译空间，并通过静态分析推算出所有虚方法调用的目标方法。 5.4 灵活的胖子经过一系列的重构与开放，HotSpot虚拟机逐渐从时间的侵蚀中挣脱出来，虽然代码复杂度还在增长，体积仍在变大，但其架构并未老朽，而是拥有了越来越多的开放性和扩展性，使得HotSpot成为一个能够联动外部功能，能够应对各种场景，能够学会十八般武艺的身手灵活敏捷的“胖子”。 5.5 语言语法持续增强随着Java每半年更新一次的节奏，新版本的Java中会出现越来越多其他语言里已有的优秀特性，相信博采众长的Java，还能继续保持现在的勃勃生机相当长时间。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"深入理解java虚拟机","slug":"深入理解java虚拟机","permalink":"https://www.codetool.top/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"leetcode658-找到K个最接近的元素","slug":"leetcode658-找到K个最接近的元素","date":"2020-01-04T12:08:07.000Z","updated":"2020-01-04T12:44:46.915Z","comments":true,"path":"article/leetcode658-找到K个最接近的元素/","link":"","permalink":"https://www.codetool.top/article/leetcode658-%E6%89%BE%E5%88%B0K%E4%B8%AA%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E5%85%83%E7%B4%A0/","excerpt":"","text":"1 原题给定一个排序好的数组，两个整数 k 和 x，从数组中找到最靠近 x（两数之差最小）的 k 个数。返回的结果必须要是按升序排好的。如果有两个数与 x 的差值一样，优先选择数值较小的那个数。 示例1： 输入: [1,2,3,4,5], k=4, x=3输出: [1,2,3,4] 示例2： 输入: [1,2,3,4,5], k=4, x=-1输出: [1,2,3,4] 说明: k 的值为正数，且总是小于给定排序数组的长度。 数组不为空，且长度不超过 104 数组里的每个元素与 x 的绝对值不超过 104 2 解法2.1 思想 按照差值排序 双指针 2.2 代码 排序 public List&lt;Integer> findClosestElements(List&lt;Integer> arr, int k, int x) { Collections.sort(arr, (a,b) -> a == b ? a - b : Math.abs(a-x) - Math.abs(b-x)); arr = arr.subList(0, k); Collections.sort(arr); return arr; } 双指针（作者：liweiwei1419） public class Solution { public List&lt;Integer> findClosestElements(int[] arr, int k, int x) { int size = arr.length; int left = 0; int right = size - 1; int removeNums = size - k; while (removeNums > 0) { if (x - arr[left] &lt;= arr[right] - x) { right--; } else { left++; } removeNums--; } List&lt;Integer> res = new ArrayList&lt;>(); for (int i = left; i &lt; left + k; i++) { res.add(arr[i]); } return res; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"leetcode34--在排序数组中查找元素的第一个和最后一个位置","slug":"leetcode34-在排序数组中查找元素的第一个和最后一个位置","date":"2020-01-03T09:58:04.000Z","updated":"2020-01-03T10:00:44.523Z","comments":true,"path":"article/leetcode34-在排序数组中查找元素的第一个和最后一个位置/","link":"","permalink":"https://www.codetool.top/article/leetcode34-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/","excerpt":"","text":"1 原题给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。 你的算法时间复杂度必须是 O(log n) 级别。 如果数组中不存在目标值，返回 [-1, -1]。 示例1： 输入： nums = [5,7,7,8,8,10], target = 8输出： [3,4] 示例2： 输入： nums = [5,7,7,8,8,10], target = 6输出： [-1,-1] 2 解法2.1 思想二分查找，找到一个目标值时向两边继续查找最初和最末出现的地方。 2.2 代码class Solution { public int[] searchRange(int[] nums, int target) { int[] pos = new int[2]; int start = 0; int end = nums.length - 1; if(end == -1) return new int[]{-1,-1}; int mid = start + (end-start)/2; while(nums[mid]!=target &amp;&amp;start&lt;=end){ mid = start + (end-start)/2; if(nums[mid]&lt;target) start = mid + 1; else if(nums[mid] > target) end = mid -1; } if(nums[mid]!=target) return new int[]{-1,-1}; int mid_cache = mid; int end_cache = end; end = mid; while(start&lt;end){ mid = start + (end-start)/2; if(nums[mid] == target) end = mid; else if(nums[mid] &lt; target) start = mid+1; } pos[0] = start; start = mid_cache; end = end_cache; while(start&lt;end){ mid = start + (end-start+1)/2; if(nums[mid] == target) start = mid; else if(nums[mid] > target) end = mid-1; } pos[1] = end; return pos; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"leetcode153-寻找旋转排序数组中的最小值","slug":"leetcode153-寻找旋转排序数组中的最小值","date":"2020-01-03T07:59:23.000Z","updated":"2020-01-07T04:45:58.246Z","comments":true,"path":"article/leetcode153-寻找旋转排序数组中的最小值/","link":"","permalink":"https://www.codetool.top/article/leetcode153-%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/","excerpt":"","text":"1 原题假设按照升序排序的数组在预先未知的某个点上进行了旋转。 ( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。 搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。 请找出其中最小的元素。 你可以假设数组中不存在重复元素。 示例1： 输入： [3,4,5,1,2]输出： 1 示例2： 输入： [4,5,6,7,0,1,2]输出： 0 2 解法2.1 思想 线性查找 二分查找，找出旋转点 2.2 代码 线性查找 class Solution { public int findMin(int[] nums) { int min = nums[0]; for(int i:nums){ if(i&lt;min){ min=i; break; } } return min; } } 二分查找 class Solution { public int findMin(int[] nums) { int head = nums[0]; int start = 0; int end = nums.length-1; while(start&lt;end){ int mid = start + (end-start)/2; if(nums[mid] >= head) start = mid+1; else if(nums[mid] &lt; head) end = mid; } if(nums[start]>head) return head; return nums[start]; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"leetcode162-寻找峰值","slug":"leetcode162-寻找峰值","date":"2020-01-03T07:22:04.000Z","updated":"2020-01-03T07:34:16.842Z","comments":true,"path":"article/leetcode162-寻找峰值/","link":"","permalink":"https://www.codetool.top/article/leetcode162-%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/","excerpt":"","text":"1 原题峰值元素是指其值大于左右相邻值的元素。 给定一个输入数组 nums，其中 nums[i] ≠ nums[i+1]，找到峰值元素并返回其索引。 数组可能包含多个峰值，在这种情况下，返回任何一个峰值所在位置即可。 你可以假设 nums[-1] = nums[n] = -∞。 示例1： 输入: nums = [1,2,3,1]输出: 2解释: 3 是峰值元素，你的函数应该返回其索引 2。 示例2： 输入: nums = [1,2,1,3,5,6,4]输出: 1 或 5解释: 你的函数可以返回索引 1，其峰值元素为 2； 或者返回索引 5， 其峰值元素为 6。 2 解法2.1 思想 线性查找，从第一个元素开始，第一个打破单调递增的元素。 二分查找，看中间元素值的的趋势（斜率） 2.2 代码 线性查找 class Solution { public int findPeakElement(int[] nums) { int n = 1; int cache = nums[0]; while(n&lt;nums.length &amp;&amp;nums[n]>=cache){ cache = nums[n]; n++; } return n-1; } } 二分查找（来源：leetcode官方） public class Solution { public int findPeakElement(int[] nums) { int l = 0, r = nums.length - 1; while (l &lt; r) { int mid = (l + r) / 2; if (nums[mid] > nums[mid + 1]) r = mid; else l = mid + 1; } return l; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"leetcode278-第一个错误的版本","slug":"leetcode278-第一个错误的版本","date":"2020-01-02T13:17:40.000Z","updated":"2020-01-02T13:20:58.762Z","comments":true,"path":"article/leetcode278-第一个错误的版本/","link":"","permalink":"https://www.codetool.top/article/leetcode278-%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%E7%9A%84%E7%89%88%E6%9C%AC/","excerpt":"","text":"1 原题你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。 假设你有 n 个版本 [1, 2, ..., n]，你想找出导致之后所有版本出错的第一个错误的版本。 你可以通过调用 bool isBadVersion(version) 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。 示例： 给定 n = 5，并且 version = 4 是第一个错误的版本。调用 isBadVersion(3) -&gt; false调用 isBadVersion(5) -&gt; true调用 isBadVersion(4) -&gt; true所以，4 是第一个错误的版本。 2 解法2.1 思想二分查找。 2.2 代码/* The isBadVersion API is defined in the parent class VersionControl. boolean isBadVersion(int version); */ public class Solution extends VersionControl { public int firstBadVersion(int n) { int start = 1; int end = n; int mid; while(start&lt;end){ mid = start + (end-start)/2; if(isBadVersion(mid)) end = mid; else start = mid+1; } return start; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"leetcode33-搜索旋转排序数组","slug":"leetcode33-搜索旋转排序数组","date":"2020-01-01T14:03:54.000Z","updated":"2020-01-01T14:15:51.535Z","comments":true,"path":"article/leetcode33-搜索旋转排序数组/","link":"","permalink":"https://www.codetool.top/article/leetcode33-%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/","excerpt":"","text":"1 原题假设按照升序排序的数组在预先未知的某个点上进行了旋转。 ( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。 搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。 你可以假设数组中不存在重复的元素。 你的算法时间复杂度必须是 O(log n) 级别。 示例1： 输入： nums = [4,5,6,7,0,1,2], target = 0输出： 4 示例2： 输入： nums = [4,5,6,7,0,1,2], target = 3输出： -1 2 解法2.1 思想二分查找，需要注意、区分一些情况。 2.2 代码class Solution { public int search(int[] nums, int target) { if(nums.length == 0) return -1; int head = nums[0]; if(target == head) return 0; int start = 0; int end = nums.length-1; int mid = 0; while(start&lt;=end){ mid = start + (end-start)/2; if(nums[mid] == target) return mid; if(nums[mid]>target){//mid比target大 if(target>head){//target在左边 if(nums[mid]>=head) end = mid-1;//mid在左边 else start = mid+1; }else{//target在右边 if(nums[mid]>=head) start = mid+1;//mid在左边 else end = mid-1; } }else if(nums[mid]&lt;target){//mid比target小 if(target>head){//target在左边 if(nums[mid]>=head) start = mid+1;//mid在左边 else end = mid-1; }else{//target在右边 start = mid+1; } } } return -1; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"2019年的最后一天，我想说些什么","slug":"2019年的最后一天，我想说些什么","date":"2019-12-31T11:22:37.000Z","updated":"2020-01-01T10:39:44.969Z","comments":true,"path":"article/2019年的最后一天，我想说些什么/","link":"","permalink":"https://www.codetool.top/article/2019%E5%B9%B4%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9%EF%BC%8C%E6%88%91%E6%83%B3%E8%AF%B4%E4%BA%9B%E4%BB%80%E4%B9%88/","excerpt":"","text":"首先，祝所有朋友们新年快乐♥ 时间过得挺快的，我是2018年8月19日创立的博客，到现在也有一年多的时间了。 看着年龄随年份的增长是一件很奇妙的事情，我是00年出生的，这意味着，我永远不需要进行年龄的计算，到了2020年也就20岁了。如果是十年前的我，对大学阶段不是很了解，我会觉得20岁真好啊，大概已经开始工作，不再忍受每天繁重的作业任务了。 可是实际上，我对20岁感到挺恐惧的。这种恐惧，或许是来源于不知大四的我会有什么去向，不知道我是否有能力去胜任一份工作，未知永远是骇人的。又或许是，我明白自己已经不会再年轻了。 最近有一句话在网上很火：“我的青春又回来了”。大概涉足不同圈子的人有不同的理解，对于热爱lol的我来说，如果有那么一瞬间会让我感到“我的青春又回来了”，大概就是最近德玛西亚杯决赛上“猪狗大战”的那场BO5。这么说或许有点离谱，毕竟我初入LOL坑是在高一那一年，那一年是英雄联盟的S5，是EDG的辉煌年份。所以当看到蓝方和红方分别为EDG和RNG的时候，我不禁有些恍惚，似乎回到了S5的LPL，正盛的EDG和粉丝众多的RNG开战一刻。 但“青春回来”的时刻永远是那么短暂，总是有那么多一瞬提醒我“青春将不再回来了”，作为一个猪仔，厂长今年休赛期从现役选手位上淡出转为主教练令我颇为感慨，厂长的英雄联盟之路比我长得多。他是LPL的一号选手，也是EDG的灵魂人物，S5到S9，不仅是选手一批一批地更替，战队也出现了许多我不认识的战队。然而我永远知道EDG的厂长会一直在场，一直打下去，因为他要追逐他的电竞梦。“一代人终将老去，但总有人正年轻”。 我高二高三时尤其喜欢玩英雄联盟，现在却也不怎么接触了，主要是没人一起玩，少了很多乐趣，偶尔和高中同学一起五黑，又能回忆起当年网吧五连坐的激情，只是技术已大不如前。我特别喜欢我的高中时期，虽然那时的我并不轻松，却带有抹不去的青春气息。 回到现在，我常常想，当初创立这个博客的初心是什么呢。我记得，从入这个专业起，我很早就开始捣鼓服务器了，从使用简单的wordpress开始搭建网站，那时为了避免备案使用了国外的服务器，因此网速也非常的慢，我却乐此不彼地研究着一个个的可以用服务器实现的有趣的功能。2018年8月19日，我决定搞一个个人的编程相关的博客，我想，那时的我只是三分钟热度，导致写了几篇博客之后就很久一段时间没有更新。2019年11月8日，我从同学处听说了Hexo这个框架，出于把我的博客继续搞下去的念头，我使用hexo重新搭建了这个网站，现在一直保持一天大于一更的写文章速度，我觉得这既是对我学习成果的一种总结，也是督促我学习的一种方式。 看着我的博客的文章数目越来越多，我是非常欣喜的，然而我知道我还有许多的知识需要学习，大四的逼近时常让我赶到压力，我没有过考研的打算，所以明年的秋招我只能放手一搏，可是我非常担心我的能力不够，随着最近了解java架构越多，越感到自己所学的那点知识的匮乏程度，深深感到了自己的无力感。 今天就说到这，写的挺杂的，不管怎样，2020冲冲冲！！！","categories":[{"name":"日常/随笔","slug":"日常-随笔","permalink":"https://www.codetool.top/categories/%E6%97%A5%E5%B8%B8-%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"日常","slug":"日常","permalink":"https://www.codetool.top/tags/%E6%97%A5%E5%B8%B8/"}]},{"title":"leetcode374-猜数字大小","slug":"leetcode374-猜数字大小","date":"2019-12-31T11:17:27.000Z","updated":"2019-12-31T11:21:11.868Z","comments":true,"path":"article/leetcode374-猜数字大小/","link":"","permalink":"https://www.codetool.top/article/leetcode374-%E7%8C%9C%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8F/","excerpt":"","text":"1 原题我们正在玩一个猜数字游戏。 游戏规则如下：我从 1 到 n 选择一个数字。 你需要猜我选择了哪个数字。每次你猜错了，我会告诉你这个数字是大了还是小了。你调用一个预先定义好的接口 guess(int num)，它会返回 3 个可能的结果（-1，1 或 0）： -1 : 我的数字比较小 1 : 我的数字比较大 0 : 恭喜！你猜对了！ 示例 : 输入： n = 10, pick = 6输出： 6 2 解法2.1 思想二分查找，注意求中位数的公式不要用(start+end)/2容易溢出，应该用start+(end-start)/2 2.2 代码/* The guess API is defined in the parent class GuessGame. @param num, your guess @return -1 if my number is lower, 1 if my number is higher, otherwise return 0 int guess(int num); */ public class Solution extends GuessGame { public int guessNumber(int n) { int start = 1; int end = n; int mid = 1; while(start&lt;end){ mid = start+(end-start)/2; if(guess(mid)==0) return mid; if(guess(mid)==-1) end = mid-1; else if(guess(mid)==1) start = mid+1; } return start; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"leetcode69-x的平方根","slug":"leetcode69-x的平方根","date":"2019-12-30T11:58:11.000Z","updated":"2019-12-30T12:02:18.174Z","comments":true,"path":"article/leetcode69-x的平方根/","link":"","permalink":"https://www.codetool.top/article/leetcode69-x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/","excerpt":"","text":"1 原题实现 int sqrt(int x) 函数。 计算并返回 x 的平方根，其中 x 是非负整数。 由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。 示例1： 输入： 4输出： 2 示例2： 输入： 8输出： 2说明： 8 的平方根是 2.82842…, 由于返回类型是整数，小数部分将被舍去。 2 解法2.1 思想二分法 2.2 代码class Solution { public int mySqrt(int x) { //为了防止end * end 超过int范围，这里统一使用使用long long longx = x; long start = 0; long end = x/2; long mid; while(start&lt;=end){ mid = (end+start)/2; if(mid*mid == longx) return (int)mid; if(mid*mid &lt; longx) { start = mid + 1; if(start*start>longx) return (int)mid; } else if(mid*mid > longx) { end = mid - 1; if(end*end&lt;longx) return (int)end; } } return (int)start; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"leetcode704-二分查找","slug":"leetcode704-二分查找","date":"2019-12-29T12:04:34.000Z","updated":"2019-12-29T12:07:49.068Z","comments":true,"path":"article/leetcode704-二分查找/","link":"","permalink":"https://www.codetool.top/article/leetcode704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/","excerpt":"","text":"1 原题给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。 示例1: 输入： nums = [-1,0,3,5,9,12], target = 9输出： 4解释： 9 出现在 nums 中并且下标为 4 示例2: 输入： nums = [-1,0,3,5,9,12], target = 2输出： -1解释： 2 不存在 nums 中因此返回 -1 提示： 你可以假设 nums 中的所有元素是不重复的。 n 将在 [1, 10000]之间。 nums 的每个元素都将在 [-9999, 9999]之间。 2 解法2.1 思想二分查找思想 2.2 代码class Solution { public int search(int[] nums, int target) { int start = 0; int end = nums.length-1; while(start&lt;end){ int middle = start + (end-start)/2; if(nums[middle]==target) return middle; if(nums[middle]>target) end = middle-1; else if(nums[middle]&lt;target) start = middle+1; } if(nums[start]==target) return start; return -1; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"leetcode380-常数时间插入、删除和获取随机元素","slug":"leetcode380-常数时间插入、删除和获取随机元素","date":"2019-12-28T14:44:41.000Z","updated":"2019-12-31T11:57:39.433Z","comments":true,"path":"article/leetcode380-常数时间插入、删除和获取随机元素/","link":"","permalink":"https://www.codetool.top/article/leetcode380-%E5%B8%B8%E6%95%B0%E6%97%B6%E9%97%B4%E6%8F%92%E5%85%A5%E3%80%81%E5%88%A0%E9%99%A4%E5%92%8C%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E5%85%83%E7%B4%A0/","excerpt":"","text":"1 原题设计一个支持在平均 时间复杂度 O(1) 下，执行以下操作的数据结构。 insert(val)：当元素 val 不存在时，向集合中插入该项。 remove(val)：元素 val 存在时，从集合中移除该项。 getRandom：随机返回现有集合中的一项。每个元素应该有相同的概率被返回。 示例： // 初始化一个空的集合。RandomizedSet randomSet = new RandomizedSet();// 向集合中插入 1 。返回 true 表示 1 被成功地插入。randomSet.insert(1);// 返回 false ，表示集合中不存在 2 。randomSet.remove(2);// 向集合中插入 2 。返回 true 。集合现在包含 [1,2] 。randomSet.insert(2);// getRandom 应随机返回 1 或 2 。randomSet.getRandom();// 从集合中移除 1 ，返回 true 。集合现在包含 [2] 。randomSet.remove(1);// 2 已在集合中，所以返回 false 。randomSet.insert(2);// 由于 2 是集合中唯一的数字，getRandom 总是返回 2 。randomSet.getRandom(); 2 解法2.1 思想 初始想法 哈希表的插入删除的时间复杂度都是O(1)，获取的时候可以通过EntrySet。所以这道题是不能用HashSet的。 这样虽然获取随机元素的时候时间复杂度最高可能是O(n)，但仍比遍历一遍Set转ArrayList好很多。 正确解法 哈希表插入和删除都是O(1)，而顺序表随机访问则是O(1)，可以使用ArrayList来存储所有的数据。但是必须解决ArrayList删除元素的O(n)问题。 于是可以： 在哈希表中用value-index来记录值和在list中的下标的对应关系，如图所示 当删除元素时，size减一，用list中最后那个元素替换要删除的那个元素，并且将哈希表中的对应关系改过来（用要删除的元素的index替换list中最后那个元素对应的index）： 此时若要随机访问元素，只需获取list中前3(size)个元素中的一个。 那么如果需要继续插入元素，只需从list中下标为3(size)处替换掉后面那个元素或是在后面那个元素之前插入（这里如果用插入是使用add(index,value)方法，个人觉得比起set会增加时间复杂度，因为使用add后面的元素都需要向后移动，虽然jdk源码中使用了System.arraycopy即内存拷贝来优化，但是也比直接替换的时间复杂度更高）： 如果不是替换元素而是add操作，这里会变成1-4-2-8-4。 2.2 代码 初始想法 class RandomizedSet { Object none = new Object(); HashMap&lt;Integer,Object> map; Random random; /** Initialize your data structure here. */ public RandomizedSet() { map = new HashMap&lt;>(); random = new Random(); } /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */ public boolean insert(int val) { if(map.containsKey(val)) return false; map.put(val,none); return true; } /** Removes a value from the set. Returns true if the set contained the specified element. */ public boolean remove(int val) { if(!map.containsKey(val)) return false; map.remove(val); return true; } /** Get a random element from the set. */ public int getRandom() { int ran = random.nextInt(map.size()); int n = 0; for(Map.Entry&lt;Integer,Object> i:map.entrySet()){ if(n==ran) return i.getKey(); n++; } return 0; } } /** * Your RandomizedSet object will be instantiated and called as such: * RandomizedSet obj = new RandomizedSet(); * boolean param_1 = obj.insert(val); * boolean param_2 = obj.remove(val); * int param_3 = obj.getRandom(); */ 正确解法（来源：leetcode用户，添加元素时是直接插入） class RandomizedSet { Map&lt;Integer,Integer> map; // 存放值和在 list 的下标位置的映射 List&lt;Integer> list; // 存放要插入数据的结构 int size; // 数据的长度 /** Initialize your data structure here. */ public RandomizedSet() { map = new HashMap&lt;>(); list = new ArrayList&lt;>(); size = 0; } /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */ public boolean insert(int val) { if(map.containsKey(val)) return false; else{ // 插入数据，并更新 map 的映射后将长度加一 list.add(size,val); map.put(val,size++); return true; } } /** Removes a value from the set. Returns true if the set contained the specified element. */ public boolean remove(int val) { if(!map.containsKey(val)) return false; else if( size == 0 ){ map.remove(val);} else{ // 取到 list 末尾的数据 int tailKey = list.get(size-1); // 然后将要原先 map 中得 val-index 映射改为 tailKey-index map.put(tailKey,map.get(val)); // 在 map 中取得 val 在 list 的位置，然后根据这个位置用末尾元素 tailKey 替代 list.set(map.get(val),tailKey); // 在 map 中删除 val 的映射 map.remove(val); size--; } return true; } /** Get a random element from the set. */ public int getRandom() { Random rand = new Random(); // rand.nextInt(size) 产生的是 0 到 size（不包括 size） 的数据 return list.get(rand.nextInt(size)); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"}]},{"title":"leetcode347-前K个高频元素","slug":"leetcode347-前K个高频元素","date":"2019-12-28T13:39:09.000Z","updated":"2019-12-28T13:44:29.532Z","comments":true,"path":"article/leetcode347-前K个高频元素/","link":"","permalink":"https://www.codetool.top/article/leetcode347-%E5%89%8DK%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/","excerpt":"","text":"1 原题给定一个非空的整数数组，返回其中出现频率前 k 高的元素。 示例1： 输入： nums = [1,1,1,2,2,3], k = 2输出： [1,2] 示例2： 输入： nums = [1], k = 1输出： [1] 说明: 你可以假设给定的 k 总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。 你的算法的时间复杂度必须优于 O(n log n) , n 是数组的大小。 2 解法2.1 思想可以用哈希表记录下出现的次数，然后将哈希表按值排序。（获取entryList用Collections来排序） 2.2 代码class Solution { public List&lt;Integer> topKFrequent(int[] nums, int k) { Map&lt;Integer,Integer> map = new HashMap&lt;>(); List&lt;Integer> list = new ArrayList&lt;>(); for(int i:nums){ map.put(i,map.getOrDefault(i,0)+1); } List&lt;Map.Entry&lt;Integer,Integer>> entryList = new ArrayList&lt;>(map.entrySet()); entryList.sort((entry1, entry2) -> entry2.getValue() - entry1.getValue()); int n = 0; for(Map.Entry&lt;Integer,Integer> i:entryList){ if(n>=k) break; list.add(i.getKey()); n ++; } return list; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"哈希表","slug":"哈希表","permalink":"https://www.codetool.top/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"}]},{"title":"leetcode454-四数相加II","slug":"leetcode454-四数相加II","date":"2019-12-27T12:45:57.000Z","updated":"2019-12-27T13:20:37.062Z","comments":true,"path":"article/leetcode454-四数相加II/","link":"","permalink":"https://www.codetool.top/article/leetcode454-%E5%9B%9B%E6%95%B0%E7%9B%B8%E5%8A%A0II/","excerpt":"","text":"1 原题给定四个包含整数的数组列表 A , B , C , D ,计算有多少个元组 (i, j, k, l) ，使得 A[i] + B[j] + C[k] + D[l] = 0。 为了使问题简单化，所有的 A, B, C, D 具有相同的长度 N，且 0 ≤ N ≤ 500 。所有整数的范围在 -228 到 228 - 1 之间，最终结果不会超过 231 - 1 。 例如: 输入：A = [ 1, 2]B = [-2,-1]C = [-1, 2]D = [ 0, 2] 输出：2 解释:两个元组如下: (0, 0, 0, 1) -&gt; A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0 (1, 1, 0, 0) -&gt; A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0 2 解法2.1 思想 暴力（超出时间限制）：暴力的问题是，只要数组的数目超过两个，便会重复计算很多单元，比如A1+B1+C2和A2+B1+C2其中B1+C2就被反复计算了，他的时间复杂度会成nN的形势增长。 为了解决暴力的时间复杂性幂增长，可以将其降维，两个两个分组，然后作查找表配对总和为0的情况。 2.2 代码 暴力 class Solution { public int fourSumCount(int[] A, int[] B, int[] C, int[] D) { int count = 0; int len = A.length; if(len == 0) return 0; for(int a = 0;a&lt;len;a++){ for(int b = 0;b&lt;len;b++){ for(int c = 0;c&lt;len;c++){ for(int d = 0;d&lt;len;d++){ if(A[a]+B[b]+C[c]+D[d]==0) count ++; } } } } return count; } } 查找表 class Solution { public int fourSumCount(int[] A, int[] B, int[] C, int[] D) { if(A.length == 0)return 0; int count = 0; Map&lt;Integer,Integer> map = new HashMap&lt;>(); for(int i:A){ for(int j:B){ //记录下-(i+j)可以对应的次数。 map.put(-i-j,map.getOrDefault(-i-j,0)+1); } } for(int i:C){ for(int j:D){ count += map.getOrDefault(i+j,0); } } return count; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"哈希表","slug":"哈希表","permalink":"https://www.codetool.top/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"}]},{"title":"leetcode3-无重复字符的最长子串","slug":"leetcode3-无重复字符的最长子串","date":"2019-12-26T14:18:21.000Z","updated":"2019-12-26T14:57:35.416Z","comments":true,"path":"article/leetcode3-无重复字符的最长子串/","link":"","permalink":"https://www.codetool.top/article/leetcode3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/","excerpt":"","text":"1 原题给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。 示例1： 输入： “abcabcbb”输出： 3解释： 因为无重复字符的最长子串是 “abc”，所以其长度为 3。 示例2： 输入： “bbbbb”输出： 1解释： 因为无重复字符的最长子串是 “b”，所以其长度为 1。 示例3： 输入： “pwwkew”输出： 3解释： 因为无重复字符的最长子串是 “wke”，所以其长度为 3。 请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。 2 解法2.1 思想滑动窗口，将出现的字符和下标在哈希表中对应起来。 该问题的关键是获取所有不重复字符子串的长度，比较出最大的长度，我们用last记录当前计算的子串的第一个字符位置。 那么不重复字符子串的长度的计算方法就是： 假设从last开始都是不重复字符，如果遇到一个在哈希集中出现过的字符并且是last或last之后的，说明遇到了重复字符，如下图的d，则此时的不重复字符子串adv的长度为第二个d之前的长度3-0=3。然后将last移到v上（第一个d后面的那个元素，这样新子串中就不会有两个d了），便可继续进行操作。 这样依次进行无重复字符子串的长度计算，当最后遍历到最后一个字符c的时候，都和last以及last之后出现的字符无重复，那么此时最后计算的子串vdfc的长度是5-2+1=4（因为c是计入子串的） 那么假设最后一个字符是v，当最后遍历到最后一个字符v的时候，和当前子串中的v重复了(vdfv)，那么和之前计算子串长度的方法一样是5-2=3（最后一个v不计入长度） 2.2 代码class Solution { public int lengthOfLongestSubstring(String s) { Map&lt;Character,Integer> map = new HashMap&lt;>(); int max = 0; int last = 0; char[] chars = s.toCharArray(); for(int i = 0;i&lt;chars.length;i++){ if(map.containsKey(chars[i])&amp;&amp;map.get(chars[i])>=last){ if(i-last>=max) max = i-last; last = map.get(chars[i]) + 1; }else if(i == chars.length-1&amp;&amp;i-last+1>=max){ max = i-last+1; } map.put(chars[i],i); } return max; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"},{"name":"哈希表","slug":"哈希表","permalink":"https://www.codetool.top/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"}]},{"title":"leetcode771-宝石与石头","slug":"leetcode771-宝石与石头","date":"2019-12-26T14:13:37.000Z","updated":"2019-12-26T14:17:31.552Z","comments":true,"path":"article/leetcode771-宝石与石头/","link":"","permalink":"https://www.codetool.top/article/leetcode771-%E5%AE%9D%E7%9F%B3%E4%B8%8E%E7%9F%B3%E5%A4%B4/","excerpt":"","text":"1 原题给定字符串J 代表石头中宝石的类型，和字符串 S代表你拥有的石头。 S 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。 J 中的字母不重复，J 和 S中的所有字符都是字母。字母区分大小写，因此&quot;a&quot;和&quot;A&quot;是不同类型的石头。 示例 1: 输入： J = “aA”, S = “aAAbbbb”输出： 3 示例 2: 输入： J = “z”, S = “ZZ”输出： 0 注意： S 和 J 最多含有50个字母。 J 中的字符不重复。 2 解法2.1 思想将代表宝石的字符存放在哈希集中。 2.2 代码class Solution { public int numJewelsInStones(String J, String S) { Set&lt;Character> set = new HashSet&lt;>(); for(char i:J.toCharArray()){ set.add(i); } int count = 0; for(char i:S.toCharArray()){ if(set.contains(i)) count++; } return count; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"哈希集","slug":"哈希集","permalink":"https://www.codetool.top/tags/%E5%93%88%E5%B8%8C%E9%9B%86/"}]},{"title":"leetcode652-寻找重复的子树","slug":"leetcode652-寻找重复的子树","date":"2019-12-26T05:52:10.000Z","updated":"2019-12-26T06:00:10.691Z","comments":true,"path":"article/leetcode652-寻找重复的子树/","link":"","permalink":"https://www.codetool.top/article/leetcode652-%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E6%A0%91/","excerpt":"","text":"1 原题给定一棵二叉树，返回所有重复的子树。对于同一类的重复子树，你只需要返回其中任意一棵的根结点即可。 两棵树重复是指它们具有相同的结构以及相同的结点值。 示例1: 1 / \\ 2 3 / / \\ 4 2 4 / 4 下面是两个重复的子树： 2 / 4 和 4 因此，你需要以列表的形式返回上述重复子树的根结点。 2 解法2.1 思想将子树按照某种算法遍历序列化成字符串，作为哈希表的键。 2.2 代码/** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { Map&lt;String,Integer> map; List&lt;TreeNode> list; public String LRD(TreeNode node){ StringBuilder sb = new StringBuilder(); dfs(sb,node); return sb.toString(); } public void dfs(StringBuilder str,TreeNode node){ if(node == null){ str.append('n'); return; } dfs(str,node.left); dfs(str,node.right); str.append(String.valueOf(node.val)); return; } public List&lt;TreeNode> findDuplicateSubtrees(TreeNode root) { map = new HashMap&lt;>(); list = new ArrayList&lt;>(); dfsFindSubtrees(root); return list; } public void dfsFindSubtrees(TreeNode root){ if(root == null) return; dfsFindSubtrees(root.left); dfsFindSubtrees(root.right); String LRD = LRD(root); if(map.containsKey(LRD)){ if(map.get(LRD)==1){ list.add(root); map.put(LRD,0); } }else{ map.put(LRD,1); } } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"哈希表","slug":"哈希表","permalink":"https://www.codetool.top/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"},{"name":"树","slug":"树","permalink":"https://www.codetool.top/tags/%E6%A0%91/"}]},{"title":"leetcode36-有效的数独","slug":"leetcode36-有效的数独","date":"2019-12-26T05:25:23.000Z","updated":"2019-12-26T05:48:53.989Z","comments":true,"path":"article/leetcode36-有效的数独/","link":"","permalink":"https://www.codetool.top/article/leetcode36-%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC/","excerpt":"","text":"1 原题判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。 数字 1-9 在每一行只能出现一次。 数字 1-9 在每一列只能出现一次。 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。 上图是一个部分填充的有效的数独。 数独部分空格内已填入了数字，空白格用 &#39;.&#39; 表示。 示例1： 输入：[ [“5”,”3”,”.”,”.”,”7”,”.”,”.”,”.”,”.”], [“6”,”.”,”.”,”1”,”9”,”5”,”.”,”.”,”.”], [“.”,”9”,”8”,”.”,”.”,”.”,”.”,”6”,”.”], [“8”,”.”,”.”,”.”,”6”,”.”,”.”,”.”,”3”], [“4”,”.”,”.”,”8”,”.”,”3”,”.”,”.”,”1”], [“7”,”.”,”.”,”.”,”2”,”.”,”.”,”.”,”6”], [“.”,”6”,”.”,”.”,”.”,”.”,”2”,”8”,”.”], [“.”,”.”,”.”,”4”,”1”,”9”,”.”,”.”,”5”], [“.”,”.”,”.”,”.”,”8”,”.”,”.”,”7”,”9”]]输出： true 示例1： 输入：[ [“8”,”3”,”.”,”.”,”7”,”.”,”.”,”.”,”.”], [“6”,”.”,”.”,”1”,”9”,”5”,”.”,”.”,”.”], [“.”,”9”,”8”,”.”,”.”,”.”,”.”,”6”,”.”], [“8”,”.”,”.”,”.”,”6”,”.”,”.”,”.”,”3”], [“4”,”.”,”.”,”8”,”.”,”3”,”.”,”.”,”1”], [“7”,”.”,”.”,”.”,”2”,”.”,”.”,”.”,”6”], [“.”,”6”,”.”,”.”,”.”,”.”,”2”,”8”,”.”], [“.”,”.”,”.”,”4”,”1”,”9”,”.”,”.”,”5”], [“.”,”.”,”.”,”.”,”8”,”.”,”.”,”7”,”9”]]输出： false解释： 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。 说明: 一个有效的数独（部分已被填充）不一定是可解的。 只需要根据以上规则，验证已经填入的数字是否有效即可。 给定数独序列只包含数字 1-9 和字符 &#39;.&#39; 。 给定数独永远是 9x9 形式的。 2 解法2.1 思想行、列、宫分别分配一个哈希集记录出现的数字。 2.2 代码class Solution { char[][] globalBoard; //行:0-8,列:9-17,宫:18-26 Set&lt;Character>[] sets = new Set[27]; public boolean isValidSudoku(char[][] board) { for(int i = 0;i&lt;27;i++){ sets[i] = new HashSet&lt;>(); } globalBoard = board; for(int x = 0 ; x &lt; 9 ; x ++){ for(int y = 0;y&lt;9;y++){ if(isValidSingle(x,y)==false) return false; } } return true; } public boolean isValidSingle(int x,int y){ if(globalBoard[x][y]=='.') return true; if(sets[x].contains(globalBoard[x][y])) return false; sets[x].add(globalBoard[x][y]); if(sets[9+y].contains(globalBoard[x][y])) return false; sets[9+y].add(globalBoard[x][y]); if(sets[18+y/3*3+x/3].contains(globalBoard[x][y])) return false; sets[18+y/3*3+x/3].add(globalBoard[x][y]); return true; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"哈希集","slug":"哈希集","permalink":"https://www.codetool.top/tags/%E5%93%88%E5%B8%8C%E9%9B%86/"}]},{"title":"leetcode49-字母异位词分组","slug":"leetcode49-字母异位词分组","date":"2019-12-25T14:27:42.000Z","updated":"2019-12-25T14:30:00.650Z","comments":true,"path":"article/leetcode49-字母异位词分组/","link":"","permalink":"https://www.codetool.top/article/leetcode49-%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/","excerpt":"","text":"1 原题给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。 示例： 输入： [“eat”, “tea”, “tan”, “ate”, “nat”, “bat”]输出：[ [“ate”,”eat”,”tea”], [“nat”,”tan”], [“bat”]] 说明： 所有输入均为小写字母。 不考虑答案输出的顺序。 2 解法2.1 思想将字符串按字典顺序排序作为键，存储对应的异位字符串的List作为值。 2.2 代码class Solution { public List&lt;List&lt;String>> groupAnagrams(String[] strs) { Map&lt;String,List&lt;String>> map = new HashMap&lt;>(); List&lt;List&lt;String>> list = new ArrayList&lt;>(); for(String i:strs){ char[] chars = i.toCharArray(); Arrays.sort(chars); if(map.containsKey(String.valueOf(chars))){ map.get(String.valueOf(chars)).add(i); }else{ List&lt;String> newList = new ArrayList&lt;>(); newList.add(i); map.put(String.valueOf(chars),newList); list.add(newList); } } return list; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"哈希表","slug":"哈希表","permalink":"https://www.codetool.top/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"}]},{"title":"leetcode219-存在重复元素II","slug":"leetcode219-存在重复元素II","date":"2019-12-24T14:46:27.000Z","updated":"2019-12-24T14:49:21.163Z","comments":true,"path":"article/leetcode219-存在重复元素II/","link":"","permalink":"https://www.codetool.top/article/leetcode219-%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0II/","excerpt":"","text":"1 原题给定一个整数数组和一个整数 k，判断数组中是否存在两个不同的索引 i 和 j，使得 nums [i] = nums [j]，并且 i 和 j 的差的绝对值最大为 k。 示例1： 输入： nums = [1,2,3,1], k = 3输出： true 示例2： 输入： nums = [1,0,1,1], k = 1输出： true 示例3： 输入： nums = [1,2,3,1,2,3], k = 2输出： false 2 解法2.1 思想哈希表，将元素和最后出现的下标对应起来，后面遍历到相同元素时看下标之差是否小于等于k 2.2 代码class Solution { public boolean containsNearbyDuplicate(int[] nums, int k) { Map&lt;Integer,Integer> map = new HashMap&lt;>(); for(int i = 0;i&lt;nums.length;i++){ if(map.containsKey(nums[i])){ if(i-map.get(nums[i])&lt;=k) return true; } map.put(nums[i],i); } return false; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"哈希集","slug":"哈希集","permalink":"https://www.codetool.top/tags/%E5%93%88%E5%B8%8C%E9%9B%86/"}]},{"title":"leetcode350-两个数组的交集II","slug":"leetcode350-两个数组的交集II","date":"2019-12-23T14:35:59.000Z","updated":"2019-12-23T14:39:10.943Z","comments":true,"path":"article/leetcode350-两个数组的交集II/","link":"","permalink":"https://www.codetool.top/article/leetcode350-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86II/","excerpt":"","text":"1 原题给定两个数组，编写一个函数来计算它们的交集。 输入： nums1 = [1,2,2,1], nums2 = [2,2]输出： [2,2] 示例2： 输入： nums1 = [4,9,5], nums2 = [9,4,9,8,4]输出： [4,9] 说明： 输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。 我们可以不考虑输出结果的顺序。 进阶: 如果给定的数组已经排好序呢？你将如何优化你的算法？ 如果 nums1 的大小比 nums2 小很多，哪种方法更优？ 如果 nums2 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？ 2 解法2.1 思想哈希表，遍历第一个数组的时候把值和出现的次数对应起来，遍历第二个数组的时候可以得出并集。 2.2 代码class Solution { public int[] intersect(int[] nums1, int[] nums2) { Map&lt;Integer,Integer> map = new HashMap&lt;>(); for(int i:nums1){ if(map.containsKey(i)){ map.put(i,map.get(i)+1); }else map.put(i,1); } int length = 0; for(int i:nums2){ if(map.containsKey(i)){ if(map.get(i)-1 == 0){ map.remove(i); }else map.put(i,map.get(i)-1); nums1[length] = i; length++; } } int[] ret = new int[length]; System.arraycopy(nums1,0,ret,0,length); return ret; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"哈希集","slug":"哈希集","permalink":"https://www.codetool.top/tags/%E5%93%88%E5%B8%8C%E9%9B%86/"}]},{"title":"leetcode387-字符串中的第一个唯一字符","slug":"leetcode387-字符串中的第一个唯一字符","date":"2019-12-22T14:32:40.000Z","updated":"2019-12-22T14:35:09.253Z","comments":true,"path":"article/leetcode387-字符串中的第一个唯一字符/","link":"","permalink":"https://www.codetool.top/article/leetcode387-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/","excerpt":"","text":"1 原题给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。 案例: s = “leetcode”返回 0.s = “loveleetcode”,返回 2. 注意事项： 您可以假定该字符串只包含小写字母。 2 解法2.1 思想遍历两次数组，第一次将字母和出现的次数放在哈希表中对应起来，第二遍找出哈希表中值为1的字母。 2.2 代码class Solution { public int firstUniqChar(String s) { Map&lt;Character,Integer> map = new HashMap&lt;>(); int n = 0; char[] chars = s.toCharArray(); for(char i:chars){ if(map.containsKey(i)){ map.put(i,map.get(i)+1); }else{ map.put(i,1); } n++; } n = 0; for (char i:chars) { if(map.get(i)==1) return n; n++; } return -1; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"哈希集","slug":"哈希集","permalink":"https://www.codetool.top/tags/%E5%93%88%E5%B8%8C%E9%9B%86/"}]},{"title":"leetcode599-两个列表的最小索引总和","slug":"leetcode599-两个列表的最小索引总和","date":"2019-12-22T12:58:42.000Z","updated":"2019-12-22T13:16:39.887Z","comments":true,"path":"article/leetcode599-两个列表的最小索引总和/","link":"","permalink":"https://www.codetool.top/article/leetcode599-%E4%B8%A4%E4%B8%AA%E5%88%97%E8%A1%A8%E7%9A%84%E6%9C%80%E5%B0%8F%E7%B4%A2%E5%BC%95%E6%80%BB%E5%92%8C/","excerpt":"","text":"1 原题假设Andy和Doris想在晚餐时选择一家餐厅，并且他们都有一个表示最喜爱餐厅的列表，每个餐厅的名字用字符串表示。 你需要帮助他们用最少的索引和找出他们共同喜爱的餐厅。 如果答案不止一个，则输出所有答案并且不考虑顺序。 你可以假设总是存在一个答案。 示例1: 输入:[“Shogun”, “Tapioca Express”, “Burger King”, “KFC”][“Piatti”, “The Grill at Torrey Pines”, “Hungry Hunter Steakhouse”, “Shogun”]输出: [“Shogun”]解释: 他们唯一共同喜爱的餐厅是“Shogun”。 示例2: 输入:[“Shogun”, “Tapioca Express”, “Burger King”, “KFC”][“KFC”, “Shogun”, “Burger King”]输出: [“Shogun”]解释: 他们共同喜爱且具有最小索引和的餐厅是“Shogun”，它有最小的索引和1(0+1)。 提示: 两个列表的长度范围都在 [1, 1000]内。 两个列表中的字符串的长度将在[1，30]的范围内。 下标从0开始，到列表的长度减1。 两个列表都没有重复的元素。 2 解法2.1 思想哈希表，将第一个列表中的字符串和下标对应起来，然后遍历第二个列表找最小下标之和。 2.2 代码class Solution { public String[] findRestaurant(String[] list1, String[] list2) { Map&lt;String,Integer> map = new HashMap&lt;>(); int newLength = 0; int minSum = 2000; for(int i = 0;i&lt;list1.length;i++){ map.put(list1[i],i); } for(int i = 0;i&lt;list2.length;i++){ if(map.containsKey(list2[i])){ int n = i + map.get(list2[i]); if(n&lt;minSum){ list1[0] = list2[i]; newLength = 1; minSum = n; }else if(n == minSum){ list1[newLength] = list2[i]; newLength++; } } } String[] ret = new String[newLength]; System.arraycopy(list1,0,ret,0,newLength); return ret; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"哈希表","slug":"哈希表","permalink":"https://www.codetool.top/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"}]},{"title":"对象的输入输出-java序列化机制","slug":"对象的输入输出-java序列化机制","date":"2019-12-21T14:54:22.000Z","updated":"2019-12-22T07:50:55.799Z","comments":true,"path":"article/对象的输入输出-java序列化机制/","link":"","permalink":"https://www.codetool.top/article/%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA-java%E5%BA%8F%E5%88%97%E5%8C%96%E6%9C%BA%E5%88%B6/","excerpt":"","text":"对象序列化和反序列化，在java中体现为两种字节流： ObjectInputStream、ObjectOutputStream 1 序列化的概念指堆内存中的java对象数据，通过某种方式存储到磁盘文件中，或者传递给其他网络节点（网络传输）。这个过程称为序列化，通常是指将数据结构或对象转化成二进制的过程。 反序列化，顾名思义，则是将二进制字节流转化回java对象的过程。 java序列化是平台无关的。 2 序列化的作用 对象持久化 网络传输对象 进程间传递对象 3 如何序列化3.1 默认序列化 为类实现一个Serializable接口，这是一个空接口，没有需要实现的方法。 可以调用ObjectOutputStream.writeObject方法来序列化了。 调用ObjectInputStream.readObject来反序列化 3.2 自定义序列化过程实现Serializable接口之后，重写 writeObject(ObjectOutputStream) 、 readObject(ObjectInputStream) 方法。 4 序列化ID通常可序列化的类会使用一个序列化ID： private static final long serialVersionUID = 1L; java的序列化机制是通过判断运行时类的serialVersionUID来验证版本一致性的，在进行反序列化时，JVM会把传进来的字节流中的serialVersionUID与本地实体类中的serialVersionUID进行比较，如果相同则认为是一致的，便可以进行反序列化，否则就会报序列化版本不一致的异常InvalidClassException。 5 序列化之后的字节流格式我们用这样一段代码做实验： class SerializableObject implements Serializable{ } public class Main { public static void main(String[] args) throws IOException { ObjectOutputStream out = new ObjectOutputStream(System.out); Object obj = new SerializableObject(); out.writeObject(obj); } } 得到的结果为: aced 0005 7372 0012 5365 7269 616c 697a 6162 6c65 4f62 6a65 6374 0b8e b091 7d68 738d 0200 0078 70前两个字节固定： ac ed 紧接的是对象序列化格式的版本号： 00 05 接下来，73 代表接下来读取到的将是一个对象，72 代表该对象是一个对类的描述：73 72 接下来的两字节描述类名长度：00 12，对应18个字节的全限定类名。 于是接下来的18字节就是类名的UTF编码：5365 7269 616c 697a 6162 6c65 4f62 6a65 6374，就是类名SerializableObject。 接下来八个字节是序列化版本ID：0b8e b091 7d68 738d 接下来一个字节02代表了序列化中标识类版本。 继续往下两个字节就是 00 00 , 代表该类中字段的个数，由于我这个类内部为空没有字段，所以这里就是0。 然后是它包含的字段序列类型描述,其顺序即它们存储的顺序. 基本类型的组成为：一字节类型描述符 两字节字段名称长度 字段名称 类型描述符： 解码字符 代表类型 B byte C char D double F float I int J long L 对象 S short Z boolean [ 数组 字段序列类型描述结束后附加两个字节是固定的78 70 最后是字段信息（内容）的描述，这里都没有。 6 特殊情况 静态变量不会被序列化(static)，transient则可以限定字段不参与序列化。 当一个父类实现序列化，子类自动实现序列化，不需要显式实现Serializable接口。 当一个对象的实例变量引用其他对象，序列化该对象时也把引用对象进行序列化。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"基础知识","slug":"基础知识","permalink":"https://www.codetool.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"name":"序列化","slug":"序列化","permalink":"https://www.codetool.top/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"}]},{"title":"leetcode205-同构字符串","slug":"leetcode205-同构字符串","date":"2019-12-21T05:00:29.000Z","updated":"2019-12-21T05:40:32.909Z","comments":true,"path":"article/leetcode205-同构字符串/","link":"","permalink":"https://www.codetool.top/article/leetcode205-%E5%90%8C%E6%9E%84%E5%AD%97%E7%AC%A6%E4%B8%B2/","excerpt":"","text":"1 原题给定两个字符串 s 和 t，判断它们是否是同构的。 如果 s 中的字符可以被替换得到 t ，那么这两个字符串是同构的。 所有出现的字符都必须用另一个字符替换，同时保留字符的顺序。两个字符不能映射到同一个字符上，但字符可以映射自己本身。 示例1： 输入： s = “egg”, t = “add”输出： true 示例2： 输入： s = “foo”, t = “bar”输出： false 示例3： 输入： s = “paper”, t = “title”输出： true 2 解法2.1 思想 相同的字符要对应相同的字符，那么相同字符处于后位置的字符的第一次出现的位置就应该相同。 哈希表记录对应关系 2.2 代码 indexOf （作者:hao-fei-hao） class Solution { public boolean isIsomorphic(String s, String t) { char[] ch1 = s.toCharArray(); char[] ch2 = t.toCharArray(); int len = s.length(); for (int i = 0; i &lt; len; i++) { if(s.indexOf(ch1[i]) != t.indexOf(ch2[i])){ return false; } } return true; } } 哈希表 class Solution { public boolean isIsomorphic(String s, String t) { Map&lt;Character,Character> map = new HashMap&lt;>(); Map&lt;Character,Character> mapB = new HashMap&lt;>(); for(int i = 0;i&lt;s.length();i++){ if(map.containsKey(s.charAt(i))){ if(t.charAt(i)!=map.get(s.charAt(i))) return false; } if(mapB.containsKey(t.charAt(i))){ if(s.charAt(i)!=mapB.get(t.charAt(i))) return false; } map.put(s.charAt(i),t.charAt(i)); mapB.put(t.charAt(i),s.charAt(i)); } return true; } } 或 class Solution { public boolean isIsomorphic(String s, String t) { HashMap&lt;Character,Character> map=new HashMap&lt;>(); for (int i=0;i&lt;s.length();i++){ if (map.containsKey(s.charAt(i))) { if (map.get(s.charAt(i))!=t.charAt(i)) return false; }else{ //不存在对应的键但是存在对应的值 if (map.containsValue(t.charAt(i))) return false; else map.put(s.charAt(i),t.charAt(i)); } } return true; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"字符串","slug":"字符串","permalink":"https://www.codetool.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}]},{"title":"leetcode1-两数之和","slug":"leetcode1-两数之和","date":"2019-12-20T13:41:49.000Z","updated":"2019-12-20T15:41:39.496Z","comments":true,"path":"article/leetcode1-两数之和/","link":"","permalink":"https://www.codetool.top/article/leetcode1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/","excerpt":"","text":"1 原题给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。 示例: 给定 nums = [2, 7, 11, 15], target = 9因为 nums[0] + nums[1] = 2 + 7 = 9所以返回 [0, 1] 2 解法2.1 思想遍历一次数组，每次在哈希表中将target-当前数的值和当前下标关联起来，则之后遇到的值如果在哈希表中存在，就能得到前面的下标。 2.2 代码class Solution { public int[] twoSum(int[] nums, int target) { Map&lt;Integer,Integer> map = new HashMap&lt;>(); for(int i = 0;i&lt;nums.length;i++){ if(map.containsKey(nums[i])) { return new int[]{map.get(nums[i]),i}; } map.put(target-nums[i],i); } return null; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"哈希表","slug":"哈希表","permalink":"https://www.codetool.top/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"}]},{"title":"今天是我写博客历史上最黑暗的一天","slug":"今天是我写博客历史上最黑暗的一天","date":"2019-12-19T08:27:09.000Z","updated":"2019-12-19T08:44:32.468Z","comments":true,"path":"article/今天是我写博客历史上最黑暗的一天/","link":"","permalink":"https://www.codetool.top/article/%E4%BB%8A%E5%A4%A9%E6%98%AF%E6%88%91%E5%86%99%E5%8D%9A%E5%AE%A2%E5%8E%86%E5%8F%B2%E4%B8%8A%E6%9C%80%E9%BB%91%E6%9A%97%E7%9A%84%E4%B8%80%E5%A4%A9/","excerpt":"","text":"由于我博客中的图片一直是放在了一个公共图床上，这几天我这边加载博客中的图片有点加载不出来，再加上各种因素考虑，打算将我博客中的图片全部转到我自己服务器里面来。 当然，手动一篇一篇找博客中的图片链接，然后上传到自己的服务器的工作量肯定是非常大的。于是我想到了用python这个小助手（确实没想到后来我的工作量更大了😀） 我的主要需求就是，找出我博客目录下所有markdown文件中保存在公共图床上的图片链接，然后上传到自己的服务器，获取图片链接，然后替换掉原来的链接。 最后写出来应该是这样的（为了我的api安全就不展示所有代码了） import os import re url = ''# 我的图床api pattern = re.compile(r'https://s2\\S+\\.png')# 正则匹配我原来的图床链接 for dirName, subdirList, fileList in os.walk(\"./\"): print('Folder: %s' % dirName) for fname in fileList: if fname != '': # 排除掉一些文件，或只选择md文件 print(\"正在处理\"+fname+\"文件\") fp = open(dirName+\"/\"+fname,\"r+\",encoding='utf-8') content = fp.read() result = re.findall(pattern,content) for imgUrl in result: print(\"检测到图片：\"+imgUrl) # # # replaceUrl = '' # 上传到自己服务器，获取replaceUrl content = content.replace(imgUrl,replaceUrl) fp = open(dirName + \"/\" + fname, \"w+\", encoding='utf-8') fp.write(content) print(\"替换成功\") 那么，我犯了个什么错误呢😀 for fname in fileList: if fname != '': print(\"正在处理\"+fname+\"文件\") fp = open(dirName+\"/\"+fname,\"w+\",encoding='utf-8') # w+哦 content = fp.read() 没错就是要读的时候打开的方式写成了w+ 然后就直接运行了😀 后果就是哈麻批我markdown源文件全变成空白的了。 然后我就花了几个小时从我网站上一个一个网页地把他们写回markdown源文件。 如果现在某篇博客里有什么错误，很有可能就是我没仔细检查。 真是写博客历史上最黑暗的一天😀","categories":[{"name":"日常/随笔","slug":"日常-随笔","permalink":"https://www.codetool.top/categories/%E6%97%A5%E5%B8%B8-%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"日常","slug":"日常","permalink":"https://www.codetool.top/tags/%E6%97%A5%E5%B8%B8/"}]},{"title":"leetcode136-只出现一次的数字","slug":"leetcode136-只出现一次的数字","date":"2019-12-18T10:05:23.000Z","updated":"2019-12-19T08:16:46.721Z","comments":true,"path":"article/leetcode136-只出现一次的数字/","link":"","permalink":"https://www.codetool.top/article/leetcode136-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/","excerpt":"","text":"1 原题给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。 说明： 你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？ 输入： [2,2,1]输出： 1 示例2： 输入： [4,1,2,1,2]输出： 4 2 解法2.1 思想 哈希集第一次出现加到集合中，第二次出现从集合中删除，最后集合中剩下的那个元素即为只出现一次的数。 亦或 两个相同的数亦或的结果为0 0和n亦或的结果为n=&gt; 则所有数亦或的结果即为只出现一次的数。 2.2 代码 哈希集 class Solution { public int singleNumber(int[] nums) { Set&lt;Integer> set = new HashSet&lt;>(); for(int i:nums){ if(set.contains(i)) set.remove(i); else set.add(i); } for(int i:nums){ if(set.contains(i)) return i; } return 0; } } 亦或 class Solution { public int singleNumber(int[] nums) { int i,res=0; for(i=0;i&lt;nums.length;i++){ res=res^nums[i]; } return res; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"哈希集","slug":"哈希集","permalink":"https://www.codetool.top/tags/%E5%93%88%E5%B8%8C%E9%9B%86/"}]},{"title":"leetcode202-快乐数","slug":"leetcode202-快乐数","date":"2019-12-18T10:05:23.000Z","updated":"2019-12-19T08:17:52.630Z","comments":true,"path":"article/leetcode202-快乐数/","link":"","permalink":"https://www.codetool.top/article/leetcode202-%E5%BF%AB%E4%B9%90%E6%95%B0/","excerpt":"","text":"1 原题编写一个算法来判断一个数是不是“快乐数”。 一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。 示例： 输入： 19输出： true解释:12 + 92 = 8282 + 22 = 6862 + 82 = 10012 + 02 + 02 = 1 2 解法2.1 思想递归求解，当每一位上的数字的平方之和为1时返回true，否则递归计算其和。不是1的和可以计入哈希集中，避免重复遇到。 2.2 代码class Solution { Set&lt;Integer> set = new HashSet&lt;>(); public boolean isHappy(int n) { int sum = 0; char[] nums = String.valueOf(n).toCharArray(); int num = 0; for(char i:nums){ //获取每一位上的数字 num = i-48; sum += num * num; } if(sum==1) return true; if(set.contains(sum)) return false; set.add(sum); return isHappy(sum); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"},{"name":"哈希集","slug":"哈希集","permalink":"https://www.codetool.top/tags/%E5%93%88%E5%B8%8C%E9%9B%86/"}]},{"title":"leetcode217-存在重复元素","slug":"leetcode217-存在重复元素","date":"2019-12-18T10:05:23.000Z","updated":"2019-12-19T08:18:01.741Z","comments":true,"path":"article/leetcode217-存在重复元素/","link":"","permalink":"https://www.codetool.top/article/leetcode217-%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/","excerpt":"","text":"1 原题给定一个整数数组，判断是否存在重复元素。 如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。 示例1： 输入： [1,2,3,1]输出： true 示例2： 输入： [1,2,3,4]输出： false 示例3： 输入： [1,1,1,3,3,4,3,2,4,2]输出： true 2 解法2.1 思想哈希集 2.2 代码class Solution { public boolean containsDuplicate(int[] nums) { Set&lt;Integer> set = new HashSet&lt;>(); for(int i:nums){ if(set.contains(i)) return true; set.add(i); } return false; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"哈希集","slug":"哈希集","permalink":"https://www.codetool.top/tags/%E5%93%88%E5%B8%8C%E9%9B%86/"}]},{"title":"leetcode705-设计哈希集合","slug":"leetcode705-设计哈希集合","date":"2019-12-18T10:05:23.000Z","updated":"2019-12-19T08:18:30.572Z","comments":true,"path":"article/leetcode705-设计哈希集合/","link":"","permalink":"https://www.codetool.top/article/leetcode705-%E8%AE%BE%E8%AE%A1%E5%93%88%E5%B8%8C%E9%9B%86%E5%90%88/","excerpt":"","text":"1 原题不使用任何内建的哈希表库设计一个哈希集合 具体地说，你的设计应该包含以下的功能 add(value)：向哈希集合中插入一个值。 contains(value) ：返回哈希集合中是否存在这个值。 remove(value)：将给定值从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。 示例： MyHashSet hashSet = new MyHashSet();hashSet.add(1);hashSet.add(2);hashSet.contains(1); // 返回 truehashSet.contains(3); // 返回 false (未找到)hashSet.add(2);hashSet.contains(2); // 返回 truehashSet.remove(2);hashSet.contains(2); // 返回 false (已经被删除) 注意: 所有的值都在 [0, 1000000]的范围内。 操作的总数目在[1, 10000]范围内。 不要使用内建的哈希集合库。 2 解法2.1 思想偷懒，已知值的范围，直接将整数值映射为哈希值，有多少个哈希值建多少个桶，用空间换时间。 2.2 代码class MyHashSet { boolean[] exist; /** Initialize your data structure here. */ public MyHashSet() { exist = new boolean[1000001]; } public void add(int key) { exist[key] = true; } public void remove(int key) { exist[key] = false; } /** Returns true if this set contains the specified element */ public boolean contains(int key) { return exist[key]; } } /** * Your MyHashSet object will be instantiated and called as such: * MyHashSet obj = new MyHashSet(); * obj.add(key); * obj.remove(key); * boolean param_3 = obj.contains(key); */","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"哈希集","slug":"哈希集","permalink":"https://www.codetool.top/tags/%E5%93%88%E5%B8%8C%E9%9B%86/"}]},{"title":"leetcode706-设计哈希映射","slug":"leetcode706-设计哈希映射","date":"2019-12-18T10:05:23.000Z","updated":"2019-12-19T08:18:30.572Z","comments":true,"path":"article/leetcode706-设计哈希映射/","link":"","permalink":"https://www.codetool.top/article/leetcode706-%E8%AE%BE%E8%AE%A1%E5%93%88%E5%B8%8C%E6%98%A0%E5%B0%84/","excerpt":"","text":"1 原题不使用任何内建的哈希表库设计一个哈希映射 具体地说，你的设计应该包含以下的功能 put(key, value)：向哈希映射中插入(键,值)的数值对。如果键对应的值已经存在，更新这个值。 get(key)：返回给定的键所对应的值，如果映射中不包含这个键，返回-1。 remove(key)：如果映射中存在这个键，删除这个数值对。 示例： MyHashMap hashMap = new MyHashMap();hashMap.put(1, 1);hashMap.put(2, 2);hashMap.get(1); // 返回 1hashMap.get(3); // 返回 -1 (未找到)hashMap.put(2, 1); // 更新已有的值hashMap.get(2); // 返回 1hashMap.remove(2); // 删除键为2的数据hashMap.get(2); // 返回 -1 (未找到) 注意: 所有的值都在 [0, 1000000]的范围内。 操作的总数目在[1, 10000]范围内。 不要使用内建的哈希库。 2 解法2.1 思想偷懒，已知值的范围，直接将整数值映射为哈希值，有多少个哈希值建多少个桶，用空间换时间。（这里时间也换不了了，毕竟给1000000个元素赋初值还是挺耗时间的） 2.2 代码class MyHashMap { int[] values; /** Initialize your data structure here. */ public MyHashMap() { values = new int[1000001]; Arrays.fill(values, -1); } /** value will always be non-negative. */ public void put(int key, int value) { values[key] = value; } /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */ public int get(int key) { return values[key]; } /** Removes the mapping of the specified value key if this map contains a mapping for the key */ public void remove(int key) { values[key] = -1; } } /** * Your MyHashMap object will be instantiated and called as such: * MyHashMap obj = new MyHashMap(); * obj.put(key,value); * int param_2 = obj.get(key); * obj.remove(key); */","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"哈希表","slug":"哈希表","permalink":"https://www.codetool.top/tags/%E5%93%88%E5%B8%8C%E8%A1%A8/"}]},{"title":"leetcode138-复制带随机指针的链表","slug":"leetcode138-复制带随机指针的链表","date":"2019-12-17T10:05:23.000Z","updated":"2019-12-19T08:16:52.672Z","comments":true,"path":"article/leetcode138-复制带随机指针的链表/","link":"","permalink":"https://www.codetool.top/article/leetcode138-%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/","excerpt":"","text":"这道题和leetcode133-克隆图有异曲同工之妙。 1 原题给定一个链表，每个节点包含一个额外增加的随机指针，该指针可以指向链表中的任何节点或空节点。 要求返回这个链表的深拷贝。 示例： 输入:{“$id”:”1”,”next”:{“$id”:”2”,”next”:null,”random”:{“$ref”:”2”},”val”:2},”random”:{“$ref”:”2”},”val”:1} 解释:节点 1 的值是 1，它的下一个指针和随机指针都指向节点 2 。节点 2 的值是 2，它的下一个指针指向 null，随机指针指向它自己。 提示: 你必须返回给定头的拷贝作为对克隆列表的引用。 2 解法2.1 思想和leetcode133-克隆图的解法一致，甚至只需要改几行代码。 2.2 代码/* // Definition for a Node. class Node { public int val; public Node next; public Node random; public Node() {} public Node(int _val,Node _next,Node _random) { val = _val; next = _next; random = _random; } }; */ class Solution { //hashmap维持原链表和克隆链表之间节点的对应关系 Map&lt;Node, Node> lookup; public Node copyRandomList(Node head) { lookup = new HashMap&lt;>(); return dfs(head); } private Node dfs(Node node) { if (node == null) return null; //存在对应的克隆节点直接返回 if (lookup.containsKey(node)) return lookup.get(node); //先创建对应的克隆节点，next和random在递归返回的时候添加。 Node clone = new Node(node.val,null,null); lookup.put(node, clone); clone.next = dfs(node.next); clone.random = dfs(node.random); return clone; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"},{"name":"链表","slug":"链表","permalink":"https://www.codetool.top/tags/%E9%93%BE%E8%A1%A8/"}]},{"title":"leetcode2-两数相加","slug":"leetcode2-两数相加","date":"2019-12-17T10:05:23.000Z","updated":"2019-12-19T08:17:52.628Z","comments":true,"path":"article/leetcode2-两数相加/","link":"","permalink":"https://www.codetool.top/article/leetcode2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/","excerpt":"","text":"1 原题给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。 如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。 您可以假设除了数字 0 之外，这两个数都不会以 0 开头。 示例： 输入： (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)输出： 7 -&gt; 0 -&gt; 8原因： 342 + 465 = 807 2 解法2.1 思想模拟数学规则，将每一位对应的值和进位相加，将null一般化为0。 2.2 代码/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode addTwoNumbers(ListNode l1, ListNode l2) { ListNode preHead = new ListNode(0); int val1,val2,sum = 0; int carry = 0; ListNode cur = preHead; while(l1!=null || l2!=null || carry != 0){ val1 = l1==null?0:l1.val; val2 = l2==null?0:l2.val; sum = val1+val2+carry; if(sum>=10) { carry = 1; sum -= 10; }else carry = 0; cur.next = new ListNode(sum); cur = cur.next; l1 = l1 == null?null:l1.next; l2 = l2 == null?null:l2.next; } return preHead.next; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"链表","slug":"链表","permalink":"https://www.codetool.top/tags/%E9%93%BE%E8%A1%A8/"}]},{"title":"leetcode21-合并两个有序链表","slug":"leetcode21-合并两个有序链表","date":"2019-12-17T10:05:23.000Z","updated":"2019-12-19T08:18:01.741Z","comments":true,"path":"article/leetcode21-合并两个有序链表/","link":"","permalink":"https://www.codetool.top/article/leetcode21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/","excerpt":"","text":"1 原题将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 示例： 输入： 1-&gt;2-&gt;4, 1-&gt;3-&gt;4输出： 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4 2 解法2.1 思想比较两个有序链表的头指针指向的值，取其中值更小的连接到一个哨兵节点后面，然后该链表的头指针向后移一格，继续和另一个节点的头指针比较。 2.2 代码/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode mergeTwoLists(ListNode l1, ListNode l2) { ListNode virtualHead = new ListNode(0); ListNode cur = virtualHead; ListNode min; while(l1!=null || l2 != null){ min = null; if(l1==null || l2!=null&amp;&amp;l1.val>=l2.val){ min = l2; l2 = l2.next; } else if(l2==null || l1!=null&amp;&amp;l2.val>l1.val){ min = l1; l1 = l1.next; } cur.next = min; cur = cur.next; } return virtualHead.next; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"链表","slug":"链表","permalink":"https://www.codetool.top/tags/%E9%93%BE%E8%A1%A8/"}]},{"title":"leetcode430-扁平化多级双向链表","slug":"leetcode430-扁平化多级双向链表","date":"2019-12-17T10:05:23.000Z","updated":"2019-12-19T08:18:26.366Z","comments":true,"path":"article/leetcode430-扁平化多级双向链表/","link":"","permalink":"https://www.codetool.top/article/leetcode430-%E6%89%81%E5%B9%B3%E5%8C%96%E5%A4%9A%E7%BA%A7%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/","excerpt":"","text":"1 原题您将获得一个双向链表，除了下一个和前一个指针之外，它还有一个子指针，可能指向单独的双向链表。这些子列表可能有一个或多个自己的子项，依此类推，生成多级数据结构，如下面的示例所示。 扁平化列表，使所有结点出现在单级双链表中。您将获得列表第一级的头部。 示例： 输入：1—2—3—4—5—6–NULL | 7—8—9—10–NULL | 11–12–NULL 输出：1-2-3-7-8-11-12-9-10-4-5-6-NULL 以上示例的说明: 给出以下多级双向链表: 我们应该返回如下所示的扁平双向链表: 2 解法2.1 思想深度优先搜索，将每次最后一个搜索到节点记录下来，回溯的时候能继续附加在上一个节点之后。 2.2 代码/* // Definition for a Node. class Node { public int val; public Node prev; public Node next; public Node child; }; */ class Solution { Node pre = null; public Node flatten(Node head) { dfs(head); return head; } public void dfs(Node node){ if(node==null) return; Node child = node.child; Node next = node.next; node.child = null; if(pre != null){ pre.next = node; node.prev = pre; } pre = node; dfs(child); dfs(next); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"},{"name":"链表","slug":"链表","permalink":"https://www.codetool.top/tags/%E9%93%BE%E8%A1%A8/"}]},{"title":"leetcode61-旋转链表","slug":"leetcode61-旋转链表","date":"2019-12-17T10:05:23.000Z","updated":"2019-12-19T08:18:30.571Z","comments":true,"path":"article/leetcode61-旋转链表/","link":"","permalink":"https://www.codetool.top/article/leetcode61-%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/","excerpt":"","text":"1 原题给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。 示例1： 输入： 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2输出： 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL解释:向右旋转 1 步: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL向右旋转 2 步: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL 示例2： 输入： 0-&gt;1-&gt;2-&gt;NULL, k = 4输出： 2-&gt;0-&gt;1-&gt;NULL解释:向右旋转 1 步: 2-&gt;0-&gt;1-&gt;NULL向右旋转 2 步: 1-&gt;2-&gt;0-&gt;NULL向右旋转 3 步: 0-&gt;1-&gt;2-&gt;NULL向右旋转 4 步: 2-&gt;0-&gt;1-&gt;NULL 2 解法2.1 思想连接成环，找到新起点和终点。 2.2 代码/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode rotateRight(ListNode head, int k) { if(head == null) return null; ListNode cur = head; int size = 1; //找到尾节点 while(cur.next!=null){ size++; cur = cur.next; } //连接成环 cur.next = head; //找到新的尾节点 for(int i = 0;i&lt;size-(k%size);i++){ cur = cur.next; } //新的头节点 ListNode result = cur.next; cur.next = null; return result; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"链表","slug":"链表","permalink":"https://www.codetool.top/tags/%E9%93%BE%E8%A1%A8/"}]},{"title":"leetcode203-移除链表元素","slug":"leetcode203-移除链表元素","date":"2019-12-16T10:05:23.000Z","updated":"2019-12-19T08:17:52.630Z","comments":true,"path":"article/leetcode203-移除链表元素/","link":"","permalink":"https://www.codetool.top/article/leetcode203-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/","excerpt":"","text":"1 原题删除链表中等于给定值 val 的所有节点。 示例： 输入： 1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, val = 6输出： 1-&gt;2-&gt;3-&gt;4-&gt;5 2 解法2.1 思想pre指针停留在val出现之前，cur指针越过val，让pre的next指向cur。为了处理出现头节点被删除的特殊情况，增加一个虚拟头节点。 2.2 代码/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode removeElements(ListNode head, int val) { ListNode newHead = new ListNode(0); newHead.next = head; ListNode cur = head; ListNode pre = newHead; while(cur!=null){ if(cur.val!=val){ pre.next = cur; pre = cur; } cur = cur.next; } pre.next = cur; return newHead.next; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"},{"name":"链表","slug":"链表","permalink":"https://www.codetool.top/tags/%E9%93%BE%E8%A1%A8/"}]},{"title":"leetcode206-反转链表","slug":"leetcode206-反转链表","date":"2019-12-16T10:05:23.000Z","updated":"2019-12-19T08:17:52.632Z","comments":true,"path":"article/leetcode206-反转链表/","link":"","permalink":"https://www.codetool.top/article/leetcode206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/","excerpt":"","text":"1 原题反转一个单链表。 示例： 输入： 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL输出： 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL 进阶： 你可以迭代或递归地反转链表。你能否用两种方法解决这道题？ 2 解法2.1 思想 迭代（两种解法） 双指针 旋转前半部分cur其实就是head 递归从最后一个节点开始回溯，将箭头倒置。 2.2 代码迭代： 双指针(作者：王尼玛) class Solution { public ListNode reverseList(ListNode head) { //申请节点，pre和 cur，pre指向null ListNode pre = null; ListNode cur = head; ListNode tmp = null; while(cur!=null) { //记录当前节点的下一个节点 tmp = cur.next; //然后将当前节点指向pre cur.next = pre; //pre和cur节点都前进一位 pre = cur; cur = tmp; } return pre; } } 旋转前半部分 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode reverseList(ListNode head) { ListNode newHead = head; ListNode cur = head; if(head == null) return null; while(cur.next != null){ //记录不动的节点 ListNode follow = cur.next.next; //前半部分连成环 cur.next.next = newHead; newHead = cur.next; //将cur连到后半部分上 cur.next = follow; } return newHead; } } 递归： /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode reverseList(ListNode head) { //从最后一个节点回溯 if(head==null||head.next==null){ return head; } ListNode node = reverseList(head.next); //将head和head.next之间的箭头反转 head.next.next = head; head.next = null; return node; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"},{"name":"链表","slug":"链表","permalink":"https://www.codetool.top/tags/%E9%93%BE%E8%A1%A8/"}]},{"title":"leetcode234-回文链表","slug":"leetcode234-回文链表","date":"2019-12-16T10:05:23.000Z","updated":"2019-12-19T08:18:01.743Z","comments":true,"path":"article/leetcode234-回文链表/","link":"","permalink":"https://www.codetool.top/article/leetcode234-%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/","excerpt":"","text":"1 原题请判断一个链表是否为回文链表。 示例1： 输入： 1-&gt;2输出： false 示例2： 输入： 1-&gt;2-&gt;2-&gt;1输出： true 进阶: 你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？ 2 解法2.1 思想双指针解法：一个快指针一个慢指针，快指针每次移两步，慢指针每次移一步，这样快指针的落点有两种情况： 落在最后一个节点上，此时链表节点为奇数个，慢指针落在中间节点上。 落在最后一个节点指向的null上，此时链表节点为偶数个，慢指针落在中间靠右第一个节点上。 慢指针将链表分成了两半，将前半部分反转，再与后半部分比较，即可获取结果 2.2 代码/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ public boolean isPalindrome(ListNode head) { if(head == null || head.next == null) { return true; } ListNode slow = head, fast = head; ListNode pre = head, prepre = null; while(fast != null &amp;&amp; fast.next != null) { pre = slow; slow = slow.next; fast = fast.next.next; pre.next = prepre; prepre = pre; } //链表节点个数为奇数 if(fast != null) { slow = slow.next; } while(pre != null &amp;&amp; slow != null) { if(pre.val != slow.val) { return false; } pre = pre.next; slow = slow.next; } return true; }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"},{"name":"链表","slug":"链表","permalink":"https://www.codetool.top/tags/%E9%93%BE%E8%A1%A8/"}]},{"title":"leetcode328-奇偶链表","slug":"leetcode328-奇偶链表","date":"2019-12-16T10:05:23.000Z","updated":"2019-12-19T08:18:18.961Z","comments":true,"path":"article/leetcode328-奇偶链表/","link":"","permalink":"https://www.codetool.top/article/leetcode328-%E5%A5%87%E5%81%B6%E9%93%BE%E8%A1%A8/","excerpt":"","text":"1 原题给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。 请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。 示例1： 输入： 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL输出： 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL 示例2： 输入： 2-&gt;1-&gt;3-&gt;5-&gt;6-&gt;4-&gt;7-&gt;NULL输出： 2-&gt;3-&gt;6-&gt;7-&gt;1-&gt;5-&gt;4-&gt;NULL 说明: 应当保持奇数节点和偶数节点的相对顺序。 链表的第一个节点视为奇数节点，第二个节点视为偶数节点，以此类推。 2 解法2.1 思想1后面只连接奇数，2后面只连接偶数，最后合二为一。 2.2 代码/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode oddEvenList(ListNode head) { if(head == null || head.next == null) return head; ListNode oddCur=head; ListNode evenCur=head.next; ListNode evenHead = head.next; ListNode cur=evenCur.next; while(cur!=null){ oddCur.next = cur; oddCur = cur; if(cur.next!=null){ evenCur.next = cur.next; evenCur = cur.next; cur = cur.next.next; }else break; } evenCur.next = null; oddCur.next = evenHead; return head; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"链表","slug":"链表","permalink":"https://www.codetool.top/tags/%E9%93%BE%E8%A1%A8/"}]},{"title":"leetcode19-删除链表的倒数第N个节点","slug":"leetcode19-删除链表的倒数第N个节点","date":"2019-12-15T10:05:23.000Z","updated":"2019-12-19T08:17:52.627Z","comments":true,"path":"article/leetcode19-删除链表的倒数第N个节点/","link":"","permalink":"https://www.codetool.top/article/leetcode19-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/","excerpt":"","text":"1 原题给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。 示例: 给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2. 当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5. 说明: 给定的 n 保证是有效的。 进阶: 你能尝试使用一趟扫描实现吗？ 2 解法2.1 思想使用两个指针，让快指针一开始和慢指针保持n的距离，两者一起以同样速度移动，则当快指针指向链表的最后一个节点的时候，慢指针的下一个节点就是要删除的节点。 2.2 代码HashSet： /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode removeNthFromEnd(ListNode head, int n) { ListNode slow; ListNode fast; slow = fast = head; for(int i = 0;i&lt;n;i++){ fast = fast.next; } //这种情况需要删除头节点 if(fast == null) return head.next; while(fast.next!=null){ fast = fast.next; slow = slow.next; } slow.next = slow.next.next; return head; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"},{"name":"链表","slug":"链表","permalink":"https://www.codetool.top/tags/%E9%93%BE%E8%A1%A8/"}]},{"title":"leetcode141-环形链表","slug":"leetcode141-环形链表","date":"2019-12-14T10:05:23.000Z","updated":"2019-12-19T08:17:07.330Z","comments":true,"path":"article/leetcode141-环形链表/","link":"","permalink":"https://www.codetool.top/article/leetcode141-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/","excerpt":"","text":"1 原题给定一个链表，判断链表中是否有环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。 示例1: 输入: head = [3,2,0,-4], pos = 1输出: true解释: 链表中有一个环，其尾部连接到第二个节点。 示例2: 输入: head = [1,2], pos = 0输出: true解释: 链表中有一个环，其尾部连接到第一个节点。 示例3: 输入: head = [1], pos = -1输出: false解释: 链表中没有环。 进阶： 你能用 O(1)（即，常量）内存解决此问题吗？ 2 解法2.1 思想 HashSet依次将获取到的链表元素插入一个HashSet中，看是否有相同元素。 双指针一个快指针一个慢指针，如果有环快指针总会赶上慢指针。 2.2 代码HashSet： /** * Definition for singly-linked list. * class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public boolean hasCycle(ListNode head) { if(head == null) return false; Set&lt;ListNode> set = new HashSet&lt;>(); ListNode cur = head; while(cur.next!=null){ if(set.contains(cur)) return true; set.add(cur); cur = cur.next; } return false; } } 双指针： /** * Definition for singly-linked list. * class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public boolean hasCycle(ListNode head) { if(head == null){ return false; } ListNode slow = head; ListNode fast = head; while (slow!=null &amp;&amp; fast!=null &amp;&amp; fast.next!=null){ slow = slow.next; fast = fast.next.next; if(slow == fast){ return true; } } return false; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"},{"name":"链表","slug":"链表","permalink":"https://www.codetool.top/tags/%E9%93%BE%E8%A1%A8/"}]},{"title":"leetcode142-环形链表II","slug":"leetcode142-环形链表II","date":"2019-12-14T10:05:23.000Z","updated":"2019-12-19T08:44:00.265Z","comments":true,"path":"article/leetcode142-环形链表II/","link":"","permalink":"https://www.codetool.top/article/leetcode142-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II/","excerpt":"","text":"1 原题给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。 说明： 不允许修改给定的链表。 示例1: 输入: head = [3,2,0,-4], pos = 1输出: tail connects to node index 1解释: 链表中有一个环，其尾部连接到第二个节点。 示例2: 输入: head = [1,2], pos = 0输出: tail connects to node index 0解释: 链表中有一个环，其尾部连接到第一个节点。 示例3: 输入: head = [1], pos = -1输出: no cycle解释: 链表中没有环。 进阶： 你是否可以不用额外空间解决此题？ 2 解法2.1 思想 HashSet依次将获取到的链表元素插入一个HashSet中，返回第一个重复的节点。 双指针理论上慢指针和快指针在环中相遇的位置是有规律可循的：设第一个节点入环的距离为x，环的长度为y，则快指针每次走两步，慢指针每次走一步，第一次相遇经过的次数为t,则有：(t-x)%y = (2t-x)%y它等价于：(2t-x)-(t-x) = ny(n为自然数，代表第几次相遇)也就可以得出t = ny再通过第一次相遇的环上坐标为(t-x)%y，将t = y代入，得第一次相遇的环上坐标为y-x。此时，相遇点和出发点距入环点的距离都是x。于是让快指针回到出发点，两指针都以速度为1继续行走，直到相遇就是入环点。 2.2 代码HashSet： /** * Definition for singly-linked list. * class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public ListNode detectCycle(ListNode head) { if(head == null) return null; Set&lt;ListNode> set = new HashSet&lt;>(); ListNode cur = head; while(cur.next!=null){ if(set.contains(cur)) return cur; set.add(cur); cur = cur.next; } return null; } } 双指针： /** * Definition for singly-linked list. * class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public ListNode detectCycle(ListNode head){ ListNode fast = head, slow = head; boolean flag = false; while (fast != null &amp;&amp; fast.next != null){ fast = fast.next.next; slow = slow.next; if (fast == slow){ flag = true; break; } } if (!flag) return null; fast = head; while (fast != slow){ fast = fast.next; slow = slow.next; } return fast; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"},{"name":"链表","slug":"链表","permalink":"https://www.codetool.top/tags/%E9%93%BE%E8%A1%A8/"}]},{"title":"leetcode160-相交链表","slug":"leetcode160-相交链表","date":"2019-12-14T10:05:23.000Z","updated":"2019-12-19T08:17:52.627Z","comments":true,"path":"article/leetcode160-相交链表/","link":"","permalink":"https://www.codetool.top/article/leetcode160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/","excerpt":"","text":"1 原题编写一个程序，找到两个单链表相交的起始节点。 如下面的两个链表： 在节点 c1 开始相交。 示例 1： 输入： intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3输出： Reference of the node with value = 8输入解释： 相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。 示例 2： 输入： intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1输出： Reference of the node with value = 2输入解释： 相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。 示例 3： 输入： intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2输出： null输入解释： 从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。解释：这两个链表不相交，因此返回 null。 注意： 如果两个链表没有交点，返回 null. 在返回结果后，两个链表仍须保持原有的结构。 可假定整个链表结构中没有循环。 程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。 2 解法2.1 思想 HashSet依次将获取到的链表元素插入一个HashSet中，返回第一个重复的节点。 双指针两个指针从头走到尾的路径长度之差就是两条路径相交点前的长度之差，获取了这个差之后就可以路径短的让路径长的先走几步，然后同时出发，在相交点相遇。 2.2 代码HashSet： /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public ListNode getIntersectionNode(ListNode headA, ListNode headB) { if(headA==null || headB==null) return null; Set&lt;ListNode> set = new HashSet&lt;ListNode>(); ListNode curA = headA; ListNode curB = headB; while(curA!=null){ set.add(curA); curA = curA.next; } while(curB!=null){ if(set.contains(curB)) return curB; set.add(curB); curB = curB.next; } return null; } } 双指针： /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public ListNode getIntersectionNode(ListNode headA, ListNode headB) { if(headA == null || headB == null) return null; if(headA == headB) return headA; ListNode curA = headA; ListNode curB = headB; int countA = 0; int countB = 0; //两个指针先一起走一遍 while(curA!=curB &amp;&amp; (curA.next!=null || curB.next!=null)){ if(curA.next!=null){ curA = curA.next; countA++; } if(curB.next!=null){ curB = curB.next; countB++; } } if(curA != curB) return null; //获取两条路径的长度只差 int step; ListNode longer; ListNode near; if(countA>=countB){ step = countA-countB; longer = headA; near = headB; }else{ step = countB-countA; longer = headB; near = headA; } //近的让远的先走 while(longer != near){ longer = longer.next; if(step==0) near = near.next; else step --; } return longer; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"},{"name":"链表","slug":"链表","permalink":"https://www.codetool.top/tags/%E9%93%BE%E8%A1%A8/"}]},{"title":"leetcode349-两个数组的交集","slug":"leetcode349-两个数组的交集","date":"2019-12-14T10:05:23.000Z","updated":"2019-12-19T08:18:18.962Z","comments":true,"path":"article/leetcode349-两个数组的交集/","link":"","permalink":"https://www.codetool.top/article/leetcode349-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86/","excerpt":"","text":"1 原题给定两个数组，编写一个函数来计算它们的交集。 输入： nums1 = [1,2,2,1], nums2 = [2,2]输出： [2] 示例2： 输入： nums1 = [4,9,5], nums2 = [9,4,9,8,4]输出： [9,4] 2 解法2.1 思想哈希集，第一个数组中出现的数加入到集合中，第二个数组中存在集合中的数则加入到一个新的集合中，最后把第二个集合变成数组返回。 2.2 代码这种写法没有用第二个集合，但是思想是一样的，计算并集大小的过程中不要浪费时间，可以将并集元素搞在一块区域，然后复制地址空间返回。 class Solution { public int[] intersection(int[] nums1, int[] nums2) { Set&lt;Integer> set = new HashSet&lt;>(); int size = 0; for(int i:nums1){ set.add(i); } for(int i = 0;i&lt;nums2.length;i++){ if(set.contains(nums2[i])){ nums1[size] = nums2[i]; set.remove(nums2[i]); size++; } } int[] result = new int[size]; System.arraycopy(nums1,0,result,0,size); return result; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"哈希集","slug":"哈希集","permalink":"https://www.codetool.top/tags/%E5%93%88%E5%B8%8C%E9%9B%86/"}]},{"title":"leetcode707-设计链表","slug":"leetcode707-设计链表","date":"2019-12-14T10:05:23.000Z","updated":"2019-12-19T08:18:30.573Z","comments":true,"path":"article/leetcode707-设计链表/","link":"","permalink":"https://www.codetool.top/article/leetcode707-%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/","excerpt":"","text":"1 原题设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val 和 next。val 是当前节点的值，next 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。 在链表类中实现这些功能： get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。 addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。 addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。 addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val 的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。 deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。 示例： MyLinkedList linkedList = new MyLinkedList();linkedList.addAtHead(1);linkedList.addAtTail(3);linkedList.addAtIndex(1,2); //链表变为1-&gt; 2-&gt; 3linkedList.get(1); //返回2linkedList.deleteAtIndex(1); //现在链表是1-&gt; 3linkedList.get(1); //返回3 提示: 所有val值都在 [1, 1000] 之内。 操作次数将在 [1, 1000] 之内。 请不要使用内置的 LinkedList 库。 2 解法2.1 思想链表的数据结构！！ 一般会有一个size和一个head，特别注意如果有tail涉及到可能更改tail的地方一定要注意更改tail。（我调试这个bug调试了一个下午😭） 2.2 代码class MyLinkedList { private class Node{ public int val; public Node next; } private int size; private Node head; private Node tail; /** Initialize your data structure here. */ public MyLinkedList() { size = 0; head = tail = null; } /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */ public int get(int index) { if(index>=size || index&lt;0) return -1; Node cur = head; for(int i = 0;i&lt;index;i++) cur = cur.next; return cur.val; } /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */ public void addAtHead(int val) { Node newHead = new Node(); newHead.val = val; newHead.next = head; if(size==0) tail = newHead; head = newHead; size++; } /** Append a node of value val to the last element of the linked list. */ public void addAtTail(int val) { Node newTail = new Node(); newTail.val = val; newTail.next = null; if(size==0) head = newTail; else tail.next = newTail; tail = newTail; size++; } /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */ public void addAtIndex(int index, int val) { if(index>size) return; if(index &lt;= 0) { addAtHead(val); return; } if(index == size){ addAtTail(val); return; } Node node = new Node(); node.val = val; Node cur = head; for(int i = 0;i&lt;index-1;i++) cur = cur.next; node.next = cur.next; cur.next = node; size++; } /** Delete the index-th node in the linked list, if the index is valid. */ public void deleteAtIndex(int index) { if(index>=size || index &lt;0) return; size--; if(index == 0) { head = head.next; return; } Node cur = head; for(int i = 0;i&lt;index-1;i++) cur = cur.next; cur.next = cur.next.next; //这个地方！！！ 考虑到可能会把tail删除！！！ if(index == size){ tail = cur; } } } /** * Your MyLinkedList object will be instantiated and called as such: * MyLinkedList obj = new MyLinkedList(); * int param_1 = obj.get(index); * obj.addAtHead(val); * obj.addAtTail(val); * obj.addAtIndex(index,val); * obj.deleteAtIndex(index); */","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"链表","slug":"链表","permalink":"https://www.codetool.top/tags/%E9%93%BE%E8%A1%A8/"}]},{"title":"leetcode225--用队列实现栈","slug":"leetcode225-用队列实现栈","date":"2019-12-13T10:05:23.000Z","updated":"2019-12-19T08:18:01.742Z","comments":true,"path":"article/leetcode225-用队列实现栈/","link":"","permalink":"https://www.codetool.top/article/leetcode225-%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/","excerpt":"","text":"1 原题使用队列实现栈的下列操作： push(x) – 元素 x 入栈 pop() – 移除栈顶元素 top() – 获取栈顶元素 empty() – 返回栈是否为空 注意: 你只能使用队列的基本操作– 也就是 push to back, peek/pop from front, size, 和 is empty 这些操作是合法的。 你所使用的语言也许不支持队列。 你可以使用 list 或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。 你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。 2 解法2.1 思想用一个队列进行插入操作，要得到队列的最后一个插入的元素可以将其他的元素先插入第二个队列，得到最后一个元素之后再把元素插入回来。 2.2 代码class MyStack { Queue&lt;Integer> queue; Queue&lt;Integer> buffer; /** Initialize your data structure here. */ public MyStack() { queue = new LinkedList&lt;>(); buffer = new LinkedList&lt;>(); } /** Push element x onto stack. */ public void push(int x) { queue.offer(x); } /** Removes the element on top of the stack and returns that element. */ public int pop() { while(queue.size()!=1){ buffer.offer(queue.poll()); } int result = queue.poll(); while(!buffer.isEmpty()){ queue.offer(buffer.poll()); } return result; } /** Get the top element. */ public int top() { while(queue.size()!=1){ buffer.offer(queue.poll()); } int result = queue.poll(); buffer.offer(result); while(!buffer.isEmpty()){ queue.offer(buffer.poll()); } return result; } /** Returns whether the stack is empty. */ public boolean empty() { return queue.isEmpty(); } } /** * Your MyStack object will be instantiated and called as such: * MyStack obj = new MyStack(); * obj.push(x); * int param_2 = obj.pop(); * int param_3 = obj.top(); * boolean param_4 = obj.empty(); */","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"队列","slug":"队列","permalink":"https://www.codetool.top/tags/%E9%98%9F%E5%88%97/"},{"name":"栈","slug":"栈","permalink":"https://www.codetool.top/tags/%E6%A0%88/"}]},{"title":"leetcode232-用栈实现队列","slug":"leetcode232-用栈实现队列","date":"2019-12-13T10:05:23.000Z","updated":"2019-12-19T08:18:01.743Z","comments":true,"path":"article/leetcode232-用栈实现队列/","link":"","permalink":"https://www.codetool.top/article/leetcode232-%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/","excerpt":"","text":"1 原题使用栈实现队列的下列操作： push(x) – 将一个元素放入队列的尾部。 pop() – 从队列首部移除元素。 peek() – 返回队列首部的元素。 empty() – 返回队列是否为空。 示例: MyQueue queue = new MyQueue();queue.push(1);queue.push(2);queue.peek(); // 返回 1queue.pop(); // 返回 1queue.empty(); // 返回 false 说明: 你只能使用标准的栈操作 – 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。 你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。 假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。 2 解法2.1 思想用一个栈进行插入操作，要得到栈的第一个插入的元素需要再用一个栈将第一个栈中的元素次序翻转过来，得到第一个元素，再依次压栈回去。 2.2 代码class MyQueue { public Stack&lt;Integer> stack; public Stack&lt;Integer> reverse; /** Initialize your data structure here. */ public MyQueue() { stack = new Stack&lt;>(); reverse = new Stack&lt;>(); } /** Push element x to the back of queue. */ public void push(int x) { stack.push(x); } /** Removes the element from in front of queue and returns that element. */ public int pop() { while(!stack.empty()){ reverse.push(stack.pop()); } int result = reverse.pop(); while(!reverse.empty()){ stack.push(reverse.pop()); } return result; } /** Get the front element. */ public int peek() { while(!stack.empty()){ reverse.push(stack.pop()); } int result = reverse.peek(); while(!reverse.empty()){ stack.push(reverse.pop()); } return result; } /** Returns whether the queue is empty. */ public boolean empty() { return stack.empty(); } } /** * Your MyQueue object will be instantiated and called as such: * MyQueue obj = new MyQueue(); * obj.push(x); * int param_2 = obj.pop(); * int param_3 = obj.peek(); * boolean param_4 = obj.empty(); */","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"队列","slug":"队列","permalink":"https://www.codetool.top/tags/%E9%98%9F%E5%88%97/"},{"name":"栈","slug":"栈","permalink":"https://www.codetool.top/tags/%E6%A0%88/"}]},{"title":"leetcode394-字符串解码","slug":"leetcode394-字符串解码","date":"2019-12-13T10:05:23.000Z","updated":"2019-12-19T08:18:18.962Z","comments":true,"path":"article/leetcode394-字符串解码/","link":"","permalink":"https://www.codetool.top/article/leetcode394-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E7%A0%81/","excerpt":"","text":"1 原题给定一个经过编码的字符串，返回它解码后的字符串。 编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。 你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。 此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。 示例: s = “3[a]2[bc]”, 返回 “aaabcbc”.s = “3[a2[c]]”, 返回 “accaccacc”.s = “2[abc]3[cd]ef”, 返回 “abcabccdcdcdef”. 2 解法2.1 思想DFS，只处理字符串中不包含括号的，遇到带括号的将其分解。 2.2 代码class Solution { public String decodeString(String s) { return multify(1,s); } public String multify(int repeat,String s){ StringBuilder sb = new StringBuilder(); //字符串中不带括号 if(s.indexOf('[') == -1){ for(int i = 0;i&lt;repeat;i++){ sb.append(s); } return sb.toString(); }else{ //未匹配括号的个数 int count = 0; //第一个数字出现的index int firstNumberIndex = 0; //第一个左括号出现的index int firstLeftIndex = 0; boolean firstNumberHasShown = false; for(int i = 0;i&lt;s.length();i++){ //如果是数字记录第一个数字出现的index if(s.charAt(i)>='0'&amp;&amp;s.charAt(i)&lt;='9'){ if(firstNumberHasShown == false){ firstNumberIndex = i; firstNumberHasShown = true; } } //如果是左括号记录第一个左括号出现的index else if(s.charAt(i) == '['){ if(count == 0) firstLeftIndex = i; count ++; } //如果是右括号则未匹配的左括号数量减一，如果全部匹配完则把repeat和substring递归处理。 else if(s.charAt(i) == ']'){ count --; if(count == 0) { firstNumberHasShown = false; int repeatNum = Integer.valueOf(s.substring(firstNumberIndex,firstLeftIndex)); String subString = s.substring(firstLeftIndex+1,i); sb.append(multify(repeatNum,subString)); } } else if(count==0){ sb.append(s.charAt(i)); } } } return multify(repeat,sb.toString()); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode542-01矩阵","slug":"leetcode542-01矩阵","date":"2019-12-13T10:05:23.000Z","updated":"2019-12-24T14:51:24.858Z","comments":true,"path":"article/leetcode542-01矩阵/","link":"","permalink":"https://www.codetool.top/article/leetcode542-01%E7%9F%A9%E9%98%B5/","excerpt":"","text":"1 原题给定一个由 0 和 1 组成的矩阵，找出每个元素到最近的 0 的距离。 两个相邻元素间的距离为 1 。 示例1: 输入: 0 0 00 1 00 0 0 输出: 0 0 00 1 00 0 0 示例2: 输入: 0 0 00 1 01 1 1 输出: 0 0 00 1 01 2 1 注意: 给定矩阵的元素个数不超过 10000。 给定矩阵中至少有一个元素是 0。 矩阵中的元素只在四个方向上相邻: 上、下、左、右。 2 解法2.1 思想 BFS：先将所有0标记出，然后紧挨0未被标记出的就是1，标记所有1，紧挨1未被标记出的就是2…… 动态规划：依次遍历每个元素，如果四周有0就是1，如果没有也不是0就根据所有相邻元素对应的值中的最小值+1获得。 2.2 代码BFS： class Solution { class Point{ public int x; public int y; public Point(int x,int y){ this.x = x; this.y = y; } } public int[][] floodFill(int[][] image, int sr, int sc, int newColor) { Queue&lt;Point> queue = new LinkedList&lt;>(); queue.offer(new Point(sr,sc)); int origin = image[sr][sc]; int height = image.length; int width = image[0].length; if(newColor == origin) return image; while(!queue.isEmpty()){ Point point = queue.poll(); image[point.x][point.y] = newColor; if(point.x!=height-1 &amp;&amp; image[point.x+1][point.y] == origin){ queue.offer(new Point(point.x+1,point.y)); } if(point.x!=0 &amp;&amp; image[point.x-1][point.y] == origin){ queue.offer(new Point(point.x-1,point.y)); } if(point.y!=width-1 &amp;&amp; image[point.x][point.y+1] == origin){ queue.offer(new Point(point.x,point.y+1)); } if(point.y!= 0&amp;&amp; image[point.x][point.y-1] == origin){ queue.offer(new Point(point.x,point.y-1)); } } return image; } } 动态规划： class Solution { public int[][] updateMatrix(int[][] matrix) { int m = matrix.length ; int n = matrix[0].length; int[][] dp = new int[m][n]; for(int i = 0;i &lt; m; i++){ for(int j = 0; j &lt; n; j++){ dp[i][j] = dfs(matrix, dp, i, j); } } return dp; } public static int dfs(int[][] matrix,int[][] dp, int i, int j){ int m = matrix.length ; int n = matrix[0].length; if(i&lt;0 || i>m-1 || j &lt; 0 || j > n-1) return 9999; // 如果自身是0 if(matrix[i][j] == 0) return 0; // 如果四周有0 if(i > 0 &amp;&amp; matrix[i-1][j] == 0) return 1; if(j &lt; n-1 &amp;&amp; matrix[i][j+1] == 0) return 1; if(i &lt; m-1 &amp;&amp; matrix[i+1][j] == 0) return 1; if(j>0 &amp;&amp; matrix[i][j-1] == 0) return 1; // 如果四周没有0根据四周的dp最小值+1获取 int left,bottom,right,top; left=top=9999; if(i > 0 &amp;&amp; dp[i-1][j] != 0){ top = dp[i-1][j]; } if(j> 0 &amp;&amp; dp[i][j-1] != 0){ left = dp[i][j-1]; } bottom = dfs(matrix, dp,i+1, j); right = dfs(matrix, dp,i,j+1); return Math.min(Math.min(left, right), Math.min(top,bottom))+1; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"图","slug":"图","permalink":"https://www.codetool.top/tags/%E5%9B%BE/"}]},{"title":"leetcode733-图像渲染","slug":"leetcode733-图像渲染","date":"2019-12-13T10:05:23.000Z","updated":"2019-12-19T08:18:33.952Z","comments":true,"path":"article/leetcode733-图像渲染/","link":"","permalink":"https://www.codetool.top/article/leetcode733-%E5%9B%BE%E5%83%8F%E6%B8%B2%E6%9F%93/","excerpt":"","text":"1 原题有一幅以二维整数数组表示的图画，每一个整数表示该图画的像素值大小，数值在 0 到 65535 之间。 给你一个坐标 (sr, sc) 表示图像渲染开始的像素值（行 ，列）和一个新的颜色值 newColor，让你重新上色这幅图像。 为了完成上色工作，从初始坐标开始，记录初始坐标的上下左右四个方向上像素值与初始坐标相同的相连像素点，接着再记录这四个方向上符合条件的像素点与他们对应四个方向上像素值与初始坐标相同的相连像素点，……，重复该过程。将所有有记录的像素点的颜色值改为新的颜色值。 最后返回经过上色渲染后的图像。 示例1: 输入:image = [[1,1,1],[1,1,0],[1,0,1]]sr = 1, sc = 1, newColor = 2输出: [[2,2,2],[2,2,0],[2,0,1]]解析:在图像的正中间，(坐标(sr,sc)=(1,1)),在路径上所有符合条件的像素点的颜色都被更改成2。注意，右下角的像素没有更改为2，因为它不是在上下左右四个方向上与初始点相连的像素点。 注意: image 和 image[0] 的长度在范围 [1, 50] 内。 给出的初始点将满足 0 &lt;= sr &lt; image.length 和 0 &lt;= sc &lt; image[0].length。 image[i][j] 和 newColor 表示的颜色值在范围 [0, 65535]内。 2 解法2.1 思想图的BFS 2.2 代码class Solution { class Point{ public int x; public int y; public Point(int x,int y){ this.x = x; this.y = y; } } public int[][] floodFill(int[][] image, int sr, int sc, int newColor) { Queue&lt;Point> queue = new LinkedList&lt;>(); queue.offer(new Point(sr,sc)); int origin = image[sr][sc]; int height = image.length; int width = image[0].length; if(newColor == origin) return image; while(!queue.isEmpty()){ Point point = queue.poll(); image[point.x][point.y] = newColor; if(point.x!=height-1 &amp;&amp; image[point.x+1][point.y] == origin){ queue.offer(new Point(point.x+1,point.y)); } if(point.x!=0 &amp;&amp; image[point.x-1][point.y] == origin){ queue.offer(new Point(point.x-1,point.y)); } if(point.y!=width-1 &amp;&amp; image[point.x][point.y+1] == origin){ queue.offer(new Point(point.x,point.y+1)); } if(point.y!= 0&amp;&amp; image[point.x][point.y-1] == origin){ queue.offer(new Point(point.x,point.y-1)); } } return image; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"BFS","slug":"BFS","permalink":"https://www.codetool.top/tags/BFS/"},{"name":"图","slug":"图","permalink":"https://www.codetool.top/tags/%E5%9B%BE/"}]},{"title":"leetcode841-钥匙和房间","slug":"leetcode841-钥匙和房间","date":"2019-12-13T10:05:23.000Z","updated":"2019-12-19T08:19:32.625Z","comments":true,"path":"article/leetcode841-钥匙和房间/","link":"","permalink":"https://www.codetool.top/article/leetcode841-%E9%92%A5%E5%8C%99%E5%92%8C%E6%88%BF%E9%97%B4/","excerpt":"","text":"1 原题有 N 个房间，开始时你位于 0 号房间。每个房间有不同的号码：0，1，2，...，N-1，并且房间里可能有一些钥匙能使你进入下一个房间。 在形式上，对于每个房间 i 都有一个钥匙列表 rooms[i]，每个钥匙 rooms[i][j] 由 [0,1，...，N-1] 中的一个整数表示，其中 N = rooms.length。 钥匙 rooms[i][j] = v 可以打开编号为 v 的房间。 最初，除 0 号房间外的其余所有房间都被锁住。 你可以自由地在房间之间来回走动。 如果能进入每个房间返回 true，否则返回 false。 示例 1: 输入: [[1],[2],[3],[]]输出： true解释：我们从 0 号房间开始，拿到钥匙 1。之后我们去 1 号房间，拿到钥匙 2。然后我们去 2 号房间，拿到钥匙 3。最后我们去了 3 号房间。由于我们能够进入每个房间，我们返回 true。 示例 2: 输入: [[1,3],[3,0,1],[2],[0]]输出： false解释： 我们不能进入 2 号房间。 提示： 1 &lt;= rooms.length &lt;= 1000 0 &lt;= rooms[i].length &lt;= 1000 所有房间中的钥匙数量总计不超过 3000。 2 解法2.1 思想BFS搜索，记录去过哪些房间。 2.2 代码class Solution { public boolean canVisitAllRooms(List&lt;List&lt;Integer>> rooms) { int size = rooms.size(); int[] mark = new int[size]; mark[0] = 1; Queue&lt;List&lt;Integer>> queue = new LinkedList&lt;>(); queue.offer(rooms.get(0)); while(!queue.isEmpty()){ List&lt;Integer> room = queue.poll(); for(int i:room){ if(mark[i]==0){ queue.offer(rooms.get(i)); mark[i] = 1; } } } for(int i:mark){ if(i==0) return false; } return true; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"BFS","slug":"BFS","permalink":"https://www.codetool.top/tags/BFS/"}]},{"title":"leetcode133-克隆图","slug":"leetcode133-克隆图","date":"2019-12-12T10:05:23.000Z","updated":"2019-12-19T08:16:46.720Z","comments":true,"path":"article/leetcode133-克隆图/","link":"","permalink":"https://www.codetool.top/article/leetcode133-%E5%85%8B%E9%9A%86%E5%9B%BE/","excerpt":"","text":"1 原题给定无向连通图中一个节点的引用，返回该图的深拷贝（克隆）。图中的每个节点都包含它的值 val（Int） 和其邻居的列表（list[Node]）。 示例: 输入: {&quot;$id&quot;:&quot;1&quot;,&quot;neighbors&quot;:[{&quot;$id&quot;:&quot;2&quot;,&quot;neighbors&quot;:[{&quot;$ref&quot;:&quot;1&quot;},{&quot;$id&quot;:&quot;3&quot;,&quot;neighbors&quot;:[{&quot;$ref&quot;:&quot;2&quot;},{&quot;$id&quot;:&quot;4&quot;,&quot;neighbors&quot;:[{&quot;$ref&quot;:&quot;3&quot;},{&quot;$ref&quot;:&quot;1&quot;}],&quot;val&quot;:4}],&quot;val&quot;:3}],&quot;val&quot;:2},{&quot;$ref&quot;:&quot;4&quot;}],&quot;val&quot;:1}解释:节点 1 的值是 1，它有两个邻居：节点 2 和 4 。节点 2 的值是 2，它有两个邻居：节点 1 和 3 。节点 3 的值是 3，它有两个邻居：节点 2 和 4 。节点 4 的值是 4，它有两个邻居：节点 1 和 3 。 2 解法2.1 思想Hashmap维持原图节点和克隆节点的对应关系，如果给邻居节点赋值的时候不存在对应的克隆节点则获取对应的克隆节点，直到有一个节点的邻居节点的克隆节点都存在于map中。 2.2 代码/* // Definition for a Node. class Node { public int val; public List&lt;Node> neighbors; public Node() {} public Node(int _val,List&lt;Node> _neighbors) { val = _val; neighbors = _neighbors; } }; */ class Solution { //hashmap维持原图和克隆图之间节点的对应关系 Map&lt;Node, Node> lookup; public Node cloneGraph(Node node) { lookup = new HashMap&lt;>(); return dfs(node); } //每一次dfs操作实际上就是确保存在node节点的复制节点 private Node dfs(Node node) { if (node == null) return null; //存在对应的克隆节点直接返回 if (lookup.containsKey(node)) return lookup.get(node); //先创建对应的克隆节点，邻居列表在递归返回的时候添加。 Node clone = new Node(node.val, new ArrayList&lt;>()); lookup.put(node, clone); for (Node n : node.neighbors) //添加n的克隆节点 clone.neighbors.add(dfs(n)); return clone; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"},{"name":"图","slug":"图","permalink":"https://www.codetool.top/tags/%E5%9B%BE/"}]},{"title":"leetcode150-逆波兰表达式求值","slug":"leetcode150-逆波兰表达式求值","date":"2019-12-12T10:05:23.000Z","updated":"2019-12-19T08:17:34.986Z","comments":true,"path":"article/leetcode150-逆波兰表达式求值/","link":"","permalink":"https://www.codetool.top/article/leetcode150-%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/","excerpt":"","text":"1 原题根据逆波兰表示法，求表达式的值。 有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。 说明： 整数除法只保留整数部分。 给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。 示例1: 输入: [“2”, “1”, “+”, “3”, “”]*输出:** 9解释: ((2 + 1) * 3) = 9 示例2: 输入: [“4”, “13”, “5”, “/“, “+”]输出: 6解释: (4 + (13 / 5)) = 6 示例3: 输入: [“10”, “6”, “9”, “3”, “+”, “-11”, “”, “/“, “”, “17”, “+”, “5”, “+”]输出: 22解释: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5= ((10 * (6 / (12 * -11))) + 17) + 5= ((10 * (6 / -132)) + 17) + 5= ((10 * 0) + 17) + 5= (0 + 17) + 5= 17 + 5= 22 2 解法2.1 思想最底层必是一个能运算的最小单元，只要将后序遍历的结果依次入栈，遇到一个运算符则让两个数字出栈，计算结果之后再将结果入栈，如此循环最后就能得到答案。 2.2 代码class Solution { public int evalRPN(String[] tokens) { Stack&lt;Integer> stack = new Stack&lt;>(); for(String i:tokens){ if(i.equals(\"+\")){ int num1 = Integer.valueOf(stack.pop()); int num2 = Integer.valueOf(stack.pop()); stack.push(num1+num2); }else if(i.equals(\"-\")){ int num1 = Integer.valueOf(stack.pop()); int num2 = Integer.valueOf(stack.pop()); stack.push(num2-num1); }else if(i.equals(\"*\")){ int num1 = Integer.valueOf(stack.pop()); int num2 = Integer.valueOf(stack.pop()); stack.push(num1*num2); }else if(i.equals(\"/\")){ int num1 = Integer.valueOf(stack.pop()); int num2 = Integer.valueOf(stack.pop()); stack.push(num2/num1); }else{ stack.push(Integer.valueOf(i)); } } return stack.peek(); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"栈","slug":"栈","permalink":"https://www.codetool.top/tags/%E6%A0%88/"}]},{"title":"leetcode494-目标和","slug":"leetcode494-目标和","date":"2019-12-12T10:05:23.000Z","updated":"2019-12-19T08:18:26.367Z","comments":true,"path":"article/leetcode494-目标和/","link":"","permalink":"https://www.codetool.top/article/leetcode494-%E7%9B%AE%E6%A0%87%E5%92%8C/","excerpt":"","text":"1 原题给定一个非负整数数组，a1, a2, …, an, 和一个目标数，S。现在你有两个符号 + 和 -。对于数组中的任意一个整数，你都可以从 + 或 -中选择一个符号添加在前面。 返回可以使最终数组和为目标数 S 的所有添加符号的方法数。 示例 1: 输入: nums: [1, 1, 1, 1, 1], S: 3输出: 5解释:-1+1+1+1+1 = 3+1-1+1+1+1 = 3+1+1-1+1+1 = 3+1+1+1-1+1 = 3+1+1+1+1-1 = 3一共有5种方法让最终目标和为3。 注意: 数组非空，且长度不会超过20。 初始的数组的和不会超过1000。 保证返回的最终结果能被32位整数存下。 2 解法2.1 思想DFS比较暴力，追求时间快可以用01背包问题的动态规划思想，以后更。 2.2 代码class Solution { public int[] numsArray; public int target; public int findTargetSumWays(int[] nums, int S) { numsArray = nums; target = S; return dfs(0,0); } public int dfs(int index,int sum){ if(index == numsArray.length){ if(sum == target) return 1; else return 0; } return dfs(index+1,sum+numsArray[index])+dfs(index+1,sum-numsArray[index]); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"}]},{"title":"leetcode94-二叉树的中序遍历","slug":"leetcode94-二叉树的中序遍历","date":"2019-12-12T10:05:23.000Z","updated":"2020-01-10T07:36:54.852Z","comments":true,"path":"article/leetcode94-二叉树的中序遍历/","link":"","permalink":"https://www.codetool.top/article/leetcode94-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/","excerpt":"","text":"1 原题给定一个二叉树，返回它的 中序 遍历。 示例: 输入: [1,null,2,3]&nbsp;1&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;/&nbsp;3输出: [1,3,2] 进阶: 递归算法很简单，你可以通过迭代算法完成吗？ 2 解法2.1 思想DFS，递归方法着实很简单，迭代很抽象。 2.2 代码递归： /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { List&lt;Integer> ans = new ArrayList&lt;>(); public List&lt;Integer> inorderTraversal(TreeNode root) { if(root!=null){ inorderTraversal(root.left); ans.add(root.val); inorderTraversal(root.right); } return ans; } } 迭代，我一开始这么写的，用一个HashSet记录栈存储过的节点： class Solution { public List&lt;Integer> inorderTraversal(TreeNode root) { Stack&lt;TreeNode> stack = new Stack&lt;>(); List&lt;Integer> ans = new ArrayList&lt;>(); Set&lt;TreeNode> set = new HashSet&lt;>(); stack.push(root); if(root == null) return ans; while(!stack.empty()){ TreeNode node = stack.peek(); if(null!=node.left &amp;&amp; !set.contains(node.left)) { stack.push(node.left); set.add(node.left); } else{ ans.add(node.val); stack.pop(); if(null!=node.right) stack.push(node.right); node = null; } } return ans; } } 然后看到官方的写法，这才是递归转化过来的写法： public class Solution { public List &lt;Integer> inorderTraversal(TreeNode root) { List &lt;Integer> res = new ArrayList&lt;>(); Stack &lt;TreeNode> stack = new Stack&lt;>(); TreeNode curr = root; while (curr != null || !stack.isEmpty()) { while (curr != null) { stack.push(curr); curr = curr.left; } curr = stack.pop(); res.add(curr.val); curr = curr.right; } return res; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"},{"name":"树","slug":"树","permalink":"https://www.codetool.top/tags/%E6%A0%91/"}]},{"title":"leetcode155-最小栈","slug":"leetcode155-最小栈","date":"2019-12-11T10:05:23.000Z","updated":"2019-12-19T08:17:34.986Z","comments":true,"path":"article/leetcode155-最小栈/","link":"","permalink":"https://www.codetool.top/article/leetcode155-%E6%9C%80%E5%B0%8F%E6%A0%88/","excerpt":"","text":"1 原题设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。 push(x) – 将元素 x 推入栈中。 pop() – 删除栈顶的元素。 top() – 获取栈顶元素。 getMin() – 检索栈中的最小元素。 示例: MinStack minStack = new MinStack();minStack.push(-2);minStack.push(0);minStack.push(-3);minStack.getMin(); –&gt; 返回 -3.minStack.pop();minStack.top(); –&gt; 返回 0.minStack.getMin(); –&gt; 返回 -2. 2 解法2.1 思想用list实现栈，再用一个stack保存着入栈期间出现过的所有最小数。（栈首元素表示在某个时刻list中最小的数）。 2.2 代码class MinStack { public List&lt;Integer> list; public Stack&lt;Integer> stack; /** initialize your data structure here. */ public MinStack() { list = new ArrayList&lt;>(); stack = new Stack&lt;>(); } public void push(int x) { //添加元素时，如果最小数栈是空的或者该元素比栈首元素要小，则入栈 if(stack.empty()||x&lt;=stack.peek()) stack.push(x); list.add(x); } public void pop() { //移除元素时，如果移除的元素是最小数栈的栈首元素，那么栈首元素也要出栈 if(stack.peek().equals(list.get(list.size()-1))) stack.pop(); list.remove(list.size()-1); } public int top() { return list.get(list.size()-1); } public int getMin() { //最小数栈的栈首元素 return stack.peek(); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"栈","slug":"栈","permalink":"https://www.codetool.top/tags/%E6%A0%88/"}]},{"title":"leetcode20-有效的括号","slug":"leetcode20-有效的括号","date":"2019-12-11T10:05:23.000Z","updated":"2019-12-19T08:17:52.629Z","comments":true,"path":"article/leetcode20-有效的括号/","link":"","permalink":"https://www.codetool.top/article/leetcode20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/","excerpt":"","text":"1 原题给定一个只包括 &#39;(&#39;，&#39;)&#39;，&#39;{&#39;，&#39;}&#39;，&#39;[&#39;，&#39;]&#39; 的字符串，判断字符串是否有效。 有效字符串需满足： 左括号必须用相同类型的右括号闭合。 左括号必须以正确的顺序闭合。 注意空字符串可被认为是有效字符串。 示例1: 输入: “()”输出: true 示例2: 输入: “()[]{}”输出: true 示例3: 输入: “(]”输出: false 示例4: 输入: “([)]”输出: false 示例5: 输入: “{[]}”输出: true 2 解法2.1 思想左括号全部入栈，如果是右括号寻找栈首是否为对应的左括号，存在就将左括号出栈，直到栈元素全部清空。 2.2 代码class Solution { public boolean isValid(String s) { if(s.equals(\"\")) return true; Stack&lt;Character> stack = new Stack&lt;>(); for(char c:s.toCharArray()){ if(c=='('||c=='['||c=='{'){ stack.push(c); } if(c == ')'){ if(!stack.empty()&amp;&amp;stack.peek().equals('(')) stack.pop(); else return false; } if(c == ']'){ if(!stack.empty()&amp;&amp;stack.peek().equals('[')) stack.pop(); else return false; } if(c == '}'){ if(!stack.empty()&amp;&amp;stack.peek().equals('{')) stack.pop(); else return false; } } if(stack.empty()) return true; return false; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"栈","slug":"栈","permalink":"https://www.codetool.top/tags/%E6%A0%88/"}]},{"title":"leetcode279-完全平方数","slug":"leetcode279-完全平方数","date":"2019-12-11T10:05:23.000Z","updated":"2019-12-19T08:18:18.960Z","comments":true,"path":"article/leetcode279-完全平方数/","link":"","permalink":"https://www.codetool.top/article/leetcode279-%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/","excerpt":"","text":"1 原题给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, …）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。 示例 1: 输入: n = 12输出: 3解释: 12 = 4 + 4 + 4. 示例 2: 输入: n = 13输出: 2解释: 13 = 4 + 9. 2 解法2.1 思想以12为例。 这道题确实对时间要求比较严格，如果不过滤掉重复计算的部分会无法通过。 从目标数出发自顶向下： 由已知的目标数出发，减去比它小的平方数，这样一层一层减下去，直到获得0的那一层的层数就是答案。 需要过滤掉数值重复的节点，比如11-4和8-1。 从平方数出发自底向上： 由比已知目标数小的所有平方数出发，每层做一个组合加法，但是有一些地方需要处理： 遇到数值相等的节点，如1+4和4+1，跳过该节点。 在组合的时候遇到从一个数开始，加上它就会大于目标数，那么它之后的平方数都可以不做组合了，因为都比它大。 2.2 代码自顶向下： class Node{ public int value; public int depth; public Node(int value,int depth){ this.value = value; this.depth = depth; } } class Solution { public int numSquares(int n) { int mark[] = new int[n]; if(n&lt;4) return n; Queue&lt;Node> queue = new LinkedList&lt;>(); queue.offer(new Node(n,0)); while(!queue.isEmpty()){ Node node = queue.poll(); if(node.value==0) return node.depth; int sqrt = (int)Math.sqrt(node.value); for(int i = sqrt; i > 0 ; i--){ if(mark[node.value-i*i]==0){ queue.offer(new Node(node.value-i*i,node.depth+1)); mark[node.value-i*i] = 1; } } } return -1; } } 自底向上 class Node{ public int value; public int depth; public Node(int value,int depth){ this.value = value; this.depth = depth; } } class Solution { public int numSquares(int n) { Queue&lt;Node> queue = new LinkedList&lt;>(); int a = (int)Math.sqrt(n); int[] mark = new int[n+1]; for(int i = a;i>a/2;i--){ queue.offer(new Node(i*i,1)); mark[i*i] = 1; } while(!queue.isEmpty()){ Node node = queue.poll(); int value = node.value; if(value==n) return node.depth; for(int i = 1;i&lt;=a;i++){ if(value+i*i>n) break; if(mark[value+i*i]==1) continue; queue.offer(new Node(value+i*i,node.depth+1)); mark[value+i*i] = 1; } } return -1; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"BFS","slug":"BFS","permalink":"https://www.codetool.top/tags/BFS/"}]},{"title":"leetcode739-每日温度","slug":"leetcode739-每日温度","date":"2019-12-11T10:05:23.000Z","updated":"2019-12-19T08:18:33.953Z","comments":true,"path":"article/leetcode739-每日温度/","link":"","permalink":"https://www.codetool.top/article/leetcode739-%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/","excerpt":"","text":"1 原题根据每日 气温 列表，请重新生成一个列表，对应位置的输入是你需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用 0 来代替。 例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。 提示： 气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。 2 解法2.1 思想 基础栈解法：时间复杂度O(nlog n)将数组元素依次入栈，如果当前元素比栈首元素大则将栈首元素出栈，并知道了和栈首元素之间的距离。再次和下一个栈首元素比较，如此循环。 逆序跳跃：时间复杂度O(n)https://leetcode-cn.com/problems/daily-temperatures/solution/jie-ti-si-lu-by-pulsaryu/ 2.2 代码 基础栈 class Node{ public int value; public int pos; public Node(int value,int pos){ this.value = value; this.pos = pos; } } class Solution { public int[] dailyTemperatures(int[] T) { Stack&lt;Node> stack = new Stack&lt;>(); int[] ans = new int[T.length]; for(int i = 0;i&lt;T.length;i++){ while(!stack.empty()&amp;&amp;T[i]>stack.peek().value){ Node node = stack.pop(); ans[node.pos] = i - node.pos; } stack.push(new Node(T[i],i)); } while(!stack.empty()){ Node node = stack.pop(); ans[node.pos] = 0; } return ans; } } 逆序跳跃（作者：pulsaryu） public int[] dailyTemperatures(int[] T) { int length = T.length; int[] result = new int[length]; //从右向左遍历 for (int i = length - 2; i >= 0; i--) { // j+= result[j]是利用已经有的结果进行跳跃 for (int j = i + 1; j &lt; length; j+= result[j]) { if (T[j] > T[i]) { result[i] = j - i; break; } else if (result[j] == 0) { //遇到0表示后面不会有更大的值，那当然当前值就应该也为0 result[i] = 0; break; } } } return result; }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"栈","slug":"栈","permalink":"https://www.codetool.top/tags/%E6%A0%88/"}]},{"title":"用hexo的live2d插件做了一个可以聊天的小宠物","slug":"用hexo的live2d插件做了一个可以聊天的小宠物","date":"2019-12-10T10:05:23.000Z","updated":"2019-12-19T08:20:11.867Z","comments":true,"path":"article/用hexo的live2d插件做了一个可以聊天的小宠物/","link":"","permalink":"https://www.codetool.top/article/%E7%94%A8hexo%E7%9A%84live2d%E6%8F%92%E4%BB%B6%E5%81%9A%E4%BA%86%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E8%81%8A%E5%A4%A9%E7%9A%84%E5%B0%8F%E5%AE%A0%E7%89%A9/","excerpt":"","text":"今天觉得我的博客有点小小的简陋，就做了一点美化工作 主要使用hexo的live2d插件（感谢作者），搭配上机器人对话api，做了一个可以聊天的小宠物。 本来是在live2d的github主页上看到了有dialog这个配置选项，一开始以为就是可以配置一个交互式的聊天窗口。 dialog配置 然后发现使用一言api只是过个几秒钟给你弹一句话看看，也没有其他的api选项可以配置，在百度上一搜好像也没有多少人写过关于这个dialog的用法。 然后我看了下它生成的源码： 组件结构 live2d-widget是整个组件的div，里面有一个live2d-widget-dialog就是卡通形象上面的那个对话框，live2dcanvas就是画卡通形象的画布。如果要让对话框显示文字，就是修改class名为live2d-widget-dialog的div的innerHtml。 既然没有提供相关的对话api，那就手动做一个吧。 1 live2d安装你既然看到了这篇文章，我就假设你知道live2d是什么 (看板娘) 。在hexo安装live2d插件的方式很简单： npm install --save hexo-helper-live2d 然后选一个心仪的模型安装，模型的预览可以参考插件作者的博客： https://huaji8.top/post/live2d-plugin-2.0/ 模型的名称参考： https://github.com/xiazeyu/live2d-widget-models npm install --save 模型名称 然后在hexo根目录下的_config.yml中配置live2d： #live2d live2d: enable: true scriptFrom: local model: use: live2d-widget-model-wanko #模型选择 display: position: right #模型位置 width: 200 #模型宽度 height: 200 #模型高度 hOffset: 20 #水平偏移 vOffset: 100 #垂直偏移 mobile: show: false #是否在手机端显示 dialog: enable: true #启用对话框 hitokoto: false 具体的配置可以参考： https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init 2 组件改造2.1 在模型下方增加一个input输入框因为我把模型放在了右边，并且水平偏移和垂直偏移都是已知的。要在它的下方增加一个输入框，找到hexo中/themes/你的主题/layout/layout.ejs文件，在里面body标签中末尾添加： &lt;div id=\"chat_input\"> &lt;input id=\"question\" type=\"text\" placeholder=\"陪我聊聊天吧\" onkeypress=\"return onKeyPress(event)\"/> &lt;/div> 然后在文件尾部配置它的样式： &lt;style> #chat_input{ width: 200px; height: 40px; position: fixed; bottom: 80px; right: 20px; } #question{ border: none;/*取消输入框边框*/ border-bottom: 1px #aaaaaa solid;/*设置下边框*/ background-color: transparent;/*背景透明*/ padding: 5px; } /*手机端不显示*/ @media screen and (max-width: 480px) { #chat_input{ display: none; } #live2d-widget{ display: none; } } &lt;/style> 输入框就做好了。 2.2 聊天逻辑实现要做到智能聊天需要一个聊天机器人的api，有图灵机器人、小i机器人等可以选择。 我这里用的是茉莉机器人，就不推荐大家使用了，小小吐槽一下这个开发者好像不是很懂后端api，鉴权方式有点奇怪 (人间迷惑行为大赏)。 获取了api之后就可以做输入框的事件处理：（因为我的主题不包含jQuery我也懒得引，就用的原生js） //在聊天框按下回车事件处理 function onKeyPress(e){ var keyCode = null; if(e.which) keyCode = e.which; else if(e.keyCode) keyCode = e.keyCode; //如果按下回车 if(keyCode == 13) { // 获取输入框中的问题 var question_box = document.getElementById('question') var question = question_box.value //清空输入框内容并禁用输入框 question_box.value = \"\" question_box.setAttribute(\"disabled\",\"disabled\") //不要问我为什么不隐藏这个:） var api_key = \"78c33a07808c7b9e1905c89c88b3be14\" var api_secret = \"q707tevnk00f\" // 通过XHR发送一个GET请求 var xhr = new XMLHttpRequest() xhr.open('GET','http://i.itpk.cn/api.php?question='+encodeURIComponent(question)+\"&amp;api_key=\"+api_key+\"&amp;api_secret=\"+api_secret) xhr.onload = function(){ //启用输入框 question_box.removeAttribute('disabled'); //获取对话框 var live2d_dialog = document.getElementsByClassName(\"live2d-widget-dialog\")[0] //显示对话框并把获取到的内容显示在对话框上 live2d_dialog.style.opacity=1 live2d_dialog.innerHTML = this.responseText //五秒后隐藏对话框 window.setTimeout(()=>{ live2d_dialog.style.opacity=0 }, 5000); } } 需要注意的是： 一般api都不允许js跨域，需要用自己的服务器代理一下或者做一下中间处理（把认证的东西放自己服务器上） 我这里没把认证key和secret放自己服务器的原因是。。。这个api看上去就很不安全啊，没必要多此一举。 一般api用的是POST请求并且需要解析返回的JSON数据，我这里没有大家懂的都懂: ) 20:43补充： 谁知道我最后还是用了自己的服务器代理😀，因为我发现https网站发送不了http请求。 嘻嘻，说不定哪天我就换个api用了。","categories":[{"name":"日常/随笔","slug":"日常-随笔","permalink":"https://www.codetool.top/categories/%E6%97%A5%E5%B8%B8-%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"网站日志","slug":"网站日志","permalink":"https://www.codetool.top/tags/%E7%BD%91%E7%AB%99%E6%97%A5%E5%BF%97/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://www.codetool.top/tags/JavaScript/"},{"name":"hexo","slug":"hexo","permalink":"https://www.codetool.top/tags/hexo/"}]},{"title":"leetcode752-打开转盘锁","slug":"leetcode752-打开转盘锁","date":"2019-12-09T10:05:23.000Z","updated":"2019-12-19T08:18:42.117Z","comments":true,"path":"article/leetcode752-打开转盘锁/","link":"","permalink":"https://www.codetool.top/article/leetcode752-%E6%89%93%E5%BC%80%E8%BD%AC%E7%9B%98%E9%94%81/","excerpt":"","text":"1 原题你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;。每个拨轮可以自由旋转：例如把&#39;9&#39; 变为 &#39;0&#39;，&#39;0&#39;变为 &#39;9&#39; 。每次旋转都只能旋转一个拨轮的一位数字。 锁的初始数字为 &#39;0000&#39; ，一个代表四个拨轮的数字的字符串。 列表 deadends 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。 字符串 target 代表可以解锁的数字，你需要给出最小的旋转次数，如果无论如何不能解锁，返回 -1。 示例 1: 输入: deadends = [“0201”,”0101”,”0102”,”1212”,”2002”], target = “0202”输出： 6解释：可能的移动序列为 “0000” -&gt; “1000” -&gt; “1100” -&gt; “1200” -&gt; “1201” -&gt; “1202” -&gt; “0202”。注意 “0000” -&gt; “0001” -&gt; “0002” -&gt; “0102” -&gt; “0202” 这样的序列是不能解锁的，因为当拨动到 “0102” 时这个锁就会被锁定。 示例 2: 输入: deadends = [“8888”], target = “0009”输出： 1解释：把最后一位反向旋转一次即可 “0000” -&gt; “0009”。 示例 3: 输入: deadends = [“8887”,”8889”,”8878”,”8898”,”8788”,”8988”,”7888”,”9888”], target = “8888”输出： -1解释：无法旋转到目标数字且不被锁定。 示例 4: 输入: deadends = [“0000”], target = “8888”输出： -1 提示： 死亡列表 deadends 的长度范围为 [1, 500]。 目标数字 target 不会在 deadends 之中。 每个 deadends 和 target 中的字符串的数字会在 10,000 个可能的情况 ‘0000’ 到 ‘9999’ 中产生。 2 解法2.1 思想其实是一个树的BFS搜索问题： 用Queue来得到每层的节点。 主要需要注意的地方有： 为了避免重复的节点进入队列，可以使用数组记录是否出现过，或是用HashSet记录出现过的节点。 当遇到死亡数字数组中的元素时也不能将该元素添加至队列中。 当搜索到题目要求的元素时，为了得到当前层数，有两种方法： 用一个数据结构表示节点，记录节点的值和层数。 每层元素入队列之后再加入一个null元素，每次遍历到null元素即可知道遍历完了了一层。 2.2 代码我一开始是这样写的： //节点的数据结构，需要记录层数 class Node{ public String value; public int count; public Node(String value,int count){ this.value = value; this.count = count; } } class Solution { public int openLock(String[] deadends, String target) { //如果死亡数组中存在0000直接返回-1 if(arrayContains(deadends,\"0000\")) return -1; //标记数组用于记录哪些数字出现过 int[] mark = new int[10000]; //0000出现过 mark[0] = 1; Queue&lt;Node> queue = new LinkedList&lt;Node>(); queue.offer(new Node(\"0000\",0)); while(!queue.isEmpty()){ //获取队列头 Node node = queue.poll(); if(node.value.equals(target)) return node.count; else { char[] charArray = node.value.toCharArray(); for(int i = 0;i&lt;4;i++) { //位于第i位的数字+1，如果是9变成0 char[] plusOneCharArray = Arrays.copyOf(charArray,charArray.length); plusOneCharArray[i] = (char) (charArray[i]=='9'?'0':charArray[i]+1); String plusOne = String.valueOf(plusOneCharArray); if(plusOne.equals(target)) return node.count+1; //没有出现过且不在死亡数字中才添加至队列中 if((!arrayContains(deadends, plusOne))&amp;&amp;mark[Integer.valueOf(plusOne)]==0) { queue.offer(new Node(plusOne,node.count+1)); mark[Integer.valueOf(plusOne)] = 1; } //位于第i位的数字-1，如果是0变成9 char[] minusOneCharArray = Arrays.copyOf(charArray,charArray.length); minusOneCharArray[i] = (char) (charArray[i]=='0'?'9':charArray[i]-1); String minusOne = String.valueOf(minusOneCharArray); if(minusOne.equals(target)) return node.count+1; //没有出现过且不在死亡数字中才添加至队列中 if((!arrayContains(deadends, minusOne))&amp;&amp;mark[Integer.valueOf(minusOne)]==0) { queue.offer(new Node(minusOne,node.count+1)); mark[Integer.valueOf(minusOne)] = 1; } } } } return -1; } //遍历数组，用于检测死亡数字中是否存在指定的数字 public boolean arrayContains(String[] stringArray,String toFind) { for(String i:stringArray) { if(i.equals(toFind)) return true; } return false; } } 然后发现上面这种方法需要的时间贼久，最后强行理解了一下发现问题主要出在检测死亡数组中是否存在指定数字的时候，时间开销太高了。 最后还是换成了用HashSet检测死亡数组中是否存在指定的数字： class Node{ public String value; public int count; public Node(String value,int count){ this.value = value; this.count = count; } } class Solution { public int openLock(String[] deadends, String target) { //将死亡数字全部加进一个HashSet中 Set&lt;String> set = new HashSet&lt;String>(); for(String i:deadends) { if(i.equals(\"0000\")) return -1; set.add(i); } int[] mark = new int[10000]; mark[0] = 1; Queue&lt;Node> queue = new LinkedList&lt;Node>(); queue.offer(new Node(\"0000\",0)); while(!queue.isEmpty()){ Node node = queue.poll(); if(node.value.equals(target)) return node.count; else { char[] charArray = node.value.toCharArray(); for(int i = 0;i&lt;4;i++) { char[] plusOneCharArray = Arrays.copyOf(charArray,charArray.length); plusOneCharArray[i] = (char) (charArray[i]=='9'?'0':charArray[i]+1); String plusOne = String.valueOf(plusOneCharArray); if(plusOne.equals(target)) return node.count+1; if((!set.contains(plusOne))&amp;&amp;mark[Integer.valueOf(plusOne)]==0) { queue.offer(new Node(plusOne,node.count+1)); mark[Integer.valueOf(plusOne)] = 1; } char[] minusOneCharArray = Arrays.copyOf(charArray,charArray.length); minusOneCharArray[i] = (char) (charArray[i]=='0'?'9':charArray[i]-1); String minusOne = String.valueOf(minusOneCharArray); if(minusOne.equals(target)) return node.count+1; if((!set.contains(minusOne))&amp;&amp;mark[Integer.valueOf(minusOne)]==0) { queue.offer(new Node(minusOne,node.count+1)); mark[Integer.valueOf(minusOne)] = 1; } } } } return -1; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"BFS","slug":"BFS","permalink":"https://www.codetool.top/tags/BFS/"}]},{"title":"谈谈java中的Iterator","slug":"谈谈Iterator和前辈Enumeration","date":"2019-12-06T10:05:23.000Z","updated":"2019-12-21T14:56:28.399Z","comments":true,"path":"article/谈谈Iterator和前辈Enumeration/","link":"","permalink":"https://www.codetool.top/article/%E8%B0%88%E8%B0%88Iterator%E5%92%8C%E5%89%8D%E8%BE%88Enumeration/","excerpt":"","text":"1 摘要 Iterator的作用？ Iterator和Enumeration的区别？ Iterator和ListIterator的区别？ Iterator和foreach的关联？ 2 Iterator的作用Iterator，中文译作迭代器，是一种检查容器内元素并遍历元素的数据类型。它能使使用者不必关心遍历元素的过程，统一了对元素的访问方式。 在JDK1.8中，Iterator接口包含下面这些方法： //是否有下个元素 boolean hasNext(); //获取下个元素 E next(); //移除迭代器当前指向的元素，这个功能不强制实现，可以抛出UnsupportedOperationException异常 void remove(); //每个元素作为参数传递给Consumer接口的accept void forEachRemaining(Consumer&lt;? super E> action); 3 Iterator和Enumeration的区别Iterator是JDK1.2后才出现的接口，目的是为了取代Enumeration。 Enumeration的作用和Iterator相似，它包含下面的方法： //是否存在更多元素 boolean hasMoreElements(); //获取下一个元素 E nextElement(); Iterator： 简化了方法名称 增加了移除元素的操作 4 Iterator和ListIterator的区别List接口中有一个方法listIterator()用于返回一个List迭代器，ArrayList在内部类中实现了这个迭代器，调用listIterator()时通过构造方法构造出一个ListIterator对象并返回。 那么Iterator和ListIterator有什么区别呢？ ListIterator是Iterator的扩充 ListIterator接口中除了继承自Iterator中的方法，还有： //是否有上一个元素 boolean hasPrevious(); //获取上一个元素 E previous(); //下一个元素的index int nextIndex(); //上一个元素的index int previousIndex(); //用一个元素替换当前指向的元素 void set(E e); //在当前位置插入一个元素 void add(E e); 5 Iterator和foreach的关联？foreach只支持数组或实现了Iterable接口的类。 Iterable接口强制要求实现iterator()方法，也就是说，foreach语句底层还是通过iterator的遍历实现的。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"基础知识","slug":"基础知识","permalink":"https://www.codetool.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"name":"迭代器","slug":"迭代器","permalink":"https://www.codetool.top/tags/%E8%BF%AD%E4%BB%A3%E5%99%A8/"}]},{"title":"Java自动装箱缓存机制","slug":"Java自动装箱缓存机制","date":"2019-12-05T10:05:23.000Z","updated":"2019-12-19T08:16:26.320Z","comments":true,"path":"article/Java自动装箱缓存机制/","link":"","permalink":"https://www.codetool.top/article/Java%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/","excerpt":"","text":"尝试运行这段代码： 相似的两段代码，得到的结果却完全不相同。 首先要知道在java中==比较的是对象的引用，从直觉出发，无论是integer1、integer2还是integer3、integer4都是不同的引用，结果都应该是不等的。 造成这个结果的原因是JDK1.5引入的包装类自动装箱时的缓存机制 自动装箱的概念： Integer a = 10; //自动装箱，相当于下面这句 Integer a = Integer.valueOf(10); 而看看Integer中valueOf(int)的源码： public static Integer valueOf(int i) { if (i >= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high) return IntegerCache.cache[i + (-IntegerCache.low)];//这句就是我们要研究的重点 return new Integer(i); } IntegerCache是一个缓存类，它的内部有一个静态的Integer cache[]数组，在这个类第一次被加载时，会用整数值在-128~127之间的Integer实例对象填充这个数组，如果调用valueOf方法的时候参数值在这个范围内，就会从IntegerCache中的cache数组去取出这样一个共享对象。 这样就能回答一开始的程序integer1、integer2为什么相等了，因为他们都是从cache数组中取出来的同一个引用。 而300这个数是不在-128~127之间的，缓存数组中不存在这样的对象，最终是调用了构造方法创建了两个不同的Integer对象。 拓展：IntegerCache的静态代码块 static { // 缓存的数据范围可以由用户设置，这里从配置中获取了用户设置的缓存范围 int h = 127; String integerCacheHighPropValue = sun.misc.VM.getSavedProperty(\"java.lang.Integer.IntegerCache.high\"); if (integerCacheHighPropValue != null) { try { int i = parseInt(integerCacheHighPropValue); i = Math.max(i, 127); // Maximum array size is Integer.MAX_VALUE h = Math.min(i, Integer.MAX_VALUE - (-low) -1); } catch( NumberFormatException nfe) { // If the property cannot be parsed into an int, ignore it. } } high = h; cache = new Integer[(high - low) + 1]; int j = low; // 这里循环构造Integer对象填充cache数组 for(int k = 0; k &lt; cache.length; k++) cache[k] = new Integer(j++); // range [-128, 127] must be interned (JLS7 5.1.7) assert IntegerCache.high >= 127; }","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"包装类","slug":"包装类","permalink":"https://www.codetool.top/tags/%E5%8C%85%E8%A3%85%E7%B1%BB/"}]},{"title":"WinForm截图OCR小项目的开发-瞥见知识的融会贯通","slug":"winform截图OCR小项目的开发-瞥见知识的融会贯通","date":"2019-12-04T10:05:23.000Z","updated":"2019-12-19T08:19:32.627Z","comments":true,"path":"article/winform截图OCR小项目的开发-瞥见知识的融会贯通/","link":"","permalink":"https://www.codetool.top/article/winform%E6%88%AA%E5%9B%BEOCR%E5%B0%8F%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%BC%80%E5%8F%91-%E7%9E%A5%E8%A7%81%E7%9F%A5%E8%AF%86%E7%9A%84%E8%9E%8D%E4%BC%9A%E8%B4%AF%E9%80%9A/","excerpt":"","text":"最近因为有个需要截图OCR的需求，再加上需要交一个C#大作业，就做了一个WinForm截图OCR小项目出来。（不过后来发现QQ截图好像已经有这功能了🌚） 运行截图： 谈一谈挺有意思的一些知识点： 1 Http请求1.1 Delegate委托回调我封装了一个POST请求的函数：需要下载一个Newtonsoft.Json用于处理响应的JSON数据这种方式是使用了一个委托回调，类似于JavaScript中的回调函数，C#中叫Delegate回调 delegate void AfterRequest(JObject data); class HttpUtil { /// &lt;summary> /// 发出POST请求 /// &lt;/summary> /// &lt;param name=\"url\">请求的url&lt;/param> /// &lt;param name=\"requestBody\">url参数格式的字符串，如\"key1=value1&amp;key2=value2\",需要经过urlencode处理&lt;/param> /// &lt;param name=\"function\">回调函数,data是一个json转换为的一个JObject对象&lt;/param> public static void PostAsync(String url, string requestBody, AfterRequest function) { try { string responseBody = null; HttpClient httpClient = new HttpClient(); //StringContent content = new StringContent(requestBody,System.Text.Encoding.UTF8, \"application/x-www-form-urlencoded\"); StringContent content = new StringContent(requestBody); content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(\"application/x-www-form-urlencoded\"); HttpResponseMessage response = null; response = httpClient.PostAsync(url, content).Result; response.EnsureSuccessStatusCode(); if (response.IsSuccessStatusCode) { responseBody = response.Content.ReadAsStringAsync().Result; } JObject data = JObject.Parse(responseBody); function(data); } catch (Exception e) { Console.WriteLine(\"\\nException Caught!\"); Console.WriteLine(\"Message :{0} \", e.Message); } } } 1.2 Async/Await实际上还有一种能使代码更清晰、简洁的方法，并且这种方法更受C#推荐：Async/Await class HttpUtil { /// &lt;summary> /// 发出POST请求 /// &lt;/summary> /// &lt;param name=\"url\">请求的url&lt;/param> /// &lt;param name=\"requestBody\">url参数格式的字符串，如\"key1=value1&amp;key2=value2\",需要经过urlencode处理&lt;/param> public static async Task&lt;JObject> PostAsync(String url, string requestBody) { try { string responseBody = null; HttpClient httpClient = new HttpClient(); //StringContent content = new StringContent(requestBody,System.Text.Encoding.UTF8, \"application/x-www-form-urlencoded\"); StringContent content = new StringContent(requestBody); content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(\"application/x-www-form-urlencoded\"); HttpResponseMessage response = null; response = await httpClient.PostAsync(url, content); response.EnsureSuccessStatusCode(); if (response.IsSuccessStatusCode) { responseBody = await response.Content.ReadAsStringAsync(); } JObject data = JObject.Parse(responseBody); return data; } catch (Exception e) { Console.WriteLine(\"\\nException Caught!\"); Console.WriteLine(\"Message :{0} \", e.Message); } return null; } } 使用这种方法，能避免回调地狱，让调用时代码不会多层嵌套。甚至ES7也支持了这种方法，语法和C#类似。 原理： 函数执行时，一旦遇到await就会返回。等到触发的异步操作完成（并且调用栈清空），再接着执行函数体内后面的语句 实际上async/await只是个语法糖，内部执行顺序和回调函数并无区别。 2 API鉴权因为做这个应用去调用了百度云和腾讯云提供的OCR api，恰巧发现两家的api鉴权机制正是目前主流验证方式之中具有代表性的两种。 2.1 百度云：Token看看百度云的Token获取方法： 向授权服务地址https://aip.baidubce.com/oauth/2.0/token发送请求（推荐使用POST），并在URL中带上以下参数： grant_type： 必须参数，固定为client_credentials； client_id： 必须参数，应用的API Key； client_secret： 必须参数，应用的Secret Key； token验证方式就是给每个用户分配一套账号和密码（这里是client_id和client_secret），服务器能通过这套认证信息获取用户的权限，生成一个token字符串，保存在本地并返回给用户，用户请求api的时候就要带上这个token（可以是放在请求体或请求头中），服务器就能通过token验证用户的身份。 安全隐患： Token被劫持，伪造请求和篡改参数。 2.2 腾讯云：签名验证可以看看腾讯云提供的计算签名的步骤： 将&lt;key, value&gt;请求参数对按key进行字典升序排序，得到有序的参数对列表N 将列表N中的参数对按URL键值对的格式拼接成字符串，得到字符串T（如：key1=value1&amp;key2=value2），URL键值拼接过程value部分需要URL编码，URL编码算法用大写字母，例如%E8，而不是小写%e8 将应用密钥以app_key为键名，组成URL键值拼接到字符串T末尾，得到字符串S（如：key1=value1&amp;key2=value2&amp;app_key=密钥) 对字符串S进行MD5运算，将得到的MD5值所有字符转换成大写，得到接口请求签名 可以看出腾讯云的验证机制更为复杂，在计算签名的时候需要用到当前时间戳、一个随机字符串和用户的app_key，这样得到的签名每次请求的时候都是不同的，即使中间者劫持了签名也无法利用签名进行第二次重复请求，如果请求参数被篡改也能识别出。 Token和签名验证并不冲突，签名验证是在身份认证的基础上防止请求重放、参数篡改等攻击。百度云这种加密机制也可以使用某种密钥将带有token的参数字符串生成签名进行验证。 3 总结要看到知识的融会贯通之处，学习JS相关的异步思想，后端的验证机制。要善于思考，以行促学。","categories":[{"name":"项目总结","slug":"项目总结","permalink":"https://www.codetool.top/categories/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"}],"tags":[{"name":".net","slug":"net","permalink":"https://www.codetool.top/tags/net/"},{"name":"API鉴权","slug":"API鉴权","permalink":"https://www.codetool.top/tags/API%E9%89%B4%E6%9D%83/"},{"name":"异步","slug":"异步","permalink":"https://www.codetool.top/tags/%E5%BC%82%E6%AD%A5/"}]},{"title":"HashSet源码分析","slug":"HashSet源码分析","date":"2019-12-02T10:05:23.000Z","updated":"2019-12-19T08:16:26.319Z","comments":true,"path":"article/HashSet源码分析/","link":"","permalink":"https://www.codetool.top/article/HashSet%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","excerpt":"","text":"Set家族一览： 1 HashSet简介Set是Collection三大接口其中之一，意为集合，且元素不能重复。Set接口中的方法和Collection中的方法完全一致，只是起到一个标记名的作用。 HashSet是哈希集的意思，就是通过hashcode来实现set不能出现重复元素的一个实现类。 内部其实是通过哈希表HashMap来实现的，实际上set中存放的元素是内部hashmap中的键： private transient HashMap&lt;E,Object> map; private static final Object PRESENT = new Object();//所有的键对应的值都是一个冗余的Object对象 在构造方法中初始化哈希表： public HashSet() { map = new HashMap&lt;>(); } 浪费时间警告：这是一个纯HashMap实现的类 2 重载的构造方法2.1 public HashSet(Collection&lt;? extends E&gt; c)通过一个集合来构造HashSet，默认哈希表的容量是集合的容量*4/3 + 1和16中的最大值 public HashSet(Collection&lt;? extends E> c) { map = new HashMap&lt;>(Math.max((int) (c.size()/.75f) + 1, 16)); addAll(c); } 2.2 public HashSet(int initialCapacity, float loadFactor)这个实际上就是提供两个构造HashMap的参数，一个是初始大小，一个是负载因子。 public HashSet(int initialCapacity, float loadFactor) { map = new HashMap&lt;>(initialCapacity, loadFactor); } 2.3 public HashSet(int initialCapacity)这个就是提供HashMap的初始大小。 public HashSet(int initialCapacity) { map = new HashMap&lt;>(initialCapacity); } 3 重要方法3.1 public int size()HashMap的size public int size() { return map.size(); } 3.2 public boolean contains(Object o)HashMap中是否有对应的键。 public boolean contains(Object o) { return map.containsKey(o); } 3.3 public boolean add(E e)将一个记录插入HashMap public boolean add(E e) { return map.put(e, PRESENT)==null; } 3.4 public boolean remove(Object o)public boolean remove(Object o) { return map.remove(o)==PRESENT; } 4 总结这是一个纯使用HashMap实现的数据结构。仔细看了一下TreeSet也是用TreeMap实现的，那我就不搞TreeSet了。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://www.codetool.top/tags/jdk/"},{"name":"源码研究","slug":"源码研究","permalink":"https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"},{"name":"集合","slug":"集合","permalink":"https://www.codetool.top/tags/%E9%9B%86%E5%90%88/"}]},{"title":"LinkedList源码分析","slug":"LinkedList源码分析","date":"2019-12-02T10:05:23.000Z","updated":"2019-12-19T08:19:32.626Z","comments":true,"path":"article/LinkedList源码分析/","link":"","permalink":"https://www.codetool.top/article/LinkedList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","excerpt":"","text":"相关文章：ArrayList源码分析 List家族一览： 1 LinkedList简介 LinkedList的超类有List、Queue，说明它既有List的性质也有Queue的性质，它直接实现于Deque，说明它体现更多的是双向链表的性质。不过通常将它当作普通的Queue使用： Queue queue = new LinkedList&lt;>(); 它的内部字段： transient int size = 0; transient Node&lt;E> first;//代表头节点 transient Node&lt;E> last;//代表尾节点 2 重要的内部类2.1 Node这是一个静态内部类，代表着LinkedList中存放数据的节点。 private static class Node&lt;E> { E item; Node&lt;E> next; Node&lt;E> prev; Node(Node&lt;E> prev, E element, Node&lt;E> next) { this.item = element; this.next = next; this.prev = prev; } } 3 重要的内部方法3.1 void linkLast(E e)offer依赖的方法 void linkLast(E e) { final Node&lt;E> l = last; final Node&lt;E> newNode = new Node&lt;>(l, e, null); last = newNode; if (l == null) first = newNode; else l.next = newNode; size++; modCount++; } 3.2 private E unlinkFirst(Node f)poll和remove依赖的方法 private E unlinkFirst(Node&lt;E> f) { // assert f == first &amp;&amp; f != null; final E element = f.item; final Node&lt;E> next = f.next; f.item = null; f.next = null; // help GC first = next; if (next == null) last = null; else next.prev = null; size--; modCount++; return element; } 3.3 Node node(int index)获取处于index上的节点，这个方法用于支持随机访问，特别是List中定义的get，set等方法。可见，该方法会根据index所处位置的不同分为从头查找或是从尾查找。 Node&lt;E> node(int index) { // assert isElementIndex(index); if (index &lt; (size >> 1)) { Node&lt;E> x = first; for (int i = 0; i &lt; index; i++) x = x.next; return x; } else { Node&lt;E> x = last; for (int i = size - 1; i > index; i--) x = x.prev; return x; } } 4 总结可以说，LinkedList的实现还是挺简单的，由于是链表实现不需要考虑那么多关于空间的问题。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://www.codetool.top/tags/jdk/"},{"name":"源码研究","slug":"源码研究","permalink":"https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"},{"name":"集合","slug":"集合","permalink":"https://www.codetool.top/tags/%E9%9B%86%E5%90%88/"}]},{"title":"tomcat整体架构","slug":"tomcat整体架构","date":"2019-11-29T10:05:23.000Z","updated":"2019-12-19T08:16:26.316Z","comments":true,"path":"article/tomcat整体架构/","link":"","permalink":"https://www.codetool.top/article/tomcat%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/","excerpt":"","text":"1 tomcat整体架构Tomcat Http服务器不直接调用业务类，而是将请求转发给Servlet容器，Servlet加载业务类处理请求。 核心组件： 连接器 Connector 容器 Container 连接器处理Socket请求，容器进行servlet的调用。 2 连接器 CoyoteCoyote 是 Tomcat的连接器框架的名称，是Tomcat服务器提供的供客户端访问的外部接口。客户端通过Coyote与服务器建立连接、发送请求并接受相应。 Coyote封装了底层的网络通信（Socket请求及相应处理），为Catalina容器提供了统一的接口，使Catalina容器与具体的请求协议及IO操作方式完全解耦。Coyote将Socket输入转换封装为Request对象，交由Catalina容器进行处理，处理请求完成后，Catalina通过Coyote提供的Response对象将结果写入输出流。 Coyote作为独立的模块，只负责具体协议和IO的相关操作，与Servlet规范实现没有直接关系，因此即使是Request和Response对象也并未实现Servlet规范对应的接口，而是在Catalina中将他们进一步封装为ServletRequest和ServletResponse。 2.1 IO模型与协议在Coyote中，Tomcat支持的多种I/O模型和应用层协议： Tomcat支持的IO模型（8.0前默认是BIO，自8.5/9.0版本起，tomcat移除了对BIO的支持）： IO模型 描述 NIO 非阻塞I/O，采用Java NIO类库实现。 NIO2 异步I/O，采用JDK7最新的NIO2类库实现。 APR 采用Apache可移植运行库实现，是C/C++编写的本地库。如果选择该方案，需要单独安装APR库。 Tomcat支持的应用层协议： 应用层协议 描述 HTTP/1.1 这是大部分Web应用采用的访问协议。 AJP 用于和Web服务器集成（如Apache），以实现对静态资源的优化以及集群部署，当前支持AJP/1.3。 HTTP/2 HTTP2.0大幅度地提升了Web性能。下一代HTTP协议，自8.5以及9.0版本之后支持。 2.2 连接器组件 EndPoint Processor Adapter ProtocolHandler 2.2.1 EndPoint Coyote通信端点，即通信监听的接口，是具体Socket接收和发送处理器，是对传输层的抽象，因此EndPoint用来实现TCP/IP协议的。 Tomcat并没有EndPoint接口，而是提供了一个抽象类AbstractEndPoint，里面定义了两个内部类：Acceptor和SocketProcessor。Acceptor用于监听Socket连接请求。SocketProcessor用于处理接收到的Socket请求，它实现Runnable接口，在Run方法里调用协议处理组件Processor进行处理。为了提高处理能力，SocketProcessor被提交到线程池来执行。而这个线程池叫执行器（Executor）。 2.2.2 ProcessorCoyote协议处理接口，如果说EndPoint是用来实现TCP/IP协议的，那么Processor用来实现HTTP协议，Processor接收来自EndPoint的Socket，读取字节流解析成Tomcat Recuest和Response对象,并通过Adapter将其提交到容器处理, Processor是对应用层协议的抽象。 2.2.3 ProtocolHandlerCoyote 协议接口，通过Endpoint和Processor，实现针对具体协议的处理能力。Tomcat按照协议和I/O提供了6个实现类：AjpNioProtocol，AjpAprProtocol,AjpNio2Protocol,Http11NioProtocol,Http11Nio2Protocol,Http11AprProtocol。我们在配置tomcat/conf/server.xml时，至少要指定具体的ProtocolHandler,当然也可以指定协议名称，如：HTTP/1.1，如果安装了APR，那么将使用Http11AprProtocol，否则使用 Http11NioProtocol。 2.2.4 Adapter由于协议不同，客户端发过来的请求信息也不尽相同，Tomcat定义了自己的Request类来“存放”这些请求信息。ProtocolHandler接口负责解析请求并生成Tomcat Request类。但是这个Request对象不是标准的ServletRequest，也就意味着，不能用Tomcat Request作为参数来调用容器。Tomcat设计者的解决方案是引入CoyoteAdapter，这是适配器模式的经典运用，连接器调用CoyoteAdapter的Sevice方法，传入的是Tomcat Request对象，CoyoteAdapter负责将Tomcat Request转成ServletRequest，再调用容器的Service方法。 3 容器 Catalina3.1 Tomcat的模块分层图 和org.apache包下的包一一对应 3.2 容器组件 如上图所示，Catalina负责管理Server，而Server表示着整个服务器。Server下面有多个服务Service，每个服务都包含着多个连接器组件Connector（Coyote 实现）和一个容器组件Container。在Tomcat启动的时候，会初始化一个Catalina的实例。 Catalina各个组件的职责： 组件 职责 Catalina 负责解析Tomcat的配置文件，以此来创建服务器Server组件，并根据命令来对其进行管理。 Server 服务器表示整个Catalina Servlet容器以及其它组件，负责组装并启动Servlet引擎，Tomcat连接器。Server通过实现Lifecycle接口，提供了一种优雅的启动和关闭整个系统的方式。 Service 服务是Server内部的组件，一个Server包含多个Service。它将若干个Connector组件绑定到一个Container(Engine)上 Connector 连接器，处理与客户端的通信，它负责接收客户请求，然后转给相关的容器处理，最后向客户返回响应结果 Container 容器，负责处理用户的servlet请求，并返回对象给web用户的模块。 3.3 Container结构Tomcat设计了4种容器，分别是Engine、Host、Context和Wrapper。这4种容器不是平行关系，而是父子关系，Tomcat通过一种分层的架构，使得Servlet容器具有很好的灵活性。 组件 职责 Engine 表示整个Catalina的Servlet引擎,用来管理多个虚拟站点，一个Service最多只能有一个Engine ,但是一个引擎可包含多个Host。 Host 代表一个虚拟主机， 或者说一个站点，可以给Tomcat配置多个虚拟主机地址，而一个虚拟主机下可包含多个Context。 Context 表示一个web应用程序，一个Web应用可包含多个Wrapper。 Wrapper 表示一个Servlet，Wrapper作为容器中的最底层。 不能包含子容器。 我们也可以再通过Tomcat的server.xml配置文件来加深对Tomcat容器的理解。Tomcat采用了组件化的设计，它的构成组件都是可配置的，其中最外层的是Server，其他组件按照一定的格式要求配置在这个顶层容器中。 &lt;Server> &lt;Service> &lt;Connector/> &lt;Connector/> &lt;Engine> &lt;Host> &lt;Context>&lt;/Context> &lt;/Host> &lt;/Engine> &lt;/Service> &lt;/Server> 那么，Tomcat是怎么管理这些容器的呢？你会发现这些容器具有父子关系，形成一个树形结构，你可能马上就想到了设计模式中的组合模式。没错，Tomcat就是用组合模式来管理这些容器的。具体实现方法是，所有容器组件都实现了Container接口，因此组合模式可以使得用户对单容器对象和组合容器对象的使用具有一致性。这里单容器对象指的是最底层的Wrapper，组合容器对象指的是上面的Context、Host或者Engine。 LifeCycle接口用于统一管理各组件的生命周期。","categories":[{"name":"中间件/软件设计","slug":"中间件-软件设计","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/"}],"tags":[{"name":"javaEE","slug":"javaEE","permalink":"https://www.codetool.top/tags/javaEE/"},{"name":"tomcat","slug":"tomcat","permalink":"https://www.codetool.top/tags/tomcat/"}]},{"title":"使用maven方式编译tomcat源码","slug":"使用maven方式编译tomcat源码","date":"2019-11-28T14:09:23.000Z","updated":"2019-12-19T08:16:26.319Z","comments":true,"path":"article/使用maven方式编译tomcat源码/","link":"","permalink":"https://www.codetool.top/article/%E4%BD%BF%E7%94%A8maven%E6%96%B9%E5%BC%8F%E7%BC%96%E8%AF%91tomcat%E6%BA%90%E7%A0%81/","excerpt":"","text":"1 Tomcat源码下载官网下载： https://tomcat.apache.org/download-80.cgi 页面下方的Source Code Distribution，下载zip文件。 2 Idea用maven方式编译源码在源码文件夹内创建一个home/目录，将webapp/和conf/移到这个文件夹下。 在根目录添加pom.xml： &lt;?xml version=\"1.0\" encoding=\"utf-8\"?> &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"> &lt;modelVersion>4.0.0&lt;/modelVersion> &lt;groupId>org.apache.tomcat&lt;/groupId> &lt;artifactId>Tomcat8.5&lt;/artifactId> &lt;name>Tomcat8.5&lt;/name> &lt;version>8.5&lt;/version> &lt;build> &lt;finalName>Tomcat8.5&lt;/finalName> &lt;!-- 指定源文件为java 、test --> &lt;sourceDirectory>java&lt;/sourceDirectory> &lt;!-- &lt;testSourceDirectory>test&lt;/testSourceDirectory>--> &lt;resources> &lt;resource> &lt;directory>java&lt;/directory> &lt;/resource> &lt;/resources> &lt;testResources> &lt;testResource> &lt;directory>test&lt;/directory> &lt;/testResource> &lt;/testResources> &lt;plugins> &lt;plugin> &lt;groupId>org.apache.maven.plugins&lt;/groupId> &lt;artifactId>maven-compiler-plugin&lt;/artifactId> &lt;version>2.3&lt;/version> &lt;configuration> &lt;encoding>UTF-8&lt;/encoding> &lt;!-- 指定jdk 编译 版本 ，没装jdk 1.7的可以变更为1.6 --> &lt;source>1.8&lt;/source> &lt;target>1.8&lt;/target> &lt;/configuration> &lt;/plugin> &lt;/plugins> &lt;/build> &lt;!-- 添加tomcat8 所需jar包依赖 --> &lt;dependencies> &lt;dependency> &lt;groupId>junit&lt;/groupId> &lt;artifactId>junit&lt;/artifactId> &lt;version>4.12&lt;/version> &lt;scope>test&lt;/scope> &lt;/dependency> &lt;dependency> &lt;groupId>ant&lt;/groupId> &lt;artifactId>ant&lt;/artifactId> &lt;version>1.7.0&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>wsdl4j&lt;/groupId> &lt;artifactId>wsdl4j&lt;/artifactId> &lt;version>1.6.2&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>javax.xml&lt;/groupId> &lt;artifactId>jaxrpc&lt;/artifactId> &lt;version>1.1&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>org.easymock&lt;/groupId> &lt;artifactId>easymock&lt;/artifactId> &lt;version>3.3&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>org.eclipse.jdt.core.compiler&lt;/groupId> &lt;artifactId>ecj&lt;/artifactId> &lt;version>4.6.1&lt;/version> &lt;/dependency> &lt;/dependencies> &lt;/project> 在idea中导入该maven项目，等待maven构建。 idea的项目运行配置（Edit Configurations）： Edit Configurations-&gt; + -&gt; Application -&gt; Main Class选择org.apache.catalina.startup.Bootstrap -&gt; VM Options填入： -Dcatalina.home=D:/Tomcat/apache-tomcat-8.5.49-src/home -Dcatalina.base=D:/Tomcat/apache-tomcat-8.5.49-src/home -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djava.util.logging.config.file=D:/Tomcat/apache-tomcat-8.5.49-src/home/conf/logging.propertiesD:/Tomcat/apache-tomcat-8.5.49-src/是我电脑上的源码的存放位置 然后就可以尝试编译了。还会出现一些错误，可以参考： @Version@错误 tomcat页面打不开500,jsp没有初始化错误","categories":[{"name":"中间件/软件设计","slug":"中间件-软件设计","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/"}],"tags":[{"name":"tomcat","slug":"tomcat","permalink":"https://www.codetool.top/tags/tomcat/"},{"name":"idea","slug":"idea","permalink":"https://www.codetool.top/tags/idea/"},{"name":"maven","slug":"maven","permalink":"https://www.codetool.top/tags/maven/"}]},{"title":"servlet4.0初识总结","slug":"servlet4-0初学总结","date":"2019-11-28T10:05:23.000Z","updated":"2019-12-19T08:15:20.500Z","comments":true,"path":"article/servlet4-0初学总结/","link":"","permalink":"https://www.codetool.top/article/servlet4-0%E5%88%9D%E5%AD%A6%E6%80%BB%E7%BB%93/","excerpt":"","text":"1 JavaEE8JavaEE8,是自2013年6月Java企业版的首次更新。JAVAEE8提供了一些新的API，提供了对HTTP/2的新支持。 2 Servlet4.0Servlet API是JAVA开发人员最熟悉的API之一。 Servlet在JAVAweb的开发中发挥着重要的作用。JAVAEE8对Servlet进行了重要的更新： 服务器推送 提供了对Servlet映射的运行时发现。 简化了Filter的开发。 其中服务器推送是最主要的更新 配置需要： jdk8+ tomcat9（支持HTTP/2） tomcat-native openssl 2.1 配置tomcat编辑server.xml，将原来的port=&quot;8080&quot; HTTP/1.1替换成: &lt;Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11AprProtocol\" maxThreads=\"150\" SSLEnabled=\"true\" > &lt;UpgradeProtocol className=\"org.apache.coyote.http2.Http2Protocol\" /> &lt;SSLHostConfig> &lt;Certificate certificateKeyFile=\"conf/localhost-rsa-key.pem\" certificateFile=\"conf/localhost-rsa-cert.pem\" type=\"RSA\" /> &lt;/SSLHostConfig> &lt;/Connector> 2.2 生成SSL证书生成私钥和证书文件在tomcat-native目录下： OpenSSL&gt; genrsa -out localhost-rsa-key.pem 2048 OpenSSL&gt; req -new -x509 -key localhost-rsa-key.pem -out localhost-rsa-cert.pem -days 3650将localhost-rsa-key.pem和localhost-rsa-cert.pem复制到tomcat的conf/文件夹下。 将tomcat-native中bin/(x64/)下的tcnative-1.dll和tcnative-1-src.pdb复制到JAVA_HOME的/bin目录下 然后重启tomcat就能用HTTP/2来连接了。 2.3 服务器推送将用户所需的WEB资源提前推送到用户的浏览器缓存中，当用户使用浏览器访问所需WEB资源时，用户不需要再次下载所需的WEB资源，因为用户所需的WEB资源已经存在于用户的浏览器缓存中。 获取： request.newPushBuilder();方法： PushBuilder.path()设置要推送资源的路径。PushBuilder.push()推送WEB资源到用户的浏览器缓存中。 protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { PushBuilder pb = request.newPushBuilder(); pb.path(\"pic01.jpg\"); pb.push(); } 简化： PushBuilder pb = request.newPushBuilder(); pb.path(\"pic01.jpg\").push(); pb.path(\"pic02.jpg\").push(); 2.4 HttpServletMapping在运行时获取Servlet的映射信息（反射机制） 获取： request.getHttpServletMapping();方法： getMappingMatch() 请求路径的类型getMatchValue() 映射的资源名getPattern() 返回Servlet映射的路径getServletName() 返回Servlet的名称 protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { HttpServletMapping mapping = request.getHttpServletMapping(); MappingMatch match = mapping.getMappingMatch(); System.out.println(match); String value = mapping.getMatchValue(); System.out.println(value); String pattern = mapping.getPattern(); System.out.println(pattern); String name = mapping.getServletName(); System.out.println(name); } 2.5 HttpFilterFilter的实现类： GenericFilter HttpFilter，是GenericFilter的子类。 通过继承HttpFilter来实现Filter： @WebFilter(filterName = \"FilterDemo\",urlPatterns = \"/*\") public class FilterDemo extends HttpFilter { @Override protected void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException { request.setCharacterEncoding(\"UTF-8\"); response.setContentType(\"text/html;charset=UTF-8\"); System.out.println(\"FilterDemo:放行前\"); chain.doFilter(request,response); System.out.println(\"FilterDemo:放行后\"); } }","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"javaEE","slug":"javaEE","permalink":"https://www.codetool.top/tags/javaEE/"},{"name":"servlet","slug":"servlet","permalink":"https://www.codetool.top/tags/servlet/"}]},{"title":"nginx+keepalived高可用的并发解决方案","slug":"nginx-keepalived高可用的并发解决方案","date":"2019-11-27T10:05:23.000Z","updated":"2019-12-19T08:15:20.500Z","comments":true,"path":"article/nginx-keepalived高可用的并发解决方案/","link":"","permalink":"https://www.codetool.top/article/nginx-keepalived%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84%E5%B9%B6%E5%8F%91%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","excerpt":"","text":"1 nginxnginx是一个高性能的HTTP和反向代理服务器，也是一个邮件服务器，支持负载均衡和高并发。 2 Keepalived Keepalived是一个基于VRRP协议来实现的服务高可用方案，可以利用其来避免IP单点故障，类似的工具还有heartbeat、corosync、pacemaker。但是它一般不会单独出现，而是与其它负载均衡技术（如lvs、haproxy、nginx）一起工作来达到集群的高可用。 3 Nginx+keepalived架构对于一台轮询的nginx服务器，如果宕机，则整个集群都不能收到请求。所以通常即使只是用作轮询的服务器，也要有后备服务器。 在这种架构中，外界用户访问的是虚拟IP，keepalived主机（master）会占用这个ip地址，其他后备服务器待命。如果master服务器宕机，backup服务器能感知到并及时接管这个虚拟IP。","categories":[{"name":"中间件/软件设计","slug":"中间件-软件设计","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://www.codetool.top/tags/nginx/"},{"name":"高并发","slug":"高并发","permalink":"https://www.codetool.top/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"}]},{"title":"java基础查缺补漏01","slug":"java基础查缺补漏01","date":"2019-11-26T10:05:23.000Z","updated":"2019-12-19T08:15:15.876Z","comments":true,"path":"article/java基础查缺补漏01/","link":"","permalink":"https://www.codetool.top/article/java%E5%9F%BA%E7%A1%80%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F01/","excerpt":"","text":"某些点会在不远的将来深挖。 &gt;&gt;是逻辑右移，&gt;&gt;&gt;是算术右移 JDK6 可以使用Console.readPassword从控制台中读取密码，用户输入的过程中密码是不可见的。 public static void main(String[] args) { Console cs = System.console(); String username = cs.readLine(\"User name: \"); char[] passwd = cs.readPassword(\"Password: \"); } printf格式化输出中的%s转换符能格式化任意的对象，对于实现了Formattable接口的对象将调用formatTo方法，否则将调用ToString方法。 Java的文件读取：通过File构造一个Scanner对象；写入文件：构造一个PrintWriter对象 Scanner in = new Scanner(Paths.get(\"myfile.txt\",\"UTF-8\"); PrintWriter out = new PrintWriter(\"myfile.txt\",\"UTF-8\"); Math中的BigInteger和BigDecimal可以满足高精度的运算需要。 匿名数组的写法：new int[]{17,19,23,29,31,37} finalize方法：相当于析构方法，在垃圾回收器清除对象之前调用。但不推荐使用这个方法，因为很难确定这个方法在什么时候才能被调用。 import static是静态导入，可以导入某个类中的静态方法和静态字段。 可变参数列表：function(Object... values)，在函数内部可以把values看成一个参数数组。 java8方法引用： 对象的方法引用 object::instanceMethod 类的静态方法引用 Class::staticMethod 任意类的任意对象的方法引用：Class::instanceMethod，它只能被该类的实例对象调用。 类的构造器调用 Class::new 内部类为什么要使用内部类 内部类方法可以访问该类定义所在的作用域中的数据，包括私有的数据。 内部类可以对同一个包种的其他类隐藏起来。 当想要定义一个回调函数且不想编写大量代码时，使用匿名内部类比较便捷。 内部类类型 普通内部类 局部内部类（在方法中定义的内部类，不能有访问修饰符，不能是static）局部内部类可以访问当前代码块的常量，和此外围类的所有成员。 静态内部类（声明为static，不依赖于外部类的对象存在，实际上成为了一个顶级类） 匿名内部类（立刻使用，代码短小，只用到一个实例）语法：new SuperType(construction parameter){inner class methods and data} 内部类底层实现（普通内部类）： 编译器自动为内部类添加一个成员变量，该成员变量的类型和外部类的类型相同，这个成员变量就是指向外部类对象引用。 编译器自动为内部类的构造方法添加一个参数，参数的类型是外部类的类型，在构造方法内部使用这个参数为1中添加的成员变量赋值。 在调用内部类的构造函数初始化内部类对象时，会默认传入外部类的引用。 Java动态代理：https://www.jianshu.com/p/95970b089360 Throwable分层：Error类层次结构描述了Java运行时系统的内部错误和资源耗尽错误。应用程序不应该抛出这种类型的对象。Java语言规范将派生于Error类或RuntimeException类的所有异常称为非受查异常，所有其他的异常称为受查异常。 断言： assert 条件; assert 条件:表达式;如果结果是false，抛出一个AssertionError异常，第二种形式使用表达式构造AssertionError，转换成消息字符串。 可以在普通类里面定义泛型方法：T function(T... param)代表T是BoundingType的子类。代表T是BoundingType的超类。BoundingType可以是用”&amp;”分隔的多个类java泛型-类型擦除：https://www.cnblogs.com/joeblackzqq/p/10813143.html java关键字volatile：确保本条指令不会因编译器的优化而省略，且要求每次直接读值 java关键字transient: 标记的成员变量不参与序列化过程","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"基础知识","slug":"基础知识","permalink":"https://www.codetool.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}]},{"title":"今日ipv4地址正式耗尽","slug":"今日ipv4地址正式耗尽","date":"2019-11-26T10:05:23.000Z","updated":"2019-12-19T08:16:26.318Z","comments":true,"path":"article/今日ipv4地址正式耗尽/","link":"","permalink":"https://www.codetool.top/article/%E4%BB%8A%E6%97%A5ipv4%E5%9C%B0%E5%9D%80%E6%AD%A3%E5%BC%8F%E8%80%97%E5%B0%BD/","excerpt":"","text":"插播一条科技快讯： 北京时间11月26日下午消息，据国外媒体报道，负责英国、欧洲、中东和部分中亚地区互联网资源分配的欧洲网络协调中心（RIPE NCC）今日宣布： 全球所有43亿个IPv4地址已全部分配完毕，这意味着没有更多的IPv4地址可以分配给ISP（网络服务提供商）和其他大型网络基础设施提供商。 一想想我手上两台服务器有两个独立的ipv4地址还有点小激动呢。 珍惜IPv4地址,吉祥号码，全球唯一，错过今日，毁一生。","categories":[{"name":"日常/随笔","slug":"日常-随笔","permalink":"https://www.codetool.top/categories/%E6%97%A5%E5%B8%B8-%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"日常","slug":"日常","permalink":"https://www.codetool.top/tags/%E6%97%A5%E5%B8%B8/"}]},{"title":"AVL树-自平衡的二叉搜索树","slug":"AVL树-自平衡的二叉搜索树","date":"2019-11-25T10:05:23.000Z","updated":"2019-12-19T08:15:10.282Z","comments":true,"path":"article/AVL树-自平衡的二叉搜索树/","link":"","permalink":"https://www.codetool.top/article/AVL%E6%A0%91-%E8%87%AA%E5%B9%B3%E8%A1%A1%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/","excerpt":"","text":"本文图片来源：手把手教，手写AVL树 - 不止是编程 - 博客园 1 AVL树的概念1.1 自平衡当二叉搜索树处于平衡状态的时候，其操作时间复杂度为O(logN)，但当二叉搜索树是单支树的时候，其搜索效率则为O(N)。可见，二叉搜索树的平衡性是影响其操作效率的关键。由此出发，学者们设计了第一个平衡二叉搜索树，即AVL树。AVL树作为第一个平衡的二叉搜索树，其影响非常深远，后来的很多平衡结构都借鉴了AVL树的设计思想。 1.2 AVL树的定义一棵AVL树或者是空树，或者是具有下列性质的二叉搜索树： 它的左子树和右子树都是AVL树。 左子树和右子树的高度之差的绝对值不超过1。 要注意，AVL的平衡性是一种相对的平衡，并非一种绝对的平衡。它不要求左子树和右子树的高度绝对相等，而仅仅是左子树和右子树的高度之差的绝对值不超过1即可。因为绝对的平衡难以实现。 如果给AVL树中的每一个节点都附加一个数字，该数字指示该节点右子树的高度减去左子树的高度所得的高度差，那么这个数字即为该节点的平衡因子。根据AVL树的定义，任一节点的平衡因子只能取-1、0或1。 1.3 AVL树的旋转在一个平衡的二叉搜索树中插入一个新节点，就会造成其失衡，需要从插入位置沿通向根的路径回溯，检查各节点的平衡因子，在某一节点发现高度不平衡，则停止回溯。然后从发生不平衡的节点起，往下取三层，可以归纳为四种情况： 向某节点的左子树中插入一个左孩子。 向某节点的右子树中插入一个右孩子。 向某节点的左子树中插入一个右孩子。 向某节点的右子树中插入一个左孩子。 对应的处理方式： 1.3.1 单旋 右旋操作 以中间节点为轴，进行顺时针旋转，该中间节点的原父节点将变成该节点的右子节点，该中间节点的右子树则变成其原父节点的左子树。 左旋操作 对应的，左旋的方法是以三个呈直线排列的节点的中间节点为轴，进行逆时针旋转。该中间节点的原父节点将变成该节点的左子节点，该中间节点的左子树则变成其原父节点的右子树 1.3.2 双旋 先左后右双旋转 以3个成折线排列的节点中的末节点为轴，进行逆时针旋转。使末节点代替中间节点的位置，也就是让末节点成为原中间节点的父节点，这时，三个节点将成一直线排列，再以新的中间节点为旋转轴做右旋操作，即可完成平衡化操作。 基本情况 复杂情况 先右后左双旋转 以3个成折线排列的节点中的末节点为轴，进行顺时针旋转。使末节点代替中间节点的位置，也就是让末节点成为原中间节点的父节点，这时，三个节点将成一直线排列，再以新的中间节点为旋转轴做左旋操作，即可完成平衡化操作。","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"搜索树","slug":"搜索树","permalink":"https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"}]},{"title":"详解java中的unicode编码（码点）","slug":"unicode知识","date":"2019-11-25T10:05:23.000Z","updated":"2020-01-10T12:51:55.693Z","comments":true,"path":"article/unicode知识/","link":"","permalink":"https://www.codetool.top/article/unicode%E7%9F%A5%E8%AF%86/","excerpt":"","text":"致谢： 本文参考网页：Unicode字符集以及UTF-8，UTF-16编码的总结 - vcj1009784814的博客 - CSDN博客 1 Unicodeunicode的码点从U+0000到U+10FFFF，即共有2^20+2^16-1=1114111个码点。通常来说，常见字符可以用2个字节（16位）来表示。但还有很多其他表意字符、辅助字符需要表示。 Unicode将所有码点分成了17个代码级别，又称平面。 其中第一个平面称为基本的多语言级别（basic multilingual plane, BMP），其他的统称为辅助平面 1.1 utf-8由于unicode会有1个字节-4个字节不等，如果定长存储每个字符都需要占用四个字节，十分浪费空间，utf-8是一种变长存储方式，具体编码方式如下： 第一个字节提示了这个unicode编码由几个字节组成 首字节以0开头，表示单字节编码 首字节以110开头，表示双字节编码，后续字节以10开头 首字节以1110开头，表示三字节编码，后续字节以10开头 首字节以11110开头，表示四字节编码，后续字节以10开头 有效位对应的字节数 1.2 utf-16UTF-16源于UCS-2，UCS-2将字符码点直接映射为字符编码，中间无特别的编码算法。 UCS-2编码方式固定2字节编码，只覆盖了BMP的码点，对于SMP的码点，2字节的16位二进制数是不足以表示的。 而UTF-16扩展了原来的UCS-2编码，解决了辅助平面码点的字符无法表示的问题： BMP中的有效码点，用固定2字节16位来为其编码，数值等于对应的码点，同UCS-2 辅助平面中的有效码点，使用代理对进行编码。在BMP中，有一个范围的码点是未定义的，被称为代理区，其码点范围是0xD800~0xDFFF，共211个码点，代理区又被分为高代理码点和低代理码点，其中高代理码点范围是0xD800~0XDBFF，低代理码点范围是0xDC00~0XDFFF，高代理码点和低代理码点结合在一起，就表示一个辅助平面中的字符。由于辅助平面中的字符共有220个（0x10000~0x10FFFF），高代理码点和低代理码点皆有210个取值，两者结合，恰好有220种不同的组合。 也就是说，UTF-16可以表示完unicode中的字符，BMP中的字符需要一个字节，其他的需要两个字节。 2 java中的unicode这里使用到一个工具：Unicode编码转换，UTF编码转换（UTF-8、UTF-16、UTF-32） 2.1 charjava中的char是定长以16位（两个字节存储的），并且内部编码为utf-16。也就是说，一个char只能表示BMP中的字符，若要表示一个辅助平面内的字符，需要两个char。 来看一个BMP中的字符：”我” Unicode编码：U+6211UTF8编码：E68891UTF16BE编码：FEFF6211UTF16LE编码：FFFE1162 UTF16BE、UTF16LE分别指的是机器中的大端表示和小端表示，前面的FEFF或FFFE编译器会帮我们过滤掉，我们这里只看大端表示。 对于UTF-8表示，先将6211转换为二进制编码110 001000 010001，是15个有效位。对照utf-8编码表，可知需要用三个字节(1110xxxx 10xxxxxxxx 10xxxxxxxx)来表示，将有效位填入，得utf-8编码：11100110 10001000 10010001，转换为16进制，就是E68891。 对于UTF-16表示，6211是可以用两个字节表示完的，所以UTF-16的编码就是6621。 验证： 2.2 String对于辅助平面内的字符，一个char可不够用了，需要由两个char来存储，或是用String来表示。 来看一个emoji字符：”👉” Unicode编码：U+1F449UTF8编码：F09F9189UTF16BE编码：FEFFD83DDC49UTF16LE编码：FFFE3DD849DC 对于UTF-8表示，先将1F449转换为二进制编码11111 010001 001001，是17个有效位。对照utf-8编码表，可知需要用四个字节(11110xxx 10xxxxxxxx 10xxxxxxxx 10xxxxxx)来表示，将有效位填入，得utf-8编码：11110000 10011111 10010001 10001001，转换为16进制，就是F09F9189。 对于UTF-16表示，需要用到代理对进行编码：首先用1F449-10000得到F449，将F449转换为20位二进制0000111101 0001001001，高10位转成十六进制得3D,加上D800得D83D，后10位转成十六进制得49，加上DC00得DC49,所以它的utf-16编码为D83D DC49。 验证： 问题：String.length()会将一个非bmp中的字符算为1还是算为2呢？测试↓ 可见，如果String中存在非bmp中的字符，String会将它算成两个字符长度。看String.length()的源码也可知道这点： public int length() { return value.length; } value是String内部的一个字符数组。 2.3 java对码点计算的支持其实String中也提供了计算码点的方法：String.codePointCount(int beginIndex, int endIndex) 利用的是Character类能判断一个码点是否为代理码点：Character.isHighSurrogate：是否为高位代理码点 public static boolean isHighSurrogate(char ch) { // Help VM constant-fold; MAX_HIGH_SURROGATE + 1 == MIN_LOW_SURROGATE return ch >= MIN_HIGH_SURROGATE &amp;&amp; ch &lt; (MAX_HIGH_SURROGATE + 1); } 其中MIN_HIGH_SURROGATE=\\uD800和MAX_HIGH_SURROGATE=\\uDBFF，注明了高位代理码点的值边界。 Character.isLowSurrogate：是否为低位代理码点 public static boolean isLowSurrogate(char ch) { return ch >= MIN_LOW_SURROGATE &amp;&amp; ch &lt; (MAX_LOW_SURROGATE + 1); } 其中MIN_HIGH_SURROGATE=\\uDC00和MAX_HIGH_SURROGATE=\\uDFFF，注明了高位代理码点的值边界。 要判断字符串内有没有代理码点，只需确定连续的两个码点一个是高位代理码点一个是低位代理码点就行了。 String.codePointCount依赖的方法Character.codePointCountImpl源码： static int codePointCountImpl(char[] a, int offset, int count) { int endIndex = offset + count; int n = count; for (int i = offset; i &lt; endIndex; ) { if (isHighSurrogate(a[i++]) &amp;&amp; i &lt; endIndex &amp;&amp; isLowSurrogate(a[i])) { n--; i++; } } return n; } 如果要遍历一个字符串中的字符，可能需要考虑是否有非kmp中的字符的情况。那么就需要用码点为单位来处理： 反例： 正确处理方式： String.codePoints()得到一个int类型的流，代表这个码点的unicode编码，用System.out.printf()中的%c格式化输出它，就可以看到这个字符。","categories":[{"name":"中间件/软件设计","slug":"中间件-软件设计","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"基础知识","slug":"基础知识","permalink":"https://www.codetool.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"name":"字符编码","slug":"字符编码","permalink":"https://www.codetool.top/tags/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"}]},{"title":"leetcode200-岛屿数量","slug":"leetcode200-岛屿数量","date":"2019-11-24T10:05:23.000Z","updated":"2019-12-19T08:15:15.880Z","comments":true,"path":"article/leetcode200-岛屿数量/","link":"","permalink":"https://www.codetool.top/article/leetcode200-%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/","excerpt":"","text":"1 原题给定一个由 &#39;1&#39;（陆地）和 &#39;0&#39;（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。 示例1: 输入:11110110101100000000 输出: 1 示例2: 输入:11000110000010000011 输出: 3 2 解法2.1 思想线性扫描整个二维网格，如果一个结点包含 1，则以其为根结点启动广度优先搜索，或深度优先搜索。搜索到的值设为 0 以标记访问过该结点，每经历过一次搜索说明岛的数量+1。直到整个二维数组都变成0。 2.2 代码不嫌麻烦的可以建一个存储二维数组x、y位置的数据结构类。不然只能存储元素的偏移地址手动算x和y。 class Solution { public int numIslands(char[][] grid) { int count = 0; int height = grid.length; if(height==0) return 0; int width = grid[0].length; Queue&lt;Integer> queue = new LinkedList&lt;Integer>(); for(int i = 0;i&lt;height;i++){ for(int j = 0;j&lt;width;j++){ if(grid[i][j]=='1'){ grid[i][j] = '0'; queue.offer(i*width+j); while(!queue.isEmpty()){ int index = queue.poll(); int index_x = index/width; int index_y = index%width; if(index_x!=height-1 &amp;&amp; grid[index_x+1][index_y]=='1'){ queue.offer((index_x+1)*width+index_y); grid[index_x+1][index_y] = '0'; } if(index_x!=0 &amp;&amp; grid[index_x-1][index_y]=='1'){ queue.offer((index_x-1)*width+index_y); grid[index_x-1][index_y] = '0'; } if(index_y!=0 &amp;&amp; grid[index_x][index_y-1]=='1'){ queue.offer(index_x*width+index_y-1); grid[index_x][index_y-1] = '0'; } if(index_y!=width-1 &amp;&amp; grid[index_x][index_y+1]=='1'){ queue.offer(index_x*width+index_y+1); grid[index_x][index_y+1] = '0'; } } count++; } } } return count; } } 在BFS的基础上改一下就成了DFS： class Solution { public int numIslands(char[][] grid) { int count = 0; int height = grid.length; if(height==0) return 0; int width = grid[0].length; Stack&lt;Integer> stack = new Stack&lt;>(); for(int i = 0;i&lt;height;i++){ for(int j = 0;j&lt;width;j++){ if(grid[i][j]=='1'){ grid[i][j] = '0'; stack.push(i*width+j); while(!stack.empty()){ int index = stack.peek(); int index_x = index/width; int index_y = index%width; if(index_x!=height-1 &amp;&amp; grid[index_x+1][index_y]=='1'){ stack.push((index_x+1)*width+index_y); grid[index_x+1][index_y] = '0'; continue; } if(index_x!=0 &amp;&amp; grid[index_x-1][index_y]=='1'){ stack.push((index_x-1)*width+index_y); grid[index_x-1][index_y] = '0'; continue; } if(index_y!=0 &amp;&amp; grid[index_x][index_y-1]=='1'){ stack.push(index_x*width+index_y-1); grid[index_x][index_y-1] = '0'; continue; } if(index_y!=width-1 &amp;&amp; grid[index_x][index_y+1]=='1'){ stack.push(index_x*width+index_y+1); grid[index_x][index_y+1] = '0'; continue; }else{ stack.pop(); } } count++; } } } return count; } } 当然DFS还可以用递归的系统调用栈：（作者：LeetCode） class Solution { void dfs(char[][] grid, int r, int c) { int nr = grid.length; int nc = grid[0].length; if (r &lt; 0 || c &lt; 0 || r >= nr || c >= nc || grid[r][c] == '0') { return; } grid[r][c] = '0'; dfs(grid, r - 1, c); dfs(grid, r + 1, c); dfs(grid, r, c - 1); dfs(grid, r, c + 1); } public int numIslands(char[][] grid) { if (grid == null || grid.length == 0) { return 0; } int nr = grid.length; int nc = grid[0].length; int num_islands = 0; for (int r = 0; r &lt; nr; ++r) { for (int c = 0; c &lt; nc; ++c) { if (grid[r][c] == '1') { ++num_islands; dfs(grid, r, c); } } } return num_islands; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"BFS","slug":"BFS","permalink":"https://www.codetool.top/tags/BFS/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"}]},{"title":"leetcode622-设计循环队列","slug":"leetcode622-设计循环队列","date":"2019-11-24T10:05:23.000Z","updated":"2019-12-19T08:15:20.497Z","comments":true,"path":"article/leetcode622-设计循环队列/","link":"","permalink":"https://www.codetool.top/article/leetcode622-%E8%AE%BE%E8%AE%A1%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97/","excerpt":"","text":"设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为“环形缓冲器”。 循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。 你的实现应该支持如下操作： MyCircularQueue(k): 构造器，设置队列长度为 k 。 Front: 从队首获取元素。如果队列为空，返回 -1 。 Rear: 获取队尾元素。如果队列为空，返回 -1 。 enQueue(value): 向循环队列插入一个元素。如果成功插入则返回真。 deQueue(): 从循环队列中删除一个元素。如果成功删除则返回真。 isEmpty(): 检查循环队列是否为空。 isFull(): 检查循环队列是否已满。 示例: MyCircularQueue circularQueue = new MycircularQueue(3); // 设置长度为 3 circularQueue.enQueue(1); // 返回 true circularQueue.enQueue(2); // 返回 true circularQueue.enQueue(3); // 返回 true circularQueue.enQueue(4); // 返回 false，队列已满 circularQueue.Rear(); // 返回 3 circularQueue.isFull(); // 返回 true circularQueue.deQueue(); // 返回 true circularQueue.enQueue(4); // 返回 true circularQueue.Rear(); // 返回 4 提示: 所有的值都在 0 至 1000 的范围内； 操作数将在 1 至 1000 的范围内； 请不要使用内置的队列库。 1 解法1.1 思想根据循环队列的定义来实现，理解head指针和tail指针指向的位置。通常情况下：添加元素，tail++。删除元素，head++。当tail或head处于数组的最末端的时候：操作之后应该指向下标0。当数组为空：不能移除元素。当数组满了：不能添加元素。 1.2 代码class MyCircularQueue { int[] queue; int head; int tail; int size; /** Initialize your data structure here. Set the size of the queue to be k. */ public MyCircularQueue(int k) { queue = new int[k]; size = 0; head = -1; tail = -1; } /** Insert an element into the circular queue. Return true if the operation is successful. */ public boolean enQueue(int value) { if(isFull()) return false; if(tail == queue.length-1) { tail = 0; queue[0] = value; } else queue[++tail] = value; size++; if(head==-1) head = 0; return true; } /** Delete an element from the circular queue. Return true if the operation is successful. */ public boolean deQueue() { if(isEmpty()) return false; if(size==1){ tail = -1; head = -1; }else if(head == queue.length-1){ head = 0; }else{ head++; } size--; return true; } /** Get the front item from the queue. */ public int Front() { if(head==-1) return -1; return queue[head]; } /** Get the last item from the queue. */ public int Rear() { if(tail==-1) return -1; return queue[tail]; } /** Checks whether the circular queue is empty or not. */ public boolean isEmpty() { return size == 0; } /** Checks whether the circular queue is full or not. */ public boolean isFull() { return size == queue.length; } } /** * Your MyCircularQueue object will be instantiated and called as such: * MyCircularQueue obj = new MyCircularQueue(k); * boolean param_1 = obj.enQueue(value); * boolean param_2 = obj.deQueue(); * int param_3 = obj.Front(); * int param_4 = obj.Rear(); * boolean param_5 = obj.isEmpty(); * boolean param_6 = obj.isFull(); */","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"队列","slug":"队列","permalink":"https://www.codetool.top/tags/%E9%98%9F%E5%88%97/"}]},{"title":"leetcode26-删除排序数组中的重复项","slug":"leetcode26-删除排序数组中的重复项","date":"2019-11-23T10:05:23.000Z","updated":"2019-12-19T08:15:15.881Z","comments":true,"path":"article/leetcode26-删除排序数组中的重复项/","link":"","permalink":"https://www.codetool.top/article/leetcode26-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/","excerpt":"","text":"1 原题给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。 示例 1: 给定数组 nums = [1,1,2],函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。你不需要考虑数组中超出新长度后面的元素。 示例 2: 给定 nums = [0,0,1,1,1,2,2,3,3,4],函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。你不需要考虑数组中超出新长度后面的元素。 说明: 为什么返回数值是整数，但输出的答案是数组呢? 请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。 你可以想象内部操作如下: // nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝int len = removeDuplicates(nums); // 在函数里修改输入数组对于调用者是可见的。// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。for (int i = 0; i &lt; len; i++) {print(nums[i]);} 2 解法2.1 思想双指针解法，i始终停留在第一个出现的重复元素上，j一旦遇到不重复的元素，i++，然后将不重复的元素赋给nums[i]。 2.2 代码class Solution { public int removeDuplicates(int[] nums) { int i = 0; int j = 0; int count = 0; while(j&lt;nums.length-1){ j++; if(nums[j]!=nums[i]) nums[++i] = nums[j]; } return i+1; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode283-移动零","slug":"leetcode283-移动零","date":"2019-11-23T10:05:23.000Z","updated":"2019-12-19T08:15:15.883Z","comments":true,"path":"article/leetcode283-移动零/","link":"","permalink":"https://www.codetool.top/article/leetcode283-%E7%A7%BB%E5%8A%A8%E9%9B%B6/","excerpt":"","text":"1 原题给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。 示例: 输入: [0,1,0,3,12]输出: [1,3,12,0,0] 说明: 必须在原数组上操作，不能拷贝额外的数组。 尽量减少操作次数。 2 解法2.1 思想双指针解法，i始终不经过0，如果j遍历到了非0元素，i++，并把非0元素赋值给i。 2.2 代码class Solution { public void moveZeroes(int[] nums) { int i=0; for(int j=0;j&lt;nums.length;j++){ if (nums[j]!=0) { nums[i++]=nums[j]; } } for (int j=i;j&lt;nums.length;j++){ nums[j]=0; } } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode557-反转字符串中的单词III","slug":"leetcode557-反转字符串中的单词III","date":"2019-11-23T10:05:23.000Z","updated":"2019-12-19T08:15:20.496Z","comments":true,"path":"article/leetcode557-反转字符串中的单词III/","link":"","permalink":"https://www.codetool.top/article/leetcode557-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8DIII/","excerpt":"","text":"1 原题给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。 示例1: 输入: “Let’s take LeetCode contest”输出: “s’teL ekat edoCteeL tsetnoc” 注意： 在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。 2 解法2.1 思想翻转字符串可以用StringBuffer的reverse方法。 2.2 代码class Solution { public String reverseWords(String s) { String[] words = s.split(\" \"); StringBuilder sb = new StringBuilder(); for(String word:words){ sb.append(new StringBuffer(word).reverse().toString()); sb.append(\" \"); } return sb.toString().trim(); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"字符串","slug":"字符串","permalink":"https://www.codetool.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}]},{"title":"ArrayList源码分析","slug":"ArrayList源码分析","date":"2019-11-22T10:05:23.000Z","updated":"2019-12-19T08:14:52.668Z","comments":true,"path":"article/ArrayList源码分析/","link":"","permalink":"https://www.codetool.top/article/ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","excerpt":"","text":"ArrayList的Hierarchy： 父类们：Collection接口研究AbstractCollection源码分析 先来看看List接口： 1 List接口List代表有序集合，元素可以重复。 List家族一览： 默认实现方法： 1.1 default void replaceAll(UnaryOperator operator);以指定的方法替换List中的所有元素，UnaryOperator是一个函数式接口，输入一个类型对象，返回一个同类型对象。 default void replaceAll(UnaryOperator&lt;E> operator) { Objects.requireNonNull(operator); final ListIterator&lt;E> li = this.listIterator(); while (li.hasNext()) { li.set(operator.apply(li.next())); } } 示例： List&lt;Integer> list = new ArrayList&lt;Integer>(); list.add(1); list.add(3); list.add(5); list.replaceAll(a->a+1); //list = [2,4,6] 1.2 default void sort(Comparator&lt;? super E&gt; c);根据排序方法排序。还是先转为了Array再使用Arrays的sort方法进行排序。 default void sort(Comparator&lt;? super E> c) { Object[] a = this.toArray(); Arrays.sort(a, (Comparator) c); ListIterator&lt;E> i = this.listIterator(); for (Object e : a) { i.next(); i.set((E) e); } } 2 AbstractList接口AbstractList接口继承自AbstractCollection，为什么要提它呢，因为里面有个重要的字段modCount，用于迭代器遍历元素时检查列表中的元素是否发生结构性变化。 参考下面“重要的内部类”中迭代器里next方法的实现。 3 重要的字段transient Object[] elementData;ArrayList的元素存储在这个数组中。 private int size;记录空间大小。 4 重要的内部类Itr实现了迭代器Iterator，ListItr实现了集合迭代器ListIterator两者的介绍： 谈谈java中的Iterator next的实现： public E next() { checkForComodification(); int i = cursor; if (i >= size) throw new NoSuchElementException(); Object[] elementData = ArrayList.this.elementData; if (i >= elementData.length) throw new ConcurrentModificationException(); cursor = i + 1; return (E) elementData[lastRet = i]; }jav 其中的checkForComodification()： final void checkForComodification() { if (modCount != expectedModCount) throw new ConcurrentModificationException(); } modCount在ArrayList每次add或者remove它的值都会加1。在初始化迭代器的时候，令expectedModCount = modCount，在迭代器迭代的过程中，如果modCount被改变了，就会造成expectedModCount不等于modCount，抛出ConcurrentModificationException警告。 比如下面这段程序就会抛出警告： 为什么在迭代器循环的时候不让使用list.remove修改元素呢？ 有多线程下被影响的考虑，更重要的是，强制了在迭代器迭代的时候只能使用iterator.remove移除元素. 比如上面这段程序应该改成： 5 构造方法已知ArrayList的元素是存放于一个数组中，那么在初始化一个ArrayList对象的时候会分配一个多大的数组？ 先看两个构造方法： public ArrayList() { this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;} 其中常量DEFAULTCAPACITY_EMPTY_ELEMENTDATA是一个空数组： private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {}; public ArrayList(int initialCapacity) { if (initialCapacity > 0) { this.elementData = new Object[initialCapacity]; } else if (initialCapacity == 0) { this.elementData = EMPTY_ELEMENTDATA; } else { throw new IllegalArgumentException(\"Illegal Capacity: \"+ initialCapacity); } } 使用一个初始容量初始化ArrayList。如果传入的参数大于0，则分配一个这么大的数组。注意到如果这里的initialCapacity等于0，令其等于常量EMPTY_ELEMENTDATA也是一个空数组。 那为什么要区分EMPTY_ELEMENTDATA和DEFAULTCAPACITY_EMPTY_ELEMENTDATA呢？ 因为他们是两个不同对象的引用，ArrayList通过这个区分当前对象是用无参构造方法创建的还是由ArrayList(0)这样一个构造方法创建的 在后文“重要的内部方法”中的calculateCapacity方法，当第一个元素被加进来的时候就能知道应该扩容多少。 6 重要的内部方法6.1 空间分配相关6.1.1 private static int calculateCapacity(Object[] elementData, int minCapacity);private static int calculateCapacity(Object[] elementData, int minCapacity) { if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) { return Math.max(DEFAULT_CAPACITY, minCapacity); } return minCapacity; } 这个方法用于计算： 当原来数组为空，第一次插入元素的时候，数组应该分配多少空间，DEFAULTCAPACITY_EMPTY_ELEMENTDATA呼应了上面构造方法中的无参构造方法，常量DEFAULT_CAPACITY=10。 这说明：如果ArrayList是以无参构造方法建立的，在添加第一个元素时会直接分配10个元素的空间。 6.1.2 private void grow(int minCapacity);private void grow(int minCapacity) { // overflow-conscious code int oldCapacity = elementData.length; //即newCapacity = 1.5*oldCapacity int newCapacity = oldCapacity + (oldCapacity >> 1); if (newCapacity - minCapacity &lt; 0) newCapacity = minCapacity; if (newCapacity - MAX_ARRAY_SIZE > 0) newCapacity = hugeCapacity(minCapacity); // minCapacity is usually close to size, so this is a win: elementData = Arrays.copyOf(elementData, newCapacity); } 可以看出数组是以1.5倍为基准扩容的，如果1.5倍后大于MAX_ARRAY_SIZE (Integer.MAX_VALUE - 8)，则使用hugeCapacity(minCapacity)确认（size是int类型，不能超过int范围的最大值）。 6.2 元素获取、增改相关6.2.1 E elementData(int index);E elementData(int index) { return (E) elementData[index]; } 取元素,就是从数组中获取元素，是get等方法的依赖。 6.2.2 private void rangeCheck(int index);private void rangeCheck(int index) { if (index >= size) throw new IndexOutOfBoundsException(outOfBoundsMsg(index)); } 边界检查。 rangeCheck方法是提供给get,remove，set之类的方法检查的,是给已经存在元素的集合操作的，范围0至size-1,这个方法把检查负责的职责交给了数组的访问,像get(-1)时会报异常ArrayIndexOutOfBoundsException。 6.2.3 private void rangeCheckForAdd(int index);private void rangeCheckForAdd(int index) { if (index > size || index &lt; 0) throw new IndexOutOfBoundsException(outOfBoundsMsg(index)); } 这个方法是提供给add和addAll的，会检查负数。因为如果扩容了数组再抛出异常就白扩容了。 7 总结 ArrayList内部是用数组实现的。 如果使用无参构造函数建立ArrayList，在添加第一个元素的时候会分配10个元素的空间。 ArrayList的扩容是以1.5倍为基准的。 ArrayList是线程不安全的。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://www.codetool.top/tags/jdk/"},{"name":"源码研究","slug":"源码研究","permalink":"https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"},{"name":"集合","slug":"集合","permalink":"https://www.codetool.top/tags/%E9%9B%86%E5%90%88/"}]},{"title":"leetcode119-杨辉三角II","slug":"leetcode119-杨辉三角II","date":"2019-11-22T10:05:23.000Z","updated":"2019-12-19T08:15:15.877Z","comments":true,"path":"article/leetcode119-杨辉三角II/","link":"","permalink":"https://www.codetool.top/article/leetcode119-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92II/","excerpt":"","text":"1 原题给定一个非负索引 k，其中 k ≤ 33，返回杨辉三角的第 k 行。在杨辉三角中，每个数是它左上方和右上方的数的和。 示例: 输入: 3输出: [1,3,3,1] 进阶： 你可以优化你的算法到 O(k) 空间复杂度吗？ 2 解法2.1 思想可以利用leetcode118-杨辉三角中的函数来解决。 2.2 代码class Solution { public List&lt;Integer> getRow(int rowIndex) { List&lt;Integer> list = new ArrayList(); list.add(1); if(rowIndex == 0) return list; return getRowByPrev(rowIndex,getRow(rowIndex-1)); } //通过上一行计算第n行 public List&lt;Integer> getRowByPrev(int n,List&lt;Integer> nums){ List&lt;Integer> ret = new ArrayList(); ret.add(1); for(int i=1;i&lt;(n+2)/2;i++){ ret.add(nums.get(i-1)+nums.get(i)); } int size = (n+1)/2; for(int i=0;i&lt;size;i++){ ret.add(ret.get(size-i-1)); } return ret; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"数组","slug":"数组","permalink":"https://www.codetool.top/tags/%E6%95%B0%E7%BB%84/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode151-翻转字符串里的单词","slug":"leetcode151-翻转字符串里的单词","date":"2019-11-22T10:05:23.000Z","updated":"2019-12-19T08:15:15.878Z","comments":true,"path":"article/leetcode151-翻转字符串里的单词/","link":"","permalink":"https://www.codetool.top/article/leetcode151-%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8C%E7%9A%84%E5%8D%95%E8%AF%8D/","excerpt":"","text":"1 原题给定一个字符串，逐个翻转字符串中的每个单词。 示例 1: 输入: “the sky is blue”输出: “blue is sky the” 示例 2: 输入: “ hello world! ”输出: “world! hello”解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。 示例 3: 输入: “a good example”输出: “example good a”解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。 说明: 无空格字符构成一个单词。 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。 2 解法2.1 思想直接使用jdk中String的trim()和split()方法得到单词的数组，或者遍历字符串字符，记录单词数组。再反向遍历输出。 2.2 代码class Solution { public String reverseWords(String s) { //\"\\\\s+\"代表正则表达式1个或多个空白字符 String[] words = s.trim().split(\"\\\\s+\"); int size = words.length; StringBuilder str = new StringBuilder(); for(int i = 0;i&lt;size;i++){ str.append(words[size-1-i]); if(i!=size-1) str.append(\" \"); } return str.toString(); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"字符串","slug":"字符串","permalink":"https://www.codetool.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}]},{"title":"leetcode189-旋转数组","slug":"leetcode189-旋转数组","date":"2019-11-22T10:05:23.000Z","updated":"2019-12-19T08:15:15.879Z","comments":true,"path":"article/leetcode189-旋转数组/","link":"","permalink":"https://www.codetool.top/article/leetcode189-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84/","excerpt":"","text":"1 原题给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。 示例1: 输入: [1,2,3,4,5,6,7] 和 k = 3输出: [5,6,7,1,2,3,4]解释:向右旋转 1 步: [7,1,2,3,4,5,6]向右旋转 2 步: [6,7,1,2,3,4,5]向右旋转 3 步: [5,6,7,1,2,3,4] 示例2: 输入: [-1,-100,3,99] 和 k = 2输出: [3,99,-1,-100]解释:向右旋转 1 步: [99,-1,-100,3]向右旋转 2 步: [3,99,-1,-100] 说明: 尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。 要求使用空间复杂度为 O(1) 的 原地 算法。 2 解法2.1 思想将旋转点前后的部分交换。注意当k大于数组大小size的情况相当于k=k%size的情况 2.2 代码class Solution { public void rotate(int[] nums, int k) { int size = nums.length; if(k==size) return; //k大于size的情况 if(k>size) k = k%size; //用另一个数组暂时存放结果 int[] rotate = new int[size]; //将旋转点后面的部分移到新数组前面来 for(int i = 0;i&lt;k;i++){ rotate[i] = nums[size-k+i]; } //将旋转点前面的部分移到新数组后面去 for(int i = k;i&lt;size;i++){ rotate[i] = nums[i-k]; } //将新数组中的值赋值回原数组 for(int i = 0;i&lt;size;i++){ nums[i] = rotate[i]; } } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"数组","slug":"数组","permalink":"https://www.codetool.top/tags/%E6%95%B0%E7%BB%84/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode167-两数之和II-输入有序数组","slug":"leetcode167-两数之和II-输入有序数组","date":"2019-11-20T10:05:23.000Z","updated":"2019-12-19T08:15:15.879Z","comments":true,"path":"article/leetcode167-两数之和II-输入有序数组/","link":"","permalink":"https://www.codetool.top/article/leetcode167-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8CII-%E8%BE%93%E5%85%A5%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/","excerpt":"","text":"1 原题给定一个已按照 升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。 函数应该返回这两个下标值index1和index2，其中index1必须小于index2。 说明: 返回的下标值（index1 和 index2）不是从零开始的。 你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。 示例: 输入: numbers = [2, 7, 11, 15], target = 9输出: [1,2]解释 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。 2 解法2.1 思想因为给的数组是有序的，可以使用双指针逼近目标数。 2.2 代码class Solution { public int[] twoSum(int[] numbers, int target) { int[] index = new int[2]; int index1 = 0; int index2 = numbers.length - 1; while (index1 &lt; index2) { if (numbers[index1] + numbers[index2] > target) index2--; else if (numbers[index1] + numbers[index2] &lt; target) index1++; //找到了 else { index[0] = index1 + 1; index[1] = index2 + 1; break; } } return index; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode209-长度最小的子数组","slug":"leetcode209-长度最小的子数组","date":"2019-11-20T10:05:23.000Z","updated":"2019-12-19T08:15:15.880Z","comments":true,"path":"article/leetcode209-长度最小的子数组/","link":"","permalink":"https://www.codetool.top/article/leetcode209-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/","excerpt":"","text":"1 原题给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的连续子数组。如果不存在符合条件的连续子数组，返回 0。 示例: 输入: s = 7, nums = [2,3,1,2,4,3]输出: 2解释: 子数组 [4,3] 是该条件下的长度最小的连续子数组。 进阶: 如果你已经完成了O(n) 时间复杂度的解法, 请尝试 O(n log n) 时间复杂度的解法。 2 解法2.1 思想使用两个指针i、j从下标为0处开始遍历。如果i-j内的总数小于s，将j向后移动，如果i-j内的总数大于s，将i向后移动，直到获取所有子数组的长度，并比较出最短长度。 2.2 代码class Solution { public int minSubArrayLen(int s, int[] nums) { int i = 0; int j = -1; int size = nums.length; int sum = 0; int min = 0; while(i&lt;size&amp;&amp;j&lt;size){ if(sum>=s){ if(min==0) min = j-i+1; else min = j-i+1&lt;min?j-i+1:min; sum -= nums[i++]; }else{ if(j==size-1) return min; sum += nums[++j]; } } return min; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode27-移除元素","slug":"leetcode27-移除元素","date":"2019-11-20T10:05:23.000Z","updated":"2019-12-19T08:15:15.882Z","comments":true,"path":"article/leetcode27-移除元素/","link":"","permalink":"https://www.codetool.top/article/leetcode27-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/","excerpt":"","text":"1 原题给定一个数组 nums 和一个值 val*，你需要原地移除所有数值等于 *val 的元素，返回移除后数组的新长度。 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。 示例 1: 给定 nums = [3,2,2,3], val = 3,函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。 示例 2: 给定 nums = [0,1,2,2,3,0,4,2], val = 2,函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。 说明: 为什么返回数值是整数，但输出的答案是数组呢? 请注意，输入数组是以 “引用” 方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。 你可以想象内部操作如下: // nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝int len = removeElement(nums, val); // 在函数里修改输入数组对于调用者是可见的。// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。for (int i = 0; i &lt; len; i++) {print(nums[i]);} 2 解法2.1 思想我们继续使用两个指针：一个仍然用于迭代，而第二个指针总是指向下一次添加的位置。 2.2 代码class Solution { public int removeElement(int[] nums, int val) { int k = 0; for(int i = 0;i&lt;nums.length;i++){ if(nums[i]!=val){ nums[k] = nums[i]; k++; } } return k; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode28-实现strStr()","slug":"leetcode28-实现strStr","date":"2019-11-20T10:05:23.000Z","updated":"2019-12-19T08:15:15.882Z","comments":true,"path":"article/leetcode28-实现strStr/","link":"","permalink":"https://www.codetool.top/article/leetcode28-%E5%AE%9E%E7%8E%B0strStr/","excerpt":"","text":"1 原题实现 strStr() 函数。 给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回 -1。 示例 1: 输入: haystack = “hello”, needle = “ll”输出: 2 示例 2: 输入: haystack = “aaaaa”, needle = “bba”输出: -1 说明: 当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。 对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。 2 解法2.1 JDK API在leetcode上，当然可以投机取巧地使用String.indexof()方法，不用重复造轮子： class Solution { public int strStr(String haystack, String needle) { return haystack.indexOf(needle); } } 但这是一个经典的字符串精准模式匹配问题，历史上出现过很多解决这个问题的算法，掌握它们的思想还是有必要的： 2.2 BF算法（朴素算法）2.2.1 思想这是最直观、最简单的算法。从主串的第start个字符起和模式的第1个字符比较，如果相等继续逐个比较后续字符。比较过程中一旦发现不相等的情况，则回溯至主串中的第start+1个字符位置处，重新与模式P的字符进行比较。该算法效率较低。 2.2.2 代码class Solution { public int strStr(String haystack, String needle) { int mainLen = haystack.length(); int subLen = needle.length(); if(needle.equals(\"\")) return 0;//注意模式字符串为空的情况 for(int i=0;i&lt;mainLen;i++){ for(int j =0;j&lt;subLen;j++){ if(!(i+j&lt;mainLen)) return -1;//主串下标超出 if(!(haystack.charAt(i+j)==needle.charAt(j))) break; else if(j == subLen-1) return i;//完全匹配，返回主串下标 } } return -1; } } 算法的复杂度为O[(i-j)j] 2.3 MP算法2.3.1 思路 指针不回溯，利用已得到的“部分匹配”结果，将模式向右“滑动”若干位置后继续比较。 参考下面给出的示例：haystack ：&quot;cdnidnidsm&quot;needle：&quot;nidsm&quot;按照BF算法的思想，在比较haystack[2]和needle[0]时，两个字符相等，然而比较到haystack[5]和needle[3]的时候两个字符不等，于是回溯继续向后比较haystack[3]和needle[0]。可是既然能确定haystack[2]-haystack[4]与needle[0]-needle[2]是完全对应的。那么比较haystack[3]和needle[0]实际上相当于比较needle[1]和needle[0]。并且我们知道needle中前三个字符都是不同的。所以只需要从haystack[5]处继续跟needle[0]比较就行了。并且needle中字符的这些关系完全是一开始就可以确定的。 我们称记录模式字符串中各个字符之间关系的函数为失效函数。失效函数的定义域是模式字符串在“失配”前匹配的字符串个数。取值j属于0~Len(P)-1 获取失效函数的方法： 失效函数的取值k满足P0P1…Pk = Pj-kPj-k+1…Pj。如果不存在这个k值，取-1。 直观的看k就是模式字符串前j个字符是否存在前k+1位等于后k+1位。 nidsm的失效函数为： j 0 1 2 3 4 p(j) n i d s m k -1 -1 -1 -1 -1 再举一个例子，caatcat的失效函数为： j 0 1 2 3 4 5 6 p(j) c a a t c a t k -1 -1 -1 -1 0 1 -1 得到了失效函数后，即可使用MP算法进行匹配。假设在某一轮比较中，失配的情况发生在模式P的第j位，如果j=0，进行下一轮比较时，目标指针向后移动一位，模式的起始比较地址回到P0，其他情况进行下一轮比较时，目标指针不发生回溯，而模式P的起始比较地址为j-1对应的失效函数的值+1。 当然也可以把这个值提前算出来便成为了Next()函数： j 0 1 2 3 4 5 6 7 p(j) c a a t c a t Next(j) -1 0 0 0 0 1 2 0 Next(7)可以用于继续匹配（可能要求找出所有匹配的子字符串）。 2.3.2 代码class Solution { //获取next函数 public int[] next(String needle){ int len = needle.length(); int i = 0; int j = -1; int[] next = new int[len+1]; next[0] = -1; while(i &lt; len){ while( j > -1 &amp;&amp; needle.charAt(i)!=needle.charAt(j)) j = next[j];//j会有一个传递的效果，必须前一个i对应的j是1，下一个i对应的j才能是2。如果遇到不同的字符则j清零 next[++i] = ++j; } return next; } public int strStr(String haystack, String needle) { int mainLen = haystack.length(); int subLen = needle.length(); if(needle.equals(\"\")) return 0;//注意模式字符串为空的情况 if(mainLen&lt;subLen) return -1; int[] next = next(needle); int i = 0; int j = 0; while(j &lt; mainLen){ while(i>-1 &amp;&amp; needle.charAt(i) != haystack.charAt(j)) i = next[i]; i++; j++; if(i >= subLen){ return j-i; } } return -1; } } 2.4 KMP算法2.4.1 思路在MP算法的基础上，还要避免最长前缀之后的那个字符不等于原来失配的那个字符。下面在已知mpNext表的情况下，给出建立kmpNext表的规则。这个规则分为四种情况： 如果mpNext[j] = 0且Pj = P0，则令kmpNext[j] = -1。 如果mpNext[j] = 0且Pj ≠ P0，则令kmpNext[j] = 0。 如果mpNext[j] ≠ 0且Pj ≠ PmpNext[j]，则令kmpNext[j] = mpNext[j]。 如果mpNext[j] ≠ 0且Pj = PmpNext[j]，则用mpNext[j]的值替换原来mpNext[j]中的j值，直到情况转换为前3种情况的一种，进而递归地求解kmpNext[j]。 j 0 1 2 3 4 5 6 7 p(j) c a a t c a t mpNext(j) -1 0 0 0 0 1 2 0 kmpNext(j) -1 0 0 0 -1 0 2 0 2.4.2 代码class Solution { //获取kmpNext数组 public int[] next(String needle){ int len = needle.length(); int i = 0; int j = -1; int[] next = new int[len+1]; next[0] = -1; while(i &lt; len-1){ while( j > -1 &amp;&amp; needle.charAt(i)!=needle.charAt(j)) j = next[j]; i++; j++; if(needle.charAt(i) == needle.charAt(j)) next[i] = next[j]; else next[i] = j; } return next; } public int strStr(String haystack, String needle) { int mainLen = haystack.length(); int subLen = needle.length(); if(needle.equals(\"\")) return 0;//注意模式字符串为空的情况 if(mainLen&lt;subLen) return -1; int[] next = next(needle); int i = 0; int j = 0; while(j &lt; mainLen){ while(i>-1 &amp;&amp; needle.charAt(i) != haystack.charAt(j)) i = next[i]; i++; j++; if(i >= subLen){ return j-i; } } return -1; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"字符串","slug":"字符串","permalink":"https://www.codetool.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}]},{"title":"leetcode485-最大连续1的个数","slug":"leetcode485-最大连续1的个数","date":"2019-11-20T10:05:23.000Z","updated":"2019-12-19T08:15:15.884Z","comments":true,"path":"article/leetcode485-最大连续1的个数/","link":"","permalink":"https://www.codetool.top/article/leetcode485-%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/","excerpt":"","text":"1 原题给定一个二进制数组， 计算其中最大连续1的个数。 示例 1: 输入： [1,1,0,1,1,1]输出： 3解释： 开头的两位和最后的三位都是连续1，所以最大连续1的个数是 3. 注意： 输入的数组只包含0和1。 输入数组的长度是正整数，且不超过 10,000。 2 解法2.1 思想使用一个数遍历数组，另一个数记录遇到的连续的1的个数，记录最大值。 2.2 代码class Solution { public int findMaxConsecutiveOnes(int[] nums) { int j=0; int max=0; for(int i:nums){ if(i==1){ j++; }else{ if(j>max) max=j; j=0; } } if(j>max) max=j; return max; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"AbstractCollection源码分析","slug":"AbstractCollection源码分析","date":"2019-11-18T14:39:59.000Z","updated":"2019-12-19T08:14:39.191Z","comments":true,"path":"article/AbstractCollection源码分析/","link":"","permalink":"https://www.codetool.top/article/AbstractCollection%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","excerpt":"","text":"上次谈到了Collection接口研究 这次来看看其中的一个子类，但也是个抽象类：AbstractCollection。用于实现基本的Collection结构，提供给普通用户继承使用。也是JDK集合类的父类，部分方法是没有被重载的。 相比Collection接口并没有新增公开方法，但它提供了许多方法的默认实现。 0.1 public boolean contains(Object o);提供了一个默认实现： public boolean contains(Object o) { Iterator&lt;E> it = iterator(); if (o==null) { while (it.hasNext()) if (it.next()==null) return true; } else { while (it.hasNext()) if (o.equals(it.next())) return true; } return false; } 很容易理解，也很依赖于iterator()和equals()方法的实现 0.2 public boolean isEmpty();public boolean isEmpty() { return size() == 0; } 依赖于size()方法的实现 0.3 public Object[] toArray();public Object[] toArray() { // Estimate size of array; be prepared to see more or fewer elements Object[] r = new Object[size()]; Iterator&lt;E> it = iterator(); for (int i = 0; i &lt; r.length; i++) { if (! it.hasNext()) // fewer elements than expected return Arrays.copyOf(r, i); r[i] = it.next(); } return it.hasNext() ? finishToArray(r, it) : r; } 注意该实现判断了iterator遍历的元素个数可能跟size()的结果不同的情况。并且以iterator遍历的所有元素为准。 0.3.1 private static T[] finishToArray(T[] r, Iterator&lt;?&gt; it);是toArray()函数调用的一个私密静态方法，它将it迭代器遍历的所有元素存入一个数组，并且不依赖size()的实现，可以给传入的数组扩容。 private static &lt;T> T[] finishToArray(T[] r, Iterator&lt;?> it) { int i = r.length; while (it.hasNext()) { int cap = r.length;//容量capacity的概念 if (i == cap) { int newCap = cap + (cap >> 1) + 1;// n+n/2+1扩容 // overflow-conscious code if (newCap - MAX_ARRAY_SIZE > 0) newCap = hugeCapacity(cap + 1); //新容量等于Integer.MAX_VALUE或MAX_ARRAY_SIZE r = Arrays.copyOf(r, newCap); } r[i++] = (T)it.next(); } // trim if overallocated return (i == r.length) ? r : Arrays.copyOf(r, i); } 0.3.2 private static int hugeCapacity(int minCapacity);是finishToArray()函数调用的用于容量逼近Integer.MAX_VALUE给数组扩容的方法 private static int hugeCapacity(int minCapacity) { //超出int范围 if (minCapacity &lt; 0) // overflow throw new OutOfMemoryError (\"Required array size too large\"); return (minCapacity > MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE; } 0.4 public boolean add(E e);public boolean add(E e) { throw new UnsupportedOperationException(); } 不允许单个添加元素。 0.5 public boolean remove(Object o);public boolean remove(Object o) { Iterator&lt;E> it = iterator(); if (o==null) { while (it.hasNext()) { if (it.next()==null) { it.remove(); return true; } } } else { while (it.hasNext()) { if (o.equals(it.next())) { it.remove(); return true; } } } return false; } 注意null要分开来判断，因为null不能被equals()调用删除的方式是通过迭代器的remove()方法 0.6 public boolean containsAll(Collection&lt;?&gt; c);public boolean containsAll(Collection&lt;?> c) { for (Object e : c) if (!contains(e)) return false; return true; } 循环调用contains()方法判断 0.7 public boolean addAll(Collection&lt;? extends E&gt; c)public boolean addAll(Collection&lt;? extends E> c) { boolean modified = false; for (E e : c) if (add(e)) modified = true; return modified; } 这个操作不能保证所有元素都被添加成功了，这依赖于add()方法的实现，但只要有一个元素被添加成功了，就返回true。 0.8 public boolean removeAll(Collection&lt;?&gt; c)public boolean removeAll(Collection&lt;?&gt; c) { Objects.requireNonNull(c); boolean modified = false; Iterator&lt;?&gt; it = iterator(); while (it.hasNext()) { if (c.contains(it.next())) { it.remove(); modified = true; } } return modified; }同理，该操作也不能保证所有元素都被移除成功了，但只要有一个元素被移除成功了，就返回true。 0.9 public boolean retainAll(Collection&lt;?&gt; c)public boolean retainAll(Collection&lt;?> c) { Objects.requireNonNull(c); boolean modified = false; Iterator&lt;E> it = iterator(); while (it.hasNext()) { if (!c.contains(it.next())) { it.remove(); modified = true; } } return modified; } 和removeAll()的实现相反，将c中含有的元素保留了下来。 0.10 public void clear();public void clear() { Iterator&lt;E> it = iterator(); while (it.hasNext()) { it.next(); it.remove(); } } 移除所有元素。 0.11 public String toString()public String toString() { Iterator&lt;E> it = iterator(); if (! it.hasNext()) return \"[]\"; StringBuilder sb = new StringBuilder();//sb sb.append('['); for (;;) { E e = it.next(); sb.append(e == this ? \"(this Collection)\" : e); if (! it.hasNext()) return sb.append(']').toString(); sb.append(',').append(' '); } } 以[*,*,*...]的形式输出字符串，还考虑到了元素可能是它本身的情况","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://www.codetool.top/tags/jdk/"},{"name":"源码研究","slug":"源码研究","permalink":"https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"},{"name":"集合","slug":"集合","permalink":"https://www.codetool.top/tags/%E9%9B%86%E5%90%88/"}]},{"title":"leetcode14-最长公共前缀","slug":"leetcode14-最长公共前缀","date":"2019-11-18T10:05:23.000Z","updated":"2019-12-19T08:15:15.878Z","comments":true,"path":"article/leetcode14-最长公共前缀/","link":"","permalink":"https://www.codetool.top/article/leetcode14-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/","excerpt":"","text":"1 原题编写一个函数来查找字符串数组中的最长公共前缀。 如果不存在公共前缀，返回空字符串 “”。 示例 1: 输入: [“flower”,”flow”,”flight”]输出: “fl” 示例 2: 输入: [“dog”,”racecar”,”car”]输出: “”解释: 输入不存在公共前缀。 说明: 所有输入只包含小写字母 a-z 。 2 解法2.1 思想以第一个字符串的每一个位置上的字符为基准，依次比对其余字符串对应位置上的字符，如果每个字符串对应的位置上都是这个字符，则将其append到结果上，一旦遇到一个字符不是公有的立刻将结果返回。 2.2 代码class Solution { public String longestCommonPrefix(String[] strs) { int size = strs.length; if(size==0) return \"\"; if(size==1) return strs[0];//一个字符串直接返回本身 StringBuilder str = new StringBuilder();//为了避免java连接字符串的低效率使用StringBuilder for(int i = 0;i &lt; strs[0].length();i++){ char letter = strs[0].charAt(i); for(int j = 1;j &lt; size;j++){ //依次检查其余字符串各个字符是否对应第一个字符串中的字符 //为了避免其他字符串的长度小于第一个字符串，使用try捕获异常 try{ if(strs[j].charAt(i)!=letter) return str.toString(); }catch(Exception e){ return str.toString();} } str.append(letter); } return str.toString(); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"字符串","slug":"字符串","permalink":"https://www.codetool.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}]},{"title":"leetcode344-反转字符串","slug":"leetcode344-反转字符串","date":"2019-11-18T10:05:23.000Z","updated":"2019-12-19T08:15:15.883Z","comments":true,"path":"article/leetcode344-反转字符串/","link":"","permalink":"https://www.codetool.top/article/leetcode344-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/","excerpt":"","text":"1 原题编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组char[]的形式给出。 不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。 你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。 示例 1: 输入：[“h”,”e”,”l”,”l”,”o”]输出：[“o”,”l”,”l”,”e”,”h”] 示例 2: 输入：[“H”,”a”,”n”,”n”,”a”,”h”]输出：[“h”,”a”,”n”,”n”,”a”,”H”] 2 解法2.1 思想将第一个元素与末尾进行交换，再向前移动到下一个元素，并不断地交换，直到它到达中间位置。 我们可以同时使用两个指针来完成迭代：一个从第一个元素开始，另一个从最后一个元素开始。持续交换它们所指向的元素，直到这两个指针相遇。 2.2 代码class Solution { public void reverseString(char[] s) { char temp; int i = 0; int j = s.length-1; while(i&lt;=j){ temp = s[i]; s[i] = s[j]; s[j] = temp; i++; j--; } } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"字符串","slug":"字符串","permalink":"https://www.codetool.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode561-数组拆分I","slug":"leetcode561-数组拆分I","date":"2019-11-18T10:05:23.000Z","updated":"2019-12-19T08:15:20.496Z","comments":true,"path":"article/leetcode561-数组拆分I/","link":"","permalink":"https://www.codetool.top/article/leetcode561-%E6%95%B0%E7%BB%84%E6%8B%86%E5%88%86I/","excerpt":"","text":"1 原题给定长度为 2n 的数组, 你的任务是将这些数分成 n 对, 例如 (a1, b1), (a2, b2), …, (an, bn) ，使得从1 到 n 的 min(ai, bi) 总和最大。 示例 1: 输入：[1,4,3,2]输出： 4解释: n 等于 2, 最大总和为 4 = min(1, 2) + min(3, 4). 提示: n 是正整数,范围在 [1, 10000]. 数组中的元素范围在 [-10000, 10000]. 2 解法2.1 思想通过观察发现，最后总和应该是所有数排完序后偶数下标的元素的值的总和。 2.2 代码class Solution { public int arrayPairSum(int[] nums) { Arrays.sort(nums); int i = 0; int sum = 0; while(i&lt;nums.length){ sum+=nums[i]; i+=2; } return sum; } } 还有一种排序方法：因为已知数的范围都是在[-10000, 10000]中，可以利用额外的空间排序。这种方法由于排序更快，时间复杂度较低，但只适用于数值范围已知且对空间复杂度要求不高的情况。 public class Solution { public int arrayPairSum(int[] nums) { int[] arr = new int[20001]; int lim = 10000; for (int num: nums) arr[num + lim]++; int d = 0, sum = 0; for (int i = -10000; i &lt;= 10000; i++) { sum += (arr[i + lim] + 1 - d) / 2 * i; d = (2 + arr[i + lim] - d) % 2; } return sum; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"数组","slug":"数组","permalink":"https://www.codetool.top/tags/%E6%95%B0%E7%BB%84/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode118-杨辉三角","slug":"leetcode118-杨辉三角","date":"2019-11-15T10:05:23.000Z","updated":"2019-12-19T08:15:15.876Z","comments":true,"path":"article/leetcode118-杨辉三角/","link":"","permalink":"https://www.codetool.top/article/leetcode118-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/","excerpt":"","text":"1 原题给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。在杨辉三角中，每个数是它左上方和右上方的数的和。 示例: 输入: 5输出:[ [1], [1,1], [1,2,1], [1,3,3,1],[1,4,6,4,1]] 2 解法2.1 思想根据上一行生成下一行，避免重复计算 2.2 代码class Solution { public List&lt;List&lt;Integer>> generate(int numRows) { List&lt;Integer> row = new ArrayList(); List&lt;List&lt;Integer>> ret = new ArrayList&lt;List&lt;Integer>>(); for(int n = 0;n&lt;numRows;n++){ row = getRow(n+1,row); ret.add(row); } return ret; } //n:第n行，nums：上一行（n-1行）的列表 public List&lt;Integer> getRow(int n,List&lt;Integer> nums){ List&lt;Integer> ret = new ArrayList(); ret.add(1);//第一个1不需要计算 if(n==1){//第一行直接返回 return ret; } for(int i=1;i&lt;(n+1)/2;i++){//由上一行的数相加得到结果 ret.add(nums.get(i-1)+nums.get(i)); } int size = n/2; for(int i=0;i&lt;size;i++){//镜像处理 ret.add(ret.get(size-i-1)); } return ret; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"数组","slug":"数组","permalink":"https://www.codetool.top/tags/%E6%95%B0%E7%BB%84/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode54-螺旋矩阵","slug":"leetcode54-螺旋矩阵","date":"2019-11-15T10:05:23.000Z","updated":"2019-12-19T08:15:20.495Z","comments":true,"path":"article/leetcode54-螺旋矩阵/","link":"","permalink":"https://www.codetool.top/article/leetcode54-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/","excerpt":"","text":"1 原题给定一个包含 m x n 个元素的矩阵（m 行, n 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。 示例 1: 输入:[[ 1, 2, 3 ],[ 4, 5, 6 ],[ 7, 8, 9 ]]输出: [1,2,3,6,9,8,7,4,5] 示例 2: 输入:[[1, 2, 3, 4],[5, 6, 7, 8],[9,10,11,12]]输出: [1,2,3,6,9,8,7,4,5] 2 解法2.1 思想找拐点规律和移动规律： 当横坐标x等于纵坐标y+1时，且之前是向上移动的，拐点向右。 当横坐标x加纵坐标y等于列数减一，且之前是向右移动的，拐点向下。 当行数和横坐标x之差等于列数与纵坐标y之差时，且之前是向下移动的，拐点向左。 当横坐标x加纵坐标y等于行数减一，且之前是向左移动的，拐点向上。 当不满足上述拐点情况时，坐标会随着之前的运动方向继续运动。可以设置代表四个方向运动状态的布尔值来记录运动状态。 2.2 代码class Solution { public List&lt;Integer> spiralOrder(int[][] matrix) { if(matrix==null) return null; int x = matrix.length; List&lt;Integer> ret = new ArrayList&lt;Integer>(); if(x==0) return ret; int y = matrix[0].length;//获取二维数组的行数和列数，排除null和空情况。 int x_now=0,y_now=0; int size = x*y; //代表向各个方向移动的布尔值。 boolean toRight=true,toLeft=false,toTop=false,toBottom=false; for(int i=0;i&lt;size;i++) { ret.add(matrix[x_now][y_now]); if(x_now==y_now+1&amp;&amp;toTop) {//拐向右 toRight=true; toTop=false; }else if(y_now==y-x_now-1&amp;&amp;toRight) {//拐向下 toBottom=true; toRight=false; }else if(x-x_now==y-y_now&amp;&amp;toBottom){//拐向左 toLeft=true; toBottom=false; }else if(x_now==x-y_now-1&amp;&amp;toLeft) {//拐向上 toTop=true; toLeft=false; } //移动坐标 if(toRight) y_now++; if(toLeft) y_now--; if(toTop) x_now--; if(toBottom) x_now++; } return ret; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"数组","slug":"数组","permalink":"https://www.codetool.top/tags/%E6%95%B0%E7%BB%84/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode67-二进制求和","slug":"leetcode67-二进制求和","date":"2019-11-15T10:05:23.000Z","updated":"2019-12-19T08:15:20.498Z","comments":true,"path":"article/leetcode67-二进制求和/","link":"","permalink":"https://www.codetool.top/article/leetcode67-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C/","excerpt":"","text":"1 原题给定两个二进制字符串，返回他们的和（用二进制表示）。 输入为非空字符串且只包含数字 1 和 0。 示例 1: 输入: a = “11”, b = “1”输出: “100” 示例 2: 输入: a = “1010”, b = “1011”输出: “10101” 2 解法2.1 思想通过加法规则实现，应注意进位的处理和字符的处理。不确定最后的结果是否会多出一位进位，所以会有 2 种处理方式： 第一种，在进行计算时直接拼接字符串，会得到一个反向字符，需要最后再进行翻转 第二种，按照位置给结果字符赋值，最后如果有进位，则在前方进行字符串拼接添加进位 2.2 代码 copy了@灵魂画师牧码（guanpengchn）的思路： class Solution { public String addBinary(String a, String b) { StringBuilder ans = new StringBuilder(); int ca = 0;//进位值 for(int i = a.length() - 1, j = b.length() - 1;i >= 0 || j >= 0; i--, j--) { int sum = ca; //将数组长度不够的情况一般化，负数下标对应的值用0计算。 sum += i >= 0 ? a.charAt(i) - '0' : 0; sum += j >= 0 ? b.charAt(j) - '0' : 0; ans.append(sum % 2); ca = sum / 2;//得到进位 } ans.append(ca == 1 ? ca : \"\");//如果最后进位值还为1则添加一位 return ans.reverse().toString();//反转字符串 } } 自己做的凌乱的思路： class Solution { public String addBinary(String a, String b) { //获取两个字符串的长度和最大值最小值 int len_a = a.length(); int len_b = b.length(); int max,min; boolean carry = false;//进位标志 if( len_a &lt;= len_b ){ max = len_b; min = len_a; }else{ max = len_a; min = len_b; } char[] ret = new char[max]; for( int i = 0 ; i &lt; max ; i++ ){ char a_now = i&lt;len_a?a.charAt(len_a-1-i):'0'; char b_now = i&lt;len_b?b.charAt(len_b-1-i):'0'; //列举所有情况手动计算 if(a_now=='1'&amp;&amp;b_now=='1'){ ret[max-i-1] = carry?'1':'0'; carry = true; if(i==max-1){ return \"1\"+ String.valueOf(ret);//如果当前为首位则在前面连接一个1 } }else if(a_now=='1'&amp;&amp;b_now=='0'||b_now=='1'&amp;&amp;a_now=='0'){ if(carry){ ret[max-i-1] = '0'; if(i==max-1){ return \"1\"+ String.valueOf(ret); } }else{ ret[max-i-1] = '1'; } }else if(a_now=='0'&amp;&amp;b_now=='0'){ ret[max-i-1] = carry?'1':'0'; carry = false; } } return String.valueOf(ret); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"字符串","slug":"字符串","permalink":"https://www.codetool.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}]},{"title":"leetcode498-对角线遍历","slug":"leetcode498-对角线遍历","date":"2019-11-14T10:05:23.000Z","updated":"2019-12-19T08:15:20.495Z","comments":true,"path":"article/leetcode498-对角线遍历/","link":"","permalink":"https://www.codetool.top/article/leetcode498-%E5%AF%B9%E8%A7%92%E7%BA%BF%E9%81%8D%E5%8E%86/","excerpt":"","text":"这是一个Z字形编排问题，JEPG的编码过程中也会用到。 1 原题给定一个含有 M x N 个元素的矩阵（M 行，N 列），请以对角线遍历的顺序返回这个矩阵中的所有元素，对角线遍历如下图所示。 示例: 输入:[[ 1, 2, 3 ],[ 4, 5, 6 ],[ 7, 8, 9 ]]输出: [1,2,4,7,5,3,6,8,9]解释: 说明: 给定矩阵中的元素总数不会超过 100000 。 2 解法2.1 思想找拐点的规律： 当横坐标x为0，纵坐标y是偶数，且y不是最后一列的时候，拐点向右。 当横坐标x为最后一行，若行数为偶数且纵坐标y为奇数或行数为奇数但纵坐标y为偶数时，拐点向右。 当纵坐标y为0，横坐标x是奇数，且x不是最后一行的时候，拐点向下。 当纵坐标y为最后一列，若列数为偶数且横坐标x为偶数或列数为奇数但横坐标x为奇数时，拐点向右。 其他情况，当横坐标x为偶数且纵坐标y为奇数或x为奇数且y为偶数的时候，拐点向左下 当横坐标x为偶数且纵坐标y为偶数或x为奇数且y为奇数的时候，拐点向右上 2.2 代码class Solution { public int[] findDiagonalOrder(int[][] matrix) { //获取二维数组的长宽、大小 int x = matrix.length; if(x == 0) return new int[0]; int y = matrix[0].length; int size = x*y; int x_now=0,y_now=0;//落点位置 int[] ret = new int[size];//用于存储并返回的一维数组 int i = 0; while( x_now &lt; x &amp;&amp; y_now &lt; y ){ ret[i] = matrix[x_now][y_now]; //存入元素 i++; if((x_now==0&amp;&amp;y_now%2==0&amp;&amp;y_now!=y-1)||(x_now == x-1&amp;&amp;(y_now+x)%2==0)){//向右 y_now += 1; }else if((y_now==0&amp;&amp;x_now%2==1&amp;&amp;x_now!=x-1)||(y_now == y-1&amp;&amp;(x_now+y)%2==1)){//向下 x_now += 1; } else if((x_now+y_now)%2==0){//向右上 y_now +=1; x_now -=1; }else if((x_now+y_now)%2==1){//向左下 y_now -=1; x_now +=1; } } return ret; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"数组","slug":"数组","permalink":"https://www.codetool.top/tags/%E6%95%B0%E7%BB%84/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode66-加一","slug":"leetcode66-加一","date":"2019-11-14T10:05:23.000Z","updated":"2019-12-19T08:15:20.498Z","comments":true,"path":"article/leetcode66-加一/","link":"","permalink":"https://www.codetool.top/article/leetcode66-%E5%8A%A0%E4%B8%80/","excerpt":"","text":"1 原题给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。 最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。 你可以假设除了整数 0 之外，这个整数不会以零开头。 示例 1: 输入: [1,2,3]输出: [1,2,4]解释: 输入数组表示数字123。 示例 2: 输入: [4,3,2,1]输出: [4,3,2,2]解释: 输入数组表示数字4321。 2 解法2.1 思想根据加法规则进行计算，应注意进位的处理和全是9的特殊情况 2.2 代码 迭代 class Solution { public int[] plusOne(int[] digits) { for(int i = digits.length-1;i>=0;i--){ if(digits[i]!=9) {//不需进位 digits[i] += 1; break;//什么时候不需进位即可退出 }else { if (i == 0) {//首位需进位的特殊情况，需分配一个大一位的数组 int[] ret = new int[digits.length+1]; ret[0] = 1; return ret; } digits[i] = 0;//不是首位，需进位 } } return digits; } } 递归 class Solution { public int[] plusOne(int[] digits) { return addOneAtPos(digits, digits.length-1); } private int[] addOneAtPos(int[] num, int pos){//在pos位上加一 if(num[pos]!=9){//不需进位 num[pos]+=1; return num;//什么时候不需进位即可返回 } else if(pos>0){//不是首位，需进位 num[pos]=0; return addOneAtPos(num, pos-1); } else {//首位需进位的特殊情况，需分配一个大一位的数组 int length = num.length; int[] newNum = new int[length+1]; newNum[0]=1; return newNum; } } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"数组","slug":"数组","permalink":"https://www.codetool.top/tags/%E6%95%B0%E7%BB%84/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"Collection接口研究","slug":"Collection接口研究","date":"2019-11-13T10:05:23.000Z","updated":"2019-12-19T08:15:15.875Z","comments":true,"path":"article/Collection接口研究/","link":"","permalink":"https://www.codetool.top/article/Collection%E6%8E%A5%E5%8F%A3%E7%A0%94%E7%A9%B6/","excerpt":"","text":"以下内容基于jdk1.8 1 接口Collection分析 img 该接口实现了接口Iterable 方法： 1.1 int size();返回元素的个数 1.2 boolean isEmpty();返回是否为空 1.3 boolean contains(Object o);返回是否包含某个对象抛出异常： @throws ClassCastException 参数不兼容 @throws NullPointerException 参数是null，并且容器不允许包含null元素 1.4 Object[] toArray();返回所有元素组成的一个数组数组是重新分配空间并创建的，它的元素不会由该容器维护，原文： The returned array will be “safe” in that no references to it are maintained by this collection. (In other words, this method must allocate a new array even if this collection is backed by an array). The caller is thus free to modify the returned array. 1.5 T[] toArray(T[] a);如果给定的数组大小能容纳该容器所有元素，则返回到给定数组中，否则会新分配一个可以容纳所有元素的数组并返回。 List&lt;Integer> list = new ArrayList&lt;Integer>(); Integer[] a = new Integer[2]; list.add(3); list.add(5); list.toArray(a); // a = {3,5} 抛出异常： @throws ArrayStoreException 给定的数组运行类型不是该容器运行类型的超类 @throws NullPointerException 给定的数组是null 1.6 boolean add(E e);确保该容器包含该指定的元素，如果因为这个操作改变了容器内的元素返回true，如果该容器已经有了该元素且不允许包含重复的元素则返回false 抛出异常： @throws UnsupportedOperationException 该容器不支持这个操作 @throws ClassCastException 给定的元素不能添加进容器中 @throws NullPointerException 参数是null，并且容器不允许包含null元素 @throws IllegalArgumentException 给定的元素的某些属性决定了它不能被添加进该容器中 @throws IllegalStateException 由于某些限制该时间不能添加该元素 1.7 boolean remove(Object o);移除某个元素抛出异常： @throws ClassCastException @throws NullPointerException @throws UnsupportedOperationException 1.8 boolean containsAll(Collection&lt;?&gt; c)如果该容器包含给定的容器中的所有元素，返回true抛出异常： @throws ClassCastException @throws NullPointerException 1.9 boolean addAll(Collection&lt;? extends E&gt; c)将给定容器中的所有元素插入到该容器中抛出异常： @throws UnsupportedOperationException @throws ClassCastException @throws NullPointerException @throws IllegalArgumentException @throws IllegalStateException 1.10 boolean removeAll(Collection&lt;?&gt; c)将该容器和给定容器中共有的元素从该容器中删除抛出异常： @throws UnsupportedOperationException @throws ClassCastException @throws NullPointerException 1.11 default boolean removeIf(Predicate&lt;? super E&gt; filter)Predicate是JAVA8新增的一个函数式接口（指如果填写lambda表达式则默认实现Predicate的test方法），这个方法删除所有符合条件的元素，如果成功返回true? super E指的是E或E的父类默认实现： default boolean removeIf(Predicate&lt;? super E> filter) { Objects.requireNonNull(filter); boolean removed = false; final Iterator&lt;E> each = iterator(); while (each.hasNext()) { if (filter.test(each.next())) { each.remove(); removed = true; } } return removed; } 调用实例： Integer[] nums = {1,2,3,4,5,6}; ArrayList&lt;Integer> list = new ArrayList&lt;Integer>(Arrays.asList(nums)); list.removeIf(num->num>3?true:false);//删除list中大于3的元素 //这里的lambda表达式是简化的写法，将lambda表达式完整的写法是list.removeIf((Integer num)->{return num>3?true:false;}); 抛出异常： @throws NullPointerException @throws UnsupportedOperationException 这个元素不能被删除 1.12 boolean retainAll(Collection&lt;?&gt; c);仅保留给定集合中的元素，删除其他元素。 抛出异常： @throws UnsupportedOperationException @throws ClassCastException @throws NullPointerException 1.13 void clear();移除所有元素。 抛出异常： @throws UnsupportedOperationException 1.14 default Stream stream();返回一个序列流。默认实现： default Stream&lt;E> stream() { return StreamSupport.stream(spliterator(), false); } 1.15 default Stream parallelStream();返回一个并行流。默认实现： default Stream&lt;E> parallelStream() { return StreamSupport.stream(spliterator(), true); }","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://www.codetool.top/tags/jdk/"},{"name":"源码研究","slug":"源码研究","permalink":"https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"},{"name":"集合","slug":"集合","permalink":"https://www.codetool.top/tags/%E9%9B%86%E5%90%88/"}]},{"title":"leetcode724-寻找数组的中心索引","slug":"leetcode724-寻找数组的中心索引","date":"2019-11-13T10:05:23.000Z","updated":"2019-12-19T08:15:20.499Z","comments":true,"path":"article/leetcode724-寻找数组的中心索引/","link":"","permalink":"https://www.codetool.top/article/leetcode724-%E5%AF%BB%E6%89%BE%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E5%BF%83%E7%B4%A2%E5%BC%95/","excerpt":"","text":"1 原题给定一个整数类型的数组nums，请编写一个能够返回数组“中心索引”的方法。 我们是这样定义数组中心索引的：数组中心索引的左侧所有元素相加的和等于右侧所有元素相加的和。 如果数组不存在中心索引，那么我们应该返回 -1。如果数组有多个中心索引，那么我们应该返回最靠近左边的那一个。 示例 1: 输入:nums = [1, 7, 3, 6, 5, 6]输出: 3解释:索引3 (nums[3] = 6) 的左侧数之和(1 + 7 + 3 = 11)，与右侧数之和(5 + 6 = 11)相等。同时, 3 也是第一个符合要求的中心索引。 示例 2: 输入:nums = [1, 2, 3]输出: -1解释:数组中不存在满足此条件的中心索引。 说明: nums的长度范围为 [0, 10000]。 任何一个 nums[i] 将会是一个范围在 [-1000, 1000]的整数。 2 解法2.1 思想避免重复计算，先计算完数组所有元素之和，再划分为两数之和的问题。 2.2 代码class Solution { public int pivotIndex(int[] nums) { int i; int frontRet = 0, endRet = 0; //计算所有元素总和 for (int k = 0; k &lt; nums.length; k++) { endRet += nums[k]; } //从左向右试探，计算两部分的值 for (i = 0; i &lt; nums.length; i++) { endRet -= nums[i]; if (frontRet == endRet) { break; } frontRet += nums[i]; } if ((i &lt; 0) || (i >= nums.length)) { i = -1; } return i; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"数组","slug":"数组","permalink":"https://www.codetool.top/tags/%E6%95%B0%E7%BB%84/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"23种设计模式归纳","slug":"23种设计模式归纳","date":"2019-11-08T10:05:23.000Z","updated":"2019-12-19T08:14:39.190Z","comments":true,"path":"article/23种设计模式归纳/","link":"","permalink":"https://www.codetool.top/article/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%BD%92%E7%BA%B3/","excerpt":"","text":"1 参考文档 23种设计模式全解析 - codeTao - 博客园 设计模式（创建型） - 八一鱼 - 博客园 设计模式（结构型） - 八一鱼 - 博客园 代理模式和装饰者模式的区别 - 夜的第八章 - 博客园 简说设计模式——享元模式 - JAdam - 博客园 2 设计模式的分类 类模式处理类与子类的关系，通过处理这些关系来建立继承，属于静态关系，在编译时候确定下来；对象模式处理对象之间的关系，运行时发生变化，属于动态关系。 2.1 创建型模式 工厂方法模式 抽象工厂模式 单例模式 建造者模式 原型模式 2.2 结构型模式 适配器模式 装饰器模式 代理模式 外观模式 桥接模式 组合模式 享元模式 2.3 行为型模式 策略模式 模板方法模式 观察者模式 迭代器模式 责任链模式 命令模式 备忘录模式 状态模式 访问者模式 中介者模式 解释器模式 3 设计模式遵守的设计原则也是类的设计遵守的原则 3.1 单一职责原则SRP每个类只做一件事，但该原则也不适用于聚合类。 聚合类需要优先使用对象组合，而不是类继承 3.2 里氏替换原则LSP 子类的对象提供了父类的所有行为，且加上子类额外的一些东西（可以是功能，也可以是属性） 当程序基于父类实现时，如果将子类替换父类而程序不需要修改，则说明符合LSP原则 子类必须能替换成它们的父类 3.3 依赖倒置原则DIP也叫依赖反转原则。 高层模块不应该直接依赖低层模块，两者都应该依赖抽象层。 抽象不能依赖细节，细节必须依赖抽象。 3.4 接口隔离原则ISP 客户端不应该被强迫去依赖它们并不需要的接口 不满足ISP的类应该拆分成多个接口， 通过一个抽象类去实现它们，再去继承这个抽象父类。 3.5 开闭原则 对拓展开放，对修改封闭 对使用者修改关闭，对提供者拓展开放 4 创建型模式解析 在软件工程中，创建型模式是处理对象创建的设计模式，试图根据实际情况使用合适的方式创建对象。基本的对象创建方式可能会导致设计上的问题，或增加设计的复杂度。创建型模式通过以某种方式控制对象的创建来解决问题。 4.1 工厂方法模式（类） 创建一个工厂接口和创建多个工厂实现类 4.2 抽象工厂模式（对象） 区别： 工厂方法模式只有一个抽象产品类，而抽象工厂模式有多个。工厂方法模式的具体工厂类只能创建一个具体产品类的实例，而抽象工厂模式可以创建多个。工厂方法创建 “一种” 产品，他的着重点在于”怎么创建”，也就是说如果你开发，你的大量代码很可能围绕着这种产品的构造，初始化这些细节上面。也因为如此，类似的产品之间有很多可以复用的特征，所以会和模版方法相随。 抽象工厂需要创建一些列产品，着重点在于”创建哪些”产品上，也就是说，如果你开发，你的主要任务是划分不同差异的产品线，并且尽量保持每条产品线接口一致，从而可以从同一个抽象工厂继承。 抽象工厂模式包含如下角色： AbstractFactory：抽象工厂 ConcreteFactory：具体工厂 AbstractProduct：抽象产品 Product：具体产品 4.3 单例模式（对象） 在一个JVM中，该类只有一个对象实例存在。 public class Singleton { /* 持有私有静态实例，防止被引用，此处赋值为null，目的是实现延迟加载 */ private static Singleton instance = null; /* 私有构造方法，防止被实例化 */ private Singleton() { } /* 静态工程方法，创建实例 */ public static Singleton getInstance() { if (instance == null) { instance = new Singleton(); } return instance; } /* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 */ public Object readResolve() { return instance; } } 多线程下的优化： public class Singleton { /* 私有构造方法，防止被实例化 */ private Singleton() { } /* 此处使用一个内部类来维护单例 */ private static class SingletonFactory { private static Singleton instance = new Singleton(); } /* 获取实例 */ public static Singleton getInstance() { return SingletonFactory.instance; } /* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 */ public Object readResolve() { return getInstance(); } } 原理： JVM内部的机制能够保证当一个类被加载的时候，这个类的加载过程是线程互斥的。这样当我们第一次调用getInstance的时候，JVM能够帮我们保证instance只被创建一次，并且会保证把赋值给instance的内存初始化完毕 4.4 建造者模式（对象） 在软件开发中，也存在大量类似汽车一样的复杂对象，它们拥有一系列成员属性，这些成员属性中有些是引用类型的成员对象。而且在这些复杂对象中，还可能存在一些限制条件，如某些属性没有赋值则复杂对象不能作为一个完整的产品使用；有些属性的赋值必须按照某个顺序，一个属性没有赋值之前，另一个属性可能无法赋值等。 建造者模式包含如下角色： Builder：抽象建造者 ConcreteBuilder：具体建造者 Director：指挥者 Product：产品角色 Director的作用： 隔离客户与生产过程。 负责控制产品的生成过程。 public class Meal { private String food; private String drink; public String getFood() { return food; } public void setFood(String food) { this.food = food; } public String getDrink() { return drink; } public void setDrink(String drink) { this.drink = drink; } } public abstract class MealBuilder { Meal meal = new Meal(); public abstract void buildFood(); public abstract void buildDrink(); public Meal getMeal(){ return meal; } } public class MealA extends MealBuilder{ public void buildDrink() { meal.setDrink(\"可乐\"); } public void buildFood() { meal.setFood(\"薯条\"); } } public class KFCWaiter { private MealBuilder mealBuilder; public KFCWaiter(MealBuilder mealBuilder) { this.mealBuilder = mealBuilder; } public Meal construct(){ //准备食物 mealBuilder.buildFood(); //准备饮料 mealBuilder.buildDrink(); //准备完毕，返回一个完整的套餐给客户 return mealBuilder.getMeal(); } } 4.5 原型模式（对象） 有些对象是需要频繁创建的，用原型实例指定创建对象的类型，并且通过拷贝这个原型来创建新的同类型的对象，分为浅克隆和深克隆，浅克隆只复制拷贝的对象，不复制引用的对象，即成员对象不复制；深克隆，引用也同样复制。 public class Prototype implements Cloneable, Serializable { private static final long serialVersionUID = 1L; private String string; private SerializableObject obj; /* 浅复制 */ public Object clone() throws CloneNotSupportedException { Prototype proto = (Prototype) super.clone(); /* super.clone()是浅复制 */ return proto; } /* 深复制 */ public Object deepClone() throws IOException, ClassNotFoundException { /* 写入当前对象的二进制流 */ ByteArrayOutputStream bos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(bos); oos.writeObject(this); /* 读出二进制流产生的新对象 */ ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray()); ObjectInputStream ois = new ObjectInputStream(bis); return ois.readObject(); } public String getString() { return string; } public void setString(String string) { this.string = string; } public SerializableObject getObj() { return obj; } public void setObj(SerializableObject obj) { this.obj = obj; } } class SerializableObject implements Serializable { private static final long serialVersionUID = 1L; } 5 结构型模式解析结构型模式主要用于处理类和对象的组合 5.1 适配器模式（类和对象） 将一个接口转换成客户希望的另一个接口，从而使接口不兼容的那些类可以在一起工作。 5.1.1 类的适配器模式 通过一个具体的类，将适配者适配到目标接口当中 public class Source { public void method1() { System.out.println(\"this is original method!\"); } } public interface Targetable { /* 与原类中的方法相同 */ public void method1(); /* 新类的方法 */ public void method2(); } public class Adapter extends Source implements Targetable { @Override public void method2() { System.out.println(\"this is the targetable method!\"); } } public class AdapterTest { public static void main(String[] args) { Targetable target = new Adapter(); target.method1(); target.method2(); } } 5.1.2 对象的适配器模式 一个适配器可以将多个不同的适配者适配到同一目标 public class Wrapper implements Targetable { private Source source; public Wrapper(Source source){ super(); this.source = source; } @Override public void method2() { System.out.println(\"this is the targetable method!\"); } @Override public void method1() { source.method1(); } } 5.2 装饰者模式（对象） 给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例 //Sourceable public interface Sourceable { public void method(); } //Source public class Source implements Sourceable { @Override public void method() { System.out.println(\"the original method!\"); } } //Decorator public class Decorator implements Sourceable { private Sourceable source; public Decorator(Sourceable source){ super(); this.source = source; } @Override public void method() { System.out.println(\"before decorator!\"); source.method(); System.out.println(\"after decorator!\"); } } 我寻思有点像servlet的过滤器 5.3 代理模式（对象） 多一个代理类出来，替原对象进行一些操作 public interface Sourceable { public void method(); } public class Source implements Sourceable { @Override public void method() { System.out.println(\"the original method!\"); } } public class Proxy implements Sourceable { private Source source; public Proxy(){ super(); this.source = new Source(); } @Override public void method() { before(); source.method(); atfer(); } private void atfer() { System.out.println(\"after proxy!\"); } private void before() { System.out.println(\"before proxy!\"); } } 装饰者模式和代理模式的区别： 装饰器模式关注于在一个对象上动态的添加方法，然而代理模式关注于控制对对象的访问。换句话说，用代理模式，代理类（proxy class）可以对它的客户隐藏一个对象的具体信息。因此，当使用代理模式的时候，我们常常在一个代理类中创建一个对象的实例。并且，当我们使用装饰器模式的时候，我们通常的做法是将原始对象作为一个参数传给装饰者的构造器。 5.4 外观模式（对象） 定义一个高层接口，为子系统中的一组接口提供一个一致的外观，从而简化了该子系统的使用 外观模式包含如下角色： Facade: 外观角色 SubSystem:子系统角色 //CPU public class CPU { public void startup(){ System.out.println(\"cpu startup!\"); } public void shutdown(){ System.out.println(\"cpu shutdown!\"); } } //Memory public class Memory { public void startup(){ System.out.println(\"memory startup!\"); } public void shutdown(){ System.out.println(\"memory shutdown!\"); } } //Disk public class Disk { public void startup(){ System.out.println(\"disk startup!\"); } public void shutdown(){ System.out.println(\"disk shutdown!\"); } } //Facade public class Computer { private CPU cpu; private Memory memory; private Disk disk; public Computer(){ cpu = new CPU(); memory = new Memory(); disk = new Disk(); } public void startup(){ System.out.println(\"start the computer!\"); cpu.startup(); memory.startup(); disk.startup(); System.out.println(\"start computer finished!\"); } public void shutdown(){ System.out.println(\"begin to close the computer!\"); cpu.shutdown(); memory.shutdown(); disk.shutdown(); System.out.println(\"computer closed!\"); } } 5.5 桥接模式（对象） 把事物和其具体实现分开，使他们可以各自独立的变化。 将抽象化与实现化解耦，使得二者可以独立变化 public interface Sourceable { public void method(); } public class SourceSub1 implements Sourceable { @Override public void method() { System.out.println(\"this is the first sub!\"); } } public class SourceSub2 implements Sourceable { @Override public void method() { System.out.println(\"this is the second sub!\"); } } public abstract class Bridge { private Sourceable source; public void method(){ source.method(); } public Sourceable getSource() { return source; } public void setSource(Sourceable source) { this.source = source; } } public class MyBridge extends Bridge { public void method(){ getSource().method(); } } 5.6 组合模式（对象） 将多个对象组合在一起进行操作，常用于表示树形结构中，例如二叉树，树等。 public class TreeNode { private String name; private TreeNode parent; private Vector&lt;TreeNode> children = new Vector&lt;TreeNode>(); public TreeNode(String name){ this.name = name; } public String getName() { return name; } public void setName(String name) { this.name = name; } public TreeNode getParent() { return parent; } public void setParent(TreeNode parent) { this.parent = parent; } //添加孩子节点 public void add(TreeNode node){ children.add(node); } //删除孩子节点 public void remove(TreeNode node){ children.remove(node); } //取得孩子节点 public Enumeration&lt;TreeNode> getChildren(){ return children.elements(); } } public class Tree { TreeNode root = null; public Tree(String name) { root = new TreeNode(name); } public static void main(String[] args) { Tree tree = new Tree(\"A\"); TreeNode nodeB = new TreeNode(\"B\"); TreeNode nodeC = new TreeNode(\"C\"); nodeB.add(nodeC); tree.root.add(nodeB); System.out.println(\"build the tree finished!\"); } } 5.7 享元模式（对象） 实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销，通常与工厂模式一起使用。 其中，Flyweight是抽象享元角色。它是产品的抽象类，同时定义出对象的外部状态和内部状态的接口或实现；ConcreteFlyweight是具体享元角色，是具体的产品类，实现抽象角色定义的业务；UnsharedConcreteFlyweight是不可共享的享元角色，一般不会出现在享元工厂中；FlyweightFactory是享元工厂，它用于构造一个池容器，同时提供从池中获得对象的方法。 public abstract class Flyweight { //内部状态 public String intrinsic; //外部状态 protected final String extrinsic; //要求享元角色必须接受外部状态 public Flyweight(String extrinsic) { this.extrinsic = extrinsic; } //定义业务操作 public abstract void operate(int extrinsic); public String getIntrinsic() { return intrinsic; } public void setIntrinsic(String intrinsic) { this.intrinsic = intrinsic; } } public class ConcreteFlyweight extends Flyweight { //接受外部状态 public ConcreteFlyweight(String extrinsic) { super(extrinsic); } //根据外部状态进行逻辑处理 @Override public void operate(int extrinsic) { System.out.println(\"具体Flyweight:\" + extrinsic); } } public class UnsharedConcreteFlyweight extends Flyweight { public UnsharedConcreteFlyweight(String extrinsic) { super(extrinsic); } @Override public void operate(int extrinsic) { System.out.println(\"不共享的具体Flyweight:\" + extrinsic); } } public class FlyweightFactory { //定义一个池容器 private static HashMap&lt;String, Flyweight> pool = new HashMap&lt;>(); //享元工厂 public static Flyweight getFlyweight(String extrinsic) { Flyweight flyweight = null; if(pool.containsKey(extrinsic)) { //池中有该对象 flyweight = pool.get(extrinsic); System.out.print(\"已有 \" + extrinsic + \" 直接从池中取---->\"); } else { //根据外部状态创建享元对象 flyweight = new ConcreteFlyweight(extrinsic); //放入池中 pool.put(extrinsic, flyweight); System.out.print(\"创建 \" + extrinsic + \" 并从池中取出---->\"); } return flyweight; } } 6 行为型模式解析行为型模式主要用于描述类或对象的交互以及职责分配 6.1 解释器模式（类） 主要应用在OOP开发中的编译器的开发中 给定一种语言，定义它的文法表示，并定义一个解释器，该解释器用来根据文法表示来解释语言中的句子 ​ 6.2 模板方法模式（类） 定义一个操作中的算法骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重新定义算法中某些特定步骤 6.3 策略模式（对象） 定义一系列算法，把它们一个个封装起来，并且使它们之间可相互替换，从而让算法可以独立于使用它的用户而变化 6.4 观察者模式（对象） 定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动更新 public interface Observer { public void update(); } public class Observer1 implements Observer { @Override public void update() { System.out.println(\"observer1 has received!\"); } } public class Observer2 implements Observer { @Override public void update() { System.out.println(\"observer2 has received!\"); } } public interface Subject { /*增加观察者*/ public void add(Observer observer); /*删除观察者*/ public void del(Observer observer); /*通知所有的观察者*/ public void notifyObservers(); /*自身的操作*/ public void operation(); } public abstract class AbstractSubject implements Subject { private Vector&lt;Observer> vector = new Vector&lt;Observer>(); @Override public void add(Observer observer) { vector.add(observer); } @Override public void del(Observer observer) { vector.remove(observer); } //提醒应当在抽象类中就实现 @Override public void notifyObservers() { Enumeration&lt;Observer> enumo = vector.elements(); while(enumo.hasMoreElements()){ enumo.nextElement().update(); } } } public class MySubject extends AbstractSubject { @Override public void operation() { System.out.println(\"update self!\"); notifyObservers(); } } 6.5 迭代器模式（对象） 提供一种方法来顺序访问一个聚合对象中的各个元素，而不需要暴露该对象的内部表示。 6.6 责任链模式（对象） 有多个对象，每个对象持有对下一个对象的引用，这样就会形成一条链，请求在这条链上传递，直到某一对象决定处理该请求。但是发出者并不清楚到底最终那个对象会处理该请求 public interface Handler { public void operator(); } public abstract class AbstractHandler { private Handler handler; public Handler getHandler() { return handler; } public void setHandler(Handler handler) { this.handler = handler; } } public class MyHandler extends AbstractHandler implements Handler { private String name; public MyHandler(String name) { this.name = name; } @Override public void operator() { System.out.println(name+\"deal!\"); if(getHandler()!=null){ getHandler().operator(); } } } 6.7 命令模式（对象） 将一个请求封装为一个对象，从而可用不同的请求对客户进行参数化，将请求排队或记录请求日志，支持可撤销的操作 public interface Command { public void exe(); } public class MyCommand implements Command { private Receiver receiver; public MyCommand(Receiver receiver) { this.receiver = receiver; } @Override public void exe() { receiver.action(); } } public class Receiver { public void action(){ System.out.println(\"command received!\"); } } public class Invoker { private Command command; public Invoker(Command command) { this.command = command; } public void action(){ command.exe(); } } 6.8 备忘录模式（对象） 在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，从而可以在以后将该对象恢复到原先保存的状态 public class Original { private String value; public String getValue() { return value; } public void setValue(String value) { this.value = value; } public Original(String value) { this.value = value; } public Memento createMemento(){ return new Memento(value); } public void restoreMemento(Memento memento){ this.value = memento.getValue(); } } public class Memento { private String value; public Memento(String value) { this.value = value; } public String getValue() { return value; } public void setValue(String value) { this.value = value; } } public class Storage { private Memento memento; public Storage(Memento memento) { this.memento = memento; } public Memento getMemento() { return memento; } public void setMemento(Memento memento) { this.memento = memento; } } 6.9 状态模式（对象） 允许一个对象在其内部状态改变时能够改变它的行为 public class State { private String value; public String getValue() { return value; } public void setValue(String value) { this.value = value; } public void method1(){ System.out.println(\"execute the first opt!\"); } public void method2(){ System.out.println(\"execute the second opt!\"); } } public class Context { private State state; public Context(State state) { this.state = state; } public State getState() { return state; } public void setState(State state) { this.state = state; } public void method() { if (state.getValue().equals(\"state1\")) { state.method1(); } else if (state.getValue().equals(\"state2\")) { state.method2(); } } } 6.10 访问者模式（对象） 表示一个作用于某对象结构中的各元素的操作，使得在不改变各元素的类的前提下定义作用于这些元素的新操作 适用于：给一个类添加新功能，但为了兼容性考虑或其他原因不想破坏这个类 public interface Visitor { public void visit(Subject sub); } public class MyVisitor implements Visitor { @Override public void visit(Subject sub) { System.out.println(\"visit the subject：\"+sub.getSubject()); } } public interface Subject { public void accept(Visitor visitor); public String getSubject(); } public class MySubject implements Subject { @Override public void accept(Visitor visitor) { visitor.visit(this); } @Override public String getSubject() { return \"love\"; } } 6.11 中介者模式（对象） 用一个中介对象来封装一系列的对象交互。它使各对象不需要显示地相互调用，从而达到低耦合，还可以独立地改变对象间的交互 public interface Mediator { public void createMediator(); public void workAll(); } public class MyMediator implements Mediator { private User user1; private User user2; public User getUser1() { return user1; } public User getUser2() { return user2; } @Override public void createMediator() { user1 = new User1(this); user2 = new User2(this); } @Override public void workAll() { user1.work(); user2.work(); } } public abstract class User { private Mediator mediator; public Mediator getMediator(){ return mediator; } public User(Mediator mediator) { this.mediator = mediator; } public abstract void work(); } public class User1 extends User { public User1(Mediator mediator){ super(mediator); } @Override public void work() { System.out.println(\"user1 exe!\"); } } public class User2 extends User { public User2(Mediator mediator){ super(mediator); } @Override public void work() { System.out.println(\"user2 exe!\"); } } public class Test { public static void main(String[] args) { Mediator mediator = new MyMediator(); mediator.createMediator(); mediator.workAll(); } }","categories":[{"name":"中间件/软件设计","slug":"中间件-软件设计","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/"}],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"https://www.codetool.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}]},{"title":"我的博客搬家啦","slug":"hello-world","date":"2019-11-08T10:05:23.000Z","updated":"2019-12-19T08:15:15.875Z","comments":true,"path":"article/hello-world/","link":"","permalink":"https://www.codetool.top/article/hello-world/","excerpt":"","text":"今天弃了wordpress的坑搬来hexo啦。和gitbook差不多的用法，很快就上手了呢。再也不用忍受wordpress一堆不仅没用还加载龟速的资源了奥里给！！！","categories":[{"name":"日常/随笔","slug":"日常-随笔","permalink":"https://www.codetool.top/categories/%E6%97%A5%E5%B8%B8-%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"网站日志","slug":"网站日志","permalink":"https://www.codetool.top/tags/%E7%BD%91%E7%AB%99%E6%97%A5%E5%BF%97/"}]},{"title":"在线运行C++、java、python代码的小项目实现","slug":"在线运行C++、java、python代码的小项目实现","date":"2019-08-13T12:06:57.000Z","updated":"2019-12-19T08:12:52.146Z","comments":true,"path":"article/在线运行C++、java、python代码的小项目实现/","link":"","permalink":"https://www.codetool.top/article/%E5%9C%A8%E7%BA%BF%E8%BF%90%E8%A1%8CC++%E3%80%81java%E3%80%81python%E4%BB%A3%E7%A0%81%E7%9A%84%E5%B0%8F%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0/","excerpt":"","text":"本网站在2019年8月12日之前用的代码演示功能是借用了 https://tool.lu/coderunner/ 的在线运行代码工具，在此致谢。 有一段时间这个工具突然失效了，我就在想能不能自己模仿着做一个类似的出来，简单分析了一下就想挑战一下自己，然后就开始动手了。 做出来的成果链接：点击此处 做的过程中查阅了很多网络资料，现整理如下： 需求分析：前端为一个实用的代码编辑器，通过ajax请求将写好的代码提交给服务器，服务器编译运行后把输出结果送回客户端显示。 其中使用的代码编辑器：CodeMirror，现在类似的工具使用的应该都是这款功能强大，可以自定样式的代码编辑器，官网： https://codemirror.net/ 0.1 CodeMirror搭建前端界面先从官网下载下来CodeMirror的压缩包，解压之后得到下图目录 要在html中创建一个CodeMirror编辑器，必须添加的css和js文件是 &lt;link href=./codemirror-5.48.2/lib/codemirror.css rel=stylesheet/> &lt;script src=./codemirror-5.48.2/lib/codemirror.js>&lt;/script> (5.48.2为版本号，因人而异) 然后需要添加需要编辑的语言相关的js文件，可以在mode目录下找到，这里我用了两个文件： 实现JAVA和C++代码高亮（这个文件可以实现C，C++，JAVA，C#等语言）： &lt;script src=./codemirror-5.48.2/mode/clike/clike.js>&lt;/script> 实现python的代码高亮： &lt;script src=./codemirror-5.48.2/mode/python/python.js>&lt;/script> 需要更改编辑器主题样式的可以在theme目录下找到对应的主题css文件添加进去，我觉得默认主题就很好看了就没用其他主题。 为了实现括号匹配和代码折叠功能，还要添加的文件有： &lt;link rel=stylesheet href=./codemirror-5.48.2/addon/fold/foldgutter.css/> &lt;script src=./codemirror-5.48.2/addon/fold/foldcode.js>&lt;/script> &lt;script src=./codemirror-5.48.2/addon/fold/foldgutter.js>&lt;/script> &lt;script src=./codemirror-5.48.2/addon/fold/brace-fold.js>&lt;/script> &lt;script src=./codemirror-5.48.2/addon/fold/comment-fold.js>&lt;/script> 创建编辑器的过程： 在html中使用一个textarea占位，配置好id： &lt;textarea id=code name=code>&lt;/textarea> 通过对应的js代码创建编辑器： var editor = CodeMirror.fromTextArea(document.getElementById(code), { mode: text/x-java, //实现Java代码高亮 //mode: text/x-c++src, //实现C++代码高亮 //mode: text/x-python, //实现Python代码高亮 indentUnit:4,//以四个空格的长度缩进 indentWithTabs: true,//以tab代替空格缩进 lineNumbers: true, //显示行号 lineWrapping: true, foldGutter: true, //代码折叠 gutters: [CodeMirror-linenumbers, CodeMirror-foldgutter], matchBrackets: true //括号匹配 }); 这里需要什么语言高亮需要在官网找到对应语言的 MIME types ，写在mode参数中 其他相关js函数： 编辑器的大小通过 editor.setSize(width, height) 方法设置 获取编辑器内的代码：editor.getValue() 设置编辑器内的代码：editor.setValue() 设置编辑器的配置选项: editor.setOption() 最终搭配上bootstrap样式做出来的效果是这样的： 0.2 js实现前端逻辑使用JQuery简化js的写法 关键代码： 切换语言事件 //选择语言事件 $(\"#lang\").on('change', () => { lang = $(\"#lang\").val() if (lang == 'java') { editor.setOption(\"mode\", \"text/x-java\") editor.setValue(javacode) } else if (lang == \"cpp\") { editor.setOption(\"mode\", \"text/x-c++src\") editor.setValue(cppcode) } else if (lang == \"python\") { editor.setOption(\"mode\", \"text/x-python\") editor.setValue(pythoncode) } }) 发送POST请求 $(function(){ //点击运行按钮后的事件 $(\"#run\").on(\"click\",()=>{ var codesrc = editor.getValue(); //给源代码编码 var codeEncoded = encodeURIComponent(codesrc); $(\"output\").html = 'console>>' + '正在努力执行中...'; //发出post请求 $.post( \"/runcode.php\", { lang:lang,codesrc:codeEncoded }, (data)=>{ var outputs = data.output; var status1 = data.status1; var output = ''; //拼接输出结果 if(status1 !== 1){ for(var i in outputs) { output = output + outputs[i] + '&lt;br/>'; }data }else{ var outputs1 = data.output1; for(var i in outputs1) { output = output + outputs1[i] + '&lt;br/>'; } } $(\"output\").html = 'console>>' + output; }, \"json\"); }) }); 注： 由于代码中可能出现 + 或 &amp; 等符号，其在post的请求中经过urlencode会分别被解析为空格和参数连接符，需先将代码源码用js的encodeURIComponent()函数编码，传递到php后端后再用rawurldecode()函数进行解码操作。 0.3 php实现后端php的任务是在服务器上运行代码，核心的思想是将接收到的代码写入文件，使用各种环境去执行，并返回结果 其中用到了exec函数 具体参阅 【php】php使用exec总结 做的时候遇到了个问题：php在调用exec执行gcc命令时，会出现各种毛病，例如ld链接器找不到，后来发现原因是php不会使用系统设置的环境变量，在php文件开头添加这样一句话就能解决问题： putenv(PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin);//设置环境变量","categories":[{"name":"项目总结","slug":"项目总结","permalink":"https://www.codetool.top/categories/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"php","slug":"php","permalink":"https://www.codetool.top/tags/php/"},{"name":"CodeMirror","slug":"CodeMirror","permalink":"https://www.codetool.top/tags/CodeMirror/"}]}]}