{"meta":{"title":"代码段小站","subtitle":"CodeBand CodeTool - 个人计算机类练手小博客","description":"","author":"Rhett Peng","url":"https://www.codetool.top","root":"/"},"pages":[{"title":"关于","date":"2019-12-10T12:30:33.606Z","updated":"2019-12-10T12:30:33.606Z","comments":false,"path":"about/index.html","permalink":"https://www.codetool.top/about/index.html","excerpt":"","text":"@column-2{ GG,EZ 曾用logo } @column-2{ @card{ 神秘的站长现南昌大学软件学院大三学生，学习作风差，不务正业.喜欢折腾新奇的东西，学习黑科技正在由一只小菜鸡成为一只大菜鸡的转变的路上（其实我也不知道小菜鸡为啥要写博客，反正也没人看） } @card{ 关于小站代码段小站（CodeBand）创建于2018年8月19日，闲时在这里随便写点东西。可能是脑海里的一些闪光点，也可能是某一天的学习内容的记录，更多的是有关编程方面的、我觉得有意义记下来的一些知识。也希望这个网站能伴随我从编程新手小白成长为一个不算太小白的小白? } } @timeline{ 2019@item{ 12月10日在右下角放了只狗，背景加了点动画效果 } @item{ 11月8日抛弃wordpress，使用hexo重新搭建博客，完全搬至国内服务器 } @item{ 9月6日新服务器域名通过备案，使用国内服务器反向代理 } @item{ 8月19日更换wordpress主题 } 2018@item{ 8月19日使用wordpress搭建了第一版博客写下了我的第一篇博客《Java抽象类和接口的区别》 } }"},{"title":"","date":"2019-11-08T11:01:26.614Z","updated":"2019-11-08T11:01:26.614Z","comments":false,"path":"categories/index.html","permalink":"https://www.codetool.top/categories/index.html","excerpt":"","text":""},{"title":"","date":"2019-11-08T11:01:30.613Z","updated":"2019-11-08T11:01:30.613Z","comments":false,"path":"tags/index.html","permalink":"https://www.codetool.top/tags/index.html","excerpt":"","text":""},{"title":"在线写代码","date":"2019-11-08T14:16:45.000Z","updated":"2019-11-26T09:15:30.310Z","comments":true,"path":"runcode/index.html","permalink":"https://www.codetool.top/runcode/index.html","excerpt":"","text":""}],"posts":[{"title":"leetcode234-回文链表","slug":"leetcode234-回文链表","date":"2019-12-16T11:50:57.000Z","updated":"2019-12-16T12:56:59.440Z","comments":true,"path":"article/leetcode234-回文链表/","link":"","permalink":"https://www.codetool.top/article/leetcode234-%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/","excerpt":"","text":"原题请判断一个链表是否为回文链表。 示例1： 输入： 1-&gt;2输出： false 示例2： 输入： 1-&gt;2-&gt;2-&gt;1输出： true 进阶: 你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？ 解法思想双指针解法：一个快指针一个慢指针，快指针每次移两步，慢指针每次移一步，这样快指针的落点有两种情况： 落在最后一个节点上，此时链表节点为奇数个，慢指针落在中间节点上。 落在最后一个节点指向的null上，此时链表节点为偶数个，慢指针落在中间靠右第一个节点上。 慢指针将链表分成了两半，将前半部分反转，再与后半部分比较，即可获取结果 代码12345678910111213141516171819202122232425262728293031323334/** * Definition for singly-linked list. * public class ListNode &#123; * int val; * ListNode next; * ListNode(int x) &#123; val = x; &#125; * &#125; */ public boolean isPalindrome(ListNode head) &#123; if(head == null || head.next == null) &#123; return true; &#125; ListNode slow = head, fast = head; ListNode pre = head, prepre = null; while(fast != null &amp;&amp; fast.next != null) &#123; pre = slow; slow = slow.next; fast = fast.next.next; pre.next = prepre; prepre = pre; &#125; //链表节点个数为奇数 if(fast != null) &#123; slow = slow.next; &#125; while(pre != null &amp;&amp; slow != null) &#123; if(pre.val != slow.val) &#123; return false; &#125; pre = pre.next; slow = slow.next; &#125; return true; &#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"},{"name":"链表","slug":"链表","permalink":"https://www.codetool.top/tags/%E9%93%BE%E8%A1%A8/"}]},{"title":"leetcode328-移除链表元素","slug":"leetcode328-奇偶链表","date":"2019-12-16T10:17:12.000Z","updated":"2019-12-16T10:21:53.979Z","comments":true,"path":"article/leetcode328-奇偶链表/","link":"","permalink":"https://www.codetool.top/article/leetcode328-%E5%A5%87%E5%81%B6%E9%93%BE%E8%A1%A8/","excerpt":"","text":"原题给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。 请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。 示例1： 输入： 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL输出： 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL 示例2： 输入： 2-&gt;1-&gt;3-&gt;5-&gt;6-&gt;4-&gt;7-&gt;NULL输出： 2-&gt;3-&gt;6-&gt;7-&gt;1-&gt;5-&gt;4-&gt;NULL 说明: 应当保持奇数节点和偶数节点的相对顺序。 链表的第一个节点视为奇数节点，第二个节点视为偶数节点，以此类推。 解法思想1后面只连接奇数，2后面只连接偶数，最后合二为一。 代码1234567891011121314151617181920212223242526272829/** * Definition for singly-linked list. * public class ListNode &#123; * int val; * ListNode next; * ListNode(int x) &#123; val = x; &#125; * &#125; */class Solution &#123; public ListNode oddEvenList(ListNode head) &#123; if(head == null || head.next == null) return head; ListNode oddCur=head; ListNode evenCur=head.next; ListNode evenHead = head.next; ListNode cur=evenCur.next; while(cur!=null)&#123; oddCur.next = cur; oddCur = cur; if(cur.next!=null)&#123; evenCur.next = cur.next; evenCur = cur.next; cur = cur.next.next; &#125;else break; &#125; evenCur.next = null; oddCur.next = evenHead; return head; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"链表","slug":"链表","permalink":"https://www.codetool.top/tags/%E9%93%BE%E8%A1%A8/"}]},{"title":"leetcode203-移除链表元素","slug":"leetcode203-移除链表元素","date":"2019-12-16T08:08:29.000Z","updated":"2019-12-16T08:13:46.885Z","comments":true,"path":"article/leetcode203-移除链表元素/","link":"","permalink":"https://www.codetool.top/article/leetcode203-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/","excerpt":"","text":"原题删除链表中等于给定值 val 的所有节点。 示例： 输入： 1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, val = 6输出： 1-&gt;2-&gt;3-&gt;4-&gt;5 解法思想pre指针停留在val出现之前，cur指针越过val，让pre的next指向cur。为了处理出现头节点被删除的特殊情况，增加一个虚拟头节点。 代码1234567891011121314151617181920212223242526/** * Definition for singly-linked list. * public class ListNode &#123; * int val; * ListNode next; * ListNode(int x) &#123; val = x; &#125; * &#125; */class Solution &#123; public ListNode removeElements(ListNode head, int val) &#123; ListNode newHead = new ListNode(0); newHead.next = head; ListNode cur = head; ListNode pre = newHead; while(cur!=null)&#123; if(cur.val!=val)&#123; pre.next = cur; pre = cur; &#125; cur = cur.next; &#125; pre.next = cur; return newHead.next; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"},{"name":"链表","slug":"链表","permalink":"https://www.codetool.top/tags/%E9%93%BE%E8%A1%A8/"}]},{"title":"leetcode206-反转链表","slug":"leetcode206-反转链表","date":"2019-12-16T03:02:26.000Z","updated":"2019-12-16T04:09:49.393Z","comments":true,"path":"article/leetcode206-反转链表/","link":"","permalink":"https://www.codetool.top/article/leetcode206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/","excerpt":"","text":"原题反转一个单链表。 示例： 输入： 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL输出： 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL 进阶： 你可以迭代或递归地反转链表。你能否用两种方法解决这道题？ 解法思想 迭代（两种解法） 双指针 旋转前半部分cur其实就是head 递归 从最后一个节点开始回溯，将箭头倒置。 代码迭代： 双指针(作者：王尼玛) 123456789101112131415161718class Solution &#123; public ListNode reverseList(ListNode head) &#123; //申请节点，pre和 cur，pre指向null ListNode pre = null; ListNode cur = head; ListNode tmp = null; while(cur!=null) &#123; //记录当前节点的下一个节点 tmp = cur.next; //然后将当前节点指向pre cur.next = pre; //pre和cur节点都前进一位 pre = cur; cur = tmp; &#125; return pre; &#125;&#125; 旋转前半部分 12345678910111213141516171819202122232425/** * Definition for singly-linked list. * public class ListNode &#123; * int val; * ListNode next; * ListNode(int x) &#123; val = x; &#125; * &#125; */class Solution &#123; public ListNode reverseList(ListNode head) &#123; ListNode newHead = head; ListNode cur = head; if(head == null) return null; while(cur.next != null)&#123; //记录不动的节点 ListNode follow = cur.next.next; //前半部分连成环 cur.next.next = newHead; newHead = cur.next; //将cur连到后半部分上 cur.next = follow; &#125; return newHead; &#125;&#125; 递归： 123456789101112131415161718192021/** * Definition for singly-linked list. * public class ListNode &#123; * int val; * ListNode next; * ListNode(int x) &#123; val = x; &#125; * &#125; */class Solution &#123; public ListNode reverseList(ListNode head) &#123; //从最后一个节点回溯 if(head==null||head.next==null)&#123; return head; &#125; ListNode node = reverseList(head.next); //将head和head.next之间的箭头反转 head.next.next = head; head.next = null; return node; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"},{"name":"链表","slug":"链表","permalink":"https://www.codetool.top/tags/%E9%93%BE%E8%A1%A8/"}]},{"title":"leetcode19-删除链表的倒数第N个节点","slug":"leetcode19-删除链表的倒数第N个节点","date":"2019-12-15T14:30:54.000Z","updated":"2019-12-15T14:47:56.551Z","comments":true,"path":"article/leetcode19-删除链表的倒数第N个节点/","link":"","permalink":"https://www.codetool.top/article/leetcode19-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/","excerpt":"","text":"原题给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。 示例: 给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2.当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5. 说明: 给定的 n 保证是有效的。 进阶: 你能尝试使用一趟扫描实现吗？ 解法思想使用两个指针，让快指针一开始和慢指针保持n的距离，两者一起以同样速度移动，则当快指针指向链表的最后一个节点的时候，慢指针的下一个节点就是要删除的节点。 代码HashSet： 123456789101112131415161718192021222324252627/** * Definition for singly-linked list. * public class ListNode &#123; * int val; * ListNode next; * ListNode(int x) &#123; val = x; &#125; * &#125; */class Solution &#123; public ListNode removeNthFromEnd(ListNode head, int n) &#123; ListNode slow; ListNode fast; slow = fast = head; for(int i = 0;i&lt;n;i++)&#123; fast = fast.next; &#125; //这种情况需要删除头节点 if(fast == null) return head.next; while(fast.next!=null)&#123; fast = fast.next; slow = slow.next; &#125; slow.next = slow.next.next; return head; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"},{"name":"链表","slug":"链表","permalink":"https://www.codetool.top/tags/%E9%93%BE%E8%A1%A8/"}]},{"title":"leetcode160-相交链表","slug":"leetcode160-相交链表","date":"2019-12-14T13:31:39.000Z","updated":"2019-12-14T13:44:53.707Z","comments":true,"path":"article/leetcode160-相交链表/","link":"","permalink":"https://www.codetool.top/article/leetcode160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/","excerpt":"","text":"原题编写一个程序，找到两个单链表相交的起始节点。 如下面的两个链表： 在节点 c1 开始相交。 示例 1： 输入： intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3输出： Reference of the node with value = 8输入解释： 相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。 示例 2： 输入： intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1输出： Reference of the node with value = 2输入解释： 相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。 示例 3： 输入： intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2输出： null输入解释： 从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。解释：这两个链表不相交，因此返回 null。 注意： 如果两个链表没有交点，返回 null. 在返回结果后，两个链表仍须保持原有的结构。 可假定整个链表结构中没有循环。 程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。 解法思想 HashSet 依次将获取到的链表元素插入一个HashSet中，返回第一个重复的节点。 双指针 两个指针从头走到尾的路径长度之差就是两条路径相交点前的长度之差，获取了这个差之后就可以路径短的让路径长的先走几步，然后同时出发，在相交点相遇。 代码HashSet： 123456789101112131415161718192021222324252627282930/** * Definition for singly-linked list. * public class ListNode &#123; * int val; * ListNode next; * ListNode(int x) &#123; * val = x; * next = null; * &#125; * &#125; */public class Solution &#123; public ListNode getIntersectionNode(ListNode headA, ListNode headB) &#123; if(headA==null || headB==null) return null; Set&lt;ListNode&gt; set = new HashSet&lt;ListNode&gt;(); ListNode curA = headA; ListNode curB = headB; while(curA!=null)&#123; set.add(curA); curA = curA.next; &#125; while(curB!=null)&#123; if(set.contains(curB)) return curB; set.add(curB); curB = curB.next; &#125; return null; &#125;&#125; 双指针： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556/** * Definition for singly-linked list. * public class ListNode &#123; * int val; * ListNode next; * ListNode(int x) &#123; * val = x; * next = null; * &#125; * &#125; */public class Solution &#123; public ListNode getIntersectionNode(ListNode headA, ListNode headB) &#123; if(headA == null || headB == null) return null; if(headA == headB) return headA; ListNode curA = headA; ListNode curB = headB; int countA = 0; int countB = 0; //两个指针先一起走一遍 while(curA!=curB &amp;&amp; (curA.next!=null || curB.next!=null))&#123; if(curA.next!=null)&#123; curA = curA.next; countA++; &#125; if(curB.next!=null)&#123; curB = curB.next; countB++; &#125; &#125; if(curA != curB) return null; //获取两条路径的长度只差 int step; ListNode longer; ListNode near; if(countA&gt;=countB)&#123; step = countA-countB; longer = headA; near = headB; &#125;else&#123; step = countB-countA; longer = headB; near = headA; &#125; //近的让远的先走 while(longer != near)&#123; longer = longer.next; if(step==0) near = near.next; else step --; &#125; return longer; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"},{"name":"链表","slug":"链表","permalink":"https://www.codetool.top/tags/%E9%93%BE%E8%A1%A8/"}]},{"title":"leetcode142-环形链表II","slug":"leetcode142-环形链表II","date":"2019-12-14T11:36:23.000Z","updated":"2019-12-14T12:16:11.119Z","comments":true,"path":"article/leetcode142-环形链表II/","link":"","permalink":"https://www.codetool.top/article/leetcode142-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II/","excerpt":"","text":"原题给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。 说明： 不允许修改给定的链表。 示例1: 输入: head = [3,2,0,-4], pos = 1输出: tail connects to node index 1解释: 链表中有一个环，其尾部连接到第二个节点。 QRoFUg.png 示例2: 输入: head = [1,2], pos = 0输出: tail connects to node index 0解释: 链表中有一个环，其尾部连接到第一个节点。 示例3: 输入: head = [1], pos = -1输出: no cycle解释: 链表中没有环。 进阶： 你是否可以不用额外空间解决此题？ 解法思想 HashSet 依次将获取到的链表元素插入一个HashSet中，返回第一个重复的节点。 双指针 理论上慢指针和快指针在环中相遇的位置是有规律可循的： 设第一个节点入环的距离为x，环的长度为y，则快指针每次走两步，慢指针每次走一步，第一次相遇经过的次数为t,则有： (t-x)%y = (2t-x)%y 它等价于：(2t-x)-(t-x) = ny(n为自然数，代表第几次相遇) 也就可以得出t = ny 再通过第一次相遇的环上坐标为(t-x)%y，将t = y代入，得第一次相遇的环上坐标为y-x。 此时，相遇点和出发点距入环点的距离都是x。于是让快指针回到出发点，两指针都以速度为1继续行走，直到相遇就是入环点。 代码HashSet： 123456789101112131415161718192021222324/** * Definition for singly-linked list. * class ListNode &#123; * int val; * ListNode next; * ListNode(int x) &#123; * val = x; * next = null; * &#125; * &#125; */public class Solution &#123; public ListNode detectCycle(ListNode head) &#123; if(head == null) return null; Set&lt;ListNode&gt; set = new HashSet&lt;&gt;(); ListNode cur = head; while(cur.next!=null)&#123; if(set.contains(cur)) return cur; set.add(cur); cur = cur.next; &#125; return null; &#125;&#125; 双指针： 1234567891011121314151617181920212223242526272829303132/** * Definition for singly-linked list. * class ListNode &#123; * int val; * ListNode next; * ListNode(int x) &#123; * val = x; * next = null; * &#125; * &#125; */public class Solution &#123; public ListNode detectCycle(ListNode head)&#123; ListNode fast = head, slow = head; boolean flag = false; while (fast != null &amp;&amp; fast.next != null)&#123; fast = fast.next.next; slow = slow.next; if (fast == slow)&#123; flag = true; break; &#125; &#125; if (!flag) return null; fast = head; while (fast != slow)&#123; fast = fast.next; slow = slow.next; &#125; return fast; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"链表","slug":"链表","permalink":"https://www.codetool.top/tags/%E9%93%BE%E8%A1%A8/"}]},{"title":"leetcode141-环形链表","slug":"leetcode141-环形链表","date":"2019-12-14T11:14:40.000Z","updated":"2019-12-16T13:01:17.207Z","comments":true,"path":"article/leetcode141-环形链表/","link":"","permalink":"https://www.codetool.top/article/leetcode141-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/","excerpt":"","text":"原题给定一个链表，判断链表中是否有环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。 示例1: 输入: head = [3,2,0,-4], pos = 1输出: true解释: 链表中有一个环，其尾部连接到第二个节点。 示例2: 输入: head = [1,2], pos = 0输出: true解释: 链表中有一个环，其尾部连接到第一个节点。 示例3: 输入: head = [1], pos = -1输出: false解释: 链表中没有环。 进阶： 你能用 O(1)（即，常量）内存解决此问题吗？ 解法思想 HashSet 依次将获取到的链表元素插入一个HashSet中，看是否有相同元素。 双指针 一个快指针一个慢指针，如果有环快指针总会赶上慢指针。 代码HashSet： 123456789101112131415161718192021222324/** * Definition for singly-linked list. * class ListNode &#123; * int val; * ListNode next; * ListNode(int x) &#123; * val = x; * next = null; * &#125; * &#125; */public class Solution &#123; public boolean hasCycle(ListNode head) &#123; if(head == null) return false; Set&lt;ListNode&gt; set = new HashSet&lt;&gt;(); ListNode cur = head; while(cur.next!=null)&#123; if(set.contains(cur)) return true; set.add(cur); cur = cur.next; &#125; return false; &#125;&#125; 双指针： 1234567891011121314151617181920212223242526272829/** * Definition for singly-linked list. * class ListNode &#123; * int val; * ListNode next; * ListNode(int x) &#123; * val = x; * next = null; * &#125; * &#125; */public class Solution &#123; public boolean hasCycle(ListNode head) &#123; if(head == null)&#123; return false; &#125; ListNode slow = head; ListNode fast = head; while (slow!=null &amp;&amp; fast!=null &amp;&amp; fast.next!=null)&#123; slow = slow.next; fast = fast.next.next; if(slow == fast)&#123; return true; &#125; &#125; return false; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"},{"name":"链表","slug":"链表","permalink":"https://www.codetool.top/tags/%E9%93%BE%E8%A1%A8/"}]},{"title":"leetcode707-设计链表","slug":"leetcode707-设计链表","date":"2019-12-14T09:36:53.000Z","updated":"2019-12-14T09:55:11.047Z","comments":true,"path":"article/leetcode707-设计链表/","link":"","permalink":"https://www.codetool.top/article/leetcode707-%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/","excerpt":"","text":"原题设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val 和 next。val 是当前节点的值，next 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。 在链表类中实现这些功能： get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。 addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。 addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。 addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val 的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。 deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。 示例： MyLinkedList linkedList = new MyLinkedList();linkedList.addAtHead(1);linkedList.addAtTail(3);linkedList.addAtIndex(1,2); //链表变为1-&gt; 2-&gt; 3linkedList.get(1); //返回2linkedList.deleteAtIndex(1); //现在链表是1-&gt; 3linkedList.get(1); //返回3 提示: 所有val值都在 [1, 1000] 之内。 操作次数将在 [1, 1000] 之内。 请不要使用内置的 LinkedList 库。 解法思想链表的数据结构！！ 一般会有一个size和一个head，特别注意如果有tail涉及到可能更改tail的地方一定要注意更改tail。（我调试这个bug调试了一个下午😭） 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495class MyLinkedList &#123; private class Node&#123; public int val; public Node next; &#125; private int size; private Node head; private Node tail; /** Initialize your data structure here. */ public MyLinkedList() &#123; size = 0; head = tail = null; &#125; /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */ public int get(int index) &#123; if(index&gt;=size || index&lt;0) return -1; Node cur = head; for(int i = 0;i&lt;index;i++) cur = cur.next; return cur.val; &#125; /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */ public void addAtHead(int val) &#123; Node newHead = new Node(); newHead.val = val; newHead.next = head; if(size==0) tail = newHead; head = newHead; size++; &#125; /** Append a node of value val to the last element of the linked list. */ public void addAtTail(int val) &#123; Node newTail = new Node(); newTail.val = val; newTail.next = null; if(size==0) head = newTail; else tail.next = newTail; tail = newTail; size++; &#125; /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */ public void addAtIndex(int index, int val) &#123; if(index&gt;size) return; if(index &lt;= 0) &#123; addAtHead(val); return; &#125; if(index == size)&#123; addAtTail(val); return; &#125; Node node = new Node(); node.val = val; Node cur = head; for(int i = 0;i&lt;index-1;i++) cur = cur.next; node.next = cur.next; cur.next = node; size++; &#125; /** Delete the index-th node in the linked list, if the index is valid. */ public void deleteAtIndex(int index) &#123; if(index&gt;=size || index &lt;0) return; size--; if(index == 0) &#123; head = head.next; return; &#125; Node cur = head; for(int i = 0;i&lt;index-1;i++) cur = cur.next; cur.next = cur.next.next; //这个地方！！！ 考虑到可能会把tail删除！！！ if(index == size)&#123; tail = cur; &#125; &#125;&#125;/** * Your MyLinkedList object will be instantiated and called as such: * MyLinkedList obj = new MyLinkedList(); * int param_1 = obj.get(index); * obj.addAtHead(val); * obj.addAtTail(val); * obj.addAtIndex(index,val); * obj.deleteAtIndex(index); */","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"链表","slug":"链表","permalink":"https://www.codetool.top/tags/%E9%93%BE%E8%A1%A8/"}]},{"title":"leetcode841-钥匙和房间","slug":"leetcode841-钥匙和房间","date":"2019-12-13T12:29:01.000Z","updated":"2019-12-13T12:37:17.600Z","comments":true,"path":"article/leetcode841-钥匙和房间/","link":"","permalink":"https://www.codetool.top/article/leetcode841-%E9%92%A5%E5%8C%99%E5%92%8C%E6%88%BF%E9%97%B4/","excerpt":"","text":"原题有 N 个房间，开始时你位于 0 号房间。每个房间有不同的号码：0，1，2，...，N-1，并且房间里可能有一些钥匙能使你进入下一个房间。 在形式上，对于每个房间 i 都有一个钥匙列表 rooms[i]，每个钥匙 rooms[i][j] 由 [0,1，...，N-1] 中的一个整数表示，其中 N = rooms.length。 钥匙 rooms[i][j] = v 可以打开编号为 v 的房间。 最初，除 0 号房间外的其余所有房间都被锁住。 你可以自由地在房间之间来回走动。 如果能进入每个房间返回 true，否则返回 false。 示例 1: 输入: [[1],[2],[3],[]]输出： true解释：我们从 0 号房间开始，拿到钥匙 1。之后我们去 1 号房间，拿到钥匙 2。然后我们去 2 号房间，拿到钥匙 3。最后我们去了 3 号房间。由于我们能够进入每个房间，我们返回 true。 示例 2: 输入: [[1,3],[3,0,1],[2],[0]]输出： false解释： 我们不能进入 2 号房间。 提示： 1 &lt;= rooms.length &lt;= 1000 0 &lt;= rooms[i].length &lt;= 1000 所有房间中的钥匙数量总计不超过 3000。 解法思想BFS搜索，记录去过哪些房间。 对应示例2 代码12345678910111213141516171819202122class Solution &#123; public boolean canVisitAllRooms(List&lt;List&lt;Integer&gt;&gt; rooms) &#123; int size = rooms.size(); int[] mark = new int[size]; mark[0] = 1; Queue&lt;List&lt;Integer&gt;&gt; queue = new LinkedList&lt;&gt;(); queue.offer(rooms.get(0)); while(!queue.isEmpty())&#123; List&lt;Integer&gt; room = queue.poll(); for(int i:room)&#123; if(mark[i]==0)&#123; queue.offer(rooms.get(i)); mark[i] = 1; &#125; &#125; &#125; for(int i:mark)&#123; if(i==0) return false; &#125; return true; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"BFS","slug":"BFS","permalink":"https://www.codetool.top/tags/BFS/"}]},{"title":"leetcode542-01矩阵","slug":"leetcode542-01矩阵","date":"2019-12-13T11:40:58.000Z","updated":"2019-12-13T12:06:27.457Z","comments":true,"path":"article/leetcode542-01矩阵/","link":"","permalink":"https://www.codetool.top/article/leetcode542-01%E7%9F%A9%E9%98%B5/","excerpt":"","text":"原题给定一个由 0 和 1 组成的矩阵，找出每个元素到最近的 0 的距离。 两个相邻元素间的距离为 1 。 示例1: 输入: 0 0 00 1 00 0 0 输出: 0 0 00 1 00 0 0 示例2: 输入: 0 0 00 1 01 1 1 输出: 0 0 00 1 01 2 1 注意: 给定矩阵的元素个数不超过 10000。 给定矩阵中至少有一个元素是 0。 矩阵中的元素只在四个方向上相邻: 上、下、左、右。 解法思想 BFS：先将所有0标记出，然后紧挨0未被标记出的就是1，标记所有1，紧挨1未被标记出的就是2…… BFS 动态规划：依次遍历每个元素，如果四周有0就是1，如果没有也不是0就根据所有相邻元素对应的值中的最小值+1获得。 代码BFS： 12345678910111213141516171819202122232425262728293031323334353637class Solution &#123; class Point&#123; public int x; public int y; public Point(int x,int y)&#123; this.x = x; this.y = y; &#125; &#125; public int[][] floodFill(int[][] image, int sr, int sc, int newColor) &#123; Queue&lt;Point&gt; queue = new LinkedList&lt;&gt;(); queue.offer(new Point(sr,sc)); int origin = image[sr][sc]; int height = image.length; int width = image[0].length; if(newColor == origin) return image; while(!queue.isEmpty())&#123; Point point = queue.poll(); image[point.x][point.y] = newColor; if(point.x!=height-1 &amp;&amp; image[point.x+1][point.y] == origin)&#123; queue.offer(new Point(point.x+1,point.y)); &#125; if(point.x!=0 &amp;&amp; image[point.x-1][point.y] == origin)&#123; queue.offer(new Point(point.x-1,point.y)); &#125; if(point.y!=width-1 &amp;&amp; image[point.x][point.y+1] == origin)&#123; queue.offer(new Point(point.x,point.y+1)); &#125; if(point.y!= 0&amp;&amp; image[point.x][point.y-1] == origin)&#123; queue.offer(new Point(point.x,point.y-1)); &#125; &#125; return image; &#125;&#125; 1234567891011121314151617181920212223242526272829303132333435363738class Solution &#123; public int[][] updateMatrix(int[][] matrix) &#123; int m = matrix.length ; int n = matrix[0].length; int[][] dp = new int[m][n]; for(int i = 0;i &lt; m; i++)&#123; for(int j = 0; j &lt; n; j++)&#123; dp[i][j] = dfs(matrix, dp, i, j); &#125; &#125; return dp; &#125; public static int dfs(int[][] matrix,int[][] dp, int i, int j)&#123; int m = matrix.length ; int n = matrix[0].length; if(i&lt;0 || i&gt;m-1 || j &lt; 0 || j &gt; n-1) return 9999; // 如果自身是0 if(matrix[i][j] == 0) return 0; // 如果四周有0 if(i &gt; 0 &amp;&amp; matrix[i-1][j] == 0) return 1; if(j &lt; n-1 &amp;&amp; matrix[i][j+1] == 0) return 1; if(i &lt; m-1 &amp;&amp; matrix[i+1][j] == 0) return 1; if(j&gt;0 &amp;&amp; matrix[i][j-1] == 0) return 1; // 如果四周没有0根据四周的dp最小值+1获取 int left,bottom,right,top; left=top=9999; if(i &gt; 0 &amp;&amp; dp[i-1][j] != 0)&#123; top = dp[i-1][j]; &#125; if(j&gt; 0 &amp;&amp; dp[i][j-1] != 0)&#123; left = dp[i][j-1]; &#125; bottom = dfs(matrix, dp,i+1, j); right = dfs(matrix, dp,i,j+1); return Math.min(Math.min(left, right), Math.min(top,bottom))+1; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"图","slug":"图","permalink":"https://www.codetool.top/tags/%E5%9B%BE/"}]},{"title":"leetcode733-图像渲染","slug":"leetcode733-图像渲染","date":"2019-12-13T10:32:56.000Z","updated":"2019-12-13T12:37:17.614Z","comments":true,"path":"article/leetcode733-图像渲染/","link":"","permalink":"https://www.codetool.top/article/leetcode733-%E5%9B%BE%E5%83%8F%E6%B8%B2%E6%9F%93/","excerpt":"","text":"原题有一幅以二维整数数组表示的图画，每一个整数表示该图画的像素值大小，数值在 0 到 65535 之间。 给你一个坐标 (sr, sc) 表示图像渲染开始的像素值（行 ，列）和一个新的颜色值 newColor，让你重新上色这幅图像。 为了完成上色工作，从初始坐标开始，记录初始坐标的上下左右四个方向上像素值与初始坐标相同的相连像素点，接着再记录这四个方向上符合条件的像素点与他们对应四个方向上像素值与初始坐标相同的相连像素点，……，重复该过程。将所有有记录的像素点的颜色值改为新的颜色值。 最后返回经过上色渲染后的图像。 示例1: 输入:image = [[1,1,1],[1,1,0],[1,0,1]]sr = 1, sc = 1, newColor = 2输出: [[2,2,2],[2,2,0],[2,0,1]]解析:在图像的正中间，(坐标(sr,sc)=(1,1)),在路径上所有符合条件的像素点的颜色都被更改成2。注意，右下角的像素没有更改为2，因为它不是在上下左右四个方向上与初始点相连的像素点。 注意: image 和 image[0] 的长度在范围 [1, 50] 内。 给出的初始点将满足 0 &lt;= sr &lt; image.length 和 0 &lt;= sc &lt; image[0].length。 image[i][j] 和 newColor 表示的颜色值在范围 [0, 65535]内。 解法思想图的BFS 对应示例 代码12345678910111213141516171819202122232425262728293031323334353637class Solution &#123; class Point&#123; public int x; public int y; public Point(int x,int y)&#123; this.x = x; this.y = y; &#125; &#125; public int[][] floodFill(int[][] image, int sr, int sc, int newColor) &#123; Queue&lt;Point&gt; queue = new LinkedList&lt;&gt;(); queue.offer(new Point(sr,sc)); int origin = image[sr][sc]; int height = image.length; int width = image[0].length; if(newColor == origin) return image; while(!queue.isEmpty())&#123; Point point = queue.poll(); image[point.x][point.y] = newColor; if(point.x!=height-1 &amp;&amp; image[point.x+1][point.y] == origin)&#123; queue.offer(new Point(point.x+1,point.y)); &#125; if(point.x!=0 &amp;&amp; image[point.x-1][point.y] == origin)&#123; queue.offer(new Point(point.x-1,point.y)); &#125; if(point.y!=width-1 &amp;&amp; image[point.x][point.y+1] == origin)&#123; queue.offer(new Point(point.x,point.y+1)); &#125; if(point.y!= 0&amp;&amp; image[point.x][point.y-1] == origin)&#123; queue.offer(new Point(point.x,point.y-1)); &#125; &#125; return image; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"BFS","slug":"BFS","permalink":"https://www.codetool.top/tags/BFS/"}]},{"title":"leetcode394-字符串解码","slug":"leetcode394-字符串解码","date":"2019-12-13T08:01:55.000Z","updated":"2019-12-13T10:33:26.512Z","comments":true,"path":"article/leetcode394-字符串解码/","link":"","permalink":"https://www.codetool.top/article/leetcode394-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E7%A0%81/","excerpt":"","text":"原题给定一个经过编码的字符串，返回它解码后的字符串。 编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。 你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。 此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。 示例: s = “3[a]2[bc]”, 返回 “aaabcbc”.s = “3[a2[c]]”, 返回 “accaccacc”.s = “2[abc]3[cd]ef”, 返回 “abcabccdcdcdef”. 解法思想DFS，只处理字符串中不包含括号的，遇到带括号的将其分解。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152class Solution &#123; public String decodeString(String s) &#123; return multify(1,s); &#125; public String multify(int repeat,String s)&#123; StringBuilder sb = new StringBuilder(); //字符串中不带括号 if(s.indexOf('[') == -1)&#123; for(int i = 0;i&lt;repeat;i++)&#123; sb.append(s); &#125; return sb.toString(); &#125;else&#123; //未匹配括号的个数 int count = 0; //第一个数字出现的index int firstNumberIndex = 0; //第一个左括号出现的index int firstLeftIndex = 0; boolean firstNumberHasShown = false; for(int i = 0;i&lt;s.length();i++)&#123; //如果是数字记录第一个数字出现的index if(s.charAt(i)&gt;='0'&amp;&amp;s.charAt(i)&lt;='9')&#123; if(firstNumberHasShown == false)&#123; firstNumberIndex = i; firstNumberHasShown = true; &#125; &#125; //如果是左括号记录第一个左括号出现的index else if(s.charAt(i) == '[')&#123; if(count == 0) firstLeftIndex = i; count ++; &#125; //如果是右括号则未匹配的左括号数量减一，如果全部匹配完则把repeat和substring递归处理。 else if(s.charAt(i) == ']')&#123; count --; if(count == 0) &#123; firstNumberHasShown = false; int repeatNum = Integer.valueOf(s.substring(firstNumberIndex,firstLeftIndex)); String subString = s.substring(firstLeftIndex+1,i); sb.append(multify(repeatNum,subString)); &#125; &#125; else if(count==0)&#123; sb.append(s.charAt(i)); &#125; &#125; &#125; return multify(repeat,sb.toString()); &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode225--用队列实现栈","slug":"leetcode225-用队列实现栈","date":"2019-12-13T04:58:54.000Z","updated":"2019-12-13T05:01:47.755Z","comments":true,"path":"article/leetcode225-用队列实现栈/","link":"","permalink":"https://www.codetool.top/article/leetcode225-%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/","excerpt":"","text":"原题使用队列实现栈的下列操作： push(x) – 元素 x 入栈 pop() – 移除栈顶元素 top() – 获取栈顶元素 empty() – 返回栈是否为空 注意: 你只能使用队列的基本操作– 也就是 push to back, peek/pop from front, size, 和 is empty 这些操作是合法的。 你所使用的语言也许不支持队列。 你可以使用 list 或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。 你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。 解法思想用一个队列进行插入操作，要得到队列的最后一个插入的元素可以将其他的元素先插入第二个队列，得到最后一个元素之后再把元素插入回来。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253class MyStack &#123; Queue&lt;Integer&gt; queue; Queue&lt;Integer&gt; buffer; /** Initialize your data structure here. */ public MyStack() &#123; queue = new LinkedList&lt;&gt;(); buffer = new LinkedList&lt;&gt;(); &#125; /** Push element x onto stack. */ public void push(int x) &#123; queue.offer(x); &#125; /** Removes the element on top of the stack and returns that element. */ public int pop() &#123; while(queue.size()!=1)&#123; buffer.offer(queue.poll()); &#125; int result = queue.poll(); while(!buffer.isEmpty())&#123; queue.offer(buffer.poll()); &#125; return result; &#125; /** Get the top element. */ public int top() &#123; while(queue.size()!=1)&#123; buffer.offer(queue.poll()); &#125; int result = queue.poll(); buffer.offer(result); while(!buffer.isEmpty())&#123; queue.offer(buffer.poll()); &#125; return result; &#125; /** Returns whether the stack is empty. */ public boolean empty() &#123; return queue.isEmpty(); &#125;&#125;/** * Your MyStack object will be instantiated and called as such: * MyStack obj = new MyStack(); * obj.push(x); * int param_2 = obj.pop(); * int param_3 = obj.top(); * boolean param_4 = obj.empty(); */","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"队列","slug":"队列","permalink":"https://www.codetool.top/tags/%E9%98%9F%E5%88%97/"},{"name":"栈","slug":"栈","permalink":"https://www.codetool.top/tags/%E6%A0%88/"}]},{"title":"leetcode232-用栈实现队列","slug":"leetcode232-用栈实现队列","date":"2019-12-13T04:41:48.000Z","updated":"2019-12-13T04:49:43.735Z","comments":true,"path":"article/leetcode232-用栈实现队列/","link":"","permalink":"https://www.codetool.top/article/leetcode232-%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/","excerpt":"","text":"原题使用栈实现队列的下列操作： push(x) – 将一个元素放入队列的尾部。 pop() – 从队列首部移除元素。 peek() – 返回队列首部的元素。 empty() – 返回队列是否为空。 示例: MyQueue queue = new MyQueue();queue.push(1);queue.push(2);queue.peek(); // 返回 1queue.pop(); // 返回 1queue.empty(); // 返回 false 说明: 你只能使用标准的栈操作 – 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。 你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。 假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。 解法思想用一个栈进行插入操作，要得到栈的第一个插入的元素需要再用一个栈将第一个栈中的元素次序翻转过来，得到第一个元素，再依次压栈回去。 代码12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152class MyQueue &#123; public Stack&lt;Integer&gt; stack; public Stack&lt;Integer&gt; reverse; /** Initialize your data structure here. */ public MyQueue() &#123; stack = new Stack&lt;&gt;(); reverse = new Stack&lt;&gt;(); &#125; /** Push element x to the back of queue. */ public void push(int x) &#123; stack.push(x); &#125; /** Removes the element from in front of queue and returns that element. */ public int pop() &#123; while(!stack.empty())&#123; reverse.push(stack.pop()); &#125; int result = reverse.pop(); while(!reverse.empty())&#123; stack.push(reverse.pop()); &#125; return result; &#125; /** Get the front element. */ public int peek() &#123; while(!stack.empty())&#123; reverse.push(stack.pop()); &#125; int result = reverse.peek(); while(!reverse.empty())&#123; stack.push(reverse.pop()); &#125; return result; &#125; /** Returns whether the queue is empty. */ public boolean empty() &#123; return stack.empty(); &#125;&#125;/** * Your MyQueue object will be instantiated and called as such: * MyQueue obj = new MyQueue(); * obj.push(x); * int param_2 = obj.pop(); * int param_3 = obj.peek(); * boolean param_4 = obj.empty(); */","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"队列","slug":"队列","permalink":"https://www.codetool.top/tags/%E9%98%9F%E5%88%97/"},{"name":"栈","slug":"栈","permalink":"https://www.codetool.top/tags/%E6%A0%88/"}]},{"title":"leetcode94-二叉树的中序遍历","slug":"leetcode94-二叉树的中序遍历","date":"2019-12-12T12:35:53.000Z","updated":"2019-12-13T04:43:46.647Z","comments":true,"path":"article/leetcode94-二叉树的中序遍历/","link":"","permalink":"https://www.codetool.top/article/leetcode94-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/","excerpt":"","text":"原题给定一个二叉树，返回它的 中序 遍历。 示例: 输入: [1,null,2,3]&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;3输出: [1,3,2] 进阶: 递归算法很简单，你可以通过迭代算法完成吗？ 解法思想DFS，递归方法着实很简单，迭代很抽象。 代码递归： 1234567891011121314151617181920/** * Definition for a binary tree node. * public class TreeNode &#123; * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) &#123; val = x; &#125; * &#125; */class Solution &#123; List&lt;Integer&gt; ans = new ArrayList&lt;&gt;(); public List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123; if(root!=null)&#123; inorderTraversal(root.left); ans.add(root.val); inorderTraversal(root.right); &#125; return ans; &#125;&#125; 迭代，我一开始这么写的，用一个HashSet记录栈存储过的节点： 123456789101112131415161718192021222324class Solution &#123; public List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123; Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); List&lt;Integer&gt; ans = new ArrayList&lt;&gt;(); Set&lt;TreeNode&gt; set = new HashSet&lt;&gt;(); stack.push(root); if(root == null) return ans; while(!stack.empty())&#123; TreeNode node = stack.peek(); if(null!=node.left &amp;&amp; !set.contains(node.left)) &#123; stack.push(node.left); set.add(node.left); &#125; else&#123; ans.add(node.val); stack.pop(); if(null!=node.right) stack.push(node.right); node = null; &#125; &#125; return ans; &#125;&#125; 然后看到官方的写法，这才是递归转化过来的写法： 1234567891011121314151617class Solution &#123; public List&lt;Integer&gt; inorderTraversal(TreeNode root) &#123; List&lt;Integer&gt; res = new ArrayList&lt;&gt;(); Stack&lt;TreeNode&gt; stack = new Stack&lt;&gt;(); TreeNode curr = root; while (curr != null || !stack.isEmpty()) &#123; while (curr != null) &#123; stack.push(curr); curr = curr.left; &#125; curr = stack.pop(); res.add(curr.val); curr = curr.right; &#125; return res; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"},{"name":"树","slug":"树","permalink":"https://www.codetool.top/tags/%E6%A0%91/"}]},{"title":"leetcode494-目标和","slug":"leetcode494-目标和","date":"2019-12-12T11:01:45.000Z","updated":"2019-12-12T11:05:23.533Z","comments":true,"path":"article/leetcode494-目标和/","link":"","permalink":"https://www.codetool.top/article/leetcode494-%E7%9B%AE%E6%A0%87%E5%92%8C/","excerpt":"","text":"原题给定一个非负整数数组，a1, a2, …, an, 和一个目标数，S。现在你有两个符号 + 和 -。对于数组中的任意一个整数，你都可以从 + 或 -中选择一个符号添加在前面。 返回可以使最终数组和为目标数 S 的所有添加符号的方法数。 示例 1: 输入: nums: [1, 1, 1, 1, 1], S: 3输出: 5解释:-1+1+1+1+1 = 3+1-1+1+1+1 = 3+1+1-1+1+1 = 3+1+1+1-1+1 = 3+1+1+1+1-1 = 3一共有5种方法让最终目标和为3。 注意: 数组非空，且长度不会超过20。 初始的数组的和不会超过1000。 保证返回的最终结果能被32位整数存下。 解法思想DFS比较暴力，追求时间快可以用01背包问题的动态规划思想，以后更。 代码12345678910111213141516class Solution &#123; public int[] numsArray; public int target; public int findTargetSumWays(int[] nums, int S) &#123; numsArray = nums; target = S; return dfs(0,0); &#125; public int dfs(int index,int sum)&#123; if(index == numsArray.length)&#123; if(sum == target) return 1; else return 0; &#125; return dfs(index+1,sum+numsArray[index])+dfs(index+1,sum-numsArray[index]); &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"}]},{"title":"leetcode133-克隆图","slug":"leetcode133-克隆图","date":"2019-12-12T07:42:25.000Z","updated":"2019-12-12T07:57:24.431Z","comments":true,"path":"article/leetcode133-克隆图/","link":"","permalink":"https://www.codetool.top/article/leetcode133-%E5%85%8B%E9%9A%86%E5%9B%BE/","excerpt":"","text":"原题给定无向连通图中一个节点的引用，返回该图的深拷贝（克隆）。图中的每个节点都包含它的值 val（Int） 和其邻居的列表（list[Node]）。 示例: 输入: {&quot;$id&quot;:&quot;1&quot;,&quot;neighbors&quot;:[{&quot;$id&quot;:&quot;2&quot;,&quot;neighbors&quot;:[{&quot;$ref&quot;:&quot;1&quot;},{&quot;$id&quot;:&quot;3&quot;,&quot;neighbors&quot;:[{&quot;$ref&quot;:&quot;2&quot;},{&quot;$id&quot;:&quot;4&quot;,&quot;neighbors&quot;:[{&quot;$ref&quot;:&quot;3&quot;},{&quot;$ref&quot;:&quot;1&quot;}],&quot;val&quot;:4}],&quot;val&quot;:3}],&quot;val&quot;:2},{&quot;$ref&quot;:&quot;4&quot;}],&quot;val&quot;:1}解释:节点 1 的值是 1，它有两个邻居：节点 2 和 4 。节点 2 的值是 2，它有两个邻居：节点 1 和 3 。节点 3 的值是 3，它有两个邻居：节点 2 和 4 。节点 4 的值是 4，它有两个邻居：节点 1 和 3 。 解法思想Hashmap维持原图节点和克隆节点的对应关系，如果给邻居节点赋值的时候不存在对应的克隆节点则获取对应的克隆节点，直到有一个节点的邻居节点的克隆节点都存在于map中。 代码1234567891011121314151617181920212223242526272829303132333435/*// Definition for a Node.class Node &#123; public int val; public List&lt;Node&gt; neighbors; public Node() &#123;&#125; public Node(int _val,List&lt;Node&gt; _neighbors) &#123; val = _val; neighbors = _neighbors; &#125;&#125;;*/class Solution &#123; //hashmap维持原图和克隆图之间节点的对应关系 Map&lt;Node, Node&gt; lookup; public Node cloneGraph(Node node) &#123; lookup = new HashMap&lt;&gt;(); return dfs(node); &#125; private Node dfs(Node node) &#123; if (node == null) return null; //存在对应的克隆节点直接返回 if (lookup.containsKey(node)) return lookup.get(node); //先创建对应的克隆节点，邻居列表在递归返回的时候添加。 Node clone = new Node(node.val, new ArrayList&lt;&gt;()); lookup.put(node, clone); for (Node n : node.neighbors) //如果map中存在克隆节点就能添加了 clone.neighbors.add(dfs(n)); return clone; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"},{"name":"图","slug":"图","permalink":"https://www.codetool.top/tags/%E5%9B%BE/"}]},{"title":"leetcode150-逆波兰表达式求值","slug":"leetcode150-逆波兰表达式求值","date":"2019-12-12T06:08:04.000Z","updated":"2019-12-12T06:24:01.564Z","comments":true,"path":"article/leetcode150-逆波兰表达式求值/","link":"","permalink":"https://www.codetool.top/article/leetcode150-%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/","excerpt":"","text":"原题根据逆波兰表示法，求表达式的值。 有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。 说明： 整数除法只保留整数部分。 给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。 示例1: 输入: [“2”, “1”, “+”, “3”, “*”]输出: 9解释: ((2 + 1) * 3) = 9 示例2: 输入: [“4”, “13”, “5”, “/“, “+”]输出: 6解释: (4 + (13 / 5)) = 6 示例3: 输入: [“10”, “6”, “9”, “3”, “+”, “-11”, “*”, “/“, “*”, “17”, “+”, “5”, “+”]输出: 22解释:&nbsp;&nbsp;((10 * (6 / ((9 + 3) * -11))) + 17) + 5=&nbsp;((10 * (6 / (12 * -11))) + 17) + 5=&nbsp;((10 * (6 / -132)) + 17) + 5=&nbsp;((10 * 0) + 17) + 5=&nbsp;(0 + 17) + 5=&nbsp;17 + 5=&nbsp;22 解法思想最底层必是一个能运算的最小单元，只要将后序遍历的结果依次入栈，遇到一个运算符则让两个数字出栈，计算结果之后再将结果入栈，如此循环最后就能得到答案。 逆波兰表达式 代码123456789101112131415161718192021222324252627class Solution &#123; public int evalRPN(String[] tokens) &#123; Stack&lt;Integer&gt; stack = new Stack&lt;&gt;(); for(String i:tokens)&#123; if(i.equals(\"+\"))&#123; int num1 = Integer.valueOf(stack.pop()); int num2 = Integer.valueOf(stack.pop()); stack.push(num1+num2); &#125;else if(i.equals(\"-\"))&#123; int num1 = Integer.valueOf(stack.pop()); int num2 = Integer.valueOf(stack.pop()); stack.push(num2-num1); &#125;else if(i.equals(\"*\"))&#123; int num1 = Integer.valueOf(stack.pop()); int num2 = Integer.valueOf(stack.pop()); stack.push(num1*num2); &#125;else if(i.equals(\"/\"))&#123; int num1 = Integer.valueOf(stack.pop()); int num2 = Integer.valueOf(stack.pop()); stack.push(num2/num1); &#125;else&#123; stack.push(Integer.valueOf(i)); &#125; &#125; return stack.peek(); &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"栈","slug":"栈","permalink":"https://www.codetool.top/tags/%E6%A0%88/"}]},{"title":"leetcode739-每日温度","slug":"leetcode739-每日温度","date":"2019-12-11T09:00:18.000Z","updated":"2019-12-11T09:19:59.099Z","comments":true,"path":"article/leetcode739-每日温度/","link":"","permalink":"https://www.codetool.top/article/leetcode739-%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/","excerpt":"","text":"原题根据每日 气温 列表，请重新生成一个列表，对应位置的输入是你需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用 0 来代替。 例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。 提示： 气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。 解法思想 基础栈解法：时间复杂度O(nlog n) 将数组元素依次入栈，如果当前元素比栈首元素大则将栈首元素出栈，并知道了和栈首元素之间的距离。再次和下一个栈首元素比较，如此循环。 逆序跳跃：时间复杂度O(n) https://leetcode-cn.com/problems/daily-temperatures/solution/jie-ti-si-lu-by-pulsaryu/ 代码 基础栈 12345678910111213141516171819202122232425262728class Node&#123; public int value; public int pos; public Node(int value,int pos)&#123; this.value = value; this.pos = pos; &#125;&#125;class Solution &#123; public int[] dailyTemperatures(int[] T) &#123; Stack&lt;Node&gt; stack = new Stack&lt;&gt;(); int[] ans = new int[T.length]; for(int i = 0;i&lt;T.length;i++)&#123; while(!stack.empty()&amp;&amp;T[i]&gt;stack.peek().value)&#123; Node node = stack.pop(); ans[node.pos] = i - node.pos; &#125; stack.push(new Node(T[i],i)); &#125; while(!stack.empty())&#123; Node node = stack.pop(); ans[node.pos] = 0; &#125; return ans; &#125;&#125; 逆序跳跃（作者：pulsaryu） 1234567891011121314151617181920public int[] dailyTemperatures(int[] T) &#123; int length = T.length; int[] result = new int[length]; //从右向左遍历 for (int i = length - 2; i &gt;= 0; i--) &#123; // j+= result[j]是利用已经有的结果进行跳跃 for (int j = i + 1; j &lt; length; j+= result[j]) &#123; if (T[j] &gt; T[i]) &#123; result[i] = j - i; break; &#125; else if (result[j] == 0) &#123; //遇到0表示后面不会有更大的值，那当然当前值就应该也为0 result[i] = 0; break; &#125; &#125; &#125; return result;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"栈","slug":"栈","permalink":"https://www.codetool.top/tags/%E6%A0%88/"}]},{"title":"leetcode20-有效的括号","slug":"leetcode20-有效的括号","date":"2019-12-11T08:51:26.000Z","updated":"2019-12-11T08:56:38.615Z","comments":true,"path":"article/leetcode20-有效的括号/","link":"","permalink":"https://www.codetool.top/article/leetcode20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/","excerpt":"","text":"原题给定一个只包括 &#39;(&#39;，&#39;)&#39;，&#39;{&#39;，&#39;}&#39;，&#39;[&#39;，&#39;]&#39; 的字符串，判断字符串是否有效。 有效字符串需满足： 左括号必须用相同类型的右括号闭合。 左括号必须以正确的顺序闭合。 注意空字符串可被认为是有效字符串。 示例1: 输入: “()”输出: true 示例2: 输入: “()[]{}”输出: true 示例3: 输入: “(]”输出: false 示例4: 输入: “([)]”输出: false 示例5: 输入: “{[]}”输出: true 解法思想左括号全部入栈，如果是右括号寻找栈首是否为对应的左括号，存在就将左括号出栈，直到栈元素全部清空。 代码12345678910111213141516171819202122232425class Solution &#123; public boolean isValid(String s) &#123; if(s.equals(\"\")) return true; Stack&lt;Character&gt; stack = new Stack&lt;&gt;(); for(char c:s.toCharArray())&#123; if(c=='('||c=='['||c=='&#123;')&#123; stack.push(c); &#125; if(c == ')')&#123; if(!stack.empty()&amp;&amp;stack.peek().equals('(')) stack.pop(); else return false; &#125; if(c == ']')&#123; if(!stack.empty()&amp;&amp;stack.peek().equals('[')) stack.pop(); else return false; &#125; if(c == '&#125;')&#123; if(!stack.empty()&amp;&amp;stack.peek().equals('&#123;')) stack.pop(); else return false; &#125; &#125; if(stack.empty()) return true; return false; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"栈","slug":"栈","permalink":"https://www.codetool.top/tags/%E6%A0%88/"}]},{"title":"leetcode155-最小栈","slug":"leetcode155-最小栈","date":"2019-12-11T08:42:41.000Z","updated":"2019-12-12T07:43:10.144Z","comments":true,"path":"article/leetcode155-最小栈/","link":"","permalink":"https://www.codetool.top/article/leetcode155-%E6%9C%80%E5%B0%8F%E6%A0%88/","excerpt":"","text":"原题设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。 push(x) – 将元素 x 推入栈中。 pop() – 删除栈顶的元素。 top() – 获取栈顶元素。 getMin() – 检索栈中的最小元素。 示例: MinStack minStack = new MinStack();minStack.push(-2);minStack.push(0);minStack.push(-3);minStack.getMin(); –&gt; 返回 -3.minStack.pop();minStack.top(); –&gt; 返回 0.minStack.getMin(); –&gt; 返回 -2. 解法思想用list实现栈，再用一个stack保存着入栈期间出现过的所有最小数。（栈首元素表示在某个时刻list中最小的数）。 代码1234567891011121314151617181920212223242526272829303132class MinStack &#123; public List&lt;Integer&gt; list; public Stack&lt;Integer&gt; stack; /** initialize your data structure here. */ public MinStack() &#123; list = new ArrayList&lt;&gt;(); stack = new Stack&lt;&gt;(); &#125; public void push(int x) &#123; //添加元素时，如果最小数栈是空的或者该元素比栈首元素要小，则入栈 if(stack.empty()||x&lt;=stack.peek()) stack.push(x); list.add(x); &#125; public void pop() &#123; //移除元素时，如果移除的元素是最小数栈的栈首元素，那么栈首元素也要出栈 if(stack.peek().equals(list.get(list.size()-1))) stack.pop(); list.remove(list.size()-1); &#125; public int top() &#123; return list.get(list.size()-1); &#125; public int getMin() &#123; //最小数栈的栈首元素 return stack.peek(); &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"栈","slug":"栈","permalink":"https://www.codetool.top/tags/%E6%A0%88/"}]},{"title":"leetcode279-完全平方数","slug":"leetcode279-完全平方数","date":"2019-12-11T08:10:25.000Z","updated":"2019-12-11T09:36:32.291Z","comments":true,"path":"article/leetcode279-完全平方数/","link":"","permalink":"https://www.codetool.top/article/leetcode279-%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/","excerpt":"","text":"原题给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, …）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。 示例 1: 输入: n = 12输出: 3解释: 12 = 4 + 4 + 4. 示例 2: 输入: n = 13输出: 2解释: 13 = 4 + 9. 解法思想以12为例。 这道题确实对时间要求比较严格，如果不过滤掉重复计算的部分会无法通过。 从目标数出发自顶向下： 由已知的目标数出发，减去比它小的平方数，这样一层一层减下去，直到获得0的那一层的层数就是答案。 需要过滤掉数值重复的节点，比如11-4和8-1。 从平方数出发自底向上： 由比已知目标数小的所有平方数出发，每层做一个组合加法，但是有一些地方需要处理： 遇到数值相等的节点，如1+4和4+1，跳过该节点。 在组合的时候遇到从一个数开始，加上它就会大于目标数，那么它之后的平方数都可以不做组合了，因为都比它大。 代码自顶向下： 123456789101112131415161718192021222324252627282930class Node&#123; public int value; public int depth; public Node(int value,int depth)&#123; this.value = value; this.depth = depth; &#125;&#125;class Solution &#123; public int numSquares(int n) &#123; int mark[] = new int[n]; if(n&lt;4) return n; Queue&lt;Node&gt; queue = new LinkedList&lt;&gt;(); queue.offer(new Node(n,0)); while(!queue.isEmpty())&#123; Node node = queue.poll(); if(node.value==0) return node.depth; int sqrt = (int)Math.sqrt(node.value); for(int i = sqrt; i &gt; 0 ; i--)&#123; if(mark[node.value-i*i]==0)&#123; queue.offer(new Node(node.value-i*i,node.depth+1)); mark[node.value-i*i] = 1; &#125; &#125; &#125; return -1; &#125;&#125; 自底向上 123456789101112131415161718192021222324252627282930313233class Node&#123; public int value; public int depth; public Node(int value,int depth)&#123; this.value = value; this.depth = depth; &#125;&#125;class Solution &#123; public int numSquares(int n) &#123; Queue&lt;Node&gt; queue = new LinkedList&lt;&gt;(); int a = (int)Math.sqrt(n); int[] mark = new int[n+1]; for(int i = a;i&gt;a/2;i--)&#123; queue.offer(new Node(i*i,1)); mark[i*i] = 1; &#125; while(!queue.isEmpty())&#123; Node node = queue.poll(); int value = node.value; if(value==n) return node.depth; for(int i = 1;i&lt;=a;i++)&#123; if(value+i*i&gt;n) break; if(mark[value+i*i]==1) continue; queue.offer(new Node(value+i*i,node.depth+1)); mark[value+i*i] = 1; &#125; &#125; return -1; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"BFS","slug":"BFS","permalink":"https://www.codetool.top/tags/BFS/"}]},{"title":"用hexo的live2d插件做了一个可以聊天的小宠物","slug":"用hexo的live2d插件做了一个可以聊天的小宠物","date":"2019-12-10T10:49:52.000Z","updated":"2019-12-10T13:46:31.787Z","comments":true,"path":"article/用hexo的live2d插件做了一个可以聊天的小宠物/","link":"","permalink":"https://www.codetool.top/article/%E7%94%A8hexo%E7%9A%84live2d%E6%8F%92%E4%BB%B6%E5%81%9A%E4%BA%86%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E8%81%8A%E5%A4%A9%E7%9A%84%E5%B0%8F%E5%AE%A0%E7%89%A9/","excerpt":"","text":"今天觉得我的博客有点小小的简陋，就做了一点美化工作 主要使用hexo的live2d插件（感谢作者），搭配上机器人对话api，做了一个可以聊天的小宠物。 效果图 本来是在live2d的github主页上看到了有dialog这个配置选项，一开始以为就是可以配置一个交互式的聊天窗口。 dialog配置 然后发现使用一言api只是过个几秒钟给你弹一句话看看，也没有其他的api选项可以配置，在百度上一搜好像也没有多少人写过关于这个dialog的用法。 然后我看了下它生成的源码： 组件结构 live2d-widget是整个组件的div，里面有一个live2d-widget-dialog就是卡通形象上面的那个对话框，live2dcanvas就是画卡通形象的画布。如果要让对话框显示文字，就是修改class名为live2d-widget-dialog的div的innerHtml。 既然没有提供相关的对话api，那就手动做一个吧。 live2d安装你既然看到了这篇文章，我就假设你知道live2d是什么 (看板娘) 。在hexo安装live2d插件的方式很简单： 1npm install --save hexo-helper-live2d 然后选一个心仪的模型安装，模型的预览可以参考插件作者的博客： https://huaji8.top/post/live2d-plugin-2.0/ 模型的名称参考： https://github.com/xiazeyu/live2d-widget-models 1npm install --save 模型名称 然后在hexo根目录下的_config.yml中配置live2d： 1234567891011121314151617#live2dlive2d: enable: true scriptFrom: local model: use: live2d-widget-model-wanko #模型选择 display: position: right #模型位置 width: 200 #模型宽度 height: 200 #模型高度 hOffset: 20 #水平偏移 vOffset: 100 #垂直偏移 mobile: show: false #是否在手机端显示 dialog: enable: true #启用对话框 hitokoto: false 具体的配置可以参考： https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init 组件改造在模型下方增加一个input输入框因为我把模型放在了右边，并且水平偏移和垂直偏移都是已知的。要在它的下方增加一个输入框，找到hexo中/themes/你的主题/layout/layout.ejs文件，在里面body标签中末尾添加： 123&lt;div id=\"chat_input\"&gt; &lt;input id=\"question\" type=\"text\" placeholder=\"陪我聊聊天吧\" onkeypress=\"return onKeyPress(event)\"/&gt;&lt;/div&gt; 然后在文件尾部配置它的样式： 1234567891011121314151617181920212223242526&lt;style&gt; #chat_input&#123; width: 200px; height: 40px; position: fixed; bottom: 80px; right: 20px;&#125; #question&#123; border: none;/*取消输入框边框*/ border-bottom: 1px #aaaaaa solid;/*设置下边框*/ background-color: transparent;/*背景透明*/ padding: 5px;&#125;/*手机端不显示*/@media screen and (max-width: 480px) &#123; #chat_input&#123; display: none; &#125; #live2d-widget&#123; display: none; &#125;&#125;&lt;/style&gt; 输入框就做好了。 聊天逻辑实现要做到智能聊天需要一个聊天机器人的api，有图灵机器人、小i机器人等可以选择。 我这里用的是茉莉机器人，就不推荐大家使用了，小小吐槽一下这个开发者好像不是很懂后端api，鉴权方式有点奇怪 (人间迷惑行为大赏)。 获取了api之后就可以做输入框的事件处理：（因为我的主题不包含jQuery我也懒得引，就用的原生js） 12345678910111213141516171819202122232425262728293031323334353637//在聊天框按下回车事件处理function onKeyPress(e)&#123; var keyCode = null; if(e.which) keyCode = e.which; else if(e.keyCode) keyCode = e.keyCode; //如果按下回车 if(keyCode == 13) &#123; // 获取输入框中的问题 var question_box = document.getElementById('question') var question = question_box.value //清空输入框内容并禁用输入框 question_box.value = \"\" question_box.setAttribute(\"disabled\",\"disabled\") //不要问我为什么不隐藏这个:） var api_key = \"78c33a07808c7b9e1905c89c88b3be14\" var api_secret = \"q707tevnk00f\" // 通过XHR发送一个GET请求 var xhr = new XMLHttpRequest() xhr.open('GET','http://i.itpk.cn/api.php?question='+encodeURIComponent(question)+\"&amp;api_key=\"+api_key+\"&amp;api_secret=\"+api_secret) xhr.onload = function()&#123; //启用输入框 question_box.removeAttribute('disabled'); //获取对话框 var live2d_dialog = document.getElementsByClassName(\"live2d-widget-dialog\")[0] //显示对话框并把获取到的内容显示在对话框上 live2d_dialog.style.opacity=1 live2d_dialog.innerHTML = this.responseText //五秒后隐藏对话框 window.setTimeout(()=&gt;&#123; live2d_dialog.style.opacity=0 &#125;, 5000); &#125; &#125; 需要注意的是： 一般api都不允许js跨域，需要用自己的服务器代理一下或者做一下中间处理（把认证的东西放自己服务器上） 我这里没把认证key和secret放自己服务器的原因是。。。这个api看上去就很不安全啊，没必要多此一举。 一般api用的是POST请求并且需要解析返回的JSON数据，我这里没有大家懂的都懂: ) 20:43补充： 谁知道我最后还是用了自己的服务器代理😀，因为我发现https网站发送不了http请求。 嘻嘻，说不定哪天我就换个api用了。","categories":[{"name":"日常/随笔","slug":"日常-随笔","permalink":"https://www.codetool.top/categories/%E6%97%A5%E5%B8%B8-%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"网站日志","slug":"网站日志","permalink":"https://www.codetool.top/tags/%E7%BD%91%E7%AB%99%E6%97%A5%E5%BF%97/"},{"name":"hexo","slug":"hexo","permalink":"https://www.codetool.top/tags/hexo/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://www.codetool.top/tags/JavaScript/"}]},{"title":"leetcode752-打开转盘锁","slug":"leetcode752-打开转盘锁","date":"2019-12-09T14:54:05.000Z","updated":"2019-12-10T10:48:26.108Z","comments":true,"path":"article/leetcode752-打开转盘锁/","link":"","permalink":"https://www.codetool.top/article/leetcode752-%E6%89%93%E5%BC%80%E8%BD%AC%E7%9B%98%E9%94%81/","excerpt":"","text":"原题你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;。每个拨轮可以自由旋转：例如把&#39;9&#39; 变为 &#39;0&#39;，&#39;0&#39;变为 &#39;9&#39; 。每次旋转都只能旋转一个拨轮的一位数字。 锁的初始数字为 &#39;0000&#39; ，一个代表四个拨轮的数字的字符串。 列表 deadends 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。 字符串 target 代表可以解锁的数字，你需要给出最小的旋转次数，如果无论如何不能解锁，返回 -1。 示例 1: 输入: deadends = [“0201”,”0101”,”0102”,”1212”,”2002”], target = “0202”输出： 6解释：可能的移动序列为 “0000” -&gt; “1000” -&gt; “1100” -&gt; “1200” -&gt; “1201” -&gt; “1202” -&gt; “0202”。注意 “0000” -&gt; “0001” -&gt; “0002” -&gt; “0102” -&gt; “0202” 这样的序列是不能解锁的，因为当拨动到 “0102” 时这个锁就会被锁定。 示例 2: 输入: deadends = [“8888”], target = “0009”输出： 1解释：把最后一位反向旋转一次即可 “0000” -&gt; “0009”。 示例 3: 输入: deadends = [“8887”,”8889”,”8878”,”8898”,”8788”,”8988”,”7888”,”9888”], target = “8888”输出： -1解释：无法旋转到目标数字且不被锁定。 示例 4: 输入: deadends = [“0000”], target = “8888”输出： -1 提示： 死亡列表 deadends 的长度范围为 [1, 500]。 目标数字 target 不会在 deadends 之中。 每个 deadends 和 target 中的字符串的数字会在 10,000 个可能的情况 ‘0000’ 到 ‘9999’ 中产生。 解法思想其实是一个树的BFS搜索问题： 每层示意图 用Queue来得到每层的节点。 主要需要注意的地方有： 为了避免重复的节点进入队列，可以使用数组记录是否出现过，或是用HashSet记录出现过的节点。 当遇到死亡数字数组中的元素时也不能将该元素添加至队列中。 当搜索到题目要求的元素时，为了得到当前层数，有两种方法： 用一个数据结构表示节点，记录节点的值和层数。 每层元素入队列之后再加入一个null元素，每次遍历到null元素即可知道遍历完了了一层。 代码我一开始是这样写的： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667//节点的数据结构，需要记录层数class Node&#123; public String value; public int count; public Node(String value,int count)&#123; this.value = value; this.count = count; &#125;&#125;class Solution &#123; public int openLock(String[] deadends, String target) &#123; //如果死亡数组中存在0000直接返回-1 if(arrayContains(deadends,\"0000\")) return -1; //标记数组用于记录哪些数字出现过 int[] mark = new int[10000]; //0000出现过 mark[0] = 1; Queue&lt;Node&gt; queue = new LinkedList&lt;Node&gt;(); queue.offer(new Node(\"0000\",0)); while(!queue.isEmpty())&#123; //获取队列头 Node node = queue.poll(); if(node.value.equals(target)) return node.count; else &#123; char[] charArray = node.value.toCharArray(); for(int i = 0;i&lt;4;i++) &#123; //位于第i位的数字+1，如果是9变成0 char[] plusOneCharArray = Arrays.copyOf(charArray,charArray.length); plusOneCharArray[i] = (char) (charArray[i]=='9'?'0':charArray[i]+1); String plusOne = String.valueOf(plusOneCharArray); if(plusOne.equals(target)) return node.count+1; //没有出现过且不在死亡数字中才添加至队列中 if((!arrayContains(deadends, plusOne))&amp;&amp;mark[Integer.valueOf(plusOne)]==0) &#123; queue.offer(new Node(plusOne,node.count+1)); mark[Integer.valueOf(plusOne)] = 1; &#125; //位于第i位的数字-1，如果是0变成9 char[] minusOneCharArray = Arrays.copyOf(charArray,charArray.length); minusOneCharArray[i] = (char) (charArray[i]=='0'?'9':charArray[i]-1); String minusOne = String.valueOf(minusOneCharArray); if(minusOne.equals(target)) return node.count+1; //没有出现过且不在死亡数字中才添加至队列中 if((!arrayContains(deadends, minusOne))&amp;&amp;mark[Integer.valueOf(minusOne)]==0) &#123; queue.offer(new Node(minusOne,node.count+1)); mark[Integer.valueOf(minusOne)] = 1; &#125; &#125; &#125; &#125; return -1; &#125; //遍历数组，用于检测死亡数字中是否存在指定的数字 public boolean arrayContains(String[] stringArray,String toFind) &#123; for(String i:stringArray) &#123; if(i.equals(toFind)) return true; &#125; return false; &#125;&#125; 然后发现上面这种方法需要的时间贼久，最后强行理解了一下发现问题主要出在检测死亡数组中是否存在指定数字的时候，时间开销太高了。 最后还是换成了用HashSet检测死亡数组中是否存在指定的数字： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657class Node&#123; public String value; public int count; public Node(String value,int count)&#123; this.value = value; this.count = count; &#125;&#125;class Solution &#123; public int openLock(String[] deadends, String target) &#123; //将死亡数字全部加进一个HashSet中 Set&lt;String&gt; set = new HashSet&lt;String&gt;(); for(String i:deadends) &#123; if(i.equals(\"0000\")) return -1; set.add(i); &#125; int[] mark = new int[10000]; mark[0] = 1; Queue&lt;Node&gt; queue = new LinkedList&lt;Node&gt;(); queue.offer(new Node(\"0000\",0)); while(!queue.isEmpty())&#123; Node node = queue.poll(); if(node.value.equals(target)) return node.count; else &#123; char[] charArray = node.value.toCharArray(); for(int i = 0;i&lt;4;i++) &#123; char[] plusOneCharArray = Arrays.copyOf(charArray,charArray.length); plusOneCharArray[i] = (char) (charArray[i]=='9'?'0':charArray[i]+1); String plusOne = String.valueOf(plusOneCharArray); if(plusOne.equals(target)) return node.count+1; if((!set.contains(plusOne))&amp;&amp;mark[Integer.valueOf(plusOne)]==0) &#123; queue.offer(new Node(plusOne,node.count+1)); mark[Integer.valueOf(plusOne)] = 1; &#125; char[] minusOneCharArray = Arrays.copyOf(charArray,charArray.length); minusOneCharArray[i] = (char) (charArray[i]=='0'?'9':charArray[i]-1); String minusOne = String.valueOf(minusOneCharArray); if(minusOne.equals(target)) return node.count+1; if((!set.contains(minusOne))&amp;&amp;mark[Integer.valueOf(minusOne)]==0) &#123; queue.offer(new Node(minusOne,node.count+1)); mark[Integer.valueOf(minusOne)] = 1; &#125; &#125; &#125; &#125; return -1; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"BFS","slug":"BFS","permalink":"https://www.codetool.top/tags/BFS/"}]},{"title":"谈谈java中的Iterator","slug":"谈谈Iterator和前辈Enumeration","date":"2019-12-06T12:09:49.000Z","updated":"2019-12-06T13:48:07.686Z","comments":true,"path":"article/谈谈Iterator和前辈Enumeration/","link":"","permalink":"https://www.codetool.top/article/%E8%B0%88%E8%B0%88Iterator%E5%92%8C%E5%89%8D%E8%BE%88Enumeration/","excerpt":"","text":"摘要 Iterator的作用？ Iterator和Enumeration的区别？ Iterator和ListIterator的区别？ Iterator和foreach的关联？ Iterator的作用Iterator，中文译作迭代器，是一种检查容器内元素并遍历元素的数据类型。它能使使用者不必关心遍历元素的过程，统一了对元素的访问方式。 在JDK1.8中，Iterator接口包含下面这些方法： 12345678//是否有下个元素boolean hasNext();//获取下个元素E next();//移除迭代器当前指向的元素，这个功能不强制实现，可以抛出UnsupportedOperationException异常void remove();//每个元素作为参数传递给Consumer接口的acceptvoid forEachRemaining(Consumer&lt;? super E&gt; action); Iterator和Enumeration的区别Iterator是JDK1.2后才出现的接口，目的是为了取代Enumeration。 Enumeration的作用和Iterator相似，它包含下面的方法： 1234//是否存在更多元素boolean hasMoreElements();//获取下一个元素E nextElement(); Iterator： 简化了方法名称 增加了移除元素的操作 Iterator和ListIterator的区别List接口中有一个方法listIterator()用于返回一个List迭代器，ArrayList在内部类中实现了这个迭代器，调用listIterator()时通过构造方法构造出一个ListIterator对象并返回。 那么Iterator和ListIterator有什么区别呢？ ListIterator是Iterator的扩充 ListIterator接口中除了继承自Iterator中的方法，还有： 123456789101112//是否有上一个元素boolean hasPrevious();//获取上一个元素E previous();//下一个元素的indexint nextIndex();//上一个元素的indexint previousIndex();//用一个元素替换当前指向的元素void set(E e);//在当前位置插入一个元素void add(E e); Iterator和foreach的关联？foreach只支持数组或实现了Iterable接口的类。 Iterable接口强制要求实现iterator()方法，也就是说，foreach语句底层还是通过iterator的遍历实现的。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"迭代器","slug":"迭代器","permalink":"https://www.codetool.top/tags/%E8%BF%AD%E4%BB%A3%E5%99%A8/"}]},{"title":"Java自动装箱缓存机制","slug":"Java自动装箱缓存机制","date":"2019-12-05T14:27:24.000Z","updated":"2019-12-05T14:53:26.478Z","comments":true,"path":"article/Java自动装箱缓存机制/","link":"","permalink":"https://www.codetool.top/article/Java%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/","excerpt":"","text":"尝试运行这段代码： 相似的两段代码，得到的结果却完全不相同。 首先要知道在java中==比较的是对象的引用，从直觉出发，无论是integer1、integer2还是integer3、integer4都是不同的引用，结果都应该是不等的。 造成这个结果的原因是JDK1.5引入的包装类自动装箱时的缓存机制 自动装箱的概念： 12Integer a = 10; //自动装箱，相当于下面这句Integer a = Integer.valueOf(10); 而看看Integer中valueOf(int)的源码： 12345public static Integer valueOf(int i) &#123; if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high) return IntegerCache.cache[i + (-IntegerCache.low)];//这句就是我们要研究的重点 return new Integer(i);&#125; IntegerCache是一个缓存类，它的内部有一个静态的Integer cache[]数组，在这个类第一次被加载时，会用整数值在-128~127之间的Integer实例对象填充这个数组，如果调用valueOf方法的时候参数值在这个范围内，就会从IntegerCache中的cache数组去取出这样一个共享对象。 这样就能回答一开始的程序integer1、integer2为什么相等了，因为他们都是从cache数组中取出来的同一个引用。 而300这个数是不在-128~127之间的，缓存数组中不存在这样的对象，最终是调用了构造方法创建了两个不同的Integer对象。 拓展：IntegerCache的静态代码块 123456789101112131415161718192021222324252627static &#123; // 缓存的数据范围可以由用户设置，这里从配置中获取了用户设置的缓存范围 int h = 127; String integerCacheHighPropValue = sun.misc.VM.getSavedProperty(\"java.lang.Integer.IntegerCache.high\"); if (integerCacheHighPropValue != null) &#123; try &#123; int i = parseInt(integerCacheHighPropValue); i = Math.max(i, 127); // Maximum array size is Integer.MAX_VALUE h = Math.min(i, Integer.MAX_VALUE - (-low) -1); &#125; catch( NumberFormatException nfe) &#123; // If the property cannot be parsed into an int, ignore it. &#125; &#125; high = h; cache = new Integer[(high - low) + 1]; int j = low; // 这里循环构造Integer对象填充cache数组 for(int k = 0; k &lt; cache.length; k++) cache[k] = new Integer(j++); // range [-128, 127] must be interned (JLS7 5.1.7) assert IntegerCache.high &gt;= 127;&#125;","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"包装类","slug":"包装类","permalink":"https://www.codetool.top/tags/%E5%8C%85%E8%A3%85%E7%B1%BB/"}]},{"title":"WinForm截图OCR小项目的开发-瞥见知识的融会贯通","slug":"winform截图OCR小项目的开发-瞥见知识的融会贯通","date":"2019-12-04T14:04:55.000Z","updated":"2019-12-05T08:01:35.970Z","comments":true,"path":"article/winform截图OCR小项目的开发-瞥见知识的融会贯通/","link":"","permalink":"https://www.codetool.top/article/winform%E6%88%AA%E5%9B%BEOCR%E5%B0%8F%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%BC%80%E5%8F%91-%E7%9E%A5%E8%A7%81%E7%9F%A5%E8%AF%86%E7%9A%84%E8%9E%8D%E4%BC%9A%E8%B4%AF%E9%80%9A/","excerpt":"","text":"最近因为有个需要截图OCR的需求，再加上需要交一个C#大作业，就做了一个WinForm截图OCR小项目出来。（不过后来发现QQ截图好像已经有这功能了🌚） 运行截图： 主窗口 截图处理窗口 截图处理窗口2 历史日志 谈一谈挺有意思的一些知识点： Http请求Delegate委托回调我封装了一个POST请求的函数：需要下载一个Newtonsoft.Json用于处理响应的JSON数据这种方式是使用了一个委托回调，类似于JavaScript中的回调函数，C#中叫Delegate回调 12345678910111213141516171819202122232425262728293031323334353637383940delegate void AfterRequest(JObject data);class HttpUtil&#123; /// &lt;summary&gt; /// 发出POST请求 /// &lt;/summary&gt; /// &lt;param name=\"url\"&gt;请求的url&lt;/param&gt; /// &lt;param name=\"requestBody\"&gt;url参数格式的字符串，如\"key1=value1&amp;key2=value2\",需要经过urlencode处理&lt;/param&gt; /// &lt;param name=\"function\"&gt;回调函数,data是一个json转换为的一个JObject对象&lt;/param&gt; public static void PostAsync(String url, string requestBody, AfterRequest function) &#123; try &#123; string responseBody = null; HttpClient httpClient = new HttpClient(); //StringContent content = new StringContent(requestBody,System.Text.Encoding.UTF8, \"application/x-www-form-urlencoded\"); StringContent content = new StringContent(requestBody); content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(\"application/x-www-form-urlencoded\"); HttpResponseMessage response = null; response = httpClient.PostAsync(url, content).Result; response.EnsureSuccessStatusCode(); if (response.IsSuccessStatusCode) &#123; responseBody = response.Content.ReadAsStringAsync().Result; &#125; JObject data = JObject.Parse(responseBody); function(data); &#125; catch (Exception e) &#123; Console.WriteLine(\"\\nException Caught!\"); Console.WriteLine(\"Message :&#123;0&#125; \", e.Message); &#125; &#125;&#125; Async/Await实际上还有一种能使代码更清晰、简洁的方法，并且这种方法更受C#推荐：Async/Await 1234567891011121314151617181920212223242526272829303132333435363738class HttpUtil&#123; /// &lt;summary&gt; /// 发出POST请求 /// &lt;/summary&gt; /// &lt;param name=\"url\"&gt;请求的url&lt;/param&gt; /// &lt;param name=\"requestBody\"&gt;url参数格式的字符串，如\"key1=value1&amp;key2=value2\",需要经过urlencode处理&lt;/param&gt; public static async Task&lt;JObject&gt; PostAsync(String url, string requestBody) &#123; try &#123; string responseBody = null; HttpClient httpClient = new HttpClient(); //StringContent content = new StringContent(requestBody,System.Text.Encoding.UTF8, \"application/x-www-form-urlencoded\"); StringContent content = new StringContent(requestBody); content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(\"application/x-www-form-urlencoded\"); HttpResponseMessage response = null; response = await httpClient.PostAsync(url, content); response.EnsureSuccessStatusCode(); if (response.IsSuccessStatusCode) &#123; responseBody = await response.Content.ReadAsStringAsync(); &#125; JObject data = JObject.Parse(responseBody); return data; &#125; catch (Exception e) &#123; Console.WriteLine(\"\\nException Caught!\"); Console.WriteLine(\"Message :&#123;0&#125; \", e.Message); &#125; return null; &#125;&#125; 使用这种方法，能避免回调地狱，让调用时代码不会多层嵌套。甚至ES7也支持了这种方法，语法和C#类似。 原理： 函数执行时，一旦遇到await就会返回。等到触发的异步操作完成（并且调用栈清空），再接着执行函数体内后面的语句 实际上async/await只是个语法糖，内部执行顺序和回调函数并无区别。 API鉴权因为做这个应用去调用了百度云和腾讯云提供的OCR api，恰巧发现两家的api鉴权机制正是目前主流验证方式之中具有代表性的两种。 百度云：Token看看百度云的Token获取方法： 向授权服务地址https://aip.baidubce.com/oauth/2.0/token发送请求（推荐使用POST），并在URL中带上以下参数： grant_type： 必须参数，固定为client_credentials； client_id： 必须参数，应用的API Key； client_secret： 必须参数，应用的Secret Key； token验证方式就是给每个用户分配一套账号和密码（这里是client_id和client_secret），服务器能通过这套认证信息获取用户的权限，生成一个token字符串，保存在本地并返回给用户，用户请求api的时候就要带上这个token（可以是放在请求体或请求头中），服务器就能通过token验证用户的身份。 安全隐患： Token被劫持，伪造请求和篡改参数。 腾讯云：签名验证可以看看腾讯云提供的计算签名的步骤： 将&lt;key, value&gt;请求参数对按key进行字典升序排序，得到有序的参数对列表N 将列表N中的参数对按URL键值对的格式拼接成字符串，得到字符串T（如：key1=value1&amp;key2=value2），URL键值拼接过程value部分需要URL编码，URL编码算法用大写字母，例如%E8，而不是小写%e8 将应用密钥以app_key为键名，组成URL键值拼接到字符串T末尾，得到字符串S（如：key1=value1&amp;key2=value2&amp;app_key=密钥) 对字符串S进行MD5运算，将得到的MD5值所有字符转换成大写，得到接口请求签名 可以看出腾讯云的验证机制更为复杂，在计算签名的时候需要用到当前时间戳、一个随机字符串和用户的app_key，这样得到的签名每次请求的时候都是不同的，即使中间者劫持了签名也无法利用签名进行第二次重复请求，如果请求参数被篡改也能识别出。 Token和签名验证并不冲突，签名验证是在身份认证的基础上防止请求重放、参数篡改等攻击。百度云这种加密机制也可以使用某种密钥将带有token的参数字符串生成签名进行验证。 总结许多知识都有融会贯通之处，即使做C#项目也能学习到JS相关的异步思想，能学到后端的验证机制。要善于思考，以行促学。","categories":[],"tags":[{"name":".net","slug":"net","permalink":"https://www.codetool.top/tags/net/"},{"name":"API鉴权","slug":"API鉴权","permalink":"https://www.codetool.top/tags/API%E9%89%B4%E6%9D%83/"},{"name":"异步","slug":"异步","permalink":"https://www.codetool.top/tags/%E5%BC%82%E6%AD%A5/"}]},{"title":"HashSet源码分析","slug":"HashSet源码分析","date":"2019-12-02T07:19:32.000Z","updated":"2019-12-02T07:57:08.396Z","comments":true,"path":"article/HashSet源码分析/","link":"","permalink":"https://www.codetool.top/article/HashSet%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","excerpt":"","text":"Set家族一览： Set层次 HashSet简介Set是Collection三大接口其中之一，意为集合，且元素不能重复。Set接口中的方法和Collection中的方法完全一致，只是起到一个标记名的作用。 HashSet是哈希集的意思，就是通过hashcode来实现set不能出现重复元素的一个实现类。 内部其实是通过哈希表HashMap来实现的，实际上set中存放的元素是内部hashmap中的键： 12private transient HashMap&lt;E,Object&gt; map;private static final Object PRESENT = new Object();//所有的键对应的值都是一个冗余的Object对象 在构造方法中初始化哈希表： 123public HashSet() &#123; map = new HashMap&lt;&gt;();&#125; 浪费时间警告：这是一个纯HashMap实现的类 重载的构造方法public HashSet(Collection&lt;? extends E&gt; c)通过一个集合来构造HashSet，默认哈希表的容量是集合的容量*4/3 + 1和16中的最大值 1234public HashSet(Collection&lt;? extends E&gt; c) &#123; map = new HashMap&lt;&gt;(Math.max((int) (c.size()/.75f) + 1, 16)); addAll(c);&#125; public HashSet(int initialCapacity, float loadFactor)这个实际上就是提供两个构造HashMap的参数，一个是初始大小，一个是负载因子。 123public HashSet(int initialCapacity, float loadFactor) &#123; map = new HashMap&lt;&gt;(initialCapacity, loadFactor);&#125; public HashSet(int initialCapacity)这个就是提供HashMap的初始大小。 123public HashSet(int initialCapacity) &#123; map = new HashMap&lt;&gt;(initialCapacity);&#125; 重要方法public int size()HashMap的size 123public int size() &#123; return map.size();&#125; public boolean contains(Object o)HashMap中是否有对应的键。 123public boolean contains(Object o) &#123; return map.containsKey(o);&#125; public boolean add(E e)将一个记录插入HashMap 123public boolean add(E e) &#123; return map.put(e, PRESENT)==null;&#125; public boolean remove(Object o)123public boolean remove(Object o) &#123; return map.remove(o)==PRESENT;&#125; 总结这是一个纯使用HashMap实现的数据结构。仔细看了一下TreeSet也是用TreeMap实现的，那我就不搞TreeSet了。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://www.codetool.top/tags/jdk/"},{"name":"源码研究","slug":"源码研究","permalink":"https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"},{"name":"集合","slug":"集合","permalink":"https://www.codetool.top/tags/%E9%9B%86%E5%90%88/"}]},{"title":"LinkedList源码分析","slug":"LinkedList源码分析","date":"2019-12-02T06:27:16.000Z","updated":"2019-12-03T11:46:18.073Z","comments":true,"path":"article/LinkedList源码分析/","link":"","permalink":"https://www.codetool.top/article/LinkedList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","excerpt":"","text":"相关文章：ArrayList源码分析 List家族一览： List层次 LinkedList简介 LinkedList的超类 LinkedList的超类有List、Queue，说明它既有List的性质也有Queue的性质，它直接实现于Deque，说明它体现更多的是双向链表的性质。不过通常将它当作普通的Queue使用： Queue&lt;String&gt; queue = new LinkedList&lt;&gt;(); 它的内部字段： 123transient int size = 0;transient Node&lt;E&gt; first;//代表头节点transient Node&lt;E&gt; last;//代表尾节点 重要的内部类Node这是一个静态内部类，代表着LinkedList中存放数据的节点。 1234567891011private static class Node&lt;E&gt; &#123; E item; Node&lt;E&gt; next; Node&lt;E&gt; prev; Node(Node&lt;E&gt; prev, E element, Node&lt;E&gt; next) &#123; this.item = element; this.next = next; this.prev = prev; &#125;&#125; 重要的内部方法void linkLast(E e)offer依赖的方法 1234567891011void linkLast(E e) &#123; final Node&lt;E&gt; l = last; final Node&lt;E&gt; newNode = new Node&lt;&gt;(l, e, null); last = newNode; if (l == null) first = newNode; else l.next = newNode; size++; modCount++;&#125; private E unlinkFirst(Node f)poll和remove依赖的方法 123456789101112131415private E unlinkFirst(Node&lt;E&gt; f) &#123; // assert f == first &amp;&amp; f != null; final E element = f.item; final Node&lt;E&gt; next = f.next; f.item = null; f.next = null; // help GC first = next; if (next == null) last = null; else next.prev = null; size--; modCount++; return element;&#125; Node node(int index)获取处于index上的节点，这个方法用于支持随机访问，特别是List中定义的get，set等方法。可见，该方法会根据index所处位置的不同分为从头查找或是从尾查找。 123456789101112131415Node&lt;E&gt; node(int index) &#123; // assert isElementIndex(index); if (index &lt; (size &gt;&gt; 1)) &#123; Node&lt;E&gt; x = first; for (int i = 0; i &lt; index; i++) x = x.next; return x; &#125; else &#123; Node&lt;E&gt; x = last; for (int i = size - 1; i &gt; index; i--) x = x.prev; return x; &#125;&#125; 总结可以说，LinkedList的实现还是挺简单的，由于是链表实现不需要考虑那么多关于空间的问题。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://www.codetool.top/tags/jdk/"},{"name":"源码研究","slug":"源码研究","permalink":"https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"},{"name":"集合","slug":"集合","permalink":"https://www.codetool.top/tags/%E9%9B%86%E5%90%88/"}]},{"title":"tomcat整体架构","slug":"tomcat整体架构","date":"2019-11-29T15:04:49.000Z","updated":"2019-11-29T15:09:41.931Z","comments":true,"path":"article/tomcat整体架构/","link":"","permalink":"https://www.codetool.top/article/tomcat%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/","excerpt":"","text":"tomcat整体架构Tomcat Http服务器不直接调用业务类，而是将请求转发给Servlet容器，Servlet加载业务类处理请求。 Servlet容器工作流程 核心组件： 连接器 Connector 容器 Container 连接器处理Socket请求，容器进行servlet的调用。 Tomcat整体架构 连接器 CoyoteCoyote 是 Tomcat的连接器框架的名称，是Tomcat服务器提供的供客户端访问的外部接口。客户端通过Coyote与服务器建立连接、发送请求并接受相应。 Coyote封装了底层的网络通信（Socket请求及相应处理），为Catalina容器提供了统一的接口，使Catalina容器与具体的请求协议及IO操作方式完全解耦。Coyote将Socket输入转换封装为Request对象，交由Catalina容器进行处理，处理请求完成后，Catalina通过Coyote提供的Response对象将结果写入输出流。 Coyote作为独立的模块，只负责具体协议和IO的相关操作，与Servlet规范实现没有直接关系，因此即使是Request和Response对象也并未实现Servlet规范对应的接口，而是在Catalina中将他们进一步封装为ServletRequest和ServletResponse。 IO模型与协议在Coyote中，Tomcat支持的多种I/O模型和应用层协议： Tomcat支持的IO模型（8.0前默认是BIO，自8.5/9.0版本起，tomcat移除了对BIO的支持）： IO模型 描述 NIO 非阻塞I/O，采用Java NIO类库实现。 NIO2 异步I/O，采用JDK7最新的NIO2类库实现。 APR 采用Apache可移植运行库实现，是C/C++编写的本地库。如果选择该方案，需要单独安装APR库。 Tomcat支持的应用层协议： 应用层协议 描述 HTTP/1.1 这是大部分Web应用采用的访问协议。 AJP 用于和Web服务器集成（如Apache），以实现对静态资源的优化以及集群部署，当前支持AJP/1.3。 HTTP/2 HTTP2.0大幅度地提升了Web性能。下一代HTTP协议，自8.5以及9.0版本之后支持。 连接器组件 EndPoint Processor Adapter ProtocolHandler EndPoint Coyote通信端点，即通信监听的接口，是具体Socket接收和发送处理器，是对传输层的抽象，因此EndPoint用来实现TCP/IP协议的。 Tomcat并没有EndPoint接口，而是提供了一个抽象类AbstractEndPoint，里面定义了两个内部类：Acceptor和SocketProcessor。Acceptor用于监听Socket连接请求。SocketProcessor用于处理接收到的Socket请求，它实现Runnable接口，在Run方法里调用协议处理组件Processor进行处理。为了提高处理能力，SocketProcessor被提交到线程池来执行。而这个线程池叫执行器（Executor）。 ProcessorCoyote协议处理接口，如果说EndPoint是用来实现TCP/IP协议的，那么Processor用来实现HTTP协议，Processor接收来自EndPoint的Socket，读取字节流解析成Tomcat Recuest和Response对象,并通过Adapter将其提交到容器处理, Processor是对应用层协议的抽象。 ProtocolHandlerCoyote 协议接口，通过Endpoint和Processor，实现针对具体协议的处理能力。Tomcat按照协议和I/O提供了6个实现类：AjpNioProtocol，AjpAprProtocol,AjpNio2Protocol,Http11NioProtocol,Http11Nio2Protocol,Http11AprProtocol。我们在配置tomcat/conf/server.xml时，至少要指定具体的ProtocolHandler,当然也可以指定协议名称，如：HTTP/1.1，如果安装了APR，那么将使用Http11AprProtocol，否则使用 Http11NioProtocol。 Adapter由于协议不同，客户端发过来的请求信息也不尽相同，Tomcat定义了自己的Request类来“存放”这些请求信息。ProtocolHandler接口负责解析请求并生成Tomcat Request类。但是这个Request对象不是标准的ServletRequest，也就意味着，不能用Tomcat Request作为参数来调用容器。Tomcat设计者的解决方案是引入CoyoteAdapter，这是适配器模式的经典运用，连接器调用CoyoteAdapter的Sevice方法，传入的是Tomcat Request对象，CoyoteAdapter负责将Tomcat Request转成ServletRequest，再调用容器的Service方法。 容器 CatalinaTomcat的模块分层图 和org.apache包下的包一一对应 容器组件 如上图所示，Catalina负责管理Server，而Server表示着整个服务器。Server下面有多个服务Service，每个服务都包含着多个连接器组件Connector（Coyote 实现）和一个容器组件Container。在Tomcat启动的时候，会初始化一个Catalina的实例。 Catalina各个组件的职责： 组件 职责 Catalina 负责解析Tomcat的配置文件，以此来创建服务器Server组件，并根据命令来对其进行管理。 Server 服务器表示整个Catalina Servlet容器以及其它组件，负责组装并启动Servlet引擎，Tomcat连接器。Server通过实现Lifecycle接口，提供了一种优雅的启动和关闭整个系统的方式。 Service 服务是Server内部的组件，一个Server包含多个Service。它将若干个Connector组件绑定到一个Container(Engine)上 Connector 连接器，处理与客户端的通信，它负责接收客户请求，然后转给相关的容器处理，最后向客户返回响应结果 Container 容器，负责处理用户的servlet请求，并返回对象给web用户的模块。 Container结构Tomcat设计了4种容器，分别是Engine、Host、Context和Wrapper。这4种容器不是平行关系，而是父子关系，Tomcat通过一种分层的架构，使得Servlet容器具有很好的灵活性。 组件 职责 Engine 表示整个Catalina的Servlet引擎,用来管理多个虚拟站点，一个Service最多只能有一个Engine ,但是一个引擎可包含多个Host。 Host 代表一个虚拟主机， 或者说一个站点，可以给Tomcat配置多个虚拟主机地址，而一个虚拟主机下可包含多个Context。 Context 表示一个web应用程序，一个Web应用可包含多个Wrapper。 Wrapper 表示一个Servlet，Wrapper作为容器中的最底层。 不能包含子容器。 我们也可以再通过Tomcat的server.xml配置文件来加深对Tomcat容器的理解。Tomcat采用了组件化的设计，它的构成组件都是可配置的，其中最外层的是Server，其他组件按照一定的格式要求配置在这个顶层容器中。 1234567891011&lt;Server&gt; &lt;Service&gt; &lt;Connector/&gt; &lt;Connector/&gt; &lt;Engine&gt; &lt;Host&gt; &lt;Context&gt;&lt;/Context&gt; &lt;/Host&gt; &lt;/Engine&gt; &lt;/Service&gt;&lt;/Server&gt; 那么，Tomcat是怎么管理这些容器的呢？你会发现这些容器具有父子关系，形成一个树形结构，你可能马上就想到了设计模式中的组合模式。没错，Tomcat就是用组合模式来管理这些容器的。具体实现方法是，所有容器组件都实现了Container接口，因此组合模式可以使得用户对单容器对象和组合容器对象的使用具有一致性。这里单容器对象指的是最底层的Wrapper，组合容器对象指的是上面的Context、Host或者Engine。 LifeCycle接口用于统一管理各组件的生命周期。","categories":[{"name":"中间件/软件设计","slug":"中间件-软件设计","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/"}],"tags":[{"name":"javaEE","slug":"javaEE","permalink":"https://www.codetool.top/tags/javaEE/"},{"name":"tomcat","slug":"tomcat","permalink":"https://www.codetool.top/tags/tomcat/"}]},{"title":"使用maven方式编译tomcat源码","slug":"使用maven方式编译tomcat源码","date":"2019-11-28T14:04:57.000Z","updated":"2019-11-28T14:09:23.897Z","comments":true,"path":"article/使用maven方式编译tomcat源码/","link":"","permalink":"https://www.codetool.top/article/%E4%BD%BF%E7%94%A8maven%E6%96%B9%E5%BC%8F%E7%BC%96%E8%AF%91tomcat%E6%BA%90%E7%A0%81/","excerpt":"","text":"Tomcat源码下载官网下载： https://tomcat.apache.org/download-80.cgi 页面下方的Source Code Distribution，下载zip文件。 Idea用maven方式编译源码在源码文件夹内创建一个home/目录，将webapp/和conf/移到这个文件夹下。 在根目录添加pom.xml： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;org.apache.tomcat&lt;/groupId&gt; &lt;artifactId&gt;Tomcat8.5&lt;/artifactId&gt; &lt;name&gt;Tomcat8.5&lt;/name&gt; &lt;version&gt;8.5&lt;/version&gt; &lt;build&gt; &lt;finalName&gt;Tomcat8.5&lt;/finalName&gt; &lt;!-- 指定源文件为java 、test --&gt; &lt;sourceDirectory&gt;java&lt;/sourceDirectory&gt;&lt;!-- &lt;testSourceDirectory&gt;test&lt;/testSourceDirectory&gt;--&gt; &lt;resources&gt; &lt;resource&gt; &lt;directory&gt;java&lt;/directory&gt; &lt;/resource&gt; &lt;/resources&gt; &lt;testResources&gt; &lt;testResource&gt; &lt;directory&gt;test&lt;/directory&gt; &lt;/testResource&gt; &lt;/testResources&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt; &lt;version&gt;2.3&lt;/version&gt; &lt;configuration&gt; &lt;encoding&gt;UTF-8&lt;/encoding&gt; &lt;!-- 指定jdk 编译 版本 ，没装jdk 1.7的可以变更为1.6 --&gt; &lt;source&gt;1.8&lt;/source&gt; &lt;target&gt;1.8&lt;/target&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;!-- 添加tomcat8 所需jar包依赖 --&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.12&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;ant&lt;/groupId&gt; &lt;artifactId&gt;ant&lt;/artifactId&gt; &lt;version&gt;1.7.0&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;wsdl4j&lt;/groupId&gt; &lt;artifactId&gt;wsdl4j&lt;/artifactId&gt; &lt;version&gt;1.6.2&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;javax.xml&lt;/groupId&gt; &lt;artifactId&gt;jaxrpc&lt;/artifactId&gt; &lt;version&gt;1.1&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.easymock&lt;/groupId&gt; &lt;artifactId&gt;easymock&lt;/artifactId&gt; &lt;version&gt;3.3&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;org.eclipse.jdt.core.compiler&lt;/groupId&gt; &lt;artifactId&gt;ecj&lt;/artifactId&gt; &lt;version&gt;4.6.1&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt;&lt;/project&gt; 在idea中导入该maven项目，等待maven构建。 idea的项目运行配置（Edit Configurations）： Edit Configurations-&gt; + -&gt; Application -&gt; Main Class选择org.apache.catalina.startup.Bootstrap -&gt; VM Options填入： 1234-Dcatalina.home=D:/Tomcat/apache-tomcat-8.5.49-src/home-Dcatalina.base=D:/Tomcat/apache-tomcat-8.5.49-src/home-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager-Djava.util.logging.config.file=D:/Tomcat/apache-tomcat-8.5.49-src/home/conf/logging.properties D:/Tomcat/apache-tomcat-8.5.49-src/是我电脑上的源码的存放位置 然后就可以尝试编译了。还会出现一些错误，可以参考： @Version@错误 tomcat页面打不开500,jsp没有初始化错误","categories":[{"name":"中间件/软件设计","slug":"中间件-软件设计","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/"}],"tags":[{"name":"tomcat","slug":"tomcat","permalink":"https://www.codetool.top/tags/tomcat/"},{"name":"maven","slug":"maven","permalink":"https://www.codetool.top/tags/maven/"},{"name":"idea","slug":"idea","permalink":"https://www.codetool.top/tags/idea/"}]},{"title":"servlet4.0初识总结","slug":"servlet4-0初学总结","date":"2019-11-28T11:57:54.000Z","updated":"2019-11-28T12:14:47.251Z","comments":true,"path":"article/servlet4-0初学总结/","link":"","permalink":"https://www.codetool.top/article/servlet4-0%E5%88%9D%E5%AD%A6%E6%80%BB%E7%BB%93/","excerpt":"","text":"JavaEE8JavaEE8,是自2013年6月Java企业版的首次更新。JAVAEE8提供了一些新的API，提供了对HTTP/2的新支持。 Servlet4.0Servlet API是JAVA开发人员最熟悉的API之一。 Servlet在JAVAweb的开发中发挥着重要的作用。JAVAEE8对Servlet进行了重要的更新： 服务器推送 提供了对Servlet映射的运行时发现。 简化了Filter的开发。 其中服务器推送是最主要的更新 配置需要： jdk8+ tomcat9（支持HTTP/2） tomcat-native openssl 配置tomcat编辑server.xml，将原来的port=&quot;8080&quot; HTTP/1.1替换成: 123456789&lt;Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11AprProtocol\" maxThreads=\"150\" SSLEnabled=\"true\" &gt; &lt;UpgradeProtocol className=\"org.apache.coyote.http2.Http2Protocol\" /&gt; &lt;SSLHostConfig&gt; &lt;Certificate certificateKeyFile=\"conf/localhost-rsa-key.pem\" certificateFile=\"conf/localhost-rsa-cert.pem\" type=\"RSA\" /&gt; &lt;/SSLHostConfig&gt;&lt;/Connector&gt; 生成SSL证书生成私钥和证书文件在tomcat-native目录下： 12OpenSSL&gt; genrsa -out localhost-rsa-key.pem 2048OpenSSL&gt; req -new -x509 -key localhost-rsa-key.pem -out localhost-rsa-cert.pem -days 3650 将localhost-rsa-key.pem和localhost-rsa-cert.pem复制到tomcat的conf/文件夹下。 将tomcat-native中bin/(x64/)下的tcnative-1.dll和tcnative-1-src.pdb复制到JAVA_HOME的/bin目录下 然后重启tomcat就能用HTTP/2来连接了。 服务器推送将用户所需的WEB资源提前推送到用户的浏览器缓存中，当用户使用浏览器访问所需WEB资源时，用户不需要再次下载所需的WEB资源，因为用户所需的WEB资源已经存在于用户的浏览器缓存中。 获取： request.newPushBuilder(); 方法： PushBuilder.path()设置要推送资源的路径。PushBuilder.push()推送WEB资源到用户的浏览器缓存中。 12345protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; PushBuilder pb = request.newPushBuilder(); pb.path(\"pic01.jpg\"); pb.push();&#125; 简化： 123PushBuilder pb = request.newPushBuilder();pb.path(\"pic01.jpg\").push();pb.path(\"pic02.jpg\").push(); HttpServletMapping在运行时获取Servlet的映射信息（反射机制） 获取： request.getHttpServletMapping(); 方法： getMappingMatch() 请求路径的类型getMatchValue() 映射的资源名getPattern() 返回Servlet映射的路径getServletName() 返回Servlet的名称 1234567891011protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; HttpServletMapping mapping = request.getHttpServletMapping(); MappingMatch match = mapping.getMappingMatch(); System.out.println(match); String value = mapping.getMatchValue(); System.out.println(value); String pattern = mapping.getPattern(); System.out.println(pattern); String name = mapping.getServletName(); System.out.println(name);&#125; HttpFilterFilter的实现类： GenericFilter HttpFilter，是GenericFilter的子类。 通过继承HttpFilter来实现Filter： 1234567891011@WebFilter(filterName = \"FilterDemo\",urlPatterns = \"/*\")public class FilterDemo extends HttpFilter &#123; @Override protected void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException &#123; request.setCharacterEncoding(\"UTF-8\"); response.setContentType(\"text/html;charset=UTF-8\"); System.out.println(\"FilterDemo:放行前\"); chain.doFilter(request,response); System.out.println(\"FilterDemo:放行后\"); &#125;&#125;","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"javaEE","slug":"javaEE","permalink":"https://www.codetool.top/tags/javaEE/"},{"name":"servlet","slug":"servlet","permalink":"https://www.codetool.top/tags/servlet/"}]},{"title":"nginx+keepalived高可用的并发解决方案","slug":"nginx-keepalived高可用的并发解决方案","date":"2019-11-27T12:55:04.000Z","updated":"2019-11-27T13:36:17.971Z","comments":true,"path":"article/nginx-keepalived高可用的并发解决方案/","link":"","permalink":"https://www.codetool.top/article/nginx-keepalived%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84%E5%B9%B6%E5%8F%91%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","excerpt":"","text":"nginxnginx是一个高性能的HTTP和反向代理服务器，也是一个邮件服务器，支持负载均衡和高并发。 Keepalived Keepalived是一个基于VRRP协议来实现的服务高可用方案，可以利用其来避免IP单点故障，类似的工具还有heartbeat、corosync、pacemaker。但是它一般不会单独出现，而是与其它负载均衡技术（如lvs、haproxy、nginx）一起工作来达到集群的高可用。 Nginx+keepalived架构对于一台轮询的nginx服务器，如果宕机，则整个集群都不能收到请求。所以通常即使只是用作轮询的服务器，也要有后备服务器。 架构示意图 在这种架构中，外界用户访问的是虚拟IP，keepalived主机（master）会占用这个ip地址，其他后备服务器待命。如果master服务器宕机，backup服务器能感知到并及时接管这个虚拟IP。","categories":[{"name":"中间件/软件设计","slug":"中间件-软件设计","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://www.codetool.top/tags/nginx/"},{"name":"高并发","slug":"高并发","permalink":"https://www.codetool.top/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"}]},{"title":"今日ipv4地址正式耗尽","slug":"今日ipv4地址正式耗尽","date":"2019-11-26T13:47:23.000Z","updated":"2019-11-27T13:37:18.677Z","comments":true,"path":"article/今日ipv4地址正式耗尽/","link":"","permalink":"https://www.codetool.top/article/%E4%BB%8A%E6%97%A5ipv4%E5%9C%B0%E5%9D%80%E6%AD%A3%E5%BC%8F%E8%80%97%E5%B0%BD/","excerpt":"","text":"插播一条科技快讯： 北京时间11月26日下午消息，据国外媒体报道，负责英国、欧洲、中东和部分中亚地区互联网资源分配的欧洲网络协调中心（RIPE NCC）今日宣布： 全球所有43亿个IPv4地址已全部分配完毕，这意味着没有更多的IPv4地址可以分配给ISP（网络服务提供商）和其他大型网络基础设施提供商。 一想想我手上两台服务器有两个独立的ipv4地址还有点小激动呢。 珍惜IPv4地址,吉祥号码，全球唯一，错过今日，毁一生。","categories":[{"name":"日常/随笔","slug":"日常-随笔","permalink":"https://www.codetool.top/categories/%E6%97%A5%E5%B8%B8-%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"日常","slug":"日常","permalink":"https://www.codetool.top/tags/%E6%97%A5%E5%B8%B8/"}]},{"title":"java基础查缺补漏01","slug":"java基础查缺补漏01","date":"2019-11-26T10:45:24.000Z","updated":"2019-12-06T13:56:02.936Z","comments":true,"path":"article/java基础查缺补漏01/","link":"","permalink":"https://www.codetool.top/article/java%E5%9F%BA%E7%A1%80%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F01/","excerpt":"","text":"某些点会在不远的将来深挖。 &gt;&gt;是逻辑右移，&gt;&gt;&gt;是算术右移 JDK6 可以使用Console.readPassword从控制台中读取密码，用户输入的过程中密码是不可见的。 12345public static void main(String[] args) &#123; Console cs = System.console(); String username = cs.readLine(\"User name: \"); char[] passwd = cs.readPassword(\"Password: \");&#125; printf格式化输出中的%s转换符能格式化任意的对象，对于实现了Formattable接口的对象将调用formatTo方法，否则将调用ToString方法。 Java的文件读取：通过File构造一个Scanner对象；写入文件：构造一个PrintWriter对象 1Scanner in = new Scanner(Paths.get(\"myfile.txt\",\"UTF-8\"); 1PrintWriter out = new PrintWriter(\"myfile.txt\",\"UTF-8\"); Math中的BigInteger和BigDecimal可以满足高精度的运算需要。 匿名数组的写法：new int[]{17,19,23,29,31,37} finalize方法：相当于析构方法，在垃圾回收器清除对象之前调用。但不推荐使用这个方法，因为很难确定这个方法在什么时候才能被调用。 import static是静态导入，可以导入某个类中的静态方法和静态字段。 可变参数列表：function(Object... values)，在函数内部可以把values看成一个参数数组。 java8方法引用： 对象的方法引用 object::instanceMethod 类的静态方法引用 Class::staticMethod 任意类的任意对象的方法引用：Class::instanceMethod，它只能被该类的实例对象调用。 类的构造器调用 Class::new 内部类为什么要使用内部类 内部类方法可以访问该类定义所在的作用域中的数据，包括私有的数据。 内部类可以对同一个包种的其他类隐藏起来。 当想要定义一个回调函数且不想编写大量代码时，使用匿名内部类比较便捷。 内部类类型 普通内部类 局部内部类（在方法中定义的内部类，不能有访问修饰符，不能是static） 局部内部类可以访问当前代码块的常量，和此外围类的所有成员。 静态内部类（声明为static，不依赖于外部类的对象存在，实际上成为了一个顶级类） 匿名内部类（立刻使用，代码短小，只用到一个实例） 语法：new SuperType(construction parameter){inner class methods and data} 内部类底层实现（普通内部类）： 编译器自动为内部类添加一个成员变量，该成员变量的类型和外部类的类型相同，这个成员变量就是指向外部类对象引用。 编译器自动为内部类的构造方法添加一个参数，参数的类型是外部类的类型，在构造方法内部使用这个参数为1中添加的成员变量赋值。 在调用内部类的构造函数初始化内部类对象时，会默认传入外部类的引用。 Java动态代理：https://www.jianshu.com/p/95970b089360 Throwable分层：Error类层次结构描述了Java运行时系统的内部错误和资源耗尽错误。应用程序不应该抛出这种类型的对象。Java语言规范将派生于Error类或RuntimeException类的所有异常称为非受查异常，所有其他的异常称为受查异常。 断言： assert 条件; assert 条件:表达式;如果结果是false，抛出一个AssertionError异常，第二种形式使用表达式构造AssertionError，转换成消息字符串。 可以在普通类里面定义泛型方法：&lt;T&gt; T function(T... param)&lt;T extends BoundingType&gt;代表T是BoundingType的子类。&lt;T super BoundingType&gt;代表T是BoundingType的超类。BoundingType可以是用”&amp;”分隔的多个类java泛型-类型擦除：https://www.cnblogs.com/joeblackzqq/p/10813143.html java关键字volatile：确保本条指令不会因编译器的优化而省略，且要求每次直接读值 java关键字transient: 标记的成员变量不参与序列化过程","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"基础知识","slug":"基础知识","permalink":"https://www.codetool.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}]},{"title":"详解java中的unicode编码（码点）","slug":"unicode知识","date":"2019-11-25T14:16:19.000Z","updated":"2019-11-26T13:16:08.748Z","comments":true,"path":"article/unicode知识/","link":"","permalink":"https://www.codetool.top/article/unicode%E7%9F%A5%E8%AF%86/","excerpt":"","text":"致谢： 本文参考网页：Unicode字符集以及UTF-8，UTF-16编码的总结 - vcj1009784814的博客 - CSDN博客 Unicodeunicode的码点从U+0000到U+10FFFF，即共有2^20+2^16-1=1114111个码点。通常来说，常见字符可以用2个字节（16位）来表示。但还有很多其他表意字符、辅助字符需要表示。 Unicode将所有码点分成了17个代码级别，又称平面。 unicode的17个平面 其中第一个平面称为基本的多语言级别（basic multilingual plane, BMP），其他的统称为辅助平面 unicode的平面划分 utf-8由于unicode会有1个字节-4个字节不等，如果定长存储每个字符都需要占用四个字节，十分浪费空间，utf-8是一种变长存储方式，具体编码方式如下： 第一个字节提示了这个unicode编码由几个字节组成 首字节以0开头，表示单字节编码 首字节以110开头，表示双字节编码，后续字节以10开头 首字节以1110开头，表示三字节编码，后续字节以10开头 首字节以11110开头，表示四字节编码，后续字节以10开头 有效位对应的字节数 有效位对应的字节数，最后两行应该是用不上的 utf-16UTF-16源于UCS-2，UCS-2将字符码点直接映射为字符编码，中间无特别的编码算法。 UCS-2编码方式固定2字节编码，只覆盖了BMP的码点，对于SMP的码点，2字节的16位二进制数是不足以表示的。 而UTF-16扩展了原来的UCS-2编码，解决了辅助平面码点的字符无法表示的问题： BMP中的有效码点，用固定2字节16位来为其编码，数值等于对应的码点，同UCS-2 辅助平面中的有效码点，使用代理对进行编码。在BMP中，有一个范围的码点是未定义的，被称为代理区，其码点范围是0xD800~0xDFFF，共211个码点，代理区又被分为高代理码点和低代理码点，其中高代理码点范围是0xD800~0XDBFF，低代理码点范围是0xDC00~0XDFFF，高代理码点和低代理码点结合在一起，就表示一个辅助平面中的字符。由于辅助平面中的字符共有220个（0x10000~0x10FFFF），高代理码点和低代理码点皆有210个取值，两者结合，恰好有220种不同的组合。 img 也就是说，UTF-16可以表示完unicode中的字符，BMP中的字符需要一个字节，其他的需要两个字节。 java中的unicode这里使用到一个工具：Unicode编码转换，UTF编码转换（UTF-8、UTF-16、UTF-32） charjava中的char是定长以16位（两个字节存储的），并且内部编码为utf-16。也就是说，一个char只能表示BMP中的字符，若要表示一个辅助平面内的字符，需要两个char。 来看一个BMP中的字符：”我” Unicode编码：U+6211UTF8编码：E68891UTF16BE编码：FEFF6211UTF16LE编码：FFFE1162 UTF16BE、UTF16LE分别指的是机器中的大端表示和小端表示，前面的FEFF或FFFE编译器会帮我们过滤掉，我们这里只看大端表示。 对于UTF-8表示，先将6211转换为二进制编码110 001000 010001，是15个有效位。对照utf-8编码表，可知需要用三个字节(1110xxxx 10xxxxxxxx 10xxxxxxxx)来表示，将有效位填入，得utf-8编码：11100110 10001000 10010001，转换为16进制，就是E68891。 对于UTF-16表示，6211是可以用两个字节表示完的，所以UTF-16的编码就是6621。 验证： String对于辅助平面内的字符，一个char可不够用了，需要由两个char来存储，或是用String来表示。 来看一个emoji字符：”👉” Unicode编码：U+1F449UTF8编码：F09F9189UTF16BE编码：FEFFD83DDC49UTF16LE编码：FFFE3DD849DC 对于UTF-8表示，先将1F449转换为二进制编码11111 010001 001001，是17个有效位。对照utf-8编码表，可知需要用四个字节(11110xxx 10xxxxxxxx 10xxxxxxxx 10xxxxxx)来表示，将有效位填入，得utf-8编码：11110000 10011111 10010001 10001001，转换为16进制，就是F09F9189。 对于UTF-16表示，需要用到代理对进行编码：首先用1F449-10000得到F449，将F449转换为20位二进制0000111101 0001001001，高10位转成十六进制得3D,加上D800得D83D，后10位转成十六进制得49，加上DC00得DC49,所以它的utf-16编码为D83D DC49。 验证： 问题：String.length()会将一个非bmp中的字符算为1还是算为2呢？测试↓ 可见，如果String中存在非bmp中的字符，String会将它算成两个字符长度。看String.length()的源码也可知道这点： 123public int length() &#123; return value.length;&#125; value是String内部的一个字符数组。 java对码点计算的支持其实String中也提供了计算码点的方法：String.codePointCount(int beginIndex, int endIndex) 利用的是Character类能判断一个码点是否为代理码点：Character.isHighSurrogate：是否为高位代理码点 1234public static boolean isHighSurrogate(char ch) &#123; // Help VM constant-fold; MAX_HIGH_SURROGATE + 1 == MIN_LOW_SURROGATE return ch &gt;= MIN_HIGH_SURROGATE &amp;&amp; ch &lt; (MAX_HIGH_SURROGATE + 1);&#125; 其中MIN_HIGH_SURROGATE=\\uD800和MAX_HIGH_SURROGATE=\\uDBFF，注明了高位代理码点的值边界。 Character.isLowSurrogate：是否为低位代理码点 123public static boolean isLowSurrogate(char ch) &#123; return ch &gt;= MIN_LOW_SURROGATE &amp;&amp; ch &lt; (MAX_LOW_SURROGATE + 1);&#125; 其中MIN_HIGH_SURROGATE=\\uDC00和MAX_HIGH_SURROGATE=\\uDFFF，注明了高位代理码点的值边界。 要判断字符串内有没有代理码点，只需确定连续的两个码点一个是高位代理码点一个是低位代理码点就行了。 String.codePointCount依赖的方法Character.codePointCountImpl源码： 123456789101112static int codePointCountImpl(char[] a, int offset, int count) &#123; int endIndex = offset + count; int n = count; for (int i = offset; i &lt; endIndex; ) &#123; if (isHighSurrogate(a[i++]) &amp;&amp; i &lt; endIndex &amp;&amp; isLowSurrogate(a[i])) &#123; n--; i++; &#125; &#125; return n;&#125; 如果要遍历一个字符串中的字符，可能需要考虑是否有非kmp中的字符的情况。那么就需要用码点为单位来处理： 反例： 正确处理方式： String.codePoints()得到一个int类型的流，代表这个码点的unicode编码，用System.out.printf()中的%c格式化输出它，就可以看到这个字符。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"基础知识","slug":"基础知识","permalink":"https://www.codetool.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"name":"字符编码","slug":"字符编码","permalink":"https://www.codetool.top/tags/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81/"}]},{"title":"AVL树-自平衡的二叉搜索树","slug":"AVL树-自平衡的二叉搜索树","date":"2019-11-25T11:11:29.000Z","updated":"2019-11-26T04:23:02.774Z","comments":true,"path":"article/AVL树-自平衡的二叉搜索树/","link":"","permalink":"https://www.codetool.top/article/AVL%E6%A0%91-%E8%87%AA%E5%B9%B3%E8%A1%A1%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/","excerpt":"","text":"本文图片来源：手把手教，手写AVL树 - 不止是编程 - 博客园 AVL树的概念自平衡当二叉搜索树处于平衡状态的时候，其操作时间复杂度为O(logN)，但当二叉搜索树是单支树的时候，其搜索效率则为O(N)。可见，二叉搜索树的平衡性是影响其操作效率的关键。由此出发，学者们设计了第一个平衡二叉搜索树，即AVL树。AVL树作为第一个平衡的二叉搜索树，其影响非常深远，后来的很多平衡结构都借鉴了AVL树的设计思想。 AVL树的定义一棵AVL树或者是空树，或者是具有下列性质的二叉搜索树： 它的左子树和右子树都是AVL树。 左子树和右子树的高度之差的绝对值不超过1。 要注意，AVL的平衡性是一种相对的平衡，并非一种绝对的平衡。它不要求左子树和右子树的高度绝对相等，而仅仅是左子树和右子树的高度之差的绝对值不超过1即可。因为绝对的平衡难以实现。 如果给AVL树中的每一个节点都附加一个数字，该数字指示该节点右子树的高度减去左子树的高度所得的高度差，那么这个数字即为该节点的平衡因子。根据AVL树的定义，任一节点的平衡因子只能取-1、0或1。 AVL树的旋转在一个平衡的二叉搜索树中插入一个新节点，就会造成其失衡，需要从插入位置沿通向根的路径回溯，检查各节点的平衡因子，在某一节点发现高度不平衡，则停止回溯。然后从发生不平衡的节点起，往下取三层，可以归纳为四种情况： 向某节点的左子树中插入一个左孩子。 向某节点的右子树中插入一个右孩子。 向某节点的左子树中插入一个右孩子。 向某节点的右子树中插入一个左孩子。 对应的处理方式： 单旋 右旋操作 以中间节点为轴，进行顺时针旋转，该中间节点的原父节点将变成该节点的右子节点，该中间节点的右子树则变成其原父节点的左子树。 左旋操作 对应的，左旋的方法是以三个呈直线排列的节点的中间节点为轴，进行逆时针旋转。该中间节点的原父节点将变成该节点的左子节点，该中间节点的左子树则变成其原父节点的右子树 双旋 先左后右双旋转 以3个成折线排列的节点中的末节点为轴，进行逆时针旋转。使末节点代替中间节点的位置，也就是让末节点成为原中间节点的父节点，这时，三个节点将成一直线排列，再以新的中间节点为旋转轴做右旋操作，即可完成平衡化操作。 基本情况 复杂情况 先右后左双旋转 以3个成折线排列的节点中的末节点为轴，进行顺时针旋转。使末节点代替中间节点的位置，也就是让末节点成为原中间节点的父节点，这时，三个节点将成一直线排列，再以新的中间节点为旋转轴做左旋操作，即可完成平衡化操作。","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"树形搜索","slug":"树形搜索","permalink":"https://www.codetool.top/tags/%E6%A0%91%E5%BD%A2%E6%90%9C%E7%B4%A2/"}]},{"title":"leetcode200-岛屿数量","slug":"leetcode200-岛屿数量","date":"2019-11-24T14:18:01.000Z","updated":"2019-12-12T07:43:10.145Z","comments":true,"path":"article/leetcode200-岛屿数量/","link":"","permalink":"https://www.codetool.top/article/leetcode200-%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/","excerpt":"","text":"原题给定一个由 &#39;1&#39;（陆地）和 &#39;0&#39;（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。 示例1: 输入:11110110101100000000 输出: 1 示例2: 输入:11000110000010000011 输出: 3 解法思想线性扫描整个二维网格，如果一个结点包含 1，则以其为根结点启动广度优先搜索，或深度优先搜索。搜索到的值设为 0 以标记访问过该结点，每经历过一次搜索说明岛的数量+1。直到整个二维数组都变成0。 代码不嫌麻烦的可以建一个存储二维数组x、y位置的数据结构类。不然只能存储元素的偏移地址手动算x和y。 1234567891011121314151617181920212223242526272829303132333435363738394041class Solution &#123; public int numIslands(char[][] grid) &#123; int count = 0; int height = grid.length; if(height==0) return 0; int width = grid[0].length; Queue&lt;Integer&gt; queue = new LinkedList&lt;Integer&gt;(); for(int i = 0;i&lt;height;i++)&#123; for(int j = 0;j&lt;width;j++)&#123; if(grid[i][j]=='1')&#123; grid[i][j] = '0'; queue.offer(i*width+j); while(!queue.isEmpty())&#123; int index = queue.poll(); int index_x = index/width; int index_y = index%width; if(index_x!=height-1 &amp;&amp; grid[index_x+1][index_y]=='1')&#123; queue.offer((index_x+1)*width+index_y); grid[index_x+1][index_y] = '0'; &#125; if(index_x!=0 &amp;&amp; grid[index_x-1][index_y]=='1')&#123; queue.offer((index_x-1)*width+index_y); grid[index_x-1][index_y] = '0'; &#125; if(index_y!=0 &amp;&amp; grid[index_x][index_y-1]=='1')&#123; queue.offer(index_x*width+index_y-1); grid[index_x][index_y-1] = '0'; &#125; if(index_y!=width-1 &amp;&amp; grid[index_x][index_y+1]=='1')&#123; queue.offer(index_x*width+index_y+1); grid[index_x][index_y+1] = '0'; &#125; &#125; count++; &#125; &#125; &#125; return count; &#125;&#125; 在BFS的基础上改一下就成了DFS： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647class Solution &#123; public int numIslands(char[][] grid) &#123; int count = 0; int height = grid.length; if(height==0) return 0; int width = grid[0].length; Stack&lt;Integer&gt; stack = new Stack&lt;&gt;(); for(int i = 0;i&lt;height;i++)&#123; for(int j = 0;j&lt;width;j++)&#123; if(grid[i][j]=='1')&#123; grid[i][j] = '0'; stack.push(i*width+j); while(!stack.empty())&#123; int index = stack.peek(); int index_x = index/width; int index_y = index%width; if(index_x!=height-1 &amp;&amp; grid[index_x+1][index_y]=='1')&#123; stack.push((index_x+1)*width+index_y); grid[index_x+1][index_y] = '0'; continue; &#125; if(index_x!=0 &amp;&amp; grid[index_x-1][index_y]=='1')&#123; stack.push((index_x-1)*width+index_y); grid[index_x-1][index_y] = '0'; continue; &#125; if(index_y!=0 &amp;&amp; grid[index_x][index_y-1]=='1')&#123; stack.push(index_x*width+index_y-1); grid[index_x][index_y-1] = '0'; continue; &#125; if(index_y!=width-1 &amp;&amp; grid[index_x][index_y+1]=='1')&#123; stack.push(index_x*width+index_y+1); grid[index_x][index_y+1] = '0'; continue; &#125;else&#123; stack.pop(); &#125; &#125; count++; &#125; &#125; &#125; return count; &#125;&#125; 当然DFS还可以用递归的系统调用栈：（作者：LeetCode） 123456789101112131415161718192021222324252627282930313233343536class Solution &#123; void dfs(char[][] grid, int r, int c) &#123; int nr = grid.length; int nc = grid[0].length; if (r &lt; 0 || c &lt; 0 || r &gt;= nr || c &gt;= nc || grid[r][c] == '0') &#123; return; &#125; grid[r][c] = '0'; dfs(grid, r - 1, c); dfs(grid, r + 1, c); dfs(grid, r, c - 1); dfs(grid, r, c + 1); &#125; public int numIslands(char[][] grid) &#123; if (grid == null || grid.length == 0) &#123; return 0; &#125; int nr = grid.length; int nc = grid[0].length; int num_islands = 0; for (int r = 0; r &lt; nr; ++r) &#123; for (int c = 0; c &lt; nc; ++c) &#123; if (grid[r][c] == '1') &#123; ++num_islands; dfs(grid, r, c); &#125; &#125; &#125; return num_islands; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"BFS","slug":"BFS","permalink":"https://www.codetool.top/tags/BFS/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"}]},{"title":"leetcode622-设计循环队列","slug":"leetcode622-设计循环队列","date":"2019-11-24T11:22:09.000Z","updated":"2019-11-24T11:34:19.015Z","comments":true,"path":"article/leetcode622-设计循环队列/","link":"","permalink":"https://www.codetool.top/article/leetcode622-%E8%AE%BE%E8%AE%A1%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97/","excerpt":"","text":"原题设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为“环形缓冲器”。 循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。 你的实现应该支持如下操作： MyCircularQueue(k): 构造器，设置队列长度为 k 。 Front: 从队首获取元素。如果队列为空，返回 -1 。 Rear: 获取队尾元素。如果队列为空，返回 -1 。 enQueue(value): 向循环队列插入一个元素。如果成功插入则返回真。 deQueue(): 从循环队列中删除一个元素。如果成功删除则返回真。 isEmpty(): 检查循环队列是否为空。 isFull(): 检查循环队列是否已满。 示例: MyCircularQueue circularQueue = new MycircularQueue(3); // 设置长度为 3circularQueue.enQueue(1); // 返回 truecircularQueue.enQueue(2); // 返回 truecircularQueue.enQueue(3); // 返回 truecircularQueue.enQueue(4); // 返回 false，队列已满circularQueue.Rear(); // 返回 3circularQueue.isFull(); // 返回 truecircularQueue.deQueue(); // 返回 truecircularQueue.enQueue(4); // 返回 truecircularQueue.Rear(); // 返回 4 提示: 所有的值都在 0 至 1000 的范围内； 操作数将在 1 至 1000 的范围内； 请不要使用内置的队列库。 解法思想根据循环队列的定义来实现，理解head指针和tail指针指向的位置。通常情况下：添加元素，tail++。删除元素，head++。当tail或head处于数组的最末端的时候：操作之后应该指向下标0。当数组为空：不能移除元素。当数组满了：不能添加元素。 代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374class MyCircularQueue &#123; int[] queue; int head; int tail; int size; /** Initialize your data structure here. Set the size of the queue to be k. */ public MyCircularQueue(int k) &#123; queue = new int[k]; size = 0; head = -1; tail = -1; &#125; /** Insert an element into the circular queue. Return true if the operation is successful. */ public boolean enQueue(int value) &#123; if(isFull()) return false; if(tail == queue.length-1) &#123; tail = 0; queue[0] = value; &#125; else queue[++tail] = value; size++; if(head==-1) head = 0; return true; &#125; /** Delete an element from the circular queue. Return true if the operation is successful. */ public boolean deQueue() &#123; if(isEmpty()) return false; if(size==1)&#123; tail = -1; head = -1; &#125;else if(head == queue.length-1)&#123; head = 0; &#125;else&#123; head++; &#125; size--; return true; &#125; /** Get the front item from the queue. */ public int Front() &#123; if(head==-1) return -1; return queue[head]; &#125; /** Get the last item from the queue. */ public int Rear() &#123; if(tail==-1) return -1; return queue[tail]; &#125; /** Checks whether the circular queue is empty or not. */ public boolean isEmpty() &#123; return size == 0; &#125; /** Checks whether the circular queue is full or not. */ public boolean isFull() &#123; return size == queue.length; &#125;&#125;/** * Your MyCircularQueue object will be instantiated and called as such: * MyCircularQueue obj = new MyCircularQueue(k); * boolean param_1 = obj.enQueue(value); * boolean param_2 = obj.deQueue(); * int param_3 = obj.Front(); * int param_4 = obj.Rear(); * boolean param_5 = obj.isEmpty(); * boolean param_6 = obj.isFull(); */","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"队列","slug":"队列","permalink":"https://www.codetool.top/tags/%E9%98%9F%E5%88%97/"}]},{"title":"leetcode283-移动零","slug":"leetcode283-移动零","date":"2019-11-23T12:01:11.000Z","updated":"2019-11-23T12:14:19.185Z","comments":true,"path":"article/leetcode283-移动零/","link":"","permalink":"https://www.codetool.top/article/leetcode283-%E7%A7%BB%E5%8A%A8%E9%9B%B6/","excerpt":"","text":"原题给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。 示例: 输入: [0,1,0,3,12]输出: [1,3,12,0,0] 说明: 必须在原数组上操作，不能拷贝额外的数组。 尽量减少操作次数。 解法思想双指针解法，i始终不经过0，如果j遍历到了非0元素，i++，并把非0元素赋值给i。 代码12345678910111213class Solution &#123; public void moveZeroes(int[] nums) &#123; int i=0; for(int j=0;j&lt;nums.length;j++)&#123; if (nums[j]!=0) &#123; nums[i++]=nums[j]; &#125; &#125; for (int j=i;j&lt;nums.length;j++)&#123; nums[j]=0; &#125; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode26-删除排序数组中的重复项","slug":"leetcode26-删除排序数组中的重复项","date":"2019-11-23T11:37:25.000Z","updated":"2019-11-23T12:17:02.212Z","comments":true,"path":"article/leetcode26-删除排序数组中的重复项/","link":"","permalink":"https://www.codetool.top/article/leetcode26-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/","excerpt":"","text":"原题给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。 示例 1: 给定数组 nums = [1,1,2],函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。你不需要考虑数组中超出新长度后面的元素。 示例 2: 给定 nums = [0,0,1,1,1,2,2,3,3,4],函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。你不需要考虑数组中超出新长度后面的元素。 说明: 为什么返回数值是整数，但输出的答案是数组呢? 请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。 你可以想象内部操作如下: // nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝int len = removeDuplicates(nums); // 在函数里修改输入数组对于调用者是可见的。// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。for (int i = 0; i &lt; len; i++) { print(nums[i]);} 解法思想双指针解法，i始终停留在第一个出现的重复元素上，j一旦遇到不重复的元素，i++，然后将不重复的元素赋给nums[i]。 代码12345678910111213class Solution &#123; public int removeDuplicates(int[] nums) &#123; int i = 0; int j = 0; int count = 0; while(j&lt;nums.length-1)&#123; j++; if(nums[j]!=nums[i]) nums[++i] = nums[j]; &#125; return i+1; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode557-反转字符串中的单词III","slug":"leetcode557-反转字符串中的单词III","date":"2019-11-23T11:12:52.000Z","updated":"2019-11-23T11:20:42.656Z","comments":true,"path":"article/leetcode557-反转字符串中的单词III/","link":"","permalink":"https://www.codetool.top/article/leetcode557-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8DIII/","excerpt":"","text":"原题给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。 示例1: 输入: “Let’s take LeetCode contest”输出: “s’teL ekat edoCteeL tsetnoc” 注意： 在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。 解法思想翻转字符串可以用StringBuffer的reverse方法。 代码123456789101112class Solution &#123; public String reverseWords(String s) &#123; String[] words = s.split(\" \"); StringBuilder sb = new StringBuilder(); for(String word:words)&#123; sb.append(new StringBuffer(word).reverse().toString()); sb.append(\" \"); &#125; return sb.toString().trim(); &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"字符串","slug":"字符串","permalink":"https://www.codetool.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}]},{"title":"ArrayList源码分析","slug":"ArrayList源码分析","date":"2019-11-22T09:17:44.000Z","updated":"2019-12-10T07:49:58.056Z","comments":true,"path":"article/ArrayList源码分析/","link":"","permalink":"https://www.codetool.top/article/ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","excerpt":"","text":"ArrayList的Hierarchy： ArrayList层次结构 父类们：Collection接口研究AbstractCollection源码分析 先来看看List接口： List接口List代表有序集合，元素可以重复。 List家族一览： List层次 默认实现方法： default void replaceAll(UnaryOperator operator);以指定的方法替换List中的所有元素，UnaryOperator是一个函数式接口，输入一个类型对象，返回一个同类型对象。 1234567default void replaceAll(UnaryOperator&lt;E&gt; operator) &#123; Objects.requireNonNull(operator); final ListIterator&lt;E&gt; li = this.listIterator(); while (li.hasNext()) &#123; li.set(operator.apply(li.next())); &#125;&#125; 示例： 12345List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();list.add(1);list.add(3);list.add(5);list.replaceAll(a-&gt;a+1); //list = [2,4,6] default void sort(Comparator&lt;? super E&gt; c);根据排序方法排序。还是先转为了Array再使用Arrays的sort方法进行排序。 123456789default void sort(Comparator&lt;? super E&gt; c) &#123; Object[] a = this.toArray(); Arrays.sort(a, (Comparator) c); ListIterator&lt;E&gt; i = this.listIterator(); for (Object e : a) &#123; i.next(); i.set((E) e); &#125;&#125; AbstractList接口AbstractList接口继承自AbstractCollection，为什么要提它呢，因为里面有个重要的字段modCount，用于迭代器遍历元素时检查列表中的元素是否发生结构性变化。 参考下面“重要的内部类”中迭代器里next方法的实现。 重要的字段transient Object[] elementData; ArrayList的元素存储在这个数组中。 private int size; 记录空间大小。 重要的内部类Itr实现了迭代器Iterator，ListItr实现了集合迭代器ListIterator两者的介绍： 谈谈java中的Iterator next的实现： 1234567891011public E next() &#123; checkForComodification(); int i = cursor; if (i &gt;= size) throw new NoSuchElementException(); Object[] elementData = ArrayList.this.elementData; if (i &gt;= elementData.length) throw new ConcurrentModificationException(); cursor = i + 1; return (E) elementData[lastRet = i];&#125; 其中的checkForComodification()： 1234final void checkForComodification() &#123; if (modCount != expectedModCount) throw new ConcurrentModificationException();&#125; modCount在ArrayList每次add或者remove它的值都会加1。在初始化迭代器的时候，令expectedModCount = modCount，在迭代器迭代的过程中，如果modCount被改变了，就会造成expectedModCount不等于modCount，抛出ConcurrentModificationException警告。 比如下面这段程序就会抛出警告： 为什么在迭代器循环的时候不让使用list.remove修改元素呢？ 有多线程下被影响的考虑，更重要的是，强制了在迭代器迭代的时候只能使用iterator.remove移除元素. 比如上面这段程序应该改成： 构造方法已知ArrayList的元素是存放于一个数组中，那么在初始化一个ArrayList对象的时候会分配一个多大的数组？ 先看两个构造方法： 123public ArrayList() &#123; this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;&#125; 其中常量DEFAULTCAPACITY_EMPTY_ELEMENTDATA是一个空数组： 1private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;; 12345678910public ArrayList(int initialCapacity) &#123; if (initialCapacity &gt; 0) &#123; this.elementData = new Object[initialCapacity]; &#125; else if (initialCapacity == 0) &#123; this.elementData = EMPTY_ELEMENTDATA; &#125; else &#123; throw new IllegalArgumentException(\"Illegal Capacity: \"+ initialCapacity); &#125;&#125; 使用一个初始容量初始化ArrayList。如果传入的参数大于0，则分配一个这么大的数组。注意到如果这里的initialCapacity等于0，令其等于常量EMPTY_ELEMENTDATA也是一个空数组。 那为什么要区分EMPTY_ELEMENTDATA和DEFAULTCAPACITY_EMPTY_ELEMENTDATA呢？ 因为他们是两个不同对象的引用，ArrayList通过这个区分当前对象是用无参构造方法创建的还是由ArrayList(0)这样一个构造方法创建的 在后文“重要的内部方法”中的calculateCapacity方法，当第一个元素被加进来的时候就能知道应该扩容多少。 重要的内部方法空间分配相关private static int calculateCapacity(Object[] elementData, int minCapacity);123456private static int calculateCapacity(Object[] elementData, int minCapacity) &#123; if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123; return Math.max(DEFAULT_CAPACITY, minCapacity); &#125; return minCapacity;&#125; 这个方法用于计算： 当原来数组为空，第一次插入元素的时候，数组应该分配多少空间，DEFAULTCAPACITY_EMPTY_ELEMENTDATA呼应了上面构造方法中的无参构造方法，常量DEFAULT_CAPACITY=10。 这说明：如果ArrayList是以无参构造方法建立的，在添加第一个元素时会直接分配10个元素的空间。 private void grow(int minCapacity);123456789101112private void grow(int minCapacity) &#123; // overflow-conscious code int oldCapacity = elementData.length; //即newCapacity = 1.5*oldCapacity int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1); if (newCapacity - minCapacity &lt; 0) newCapacity = minCapacity; if (newCapacity - MAX_ARRAY_SIZE &gt; 0) newCapacity = hugeCapacity(minCapacity); // minCapacity is usually close to size, so this is a win: elementData = Arrays.copyOf(elementData, newCapacity);&#125; 可以看出数组是以1.5倍为基准扩容的，如果1.5倍后大于MAX_ARRAY_SIZE (Integer.MAX_VALUE - 8)，则使用hugeCapacity(minCapacity)确认（size是int类型，不能超过int范围的最大值）。 元素获取、增改相关E elementData(int index);123E elementData(int index) &#123; return (E) elementData[index];&#125; 取元素,就是从数组中获取元素，是get等方法的依赖。 private void rangeCheck(int index);1234private void rangeCheck(int index) &#123; if (index &gt;= size) throw new IndexOutOfBoundsException(outOfBoundsMsg(index));&#125; 边界检查。 rangeCheck方法是提供给get,remove，set之类的方法检查的,是给已经存在元素的集合操作的，范围0至size-1,这个方法把检查负责的职责交给了数组的访问,像get(-1)时会报异常ArrayIndexOutOfBoundsException。 private void rangeCheckForAdd(int index);1234private void rangeCheckForAdd(int index) &#123; if (index &gt; size || index &lt; 0) throw new IndexOutOfBoundsException(outOfBoundsMsg(index));&#125; 这个方法是提供给add和addAll的，会检查负数。因为如果扩容了数组再抛出异常就白扩容了。 总结 ArrayList内部是用数组实现的。 如果使用无参构造函数建立ArrayList，在添加第一个元素的时候会分配10个元素的空间。 ArrayList的扩容是以1.5倍为基准的。 ArrayList是线程不安全的。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://www.codetool.top/tags/jdk/"},{"name":"源码研究","slug":"源码研究","permalink":"https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"},{"name":"集合","slug":"集合","permalink":"https://www.codetool.top/tags/%E9%9B%86%E5%90%88/"}]},{"title":"leetcode151-翻转字符串里的单词","slug":"leetcode151-翻转字符串里的单词","date":"2019-11-22T09:01:15.000Z","updated":"2019-11-22T09:09:50.096Z","comments":true,"path":"article/leetcode151-翻转字符串里的单词/","link":"","permalink":"https://www.codetool.top/article/leetcode151-%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8C%E7%9A%84%E5%8D%95%E8%AF%8D/","excerpt":"","text":"原题给定一个字符串，逐个翻转字符串中的每个单词。 示例 1: 输入: “the sky is blue”输出: “blue is sky the” 示例 2: 输入: “&nbsp;&nbsp;hello world!&nbsp;&nbsp;”输出: “world! hello”解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。 示例 3: 输入: “a good&nbsp;&nbsp;&nbsp;example”输出: “example good a”解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。 说明: 无空格字符构成一个单词。 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。 解法思想直接使用jdk中String的trim()和split()方法得到单词的数组，或者遍历字符串字符，记录单词数组。再反向遍历输出。 代码12345678910111213class Solution &#123; public String reverseWords(String s) &#123; //\"\\\\s+\"代表正则表达式1个或多个空白字符 String[] words = s.trim().split(\"\\\\s+\"); int size = words.length; StringBuilder str = new StringBuilder(); for(int i = 0;i&lt;size;i++)&#123; str.append(words[size-1-i]); if(i!=size-1) str.append(\" \"); &#125; return str.toString(); &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"字符串","slug":"字符串","permalink":"https://www.codetool.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}]},{"title":"leetcode119-杨辉三角II","slug":"leetcode119-杨辉三角II","date":"2019-11-22T08:54:01.000Z","updated":"2019-11-22T09:00:06.414Z","comments":true,"path":"article/leetcode119-杨辉三角II/","link":"","permalink":"https://www.codetool.top/article/leetcode119-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92II/","excerpt":"","text":"原题给定一个非负索引 k，其中 k ≤ 33，返回杨辉三角的第 k 行。在杨辉三角中，每个数是它左上方和右上方的数的和。 示例: 输入: 3输出: [1,3,3,1] 进阶： 你可以优化你的算法到 O(k) 空间复杂度吗？ 解法思想可以利用leetcode118-杨辉三角中的函数来解决。 代码123456789101112131415161718192021class Solution &#123; public List&lt;Integer&gt; getRow(int rowIndex) &#123; List&lt;Integer&gt; list = new ArrayList(); list.add(1); if(rowIndex == 0) return list; return getRowByPrev(rowIndex,getRow(rowIndex-1)); &#125; //通过上一行计算第n行 public List&lt;Integer&gt; getRowByPrev(int n,List&lt;Integer&gt; nums)&#123; List&lt;Integer&gt; ret = new ArrayList(); ret.add(1); for(int i=1;i&lt;(n+2)/2;i++)&#123; ret.add(nums.get(i-1)+nums.get(i)); &#125; int size = (n+1)/2; for(int i=0;i&lt;size;i++)&#123; ret.add(ret.get(size-i-1)); &#125; return ret; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"数组","slug":"数组","permalink":"https://www.codetool.top/tags/%E6%95%B0%E7%BB%84/"}]},{"title":"leetcode189-旋转数组","slug":"leetcode189-旋转数组","date":"2019-11-22T08:45:26.000Z","updated":"2019-11-22T08:52:43.215Z","comments":true,"path":"article/leetcode189-旋转数组/","link":"","permalink":"https://www.codetool.top/article/leetcode189-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84/","excerpt":"","text":"原题给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。 示例1: 输入: [1,2,3,4,5,6,7] 和 k = 3输出: [5,6,7,1,2,3,4]解释:向右旋转 1 步: [7,1,2,3,4,5,6]向右旋转 2 步: [6,7,1,2,3,4,5]向右旋转 3 步: [5,6,7,1,2,3,4] 示例2: 输入: [-1,-100,3,99] 和 k = 2输出: [3,99,-1,-100]解释:向右旋转 1 步: [99,-1,-100,3]向右旋转 2 步: [3,99,-1,-100] 说明: 尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。 要求使用空间复杂度为 O(1) 的 原地 算法。 解法思想将旋转点前后的部分交换。注意当k大于数组大小size的情况相当于k=k%size的情况 代码12345678910111213141516171819202122class Solution &#123; public void rotate(int[] nums, int k) &#123; int size = nums.length; if(k==size) return; //k大于size的情况 if(k&gt;size) k = k%size; //用另一个数组暂时存放结果 int[] rotate = new int[size]; //将旋转点后面的部分移到新数组前面来 for(int i = 0;i&lt;k;i++)&#123; rotate[i] = nums[size-k+i]; &#125; //将旋转点前面的部分移到新数组后面去 for(int i = k;i&lt;size;i++)&#123; rotate[i] = nums[i-k]; &#125; //将新数组中的值赋值回原数组 for(int i = 0;i&lt;size;i++)&#123; nums[i] = rotate[i]; &#125; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"数组","slug":"数组","permalink":"https://www.codetool.top/tags/%E6%95%B0%E7%BB%84/"}]},{"title":"leetcode209-长度最小的子数组","slug":"leetcode209-长度最小的子数组","date":"2019-11-20T10:06:18.000Z","updated":"2019-11-20T10:15:57.146Z","comments":true,"path":"article/leetcode209-长度最小的子数组/","link":"","permalink":"https://www.codetool.top/article/leetcode209-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/","excerpt":"","text":"原题给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的连续子数组。如果不存在符合条件的连续子数组，返回 0。 示例: 输入: s = 7, nums = [2,3,1,2,4,3]输出: 2解释: 子数组 [4,3] 是该条件下的长度最小的连续子数组。 进阶: 如果你已经完成了O(n) 时间复杂度的解法, 请尝试 O(n log n) 时间复杂度的解法。 解法思想使用两个指针i、j从下标为0处开始遍历。如果i-j内的总数小于s，将j向后移动，如果i-j内的总数大于s，将i向后移动，直到获取所有子数组的长度，并比较出最短长度。 代码1234567891011121314151617181920class Solution &#123; public int minSubArrayLen(int s, int[] nums) &#123; int i = 0; int j = -1; int size = nums.length; int sum = 0; int min = 0; while(i&lt;size&amp;&amp;j&lt;size)&#123; if(sum&gt;=s)&#123; if(min==0) min = j-i+1; else min = j-i+1&lt;min?j-i+1:min; sum -= nums[i++]; &#125;else&#123; if(j==size-1) return min; sum += nums[++j]; &#125; &#125; return min; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode485-最大连续1的个数","slug":"leetcode485-最大连续1的个数","date":"2019-11-20T09:58:18.000Z","updated":"2019-11-20T10:07:47.063Z","comments":true,"path":"article/leetcode485-最大连续1的个数/","link":"","permalink":"https://www.codetool.top/article/leetcode485-%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/","excerpt":"","text":"原题给定一个二进制数组， 计算其中最大连续1的个数。 示例 1: 输入： [1,1,0,1,1,1]输出： 3解释： 开头的两位和最后的三位都是连续1，所以最大连续1的个数是 3. 注意： 输入的数组只包含0和1。 输入数组的长度是正整数，且不超过 10,000。 解法思想使用一个数遍历数组，另一个数记录遇到的连续的1的个数，记录最大值。 代码1234567891011121314151617class Solution &#123; public int findMaxConsecutiveOnes(int[] nums) &#123; int j=0; int max=0; for(int i:nums)&#123; if(i==1)&#123; j++; &#125;else&#123; if(j&gt;max) max=j; j=0; &#125; &#125; if(j&gt;max) max=j; return max; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode27-移除元素","slug":"leetcode27-移除元素","date":"2019-11-20T09:50:02.000Z","updated":"2019-11-20T09:57:52.942Z","comments":true,"path":"article/leetcode27-移除元素/","link":"","permalink":"https://www.codetool.top/article/leetcode27-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/","excerpt":"","text":"原题给定一个数组 nums 和一个值 val*，你需要原地移除所有数值等于 *val 的元素，返回移除后数组的新长度。 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。 示例 1: 给定 nums = [3,2,2,3], val = 3,函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。 示例 2: 给定 nums = [0,1,2,2,3,0,4,2], val = 2,函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。 说明: 为什么返回数值是整数，但输出的答案是数组呢? 请注意，输入数组是以 “引用” 方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。 你可以想象内部操作如下: // nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝int len = removeElement(nums, val); // 在函数里修改输入数组对于调用者是可见的。// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。for (int i = 0; i &lt; len; i++) { print(nums[i]);} 解法思想我们继续使用两个指针：一个仍然用于迭代，而第二个指针总是指向下一次添加的位置。 代码123456789101112class Solution &#123; public int removeElement(int[] nums, int val) &#123; int k = 0; for(int i = 0;i&lt;nums.length;i++)&#123; if(nums[i]!=val)&#123; nums[k] = nums[i]; k++; &#125; &#125; return k; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode167-两数之和II-输入有序数组","slug":"leetcode167-两数之和II-输入有序数组","date":"2019-11-20T09:44:33.000Z","updated":"2019-11-20T10:16:12.932Z","comments":true,"path":"article/leetcode167-两数之和II-输入有序数组/","link":"","permalink":"https://www.codetool.top/article/leetcode167-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8CII-%E8%BE%93%E5%85%A5%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/","excerpt":"","text":"原题给定一个已按照 升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。 函数应该返回这两个下标值index1和index2，其中index1必须小于index2。 说明: 返回的下标值（index1 和 index2）不是从零开始的。 你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。 示例: 输入: numbers = [2, 7, 11, 15], target = 9输出: [1,2]解释 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。 解法思想因为给的数组是有序的，可以使用双指针逼近目标数。 代码1234567891011121314151617181920class Solution &#123; public int[] twoSum(int[] numbers, int target) &#123; int[] index = new int[2]; int index1 = 0; int index2 = numbers.length - 1; while (index1 &lt; index2) &#123; if (numbers[index1] + numbers[index2] &gt; target) index2--; else if (numbers[index1] + numbers[index2] &lt; target) index1++; //找到了 else &#123; index[0] = index1 + 1; index[1] = index2 + 1; break; &#125; &#125; return index; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"AbstractCollection源码分析","slug":"AbstractCollection源码分析","date":"2019-11-18T13:40:38.000Z","updated":"2019-12-06T14:39:59.322Z","comments":true,"path":"article/AbstractCollection源码分析/","link":"","permalink":"https://www.codetool.top/article/AbstractCollection%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","excerpt":"","text":"上次谈到了Collection接口研究 这次来看看其中的一个子类，但也是个抽象类：AbstractCollection。用于实现基本的Collection结构，提供给普通用户继承使用。也是JDK集合类的父类，部分方法是没有被重载的。 相比Collection接口并没有新增公开方法，但它提供了许多方法的默认实现。 public boolean contains(Object o);提供了一个默认实现： 12345678910111213public boolean contains(Object o) &#123; Iterator&lt;E&gt; it = iterator(); if (o==null) &#123; while (it.hasNext()) if (it.next()==null) return true; &#125; else &#123; while (it.hasNext()) if (o.equals(it.next())) return true; &#125; return false;&#125; 很容易理解，也很依赖于iterator()和equals()方法的实现 public boolean isEmpty();123public boolean isEmpty() &#123; return size() == 0;&#125; 依赖于size()方法的实现 public Object[] toArray();1234567891011public Object[] toArray() &#123; // Estimate size of array; be prepared to see more or fewer elements Object[] r = new Object[size()]; Iterator&lt;E&gt; it = iterator(); for (int i = 0; i &lt; r.length; i++) &#123; if (! it.hasNext()) // fewer elements than expected return Arrays.copyOf(r, i); r[i] = it.next(); &#125; return it.hasNext() ? finishToArray(r, it) : r;&#125; 注意该实现判断了iterator遍历的元素个数可能跟size()的结果不同的情况。并且以iterator遍历的所有元素为准。 private static T[] finishToArray(T[] r, Iterator&lt;?&gt; it);是toArray()函数调用的一个私密静态方法，它将it迭代器遍历的所有元素存入一个数组，并且不依赖size()的实现，可以给传入的数组扩容。 12345678910111213141516private static &lt;T&gt; T[] finishToArray(T[] r, Iterator&lt;?&gt; it) &#123; int i = r.length; while (it.hasNext()) &#123; int cap = r.length;//容量capacity的概念 if (i == cap) &#123; int newCap = cap + (cap &gt;&gt; 1) + 1;// n+n/2+1扩容 // overflow-conscious code if (newCap - MAX_ARRAY_SIZE &gt; 0) newCap = hugeCapacity(cap + 1); //新容量等于Integer.MAX_VALUE或MAX_ARRAY_SIZE r = Arrays.copyOf(r, newCap); &#125; r[i++] = (T)it.next(); &#125; // trim if overallocated return (i == r.length) ? r : Arrays.copyOf(r, i);&#125; private static int hugeCapacity(int minCapacity);是finishToArray()函数调用的用于容量逼近Integer.MAX_VALUE给数组扩容的方法 123456789private static int hugeCapacity(int minCapacity) &#123; //超出int范围 if (minCapacity &lt; 0) // overflow throw new OutOfMemoryError (\"Required array size too large\"); return (minCapacity &gt; MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE;&#125; public boolean add(E e);123public boolean add(E e) &#123; throw new UnsupportedOperationException();&#125; 不允许单个添加元素。 public boolean remove(Object o);12345678910111213141516171819public boolean remove(Object o) &#123; Iterator&lt;E&gt; it = iterator(); if (o==null) &#123; while (it.hasNext()) &#123; if (it.next()==null) &#123; it.remove(); return true; &#125; &#125; &#125; else &#123; while (it.hasNext()) &#123; if (o.equals(it.next())) &#123; it.remove(); return true; &#125; &#125; &#125; return false;&#125; 注意null要分开来判断，因为null不能被equals()调用删除的方式是通过迭代器的remove()方法 public boolean containsAll(Collection&lt;?&gt; c);123456public boolean containsAll(Collection&lt;?&gt; c) &#123; for (Object e : c) if (!contains(e)) return false; return true;&#125; 循环调用contains()方法判断 public boolean addAll(Collection&lt;? extends E&gt; c)1234567public boolean addAll(Collection&lt;? extends E&gt; c) &#123; boolean modified = false; for (E e : c) if (add(e)) modified = true; return modified;&#125; 这个操作不能保证所有元素都被添加成功了，这依赖于add()方法的实现，但只要有一个元素被添加成功了，就返回true。 public boolean removeAll(Collection&lt;?&gt; c)123456789101112public boolean removeAll(Collection&lt;?&gt; c) &#123; Objects.requireNonNull(c); boolean modified = false; Iterator&lt;?&gt; it = iterator(); while (it.hasNext()) &#123; if (c.contains(it.next())) &#123; it.remove(); modified = true; &#125; &#125; return modified;&#125; 同理，该操作也不能保证所有元素都被移除成功了，但只要有一个元素被移除成功了，就返回true。 public boolean retainAll(Collection&lt;?&gt; c)123456789101112public boolean retainAll(Collection&lt;?&gt; c) &#123; Objects.requireNonNull(c); boolean modified = false; Iterator&lt;E&gt; it = iterator(); while (it.hasNext()) &#123; if (!c.contains(it.next())) &#123; it.remove(); modified = true; &#125; &#125; return modified;&#125; 和removeAll()的实现相反，将c中含有的元素保留了下来。 public void clear();1234567public void clear() &#123; Iterator&lt;E&gt; it = iterator(); while (it.hasNext()) &#123; it.next(); it.remove(); &#125;&#125; 移除所有元素。 public String toString()123456789101112131415public String toString() &#123; Iterator&lt;E&gt; it = iterator(); if (! it.hasNext()) return \"[]\"; StringBuilder sb = new StringBuilder();//sb sb.append('['); for (;;) &#123; E e = it.next(); sb.append(e == this ? \"(this Collection)\" : e); if (! it.hasNext()) return sb.append(']').toString(); sb.append(',').append(' '); &#125;&#125; 以[*,*,*...]的形式输出字符串，还考虑到了元素可能是它本身的情况","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://www.codetool.top/tags/jdk/"},{"name":"源码研究","slug":"源码研究","permalink":"https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"},{"name":"集合","slug":"集合","permalink":"https://www.codetool.top/tags/%E9%9B%86%E5%90%88/"}]},{"title":"leetcode561-数组拆分I","slug":"leetcode561-数组拆分I","date":"2019-11-18T11:59:58.000Z","updated":"2019-11-18T12:12:44.777Z","comments":true,"path":"article/leetcode561-数组拆分I/","link":"","permalink":"https://www.codetool.top/article/leetcode561-%E6%95%B0%E7%BB%84%E6%8B%86%E5%88%86I/","excerpt":"","text":"原题给定长度为 2n 的数组, 你的任务是将这些数分成 n 对, 例如 (a1, b1), (a2, b2), …, (an, bn) ，使得从1 到 n 的 min(ai, bi) 总和最大。 示例 1: 输入：[1,4,3,2]输出： 4解释: n 等于 2, 最大总和为 4 = min(1, 2) + min(3, 4). 提示: n 是正整数,范围在 [1, 10000]. 数组中的元素范围在 [-10000, 10000]. 解法思想通过观察发现，最后总和应该是所有数排完序后偶数下标的元素的值的总和。 代码123456789101112class Solution &#123; public int arrayPairSum(int[] nums) &#123; Arrays.sort(nums); int i = 0; int sum = 0; while(i&lt;nums.length)&#123; sum+=nums[i]; i+=2; &#125; return sum; &#125;&#125; 还有一种排序方法：因为已知数的范围都是在[-10000, 10000]中，可以利用额外的空间排序。这种方法由于排序更快，时间复杂度较低，但只适用于数值范围已知且对空间复杂度要求不高的情况。 1234567891011121314public class Solution &#123; public int arrayPairSum(int[] nums) &#123; int[] arr = new int[20001]; int lim = 10000; for (int num: nums) arr[num + lim]++; int d = 0, sum = 0; for (int i = -10000; i &lt;= 10000; i++) &#123; sum += (arr[i + lim] + 1 - d) / 2 * i; d = (2 + arr[i + lim] - d) % 2; &#125; return sum; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode344-反转字符串","slug":"leetcode344-反转字符串","date":"2019-11-18T11:57:35.000Z","updated":"2019-11-18T11:58:34.267Z","comments":true,"path":"article/leetcode344-反转字符串/","link":"","permalink":"https://www.codetool.top/article/leetcode344-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/","excerpt":"","text":"原题编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组char[]的形式给出。 不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。 你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。 示例 1: 输入：[“h”,”e”,”l”,”l”,”o”]输出：[“o”,”l”,”l”,”e”,”h”] 示例 2: 输入：[“H”,”a”,”n”,”n”,”a”,”h”]输出：[“h”,”a”,”n”,”n”,”a”,”H”] 解法思想将第一个元素与末尾进行交换，再向前移动到下一个元素，并不断地交换，直到它到达中间位置。 我们可以同时使用两个指针来完成迭代：一个从第一个元素开始，另一个从最后一个元素开始。持续交换它们所指向的元素，直到这两个指针相遇。 代码1234567891011121314class Solution &#123; public void reverseString(char[] s) &#123; char temp; int i = 0; int j = s.length-1; while(i&lt;=j)&#123; temp = s[i]; s[i] = s[j]; s[j] = temp; i++; j--; &#125; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode14-最长公共前缀","slug":"leetcode14-最长公共前缀","date":"2019-11-18T11:43:52.000Z","updated":"2019-11-18T11:57:54.843Z","comments":true,"path":"article/leetcode14-最长公共前缀/","link":"","permalink":"https://www.codetool.top/article/leetcode14-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/","excerpt":"","text":"原题编写一个函数来查找字符串数组中的最长公共前缀。 如果不存在公共前缀，返回空字符串 “”。 示例 1: 输入: [“flower”,”flow”,”flight”]输出: “fl” 示例 2: 输入: [“dog”,”racecar”,”car”]输出: “”解释: 输入不存在公共前缀。 说明: 所有输入只包含小写字母 a-z 。 解法思想以第一个字符串的每一个位置上的字符为基准，依次比对其余字符串对应位置上的字符，如果每个字符串对应的位置上都是这个字符，则将其append到结果上，一旦遇到一个字符不是公有的立刻将结果返回。 代码1234567891011121314151617181920class Solution &#123; public String longestCommonPrefix(String[] strs) &#123; int size = strs.length; if(size==0) return \"\"; if(size==1) return strs[0];//一个字符串直接返回本身 StringBuilder str = new StringBuilder();//为了避免java连接字符串的低效率使用StringBuilder for(int i = 0;i &lt; strs[0].length();i++)&#123; char letter = strs[0].charAt(i); for(int j = 1;j &lt; size;j++)&#123; //依次检查其余字符串各个字符是否对应第一个字符串中的字符 //为了避免其他字符串的长度小于第一个字符串，使用try捕获异常 try&#123; if(strs[j].charAt(i)!=letter) return str.toString(); &#125;catch(Exception e)&#123; return str.toString();&#125; &#125; str.append(letter); &#125; return str.toString(); &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"字符串","slug":"字符串","permalink":"https://www.codetool.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}]},{"title":"leetcode28-实现strStr()","slug":"leetcode28-实现strStr","date":"2019-11-15T10:19:05.000Z","updated":"2019-11-18T11:37:18.692Z","comments":true,"path":"article/leetcode28-实现strStr/","link":"","permalink":"https://www.codetool.top/article/leetcode28-%E5%AE%9E%E7%8E%B0strStr/","excerpt":"","text":"原题实现 strStr() 函数。 给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回 -1。 示例 1: 输入: haystack = “hello”, needle = “ll”输出: 2 示例 2: 输入: haystack = “aaaaa”, needle = “bba”输出: -1 说明: 当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。 对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。 解法JDK API在leetcode上，当然可以投机取巧地使用String.indexof()方法，不用重复造轮子： 12345class Solution &#123; public int strStr(String haystack, String needle) &#123; return haystack.indexOf(needle); &#125;&#125; 但这是一个经典的字符串精准模式匹配问题，历史上出现过很多解决这个问题的算法，掌握它们的思想还是有必要的： BF算法（朴素算法）思想这是最直观、最简单的算法。从主串的第start个字符起和模式的第1个字符比较，如果相等继续逐个比较后续字符。比较过程中一旦发现不相等的情况，则回溯至主串中的第start+1个字符位置处，重新与模式P的字符进行比较。该算法效率较低。 代码123456789101112131415class Solution &#123; public int strStr(String haystack, String needle) &#123; int mainLen = haystack.length(); int subLen = needle.length(); if(needle.equals(\"\")) return 0;//注意模式字符串为空的情况 for(int i=0;i&lt;mainLen;i++)&#123; for(int j =0;j&lt;subLen;j++)&#123; if(!(i+j&lt;mainLen)) return -1;//主串下标超出 if(!(haystack.charAt(i+j)==needle.charAt(j))) break; else if(j == subLen-1) return i;//完全匹配，返回主串下标 &#125; &#125; return -1; &#125;&#125; 算法的复杂度为O[(i-j)j] MP算法思路 指针不回溯，利用已得到的“部分匹配”结果，将模式向右“滑动”若干位置后继续比较。 参考下面给出的示例：haystack ：&quot;cdnidnidsm&quot;needle：&quot;nidsm&quot;按照BF算法的思想，在比较haystack[2]和needle[0]时，两个字符相等，然而比较到haystack[5]和needle[3]的时候两个字符不等，于是回溯继续向后比较haystack[3]和needle[0]。可是既然能确定haystack[2]-haystack[4]与needle[0]-needle[2]是完全对应的。那么比较haystack[3]和needle[0]实际上相当于比较needle[1]和needle[0]。并且我们知道needle中前三个字符都是不同的。所以只需要从haystack[5]处继续跟needle[0]比较就行了。并且needle中字符的这些关系完全是一开始就可以确定的。 我们称记录模式字符串中各个字符之间关系的函数为失效函数。失效函数的定义域是模式字符串在“失配”前匹配的字符串个数。取值j属于0~Len(P)-1 获取失效函数的方法： 失效函数的取值k满足P0P1…Pk = Pj-kPj-k+1…Pj。如果不存在这个k值，取-1。 直观的看k就是模式字符串前j个字符是否存在前k+1位等于后k+1位。 nidsm的失效函数为： j 0 1 2 3 4 p(j) n i d s m k -1 -1 -1 -1 -1 再举一个例子，caatcat的失效函数为： j 0 1 2 3 4 5 6 p(j) c a a t c a t k -1 -1 -1 -1 0 1 -1 得到了失效函数后，即可使用MP算法进行匹配。假设在某一轮比较中，失配的情况发生在模式P的第j位，如果j=0，进行下一轮比较时，目标指针向后移动一位，模式的起始比较地址回到P0，其他情况进行下一轮比较时，目标指针不发生回溯，而模式P的起始比较地址为j-1对应的失效函数的值+1。 当然也可以把这个值提前算出来便成为了Next()函数： j 0 1 2 3 4 5 6 7 p(j) c a a t c a t Next(j) -1 0 0 0 0 1 2 0 Next(7)可以用于继续匹配（可能要求找出所有匹配的子字符串）。 代码123456789101112131415161718192021222324252627282930313233343536class Solution &#123; //获取next函数 public int[] next(String needle)&#123; int len = needle.length(); int i = 0; int j = -1; int[] next = new int[len+1]; next[0] = -1; while(i &lt; len)&#123; while( j &gt; -1 &amp;&amp; needle.charAt(i)!=needle.charAt(j)) j = next[j];//j会有一个传递的效果，必须前一个i对应的j是1，下一个i对应的j才能是2。如果遇到不同的字符则j清零 next[++i] = ++j; &#125; return next; &#125; public int strStr(String haystack, String needle) &#123; int mainLen = haystack.length(); int subLen = needle.length(); if(needle.equals(\"\")) return 0;//注意模式字符串为空的情况 if(mainLen&lt;subLen) return -1; int[] next = next(needle); int i = 0; int j = 0; while(j &lt; mainLen)&#123; while(i&gt;-1 &amp;&amp; needle.charAt(i) != haystack.charAt(j)) i = next[i]; i++; j++; if(i &gt;= subLen)&#123; return j-i; &#125; &#125; return -1; &#125;&#125; KMP算法思路在MP算法的基础上，还要避免最长前缀之后的那个字符不等于原来失配的那个字符。下面在已知mpNext表的情况下，给出建立kmpNext表的规则。这个规则分为四种情况： 如果mpNext[j] = 0且Pj = P0，则令kmpNext[j] = -1。 如果mpNext[j] = 0且Pj ≠ P0，则令kmpNext[j] = 0。 如果mpNext[j] ≠ 0且Pj ≠ PmpNext[j]，则令kmpNext[j] = mpNext[j]。 如果mpNext[j] ≠ 0且Pj = PmpNext[j]，则用mpNext[j]的值替换原来mpNext[j]中的j值，直到情况转换为前3种情况的一种，进而递归地求解kmpNext[j]。 j 0 1 2 3 4 5 6 7 p(j) c a a t c a t mpNext(j) -1 0 0 0 0 1 2 0 kmpNext(j) -1 0 0 0 -1 0 2 0 代码123456789101112131415161718192021222324252627282930313233343536373839404142class Solution &#123; //获取kmpNext数组 public int[] next(String needle)&#123; int len = needle.length(); int i = 0; int j = -1; int[] next = new int[len+1]; next[0] = -1; while(i &lt; len-1)&#123; while( j &gt; -1 &amp;&amp; needle.charAt(i)!=needle.charAt(j)) j = next[j]; i++; j++; if(needle.charAt(i) == needle.charAt(j)) next[i] = next[j]; else next[i] = j; &#125; return next; &#125; public int strStr(String haystack, String needle) &#123; int mainLen = haystack.length(); int subLen = needle.length(); if(needle.equals(\"\")) return 0;//注意模式字符串为空的情况 if(mainLen&lt;subLen) return -1; int[] next = next(needle); int i = 0; int j = 0; while(j &lt; mainLen)&#123; while(i&gt;-1 &amp;&amp; needle.charAt(i) != haystack.charAt(j)) i = next[i]; i++; j++; if(i &gt;= subLen)&#123; return j-i; &#125; &#125; return -1; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"字符串","slug":"字符串","permalink":"https://www.codetool.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}]},{"title":"leetcode67-二进制求和","slug":"leetcode67-二进制求和","date":"2019-11-15T09:49:29.000Z","updated":"2019-11-15T10:08:54.588Z","comments":true,"path":"article/leetcode67-二进制求和/","link":"","permalink":"https://www.codetool.top/article/leetcode67-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C/","excerpt":"","text":"原题给定两个二进制字符串，返回他们的和（用二进制表示）。 输入为非空字符串且只包含数字 1 和 0。 示例 1: 输入: a = “11”, b = “1”输出: “100” 示例 2: 输入: a = “1010”, b = “1011”输出: “10101” 解法思想通过加法规则实现，应注意进位的处理和字符的处理。不确定最后的结果是否会多出一位进位，所以会有 2 种处理方式： 第一种，在进行计算时直接拼接字符串，会得到一个反向字符，需要最后再进行翻转 第二种，按照位置给结果字符赋值，最后如果有进位，则在前方进行字符串拼接添加进位 代码 copy了@灵魂画师牧码（guanpengchn）的思路： 12345678910111213141516class Solution &#123; public String addBinary(String a, String b) &#123; StringBuilder ans = new StringBuilder(); int ca = 0;//进位值 for(int i = a.length() - 1, j = b.length() - 1;i &gt;= 0 || j &gt;= 0; i--, j--) &#123; int sum = ca; //将数组长度不够的情况一般化，负数下标对应的值用0计算。 sum += i &gt;= 0 ? a.charAt(i) - '0' : 0; sum += j &gt;= 0 ? b.charAt(j) - '0' : 0; ans.append(sum % 2); ca = sum / 2;//得到进位 &#125; ans.append(ca == 1 ? ca : \"\");//如果最后进位值还为1则添加一位 return ans.reverse().toString();//反转字符串 &#125;&#125; 自己做的凌乱的思路： 12345678910111213141516171819202122232425262728293031323334353637383940414243class Solution &#123; public String addBinary(String a, String b) &#123; //获取两个字符串的长度和最大值最小值 int len_a = a.length(); int len_b = b.length(); int max,min; boolean carry = false;//进位标志 if( len_a &lt;= len_b )&#123; max = len_b; min = len_a; &#125;else&#123; max = len_a; min = len_b; &#125; char[] ret = new char[max]; for( int i = 0 ; i &lt; max ; i++ )&#123; char a_now = i&lt;len_a?a.charAt(len_a-1-i):'0'; char b_now = i&lt;len_b?b.charAt(len_b-1-i):'0'; //列举所有情况手动计算 if(a_now=='1'&amp;&amp;b_now=='1')&#123; ret[max-i-1] = carry?'1':'0'; carry = true; if(i==max-1)&#123; return \"1\"+ String.valueOf(ret);//如果当前为首位则在前面连接一个1 &#125; &#125;else if(a_now=='1'&amp;&amp;b_now=='0'||b_now=='1'&amp;&amp;a_now=='0')&#123; if(carry)&#123; ret[max-i-1] = '0'; if(i==max-1)&#123; return \"1\"+ String.valueOf(ret); &#125; &#125;else&#123; ret[max-i-1] = '1'; &#125; &#125;else if(a_now=='0'&amp;&amp;b_now=='0')&#123; ret[max-i-1] = carry?'1':'0'; carry = false; &#125; &#125; return String.valueOf(ret); &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"字符串","slug":"字符串","permalink":"https://www.codetool.top/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"}]},{"title":"leetcode118-杨辉三角","slug":"leetcode118-杨辉三角","date":"2019-11-15T09:38:00.000Z","updated":"2019-11-15T09:48:01.286Z","comments":true,"path":"article/leetcode118-杨辉三角/","link":"","permalink":"https://www.codetool.top/article/leetcode118-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/","excerpt":"","text":"原题给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。在杨辉三角中，每个数是它左上方和右上方的数的和。 示例: 输入: 5输出:[&nbsp;&nbsp;&nbsp;&nbsp;[1],&nbsp;&nbsp;&nbsp;[1,1],&nbsp;&nbsp;[1,2,1],&nbsp;[1,3,3,1],[1,4,6,4,1]] 解法思想根据上一行生成下一行，避免重复计算 代码12345678910111213141516171819202122232425262728class Solution &#123; public List&lt;List&lt;Integer&gt;&gt; generate(int numRows) &#123; List&lt;Integer&gt; row = new ArrayList(); List&lt;List&lt;Integer&gt;&gt; ret = new ArrayList&lt;List&lt;Integer&gt;&gt;(); for(int n = 0;n&lt;numRows;n++)&#123; row = getRow(n+1,row); ret.add(row); &#125; return ret; &#125; //n:第n行，nums：上一行（n-1行）的列表 public List&lt;Integer&gt; getRow(int n,List&lt;Integer&gt; nums)&#123; List&lt;Integer&gt; ret = new ArrayList(); ret.add(1);//第一个1不需要计算 if(n==1)&#123;//第一行直接返回 return ret; &#125; for(int i=1;i&lt;(n+1)/2;i++)&#123;//由上一行的数相加得到结果 ret.add(nums.get(i-1)+nums.get(i)); &#125; int size = n/2; for(int i=0;i&lt;size;i++)&#123;//镜像处理 ret.add(ret.get(size-i-1)); &#125; return ret; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"数组","slug":"数组","permalink":"https://www.codetool.top/tags/%E6%95%B0%E7%BB%84/"}]},{"title":"leetcode54-螺旋矩阵","slug":"leetcode54-螺旋矩阵","date":"2019-11-15T09:19:53.000Z","updated":"2019-11-15T09:33:18.968Z","comments":true,"path":"article/leetcode54-螺旋矩阵/","link":"","permalink":"https://www.codetool.top/article/leetcode54-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/","excerpt":"","text":"原题给定一个包含 m x n 个元素的矩阵（m 行, n 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。 示例 1: 输入:[ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ]]输出: [1,2,3,6,9,8,7,4,5] 示例 2: 输入:[ [1, 2, 3, 4], [5, 6, 7, 8], [9,10,11,12]]输出: [1,2,3,6,9,8,7,4,5] 解法思想找拐点规律和移动规律： 当横坐标x等于纵坐标y+1时，且之前是向上移动的，拐点向右。 当横坐标x加纵坐标y等于列数减一，且之前是向右移动的，拐点向下。 当行数和横坐标x之差等于列数与纵坐标y之差时，且之前是向下移动的，拐点向左。 当横坐标x加纵坐标y等于行数减一，且之前是向左移动的，拐点向上。 当不满足上述拐点情况时，坐标会随着之前的运动方向继续运动。可以设置代表四个方向运动状态的布尔值来记录运动状态。 代码12345678910111213141516171819202122232425262728293031323334353637class Solution &#123; public List&lt;Integer&gt; spiralOrder(int[][] matrix) &#123; if(matrix==null) return null; int x = matrix.length; List&lt;Integer&gt; ret = new ArrayList&lt;Integer&gt;(); if(x==0) return ret; int y = matrix[0].length;//获取二维数组的行数和列数，排除null和空情况。 int x_now=0,y_now=0; int size = x*y; //代表向各个方向移动的布尔值。 boolean toRight=true,toLeft=false,toTop=false,toBottom=false; for(int i=0;i&lt;size;i++) &#123; ret.add(matrix[x_now][y_now]); if(x_now==y_now+1&amp;&amp;toTop) &#123;//拐向右 toRight=true; toTop=false; &#125;else if(y_now==y-x_now-1&amp;&amp;toRight) &#123;//拐向下 toBottom=true; toRight=false; &#125;else if(x-x_now==y-y_now&amp;&amp;toBottom)&#123;//拐向左 toLeft=true; toBottom=false; &#125;else if(x_now==x-y_now-1&amp;&amp;toLeft) &#123;//拐向上 toTop=true; toLeft=false; &#125; //移动坐标 if(toRight) y_now++; if(toLeft) y_now--; if(toTop) x_now--; if(toBottom) x_now++; &#125; return ret; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"数组","slug":"数组","permalink":"https://www.codetool.top/tags/%E6%95%B0%E7%BB%84/"}]},{"title":"leetcode498-对角线遍历","slug":"leetcode498-对角线遍历","date":"2019-11-14T07:49:09.000Z","updated":"2019-11-15T09:20:36.182Z","comments":true,"path":"article/leetcode498-对角线遍历/","link":"","permalink":"https://www.codetool.top/article/leetcode498-%E5%AF%B9%E8%A7%92%E7%BA%BF%E9%81%8D%E5%8E%86/","excerpt":"","text":"这是一个Z字形编排问题，JEPG的编码过程中也会用到。 原题给定一个含有 M x N 个元素的矩阵（M 行，N 列），请以对角线遍历的顺序返回这个矩阵中的所有元素，对角线遍历如下图所示。 示例: 输入:[ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ]]输出: [1,2,4,7,5,3,6,8,9]解释: 说明: 给定矩阵中的元素总数不会超过 100000 。 解法思想找拐点的规律： 当横坐标x为0，纵坐标y是偶数，且y不是最后一列的时候，拐点向右。 当横坐标x为最后一行，若行数为偶数且纵坐标y为奇数或行数为奇数但纵坐标y为偶数时，拐点向右。 当纵坐标y为0，横坐标x是奇数，且x不是最后一行的时候，拐点向下。 当纵坐标y为最后一列，若列数为偶数且横坐标x为偶数或列数为奇数但横坐标x为奇数时，拐点向右。 其他情况，当横坐标x为偶数且纵坐标y为奇数或x为奇数且y为偶数的时候，拐点向左下 当横坐标x为偶数且纵坐标y为偶数或x为奇数且y为奇数的时候，拐点向右上 代码123456789101112131415161718192021222324252627282930class Solution &#123; public int[] findDiagonalOrder(int[][] matrix) &#123; //获取二维数组的长宽、大小 int x = matrix.length; if(x == 0) return new int[0]; int y = matrix[0].length; int size = x*y; int x_now=0,y_now=0;//落点位置 int[] ret = new int[size];//用于存储并返回的一维数组 int i = 0; while( x_now &lt; x &amp;&amp; y_now &lt; y )&#123; ret[i] = matrix[x_now][y_now]; //存入元素 i++; if((x_now==0&amp;&amp;y_now%2==0&amp;&amp;y_now!=y-1)||(x_now == x-1&amp;&amp;(y_now+x)%2==0))&#123;//向右 y_now += 1; &#125;else if((y_now==0&amp;&amp;x_now%2==1&amp;&amp;x_now!=x-1)||(y_now == y-1&amp;&amp;(x_now+y)%2==1))&#123;//向下 x_now += 1; &#125; else if((x_now+y_now)%2==0)&#123;//向右上 y_now +=1; x_now -=1; &#125;else if((x_now+y_now)%2==1)&#123;//向左下 y_now -=1; x_now +=1; &#125; &#125; return ret; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"数组","slug":"数组","permalink":"https://www.codetool.top/tags/%E6%95%B0%E7%BB%84/"}]},{"title":"leetcode66-加一","slug":"leetcode66-加一","date":"2019-11-14T06:18:26.000Z","updated":"2019-11-15T09:48:36.673Z","comments":true,"path":"article/leetcode66-加一/","link":"","permalink":"https://www.codetool.top/article/leetcode66-%E5%8A%A0%E4%B8%80/","excerpt":"","text":"原题给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。 最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。 你可以假设除了整数 0 之外，这个整数不会以零开头。 示例 1: 输入: [1,2,3]输出: [1,2,4]解释: 输入数组表示数字123。 示例 2: 输入: [4,3,2,1]输出: [4,3,2,2]解释: 输入数组表示数字4321。 解法思想根据加法规则进行计算，应注意进位的处理和全是9的特殊情况 代码 迭代 123456789101112131415161718class Solution &#123; public int[] plusOne(int[] digits) &#123; for(int i = digits.length-1;i&gt;=0;i--)&#123; if(digits[i]!=9) &#123;//不需进位 digits[i] += 1; break;//什么时候不需进位即可退出 &#125;else &#123; if (i == 0) &#123;//首位需进位的特殊情况，需分配一个大一位的数组 int[] ret = new int[digits.length+1]; ret[0] = 1; return ret; &#125; digits[i] = 0;//不是首位，需进位 &#125; &#125; return digits; &#125;&#125; 递归 1234567891011121314151617181920class Solution &#123; public int[] plusOne(int[] digits) &#123; return addOneAtPos(digits, digits.length-1); &#125; private int[] addOneAtPos(int[] num, int pos)&#123;//在pos位上加一 if(num[pos]!=9)&#123;//不需进位 num[pos]+=1; return num;//什么时候不需进位即可返回 &#125; else if(pos&gt;0)&#123;//不是首位，需进位 num[pos]=0; return addOneAtPos(num, pos-1); &#125; else &#123;//首位需进位的特殊情况，需分配一个大一位的数组 int length = num.length; int[] newNum = new int[length+1]; newNum[0]=1; return newNum; &#125; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"数组","slug":"数组","permalink":"https://www.codetool.top/tags/%E6%95%B0%E7%BB%84/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode724-寻找数组的中心索引","slug":"leetcode724-寻找数组的中心索引","date":"2019-11-13T12:15:00.000Z","updated":"2019-11-15T09:20:47.137Z","comments":true,"path":"article/leetcode724-寻找数组的中心索引/","link":"","permalink":"https://www.codetool.top/article/leetcode724-%E5%AF%BB%E6%89%BE%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E5%BF%83%E7%B4%A2%E5%BC%95/","excerpt":"","text":"原题给定一个整数类型的数组nums，请编写一个能够返回数组“中心索引”的方法。 我们是这样定义数组中心索引的：数组中心索引的左侧所有元素相加的和等于右侧所有元素相加的和。 如果数组不存在中心索引，那么我们应该返回 -1。如果数组有多个中心索引，那么我们应该返回最靠近左边的那一个。 示例 1: 输入:nums = [1, 7, 3, 6, 5, 6]输出: 3解释:索引3 (nums[3] = 6) 的左侧数之和(1 + 7 + 3 = 11)，与右侧数之和(5 + 6 = 11)相等。同时, 3 也是第一个符合要求的中心索引。 示例 2: 输入:nums = [1, 2, 3]输出: -1解释:数组中不存在满足此条件的中心索引。 说明: nums的长度范围为 [0, 10000]。 任何一个 nums[i] 将会是一个范围在 [-1000, 1000]的整数。 解法思想避免重复计算，先计算完数组所有元素之和，再划分为两数之和的问题。 代码1234567891011121314151617181920212223242526class Solution &#123; public int pivotIndex(int[] nums) &#123; int i; int frontRet = 0, endRet = 0; //计算所有元素总和 for (int k = 0; k &lt; nums.length; k++) &#123; endRet += nums[k]; &#125; //从左向右试探，计算两部分的值 for (i = 0; i &lt; nums.length; i++) &#123; endRet -= nums[i]; if (frontRet == endRet) &#123; break; &#125; frontRet += nums[i]; &#125; if ((i &lt; 0) || (i &gt;= nums.length)) &#123; i = -1; &#125; return i; &#125;&#125;","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"数组","slug":"数组","permalink":"https://www.codetool.top/tags/%E6%95%B0%E7%BB%84/"}]},{"title":"Collection接口研究","slug":"Collection接口研究","date":"2019-11-13T11:24:33.000Z","updated":"2019-11-22T12:03:39.185Z","comments":true,"path":"article/Collection接口研究/","link":"","permalink":"https://www.codetool.top/article/Collection%E6%8E%A5%E5%8F%A3%E7%A0%94%E7%A9%B6/","excerpt":"","text":"以下内容基于jdk1.8 接口Collection分析 img 该接口实现了接口Iterable 方法： int size();返回元素的个数 boolean isEmpty();返回是否为空 boolean contains(Object o);返回是否包含某个对象抛出异常： @throws ClassCastException 参数不兼容 @throws NullPointerException 参数是null，并且容器不允许包含null元素 Object[] toArray();返回所有元素组成的一个数组数组是重新分配空间并创建的，它的元素不会由该容器维护，原文： The returned array will be “safe” in that no references to it are maintained by this collection. (In other words, this method must allocate a new array even if this collection is backed by an array). The caller is thus free to modify the returned array. T[] toArray(T[] a);如果给定的数组大小能容纳该容器所有元素，则返回到给定数组中，否则会新分配一个可以容纳所有元素的数组并返回。 12345List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();Integer[] a = new Integer[2];list.add(3);list.add(5);list.toArray(a); // a = &#123;3,5&#125; 抛出异常： @throws ArrayStoreException 给定的数组运行类型不是该容器运行类型的超类 @throws NullPointerException 给定的数组是null boolean add(E e);确保该容器包含该指定的元素，如果因为这个操作改变了容器内的元素返回true，如果该容器已经有了该元素且不允许包含重复的元素则返回false 抛出异常： @throws UnsupportedOperationException 该容器不支持这个操作 @throws ClassCastException 给定的元素不能添加进容器中 @throws NullPointerException 参数是null，并且容器不允许包含null元素 @throws IllegalArgumentException 给定的元素的某些属性决定了它不能被添加进该容器中 @throws IllegalStateException 由于某些限制该时间不能添加该元素 boolean remove(Object o);移除某个元素抛出异常： @throws ClassCastException @throws NullPointerException @throws UnsupportedOperationException boolean containsAll(Collection&lt;?&gt; c)如果该容器包含给定的容器中的所有元素，返回true抛出异常： @throws ClassCastException @throws NullPointerException boolean addAll(Collection&lt;? extends E&gt; c)将给定容器中的所有元素插入到该容器中抛出异常： @throws UnsupportedOperationException @throws ClassCastException @throws NullPointerException @throws IllegalArgumentException @throws IllegalStateException boolean removeAll(Collection&lt;?&gt; c)将该容器和给定容器中共有的元素从该容器中删除抛出异常： @throws UnsupportedOperationException @throws ClassCastException @throws NullPointerException default boolean removeIf(Predicate&lt;? super E&gt; filter)Predicate是JAVA8新增的一个函数式接口（指如果填写lambda表达式则默认实现Predicate的test方法），这个方法删除所有符合条件的元素，如果成功返回true? super E指的是E或E的父类默认实现： 123456789101112default boolean removeIf(Predicate&lt;? super E&gt; filter) &#123; Objects.requireNonNull(filter); boolean removed = false; final Iterator&lt;E&gt; each = iterator(); while (each.hasNext()) &#123; if (filter.test(each.next())) &#123; each.remove(); removed = true; &#125; &#125; return removed;&#125; 调用实例： 1234Integer[] nums = &#123;1,2,3,4,5,6&#125;;ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;(Arrays.asList(nums));list.removeIf(num-&gt;num&gt;3?true:false);//删除list中大于3的元素//这里的lambda表达式是简化的写法，将lambda表达式完整的写法是list.removeIf((Integer num)-&gt;&#123;return num&gt;3?true:false;&#125;); 抛出异常： @throws NullPointerException @throws UnsupportedOperationException 这个元素不能被删除 boolean retainAll(Collection&lt;?&gt; c);仅保留给定集合中的元素，删除其他元素。 抛出异常： @throws UnsupportedOperationException @throws ClassCastException @throws NullPointerException void clear();移除所有元素。 抛出异常： @throws UnsupportedOperationException default Stream stream();返回一个序列流。默认实现： 123default Stream&lt;E&gt; stream() &#123; return StreamSupport.stream(spliterator(), false);&#125; default Stream parallelStream();返回一个并行流。默认实现： 123default Stream&lt;E&gt; parallelStream() &#123; return StreamSupport.stream(spliterator(), true);&#125;","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://www.codetool.top/tags/jdk/"},{"name":"源码研究","slug":"源码研究","permalink":"https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"},{"name":"集合","slug":"集合","permalink":"https://www.codetool.top/tags/%E9%9B%86%E5%90%88/"}]},{"title":"23种设计模式归纳","slug":"23种设计模式归纳","date":"2019-11-08T10:05:23.000Z","updated":"2019-11-13T12:15:57.814Z","comments":true,"path":"article/23种设计模式归纳/","link":"","permalink":"https://www.codetool.top/article/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%BD%92%E7%BA%B3/","excerpt":"","text":"参考文档 23种设计模式全解析 - codeTao - 博客园 设计模式（创建型） - 八一鱼 - 博客园 设计模式（结构型） - 八一鱼 - 博客园 代理模式和装饰者模式的区别 - 夜的第八章 - 博客园 简说设计模式——享元模式 - JAdam - 博客园 设计模式的分类 类模式处理类与子类的关系，通过处理这些关系来建立继承，属于静态关系，在编译时候确定下来；对象模式处理对象之间的关系，运行时发生变化，属于动态关系。 创建型模式 工厂方法模式 抽象工厂模式 单例模式 建造者模式 原型模式 结构型模式 适配器模式 装饰器模式 代理模式 外观模式 桥接模式 组合模式 享元模式 行为型模式 策略模式 模板方法模式 观察者模式 迭代器模式 责任链模式 命令模式 备忘录模式 状态模式 访问者模式 中介者模式 解释器模式 设计模式遵守的设计原则也是类的设计遵守的原则 单一职责原则SRP每个类只做一件事，但该原则也不适用于聚合类。 聚合类需要优先使用对象组合，而不是类继承 里氏替换原则LSP 子类的对象提供了父类的所有行为，且加上子类额外的一些东西（可以是功能，也可以是属性） 当程序基于父类实现时，如果将子类替换父类而程序不需要修改，则说明符合LSP原则 子类必须能替换成它们的父类 依赖倒置原则DIP也叫依赖反转原则。 高层模块不应该直接依赖低层模块，两者都应该依赖抽象层。 抽象不能依赖细节，细节必须依赖抽象。 接口隔离原则ISP 客户端不应该被强迫去依赖它们并不需要的接口 不满足ISP的类应该拆分成多个接口， 通过一个抽象类去实现它们，再去继承这个抽象父类。 开闭原则 对拓展开放，对修改封闭 对使用者修改关闭，对提供者拓展开放 创建型模式解析 在软件工程中，创建型模式是处理对象创建的设计模式，试图根据实际情况使用合适的方式创建对象。基本的对象创建方式可能会导致设计上的问题，或增加设计的复杂度。创建型模式通过以某种方式控制对象的创建来解决问题。 工厂方法模式（类） 创建一个工厂接口和创建多个工厂实现类 抽象工厂模式（对象） 区别： 工厂方法模式只有一个抽象产品类，而抽象工厂模式有多个。工厂方法模式的具体工厂类只能创建一个具体产品类的实例，而抽象工厂模式可以创建多个。工厂方法创建 “一种” 产品，他的着重点在于”怎么创建”，也就是说如果你开发，你的大量代码很可能围绕着这种产品的构造，初始化这些细节上面。也因为如此，类似的产品之间有很多可以复用的特征，所以会和模版方法相随。 抽象工厂需要创建一些列产品，着重点在于”创建哪些”产品上，也就是说，如果你开发，你的主要任务是划分不同差异的产品线，并且尽量保持每条产品线接口一致，从而可以从同一个抽象工厂继承。 抽象工厂模式包含如下角色： AbstractFactory：抽象工厂 ConcreteFactory：具体工厂 AbstractProduct：抽象产品 Product：具体产品 单例模式（对象） 在一个JVM中，该类只有一个对象实例存在。 12345678910111213141516171819202122public class Singleton &#123; /* 持有私有静态实例，防止被引用，此处赋值为null，目的是实现延迟加载 */ private static Singleton instance = null; /* 私有构造方法，防止被实例化 */ private Singleton() &#123; &#125; /* 静态工程方法，创建实例 */ public static Singleton getInstance() &#123; if (instance == null) &#123; instance = new Singleton(); &#125; return instance; &#125; /* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 */ public Object readResolve() &#123; return instance; &#125; &#125; 多线程下的优化： 123456789101112131415161718192021public class Singleton &#123; /* 私有构造方法，防止被实例化 */ private Singleton() &#123; &#125; /* 此处使用一个内部类来维护单例 */ private static class SingletonFactory &#123; private static Singleton instance = new Singleton(); &#125; /* 获取实例 */ public static Singleton getInstance() &#123; return SingletonFactory.instance; &#125; /* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 */ public Object readResolve() &#123; return getInstance(); &#125; &#125; 原理： JVM内部的机制能够保证当一个类被加载的时候，这个类的加载过程是线程互斥的。这样当我们第一次调用getInstance的时候，JVM能够帮我们保证instance只被创建一次，并且会保证把赋值给instance的内存初始化完毕 建造者模式（对象） 在软件开发中，也存在大量类似汽车一样的复杂对象，它们拥有一系列成员属性，这些成员属性中有些是引用类型的成员对象。而且在这些复杂对象中，还可能存在一些限制条件，如某些属性没有赋值则复杂对象不能作为一个完整的产品使用；有些属性的赋值必须按照某个顺序，一个属性没有赋值之前，另一个属性可能无法赋值等。 建造者模式包含如下角色： Builder：抽象建造者 ConcreteBuilder：具体建造者 Director：指挥者 Product：产品角色 Director的作用： 隔离客户与生产过程。 负责控制产品的生成过程。 1234567891011121314151617181920public class Meal &#123; private String food; private String drink; public String getFood() &#123; return food; &#125; public void setFood(String food) &#123; this.food = food; &#125; public String getDrink() &#123; return drink; &#125; public void setDrink(String drink) &#123; this.drink = drink; &#125;&#125; 12345678910public abstract class MealBuilder &#123; Meal meal = new Meal(); public abstract void buildFood(); public abstract void buildDrink(); public Meal getMeal()&#123; return meal; &#125;&#125; 12345678910public class MealA extends MealBuilder&#123; public void buildDrink() &#123; meal.setDrink(\"可乐\"); &#125; public void buildFood() &#123; meal.setFood(\"薯条\"); &#125;&#125; 123456789101112131415161718public class KFCWaiter &#123; private MealBuilder mealBuilder; public KFCWaiter(MealBuilder mealBuilder) &#123; this.mealBuilder = mealBuilder; &#125; public Meal construct()&#123; //准备食物 mealBuilder.buildFood(); //准备饮料 mealBuilder.buildDrink(); //准备完毕，返回一个完整的套餐给客户 return mealBuilder.getMeal(); &#125;&#125; 原型模式（对象） 有些对象是需要频繁创建的，用原型实例指定创建对象的类型，并且通过拷贝这个原型来创建新的同类型的对象，分为浅克隆和深克隆，浅克隆只复制拷贝的对象，不复制引用的对象，即成员对象不复制；深克隆，引用也同样复制。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748public class Prototype implements Cloneable, Serializable &#123; private static final long serialVersionUID = 1L; private String string; private SerializableObject obj; /* 浅复制 */ public Object clone() throws CloneNotSupportedException &#123; Prototype proto = (Prototype) super.clone(); /* super.clone()是浅复制 */ return proto; &#125; /* 深复制 */ public Object deepClone() throws IOException, ClassNotFoundException &#123; /* 写入当前对象的二进制流 */ ByteArrayOutputStream bos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(bos); oos.writeObject(this); /* 读出二进制流产生的新对象 */ ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray()); ObjectInputStream ois = new ObjectInputStream(bis); return ois.readObject(); &#125; public String getString() &#123; return string; &#125; public void setString(String string) &#123; this.string = string; &#125; public SerializableObject getObj() &#123; return obj; &#125; public void setObj(SerializableObject obj) &#123; this.obj = obj; &#125; &#125; class SerializableObject implements Serializable &#123; private static final long serialVersionUID = 1L; &#125; 结构型模式解析结构型模式主要用于处理类和对象的组合 适配器模式（类和对象） 将一个接口转换成客户希望的另一个接口，从而使接口不兼容的那些类可以在一起工作。 类的适配器模式 通过一个具体的类，将适配者适配到目标接口当中 12345public class Source &#123; public void method1() &#123; System.out.println(\"this is original method!\"); &#125; &#125; 12345678public interface Targetable &#123; /* 与原类中的方法相同 */ public void method1(); /* 新类的方法 */ public void method2(); &#125; 1234567public class Adapter extends Source implements Targetable &#123; @Override public void method2() &#123; System.out.println(\"this is the targetable method!\"); &#125; &#125; 12345678public class AdapterTest &#123; public static void main(String[] args) &#123; Targetable target = new Adapter(); target.method1(); target.method2(); &#125; &#125; 对象的适配器模式 一个适配器可以将多个不同的适配者适配到同一目标 123456789101112131415161718public class Wrapper implements Targetable &#123; private Source source; public Wrapper(Source source)&#123; super(); this.source = source; &#125; @Override public void method2() &#123; System.out.println(\"this is the targetable method!\"); &#125; @Override public void method1() &#123; source.method1(); &#125; &#125; 装饰者模式（对象） 给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例 12345678910111213141516171819202122232425262728//Sourceablepublic interface Sourceable &#123; public void method(); &#125; //Sourcepublic class Source implements Sourceable &#123; @Override public void method() &#123; System.out.println(\"the original method!\"); &#125; &#125; //Decoratorpublic class Decorator implements Sourceable &#123; private Sourceable source; public Decorator(Sourceable source)&#123; super(); this.source = source; &#125; @Override public void method() &#123; System.out.println(\"before decorator!\"); source.method(); System.out.println(\"after decorator!\"); &#125; &#125; 我寻思有点像servlet的过滤器 代理模式（对象） 多一个代理类出来，替原对象进行一些操作 12345678910111213141516171819202122232425262728293031public interface Sourceable &#123; public void method(); &#125; public class Source implements Sourceable &#123; @Override public void method() &#123; System.out.println(\"the original method!\"); &#125; &#125; public class Proxy implements Sourceable &#123; private Source source; public Proxy()&#123; super(); this.source = new Source(); &#125; @Override public void method() &#123; before(); source.method(); atfer(); &#125; private void atfer() &#123; System.out.println(\"after proxy!\"); &#125; private void before() &#123; System.out.println(\"before proxy!\"); &#125; &#125; 装饰者模式和代理模式的区别： 装饰器模式关注于在一个对象上动态的添加方法，然而代理模式关注于控制对对象的访问。换句话说，用代理模式，代理类（proxy class）可以对它的客户隐藏一个对象的具体信息。因此，当使用代理模式的时候，我们常常在一个代理类中创建一个对象的实例。并且，当我们使用装饰器模式的时候，我们通常的做法是将原始对象作为一个参数传给装饰者的构造器。 外观模式（对象） 定义一个高层接口，为子系统中的一组接口提供一个一致的外观，从而简化了该子系统的使用 外观模式包含如下角色： Facade: 外观角色 SubSystem:子系统角色 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061//CPUpublic class CPU &#123; public void startup()&#123; System.out.println(\"cpu startup!\"); &#125; public void shutdown()&#123; System.out.println(\"cpu shutdown!\"); &#125; &#125; //Memorypublic class Memory &#123; public void startup()&#123; System.out.println(\"memory startup!\"); &#125; public void shutdown()&#123; System.out.println(\"memory shutdown!\"); &#125; &#125; //Diskpublic class Disk &#123; public void startup()&#123; System.out.println(\"disk startup!\"); &#125; public void shutdown()&#123; System.out.println(\"disk shutdown!\"); &#125; &#125; //Facadepublic class Computer &#123; private CPU cpu; private Memory memory; private Disk disk; public Computer()&#123; cpu = new CPU(); memory = new Memory(); disk = new Disk(); &#125; public void startup()&#123; System.out.println(\"start the computer!\"); cpu.startup(); memory.startup(); disk.startup(); System.out.println(\"start computer finished!\"); &#125; public void shutdown()&#123; System.out.println(\"begin to close the computer!\"); cpu.shutdown(); memory.shutdown(); disk.shutdown(); System.out.println(\"computer closed!\"); &#125; &#125; 桥接模式（对象） 把事物和其具体实现分开，使他们可以各自独立的变化。 将抽象化与实现化解耦，使得二者可以独立变化 12345678910111213141516171819202122232425262728293031323334353637383940public interface Sourceable &#123; public void method(); &#125; public class SourceSub1 implements Sourceable &#123; @Override public void method() &#123; System.out.println(\"this is the first sub!\"); &#125; &#125; public class SourceSub2 implements Sourceable &#123; @Override public void method() &#123; System.out.println(\"this is the second sub!\"); &#125; &#125;public abstract class Bridge &#123; private Sourceable source; public void method()&#123; source.method(); &#125; public Sourceable getSource() &#123; return source; &#125; public void setSource(Sourceable source) &#123; this.source = source; &#125; &#125; public class MyBridge extends Bridge &#123; public void method()&#123; getSource().method(); &#125; &#125; 组合模式（对象） 将多个对象组合在一起进行操作，常用于表示树形结构中，例如二叉树，树等。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960public class TreeNode &#123; private String name; private TreeNode parent; private Vector&lt;TreeNode&gt; children = new Vector&lt;TreeNode&gt;(); public TreeNode(String name)&#123; this.name = name; &#125; public String getName() &#123; return name; &#125; public void setName(String name) &#123; this.name = name; &#125; public TreeNode getParent() &#123; return parent; &#125; public void setParent(TreeNode parent) &#123; this.parent = parent; &#125; //添加孩子节点 public void add(TreeNode node)&#123; children.add(node); &#125; //删除孩子节点 public void remove(TreeNode node)&#123; children.remove(node); &#125; //取得孩子节点 public Enumeration&lt;TreeNode&gt; getChildren()&#123; return children.elements(); &#125; &#125; public class Tree &#123; TreeNode root = null; public Tree(String name) &#123; root = new TreeNode(name); &#125; public static void main(String[] args) &#123; Tree tree = new Tree(\"A\"); TreeNode nodeB = new TreeNode(\"B\"); TreeNode nodeC = new TreeNode(\"C\"); nodeB.add(nodeC); tree.root.add(nodeB); System.out.println(\"build the tree finished!\"); &#125; &#125; 享元模式（对象） 实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销，通常与工厂模式一起使用。 其中，Flyweight是抽象享元角色。它是产品的抽象类，同时定义出对象的外部状态和内部状态的接口或实现；ConcreteFlyweight是具体享元角色，是具体的产品类，实现抽象角色定义的业务；UnsharedConcreteFlyweight是不可共享的享元角色，一般不会出现在享元工厂中；FlyweightFactory是享元工厂，它用于构造一个池容器，同时提供从池中获得对象的方法。 123456789101112131415161718192021222324public abstract class Flyweight &#123; //内部状态 public String intrinsic; //外部状态 protected final String extrinsic; //要求享元角色必须接受外部状态 public Flyweight(String extrinsic) &#123; this.extrinsic = extrinsic; &#125; //定义业务操作 public abstract void operate(int extrinsic); public String getIntrinsic() &#123; return intrinsic; &#125; public void setIntrinsic(String intrinsic) &#123; this.intrinsic = intrinsic; &#125;&#125; 1234567891011121314public class ConcreteFlyweight extends Flyweight &#123; //接受外部状态 public ConcreteFlyweight(String extrinsic) &#123; super(extrinsic); &#125; //根据外部状态进行逻辑处理 @Override public void operate(int extrinsic) &#123; System.out.println(\"具体Flyweight:\" + extrinsic); &#125;&#125; 123456789101112public class UnsharedConcreteFlyweight extends Flyweight &#123; public UnsharedConcreteFlyweight(String extrinsic) &#123; super(extrinsic); &#125; @Override public void operate(int extrinsic) &#123; System.out.println(\"不共享的具体Flyweight:\" + extrinsic); &#125;&#125; 1234567891011121314151617181920212223public class FlyweightFactory &#123; //定义一个池容器 private static HashMap&lt;String, Flyweight&gt; pool = new HashMap&lt;&gt;(); //享元工厂 public static Flyweight getFlyweight(String extrinsic) &#123; Flyweight flyweight = null; if(pool.containsKey(extrinsic)) &#123; //池中有该对象 flyweight = pool.get(extrinsic); System.out.print(\"已有 \" + extrinsic + \" 直接从池中取----&gt;\"); &#125; else &#123; //根据外部状态创建享元对象 flyweight = new ConcreteFlyweight(extrinsic); //放入池中 pool.put(extrinsic, flyweight); System.out.print(\"创建 \" + extrinsic + \" 并从池中取出----&gt;\"); &#125; return flyweight; &#125;&#125; 行为型模式解析行为型模式主要用于描述类或对象的交互以及职责分配 解释器模式（类） 主要应用在OOP开发中的编译器的开发中 给定一种语言，定义它的文法表示，并定义一个解释器，该解释器用来根据文法表示来解释语言中的句子 ​ 模板方法模式（类） 定义一个操作中的算法骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重新定义算法中某些特定步骤 策略模式（对象） 定义一系列算法，把它们一个个封装起来，并且使它们之间可相互替换，从而让算法可以独立于使用它的用户而变化 观察者模式（对象） 定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动更新 123public interface Observer &#123; public void update(); &#125; 1234567public class Observer1 implements Observer &#123; @Override public void update() &#123; System.out.println(\"observer1 has received!\"); &#125; &#125; 12345678public class Observer2 implements Observer &#123; @Override public void update() &#123; System.out.println(\"observer2 has received!\"); &#125; &#125; 1234567891011121314public interface Subject &#123; /*增加观察者*/ public void add(Observer observer); /*删除观察者*/ public void del(Observer observer); /*通知所有的观察者*/ public void notifyObservers(); /*自身的操作*/ public void operation(); &#125; 12345678910111213141516171819202122public abstract class AbstractSubject implements Subject &#123; private Vector&lt;Observer&gt; vector = new Vector&lt;Observer&gt;(); @Override public void add(Observer observer) &#123; vector.add(observer); &#125; @Override public void del(Observer observer) &#123; vector.remove(observer); &#125; //提醒应当在抽象类中就实现 @Override public void notifyObservers() &#123; Enumeration&lt;Observer&gt; enumo = vector.elements(); while(enumo.hasMoreElements())&#123; enumo.nextElement().update(); &#125; &#125; &#125; 123456789public class MySubject extends AbstractSubject &#123; @Override public void operation() &#123; System.out.println(\"update self!\"); notifyObservers(); &#125; &#125; 迭代器模式（对象） 提供一种方法来顺序访问一个聚合对象中的各个元素，而不需要暴露该对象的内部表示。 责任链模式（对象） 有多个对象，每个对象持有对下一个对象的引用，这样就会形成一条链，请求在这条链上传递，直到某一对象决定处理该请求。但是发出者并不清楚到底最终那个对象会处理该请求 123public interface Handler &#123; public void operator(); &#125; 12345678910111213public abstract class AbstractHandler &#123; private Handler handler; public Handler getHandler() &#123; return handler; &#125; public void setHandler(Handler handler) &#123; this.handler = handler; &#125; &#125; 12345678910111213141516public class MyHandler extends AbstractHandler implements Handler &#123; private String name; public MyHandler(String name) &#123; this.name = name; &#125; @Override public void operator() &#123; System.out.println(name+\"deal!\"); if(getHandler()!=null)&#123; getHandler().operator(); &#125; &#125; &#125; 命令模式（对象） 将一个请求封装为一个对象，从而可用不同的请求对客户进行参数化，将请求排队或记录请求日志，支持可撤销的操作 123public interface Command &#123; public void exe(); &#125; 12345678910111213public class MyCommand implements Command &#123; private Receiver receiver; public MyCommand(Receiver receiver) &#123; this.receiver = receiver; &#125; @Override public void exe() &#123; receiver.action(); &#125; &#125; 12345public class Receiver &#123; public void action()&#123; System.out.println(\"command received!\"); &#125; &#125; 123456789101112public class Invoker &#123; private Command command; public Invoker(Command command) &#123; this.command = command; &#125; public void action()&#123; command.exe(); &#125; &#125; 备忘录模式（对象） 在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，从而可以在以后将该对象恢复到原先保存的状态 123456789101112131415161718192021222324public class Original &#123; private String value; public String getValue() &#123; return value; &#125; public void setValue(String value) &#123; this.value = value; &#125; public Original(String value) &#123; this.value = value; &#125; public Memento createMemento()&#123; return new Memento(value); &#125; public void restoreMemento(Memento memento)&#123; this.value = memento.getValue(); &#125; &#125; 12345678910111213141516public class Memento &#123; private String value; public Memento(String value) &#123; this.value = value; &#125; public String getValue() &#123; return value; &#125; public void setValue(String value) &#123; this.value = value; &#125; &#125; 12345678910111213141516public class Storage &#123; private Memento memento; public Storage(Memento memento) &#123; this.memento = memento; &#125; public Memento getMemento() &#123; return memento; &#125; public void setMemento(Memento memento) &#123; this.memento = memento; &#125; &#125; 状态模式（对象） 允许一个对象在其内部状态改变时能够改变它的行为 1234567891011121314151617181920public class State &#123; private String value; public String getValue() &#123; return value; &#125; public void setValue(String value) &#123; this.value = value; &#125; public void method1()&#123; System.out.println(\"execute the first opt!\"); &#125; public void method2()&#123; System.out.println(\"execute the second opt!\"); &#125; &#125; 123456789101112131415161718192021222324public class Context &#123; private State state; public Context(State state) &#123; this.state = state; &#125; public State getState() &#123; return state; &#125; public void setState(State state) &#123; this.state = state; &#125; public void method() &#123; if (state.getValue().equals(\"state1\")) &#123; state.method1(); &#125; else if (state.getValue().equals(\"state2\")) &#123; state.method2(); &#125; &#125; &#125; 访问者模式（对象） 表示一个作用于某对象结构中的各元素的操作，使得在不改变各元素的类的前提下定义作用于这些元素的新操作 适用于：给一个类添加新功能，但为了兼容性考虑或其他原因不想破坏这个类 123public interface Visitor &#123; public void visit(Subject sub); &#125; 1234567public class MyVisitor implements Visitor &#123; @Override public void visit(Subject sub) &#123; System.out.println(\"visit the subject：\"+sub.getSubject()); &#125; &#125; 1234public interface Subject &#123; public void accept(Visitor visitor); public String getSubject(); &#125; 123456789101112public class MySubject implements Subject &#123; @Override public void accept(Visitor visitor) &#123; visitor.visit(this); &#125; @Override public String getSubject() &#123; return \"love\"; &#125; &#125; 中介者模式（对象） 用一个中介对象来封装一系列的对象交互。它使各对象不需要显示地相互调用，从而达到低耦合，还可以独立地改变对象间的交互 1234public interface Mediator &#123; public void createMediator(); public void workAll(); &#125; 12345678910111213141516171819202122232425public class MyMediator implements Mediator &#123; private User user1; private User user2; public User getUser1() &#123; return user1; &#125; public User getUser2() &#123; return user2; &#125; @Override public void createMediator() &#123; user1 = new User1(this); user2 = new User2(this); &#125; @Override public void workAll() &#123; user1.work(); user2.work(); &#125; &#125; 1234567891011121314public abstract class User &#123; private Mediator mediator; public Mediator getMediator()&#123; return mediator; &#125; public User(Mediator mediator) &#123; this.mediator = mediator; &#125; public abstract void work(); &#125; 1234567891011public class User1 extends User &#123; public User1(Mediator mediator)&#123; super(mediator); &#125; @Override public void work() &#123; System.out.println(\"user1 exe!\"); &#125; &#125; 1234567891011public class User2 extends User &#123; public User2(Mediator mediator)&#123; super(mediator); &#125; @Override public void work() &#123; System.out.println(\"user2 exe!\"); &#125; &#125; 12345678public class Test &#123; public static void main(String[] args) &#123; Mediator mediator = new MyMediator(); mediator.createMediator(); mediator.workAll(); &#125; &#125;","categories":[{"name":"中间件/软件设计","slug":"中间件-软件设计","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1/"}],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"https://www.codetool.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}]},{"title":"我的博客搬家啦","slug":"hello-world","date":"2019-11-08T09:05:23.000Z","updated":"2019-11-13T12:22:54.725Z","comments":true,"path":"article/hello-world/","link":"","permalink":"https://www.codetool.top/article/hello-world/","excerpt":"","text":"今天弃了wordpress的坑搬来hexo啦。和gitbook差不多的用法，很快就上手了呢。再也不用忍受wordpress一堆不仅没用还加载龟速的资源了奥里给！！！","categories":[{"name":"日常/随笔","slug":"日常-随笔","permalink":"https://www.codetool.top/categories/%E6%97%A5%E5%B8%B8-%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"网站日志","slug":"网站日志","permalink":"https://www.codetool.top/tags/%E7%BD%91%E7%AB%99%E6%97%A5%E5%BF%97/"}]},{"title":"在线运行C++、java、python代码的小项目实现","slug":"在线运行C++、java、python代码的小项目实现","date":"2019-08-13T12:06:57.000Z","updated":"2019-11-13T12:16:20.231Z","comments":true,"path":"article/在线运行C++、java、python代码的小项目实现/","link":"","permalink":"https://www.codetool.top/article/%E5%9C%A8%E7%BA%BF%E8%BF%90%E8%A1%8CC++%E3%80%81java%E3%80%81python%E4%BB%A3%E7%A0%81%E7%9A%84%E5%B0%8F%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0/","excerpt":"","text":"本网站在2019年8月12日之前用的代码演示功能是借用了 https://tool.lu/coderunner/ 的在线运行代码工具，在此致谢。 有一段时间这个工具突然失效了，我就在想能不能自己模仿着做一个类似的出来，简单分析了一下就想挑战一下自己，然后就开始动手了。 做出来的成果链接：点击此处 做的过程中查阅了很多网络资料，现整理如下： 需求分析：前端为一个实用的代码编辑器，通过ajax请求将写好的代码提交给服务器，服务器编译运行后把输出结果送回客户端显示。 其中使用的代码编辑器：CodeMirror，现在类似的工具使用的应该都是这款功能强大，可以自定样式的代码编辑器，官网： https://codemirror.net/ CodeMirror搭建前端界面先从官网下载下来CodeMirror的压缩包，解压之后得到下图目录 要在html中创建一个CodeMirror编辑器，必须添加的css和js文件是 12&lt;link href=./codemirror-5.48.2/lib/codemirror.css rel=stylesheet/&gt;&lt;script src=./codemirror-5.48.2/lib/codemirror.js&gt;&lt;/script&gt; (5.48.2为版本号，因人而异) 然后需要添加需要编辑的语言相关的js文件，可以在mode目录下找到，这里我用了两个文件： 实现JAVA和C++代码高亮（这个文件可以实现C，C++，JAVA，C#等语言）： 1&lt;script src=./codemirror-5.48.2/mode/clike/clike.js&gt;&lt;/script&gt; 实现python的代码高亮： 1&lt;script src=./codemirror-5.48.2/mode/python/python.js&gt;&lt;/script&gt; 需要更改编辑器主题样式的可以在theme目录下找到对应的主题css文件添加进去，我觉得默认主题就很好看了就没用其他主题。 为了实现括号匹配和代码折叠功能，还要添加的文件有： 123456&lt;link rel=stylesheet href=./codemirror-5.48.2/addon/fold/foldgutter.css/&gt;&lt;script src=./codemirror-5.48.2/addon/fold/foldcode.js&gt;&lt;/script&gt;&lt;script src=./codemirror-5.48.2/addon/fold/foldgutter.js&gt;&lt;/script&gt;&lt;script src=./codemirror-5.48.2/addon/fold/brace-fold.js&gt;&lt;/script&gt;&lt;script src=./codemirror-5.48.2/addon/fold/comment-fold.js&gt;&lt;/script&gt; 创建编辑器的过程： 在html中使用一个textarea占位，配置好id： 1&lt;textarea id=code name=code&gt;&lt;/textarea&gt; 通过对应的js代码创建编辑器： 123456789101112var editor = CodeMirror.fromTextArea(document.getElementById(code), &#123; mode: text/x-java, //实现Java代码高亮 //mode: text/x-c++src, //实现C++代码高亮 //mode: text/x-python, //实现Python代码高亮 indentUnit:4,//以四个空格的长度缩进 indentWithTabs: true,//以tab代替空格缩进 lineNumbers: true, //显示行号 lineWrapping: true, foldGutter: true, //代码折叠 gutters: [CodeMirror-linenumbers, CodeMirror-foldgutter], matchBrackets: true //括号匹配 &#125;); 这里需要什么语言高亮需要在官网找到对应语言的 MIME types ，写在mode参数中 其他相关js函数： 编辑器的大小通过 editor.setSize(width, height) 方法设置 获取编辑器内的代码：editor.getValue() 设置编辑器内的代码：editor.setValue() 设置编辑器的配置选项: editor.setOption() 最终搭配上bootstrap样式做出来的效果是这样的： js实现前端逻辑使用JQuery简化js的写法 关键代码： 切换语言事件 1234567891011121314//选择语言事件$(\"#lang\").on('change', () =&gt; &#123; lang = $(\"#lang\").val() if (lang == 'java') &#123; editor.setOption(\"mode\", \"text/x-java\") editor.setValue(javacode) &#125; else if (lang == \"cpp\") &#123; editor.setOption(\"mode\", \"text/x-c++src\") editor.setValue(cppcode) &#125; else if (lang == \"python\") &#123; editor.setOption(\"mode\", \"text/x-python\") editor.setValue(pythoncode) &#125;&#125;) 发送POST请求 1234567891011121314151617181920212223242526272829$(function()&#123; //点击运行按钮后的事件 $(\"#run\").on(\"click\",()=&gt;&#123; var codesrc = editor.getValue(); //给源代码编码 var codeEncoded = encodeURIComponent(codesrc); $(\"output\").html = 'console&gt;&gt;' + '正在努力执行中...'; //发出post请求 $.post( \"/runcode.php\", &#123; lang:lang,codesrc:codeEncoded &#125;, (data)=&gt;&#123; var outputs = data.output; var status1 = data.status1; var output = ''; //拼接输出结果 if(status1 !== 1)&#123; for(var i in outputs) &#123; output = output + outputs[i] + '&lt;br/&gt;'; &#125;data &#125;else&#123; var outputs1 = data.output1; for(var i in outputs1) &#123; output = output + outputs1[i] + '&lt;br/&gt;'; &#125; &#125; $(\"output\").html = 'console&gt;&gt;' + output; &#125;, \"json\"); &#125;)&#125;); 注： 由于代码中可能出现 + 或 &amp; 等符号，其在post的请求中经过urlencode会分别被解析为空格和参数连接符，需先将代码源码用js的encodeURIComponent()函数编码，传递到php后端后再用rawurldecode()函数进行解码操作。 php实现后端php的任务是在服务器上运行代码，核心的思想是将接收到的代码写入文件，使用各种环境去执行，并返回结果 其中用到了exec函数 具体参阅 【php】php使用exec总结 做的时候遇到了个问题：php在调用exec执行gcc命令时，会出现各种毛病，例如ld链接器找不到，后来发现原因是php不会使用系统设置的环境变量，在php文件开头添加这样一句话就能解决问题： 1putenv(PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin);//设置环境变量","categories":[{"name":"项目总结","slug":"项目总结","permalink":"https://www.codetool.top/categories/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"php","slug":"php","permalink":"https://www.codetool.top/tags/php/"},{"name":"CodeMirror","slug":"CodeMirror","permalink":"https://www.codetool.top/tags/CodeMirror/"}]}]}