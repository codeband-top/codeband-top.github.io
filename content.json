{"meta":{"title":"代码段小站","subtitle":"CodeTool - 个人计算机类练手小博客","description":"","author":"Rhett Peng","url":"https://www.codetool.top","root":"/"},"pages":[{"title":"关于","date":"2018-09-30T09:25:30.000Z","updated":"2020-01-10T10:07:22.666Z","comments":true,"path":"about/index.html","permalink":"https://www.codetool.top/about/index.html","excerpt":"","text":"@column-2{ } @column-2{ @card{ 1 神秘的站长现南昌大学软件学院大三学生，学习作风差，不务正业.喜欢折腾新奇的东西，学习黑科技正在由一只小菜鸡成为一只大菜鸡的转变的路上（其实我也不知道小菜鸡为啥要写博客，反正也没人看） } @card{ 2 关于小站代码段小站（CodeBand）创建于2018年8月19日，闲时在这里随便写点东西。可能是脑海里的一些闪光点，也可能是某一天的学习内容的记录，更多的是有关编程方面的、我觉得有意义记下来的一些知识。也希望这个网站能伴随我从编程新手小白成长为一个不算太小白的小白? } } @timeline{ 2.0.0.0.1 2019@item{ 2.0.0.0.1.1 12月19日写博客历史上最黑暗的一天 } @item{ 2.0.0.0.1.2 12月10日在右下角放了只狗，背景加了点动画效果 } @item{ 2.0.0.0.1.3 11月8日抛弃wordpress，使用hexo重新搭建博客，完全搬至国内服务器 } @item{ 2.0.0.0.1.4 9月6日新服务器域名通过备案，使用国内服务器反向代理 } @item{ 2.0.0.0.1.5 8月19日更换wordpress主题 } 2.0.0.0.2 2018@item{ 2.0.0.0.2.1 8月19日使用wordpress搭建了第一版博客写下了我的第一篇博客《Java抽象类和接口的区别》 } }"},{"title":"contact","date":"2018-09-30T09:25:30.000Z","updated":"2020-01-10T10:07:52.273Z","comments":true,"path":"contact/index.html","permalink":"https://www.codetool.top/contact/index.html","excerpt":"","text":""},{"title":"分类","date":"2018-09-30T09:25:30.000Z","updated":"2020-01-10T10:46:37.167Z","comments":true,"path":"categories/index.html","permalink":"https://www.codetool.top/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2018-09-30T10:23:38.000Z","updated":"2020-01-10T10:07:22.666Z","comments":true,"path":"tags/index.html","permalink":"https://www.codetool.top/tags/index.html","excerpt":"","text":""},{"title":"在线写代码","date":"2019-11-08T14:16:45.000Z","updated":"2020-01-10T11:34:38.770Z","comments":true,"path":"runcode/index.html","permalink":"https://www.codetool.top/runcode/index.html","excerpt":"","text":""}],"posts":[{"title":"Java日志框架Logback介绍和使用","slug":"Java日志框架Logback介绍和使用","date":"2020-03-09T15:07:24.000Z","updated":"2020-03-09T15:24:35.505Z","comments":true,"path":"article/Java日志框架Logback介绍和使用/","link":"","permalink":"https://www.codetool.top/article/Java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6Logback%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/","excerpt":"","text":"前置知识： 日志门面SLF4J介绍和使用 1 Logback概述Logback是由log4j、slf4j创始人Ceki Gülcü设计的另一个开源日志组件，性能比log4j要好。它自然地实现了slf4j规范。 Logback主要分为三个模块： logback-core：logback的核心模块，也是其它两个模块的基础模块 logback-classic：它是log4j的一个改良版本,同时它完整实现了slf4jAPI logback-access: 访问模块与Servlet容器集成提供通过Http来访问日志的功能 Logback的核心组件： Logger：日志的记录器,把它关联到应用的对应的context上后，主要用于存放日志对象,也可以定义日志类型、级别。 Appender：用于指定日志输出的目的地,目的地可以是控制台、文件、数据库等等。 Layout：负责把事件转换成字符串,格式化的日志信息的输出。在 logbackLayoutencoder中对象被封装在中。 2 Logback使用maven依赖： 这里使用slf4j来管理 &lt;dependency> &lt;groupId>org.slf4j&lt;/groupId> &lt;artifactId>slf4j-api&lt;/artifactId> &lt;version>1.7.30&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>ch.qos.logback&lt;/groupId> &lt;artifactId>logback-classic&lt;/artifactId> &lt;version>1.2.3&lt;/version> &lt;/dependency> 3 Logback配置logback会依次读取以下类型配置文件： logback.groovy logback-test.xml logback.xml 如果均不存在会采用默认配置 logback官方提供的log4j配置转logback配置工具：http://logback.qos.ch/translator/ 3.1 基本配置&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?> &lt;configuration> &lt;property name=\"pattern\" value=\"[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} %c %M %L [%thread] %m%n\">&lt;/property> &lt;property name=\"log_dir\" value=\"/logs\">&lt;/property> &lt;!-- 控制台日志输出的 appender--> &lt;appender name=\"console\" class=\"ch.qos.logback.core.ConsoleAppender\"> &lt;!-- 控制输出流对象，默认System.out改为System.err--> &lt;target>System.err&lt;/target> &lt;!-- 日志消息格式配置--> &lt;encoder class=\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\"> &lt;pattern>${pattern}&lt;/pattern> &lt;/encoder> &lt;/appender> &lt;!-- 日志文件输出的 appender--> &lt;appender name=\"file\" class=\"ch.qos.logback.core.FileAppender\"> &lt;!-- 日志文件保存路径 --> &lt;file>${log_dir}/logback.log&lt;/file> &lt;!-- 日志消息格式配置--> &lt;encoder class=\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\"> &lt;pattern>${pattern}&lt;/pattern> &lt;/encoder> &lt;/appender> &lt;!-- root logger 配置--> &lt;root level=\"ALL\"> &lt;appender-ref ref=\"console\">&lt;/appender-ref> &lt;appender-ref ref=\"file\">&lt;/appender-ref> &lt;/root> &lt;/configuration> pattern常用转换符： %c/%logger：输出日志的logger名，可有一个整形参数，功能是缩短logger名，例如%logger{5} %cn：输出上下文名称。 %d{pattern}：输出日志的打印日志，模式语法与java.text.SimpleDateFormat兼容。 %p/%le/%level：输出日志级别。 %t/%thread: 输出产生日志的线程名。 %n：输出平台相关的分行符“\\n”或者“\\r\\n”。 %m/%msg/%message：输出应用程序提供的信息。 %L/%line：输出执行日志请求的行号。 使用HTML格式输出： &lt;!-- 日志文件输出的 appender--> &lt;appender name=\"htmlFile\" class=\"ch.qos.logback.core.FileAppender\"> &lt;!-- 日志文件保存路径 --> &lt;file>${log_dir}/logback.html&lt;/file> &lt;!-- 日志消息格式配置--> &lt;encoder class=\"ch.qos.logback.core.encoder.LayoutWrappingEncoder\"> &lt;layout class=\"ch.qos.logback.classic.html.HTMLLayout\"> &lt;pattern>%level%d{yyyy-MM-dd HH:mm:ss.SSS}%c%M%L%thread%m&lt;/pattern> &lt;/layout> &lt;/encoder> &lt;/appender> 3.2 日志拆分和归档压缩的appender&lt;appender name=\"rollFile\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"> &lt;!-- 日志文件保存路径 --> &lt;file>${log_dir}/roll_logback.log&lt;/file> &lt;!-- 日志消息格式配置--> &lt;encoder class=\"ch.qos.logback.classic.encoder.PatternLayoutEncoder\"> &lt;pattern>${pattern}&lt;/pattern> &lt;/encoder> &lt;!-- 指定拆分规则 --> &lt;rollingPolicy class=\"ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy\"> &lt;!-- 按照时间和压缩格式声明拆分的文件名 --> &lt;fileNamePattern>${log_dir}/rolling.%d{yyyy-MM-dd}.log%i.gz&lt;/fileNamePattern> &lt;!-- 按照文件大小拆分 --> &lt;maxFileSize>1MB&lt;/maxFileSize> &lt;/rollingPolicy> &lt;/appender> 3.3 过滤器写在Appender中 级别过滤器： &lt;filter class=\"ch.qos.logback.classic.filter.LevelFilter\"> &lt;!-- 日志过滤规则 --> &lt;level>ERROR&lt;/level> &lt;onMatch>ACCEPT&lt;/onMatch> &lt;onMismatch>DENY&lt;/onMismatch> &lt;/filter> 其他的还有ThresholdFilter（临界值过滤器）、EvaluatorFilter（求值过滤器）等。 3.4 异步日志&lt;appender name=\"async\" class=\"ch.qos.logback.classic.AsyncAppender\"> &lt;!-- 指定某个具体的appender --> &lt;appender-ref ref=\"file\">&lt;/appender-ref> &lt;/appender> 3.5 自定义Logger&lt;!-- 自定义logger对象 additivity：是否继承自rootLogger --> &lt;logger name=\"com.rhett.consoleLogger\" level=\"INFO\" additivity=\"false\"> &lt;appender-ref ref=\"console\">&lt;/appender-ref> &lt;/logger> 4 logback-access的使用logback-access模块与Servlet容器(如Tomcat和Jetty)集成,以提供HTTP访问日志功能。我们可以使用logback-acces模块来替换tomcat的访问日志。 步骤： 将logback-access.jar与logback-core.jar复制到$TOMCAT_HOME/lib/目录下 在$TOMCAT_HOME/conf/server.xml中的Host元素中添加： &lt;Value className=\"ch.qos.logback.access.tomcat.LogbackValue\" /> logback默认会在$TOMCAT_HOME/conf下查找文件logback-access.xml 示例配置： &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?> &lt;configuration> &lt;!-- always a good activate OnConsoleStatusListener--> &lt;statusListener class=\"ch.qos.logback.core.status.OnConsoleStatusListener\"/> &lt;property name=\"LOG_DIR\" value=\"${catalina.base}/logs\"/> &lt;appender name=\"FILE\" class=\"ch.qos.logback.core.rolling.RollingFileAppender\"> &lt;file>${LOG_DIR}/access.log&lt;/file> &lt;rollingPolicy class=\"ch.qos.logback.core.rolling.TimeBasedRollingPolicy\"> &lt;fileNamePattern>access.%d{yyyy-MM-dd).log.zip&lt;/fileNamePattern> &lt;/rollingPolicy> &lt;encoder> &lt;pattern>combined&lt;/pattern> &lt;/encoder> &lt;/appender> &lt;appender-ref ref=\"FILE\"/> &lt;/configuration>","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"日志","slug":"日志","permalink":"https://www.codetool.top/tags/%E6%97%A5%E5%BF%97/"}]},{"title":"日志门面SLF4J介绍和使用","slug":"日志门面SLF4J介绍和使用","date":"2020-03-09T12:43:21.000Z","updated":"2020-03-09T15:25:08.027Z","comments":true,"path":"article/日志门面SLF4J介绍和使用/","link":"","permalink":"https://www.codetool.top/article/%E6%97%A5%E5%BF%97%E9%97%A8%E9%9D%A2SLF4J%E4%BB%8B%E7%BB%8D%E5%92%8C%E4%BD%BF%E7%94%A8/","excerpt":"","text":"1 SLF4j概述上篇文章写了日志门面介绍和JCL使用，作为一个曾经的主流日志门面技术，JCL终究因为设计时的产生问题所限，导致至今已没什么人使用，而一款优秀的日志门面技术SLF4j，吸取了JCL的教训与经验，出现在java开发者的视野中，开始被广泛关注和使用。 这里如果谈谈历史还蛮好玩的，涉及到一位Java日志领域知名人物Ceki Gülcü，log4j、slf4j、logback都是出自他之手，在Apache组织开发的log4j，后来离开了apache开发了logback，apache反而又推出了log4j2与之竞争，感兴趣的可以去看看Java日志系统历史从入门到崩溃 - 个人文章 - SegmentFault 思否 SLF4J，即简单日志门面（Simple Logging Facade for Java）,也为Java日志访问提供了一套标准、规范的API框架，它支持了log4j和logback，它本身也提供了功能较简单的日志实现，但一般很少用到，它的设计思想和JCL较为不同，要么遵循slf4j规范开发，要么使用适配器来完成slf-api与具体日志实现框架的整合。 2 SLF4j使用2.1 maven依赖&lt;!-- slf4j日志门面 --> &lt;dependency> &lt;groupId>org.slf4j&lt;/groupId> &lt;artifactId>slf4j-api&lt;/artifactId> &lt;version>1.7.30&lt;/version> &lt;/dependency> &lt;!-- slf4j内置的简单实现 --> &lt;dependency> &lt;groupId>org.slf4j&lt;/groupId> &lt;artifactId>slf4j-simple&lt;/artifactId> &lt;version>1.7.30&lt;/version> &lt;/dependency> 2.2 日志绑定SLF4J使用指定的日志框架需要通过“日志绑定”，通过一些jar文件实现。 绑定具体的日志实现框架： 绑定已经实现了sf4的日志框架直接添加对应依赖 绑定没有实现sf4的日志框架先添加日志的适配器再添加实现类的依赖 logback、slf4j-simple遵循了slf4j-api的开发，只需要导入对应依赖。 slf4j-nop是关闭日志功能。 如果绑定了多个日志实现，使用第一个找到的日志实现。 例：绑定log4j &lt;dependency> &lt;groupId>log4j&lt;/groupId> &lt;artifactId>log4j&lt;/artifactId> &lt;version>1.2.17&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>org.slf4j&lt;/groupId> &lt;artifactId>slf4j-log4j12&lt;/artifactId> &lt;version>1.7.12&lt;/version> &lt;/dependency> 2.3 桥接slf4j的强大之处还在于它对遗留代码的支持，如果项目之前使用的是例如Log4j等日志框架实现，可以通过slf4j提供的“桥接器”将其转移至slf4j使用。甚至还可以桥接JCL。 例如：log4j代码通过桥接器转移至logback实现，首先移除log4j依赖，然后添加桥接器： &lt;dependency> &lt;groupId>org.slf4j&lt;/groupId> &lt;artifactId>log4j-over-slf4j&lt;/artifactId> &lt;version>1.7.12&lt;/version> &lt;/dependency> 这里会出现一个问题比如log4j-over-slf4j与slf4j-log4j12共存出现stack overflow，就是因为slf4j&lt;-&gt;log4j死循环 2.4 特性核心类： Logger：日志记录器，用于写日志 LoggerFactory：日志记录器的工厂类，用于获取日志记录器。 日志级别： trace debug info warn error 比JCL还少一个fatal级别。 使用占位符输出日志信息： public static final Logger LOGGER = LoggerFactory.getLogger(JCLTest.class); @Test public void testQuick() { String name = \"rhett\"; LOGGER.info(\"名字：{}\",name); } 将系统异常信息输出： Logger提供了带throwable参数的方法重载，可以便捷地输出错误信息： public static final Logger LOGGER = LoggerFactory.getLogger(JCLTest.class); @Test public void testException(){ try{ int i = 1/0; }catch (Exception e){ LOGGER.error(\"出现异常：\",e); } } 3 SLF4J原理这个阶段推荐自己进行源码跟踪，我大概把方法栈贴一下 public static Logger getLogger(Class&lt;?> clazz) { Logger logger = getLogger(clazz.getName());//!!! if (DETECT_LOGGER_NAME_MISMATCH) { Class&lt;?> autoComputedCallingClass = Util.getCallingClass(); if (autoComputedCallingClass != null &amp;&amp; nonMatchingClasses(clazz, autoComputedCallingClass)) { Util.report(String.format(\"Detected logger name mismatch. Given name: \\\"%s\\\"; computed name: \\\"%s\\\".\", logger.getName(), autoComputedCallingClass.getName())); Util.report(\"See \" + LOGGER_NAME_MISMATCH_URL + \" for an explanation\"); } } return logger; } public static Logger getLogger(String name) { ILoggerFactory iLoggerFactory = getILoggerFactory(); return iLoggerFactory.getLogger(name); } public static ILoggerFactory getILoggerFactory() { if (INITIALIZATION_STATE == UNINITIALIZED) { synchronized (LoggerFactory.class) { if (INITIALIZATION_STATE == UNINITIALIZED) { INITIALIZATION_STATE = ONGOING_INITIALIZATION; performInitialization();//通往bind方法 } } } switch (INITIALIZATION_STATE) { case SUCCESSFUL_INITIALIZATION: return StaticLoggerBinder.getSingleton().getLoggerFactory(); case NOP_FALLBACK_INITIALIZATION: return NOP_FALLBACK_FACTORY; case FAILED_INITIALIZATION: throw new IllegalStateException(UNSUCCESSFUL_INIT_MSG); case ONGOING_INITIALIZATION: // support re-entrant behavior. // See also http://jira.qos.ch/browse/SLF4J-97 return SUBST_FACTORY; } throw new IllegalStateException(\"Unreachable code\"); } private final static void bind() { try { Set&lt;URL> staticLoggerBinderPathSet = null; // skip check under android, see also // http://jira.qos.ch/browse/SLF4J-328 if (!isAndroid()) { staticLoggerBinderPathSet = findPossibleStaticLoggerBinderPathSet();//!!! reportMultipleBindingAmbiguity(staticLoggerBinderPathSet); } // the next line does the binding StaticLoggerBinder.getSingleton(); INITIALIZATION_STATE = SUCCESSFUL_INITIALIZATION; reportActualBinding(staticLoggerBinderPathSet); } catch (NoClassDefFoundError ncde) { String msg = ncde.getMessage(); if (messageContainsOrgSlf4jImplStaticLoggerBinder(msg)) { INITIALIZATION_STATE = NOP_FALLBACK_INITIALIZATION; Util.report(\"Failed to load class \\\"org.slf4j.impl.StaticLoggerBinder\\\".\"); Util.report(\"Defaulting to no-operation (NOP) logger implementation\"); Util.report(\"See \" + NO_STATICLOGGERBINDER_URL + \" for further details.\"); } else { failedBinding(ncde); throw ncde; } } catch (java.lang.NoSuchMethodError nsme) { String msg = nsme.getMessage(); if (msg != null &amp;&amp; msg.contains(\"org.slf4j.impl.StaticLoggerBinder.getSingleton()\")) { INITIALIZATION_STATE = FAILED_INITIALIZATION; Util.report(\"slf4j-api 1.6.x (or later) is incompatible with this binding.\"); Util.report(\"Your binding is version 1.5.5 or earlier.\"); Util.report(\"Upgrade your binding to version 1.6.x.\"); } throw nsme; } catch (Exception e) { failedBinding(e); throw new IllegalStateException(\"Unexpected initialization failure\", e); } finally { postBindCleanUp(); } } static Set&lt;URL> findPossibleStaticLoggerBinderPathSet() { // use Set instead of list in order to deal with bug #138 // LinkedHashSet appropriate here because it preserves insertion order // during iteration Set&lt;URL> staticLoggerBinderPathSet = new LinkedHashSet&lt;URL>(); try { ClassLoader loggerFactoryClassLoader = LoggerFactory.class.getClassLoader(); Enumeration&lt;URL> paths; if (loggerFactoryClassLoader == null) { paths = ClassLoader.getSystemResources(STATIC_LOGGER_BINDER_PATH); } else { paths = loggerFactoryClassLoader.getResources(STATIC_LOGGER_BINDER_PATH); } while (paths.hasMoreElements()) { URL path = paths.nextElement(); staticLoggerBinderPathSet.add(path); } } catch (IOException ioe) { Util.report(\"Error getting resources from path\", ioe); } return staticLoggerBinderPathSet; } private static String STATIC_LOGGER_BINDER_PATH = \"org/slf4j/impl/StaticLoggerBinder.class\"; 注意: 虽然StaticLoggerBinder是在org.slf4j.impl包下,但日志门面jar包中并无此类,此类是由桥接器实现的。 桥接器的原理其实就是在其jar包中存在StaticLoggerBinder.class,这样就可在运行时动态绑定底层的日志实现框架。 然后回到bind方法： StaticLoggerBinder.getSingleton(); 获取了一个StaticLoggerBinder的单例对象 然后返回getILoggerFactory方法： case SUCCESSFUL_INITIALIZATION: return StaticLoggerBinder.getSingleton().getLoggerFactory(); 总结：桥接器会调用的日志框架实现的相关代码生成其内部的Logger(此Logger与org.slf4j.Logger)不兼容,再通过适配器包装日志框架实现内部的Logger.","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"日志","slug":"日志","permalink":"https://www.codetool.top/tags/%E6%97%A5%E5%BF%97/"}]},{"title":"日志门面介绍和JCL使用","slug":"日志门面介绍和JCL使用","date":"2020-03-09T09:45:50.000Z","updated":"2020-03-09T10:59:29.223Z","comments":true,"path":"article/日志门面介绍和JCL使用/","link":"","permalink":"https://www.codetool.top/article/%E6%97%A5%E5%BF%97%E9%97%A8%E9%9D%A2%E4%BB%8B%E7%BB%8D%E5%92%8CJCL%E4%BD%BF%E7%94%A8/","excerpt":"","text":"1 日志门面概述之前有写过Java日志框架JUL和Log4j介绍，可以对比发现它们之间的使用还是有一些区别的，比如有一些类名是不同的、日志的输出级别也不完全一致。 那么实际上是增大了日志框架与程序的耦合性，使得难以更换日志框架。甚至会造成一些优秀的框架强制性依赖某一个具体的日志实现类，为了解决这个问题，日志门面技术就诞生了。 日志门面实质上就是提供了一套通用的日志API技术，和JDBC的思想类似，使用日志门面，就可以轻松地更换日志实现。 我们为什么要使用日志门面： 面向接口开发,不再依赖具体的实现类减少代码的耦合 项目通过导入不同的日志实现类,可以灵活的切换日志框架 统一API,方便开发者学习和使用 统一配置便于项目日志的管理 常见的日志门面：JCL、slf4j 2 JCL2.1 JCL介绍JCL全称为Jakarta Commons Logging，是 Apache提供的一个通用日志API 它是为“所有的Java日志实现”提供一个统一的接口,它自身也提供一个日志的实现,但是功能非常常弱(SimpleLog)。所以一般不会单独使用它。他允许开发人员使用不同的具体日志实现工具:Log4j、jdk自带的日志(JUL)。 2.2 JCL使用maven依赖： &lt;dependency> &lt;groupId>commons-logging&lt;/groupId> &lt;artifactId>commons-logging&lt;/artifactId> &lt;version>1.2&lt;/version> &lt;/dependency> 如果要使用log4j还需加上log4j的依赖 核心类： Log：日志记录器，用于写日志 LogFactory：日志记录器的工厂类，用于获取日志记录器。 JCL的日志级别： trace debug info warn error fatal 可以看出和log4j的日志级别一致，但它把JUL的日志级别也适配到了这套日志级别上。 对于配置文件，如果使用JUL就添加JUL的配置文件，如果使用log4j就添加Log4j的配置文件。 JCL默认会根据如下顺序查找日志的实现类： private static final String[] classesToDiscover = { LOGGING_IMPL_LOG4J_LOGGER, \"org.apache.commons.logging.impl.Jdk14Logger\", \"org.apache.commons.logging.impl.Jdk13LumberjackLogger\", \"org.apache.commons.logging.impl.SimpleLog\" }; for(int i=0; i&lt;classesToDiscover.length &amp;&amp; result == null; ++i) { result = createLogFromClass(classesToDiscover[i], logCategory, true); } 其中LOGGING_IMPL_LOG4J_LOGGER代表的是log4j的org.apache.commons.logging.impl.Log4JLogger，可以看到JCL支持的日志实现有： log4j jdk1.4的日志（JUL） jdk1.3前的LumberjackLogger（已经淘汰） JCL自带的SimpleLog 如果用户不指定使用哪个日志实现类，JCL会按这个顺序查找，使用最先找到的实现类。 如果需要指定，还需要添加一个配置文件commons-logging.properties在类路径下： org.apache.commons.logging.Log=org.apache.commons.logging.impl.SimpleLog 此后就可以使用了： Log log = LogFactory.getLog(JCLTest.class); log.info(\"hello JCL\"); 2.3 JCL的问题JCL的问题是，当初设计的时候只考虑到了在当时比较主流的日志框架log4j、JUL，也只支持这几个日志框架，导致后面如果出现了更强大的日志框架，比如说logback出现后，如果需要使用logback，JCL需要通过修改代码的方式来适配，当然这会造成很大的麻烦。 JCL获取日志工厂的过程中使用了classLoader来寻找日志工厂实现，进而导致了其他组件，如若使用自己的classloader，则不能获取具体的日志工厂对象，则导致启动失败。（即无法动态查找） 于是不久commons-logging就退出了人们的视线，更好的日志门面技术slf4j诞生以取代它的位置。","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"日志","slug":"日志","permalink":"https://www.codetool.top/tags/%E6%97%A5%E5%BF%97/"}]},{"title":"leetcode121-买卖股票的最佳时机","slug":"leetcode121-买卖股票的最佳时机","date":"2020-03-08T16:12:45.000Z","updated":"2020-03-08T16:22:43.537Z","comments":true,"path":"article/leetcode121-买卖股票的最佳时机/","link":"","permalink":"https://www.codetool.top/article/leetcode121-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/","excerpt":"","text":"1 原题给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。 如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。 注意你不能在买入股票前卖出股票。 示例 1: 输入: [7,1,5,3,6,4]输出: 5解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。 注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。 示例 2: 输入: [7,6,4,3,1]输出: 0解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。 2 解法2.1 思想从左往右记录最低点，记录下当前价格与最低点的差值的最大值。 2.2 代码class Solution { public int maxProfit(int[] prices) { int minprice = Integer.MAX_VALUE; int maxprofit = 0; for (int i = 0; i &lt; prices.length; i++) { if (prices[i] &lt; minprice) minprice = prices[i]; else if (prices[i] - minprice > maxprofit) maxprofit = prices[i] - minprice; } return maxprofit; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"SpringBoot自动配置原理与自定义配置介绍","slug":"SpringBoot自动配置原理与自定义配置介绍","date":"2020-03-08T13:34:46.000Z","updated":"2020-03-08T13:36:31.395Z","comments":true,"path":"article/SpringBoot自动配置原理与自定义配置介绍/","link":"","permalink":"https://www.codetool.top/article/SpringBoot%E8%87%AA%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"SpringBoot配置与自动配置原理 1 自动配置原理SpringBoot启动的时候加载主配置类，开启了自动配置功能 @EnableAutoConfiguration： @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Documented @Inherited @SpringBootConfiguration @EnableAutoConfiguration //!!! @ComponentScan(excludeFilters = { @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class), @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) }) public @interface SpringBootApplication @EnableAutoConfiguration 的作用： 利用EnableAutoConfigurationImportSelector给容器中导入一些组件 @Target(ElementType.TYPE) @Retention(RetentionPolicy.RUNTIME) @Documented @Inherited @AutoConfigurationPackage @Import(AutoConfigurationImportSelector.class) //!!! public @interface EnableAutoConfiguration 可以查看AutoConfigurationImportSelector.selectImports()方法的内容； public String[] selectImports(AnnotationMetadata annotationMetadata) { if (!isEnabled(annotationMetadata)) { return NO_IMPORTS; } AutoConfigurationMetadata autoConfigurationMetadata = AutoConfigurationMetadataLoader .loadMetadata(this.beanClassLoader); AutoConfigurationEntry autoConfigurationEntry = getAutoConfigurationEntry(autoConfigurationMetadata, annotationMetadata);//!!! return StringUtils.toStringArray(autoConfigurationEntry.getConfigurations()); } getAutoConfigurationEntry()方法： protected AutoConfigurationEntry getAutoConfigurationEntry(AutoConfigurationMetadata autoConfigurationMetadata, AnnotationMetadata annotationMetadata) { if (!isEnabled(annotationMetadata)) { return EMPTY_ENTRY; } AnnotationAttributes attributes = getAttributes(annotationMetadata); List&lt;String> configurations = getCandidateConfigurations(annotationMetadata, attributes);//!!! configurations = removeDuplicates(configurations); Set&lt;String> exclusions = getExclusions(annotationMetadata, attributes); checkExcludedClasses(configurations, exclusions); configurations.removeAll(exclusions); configurations = filter(configurations, autoConfigurationMetadata); fireAutoConfigurationImportEvents(configurations, exclusions); return new AutoConfigurationEntry(configurations, exclusions); } getCandidateConfigurations()方法： protected List&lt;String> getCandidateConfigurations(AnnotationMetadata metadata, AnnotationAttributes attributes) { List&lt;String> configurations = SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader()); Assert.notEmpty(configurations, \"No auto configuration classes found in META-INF/spring.factories. If you \" + \"are using a custom packaging, make sure that file is correct.\"); return configurations; } 从META-INF下面找spring.factories文件，将里面配置的所有EnableAutoConfiguration的值加入到了容器中 每一个这样的xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置。 例如：自动配置类DispatcherServletAutoConfiguration （节选内部类DispatcherServletConfiguration） //配置文件 @Configuration(proxyBeanMethods = false) //配置条件满足类DefaultDispatcherServletCondition的验证 @Conditional(DefaultDispatcherServletCondition.class) //如果存在ServletRegistration类则进行配置 @ConditionalOnClass(ServletRegistration.class) //如果存在对应的属性配置（WebMvcProperties对应的是spring.mvc.*）则启用配置 @EnableConfigurationProperties({ HttpProperties.class, WebMvcProperties.class }) protected static class DispatcherServletConfiguration { @Bean(name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME) public DispatcherServlet dispatcherServlet(HttpProperties httpProperties, WebMvcProperties webMvcProperties) { DispatcherServlet dispatcherServlet = new DispatcherServlet(); dispatcherServlet.setDispatchOptionsRequest(webMvcProperties.isDispatchOptionsRequest()); dispatcherServlet.setDispatchTraceRequest(webMvcProperties.isDispatchTraceRequest()); dispatcherServlet.setThrowExceptionIfNoHandlerFound(webMvcProperties.isThrowExceptionIfNoHandlerFound()); dispatcherServlet.setPublishEvents(webMvcProperties.isPublishRequestHandledEvents()); dispatcherServlet.setEnableLoggingRequestDetails(httpProperties.isLogRequestDetails()); return dispatcherServlet; } @Bean //如果存在类定义则配置 @ConditionalOnBean(MultipartResolver.class) //判断如果不存在bean名称为DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME，则配置 bean @ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME) public MultipartResolver multipartResolver(MultipartResolver resolver) { // Detect if the user has created a MultipartResolver but named it incorrectly return resolver; } } 通过上面的代码,可以看到Spring Boot内部已经自动为我们做了很多关于DispatcherServlet的配置,其中的@EnableConfigurationProperties还能够在读取配置内容的情况下自动生成Spring MVC所需的类。到这里,应该明白为什么几乎在没有任何配置下就能用Spring Boot启动 Spring MVC项目,这些都是Spring Boot通过Maven依赖找到对应的jar包和嵌入的服务器,然后使用默认自动配置类来创建默认的开发环境。但是有时候,我们需要对这些默认的环境进行修改以适应个性化的要求,这些在 Spring Boot中也是非常简单的,正如@EnableConfigurationProperties注解那样，它允许读入配置文件的内容来自定义自动初始化所需的内容。 2 Spring Boot配置文件Spring Boot的所有的AutoConfiguration属性项可以在 https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#common-application-properties 看到。这一节我们主要介绍自定义配置。 2.1 yaml语法配置文件推荐使用yaml语法来写，通过缩进来表达数据关系。 2.2 字符串字符串​可以不加引号，如果加引号： &quot;&quot;：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思 name: &quot;zhangsan \\n lisi&quot;：\\n会解析为回车 &#39;&#39;：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据 name: &#39;zhangsan \\n lisi&#39;：\\n不会解析为回车 2.3 对象、Mapfriends: lastName: zhangsan age: 20 行内写法： friends: {lastName: zhangsan,age: 18} 2.3.1 数组（List、Set）pets: - cat - dog - pig 行内写法： pets: [cat,dog,pig] 2.4 自定义属性配置可以在类上加上@ConfigurationProperties(prefix=&quot;&quot;)注解，把本类中所有属性和配置文件中相关的配置进行绑定。 只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能。 例： JavaBean @Component @ConfigurationProperties(prefix = \"person\") public class Person { private String lastName; private Integer age; private Boolean boss; private Date birth; private Map&lt;String,Object> maps; private List&lt;Object> lists; private Dog dog; //getter and setter... } 配置： person: lastName: hello age: 18 boss: false birth: 2000/01/01 maps: {k1: v1,k2: 12} lists: - lisi - zhaoliu dog: name: 小狗 age: 7 它默认从全局配置中获取值，可以使用@PropertySource(value={})来指定配置文件。 2.5 配置文件占位符2.5.1 随机数 ${random.value} ${random.int} ${random.long} ${random.int(10)} ${random.int[1024,65536]} 2.5.2 占位符获取之前配置的值，如果没有可以是用:指定默认值person.last-name=张三${random.uuid} person.age=${random.int} person.birth=2017/12/15 person.boss=false person.maps.k1=v1 person.maps.k2=14 person.lists=a,b,c person.dog.name=${person.hello:hello}_dog person.dog.age=15 2.6 配置文件加载位置springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件 file:./config/ file:./ classpath:/config/ classpath:/ 优先级由高到底，高优先级的配置会覆盖低优先级的配置 SpringBoot会从这四个位置全部加载主配置文件，互补配置 我们还可以通过spring.config.location来改变默认的配置文件位置。 项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置； java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar --spring.config.location=G:/application.properties SpringBoot支持的所有的外部配置文件加载方法见： https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config 2.7 @ImportResource注解@ImportResource可以帮助导入传统xml类型的配置，例如springcontext配置，直接将它写在启动类上就行了。 //导入Spring的配置文件让其生效 @ImportResource(locations = {\"classpath:beans.xml\"}) @SpringBootApplication public class BootHelloworldApplication { public static void main(String[] args) { SpringApplication.run(BootHelloworldApplication.class, args); } } 2.8 多环境化配置Profile2.8.1 properties在真实的应用中，常常会有多个环境（如：开发，测试，生产等），不同的环境数据库连接都不一样，这个时候就需要用到spring.profile.active的强大功能了，它的格式为 application-{profile}.properties，这里的 application 为前缀不能改，{profile}是我们自己定义的。 application.properties就是默认的配置文件。 在 application.properties 配置文件中写入 spring.profiles.active=dev，就可以指定使用profile为dev的配置文件。 也可以使用虚拟机参数-Dspring.profiles.active=dev指定 2.8.2 yaml文档块# document 1 server: port: 8081 spring: profiles: active: prod --- # document 2 server: port: 8083 spring: profiles: dev --- # document 3 server: port: 8084 spring: profiles: prod #指定属于哪个环境 文档块之间使用---分隔，第一个文档块为默认使用的配置。","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.codetool.top/tags/SpringBoot/"}]},{"title":"leetcode322-零钱兑换","slug":"leetcode322-零钱兑换","date":"2020-03-08T09:53:09.000Z","updated":"2020-03-08T09:55:34.373Z","comments":true,"path":"article/leetcode322-零钱兑换/","link":"","permalink":"https://www.codetool.top/article/leetcode322-%E9%9B%B6%E9%92%B1%E5%85%91%E6%8D%A2/","excerpt":"","text":"1 原题给定不同面额的硬币 coins 和一个总金额 amount。编写一个函数来计算可以凑成总金额所需的最少的硬币个数。如果没有任何一种硬币组合能组成总金额，返回 -1。 示例 1: 输入: coins = [1, 2, 5], amount = 11输出: 3解释: 11 = 5 + 5 + 1 示例 2: 输入: coins = [1, 2, 5], amount = 11输出: 3解释: 11 = 5 + 5 + 1 说明: 你可以认为每种硬币的数量是无限的。 2 解法2.1 思想这道题和leetcode279-完全平方数类似，可以使用BFS+剪枝的方法来做。 2.2 代码class Solution { boolean[] visited; public int coinChange(int[] coins, int amount) { if(amount == 0) return 0; visited = new boolean[amount+1]; Queue&lt;Integer> queue = new LinkedList&lt;>(); queue.offer(amount); queue.offer(null); int depth = 0; while(!queue.isEmpty()){ Integer num = queue.poll(); if(num == null) { if(queue.isEmpty()) return -1; depth++; queue.offer(null); continue; } for(int i = 0;i&lt;coins.length;i++){ int left = num-coins[i]; if(left == 0) return depth + 1; if(left &lt; 0) continue; if(visited[left] == true) continue; visited[left] = true; queue.offer(left); } } return -1; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"搜索树","slug":"搜索树","permalink":"https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"SpringBoot介绍和HelloWorld入门程序","slug":"SpringBoot介绍和HelloWorld入门程序","date":"2020-03-08T08:47:27.000Z","updated":"2020-03-08T13:35:14.467Z","comments":true,"path":"article/SpringBoot介绍和HelloWorld入门程序/","link":"","permalink":"https://www.codetool.top/article/SpringBoot%E4%BB%8B%E7%BB%8D%E5%92%8CHelloWorld%E5%85%A5%E9%97%A8%E7%A8%8B%E5%BA%8F/","excerpt":"","text":"1 Spring Boot 简介 简化Spring应用开发的一个框架； 整个Spring技术栈的一个大整合； J2EE开发的一站式解决方案； Spring Boot用来简化Spring应用开发，约定大于配置，去繁从简，just run就能创建一个独立的，产品级别的应用 1.1 优点 快速创建独立运行的Spring项目以及与主流框架集成 使用嵌入式的Servlet容器，应用无需打成WAR包 starters自动依赖与版本控制 大量的自动配置，简化开发，也可修改默认值 无需配置XML，无代码生成，开箱即用 准生产环境的运行时应用监控 与云计算的天然集成 1.2 starter概念Spring Boot Starter是一组被依赖第三方类库的集合。 如果你要开发一个web应用程序，就通过包管理工具(如maven)引入spring-boot-starter-web就可以了，而不用分别引入下面这么多依赖类库，spring-boot-starter-web一次性帮你引入下面的这些常用类库。 Spring — spring 核心, beans, context上下文, AOP面向切面 Web MVC — Spring MVC Jackson — JSON数据的序列化与反序列化 Validation — Hibernate参数校验及校验API 嵌入式 Servlet Container — Tomcat 日志框架Logging — logback, slf4j Spring Boot 默认支持的starter见 https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#using-boot-starter 1.3 Spring Boot Starter Parent所有的Spring Boot项目默认使用spring-boot-starter-parent作为应用程序的父项目。 &lt;parent> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-starter-parent&lt;/artifactId> &lt;version>2.0.0.RELEASE&lt;/version> &lt;/parent> 继承父项目的好处在于： 统一java版本配置和其他的一些依赖类库的版本。也就是说，你引入的第三方类库不要加版本号，父项目替你管理版本，而且是经过兼容性测试的。比你自己随便引入一个版本兼容性更好。 1.4 Spring Boot集成第三方类库的步骤 通过maven引入springboot-XXXX-starter 修改ymal或properties全局统一配置文件 加入一个Java Config。这个属于个性化配置，如果使用通用配置，这一步不需要。 1.5 Spring Boot2.x新特性1.5.1 基础环境升级 最低 JDK 8，支持 JDK 9，不再支持 Java 6 和 7。Spring Boot 2.0 要求 Java 8 作为最低版本，许多现有的 API 已更新，以利用 Java 8 的特性。例如，接口上的默认方法，函数回调以及新的 API，如 javax.time。 如果你正在使用 Java 7 或更早版本，则在开发 Spring Boot 2.0 应用程序之前，需要升级你的 JDK。 1.5.2 依赖组件升级 Jetty 9.4，Jetty 是一个开源的 Servlet 容器，它为基于 Java 的 Web 内容，例如 JSP 和 Servlet 提供运行环境。Jetty 是使用 Java 语言编写的，它的 API 以一组 JAR 包的形式发布。 Tomcat 8.5，Apache Tomcat 8.5.x 旨在取代 8.0.x，完全支持 Java 9。 Flyway 5，Flyway 是独立于数据库的应用、管理并跟踪数据库变更的数据库版本管理工具。用通俗的话讲，Flyway 可以像 SVN 管理不同人的代码那样，管理不同人的 SQL 脚本，从而做到数据库同步。 Hibernate 5.2，Hibernate 是一款非常流行的 ORM 框架。 Gradle 3.4，Spring Boot 的 Gradle 插件在很大程度上已被重写，有了重大的改进。 Thymeleaf 3.0，Thymeleaf 3 相对于 Thymeleaf 2 有非常大的性能提升 1.5.3 默认软件替换 默认数据库连接池已从 Tomcat 切换到 HikariCP，HikariCP 是一个高性能的 JDBC 连接池，Hikari 是日语“光”的意思。 Redis客户端默认使用 Lettuce，替换掉Jedis。Lettuce 是一个可伸缩的线程安全的 Redis 客户端，用于同步、异步和反应使用。多个线程可以共享同一个 RedisConnection，它利用优秀 Netty NIO 框架来高效地管理多个连接，支持先进的 Redis 功能，如 Sentinel、集群、流水线、自动重新连接和 Redis 数据模型。 1.5.4 新技术的引入 响应式编程WebFlux，重要的变革 支持 Quartz,Spring Boot 1.0 并没有提供对 Quartz 的支持，之前出现了各种集成方案，Spring Boot 2.0 给出了最简单的集成方式。 对Kotlin 的支持 JOOQ 的支持,JOOQ 是基于 Java 访问关系型数据库的工具包。JOOQ 既吸取了传统 ORM 操作数据的简单性和安全性，又保留了原生 SQL 的灵活性，它更像是介于 ORMS 和 JDBC 的中间层。 2 Spring Boot HelloWorld使用Spring Boot来做一个Hello World入门程序： 1) 在idea中创建Spring Initializr项目 2) 添加maven依赖 Idea会自动为我们生成如下pom文件： &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?> &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\"> &lt;modelVersion>4.0.0&lt;/modelVersion> &lt;parent> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-starter-parent&lt;/artifactId> &lt;version>2.2.5.RELEASE&lt;/version> &lt;relativePath/> &lt;!-- lookup parent from repository --> &lt;/parent> &lt;groupId>com.rhett&lt;/groupId> &lt;artifactId>boot-helloworld&lt;/artifactId> &lt;version>0.0.1-SNAPSHOT&lt;/version> &lt;name>boot-helloworld&lt;/name> &lt;description>Demo project for Spring Boot&lt;/description> &lt;properties> &lt;java.version>1.8&lt;/java.version> &lt;/properties> &lt;dependencies> &lt;dependency> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-starter&lt;/artifactId> &lt;/dependency> &lt;dependency> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-starter-test&lt;/artifactId> &lt;scope>test&lt;/scope> &lt;exclusions> &lt;exclusion> &lt;groupId>org.junit.vintage&lt;/groupId> &lt;artifactId>junit-vintage-engine&lt;/artifactId> &lt;/exclusion> &lt;/exclusions> &lt;/dependency> &lt;/dependencies> &lt;build> &lt;plugins> &lt;plugin> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-maven-plugin&lt;/artifactId> &lt;/plugin> &lt;/plugins> &lt;/build> &lt;/project> 添加web-starter进去： &lt;dependency> &lt;groupId>org.springframework.boot&lt;/groupId> &lt;artifactId>spring-boot-starter-web&lt;/artifactId> &lt;/dependency> 可以移除相关maven管理的文件，使用idea管理： resources文件夹中目录结构 static：保存所有的静态资源； js css images； templates：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）； application.properties：Spring Boot应用的配置文件；可以修改一些默认设置，可以使用yml语法进行配置。 3) 查看启动类 idea默认为我们生成了启动类： /** * @SpringBootApplication来标记一个主程序类，说明这是一个Spring Boot应用 */ @SpringBootApplication public class BootHelloworldApplication { public static void main(String[] args) { SpringApplication.run(BootHelloworldApplication.class, args); } } 4) 编写Controller springboot只会扫描启动类当前包和以下的包，创建以下包层次，编写一个HelloController： @RestController public class HelloController { @RequestMapping(\"/hello\") public String hello() { return \"hello world\"; } } @RestController相当于@ResponseBody+@Controller，返回的内容直接写入响应体，不会解析到视图。 5) 启动程序 运行启动类中的main方法，程序就启动起来了，在浏览器中输入localhost:8080/hello来观察运行结果：","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"SpringBoot","slug":"SpringBoot","permalink":"https://www.codetool.top/tags/SpringBoot/"}]},{"title":"MySQL之分区表介绍","slug":"MySQL之分区表介绍","date":"2020-03-07T14:10:45.000Z","updated":"2020-03-07T14:22:04.547Z","comments":true,"path":"article/MySQL之分区表介绍/","link":"","permalink":"https://www.codetool.top/article/MySQL%E4%B9%8B%E5%88%86%E5%8C%BA%E8%A1%A8%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"本文大部分参考自《MySQL技术内幕：InnoDB存储引擎》 1 概述对于InnoDB，分区就是把一个数据表的物理存储拆分为多个ibd文件（相当于独立表空间再拆分成了多个表空间）。分区后的MyISAM，则是每个分区有一个myi文件（表的索引信息）和一个myd文件（表的数据信息）。每一个分区，在MySQL看来都是一张独立的表。 2 分区类型2.1 水平分区这种形式分区是对表的行进行分区，通过这样的方式不同分组里面的物理列分割的数据集得以组合，从而进行个体分割（单分区）或集体分割（1个或多个分区）。所有在表中定义的列在每个数据集中都能找到，所以表的特性依然得以保持。 2.2 垂直分区这种分区方式一般来说是通过对表的垂直划分来减少目标表的宽度，使某些特定的列被划分到特定的分区，每个分区都包含了其中的列所对应的行。 MySQL在5.1时添加了对水平分区的支持。并不支持垂直分区。 MySQL数据库的分区是局部分区索引，一个分区中既存了数据，又放了索引。也就是说，每个区的聚集索引和非聚集索引都放在各自区的（不同的物理文件）。目前MySQL数据库还不支持全局分区（数据存放在各个分区中，但是所有数据的索引放在一个对象中）。 3 分区算法当前MySQL支持以下几种类型的分区： RANGE分区：行数据基于属于一个给定连续区间的列值被放入分区，MySQL5.5开始支持。 LIST分区：和RANGE类似，只是LIST分区面向的是离散的值。MySQL5.5开始支持。 HASH分区：根据用户自定义的表达式的返回值来进行分区，返回值不能为负数。 KEY分区：根据MySQL数据库提供的哈希函数来进行分区。 无论哪种类型的分区，如果表中存在主键或唯一索引时，分区列（用来判断该分往哪个分区）必须是唯一索引的一个组成部分。 3.1 RANGE分区示例 CREATE TABLE tbl_new( id INT NOT NULL PRIMARY KEY, title VARCHAR(20) NOT NULL DEFAULT '' ) PARTITION BY RANGE(id)( PARTITION t0 VALUES LESS THAN(10), PARTITION t1 VALUES LESS THAN(20), PARTITION t2 VALUES LESS THAN(MAXVALUE) ); 这个表会把以id列作为分区依据，当id： 0~10 放在 t0 10~20 放在 t1 &gt;20 放在 t2 当插入一个不在分区范围内的值的时候，MySQL会报异常。 3.2 LIST分区示例 create table user ( uid int not null, userName varchar(20), gender tinyint ) partition by list(gender) ( partition male values in (1), partition female values in (2), partition unknown values in (3) ); 这个表会把以gender列（性别）作为分区依据，当gender： = 1 放在 male = 2 放在 female = 3 放在 unknown 当插入一个不在分区范围内的值的时候，MySQL同样会报异常。 当一条Insert语句插入多个值的时候，而其中有一些值是在分区范围内的，MyISAM引擎会把第一个不满足范围的数据前面的数据全部插入，而后面的不处理。而InnoDB则把它当成一个事务，都不会处理。 3.3 HASH分区示例： CREATE TABLE t_hash( a INT, b DATETIME ) ENGINE=InnoDB PARTITION BY HASH(YEAR(b)) PARTITIONS 4; 用户给数据库提供分区的依据，YEAR(b)，必须是一个正整数，然后需要通过PARTITIONS num告知数据库分区的数量，然后数据库自动根据YEAR(b)将数据均匀分到这些分区中。如果没有PARTITIONS num语句，分区的数量默认为1。 3.4 KEY分区KEY分区和HASH分区相似，不同之处在于HASH分区使用用户定义的函数进行分区，KEY分区使用MySQL数据库提供的函数进行分区。对于大多数存储引擎，MySQL数据库使用其内部的哈希函数，这些函数基于与PASSWORD()一样的运算法则。 示例： CREATE TABLE t_key( a INT, b DATETIME ) ENGINE=InnoDB PARTITION BY KEY (b) PARTITIONS 4; 3.5 其他COLUMNS分区、子分区 4 分区的应用场景 表非常大以至于无法全部放在内存中，或者只在表的最后部分有热点数据，其他均为历史数据（可以将热点数据提取出来，加快热点数据的查询、访问效率） 分区表的数据更容易维护。（批量删除数据-&gt;清除整个分区） 分区表的数据可以分布在不同的物理设备上，从而高效地利用多个硬件设备 可以使用分区表来避免某些特殊的瓶颈。比如 InnoDB 的单个索引的互斥访问，ext3 文件系统的 inode 锁竞争。 还可以备份和恢复独立的分区 5 分区的限制 一个表最多只能有 1024 个分区 如果表中存在主键或唯一索引时，分区列必须是唯一索引的一个组成部分。 分区表中无法使用外键索引 6 分区的陷阱6.1 NULL值会使分区过滤无效分区的表达式的值可以是 NULL；第一个分区是一个特殊分区，如果表达式的值为 NULL 或非法值，记录都会被存放到第一个分区。WHERE 查询时即使看起来可以过滤到只有一个分区，但实际会检查两个分区，即第一个分区。最好是设置分区的列为NOT NULL。 6.2 分区列和索引列不匹配如果定义的索引列和分区列不匹配，会导致索引无法进行分区过滤。 假设在列 a 上定义了索引，而在列 b 上进行分区。因为每个分区都有其独立的索引，所以扫描 b 上的索引就需要扫描每一个分区内对应的索引。 6.3 选择分区的成本可能很高尤其是范围分区，对于回答“这一行属于哪个分区”、“这些符合查询条件的行在哪些分区”这样的问题的成本可能会非常高。其他的分区类型，比如KEY分区和HASH分区，就没有这样的问题。在批量插入时问题尤其严重。","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"优化","slug":"优化","permalink":"https://www.codetool.top/tags/%E4%BC%98%E5%8C%96/"},{"name":"数据库","slug":"数据库","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"https://www.codetool.top/tags/MySQL/"}]},{"title":"MySQL主从复制简介","slug":"MySQL主从复制简介","date":"2020-03-07T11:30:48.000Z","updated":"2020-03-07T11:34:26.870Z","comments":true,"path":"article/MySQL主从复制简介/","link":"","permalink":"https://www.codetool.top/article/MySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E7%AE%80%E4%BB%8B/","excerpt":"","text":"该文不谈及良好的主从复制拓扑结构和主从复制中可能出现的问题，以后有时间再写。 1 概述复制解决的基本问题是让一台服务器的数据与其他服务器保持同步。一台主库的数据可以同步到多台备库上，备库本身也可以被配置成另外一台服务器的主库。 MySQL 支持两种复制方式：基于行的复制和基于语句的复制。这两种方式都是通过在主库上记录 binlog，在备库重放日志的方式来实现异步的数据复制。这意味着，在同一时间点备库上的数据可能与主库存在不一致，并且保证主备之间的延迟。 复制通常不会增加主库的开销，主要是启用 binlog 带来的开销，但出于备份或及时从崩溃中恢复的目的，这点开销也是必要的。除此之外，每个备库也会对主库增加一些负载（网络IO），尤其当备库请求从主库读取旧的 binlog 时，可能会造成更高的 IO 开销。 通过复制可以将读操作指向备库来获得更好的读扩展，但对于写操作，除非设计得当，否则并不适合通过复制来扩展写操作。 1.1 复制解决的问题 数据分布 负载均衡，读写分离 备份 高可用和故障切换 2 复制原理2.1 复制如何工作 在主库上把数据更改记录在 binlog 中（这些记录称为二进制日志事件） 备库将主库上的日志复制到自己的中继日志中 备库读取中继日志中的事件，将其重放到备库数据之上 2.2 基于语句的复制主库会记录那些造成数据更改的查询，当备库读取并重放这些事件时，实际上只是把主库上执行过的 SQL 再执行一遍。 即binlog的statement模式 优点： 实现简单 binlog 中的事件更加紧凑 问题： 同一条 SQL 在主库和备库上执行的时间可能稍微或很不相同，因此在传输的 binlog 中，除了 SQL，还有一些元数据，比如时间戳 一些无法被正确复制的 SQL，存储过程、触发器 更新必须是串行的，这需要更多的锁 2.3 基于行的复制会将实际数据记录在 binlog 中。即binlog的row模式 好处： 可以正确地复制每一行，一些语句可以被更加有效地复制 复制更加高效（但也视情况而定） 3 搭建步骤3.1 master 在master的配置文件中，配置如下内容： #mysql 服务ID,保证整个集群环境中唯一 server-id=1 #mysql binlog 日志的存储路径和文件名，主从复制是基于binlog的 log-bin=/var/lib/mysql/mysqlbin #错误日志,默认已经开启 #log-err #mysql的安装目录 #basedir #mysql的临时目录 #tmpdir #mysql的数据存放目录 #datadir #是否只读,1 代表只读, 0 代表读写 read-only=0 #忽略的数据, 指不需要同步的数据库 binlog-ignore-db=mysql #指定同步的数据库 #binlog-do-db=db01 在客户端中建同步数据的账户，并且进行授权操作： grant replication slave on *.* to 'slave1'@'slave_host' identified by 'password'; flush privileges; 如果需要配置多个从机就创建多个账户，&#39;slave_host&#39;代表从机的ip地址。 查看master状态： show master status; File : 从哪个日志文件开始推送日志文件 Position ： 从哪个位置开始推送日志 Binlog_Ignore_DB : 指定不需要同步的数据库 3.2 slave 在 slave 端配置文件中，配置如下内容： #mysql服务端ID,唯一 server-id=2 #指定binlog日志 log-bin=/var/lib/mysql/mysqlbin 在客户端内执行如下指令 ： change master to master_host= 'master_host', master_user='slave1', master_password='password', master_log_file='mysqlbin.000001', master_log_pos=413; 指定当前从库对应的主库的IP地址，用户名，密码，从哪个日志文件开始的那个位置开始同步推送日志。（这些都是在master status中看到的） 开启同步操作 start slave; show slave status; 停止同步操作 stop slave;","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"https://www.codetool.top/tags/MySQL/"}]},{"title":"MySQL之日志配置全解","slug":"MySQL之日志配置全解","date":"2020-03-07T09:43:59.000Z","updated":"2020-03-07T09:44:31.028Z","comments":true,"path":"article/MySQL之日志配置全解/","link":"","permalink":"https://www.codetool.top/article/MySQL%E4%B9%8B%E6%97%A5%E5%BF%97%E9%85%8D%E7%BD%AE%E5%85%A8%E8%A7%A3/","excerpt":"","text":"1 错误日志错误日志是 MySQL 中最重要的日志之一，它记录了当 mysqld 启动和停止时，以及服务器在运行过程中发生任何严重错误时的相关信息。当数据库出现任何故障导致无法正常使用时，可以首先查看此日志。 该日志是默认开启的 ， 默认存放目录为 mysql 的数据目录（var/lib/mysql）, 默认的日志文件名为 hostname.err（hostname是主机名）。 1.1 相关配置 log-error：错误日志存放路径 log-warnings：是否将警告信息也输入错误日志，1代表是（5.7后废弃） log_error_verbosity：（代替log-warnings）错误日志级别 1：errors only 2：errors and warnings 3：errors，warnings and notes 2 二进制日志二进制日志包含了所有的 DDL（数据定义语言）语句和 DML（数据操纵语言）语句的事件信息，但是不包括数据查询语句。语句以”事件”的形式保存，所以包含了时间、事件开始和结束位置等信息。此日志对于灾难时的数据恢复起着极其重要的作用，MySQL的主从复制， 就是通过该binlog实现的。 二进制日志，默认情况下是没有开启的，需要到MySQL的配置文件中开启，并配置MySQL日志的格式。 mysqld还创建一个二进制日志索引文件，当二进制日志文件滚动的时候会向该文件中写入对应的信息。所以该文件包含所有使用的二进制日志文件的文件名。默认情况下该文件与二进制日志文件的文件名相同，扩展名为’.index’。 2.1 相关配置 log_bin=[on|off|file_name]：开启binlog，如果没有给定file_name，则默认为datadir下的主机名加”-bin”，并在后面跟上一串数字表示日志序列号。 binlog_format=[STATEMENT|ROW|MIXED]：指定二进制日志的格式。 STATEMENT：该日志格式在日志文件中记录的都是SQL语句（statement），每一条对数据进行修改的SQL都会记录在日志文件中，通过Mysql提供的mysqlbinlog工具，可以清晰的查看到每条语句的文本。主从复制的时候，从库（slave）会将日志解析为原文本，并在从库重新执行一次。 ROW：该日志格式在日志文件中记录的是每一行的数据变更，而不是记录SQL语句。比如，执行SQL语句 ： update tb_book set status=’1’ , 如果是STATEMENT 日志格式，在日志中会记录一行SQL文件； 如果是ROW，由于是对全表进行更新，也就是每一行记录都会发生变更，ROW 格式的日志中会记录每一行的数据变更。 MIXED：这是目前MySQL默认的日志格式，即混合了STATEMENT 和 ROW两种格式。默认情况下采用STATEMENT，但是在一些特殊情况下采用ROW来进行记录。MIXED 格式能尽量利用两种模式的优点，而避开他们的缺点。 log_bin_index = file_name：配置索引文件的名字 expire_logs_days：指定自动删除二进制日志的时间，即日志过期时间 binlog_do_db ：明确指定要记录日志的数据库 binlog_ignore_db ：指定不记录二进制日志的数据库 binlog_cache_size = 32768 : 基于事务类型的日志会先记录在缓冲区，当达到该缓冲大小时这些日志会写入磁盘 max_binlog_size ：指定二进制日志文件最大值，超出指定值将自动滚动。但由于事务不会跨文件，所以并不一定总是精确。 sync_binlog = { 0 | n } ：日志何时刷到磁盘 0:不同步，日志何时刷到磁盘由FileSystem决定，这个性能最好。 n:每写n次二进制日志事件(不是事务)，MySQL将执行一次磁盘同步指令fdatasync()将缓存日志刷新到磁盘日志文件中。Mysql中默认的设置是sync_binlog=0，即不同步，这时性能最好，但风险最大。一旦系统奔溃，缓存中的日志都会丢失。 在Innodb的主从复制结构中，如果启用了二进制日志(几乎都会启用)，要保证事务的一致性和持久性的时候，必须将sync_binlog的值设置为1，因为每次事务提交都会写入二进制日志，设置为1就保证了每次事务提交时二进制日志都会写入到磁盘中，从而立即被从服务器复制过去。 2.2 日志查看由于日志以二进制方式存储，不能直接读取，需要用mysqlbinlog工具来查看，语法如下 ： mysqlbinlog log-file 2.3 日志删除对于比较繁忙的系统，由于每天生成日志量大 ，这些日志如果长时间不清除，将会占用大量的磁盘空间。下面介绍几种删除日志的常见方法 ： 1) 通过 Reset Master 指令删除全部 binlog 日志，删除之后，日志编号将从 xxxx.000001重新开始。 2) 执行指令 purge master logs to &#39;mysqlbin.******&#39; ，该命令将删除 ****** 编号之前的所有日志。 3) 执行指令 purge master logs before &#39;yyyy-mm-dd hh24:mi:ss&#39; ，该命令将删除日志为 “yyyy-mm-dd hh24:mi:ss” 之前产生的所有日志。 4) 设置参数 --expire_logs_days=# ，此参数的含义是设置日志的过期天数， 过了指定的天数后日志将会被自动删除，这样将有利于减少DBA 管理日志的工作量。 3 查询日志查询日志中记录了客户端的所有操作语句，而二进制日志不包含查询数据的SQL语句。 默认情况下， 查询日志是未开启的。如果需要开启查询日志，需要手动配置。通常不需要开启此日志。 3.1 相关配置 general_log = {0 | 1} ： 是否开启查询日志 general_log_file ： 查询日志存放路径，不给定路径时默认的文件名以 hostname.log 命名。 4 慢查询日志MySQL 的慢查询日志是 MySQL 提供的一种日志记录，它用来记录在 MySQL 中响应时间超过阈值的语句，具体指运行时间超过 long_query_time 值的 SQL，则会被记录到慢查询日志中。 long_query_time 的默认值为 10，意思是运行 10s 以上的语句。默认情况下，Mysql 数据库并不启动慢查询日志，需要我们手动来设置这个参数，当然，如果不是调优需要的话，一般不建议启动该参数，因为开启慢查询日志会或多或少带来一定的性能影响。慢查询日志支持将日志记录写入文件，也支持将日志记录写入数据库表。 格式大致如下： # Time: 180118 14:58:37 # User@Host: root[root] @ localhost [] Id: 150 # Query_time: 0.000270 Lock_time: 0.000109 Rows_sent: 0 Rows_examined: 6 SET timestamp=1516258717; delete from user where User=&#39;app&#39;;是哪条语句导致慢查询（sql_text），该慢查询语句的查询时间（query_time），锁表时间（Lock_time），以及扫描过的行数（rows_examined） 4.1 相关配置 slow_query_log ：是否开启慢查询日志，1 表示开启，0 表示关闭。 slow-query-log-file：新版（5.6 及以上版本）：MySQL 数据库慢查询日志存储路径。可以不设置该参数，系统则会默认给一个缺省的文件 host_name-slow.log long_query_time ：慢查询阈值，当查询时间多于设定的阈值时，记录日志。 log_queries_not_using_indexes：未使用索引的查询也被记录到慢查询日志中（可选项）。 log_output：日志存储方式。默认值是&#39;FILE&#39;，表示将日志存入文件。&#39;TABLE&#39;表示将日志存入数据库，这样日志信息就会被写入到 mysql.slow_log 表中，支持同时记录到文件和数据库，配置的时候以逗号隔开即可。 4.2 慢日志分析工具 mysqldumpslow在实际生产环境中，如果要手工分析日志，查找、分析 SQL，显然是个体力活，MySQL 提供了日志分析工具 mysqldumpslow。 参数： -s 按照那种方式排序 c：访问计数 l：锁定时间 r:返回记录 al：平均锁定时间 ar：平均访问记录数 at：平均查询时间 -t 是top n的意思，返回多少条数据。 -g 可以跟上正则匹配模式，大小写不敏感。 例： 得到返回记录集最多的 10 个 SQL。 mysqldumpslow -s r -t 10 /database/mysql/mysql06_slow.log 得到访问次数最多的 10 个 SQL mysqldumpslow -s c -t 10 /database/mysql/mysql06_slow.log 得到按照时间排序的前 10 条里面含有左连接的查询语句。 mysqldumpslow -s t -t 10 -g “left join” /database/mysql/mysql06_slow.log 另外建议在使用这些命令时结合 | 和 more 使用 ，否则有可能出现刷屏的情况。 mysqldumpslow -s r -t 20 /mysqldata/mysql/mysql06-slow.log | more","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"https://www.codetool.top/tags/MySQL/"}]},{"title":"大型网站架构的演变过程","slug":"大型网站架构的演变过程","date":"2020-03-07T02:41:31.000Z","updated":"2020-03-07T02:45:15.871Z","comments":true,"path":"article/大型网站架构的演变过程/","link":"","permalink":"https://www.codetool.top/article/%E5%A4%A7%E5%9E%8B%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E7%9A%84%E6%BC%94%E5%8F%98%E8%BF%87%E7%A8%8B/","excerpt":"","text":"1 单机时代大型网站都是从小型网站发展而来,网站架构也是一样,是从小型网站架构逐步演化而来。小型网站最开始时没有太多人访问,只需要一台服务器就绰绰有余,最典型的是在小型网站上称霸的LAMP（Linux+Apache+MySQL+PHP）。此时的网站架构如图所示： 2 应用服务和数据服务分离随着网站业务的发展,一台服务器逐渐不能满足需求:越来越多的用户访问导致性能越来越差,越来越多的数据导致存储空间不足。这时就需要将应用和数据分离。应用和数据分离后整个网站使用三台服务器:应用服务器、文件服务器和数据库服务器，如图所示： 这三台服务器对硬件资源的要求各不相同,应用服务器需要处理大量的业务逻辑,因此需要更快更强大的CPU;数据库服务器需要快速磁盘检索和数据缓存,因此需要更快的硬盘和更大的内存;文件服务器需要存储大量用户上传的文件,因此需要更大的硬盘。 随着用户数增多，网站又一次面临挑战：数据库压力太大导致访问延迟，进而影响整个网站的性能。 3 使用缓存改善网站性能网站访问特点和现实世界的财富分配一样遵循二八定律:80%的业务访问集中在20%的数据上。淘宝买家浏览的商品集中在少部分成交数多、评价良好的商品上;百度搜索关键词集中在少部分热门词汇上;只有经常登录的用户才会发微博、看微博,而这部分用户也只占总用户数目的一小部分。 既然大部分的业务访问集中在一小部分数据上,那么如果把这一小部分数据缓存在内存中,是不是就可以减少数据库的访问压力,提高整个网站的数据访问速度,改善数据库的写入性能了呢? 网站使用的缓存可以分为两种:缓存在应用服务器上的本地缓存和缓存在专门的分布式缓存服务器上的远程缓存。本地缓存的访问速度更快一些,但是受应用服务器内存限制,其缓存数据量有限,而且会出现和应用程序争用内存的情况。远程分布式缓存可以使用集群的方式,部署大内存的服务器作为专门的缓存服务器,可以在理论上做到不受内存容量限制的缓存服务,如图所示： 使用缓存后,数据访问压力得到有效缓解,但是单一应用服务器能够处理的请求连接有限,在网站访问高峰期,应用服务器成为整个网站的瓶颈。 4 使用应用服务器集群改善网站的并发处理能力这也被称为负载均衡： 5 数据库读写分离网站在使用缓存后,使绝大部分数据读操作访问都可以不通过数据库就能完成,但是仍有一部分读操作(缓存访问不命中、缓存过期)和全部的写操作需要访问数据库,在网站的用户达到一定规模后,数据库因为负载压力过高而成为网站的瓶颈。 通常使用主从复制技术，只在主机上写数据，在从机上读数据。 6 使用反向代理和CDN加速网站响应随着网站业务不断发展,用户规模越来越大,由于中国复杂的网络环境,不同地区的用户访问网站时,速度差别也极大。有研究表明,网站访问延迟和用户流失率正相关, 网站访问越慢,用户越容易失去耐心而离开。为了提供更好的用户体验,留住用户,网站需要加速网站访问速度。主要手段有使用CDN和反向代理,如图所示： CDN和反向代理的基本原理都是缓存,区别在于CDN部署在网络提供商的机房,使用户在请求网站服务时,可以从距离自己最近的网络提供商机房获取数据;而反向代理则部署在网站的中心机房,当用户请求到达中心机房后,首先访问的服务器是反向代理服务器,如果反向代理服务器中缓存着用户请求的资源,就将其直接返回给用户。 7 使用分布式文件系统和分布式数据库系统任何强大的单一服务器都满足不了大型网站持续增长的业务需求。数据库经过读写分离后,从一台服务器拆分成两台服务器,但是随着网站业务的发展依然不能满足需求,这时需要使用分布式数据库。文件系统也是一样,需要使用分布式文件系统,如图所示: 分布式数据库是网站数据库拆分的最后手段，只有在单表数据规模非常庞大的时候才使用。不到不得已时,网站更常用的数据库拆分手段是业务分库,将不同业务的数据库部署在不同的物理服务器上。 8 使用NoSQL和搜索引擎随着网站业务越来越复杂,对数据存储和检索的需求也越来越复杂,网站需要采用一些非关系数据库技术如 NoSQL和非数据库查询技术如搜索引擎,如图所示： NoSQL和搜索引擎都是源自互联网的技术手段,对可伸缩的分布式特性具有更好的支持。应用服务器则通过一个统一数据访问模块访问各种数据,减轻应用程序管理诸多数据源的麻烦。 9 业务拆分大型网站为了应对日益复杂的业务场景,通过使用分而治之的手段将整个网站业务分成不同的产品线,如大型购物交易网站就会将首页、商铺、订单、买家、卖家等拆分成不同的产品线,分归不同的业务团队负责。 具体到技术上,也会根据产品线划分,将一个网站拆分成许多不同的应用,每个应用独立部署维护。应用之间可以通过一个超链接建立关系(在首页上的导航链接每个都指向不同的应用地址),也可以通过消息队列进行数据分发,当然最多的还是通过访问同一个数据存储系统来构成一个关联的完整系统,如图所示。 10 分布式服务随着业务拆分越来越小，存储系统越来越庞大，应用系统的整体复杂度呈指数级增加，部署维护越来越困难。由于所有应用要和所有数据库系统连接，在数万台服务器规模的网站中,这些连接的数目是服务器规模的平方,导致存数据库接资源不足,拒绝服务。 既然每一个应用系统都需要执行许多相同的业务操作,比如用户管理、商品管理等,那么可以将这些共用的业务提取出来,独立部署。由这些可复用的业务连接数据库,提供共用业务服务,而应用系统只需要管理用户界面,通过分布式服务调用共用业务服务完成具体业务操作,如图所示：","categories":[{"name":"计算机相关","slug":"计算机相关","permalink":"https://www.codetool.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/"}],"tags":[{"name":"架构","slug":"架构","permalink":"https://www.codetool.top/tags/%E6%9E%B6%E6%9E%84/"}]},{"title":"剑指offer59-队列的最大值","slug":"剑指offer59-队列的最大值","date":"2020-03-06T16:53:23.000Z","updated":"2020-03-06T16:58:05.641Z","comments":true,"path":"article/剑指offer59-队列的最大值/","link":"","permalink":"https://www.codetool.top/article/%E5%89%91%E6%8C%87offer59-%E9%98%9F%E5%88%97%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/","excerpt":"","text":"1 原题请定义一个队列并实现函数 max_value 得到队列里的最大值，要求函数max_value、push_back 和 pop_front 的时间复杂度都是O(1)。 若队列为空，pop_front 和 max_value 需要返回 -1 示例 1: 输入:[“MaxQueue”,”push_back”,”push_back”,”max_value”,”pop_front”,”max_value”][[],[1],[2],[],[],[]]输出: [null,null,null,2,1,2] 示例 2: 输入:[“MaxQueue”,”pop_front”,”max_value”][[],[],[]]输出: [null,-1,-1] 限制： 1 &lt;= push_back,pop_front,max_value的总操作数 &lt;= 10000 1 &lt;= value &lt;= 10^5 2 解法2.1 思想我一开始以为是要手写个堆。。。写完了之后发现自己理解错了题意 : ) 就是另外使用一个双向队列维护一个单调递减的队列，如果要弹出的元素也是递减队列的头元素，就把它也弹出。 2.2 代码class MaxQueue { Queue&lt;Integer> queue = new LinkedList&lt;>(); Deque&lt;Integer> deque = new LinkedList&lt;>(); public MaxQueue() {} public int max_value() { if(queue.size() == 0) return -1; return deque.peek(); } public void push_back(int value) { queue.offer(value); while(deque.size()!=0&amp;&amp;deque.peekLast()&lt;value){ deque.pollLast(); } deque.offer(value); } public int pop_front() { if(queue.size() == 0) return -1; int pop = queue.poll(); if(pop == deque.peek()){ deque.poll(); } return pop; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"剑指offer","slug":"剑指offer","permalink":"https://www.codetool.top/tags/%E5%89%91%E6%8C%87offer/"}]},{"title":"MySQL之表锁、行锁、MVCC详解","slug":"MySQL之表锁、行锁、MVCC详解","date":"2020-03-06T14:10:34.000Z","updated":"2020-03-06T14:24:03.550Z","comments":true,"path":"article/MySQL之表锁、行锁、MVCC详解/","link":"","permalink":"https://www.codetool.top/article/MySQL%E4%B9%8B%E8%A1%A8%E9%94%81%E3%80%81%E8%A1%8C%E9%94%81%E3%80%81MVCC%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"该文建议配合数据库理论之并发控制阅读。 1 概述锁是计算机协调多个进程或线程并发访问某一资源的机制（避免争抢）。 在数据库中，除传统的计算资源（如 CPU、RAM、I/O 等）的争用以外，数据也是一种供许多用户共享的资源。如何保证数据并发访问的一致性、有效性是所有数据库必须解决的一个问题，锁冲突也是影响数据库并发访问性能的一个重要因素。从这个角度来说，锁对数据库而言显得尤其重要，也更加复杂。 1.1 锁分类从对数据操作的粒度分 ： 表锁：操作时，会锁定整个表。 行锁：操作时，会锁定当前操作行。 从对数据操作的类型分： 读锁（共享锁）：针对同一份数据，多个读操作可以同时进行而不会互相影响。 写锁（排它锁）：当前操作没有完成之前，它会阻断其他写锁和读锁。 1.2 MySQL中的锁相对其他数据库而言，MySQL的锁机制比较简单，其最显著的特点是不同的存储引擎支持不同的锁机制。下表中罗列出了各存储引擎对锁的支持情况： 存储引擎 表级锁 行级锁 页面锁 MyISAM 支持 不支持 不支持 InnoDB 支持 支持 不支持 MEMORY 支持 不支持 不支持 BDB 支持 不支持 支持 MySQL这3种锁的特性可大致归纳如下 ： 锁类型 特点 表级锁 偏向MyISAM 存储引擎，开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。 行级锁 偏向InnoDB 存储引擎，开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。 页面锁 开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。 从上述特点可见，很难笼统地说哪种锁更好，只能就具体应用的特点来说哪种锁更合适。 仅从锁的角度来说： 表级锁更适合于以查询为主，只有少量按索引条件更新数据的应用，如Web 应用 行级锁则更适合于有大量按索引条件并发更新少量不同数据，同时又有并查询的应用，如一些在线事务处理（OLTP）系统。 所有的存储引擎都以自己的方式实现了锁机制，服务器层完全不了解存储引擎中的锁实现。但服务器层也会使用各种有效的表锁来实现不同的目的。 对于 MySQL 而言，事务机制更多是靠底层的存储引擎实现的，在服务器层面只有表锁。支持事务的 InnoDB 存储引擎实现了行锁。 2 MyISAM 表锁偏向 MyISAM 存储引擎，开销小，加锁快，无死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。 在特定的场景中，表锁也可能有良好的性能。比如，READ LOCAL 表锁支持某些类型的并发写操作；另外，写锁也比读锁有更高的优先级，因此一个写锁请求可以会被插入到读锁队列的前面。 尽管存储引擎可以管理自己的锁，服务器还是会使用各种有效的表锁来实现不同的目的。比如服务器在 ALTER TABLE 时使用表锁，而忽略存储引擎的锁机制。MyISAM 在读表前自动对表加读锁，在写表前自动对表加写锁。 2.1 SQL语法添加表锁： lock table table1 read/write , table2 read/write ,... read为读锁，共享锁；write为写锁，独占锁。 显示加过锁的表： show open tables; In_use : 表当前被查询使用的次数。如果该数为零，则表是打开的，但是当前没有被使用。为1代表已加锁。 Name_locked：表名称是否被锁定。名称锁定用于取消表或对表进行重命名等操作。 释放表锁： unlock tables; 2.2 总结 对 MyISAM 表的读操作（加读锁），不会阻塞其他进程对同一表的读请求，但会阻塞对同一表的写请求。只有当读锁释放后，才会执行其它进程的写操作。 对 MyISAM 表的写操作（加写锁），会阻塞其他进程对同一表的读和写操作，只有当写锁释放后，才会执行其它进程的读写操作。 简而言之，就是读锁会阻塞写，但是不会堵塞读。而写锁则会把读和写都堵塞。这也是MyISAM不适合做写为主表的引擎的原因。因为写锁后，其他线程不能做任何操作，大量的更新会使查询很难得到锁，从而造成永远阻塞。 3 InnoDB 行锁特点： 锁粒度小，并发度高；开销大，加锁慢，会出现死锁 支持事务 InnoDB也实现了共享锁和排他锁两种类型的行锁。 InnoDB也支持意向锁，可以对表级别上意向锁。 对于UPDATE、DELETE和INSERT语句，InnoDB会自动给涉及的数据集加排他锁 对于普通SELECT语句，InnoDB不会加任何锁，使用一致性非锁定读 3.1 了解：一致性非锁定读一致性非锁定读是指InnoDB存储引擎通过行多版本控制（MVCC）的方式来读取当前执行时间数据库中行的数据。如果读取的行正在执行DELETE或UPDATE，这时读取操作不会因此去等待行上锁的释放，而是去读取行的一个快照数据。 快照数据是该行的之前版本的数据，实现是通过undo段来完成（即为了回滚事务而产生的重做日志）。 通过读取不同的快照版本实现不同的事务隔离级别： 读已提交：一致性非锁定读总是读取被锁定行的最新一份快照数据。产生了不可重复读的问题。 重复读：一致性非锁定读总是读取事务开始时的行数据版本. 解决不可重复读的问题。 一致性非锁定读是InnoDB默认的读取方式，不会占用和等待表上的锁。 3.2 一致性锁定读某些情况下，用户需要显式地对数据库读取操作进行加锁以保证数据逻辑的一致性。可以通过以下语句显示给记录集加共享锁或排他锁（一致性锁定读）。 共享锁（S）： SELECT * FROM table_name WHERE ... LOCK IN SHARE MODE 排他锁（X) ： SELECT * FROM table_name WHERE ... FOR UPDATE 当事务提交了，锁就释放了。 可以使用show status like &#39;innodb_row_lock%&#39;;查看innodb行锁的争用情况 Innodb_row_lock_current_waits: 当前正在等待锁定的数量 Innodb_row_lock_time: 从系统启动到现在锁定总时间长度 Innodb_row_lock_time_avg:每次等待所花平均时长 Innodb_row_lock_time_max:从系统启动到现在等待最长的一次所花的时间 Innodb_row_lock_waits: 系统启动后到现在总共等待的次数 3.3 行锁的三种算法3.3.1 record lockInnoDB 里的行锁（record lock）是索引记录的锁。 record lock 锁住的是索引记录，即使该表上没有任何索引，那么 innodb会在后台创建一个隐藏的聚集主键索引，那么锁住的就是这个隐藏的聚集主键索引。所以说当一条 sql 没有走任何索引时，那么将会在每一条聚簇索引后面加 X 锁，这个类似于表锁，但原理上和表锁应该是完全不同的。 3.3.2 gap lock当我们用范围条件，而不是使用相等条件检索数据，并请求共享或排他锁时，InnoDB会给符合条件的已有数据进行加锁； 对于键值在条件范围内但并不存在的记录，叫做 “间隙（GAP）”，InnoDB也会对这个 “间隙” 加锁，这种锁机制就是所谓的间隙锁（gap lock），它锁定一个范围的记录,但不包括记录本身。锁加在未使用的空闲空间上,可能是两个索引记录之间，也可能是第一个索引记录之前或最后一个索引之后的空间。间隙锁针对事务隔离级别为可重复读或以上级别。 3.3.3 next-key lock行锁与间隙锁组合起来用就叫做 Next-Key Lock。锁定一个范围，并且锁定记录本身。对于行的查询，都是采用该方法，主要目的是阻止多个事务将记录插入到同一范围内，解决幻读的问题。 InnoDB 工作在可重复读隔离级别下，并且会以 Next-Key Lock 的方式对数据行进行加锁，这样可以有效防止幻读的发生。Next-Key Lock 是行锁和间隙锁的组合，当 InnoDB 扫描索引记录的时候，会首先对索引记录加上行锁（Record Lock），再对索引记录两边的间隙加上间隙锁（Gap Lock）。加上间隙锁之后，其他事务就不能在这个间隙修改或者插入记录。 如果一个索引有10，11，13和20这四个值，那么该索引可能被Next-key Locking的区间为： (-∞,10] (10,11] (11,13] (13,20] (20,＋∞]若事务T1已经锁定了如下范围： (10,11]，(11,13] 则插入新的记录12时，锁定的范围会变成： (10,11]，(11,12]，(12,13] 当查询的索引含有唯一属性时，InnoDB存储引擎会对Next-key Lock进行优化，将其降级为Record lock，即仅锁住索引本身，而不是范围。 3.3.4 如何理解三种算法我这里谈谈我自己的理解： 对于唯一索引（比如主键），只要保证锁住该索引记录，就不可能出现幻读，这对应的就是Record Lock 比如对于sql查询 select * from t_user where id = 5 for update; 这种情况就只会加一个Record Lock，第一次查询数据之后锁住了该记录，此后在同一事务内一直到第二次查询不可能会出现其他事务也将其他记录插入到id = 5这个位置。 而如果不是唯一索引，第一次查询数据之后即使所住了该记录，但可能还会有记录被插到id = 5这个位置，所以此时需要范围索引，锁住索引为5这个值，对于范围查询，范围索引更重要。","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"https://www.codetool.top/tags/MySQL/"}]},{"title":"MySQL之并发参数调整","slug":"MySQL之并发参数调整","date":"2020-03-06T08:56:08.000Z","updated":"2020-03-06T09:23:45.404Z","comments":true,"path":"article/MySQL之并发参数调整/","link":"","permalink":"https://www.codetool.top/article/MySQL%E4%B9%8B%E5%B9%B6%E5%8F%91%E5%8F%82%E6%95%B0%E8%B0%83%E6%95%B4/","excerpt":"","text":"从实现上来说，MySQL Server 是多线程结构，包括后台线程和客户服务线程。多线程可以有效利用服务器资源，提高数据库的并发性能。在Mysql中，控制并发连接和线程的主要参数包括 max_connections、back_log、thread_cache_size、table_open_cahce。 1 max_connections采用max_connections 控制允许连接到MySQL数据库的最大数量，默认值是 151。如果状态变量 connection_errors_max_connections 不为零，并且一直增长，则说明不断有连接请求因数据库连接数已达到允许最大值而失败，这时可以考虑增大max_connections 的值。 Mysql 最大可支持的连接数，取决于很多因素，包括给定操作系统平台的线程库的质量、内存大小、每个连接的负荷、CPU的处理速度，期望的响应时间等。在Linux 平台下，性能好的服务器，支持 500-1000 个连接不是难事，需要根据服务器性能进行评估设定。 2 back_logback_log 参数控制MySQL监听TCP端口时设置的积压请求栈大小。如果MySql的连接数达到max_connections时，新来的请求将会被存在堆栈中，以等待某一连接释放资源，该堆栈的数量即back_log，如果等待连接的数量超过back_log，将不被授予连接资源，将会报错。5.6.6 版本之前默认值为 50 ， 之后的版本默认为 50 + （max_connections / 5）， 但最大不超过900。 如果需要数据库在较短的时间内处理大量连接请求， 可以考虑适当增大back_log 的值。 3 table_open_cache该参数用来控制所有SQL语句执行线程可打开表缓存的数量， 而在执行SQL语句时，每一个SQL执行线程至少要打开 1 个表缓存。该参数的值应该根据设置的最大连接数 max_connections 以及每个连接执行关联查询中涉及的表的最大数量来设定 ： ​max_connections x N 4 thread_cache_size为了加快连接数据库的速度，MySQL 会缓存一定数量的客户服务线程以备重用，通过参数 thread_cache_size 可控制 MySQL 缓存客户服务线程的数量。 5 innodb_lock_wait_timeout该参数是用来设置InnoDB 事务等待行锁的时间，默认值是50ms ， 可以根据需要进行动态设置。对于需要快速反馈的业务系统来说，可以将行锁的等待时间调小，以避免事务长时间挂起； 对于后台运行的批量处理程序来说， 可以将行锁的等待时间调大， 以避免发生大的回滚操作。","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"优化","slug":"优化","permalink":"https://www.codetool.top/tags/%E4%BC%98%E5%8C%96/"},{"name":"数据库","slug":"数据库","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"https://www.codetool.top/tags/MySQL/"}]},{"title":"MySQL之内存管理和优化","slug":"MySQL之内存管理和优化","date":"2020-03-06T08:55:28.000Z","updated":"2020-03-06T09:26:59.592Z","comments":true,"path":"article/MySQL之内存管理和优化/","link":"","permalink":"https://www.codetool.top/article/MySQL%E4%B9%8B%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%92%8C%E4%BC%98%E5%8C%96/","excerpt":"","text":"1 内存优化原则 将尽量多的内存分配给MySQL做缓存，但要给操作系统和其他程序预留足够内存。 MyISAM 存储引擎的数据文件读取依赖于操作系统自身的IO缓存，因此，如果有MyISAM表，就要预留更多的内存给操作系统做IO缓存。 排序区、连接区等缓存是分配给每个数据库会话（session）专用的，其默认值的设置要根据最大连接数合理分配，如果设置太大，不但浪费资源，而且在并发连接较高时会导致物理内存耗尽。 2 MyISAM 内存优化MyISAM存储引擎使用 key_buffer 缓存索引块，加速MyISAM索引的读写速度。对于MyISAM表的数据块，mysql没有特别的缓存机制，完全依赖于操作系统的IO缓存。 2.1 key_buffer_sizekey_buffer_size决定MyISAM索引块缓存区的大小，直接影响到MyISAM表的存取效率。可以在MySQL参数文件中设置key_buffer_size的值，对于一般MyISAM数据库，建议至少将1/4可用内存分配给key_buffer_size。 在配置文件中做如下配置： key_buffer_size=512M2.2 read_buffer_size为需要全表扫描的MYISAM数据表线程指定缓存。 如果需要经常顺序扫描MyISAM表，可以通过增大read_buffer_size的值来改善性能。但需要注意的是read_buffer_size是每个session独占的，如果默认值设置太大，就会造成内存浪费。 2.3 read_rnd_buffer_size对于需要做排序的MyISAM表的查询，如带有order by子句的sql，适当增加 read_rnd_buffer_size 的值，可以改善此类的sql性能。但需要注意的是 read_rnd_buffer_size 是每个session独占的，如果默认值设置太大，就会造成内存浪费。 3 InnoDB 内存优化InnoDB用一块内存区做IO缓存池，该缓存池不仅用来缓存InnoDB的索引块，而且也用来缓存InnoDB的数据块。 3.1 innodb_buffer_pool_size该变量决定了 InnoDB 存储引擎表数据和索引数据的最大缓存区大小。在保证操作系统及其他程序有足够内存可用的情况下，innodb_buffer_pool_size 的值越大，缓存命中率越高，访问InnoDB表需要的磁盘I/O 就越少，性能也就越高。 innodb_buffer_pool_size=512M3.2 innodb_log_buffer_size决定了InnoDB重做日志缓存的大小，对于可能产生大量更新记录的大事务，增加innodb_log_buffer_size 的大小，可以避免InnoDB在事务提交前就执行不必要的日志写入磁盘操作。 innodb_log_buffer_size=10M","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"优化","slug":"优化","permalink":"https://www.codetool.top/tags/%E4%BC%98%E5%8C%96/"},{"name":"数据库","slug":"数据库","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"https://www.codetool.top/tags/MySQL/"}]},{"title":"MySQL之查询缓存优化","slug":"MySQL之查询缓存优化","date":"2020-03-06T08:53:20.000Z","updated":"2020-03-06T09:27:09.142Z","comments":true,"path":"article/MySQL之查询缓存优化/","link":"","permalink":"https://www.codetool.top/article/MySQL%E4%B9%8B%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98%E4%BC%98%E5%8C%96/","excerpt":"","text":"开启Mysql的查询缓存，当执行完全相同的SQL语句的时候，服务器就会直接从缓存中读取结果，当数据被修改，之前的缓存会失效，修改比较频繁的表不适合做查询缓存。 1 查询缓存配置查看当前的MySQL数据库是否支持查询缓存： mysql&gt; SHOW VARIABLES LIKE &#39;have_query_cache&#39;; +------------------+-------+ | Variable_name | Value | +------------------+-------+ | have_query_cache | YES | +------------------+-------+ 1 row in set (0.01 sec)查看当前MySQL是否开启了查询缓存 ： mysql&gt; SHOW VARIABLES LIKE &#39;query_cache_type&#39;; +------------------+-------+ | Variable_name | Value | +------------------+-------+ | query_cache_type | OFF | +------------------+-------+ 1 row in set (0.01 sec)查看查询缓存的占用大小 ： mysql&gt; SHOW VARIABLES LIKE &#39;query_cache_size&#39;; +------------------+----------+ | Variable_name | Value | +------------------+----------+ | query_cache_size | 16777216 | +------------------+----------+ 1 row in set (0.00 sec)查看查询缓存的状态变量： mysql&gt; SHOW STATUS LIKE &#39;Qcache%&#39;; +-------------------------+----------+ | Variable_name | Value | +-------------------------+----------+ | Qcache_free_blocks | 1 | | Qcache_free_memory | 16760152 | | Qcache_hits | 0 | | Qcache_inserts | 0 | | Qcache_lowmem_prunes | 0 | | Qcache_not_cached | 1 | | Qcache_queries_in_cache | 0 | | Qcache_total_blocks | 1 | +-------------------------+----------+ 8 rows in set (0.00 sec)各个变量的含义如下： 参数 含义 Qcache_free_blocks 查询缓存中的可用内存块数 Qcache_free_memory 查询缓存的可用内存量 Qcache_hits 查询缓存命中数 Qcache_inserts 添加到查询缓存的查询数 Qcache_lowmen_prunes 由于内存不足而从查询缓存中删除的查询数 Qcache_not_cached 非缓存查询的数量（由于 query_cache_type 设置而无法缓存或未缓存） Qcache_queries_in_cache 查询缓存中注册的查询数 Qcache_total_blocks 查询缓存中的块总数 2 开启查询缓存MySQL的查询缓存默认是关闭的，需要手动配置参数 query_cache_type ， 来开启查询缓存。query_cache_type 该参数的可取值有三个： 值 含义 OFF 或 0 查询缓存功能关闭 ON 或 1 查询缓存功能打开，SELECT的结果符合缓存条件即会缓存，否则，不予缓存，显式指定 SQL_NO_CACHE，不予缓存 DEMAND 或 2 查询缓存功能按需进行，显式指定 SQL_CACHE 的SELECT语句才会缓存；其它均不予缓存 配置完毕之后，重启服务既可生效 ； 然后就可以在命令行执行SQL语句进行验证 ，执行一条比较耗时的SQL语句，然后再多执行几次，查看后面几次的执行时间；获取通过查看查询缓存的缓存命中数，来判定是否走查询缓存。 3 查询缓存SELECT选项可以在SELECT语句中指定两个与查询缓存相关的选项 ： SQL_CACHE : 如果查询结果是可缓存的，并且 query_cache_type 系统变量的值为ON或 DEMAND ，则缓存查询结果 。 SQL_NO_CACHE : 服务器不使用查询缓存。它既不检查查询缓存，也不检查结果是否已缓存，也不缓存查询结果。 例子： SELECT SQL_CACHE id, name FROM customer; SELECT SQL_NO_CACHE id, name FROM customer; 4 查询缓存失效的情况4.1 SQL 语句不一致要想命中查询缓存，查询的SQL语句必须一致。 SQL1 : select count(*) from tb_item; SQL2 : Select count(*) from tb_item; 区分大小写 4.2 当查询语句中用到了函数SQL1 : select * from tb_item where updatetime < now() limit 1; SQL2 : select user(); SQL3 : select database(); 这些自带函数每次查询都是不确定的，不会使用缓存。 4.3 不使用任何表查询语句select 'A'; 4.4 查询系统数据库查询 mysql， information_schema或 performance_schema 数据库中的表时，不会走查询缓存。 select * from information_schema.engines; 4.5 在存储的函数，触发器或事件的主体内执行的查询4.6 表更改如果表更改，则使用该表的所有高速缓存查询都将变为无效并从高速缓存中删除。这包括使用MERGE映射到已更改表的表的查询。一个表可以被许多类型的语句改变, 如 INSERT， UPDATE， DELETE， TRUNCATE TABLE， ALTER TABLE， DROP TABLE，或 DROP DATABASE 。","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"优化","slug":"优化","permalink":"https://www.codetool.top/tags/%E4%BC%98%E5%8C%96/"},{"name":"数据库","slug":"数据库","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"https://www.codetool.top/tags/MySQL/"}]},{"title":"剑指offer57-和为s的连续正数序列","slug":"剑指offer57-和为s的连续正数序列","date":"2020-03-05T17:01:12.000Z","updated":"2020-03-05T17:04:48.394Z","comments":true,"path":"article/剑指offer57-和为s的连续正数序列/","link":"","permalink":"https://www.codetool.top/article/%E5%89%91%E6%8C%87offer57-%E5%92%8C%E4%B8%BAs%E7%9A%84%E8%BF%9E%E7%BB%AD%E6%AD%A3%E6%95%B0%E5%BA%8F%E5%88%97/","excerpt":"","text":"1 原题输入一个正整数 target ，输出所有和为 target 的连续正整数序列（至少含有两个数）。 序列内的数字由小到大排列，不同序列按照首个数字从小到大排列。 示例 1: 输入: target = 9输出: [[2,3,4],[4,5]] 示例 2: 输入: target = 15输出: [[1,2,3,4,5],[4,5,6],[7,8]] 限制： 1 &lt;= target &lt;= 10^5 2 解法2.1 思想这道题最大的坑就是用二维数组做返回值吧。。确实语法上挺麻烦的，解法就是滑动窗口，一个prev一个next，如果当前区间内的所有值的和小于目标值，next后移一位，如果大于目标值，prev后移一位，如果等于目标值，把当前区间内的所有数放入数组中再放入一个list中。 这样下去直到prev大于目标值的一半，就可以结束循环了，然后将list中所有的数组再搞进一个数组里去。 2.2 代码class Solution { public int[][] findContinuousSequence(int target) { List&lt;int[]> list = new ArrayList&lt;int[]>(); int prev = 1,next = 1; int sum = 1; while(next&lt;=(target+1)/2){ if(sum > target){ sum = sum-prev; prev++; }else{ if(sum == target){ int[] nums = new int[next-prev+1]; for(int i = 0;i&lt;next-prev+1;i++){ nums[i] = i+prev; } list.add(nums); } next++; sum = sum+next; } } int[][] ans = new int[list.size()][]; for(int i = 0;i&lt;list.size();i++){ ans[i] = list.get(i); } return ans; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"剑指offer","slug":"剑指offer","permalink":"https://www.codetool.top/tags/%E5%89%91%E6%8C%87offer/"}]},{"title":"SQL优化-从执行策略上提高数据库性能","slug":"SQL优化-从执行策略上提高数据库性能","date":"2020-03-05T15:17:38.000Z","updated":"2020-03-05T15:42:55.808Z","comments":true,"path":"article/SQL优化-从执行策略上提高数据库性能/","link":"","permalink":"https://www.codetool.top/article/SQL%E4%BC%98%E5%8C%96-%E4%BB%8E%E6%89%A7%E8%A1%8C%E7%AD%96%E7%95%A5%E4%B8%8A%E6%8F%90%E9%AB%98%E6%95%B0%E6%8D%AE%E5%BA%93%E6%80%A7%E8%83%BD/","excerpt":"","text":"该文前置知识： SQL优化前置知识之优化前分析 SQL优化前置知识之索引的正确使用姿势 数据库的性能在系统中非常重要，在前面了解了Redis高可用的背景下也了解到了许多问题都会给数据库施加非常大的压力，一旦数据库崩溃会带来非常严重的后果乃至整个系统崩溃，对数据库性能的优化主要方法是： SQL 语句及索引的优化 数据库表结构的优化 系统配置的优化 硬件的优化 从效果上第一条影响最大，后面越来越小。这篇文章就主要来阐述SQL的优化方法。 注：在本篇文章的编写过程中，我发现mysql5.7版本对某些sql语句已经有了自动优化机制，但还是建议了解sql语句的优化，毕竟版本的事总不如脑子里的东西稳。 1 优化load data当使用load data infile命令导入数据的时候，适当的设置可以提高导入的效率。 1.1 主键顺序插入因为聚簇索引的关系，如果主键的值是顺序的，那么 InnoDB 会把每一条记录都存储在上一条记录的后面，填充的是同一个页，减少了IO页的次数。如果InnoDB表没有主键，那么系统会自动默认创建一个内部列作为主键，所以如果可以给表创建一个主键，将可以利用这点，来提高导入数据的效率。 1.2 关闭唯一性校验如果可以确定插入的数据满足唯一性约束，可以在导入数据前执行 SET UNIQUE_CHECKS=0，关闭唯一性校验，在导入结束后执行SET UNIQUE_CHECKS=1，恢复唯一性校验，可以提高导入的效率。 1.3 手动提交事务如果应用使用自动提交的方式，建议在导入前执行 SET AUTOCOMMIT=0，关闭自动提交，导入结束后再执行 SET AUTOCOMMIT=1，打开自动提交，也可以提高导入的效率。 2 优化insert语句当进行数据的insert操作的时候，可以考虑采用以下几种优化方案。 2.1 合并insert语句如果需要同时对一张表插入很多行数据时，应该尽量使用多个值的insert语句，这种方式将大大的缩减客户端与数据库之间的连接、关闭等消耗。使得效率比分开执行的单个insert语句快。 示例， 原始方式为： insert into tb_test values(1,'Tom'); insert into tb_test values(2,'Cat'); insert into tb_test values(3,'Jerry'); 优化后的方案为 ： insert into tb_test values(1,'Tom'),(2,'Cat')，(3,'Jerry'); 2.2 在事务中进行数据插入start transaction; insert into tb_test values(1,'Tom'); insert into tb_test values(2,'Cat'); insert into tb_test values(3,'Jerry'); commit; 2.3 数据有序插入和load data一样的原理 3 优化join这部分的内容在数据库理论之查询处理和查询优化谈得比较详细，总的来说是要先选择再连接。 4 小表驱动大表如果有两张表连接，类似于二重循环 外层的表应该是小表，内层的应该是大表。 虽然总的遍历次数是一样的，但是频繁切换数据表是影响效率的（IO 次数），应该尽可能减少切换表的次数。 这方面内容可以参考：MySql 小表驱动大表 - 茶饭不撕 - 博客园 5 优化order by语句5.1 了解：两种排序方式第一种是通过对返回数据进行排序，也就是通常说的 filesort 排序，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序。 第二种通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高。 可以在explain中看到sql语句使用的是哪种排序方法。 优化目标：尽量减少额外的排序，通过索引直接返回有序数据。 对于索引(a,b,c)，不能使用索引进行排序的情况：（应避免） ORDER BY a ASC, b DESC, c DESC /排序不一致/ WHERE g = const ORDER BY b, c /不满足最左前缀/ WHERE a in (...) ORDER BY b, c /对于排序来说，范围in也不能满足最左前缀/ 5.2 了解：filesort的算法有的时候并不能避免filesort，该如何优化filesort就得了解它的底层实现。 双路排序： MySQL4.1之前是使用双路排序,字面意思就是两次扫描磁盘,最终得到数据。 它的工作过程：读取行指针和 orderby列,对他们进行排序,然后扫描已经排序好的列表,按照列表中的值重新从列表中读取对应的数据输出 概括： 从磁盘取排序字段,在 buffer进行排序,再从磁盘取其他字段。 然而取一批数据,要对磁盘进行了两次扫描,众所周知,IO是很耗时的,所以在mysql4.1之后,出现了第二种改进的算法,就是单路排序： 单路排序的工作过程： 从磁盘读取查询需要的所有列,按照 order by列在 buffer对它们进行排序,然后扫描排序后的列表进行输出,它的效率更快一些,避免了第二次读取数据。并且把随机IO变成了顺序IO,但是它会使用更多的空间,因为它把每一行都保存在内存中了。 单路排序问题： 在 sort_buffer 中单路排序比双路排序要多占用很多空间，因为单路排序是把所有字段都取出, 所以有可能取出的数据的总大小超出了 sort_buffer 的容量，导致每次只能取 sort_buffer容量大小的数据，进行排序（创建 tmp 文件，多路合并），排完再取 sort_buffer 容量大小，再排……从而多次 I/O。本来想省一次 I/O 操作，反而导致了大量的 I/O 操作，反而得不偿失。 5.3 优化方式1) 尽量使用 index 方式排序，遵照索引的最佳左前缀 排序时使用的字段的顺序最好与 index 建立的顺序相同 ORDER BY满足两种情况，会使用Index方法排序： ORDER BY语句使用索引最左前缀列 使用WHERE子句与ORDER BY子句条件列组合满足索引最左前缀列 例：WHERE a = const AND b = const ORDER BY c是允许的 2) select * 是一个大忌 只取出需要的字段， 这点非常重要。在这里的影响是： 尽量使用覆盖索引，可以直接从索引树中读取数据，避免二次查询聚簇索引，进而导致filesort。 当Query的字段大小总和小于 max_length_for_sort_data 而且排序字段不是TEXT|BLOB 类型时，会用改进后的算法——单路排序， 否则用老算法——多路排序。 避免取出太多数据使得占用内存超过 sort_buffer_size 而采用多路排序。 3) 尝试提高 sort_buffer_size 和 max_length_for_sort_data 提高这两个参数，会增加用改进算法的概率。两个参数最好达成一种平衡，否则如果max_length_for_sort_data设的太高，数据总容量超出sort_buffer_size 的概率就增大，明显症状是高的磁盘 I/O 活动和低的处理器使用率。 6 优化GROUP BY语句group by实质是先排序后进行分组,遵照索引的最佳左前缀规则，所以也尽量满足该规则。 当无法使用索引时，GROUP BY 使用两种策略来完成：使用临时表和filesort来做分组。表现为use temporary和use filesort。 当无法使用索引列： 可以优化filesort，即增大sort_buffer_size参数和max_length_for_sort_data参数。 可以只使用临时表，不进行filesort，这样返回的结果是无序的，想要加上ORDER BY null 另，避免使用having，where高于having，能写在where限定的条件就不要去having限定了。 7 优化嵌套查询Mysql4.1版本之后，开始支持SQL的子查询。这个技术可以使用SELECT语句来创建一个单列的查询结果，然后把这个结果作为过滤条件用在另一个查询中。使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的SQL操作，同时也可以避免事务或者表锁死，并且写起来也很容易。但是，有些情况下，子查询是可以被更高效的连接（JOIN）替代。 事实上，MySQL5.7已经会自动优化一些可以被转成join的sql语句了，临时表开始被避免使用。 示例： select * from t_user where id in (select user_id from user_role ); 优化为： select * from t_user u , user_role ur where u.id = ur.user_id; 8 优化OR条件对于包含OR的查询子句，如果要利用索引，则OR之间的每个条件列都必须用到索引，而且不能使用到复合索引；如果没有索引，则应该考虑增加索引。（避免索引失效） 如果无法增加索引，还可以考虑使用union合并有索引的那些查询出来的和没索引查询出来的结果集代替or。（在数据量小的情况下不推荐，用到临时表有的时候效率更低） 9 优化limit语句当偏移量非常大的时候，比如 limit 100000,20 这样的查询，这时 MySQL 需要查询 100020 条记录然后只返回最后 20 条，这样的代价非常高。要优化这种查询，要么在页面中限制分页数量，要么优化大偏移的性能。 一个简单的办法是使用覆盖索引（延迟关联） 意思就是先把索引排序，取出100000-20的索引值，然后用这些数据再回表查询对应行的所有列的值。使用子查询的写法就是： select * from tb_item t, (select id from tb_item order by id limit 100000,20) a where t.id=a.id; 另一种方法，如果使用书签记录上次取数据的位置，那么下次就可以直接从该书签记录的位置开始扫描。假设主键递增，那么当查询limit 100000,20返回的最后一条数据是id= 1000102，那么下一次查询可以使用where id&gt;1000102来限定范围。 10 使用SQL提示SQL提示，是优化数据库的一个重要手段，简单来说，就是在SQL语句中加入一些人为的提示来达到优化操作的目的。 但是除非你的优化经验很好，否则不建议使用hint强制要求使用某个索引，因为至今MySQL本身对sql的优化程度已经很高了 : ) 10.1 USE INDEX在查询语句中表名的后面，添加 use index 来提供希望MySQL去参考的索引列表，就可以让MySQL不再考虑其他可用的索引。 10.2 IGNORE INDEX如果用户只是单纯的想让MySQL忽略一个或者多个索引，则可以使用 ignore index 作为 hint。 10.3 FORCE INDEX为强制MySQL使用一个特定的索引，可在查询中使用 force index 作为hint。","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"优化","slug":"优化","permalink":"https://www.codetool.top/tags/%E4%BC%98%E5%8C%96/"},{"name":"数据库","slug":"数据库","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"https://www.codetool.top/tags/MySQL/"}]},{"title":"SQL优化前置知识之索引的正确使用姿势","slug":"SQL优化前置知识之索引的正确使用姿势","date":"2020-03-05T12:15:33.000Z","updated":"2020-03-06T12:11:12.513Z","comments":true,"path":"article/SQL优化前置知识之索引的正确使用姿势/","link":"","permalink":"https://www.codetool.top/article/SQL%E4%BC%98%E5%8C%96%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86%E4%B9%8B%E7%B4%A2%E5%BC%95%E7%9A%84%E6%AD%A3%E7%A1%AE%E4%BD%BF%E7%94%A8%E5%A7%BF%E5%8A%BF/","excerpt":"","text":"该文的前置知识：SQL优化前置知识之优化前分析 1 索引失效有的sql语句会不使用索引？在编写sql语句的时候应避免这些情况，一起来看看这些情况吧： 1.1 不遵从最左前缀规则如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始，并且不跳过索引中的列。 最左前缀的原理来自于B+树对节点的排序规则： 摘自MySQL索引概述及索引的分类 如果不是按照索引的最左列开始查找，则无法使用索引 不能跳过索引中的列 如果查询中有某个列的范围查询，则其右边所有列都无法使用索引优化查找 验证最左前缀规则： 建立索引 create index idx_uname_pw_name on t_user(username,password,name); Query OK, 0 rows affected (0.05 sec) Records: 0 Duplicates: 0 Warnings: 0 以最左前缀规则查询 mysql&gt; explain select * from t_user where username = &#39;super&#39;; +----+-------------+--------+------------+------+-------------------+-------------------+---------+-------+------+----------+-------------+ | id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra | +----+-------------+--------+------------+------+-------------------+-------------------+---------+-------+------+----------+-------------+ | 1 | SIMPLE | t_user | NULL | ref | idx_uname_pw_name | idx_uname_pw_name | 137 | const | 1 | 100.00 | Using index | +----+-------------+--------+------------+------+-------------------+-------------------+---------+-------+------+----------+-------------+ 1 row in set, 1 warning (0.00 sec)可见使用了索引 不以最左前缀规则查询 mysql&gt; explain select * from t_user where name = &#39;学生1&#39;; +----+-------------+--------+------------+-------+---------------+-------------------+---------+------+------+----------+--------------------------+ | id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra | +----+-------------+--------+------------+-------+---------------+-------------------+---------+------+------+----------+--------------------------+ | 1 | SIMPLE | t_user | NULL | index | NULL | idx_uname_pw_name | 564 | NULL | 6 | 16.67 | Using where; Using index | +----+-------------+--------+------------+-------+---------------+-------------------+---------+------+------+----------+--------------------------+ 1 row in set, 1 warning (0.00 sec)可见此时type变为了”index”，扫描索引树。 1.2 在索引上使用表达式索引列上使用了表达式，如 where substr(a, 1, 3) = ‘hhh’，where a = a + 1，表达式是一大忌讳，再简单 MySQL 也不认。 有时数据量不是大到严重影响速度时，一般可以先查出来，比如先查所有有订单记录的数据，再在程序中去筛选 哪怕是该字段没有建立索引，但不能保证以后不在这个字段上建立索引，所以可以这么说：不要在任何字段上进行操作。 mysql&gt; explain select * from t_user where left(username,2) = &#39;ad&#39;; +----+-------------+--------+------------+-------+---------------+-------------------+---------+------+------+----------+--------------------------+ | id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra | +----+-------------+--------+------------+-------+---------------+-------------------+---------+------+------+----------+--------------------------+ | 1 | SIMPLE | t_user | NULL | index | NULL | idx_uname_pw_name | 564 | NULL | 6 | 100.00 | Using where; Using index | +----+-------------+--------+------------+-------+---------------+-------------------+---------+------+------+----------+--------------------------+ 1 row in set, 1 warning (0.00 sec) Note (Code 1003): /* select#1 */ select `test`.`t_user`.`id` AS `id`,`test`.`t_user`.`username` AS `username`,`test`.`t_user`.`password` AS `password`,`test`.`t_user`.`name` AS `name` from `test`.`t_user` where (left(`test`.`t_user`.`username`,2) = &#39;ad&#39;)1.3 range 类型查询字段后面的索引无效 最后一次只用到了两个索引此时可以建一个只含前两个字段的索引对in()无效，in仍可以使用索引。 1.4 varchar类型不加单引号，造成索引失效 由于在查询时，没有对字符串加单引号，MySQL的查询优化器，会自动的进行类型转换，造成索引失效。 1.5 尽量使用覆盖索引，避免select *覆盖索引的概念，往下翻，索引的特殊应用-&gt;覆盖索引 如果查询列，超出索引列，也会降低性能。 TIP:using index ：使用覆盖索引的时候就会出现using where：在查找使用索引的情况下，需要回表去查询所需的数据using index condition：查找使用了索引，但是需要回表查询数据​using index ; using where：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询数据 1.6 使用不等于时索引失效 1.7 is (not) null 时有时索引失效 失效的情况其实是MySQL评估使用索引比全表更慢，见最后一点。 1.8 like 以通配符开头会导致全表扫描 1.9 使用 or 时索引失效 如果or前的条件中的列有索引，而后面的列中没有索引，那么涉及的索引都不会被用到。 其实还蛮好理解的，因为没有索引的列符合条件也满足or，自然要全表扫描。 1.10 in 走索引， not in 索引失效 1.11 如果MySQL评估使用索引比全表更慢，则不使用索引。这个东西就很玄学了，典型情况是查询的情况占了整表大多数。 2 索引的特殊应用2.1 InnoDB AUTO_INCREMENT2.1.1 概述如果正在使用 InnoDB 表并且没有什么数据需要聚集，那么可以定义一个代理键作为主键，这种主键的数据应该与应用无关，最简单的方法是使用 AUTO_INCREMENT 自增列。这样可以保证数据行是按顺序写入的，对于根据主键做关联操作的性能也会更好。 最好避免随机的聚簇索引，特别是对于 IO 密集型应用，比如 UUID，它使得聚簇索引的插入变得完全随机，这是最坏的情况，使得数据没有任何聚集特性。 顺序主键的优点： 如果主键的值是顺序的，那么 InnoDB 会把每一条记录都存储在上一条记录的后面。当达到页的最大填充因子时，下一条记录就会写入新的页中。一旦数据按照这种顺序的方式加载，主键页就会近似于被顺序的记录填满，这也正是所期望的结果。 顺序主键的缺点： 对于高并发工作负载，在 InnoDB 中按主键顺序插入可能会造成明显的争用。主键的上界会成为热点。因为所有的插入都在这里，所以并发插入可能导致锁竞争。另一个热点可能是AUTO_INCREMENT 锁机制，可能需要重新设计表或应用。 2.1.2 AUTO-INC锁机制AUTO-INC锁是当向使用含有AUTO_INCREMENT列的表中插入数据时需要获取的一种特殊的表级锁。 在最简单的情况下，如果一个事务正在向表中插入值，则任何其他事务必须等待对该表执行自己的插入操作，以便第一个事务插入的行的值是连续的。 InnoDB 会在内存里保存一个计数器用来记录 AUTO_INCREMENT 的值，当插入一个新行数据时，就会用一个表锁来锁住这个计数器，直到插入结束。如果一行一行的插入数据则没有什么问题，但是如果大量的并发插入就废了，表锁会引起 SQL 堵塞，不但影响效率，而且可能会瞬间达到 MAX_CONNECTION 而崩溃。 插入类型： simple insertssimple inserts 指的是那种能够事先确定插入行数的语句，比如 INSERT/REPLACE INTO 等插入单行或者多行的语句，语句中不包括嵌套子查询。此外，INSERT INTO … ON DUPLICATE KEY UPDATE 这类语句也要除外。 bulk insertsbulk inserts 指的是事先无法确定插入行数的语句，比如 INSERT/REPLACE INTO … SELECT,LOAD DATA 等。 mixed-mode inserts指的是 simple inserts 类型中有些行指定了 auto_increment 列的值，有些行没有指定，比如：INSERT INTO t1 (c1,c2) VALUES (1,’a’), (NULL,’b’), (5,’c’), (NULL,’d’);另外一种 mixed-mode inserts 是 INSERT … ON DUPLICATE KEY UPDATE 这种语句，可能导致分配的 auto_increment 值没有被使用。 innodb_autoinc_lock_mode 配置选项控制用于自动增量锁定的算法。 它允许您选择如何在可预测的自动递增值序列和插入操作的最大并发性之间进行权衡，配置语法： innodb_autoinc_lock_mode=x，x可取值： 0，传统的 auto_increment 机制。这种模式下所有针对 auto_increment 列的插入操作都会加AUTO-INC 锁，分配的值也是一个个分配，是连续的，正常情况下也不会有间隙（当然如果事务 rollback 了这个 auto_increment 值就会浪费掉，从而造成间隙）。 1，这种情况下 针对 bulk inserts 才会采用 AUTO-INC 锁这种方式 针对 simple inserts，则直接通过分析语句，获得要插入的数量，然后一次性分配足够的 auto_increment id，只会将整个分配的过程锁住。。当然，如果其他事务已经持有了AUTO-INC锁，则simple inserts需要等待. 针对 Mixed-mode inserts：直接分析语句，获得最坏情况下需要插入的数量，然后一次性分配足够的 auto_increment id，只会将整个分配的过程锁住。保证同一条 insert 语句中新插入的 auto_increment id 都是连续的，语句之间是可能出现auto_increment 值的空隙的。比如 mixed-mode inserts 以及 bulk inserts 中都有可能导致一些分配的 auto_increment 值被浪费掉从而导致间隙。 2，这种模式下任何类型的 inserts 都不会采用 AUTO-INC 锁，性能最好。这种模式是来一个分配一个，而不会锁表，只会锁住分配 id 的过程，和 innodb_autoinc_lock_mode = 1 的区别在于，不会预分配多个。但是在 replication 中当 binlog_format 为 statement-based 时（简称 SBR statement-based replication）存在问题，因为是来一个分配一个，这样当并发执行时，“Bulk inserts”在分配时会同时向其他的 INSERT 分配，会出现主从不一致（从库执行结果和主库执行结果不一样），因为 binlog 只会记录开始的 insert id。可能会在同一条语句内部产生 auto_increment 值间隙。 2.2 覆盖索引如果一个索引包含了所有需要查询字段的值，就称为覆盖索引。 覆盖索引的优点： 索引条目远少于数据行大小，如果只需要读取索引，则 MySQL 就会极大地减少数据访问了，这对缓存的负载非常重要，因为这种情况下响应时间大部分花费在数据拷贝上。覆盖索引对 IO 密集型应用也有帮助，因为索引比数据更小，更容易全部放入内存中。 因为索引是按照列值顺序存储的，对于 IO 密集型的范围查询会比随机从磁盘读取每一行数据的 IO 次数会少得多。 InnoDB 的二级索引在叶节点中保存了行的主键值，如果二级索引是覆盖索引，则可以避免对主键聚簇索引的二次查询。 不是所有类型的索引都可以成为覆盖索引。覆盖索引必须要存储索引列的值，而哈希索引、空间索引和全文索引都不存储索引列的值，所以 MySQL 只能使用 B 树索引做覆盖索引。当发起一个索引覆盖查询时，在 EXPLAIN 的 Extra 列可以看到 Using index 的信息。InnoDB 的二级索引的叶子节点都包含了主键的值，这意味着 InnoDB 的二级索引可以有效利用这些额外的主键列来覆盖查询。 2.3 使用索引进行排序MySQL 有两种可以生成有序的结果：通过排序操作；按索引顺序扫描。如果 EXPLAIN 出来的 type 列的值为 index，则说明 MySQL 使用了索引顺序扫描来做排序。 扫描索引本身是很快的，但如果索引不能覆盖查询所需的全部列，那就不得不每扫描一条索引记录就都回表查询一次对应的行。这基本上都是随机 IO，因此按索引顺序读取数据的速度通常要比顺序地全表扫描要慢，尤其是在 IO 密集型的工作负载时。只有当索引的列顺序和 ORDER BY 子句的顺序完全一致，并且所有列的排序方向（降序或升序，索引默认是升序）都一样时，MySQL 才可以使用索引来对结果做排序。如果查询需要关联多张表，则只有当 ORDER BY 子句引用的字段全部为第一张表时，才能使用索引做排序。ORDER BY 子句和查找型索引的限制是一样的，都需要满足索引的最左前缀的要求。有一种情况下 ORDER BY 子句可以不满足索引的最左前缀的要求，就是前导列为常量的时候。 2.4 前缀压缩索引MyISAM 通过前缀压缩来减少索引的大小，从而让更多的索引可以放入内存中。默认只压缩字符串，但通过参数调整也能对整数进行压缩。 MyISAM 压缩每个索引块的方法时，先完全保存索引块的第一个值，然后将其他值和第一个值进行比较得到相同前缀的字节数和剩余的不同后缀部分，把这部分存储起来即可。压缩块使用更少的情况，代价是某些操作可能更慢。因为每个值的压缩前缀都依赖前面的值，所以 MyISAM 查找时无法在索引块使用二分查找而只能从头开始扫描。 2.5 冗余和重复索引冗余索引：MySQL 允许在相同列上创建多个索引。MySQL 需要单独维护重复的索引，并且优化器在优化查询时也需要逐个地进行考虑，这会影响性能。 重复索引是指在相同的列上按照相同的顺序创建的相同类型的索引（完全相同），应该避免这样创建重复索引，发现以后也应该立即移除。 冗余索引和重复索引有一些不同。如果创建了索引(A,B)，又创建了索引(A)就是冗余索引，索引(A,B)也可以当做索引(A)来使用。但是如果再创建索引(B,A)，就不是冗余索引。另外，其他不同类型的索引也不会是 B 树索引的冗余索引。 冗余索引通常发生在为表添加新索引的时候。例如，有人可能会增加一个新的索引(A,B)而不是扩展已有的索引(A)，还有一种情况是将一个索引扩展为(A,PK)，对于 InnoDB 而言 PK 已经包含在二级索引中了，所以这也是冗余的。 大多数情况下都不需要冗余索引，应该尽量扩展已有的索引而不是创建新索引。但也有时候出于性能方面的考虑需要冗余索引，因为扩展已有的索引会导致其变得太大，从而影响其他使用该索引的查询的性能。 例如，现在在整数列上有一个索引，需要额外增加一个很长的 VARCHAR 列来扩展该索引，那性能可能会急剧下降。可以使用一些工具来找出冗余和重复的索引。 2.6 索引重用现有索引(A,B,C)，如果要使用索引，那么 where 中必须写为 A=a and B = b and C = c。如果没有对 B 的筛选，还想使用索引，怎么绕过最左前缀匹配呢？ 假设 B 是一个选择性很低的列，只有 b1 和 b2 两种取值，那么查询可以写为 A = a and Bin(b1,b2) and C = c。 2.7 避免多个范围条件对于范围条件查询，MySQL 无法再使用范围列后面的其他索引列了，但是对于多个等值条件查询（in …）则没有这个限制。 假设有索引(A,B)，查询条件为 A &gt; a and B &lt; b，那么此时无法同时使用 A 和 B 的复合索引，只能用到 A 的索引。一定要用的话可以考虑将 A 转为 in(a1,a2…)。 3 查看索引使用情况show status like 'Handler_read%'; show global status like 'Handler_read%'; 这两条语句可以查看mysql索引的使用情况： mysql&gt; show status like &#39;Handler_read%&#39;; +-----------------------+-------+ | Variable_name | Value | +-----------------------+-------+ | Handler_read_first | 40 | | Handler_read_key | 43 | | Handler_read_last | 0 | | Handler_read_next | 306 | | Handler_read_prev | 0 | | Handler_read_rnd | 0 | | Handler_read_rnd_next | 18832 | +-----------------------+-------+ 7 rows in set (0.00 sec)Handler_read_first：索引中第一条被读的次数。如果较高，表示服务器正执行大量全索引扫描（这个值越低越好）。 Handler_read_key：如果索引正在工作，这个值代表一个行被索引值读的次数，如果值越低，表示索引得到的性能改善不高，因为索引不经常使用（这个值越高越好）。 Handler_read_next ：按照键顺序读下一行的请求数。如果你用范围约束或如果执行索引扫描来查询索引列，该值增加。 Handler_read_prev：按照键顺序读前一行的请求数。该读方法主要用于优化ORDER BY … DESC。 Handler_read_rnd ：根据固定位置读一行的请求数。如果你正执行大量查询并需要对结果进行排序该值较高。你可能使用了大量需要MySQL扫描整个表的查询或你的连接没有正确使用键。这个值较高，意味着运行效率低，应该建立索引来补救。 Handler_read_rnd_next：在数据文件中读下一行的请求数。如果你正进行大量的表扫描，该值较高。通常说明你的表索引不正确或写入的查询没有利用索引。","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"优化","slug":"优化","permalink":"https://www.codetool.top/tags/%E4%BC%98%E5%8C%96/"},{"name":"数据库","slug":"数据库","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"https://www.codetool.top/tags/MySQL/"}]},{"title":"SQL优化前置知识之优化前分析","slug":"SQL优化前置知识之优化前分析","date":"2020-03-05T07:41:38.000Z","updated":"2020-03-07T09:45:15.111Z","comments":true,"path":"article/SQL优化前置知识之优化前分析/","link":"","permalink":"https://www.codetool.top/article/SQL%E4%BC%98%E5%8C%96%E5%89%8D%E7%BD%AE%E7%9F%A5%E8%AF%86%E4%B9%8B%E4%BC%98%E5%8C%96%E5%89%8D%E5%88%86%E6%9E%90/","excerpt":"","text":"在应用的的开发过程中，由于初期数据量小，开发人员写 SQL 语句时更重视功能上的实现，但是当应用系统正式上线后，随着生产数据量的急剧增长，很多 SQL 语句开始逐渐显露出性能问题，对生产的影响也越来越大，此时这些有问题的 SQL 语句就成为整个系统性能的瓶颈，因此我们必须要对它们进行优化，本章将详细介绍在 MySQL 中优化 SQL 语句的方法。 当面对一个有 SQL 性能问题的数据库时，我们应该从何处入手来进行系统的分析，使得能够尽快定位问题 SQL 并尽快解决问题。 1 查看SQL执行频率MySQL 客户端连接成功后，通过 show [session|global] status 命令可以提供服务器状态信息。show [session|global] status 可以根据需要加上参数“session”或者“global”来显示 session 级（当前连接）的计结果和 global 级（自数据库上次启动至今）的统计结果。如果不写，默认使用参数是“session”。 下面的命令显示了当前 session 中所有统计参数的值： mysql&gt; show status like &#39;Com_______&#39;; +---------------+-------+ | Variable_name | Value | +---------------+-------+ | Com_binlog | 0 | | Com_commit | 4 | | Com_delete | 4 | | Com_insert | 35 | | Com_repair | 0 | | Com_revoke | 0 | | Com_select | 291 | | Com_signal | 0 | | Com_update | 11 | | Com_xa_end | 0 | +---------------+-------+ 10 rows in set (0.00 sec)global: mysql&gt; show global status like &#39;Com_______&#39;; +---------------+-------+ | Variable_name | Value | +---------------+-------+ | Com_binlog | 0 | | Com_commit | 0 | | Com_delete | 0 | | Com_insert | 0 | | Com_repair | 0 | | Com_revoke | 0 | | Com_select | 1 | | Com_signal | 0 | | Com_update | 0 | | Com_xa_end | 0 | +---------------+-------+ 10 rows in set (0.00 sec)下面这条语句则只会查看使用innodb引擎表的操作次数： mysql&gt; show status like &#39;Innodb_rows_%&#39;; +----------------------+-------+ | Variable_name | Value | +----------------------+-------+ | Innodb_rows_deleted | 2 | | Innodb_rows_inserted | 49 | | Innodb_rows_read | 382 | | Innodb_rows_updated | 17 | +----------------------+-------+ 4 rows in set (0.00 sec) 参数 含义 Com_select 执行 select 操作的次数，一次查询只累加 1。 Com_insert 执行 INSERT 操作的次数，对于批量插入的 INSERT 操作，只累加一次。 Com_update 执行 UPDATE 操作的次数。 Com_delete 执行 DELETE 操作的次数。 Innodb_rows_read select 查询返回的行数。 Innodb_rows_inserted 执行 INSERT 操作插入的行数。 Innodb_rows_updated 执行 UPDATE 操作更新的行数。 Innodb_rows_deleted 执行 DELETE 操作删除的行数。 2 定位低效SQL可以通过以下两种方式定位执行效率较低的 SQL 语句。 慢查询日志 : 通过慢查询日志定位那些执行效率较低的 SQL 语句，用–log-slow-queries[=file_name]选项启动时，mysqld 写一个包含所有执行时间超过 long_query_time 秒的 SQL 语句的日志文件。这方面的配置见MySQL之日志配置全解 show processlist : 慢查询日志在查询结束以后才纪录，所以在应用反映执行效率出现问题的时候查询慢查询日志并不能定位问题，可以使用show processlist命令查看当前MySQL在进行的线程，包括线程的状态、是否锁表等，可以实时地查看 SQL 的执行情况，同时对一些锁表操作进行优化。 show processlist的结果： 列名 描述 id 用户登录mysql时，系统分配的”connection_id”，可以使用函数connection_id()查看 user 显示当前用户。如果不是root，这个命令就只显示用户权限范围的sql语句 host 显示这个语句是从哪个ip的哪个端口上发的，可以用来跟踪出现问题语句的用户 db 显示这个进程目前连接的是哪个数据库 command 显示当前连接的执行的命令，一般取值为休眠（sleep），查询（query），连接（connect）等 time 显示这个状态持续的时间，单位是秒 state 显示使用当前连接的sql语句的状态，很重要的列。state描述的是语句执行中的某一个状态。一个sql语句，以查询为例，可能需要经过copying to tmp table、sorting result、sending data等状态才可以完成 info 显示这个sql语句，是判断问题语句的一个重要依据 3 explain分析执行计划通过以上步骤查询到效率低的 SQL 语句后，可以通过 EXPLAIN或者 DESC命令获取 MySQL如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。 查询SQL语句的执行计划 ： explain select * from tb_item where id = 1; explain select * from tb_item where title = '阿尔卡特 (OT-979) 冰川白 联通3G手机3'; 字段 含义 id select查询的序列号，是一组数字，表示的是查询中执行select子句或者是操作表的顺序。 select_type 表示 SELECT 的类型，常见的取值有 SIMPLE（简单表，即不使用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION 中的第二个或者后面的查询语句）、SUBQUERY（子查询中的第一个 SELECT）等 table 输出结果集的表 type 表示表的连接类型，性能由好到差的连接类型为( system —&gt; const —–&gt; eq_ref ——&gt; ref ——-&gt; ref_or_null—-&gt; index_merge —&gt; index_subquery —–&gt; range —–&gt; index ——&gt; all ) possible_keys 表示查询时，可能使用的索引 key 表示实际使用的索引 key_len 索引字段的长度 rows 扫描行的数量 extra 执行情况的说明和描述 准备三张如图所示的表： 3.1 explain 之 idid 字段是 select查询的序列号，是一组数字，表示的是查询中执行select子句或者是操作表的顺序。id 情况有三种 ： 1） id相同表示加载表的顺序是从上到下。 mysql&gt; explain select * from t_role r, t_user u, user_role ur where r.id = ur.role_id and u.id = ur.user_id ; +----+-------------+-------+------------+--------+-----------------------------+---------+---------+-----------------+------+----------+----------------------------------------------------+ | id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra | +----+-------------+-------+------------+--------+-----------------------------+---------+---------+-----------------+------+----------+----------------------------------------------------+ | 1 | SIMPLE | r | NULL | ALL | PRIMARY | NULL | NULL | NULL | 5 | 100.00 | NULL | | 1 | SIMPLE | ur | NULL | ALL | fk_ur_user_id,fk_ur_role_id | NULL | NULL | NULL | 6 | 20.00 | Using where; Using join buffer (Block Nested Loop) | | 1 | SIMPLE | u | NULL | eq_ref | PRIMARY | PRIMARY | 98 | test.ur.user_id | 1 | 100.00 | NULL | +----+-------------+-------+------------+--------+-----------------------------+---------+---------+-----------------+------+----------+----------------------------------------------------+ 3 rows in set, 1 warning (0.01 sec)2） id 不同id值越大，优先级越高，越先被执行。 mysql&gt; EXPLAIN SELECT * FROM t_role WHERE id = (SELECT role_id FROM user_role WHERE user_id = (SELECT id FROM t_user WHERE username = &#39;stu1&#39;)); +----+-------------+-----------+------------+-------+----------------------+----------------------+---------+-------+------+----------+-------------+ | id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra | +----+-------------+-----------+------------+-------+----------------------+----------------------+---------+-------+------+----------+-------------+ | 1 | PRIMARY | t_role | NULL | const | PRIMARY | PRIMARY | 98 | const | 1 | 100.00 | NULL | | 2 | SUBQUERY | user_role | NULL | ref | fk_ur_user_id | fk_ur_user_id | 99 | const | 1 | 100.00 | Using where | | 3 | SUBQUERY | t_user | NULL | const | unique_user_username | unique_user_username | 137 | const | 1 | 100.00 | Using index | +----+-------------+-----------+------------+-------+----------------------+----------------------+---------+-------+------+----------+-------------+ 3 rows in set, 1 warning (0.00 sec)3） id 有相同，也有不同，同时存在。id相同的可以认为是一组，从上往下顺序执行；在所有的组中，id的值越大，优先级越高，越先执行。 3.2 explain 之 select_type表示 SELECT 的类型，常见的取值，如下表所示： select_type 含义 SIMPLE 简单的select查询，查询中不包含子查询或者UNION PRIMARY 查询中若包含任何复杂的子查询，最外层查询标记为该标识 SUBQUERY 在SELECT 或 WHERE 列表中包含了子查询 DERIVED 在FROM 列表中包含的子查询，被标记为 DERIVED（衍生） MYSQL会递归执行这些子查询，把结果放在临时表中 UNION 若第二个SELECT出现在UNION之后，则标记为UNION ； 若UNION包含在FROM子句的子查询中，外层SELECT将被标记为 ： DERIVED UNION RESULT 从UNION表获取结果的SELECT mysql&gt; explain select * from t_user where id = (select id from user_role where role_id = &#39;9&#39;); +----+-------------+-----------+------------+------+---------------+---------------+---------+-------+------+----------+-------------+ | id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra | +----+-------------+-----------+------------+------+---------------+---------------+---------+-------+------+----------+-------------+ | 1 | PRIMARY | t_user | NULL | ALL | PRIMARY | NULL | NULL | NULL | 6 | 16.67 | Using where | | 2 | SUBQUERY | user_role | NULL | ref | fk_ur_role_id | fk_ur_role_id | 99 | const | 1 | 100.00 | Using index | +----+-------------+-----------+------------+------+---------------+---------------+---------+-------+------+----------+-------------+ 2 rows in set, 3 warnings (0.00 sec)mysql&gt; explain select * from t_user where id = &#39;1&#39; union select * from t_user where id = &#39;2&#39;; +----+--------------+------------+------------+-------+---------------+---------+---------+-------+------+----------+-----------------+ | id | select_type | table | partitions | type | possible_keys | key | key_len | ref | rows | filtered | Extra | +----+--------------+------------+------------+-------+---------------+---------+---------+-------+------+----------+-----------------+ | 1 | PRIMARY | t_user | NULL | const | PRIMARY | PRIMARY | 98 | const | 1 | 100.00 | NULL | | 2 | UNION | t_user | NULL | const | PRIMARY | PRIMARY | 98 | const | 1 | 100.00 | NULL | | NULL | UNION RESULT | &lt;union1,2&gt; | NULL | ALL | NULL | NULL | NULL | NULL | NULL | NULL | Using temporary | +----+--------------+------------+------------+-------+---------------+---------+---------+-------+------+----------+-----------------+ 3 rows in set, 1 warning (0.01 sec)注： MySQL5.7中对Derived table做了一个新特性。该特性允许将符合条件的Derived table中的子表与父查询的表合并进行直接JOIN。体现为simple查询 3.3 explain 之 table展示这一行的数据是关于哪一张表的 3.4 explain 之 typetype 显示的是访问类型，是较为重要的一个指标，可取值为： type 含义 NULL MySQL不访问任何表，索引，直接返回结果 system 表只有一行记录(等于系统表)，这是const类型的特例，一般不会出现 const 表示通过索引一次就找到了，const 用于比较primary key 或者 unique 索引。因为只匹配一行数据，所以很快。如将主键置于where列表中，MySQL 就能将该查询转换为一个常量。const于将 “主键” 或 “唯一” 索引的所有部分与常量值进行比较 eq_ref 类似ref，区别在于使用的是唯一索引，使用主键的关联查询，关联查询出的记录只有一条。常见于主键或唯一索引扫描 ref 非唯一性索引扫描，返回匹配某个单独值的所有行。本质上也是一种索引访问，返回所有匹配某个单独值的所有行（多个） ref_or_null 类似ref，但是可以搜索值为NULL的行。 index_merge 表示使用了索引合并的优化方法。 range 只检索给定返回的行，使用一个索引来选择行。 where 之后出现 between ， &lt; , &gt; , in 等操作。 index index 与 ALL的区别为 index 类型只是遍历了索引树， 通常比ALL 快， ALL 是遍历数据文件。 all 将遍历全表以找到匹配的行 结果值从最好到最坏以此是： NULL &gt; system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL system &gt; const &gt; eq_ref &gt; ref &gt; range &gt; index &gt; ALL==一般来说， 我们需要保证查询至少达到 range 级别， 最好达到ref 。== 3.5 explain 之 keypossible_keys : 显示可能应用在这张表的索引， 一个或多个。 key ： 实际使用的索引， 如果为NULL， 则没有使用索引。 key_len : 表示索引中使用的字节数， 该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好。 3.6 explain 之 rows扫描行的数量。 3.7 explain 之 extra其他的额外的执行计划信息，在该列展示 。 extra 含义 using filesort 说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取， 称为 “文件排序”, 效率低。 using temporary 使用了临时表保存中间结果，MySQL在对查询结果排序时使用临时表。常见于 order by 和 group by； 效率低 using index 表示相应的select操作使用了覆盖索引， 避免访问表的数据行， 效率不错。 4 show profile分析SQLMysql从5.0.37版本开始增加了对 show profiles 和 show profile 语句的支持。show profiles 能够在做SQL优化时帮助我们了解时间都耗费到哪里去了。 (5.7版本后推荐使用performance_schema工具) 通过 have_profiling 参数，能够看到当前MySQL是否支持profile： mysql&gt; select @@have_profiling; +------------------+ | @@have_profiling | +------------------+ | YES | +------------------+ 1 row in set, 1 warning (0.00 sec)默认profiling是关闭的，可以通过set语句在Session级别开启profiling： mysql&gt; set profiling=1; Query OK, 0 rows affected, 1 warning (0.00 sec)查看是否开启： mysql&gt; select @@profiling; +-------------+ | @@profiling | +-------------+ | 1 | +-------------+ 1 row in set, 1 warning (0.00 sec)通过profile，我们能够更清楚地了解SQL执行的过程。 首先，我们可以执行一系列的操作，如： show databases; use db01; show tables; select * from tb_item where id &lt; 5; select count(*) from tb_item;执行完上述命令之后，再执行show profiles 指令， 来查看SQL语句执行的耗时： 通过show profile for query query_id语句可以查看到该SQL执行过程中每个线程的状态和消耗的时间： Sending data 状态表示MySQL线程开始访问数据行并把结果返回给客户端，而不仅仅是返回个客户端。由于在Sending data状态下，MySQL线程往往需要做大量的磁盘读取操作，所以经常是整各查询中耗时最长的状态。 在获取到最消耗时间的线程状态后，MySQL支持进一步选择all、cpu、block io 、context switch、page faults等明细类型类查看MySQL在使用什么资源上耗费了过高的时间。例如，选择查看CPU的耗费时间： 字段 含义 Status sql 语句执行的状态 Duration sql 执行过程中每一个步骤的耗时 CPU_user 当前用户占有的cpu CPU_system 系统占有的cpu 5 trace分析优化器执行计划MySQL5.6提供了对SQL的跟踪trace, 通过trace文件能够进一步了解为什么优化器选择A计划, 而不是选择B计划。 打开trace ，设置格式为 JSON，并设置trace最大能够使用的内存大小，避免解析过程中因为默认内存过小而不能够完整展示。 SET optimizer_trace=\"enabled=on\",end_markers_in_json=on; set optimizer_trace_max_mem_size=1000000; 执行SQL语句 ： select * from tb_item where id &lt; 4; 最后， 检查information_schema.optimizer_trace就可以知道MySQL是如何执行SQL的 ： select * from information_schema.optimizer_trace\\G; *************************** 1. row *************************** QUERY: select * from tb_item where id &lt; 4 TRACE: { \"steps\": [ { \"join_preparation\": { \"select#\": 1, \"steps\": [ { \"expanded_query\": \"/* select#1 */ select `tb_item`.`id` AS `id`,`tb_item`.`title` AS `title`,`tb_item`.`price` AS `price`,`tb_item`.`num` AS `num`,`tb_item`.`categoryid` AS `categoryid`,`tb_item`.`status` AS `status`,`tb_item`.`sellerid` AS `sellerid`,`tb_item`.`createtime` AS `createtime`,`tb_item`.`updatetime` AS `updatetime` from `tb_item` where (`tb_item`.`id` &lt; 4)\" } ] /* steps */ } /* join_preparation */ }, { \"join_optimization\": { \"select#\": 1, \"steps\": [ { \"condition_processing\": { \"condition\": \"WHERE\", \"original_condition\": \"(`tb_item`.`id` &lt; 4)\", \"steps\": [ { \"transformation\": \"equality_propagation\", \"resulting_condition\": \"(`tb_item`.`id` &lt; 4)\" }, { \"transformation\": \"constant_propagation\", \"resulting_condition\": \"(`tb_item`.`id` &lt; 4)\" }, { \"transformation\": \"trivial_condition_removal\", \"resulting_condition\": \"(`tb_item`.`id` &lt; 4)\" } ] /* steps */ } /* condition_processing */ }, { \"table_dependencies\": [ { \"table\": \"`tb_item`\", \"row_may_be_null\": false, \"map_bit\": 0, \"depends_on_map_bits\": [ ] /* depends_on_map_bits */ } ] /* table_dependencies */ }, { \"ref_optimizer_key_uses\": [ ] /* ref_optimizer_key_uses */ }, { \"rows_estimation\": [ { \"table\": \"`tb_item`\", \"range_analysis\": { \"table_scan\": { \"rows\": 9816098, \"cost\": 2.04e6 } /* table_scan */, \"potential_range_indices\": [ { \"index\": \"PRIMARY\", \"usable\": true, \"key_parts\": [ \"id\" ] /* key_parts */ } ] /* potential_range_indices */, \"setup_range_conditions\": [ ] /* setup_range_conditions */, \"group_index_range\": { \"chosen\": false, \"cause\": \"not_group_by_or_distinct\" } /* group_index_range */, \"analyzing_range_alternatives\": { \"range_scan_alternatives\": [ { \"index\": \"PRIMARY\", \"ranges\": [ \"id &lt; 4\" ] /* ranges */, \"index_dives_for_eq_ranges\": true, \"rowid_ordered\": true, \"using_mrr\": false, \"index_only\": false, \"rows\": 3, \"cost\": 1.6154, \"chosen\": true } ] /* range_scan_alternatives */, \"analyzing_roworder_intersect\": { \"usable\": false, \"cause\": \"too_few_roworder_scans\" } /* analyzing_roworder_intersect */ } /* analyzing_range_alternatives */, \"chosen_range_access_summary\": { \"range_access_plan\": { \"type\": \"range_scan\", \"index\": \"PRIMARY\", \"rows\": 3, \"ranges\": [ \"id &lt; 4\" ] /* ranges */ } /* range_access_plan */, \"rows_for_plan\": 3, \"cost_for_plan\": 1.6154, \"chosen\": true } /* chosen_range_access_summary */ } /* range_analysis */ } ] /* rows_estimation */ }, { \"considered_execution_plans\": [ { \"plan_prefix\": [ ] /* plan_prefix */, \"table\": \"`tb_item`\", \"best_access_path\": { \"considered_access_paths\": [ { \"access_type\": \"range\", \"rows\": 3, \"cost\": 2.2154, \"chosen\": true } ] /* considered_access_paths */ } /* best_access_path */, \"cost_for_plan\": 2.2154, \"rows_for_plan\": 3, \"chosen\": true } ] /* considered_execution_plans */ }, { \"attaching_conditions_to_tables\": { \"original_condition\": \"(`tb_item`.`id` &lt; 4)\", \"attached_conditions_computation\": [ ] /* attached_conditions_computation */, \"attached_conditions_summary\": [ { \"table\": \"`tb_item`\", \"attached\": \"(`tb_item`.`id` &lt; 4)\" } ] /* attached_conditions_summary */ } /* attaching_conditions_to_tables */ }, { \"refine_plan\": [ { \"table\": \"`tb_item`\", \"access_type\": \"range\" } ] /* refine_plan */ } ] /* steps */ } /* join_optimization */ }, { \"join_execution\": { \"select#\": 1, \"steps\": [ ] /* steps */ } /* join_execution */ } ] /* steps */ }","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"优化","slug":"优化","permalink":"https://www.codetool.top/tags/%E4%BC%98%E5%8C%96/"},{"name":"数据库","slug":"数据库","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"https://www.codetool.top/tags/MySQL/"}]},{"title":"leetcode1103-分糖果II","slug":"leetcode1103-分糖果II","date":"2020-03-05T05:12:17.000Z","updated":"2020-03-05T06:29:53.818Z","comments":true,"path":"article/leetcode1103-分糖果II/","link":"","permalink":"https://www.codetool.top/article/leetcode1103-%E5%88%86%E7%B3%96%E6%9E%9CII/","excerpt":"","text":"1 原题排排坐，分糖果。 我们买了一些糖果 candies，打算把它们分给排好队的 n = num_people 个小朋友。 给第一个小朋友 1 颗糖果，第二个小朋友 2 颗，依此类推，直到给最后一个小朋友 n 颗糖果。 然后，我们再回到队伍的起点，给第一个小朋友 n + 1 颗糖果，第二个小朋友 n + 2 颗，依此类推，直到给最后一个小朋友 2 * n 颗糖果。 重复上述过程（每次都比上一次多给出一颗糖果，当到达队伍终点后再次从队伍起点开始），直到我们分完所有的糖果。注意，就算我们手中的剩下糖果数不够（不比前一次发出的糖果多），这些糖果也会全部发给当前的小朋友。 返回一个长度为 num_people、元素之和为 candies 的数组，以表示糖果的最终分发情况（即 ans[i] 表示第 i 个小朋友分到的糖果数）。 示例 1: 输入： candies = 7, num_people = 4输出： [1,2,3,1]解释：第一次，ans[0] += 1，数组变为 [1,0,0,0]。第二次，ans[1] += 2，数组变为 [1,2,0,0]。第三次，ans[2] += 3，数组变为 [1,2,3,0]。第四次，ans[3] += 1（因为此时只剩下 1 颗糖果），最终数组变为 [1,2,3,1]。 示例 2: 输入： candies = 10, num_people = 3输出： [5,2,3]解释：第一次，ans[0] += 1，数组变为 [1,0,0]。第二次，ans[1] += 2，数组变为 [1,2,0]。第三次，ans[2] += 3，数组变为 [1,2,3]。第四次，ans[0] += 4，最终数组变为 [5,2,3]。 提示： 1 &lt;= candies &lt;= 10^9 . 1 &lt;= num_people &lt;= 1000 2 解法2.1 思想模拟过程 2.2 代码class Solution { public int[] distributeCandies(int candies, int num_people) { int[] candie = new int[num_people]; int cur_index = 0; int cur_count = 1; while(candies>0){ if(candies - cur_count &lt; 0){ candie[cur_index]+=candies; candies = 0; break; } candie[cur_index]+=cur_count; candies -= cur_count; cur_index++; cur_count++; if(cur_index == num_people) cur_index = 0; } return candie; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"BFS","slug":"BFS","permalink":"https://www.codetool.top/tags/BFS/"}]},{"title":"MySQL索引概述及索引的分类","slug":"MySQL索引概述及索引的分类","date":"2020-03-04T12:44:22.000Z","updated":"2020-03-06T05:39:07.513Z","comments":true,"path":"article/MySQL索引概述及索引的分类/","link":"","permalink":"https://www.codetool.top/article/MySQL%E7%B4%A2%E5%BC%95%E6%A6%82%E8%BF%B0%E5%8F%8A%E7%B4%A2%E5%BC%95%E7%9A%84%E5%88%86%E7%B1%BB/","excerpt":"","text":"1 概述MySQL官方对索引的定义为：索引（index）是帮助MySQL高效获取数据的数据结构（有序）。在数据之外，数据库系统还维护者满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据， 这样就可以在这些数据结构上实现高级查找算法，这种数据结构就是索引。 左边是数据表，一共有两列七条记录，最左边的是数据记录的物理地址（注意逻辑上相邻的记录在磁盘上也并不是一定物理相邻的）。为了加快Col2的查找，可以维护一个右边所示的二叉查找树，每个节点分别包含索引键值和一个指向对应数据记录物理地址的指针，这样就可以运用二叉查找快速获取到相应数据。（在有聚簇索引的概念时指向聚簇索引的值） 一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以索引文件的形式存储在磁盘上。索引是数据库中用来提高性能的最常用的工具。 索引是在MySQL的存储引擎层中实现的，而不是在服务器层实现的。所以每种存储引擎的索引都不一定完全相同，也不是所有的存储引擎都支持所有的索引类型的。MySQL目前提供了以下4种索引： BTREE 索引 ： 最常见的索引类型，大部分索引都支持 B 树索引。 HASH 索引：只有Memory引擎支持 ， 使用场景简单 。 R-tree 索引（空间索引）：空间索引是MyISAM引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少，不做特别介绍。 Full-text （全文索引） ：全文索引也是MyISAM的一个特殊索引类型，主要用于全文索引，InnoDB从Mysql5.6版本开始支持全文索引。 MyISAM、InnoDB、Memory三种存储引擎对各种索引类型的支持 索引 InnoDB引擎 MyISAM引擎 Memory引擎 BTREE索引 支持 支持 支持 HASH 索引 不支持 不支持 支持 R-tree 索引 不支持 支持 不支持 Full-text 5.6版本之后支持 支持 不支持 2 索引分类——从逻辑角度 主键索引索引列的值必须唯一，并且不允许有空值 唯一索引索引列的值必须唯一，但允许有空值 单值索引一个索引只包含单个列，一个表可以有多个单列索引 复合索引一个索引包含多个列 尽量使用复合索引，而少使用单列索引 。 创建复合索引 create index idx_name_sta_address on tb_seller(name, status, address);就相当于创建了三个索引 ： name name + status name + status + address 3 索引分类——从数据结构角度3.1 B树,B+树之前的博客有介绍多叉平衡查找树-B树与B-树 通常在 B+树上有两个头指针，一个指向根结点（进行随机搜索），一个指向关键字最小的叶结点（进行顺序搜索）。 3.1.1 B+树与B树的比较组织方式不一样 B+树：所有有效的索引关键字值都必须存储在叶结点中，其内部结点中的键值只用于索引项的查找定位。B树：有效的索引关键字值可以出现在B树的任意一个结点中。 因此：B+树：所有关键字的查找速度基本一致B树：依赖于查找关键字所在结点的层次 叶结点不同 B+树中叶节点间增加链表指针，提供对索引关键字的顺序扫描功能；叶节点的个数未必符合 m 叉查找树的要求，它依赖于键值字节数和指针字节数，为 m1 阶。 3.1.2 MySQL中的B+树适用场景InnoDB 存储引擎使用的是 B+树。 B+树为对如下类型的查询有效： 全值匹配：和索引中的所有列进行匹配（复合索引） 匹配最左前缀：只使用索引的第一列或前几列 匹配列前缀：只匹配某一列的值的开头部分 匹配范围值 精确匹配某一列并范围匹配另外一列 覆盖索引/只访问索引的查询 一般来说，如果 B+树可以按照某种方式查找到值，那么也可以按照这种方式用于排序。如果 ORDER BY 子句满足前面列出的几种查询类型，则这个索引也可以满足对应的排序需求。 下面是一些关于B+树索引的限制： 如果不是按照索引的最左列开始查找，则无法使用索引 不能跳过索引中的列 如果查询中有某个列的范围查询，则其右边所有列都无法使用索引优化查找 3.2 Hash 索引Hash树我在博客高效查找的数据结构-HashTree（哈希树）也提到过了。 只有精确匹配索引所有列的查询才有效，在 MySQL 中，只有 Memory 引擎显式支持 Hash 索引。 限制： 哈希索引只包含哈希值和行指针，而不存储字段值，所以不能使用索引中的值来避免读取行（无法使用覆盖索引）。不过，访问内存中的行的速度很快。 哈希索引数据并不是按照索引值顺序存储的，所以无法进行排序 哈希索引不支持部分索引列匹配查找。比如建立复合哈希索引(A,B)，无法仅使用 A 使用哈希索引去查询 不支持范围查询，仅支持等值查询 哈希冲突严重时，索引维护的代码很高。 3.3 B树索引与Hash索引比较 如果是等值查询，那么哈希索引明显有绝对优势，因为只需要经过一次算法即可找到相应的键值；当然了，这个前提是，键值都是唯一的。如果键值不是唯一的，就需要先找到该键所在位置，然后再根据链表往后扫描，直到找到相应的数据；如果是范围查询检索，这时候哈希索引就毫无用武之地了，因为原先是有序的键值，经过哈希算法后，有可能变成不连续的了，就没办法再利用索引完成范围查询检索； 哈希索引也没办法利用索引完成排序，以及 like ‘xxx%’ 这样的部分模糊查询（这种部分模糊查询，其实本质上也是范围查询）； 哈希索引也不支持多列联合索引的最左匹配规则； B+树索引的关键字检索效率比较平均，在有大量重复键值情况下，哈希索引的效率是极低的，因为存在所谓的哈希碰撞问题。 4 索引分类——从物理存储角度4.1 聚簇索引（聚集索引）InnoDB 的聚簇索引实际上在同一个结构中保存了B+树索引和数据行。 当表有聚簇索引时，它的数据行实际上存放在索引的叶子页中。聚簇表示数据行和相邻的键值紧紧地存储在一起。因为无法同时把数据行存储在两个不同的地方，所以一个表只能有一个聚簇索引。 InnoDB 通过主键聚簇数据。 每张表都会有一个聚簇索引。聚簇索引是一级索引。 聚簇索引一般是主键；没有主键，就是第一个唯一键；没有唯一键，就是隐藏ID。聚簇索引以外的所有索引都称为二级索引（即非聚簇索引）。 在 InnoDB 中，二级索引中的每条记录都包含该行的主键列，以及为二级索引指定的列。 InnoDB 使用这个主键值来搜索聚簇索引中的行。 聚簇索引的优点： 可以将相关数据保存在一起，只需一次 IO 就可以取出相邻的数据 数据访问更快，因为索引和数据保存在同一个 B+树中 使用覆盖索引扫描的查询可以直接使用叶节点中的主键值 缺点： 插入速度严重依赖于插入顺序。按照主键的顺序插入是加载数据到 InnoDB 表中速度最快的方式。但如果不是按照主键顺序加载数据，那么在加载完成后最好使用 OPTIMIZE TABLE命令重新组织一下表 更新聚簇索引列的代价很高，因为会强制 InnoDB 将每个被更新的行移动到新的位置 插入新行或者更新主键导致需要移动行的时候，可能面临页分裂的问题。当行的主键值要求必须将这一行插入到某个已满的页中时，存储引擎会将该页分裂成两个页面来容纳该行，这就是一次页分裂操作。页分裂会导致表占用更多的磁盘空间。 可能导致全表扫描变慢，尤其是行比较稀疏，或者由于页分裂导致数据存储不连续的时候 二级索引（非聚簇索引）可能会更大， 因为在二级索引的叶子节点包含了引用行的主键值。这样的策略减少了当出现行移动或者页分裂时二级索引的维护工作。 二级索引访问需要两次 B 树索引查找，而不是一次。因为二级索引中叶子节点保存的是行的主键值，要找到数据行，还需要拿主键值到聚簇索引中进行一次查找。 对于 InnoDB，自适应哈希索引能够减少这样的重复工作。 4.2 非聚簇索引（辅助索引）就是不是聚簇索引。 5 索引使用的基本原则 最经常查询的列上建立聚簇索引以提高查询效率 一个基本表最多只建立一个聚簇索引 经常更新的列不宜建立聚簇索引 主键和唯一键会自动创建索引 6 SQL索引语法6.1 创建索引CREATE [UNIQUE|FULLTEXT|SPATIAL] INDEX index_name [USING index_type] ON tbl_name(index_col_name,...) index_col_name : column_name[(length)][ASC | DESC] unique:唯一索引 fulltext:全文索引 spatial：空间索引 示例： CREATE INDEX PersonIndex ON Person (LastName) CREATE INDEX PersonIndex ON Person (LastName DESC) 复合索引： CREATE INDEX PersonIndex ON Person (LastName, FirstName) 6.2 查看索引show index from table_name; 会显示所有建在该表上的索引信息 6.3 删除索引DROP INDEX index_name ON tbl_name; 老版本好像是 ALTER TABLE table_name DROP INDEX index_name; 示例： DROP INDEX idx_city_name on city;","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"https://www.codetool.top/tags/MySQL/"}]},{"title":"常用开源数据库连接池C3P0、Druid介绍","slug":"常用开源数据库连接池C3P0、Druid介绍","date":"2020-03-04T08:44:11.000Z","updated":"2020-03-09T15:29:24.767Z","comments":true,"path":"article/常用开源数据库连接池C3P0、Druid介绍/","link":"","permalink":"https://www.codetool.top/article/%E5%B8%B8%E7%94%A8%E5%BC%80%E6%BA%90%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%9E%E6%8E%A5%E6%B1%A0C3P0%E3%80%81Druid%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"1 概述很多时候，连接的混乱管理所造成的系统资源开销过大成为制约大型企业级应用效率的瓶颈。因为每一次WEB请求都要建立一次数据库连接，建立连接是一个耗费资源的活动，每次都得花费0.05-1s的时间，而且系统还要分配内存资源。 数据库连接池的基本思想就是为数据库连接建立一个“缓冲池”。于现在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从缓冲池中取出一个，使用完毕以后再放回去即可。 2 C3P0C3P0是一款优秀的开源数据库连接池，被广泛使用。 2.1 使用maven依赖： &lt;dependency> &lt;groupId>c3p0&lt;/groupId> &lt;artifactId>c3p0&lt;/artifactId> &lt;version>0.9.1.2&lt;/version> &lt;/dependency> 基本配置： &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?> &lt;c3p0-config> &lt;!-- 默认配置，如果没有指定则使用这个配置 --> &lt;default-config> &lt;property name=\"user\">root&lt;/property> &lt;property name=\"password\">123456&lt;/property> &lt;property name=\"jdbcUrl\">jdbc:mysql://192.168.91.1:3306/test&lt;/property> &lt;property name=\"driverClass\">com.mysql.cj.jdbc.Driver&lt;/property> &lt;/default-config> &lt;!-- 命名的配置,可以通过方法调用实现 --> &lt;named-config name=\"test\"> &lt;!-- ... --> &lt;/named-config> &lt;/c3p0-config> 其他配置： 参数 默认值 解释 initialPoolSize 3 连接池初始化时创建的连接数（介于maxPoolSize和minPoolSize之间） maxPoolSize 15 连接池中拥有的最大连接数，如果获得新连接时会使连接总数超过这个值则不会再获取新连接，而是等待其他连接释放，所以这个值有可能会设计地很大 minPoolSize 3 连接池保持的最小连接数，后面的maxIdleTimeExcessConnections跟这个配合使用来减轻连接池的负载 acquireIncrement 3 连接池在无空闲连接可用时一次性创建的新数据库连接数 maxIdleTime 0 连接的最大空闲时间，如果超过这个时间，某个数据库连接还没有被使用，则会断开掉这个连接如果为0，则永远不会断开连接 maxConnectorAge 0 连接的最大绝对年龄，单位是秒，0表示绝对年龄无限大 maxIdleTimeExcessConnection 0 单位秒，为了减轻连接池的负载，当连接池经过数据访问高峰创建了很多连接，但是后面连接池不需要维护这么多连接，必须小于maxIdleTime.配置不为0，则将连接池的数量保持到minPoolSize automaticTestTable null 如果不为null，c3p0将生成指定名称的空表，使用该表来测试连接 connectionTesterClassName com.mchange.v2.c3p0.impl.DefaultConnectionTester 通过实现ConnectionTester或QueryConnectionTester的类来测试连接。类名需制定全路径。 idleConnectionTestPeriod 0 每个几秒检查所有连接池中的空闲连接 preferredTestQuery null 定义所有连接测试都执行的测试语句。在使用连接测试的情况下这个一显著提高测试速度。注意： 测试的表必须在初始数据源的时候就存在 testConnectionOnCheckin FALSE 如果设为true那么在取得连接的同时将校验连接的有效性 testConnectionOnCheckout FALSE 如果为true，在连接释放的同事将校验连接的有效性。 maxStatements 0 JDBC的标准参数，用以控制数据源内加载d的PreparedStatements数量 maxStatementsPerConnection 0 maxStatementsPerConnection定义了连接池内单个连接所拥有的最大缓存statements数 statementCacheNum-DeferredCloseThreads 0 如果大于零，则语句池将延迟物理close()缓存语句直到其父连接未被任何客户端使用，或者在其内部（例如在测试中）由池本身使用。 acquireRetryAttempts 30 定义在从数据库获取新连接失败后重复尝试的次数 acquireRetryDelay 1000 两次连接间隔时间，单位毫秒 breakAfterAcquireFailure FALSE 获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效 保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试 获取连接失败后该数据源将申明已断开并永久关闭 autoCommitOnClose FALSE 连接关闭时默认将所有未提交的操作回滚。如果为true，则未提交设置为待提交而不是回滚。 forceIgnoreUnresolvedTransactions FALSE 官方文档建议这个不要设置为true checkoutTimeout 0 当连接池用完时客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException,如设为0则无限期等待。单位毫秒。 factoryClassLocation 0 指定c3p0 libraries的路径，如果（通常都是这样）在本地即可获得那么无需设置，默认null即可 numHelperThreads 3 c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能通过多线程实现多个操作同时被执行 使用： DataSource dataSource = new ComboPooledDataSource(); 它会自动去类路径下查找名为c3p0-config.xml配置文件并加载。 可以使用命名的配置： DataSource dataSource = new ComboPooledDataSource(\"test\"); 使用的就是name=&quot;test&quot;的named-config 3 DruidDruid是阿里开源的一个数据库连接池，借鉴了C3P0等成熟连接池的思想，具有诸多优点 3.1 使用maven依赖： &lt;dependency> &lt;groupId>com.alibaba&lt;/groupId> &lt;artifactId>druid&lt;/artifactId> &lt;version>1.1.2&lt;/version> &lt;/dependency> 基本配置： driverClassName = com.mysql.cj.jdbc.Driver url = jdbc:mysql://192.168.91.1:3306/test username = root password = 123456 其他配置： 配置 默认值 说明 initialSize 0 初始化时建立物理连接的个数。初始化发生在显式调用 init 方法，或者第一次getConnection 时 maxActive 8 最大允许的连接数 maxIdle 已过期 minIdle 最小的空闲连接数 maxWait 获取连接时最大等待时间，单位毫秒。配置了 maxWait 之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置 useUnfairLock 属性为 true 使用非公平锁。 validationQuery 用来检测连接是否有效的 sql，要求是一个查询语句。 testOnBorrow TRUE 申请连接时执行 validationQuery 检测连接是否有效，做了这个配置会降低性能。 testOnReturn FALSE 归还连接时执行 validationQuery 检测连接是否有效，做了这个配置会降低性能 testWhileIdle FALSE 设置空闲时是否检测连接可用性。建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于 timeBetweenEvictionRunsMillis，执行 validationQuery 检测连接是否有效。 timeBetweenEvictionRunsMillis 检测需要关闭的空闲连接的间隔时间 minEvictableIdleTimeMillis 连接在池中的最小生存时间 connectionInitSqls 物理连接初始化的时候执行的sql filters 属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有： 监控统计用的filter:stat日志用的filter:log4j防御sql注入的filter:wall proxyFilters 类型是List&lt;com.alibaba.druid.filter.Filter&gt;，如果同时配置了filters和proxyFilters，是组合关系，并非替换关系 使用： Properties properties = new Properties(); InputStream in = Demo1.class.getClassLoader().getResourceAsStream(\"druid.properties\"); properties.load(in); DataSource dataSource = DruidDataSourceFactory.createDataSource(properties); //使用连接池 conn = dataSource.getConnection(); 3.2 源码public DruidPooledConnection getConnection(long maxWaitMillis) throws SQLException { init(); if (filters.size() > 0) { FilterChainImpl filterChain = new FilterChainImpl(this); return filterChain.dataSource_connect(this, maxWaitMillis); } else { return getConnectionDirect(maxWaitMillis); } } DruidPooledConnection内部包装了一个Connection，增强了close等方法 @Override public void close() throws SQLException { if (this.disable) { return; } DruidConnectionHolder holder = this.holder; if (holder == null) { if (dupCloseLogEnable) { LOG.error(\"dup close\"); } return; } DruidAbstractDataSource dataSource = holder.getDataSource(); boolean isSameThread = this.getOwnerThread() == Thread.currentThread(); if (!isSameThread) { dataSource.setAsyncCloseConnectionEnable(true); } if (dataSource.isAsyncCloseConnectionEnable()) { syncClose(); return; } for (ConnectionEventListener listener : holder.getConnectionEventListeners()) { listener.connectionClosed(new ConnectionEvent(this)); } List&lt;Filter> filters = dataSource.getProxyFilters(); if (filters.size() > 0) { FilterChainImpl filterChain = new FilterChainImpl(dataSource); filterChain.dataSource_recycle(this); } else { recycle(); } this.disable = true; } 【附】了解：DBUtils的使用 QueryRunner、DbUtils、ResultSetHandler。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"javaweb","slug":"javaweb","permalink":"https://www.codetool.top/tags/javaweb/"},{"name":"数据库","slug":"数据库","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"leetcode994-腐烂的橘子","slug":"leetcode994-腐烂的橘子","date":"2020-03-03T17:23:30.000Z","updated":"2020-03-03T17:46:49.413Z","comments":true,"path":"article/leetcode994-腐烂的橘子/","link":"","permalink":"https://www.codetool.top/article/leetcode994-%E8%85%90%E7%83%82%E7%9A%84%E6%A9%98%E5%AD%90/","excerpt":"","text":"1 原题在给定的网格中，每个单元格可以有以下三个值之一： 值 0 代表空单元格；值 1 代表新鲜橘子；值 2 代表腐烂的橘子。每分钟，任何与腐烂的橘子（在 4 个正方向上）相邻的新鲜橘子都会腐烂。 返回直到单元格中没有新鲜橘子为止所必须经过的最小分钟数。如果不可能，返回 -1。 示例 1: 输入: [[2,1,1],[1,1,0],[0,1,1]]输出: 4 示例 2: 输入: [[2,1,1],[0,1,1],[1,0,1]]输出: -1解释: 左下角的橘子（第 2 行， 第 0 列）永远不会腐烂，因为腐烂只会发生在 4 个正向上。 示例 3: 输入: [[0,2]]输出: 0解释: 因为 0 分钟时已经没有新鲜橘子了，所以答案就是 0 。 提示： 1 &lt;= grid.length &lt;= 10 1 &lt;= grid[0].length &lt;= 10 grid[i][j] 仅为 0、1 或 2 2 解法2.1 思想广度优先搜索，每次将搜索到的新鲜橘子搞成2，最后再搜索一遍全图是否有剩余的新鲜橘子。 2.2 代码class Solution { int height; int width; public int orangesRotting(int[][] grid) { Queue&lt;Integer> queue = new LinkedList&lt;>(); height = grid.length; if(height == 0) return 0; width = grid[0].length; for(int i = 0;i&lt;height;i++){ for(int j = 0;j&lt;width;j++){ if(grid[i][j]==2) queue.offer(i*width+j); } } queue.offer(null); int cur = 0; while(!queue.isEmpty()){ Integer i = queue.poll(); if(i==null){ if(queue.isEmpty()) break; cur++; queue.offer(null); continue; } int x = i/width; int y = i%width; if(x!=0 &amp;&amp; grid[x-1][y]==1){ queue.offer(toInt(x-1,y)); grid[x-1][y]=2; } if(x!=height-1 &amp;&amp; grid[x+1][y]==1){ queue.offer(toInt(x+1,y)); grid[x+1][y]=2; } if(y!=0 &amp;&amp; grid[x][y-1]==1) { queue.offer(toInt(x,y-1)); grid[x][y-1]=2; } if(y!=width-1 &amp;&amp; grid[x][y+1]==1) { queue.offer(toInt(x,y+1)); grid[x][y+1]=2; } } for(int i = 0;i&lt;height;i++){ for(int j = 0;j&lt;width;j++){ if(grid[i][j]==1) return -1; } } return cur; } public int toInt(int x,int y){ return x*width+y; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"BFS","slug":"BFS","permalink":"https://www.codetool.top/tags/BFS/"}]},{"title":"Redis高并发环境下出现的各种问题详解（高可用）","slug":"Redis高并发环境下出现的各种问题详解","date":"2020-03-03T16:43:37.000Z","updated":"2020-03-05T15:33:55.991Z","comments":true,"path":"article/Redis高并发环境下出现的各种问题详解/","link":"","permalink":"https://www.codetool.top/article/Redis%E9%AB%98%E5%B9%B6%E5%8F%91%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%87%BA%E7%8E%B0%E7%9A%84%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"1 缓存预热服务器启动后迅速宕机 问题原因： 请求数量较高 主从之间数据吞吐量较大，数据同步操作频度较高 1.1 解决方案前置准备工作： 日常例行统计数据访问记录，统计访问频度较高的热点数据 利用LRU数据删除策略，构建数据留存队列例如：storm与kafka配合 准备工作： 将统计结果中的数据分类，根据级别，redis优先加载级别较高的热点数据 利用分布式多服务器同时进行数据读取，提速数据加载过程 热点数据主从同时预热实施： 使用脚本程序固定触发数据预热过程 如果条件允许，使用了CDN（内容分发网络），效果会更好 1.2 总结缓存预热就是系统启动前，提前将相关的缓存数据直接加载到缓存系统。避免在用户请求的时候，先查询数据库，然后再将数据缓存的问题！用户直接查询事先被预热的缓存数据！ 2 缓存雪崩缓存雪崩就是瞬间过期数据量太大，导致对数据库服务器造成压力。如能够有效避免过期时间集中，可以有效解决雪崩现象的出现（约40%），配合其他策略一起使用，并监控服务器的运行数据，根据运行记录做快速调整。 2.1 问题体现 系统平稳运行过程中，忽然数据库连接量激增 应用服务器无法及时处理请求 大量408，500错误页面出现 客户反复刷新页面获取数据 数据库崩溃 应用服务器崩溃 重启应用服务器无效 Redis服务器崩溃 Redis集群崩溃 重启数据库后再次被瞬间流量放倒 2.2 原因分析 在一个较短的时间内，缓存中较多的key集中过期 此周期内请求访问过期的数据，redis未命中，redis向数据库获取数据 数据库同时接收到大量的请求无法及时处理 Redis大量请求被积压，开始出现超时现象 数据库流量激增，数据库崩溃 重启后仍然面对缓存中无数据可用 Redis服务器资源被严重占用，Redis服务器崩溃 Redis集群呈现崩塌，集群瓦解 应用服务器无法及时得到数据响应请求，来自客户端的请求数量越来越多，应用服务器崩溃 应用服务器，redis，数据库全部重启，效果不理想 2.3 解决方案降低数据库压力： 更多的页面静态化处理 构建多级缓存架构Nginx缓存+redis缓存+ehcache缓存 检测Mysql严重耗时业务进行优化对数据库的瓶颈排查：例如超时查询、耗时较高事务等 灾难预警机制 监控redis服务器性能指标 CPU占用、CPU使用率 内存容量 查询平均响应时间 线程数 限流、降级短时间范围内牺牲一些客户体验，限制一部分请求访问，降低应用服务器压力，待业务低速运转后再逐步放开访问 避免短时间大量key集中过期： LRU与LFU切换 数据有效期策略调整 根据业务数据有效期进行分类错峰，A类90分钟，B类80分钟，C类70分钟 过期时间使用固定时间+随机值的形式，稀释集中到期的key的数量 超热数据使用永久key 定期维护（自动+人工）对即将过期数据做访问量分析，确认是否延时，配合访问量统计，做热点数据的延时 加锁 慎用！ 3 缓存击穿缓存击穿就是单个高热数据过期的瞬间，数据访问量较大，未命中redis后，发起了大量对同一数据的数据库访问，导致对数据库服务器造成压力。应对策略应该在业务数据分析与预防方面进行，配合运行监控测试与即时调整策略，毕竟单个key的过期监控难度较高，配合雪崩处理策略即可。 3.1 问题体现 系统平稳运行过程中 数据库连接量瞬间激增 Redis服务器无大量key过期 Redis内存平稳，无波动 Redis服务器CPU正常 数据库崩溃 3.2 原因分析 Redis中某个key过期，该key访问量巨大 多个数据请求从服务器直接压到Redis后，均未命中 Redis在短时间内发起了大量对数据库中同一数据的访问 3.3 解决方案防止高热key过期： 预先设定以电商为例，每个商家根据店铺等级，指定若干款主打商品，在购物节期间，加大此类信息key的过期时长注意：购物节不仅仅指当天，以及后续若干天，访问峰值呈现逐渐降低的趋势 现场调整监控访问量，对自然流量激增的数据延长过期时间或设置为永久性key 后台刷新数据启动定时任务，高峰期来临之前，刷新数据有效期，确保不丢失 二级缓存设置不同的失效时间，保障不会被同时淘汰就行 加锁分布式锁，防止被击穿，但是要注意也是性能瓶颈，慎重！ 关于雪崩中降低数据库压力的方法也适用。 4 缓存穿透缓存穿透访问了不存在的数据，跳过了合法数据的redis数据缓存阶段，每次访问数据库，导致对数据库服务器造成压力。通常此类数据的出现量是一个较低的值，当出现此类情况以毒攻毒，并及时报警。应对策略应该在临时预案防范方面多做文章。 无论是黑名单还是白名单，都是对整体系统的压力，警报解除后尽快移除。 4.1 问题体现 系统平稳运行过程中 应用服务器流量随时间增量较大 Redis服务器命中率随时间逐步降低 Redis内存平稳，内存无压力 Redis服务器CPU占用激增 数据库服务器压力激增 数据库崩溃 4.2 原因分析 出现非正常URL访问（通常是黑客攻击） Redis中大面积出现未命中 获取的数据在数据库中也不存在，数据库查询未得到对应数据。 反复出现以上情况，redis和数据库的压力激增。 4.3 解决方案 缓存null对查询结果为null的数据进行缓存（长期使用，定期清理），设定短时限，例如30-60秒，最高5分钟 白名单策略 提前预热各种分类数据id对应的bitmaps，id作为bitmaps的offset，相当于设置了数据白名单。当加载正常数据时，放行，加载异常数据时直接拦截（效率偏低） 使用布隆过滤器（有关布隆过滤器的命中问题对当前状况可以忽略） 实施监控 实时监控redis命中率（业务正常范围时，通常会有一个波动值）与null数据的占比 非活动时段波动：通常检测3-5倍，超过5倍纳入重点排查对象 活动时段波动：通常检测10-50倍，超过50倍纳入重点排查对象根据倍数不同，启动不同的排查流程。然后使用黑名单进行防控（运营） key加密问题出现后，临时启动防灾业务key，对key进行业务层传输加密服务，设定校验程序，过来的key校验。例如每天随机分配60个加密串，挑选2到3个，混淆到页面数据id中，发现访问key不满足规则，驳回数据访问。 5 Redis性能指标监控5.1 性能指标 Name Description latency Redis响应一个请求的时间 instantaneous_ops_per_sec 平均每秒处理请求总数 hit rate (calculated) 缓存命中率(计算出来的) 5.2 内存指标 Name Description used_memory 已使用内存 mem_fragmentation_ratio 内存碎片率 evicted_keys 由于最大内存限制被移除的key的数量 blocked_clients 由于BLPOP,BRPOP,or BRPOPLPUSH而被阻塞的客户端 5.3 基本活动指标 Name Description connected_clients 客户端连接数 connected_slaves Slave数量 master_last_io_seconds_ago 最近一次主从交互之后的秒数 keyspace 数据库中的key值总数 5.4 持久性指标 Name Description rdb_last_save_time 最后一次持久化保存到磁盘的时间戳 rdb_changes_since_last_save 自最后一次持久化以来数据库的更改数 5.5 错误指标 Name Description rejected_connections 由于达到maxclient限制而被拒绝的连接数 keyspace_misses Key值查找失败(没有命中)次数 master_link_down_since_seconds 主从断开的持续时间(以秒为单位) 5.6 监控方式监控方式 工具 Cloud Insight Redis Prometheus Redis-stat Redis-faina RedisLive zabbix 命令 benchmark redis-cli monitor slowlog 5.6.1 benchmark命令： redis-benchmark [-h ] [-p ] [-c ] [-n &lt;requests]&gt; [-k ]不带参数运行redis-benchmark会测试50个连接，10000次请求对应的性能 redis-benchmark -c 100 -n 5000可以测试100个连接，5000次请求对应的性能 选项 描述 默认值 -h 指定服务器主机名 127.0.0.1 -p 指定服务器端口 6379 -s 指定服务器 socket -c 指定并发连接数 50 -n 指定请求数 10000 -d 以字节的形式指定SET/GET值的数据大小 2 -k 1=keep alive 0=reconnect 1 -r SET/GET/INCR使用随机key,SADD使用随机值 -P 通过管道传输&lt;numreq&gt;请求 1 -q 强制退出redis。仅显示query/sec值 –csv 以CSV格式输出 -l 生成循环,永久执行测试 -t 仅运行以逗号分隔的测试命令列表。 -I Idle模式。仅打开N个idle连接并等待。 5.7 monitor在redis-cli中使用指令 monitor 打印服务器的调试信息。 5.8 slowlogslowlog [operator]operator可取： get ：获取慢查询日志 len ：获取慢查询日志条目数 reset ：重置慢查询日志 相关配置： slowlog-log-slower-than 1000 #设置慢查询的时间下线，单位：微妙 slowlog-max-len 100 #设置慢查询命令对应的日志显示长度，单位：命令数","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"Redis","slug":"Redis","permalink":"https://www.codetool.top/tags/Redis/"}]},{"title":"Redis主从复制、哨兵、集群详解","slug":"Redis主从复制、哨兵、集群详解","date":"2020-03-03T15:03:16.000Z","updated":"2020-03-03T15:15:32.017Z","comments":true,"path":"article/Redis主从复制、哨兵、集群详解/","link":"","permalink":"https://www.codetool.top/article/Redis%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E3%80%81%E5%93%A8%E5%85%B5%E3%80%81%E9%9B%86%E7%BE%A4%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"【补充】高可用：（总时间-宕机时间）/总时间，目标是99.999% 1 主从复制为了避免单点Redis服务器故障，准备多台服务器，互相连通。将数据复制多个副本保存在不同的服务器上，连接在一起，并保证数据是同步的。即使有其中一台服务器宕机，其他服务器依然可以继续提供服务，实现Redis的高可用，同时实现数据冗余备份。 提供数据方：master接收数据方：slave 从机通常不允许写，当主机宕机，需要临时推选出一个从机代替主机工作。 1.1 作用 读写分离：master写、slave读，提高服务器的负载能力。 负载均衡：基于主从结构，配合读写分离，由slave分担master负载，并根据需求的变化，改变slave的数量，通过多个从节点分担数据读取负载，大大提高Redis服务器并发量与数据吞吐量 故障恢复：当master出现问题时，由slave提供服务，实现快速的故障恢复 数据冗余：实现数据热备份，是持久化之外的一种数据冗余方式 高可用基石：基于主从复制，构建哨兵模式与集群，实现Redis的高可用方案 1.2 工作流程主从复制过程大体可以分为3个阶段 建立连接阶段（即准备阶段） 数据同步阶段 命令传播阶段 1.2.1 建立连接建立slave到master的连接，使master能够识别slave，并保存slave端口号 步骤1：设置master的地址和端口，保存master信息 步骤2：建立socket连接 步骤3：发送ping命令（定时器任务）（断开重连） 步骤4：身份验证 步骤5：发送slave端口信息 具体实现： 设置master信息： 方式一：客户端发送命令slaveof &lt;masterip&gt; &lt;masterport&gt; 方式二：启动服务器参数redis-server -slaveof &lt;masterip&gt; &lt;masterport&gt; 方式三：服务器配置slaveof &lt;masterip&gt; &lt;masterport&gt; 断开方式：slaveof no one 配置授权认证： master设置密码的方法： 配置文件：requirepass &lt;password&gt; 指令设置密码：config set requirepass &lt;password&gt; slave密码认证方法： 指令：auth &lt;password&gt; 启动客户端参数：redis-cli -a &lt;password&gt; 配置文件：masterauth &lt;password&gt; 1.2.2 数据同步 在slave初次连接master后，复制master中的所有数据到slave 将slave的数据库状态更新成master当前的数据库状态 连接后的第一次同步是全量复制： slave发送指令：psync2 master执行bgsave，产生rdb文件，这段时间内执行的指令放在命令缓冲区中 master将rdb文件发给slave slave从rdb文件中恢复数据 然后是部分（增量）复制： master将命令缓冲区中指令以aof的格式发送给slave slave执行指令以同步 数据同步阶段master说明： 如果master数据量巨大，数据同步阶段应避开流量高峰期，避免造成master阻塞，影响业务正常执行 复制缓冲区大小设定不合理，会导致数据溢出。如进行全量复制周期太长，进行部分复制时发现数据已经存在丢失的情况，必须进行第二次全量复制，致使slave陷入死循环状态。相关配置：repl-backlog-size 1mb master单机内存占用主机内存的比例不应过大，建议使用50%-70%的内存，留下30%-50%的内存用于执行bgsave命令和创建复制缓冲区 数据同步阶段slave说明： 为避免slave进行全量复制、部分复制时服务器响应阻塞或数据不同步，建议关闭此期间的对外服务相关配置：slave-serve-stale-data yes|no 数据同步阶段，master发送给slave信息可以理解master是slave的一个客户端，主动向slave发送命令 多个slave同时对master请求数据同步，master发送的RDB文件增多，会对带宽造成巨大冲击，如果master带宽不足，因此数据同步需要根据业务需求，适量错峰 slave过多时，建议调整拓扑结构，由一主多从结构变为树状结构，中间的节点既是master，也是slave。注意使用树状结构时，由于层级深度，导致深度越高的slave与最顶层master间数据同步延迟较大，数据一致性变差，应谨慎选择 1.2.3 命令传播 当master数据库状态被修改后，导致主从服务器数据库状态不一致，此时需要让主从数据同步到一致的状态，同步的动作称为命令传播 master将接收到的数据变更命令发送给slave，slave接收命令后执行命令 命令传播阶段的部分复制： 如果命令传播阶段出现了断网现象： 网络闪断闪连 ——忽略 短时间网络中断 ——部分复制 长时间网络中断 ——全量复制 部分复制的三个核心要素： 服务器的运行ID 服务器运行ID是每一台服务器每次运行的身份识别码，一台服务器多次运行可以生成多个运行id。 组成：运行id由40位字符组成，是一个随机的十六进制字符例如：fdc9ff13b9bbaab28db42b3d50f852bb5e3fcdce。 作用：运行id被用于在服务器间进行传输，识别身份。如果想两次操作均对同一台服务器进行，必须每次操作携带对应的运行id，用于对方识别。 实现方式：运行id在每台服务器启动时自动生成的，master在首次连接slave时，会将自己的运行ID发送给slave，slave保存此ID，通过info Server命令，可以查看节点的runid。 主服务器的复制积压缓冲区 复制缓冲区，又名复制积压缓冲区，是一个先进先出（FIFO）的队列，用于存储服务器执行过的命令，每次传播命令，master都会将传播的命令记录下来，并存储在复制缓冲区 内容就是AOF文件的格式，每个字节值还有一个偏移量。 主从服务器的复制偏移量 一个数字，描述复制缓冲区中的指令字节位置 分类： master复制偏移量：记录发送给所有slave的指令字节对应的位置（多个） slave复制偏移量：记录slave接收master发送过来的指令字节对应的位置（一个） 作用：同步信息，比对master与slave的差异，当slave断线后，恢复数据使用 1.2.4 工作流程总结 1.3 心跳机制进入命令传播阶段候，master与slave间需要进行信息交换，使用心跳机制进行维护，实现双方连接保持在线。 master心跳： 指令：PING 周期：由repl-ping-slave-period决定，默认10秒 作用：判断slave是否在线 查询：INFO replication 获取slave最后一次连接时间间隔，lag项维持在0或1视为正常 slave心跳任务 指令：REPLCONF ACK {offset} 周期：1秒 作用1：汇报slave自己的复制偏移量，获取最新的数据变更指令 作用2：判断master是否在线 注意: 当slave多数掉线，或延迟过高时，master为保障数据稳定性，将拒绝所有信息同步操作 相关配置： min-slaves-to-write 2 min-slaves-max-lag 8slave数量少于2个，或者所有slave的延迟都大于等于10秒时，强制关闭master写功能，停止数据同步 slave数量由slave发送REPLCONF ACK命令做确认 slave延迟由slave发送REPLCONF ACK命令做确认 1.4 主从复制常见问题1.4.1 频繁的全量复制（1）伴随着系统的运行，master的数据量会越来越大，一旦master重启，runid将发生变化，会导致全部slave的全量复制操作 内部优化调整方案： master内部创建master_replid变量，使用runid相同的策略生成，长度41位，并发送给所有slave 在master关闭时执行命令shutdown save，进行RDB持久化,将runid与offset保存到RDB文件中 repl-id repl-offset 通过redis-check-rdb命令可以查看该信息 master重启后加载RDB文件，恢复数据重启后，将RDB文件中保存的repl-id与repl-offset加载到内存中 master_repl_id = repl master_repl_offset = repl-offset 通过info命令可以查看该信息 作用：本机保存上次runid，重启后恢复该值，使所有slave认为还是之前的master 1.4.2 频繁的全量复制（2）问题现象: 网络环境不佳，出现网络中断，slave不提供服务 问题原因: 复制缓冲区过小，断网后slave的offset越界，触发全量复制 最终结果: slave反复进行全量复制 解决方案: 修改复制缓冲区大小 建议设置如下： 测算从master到slave的重连平均时长second 获取master平均每秒产生写命令数据总量write_size_per_second 最优复制缓冲区空间 = 2 * second * write_size_per_second 1.4.3 频繁的网络中断（1）问题现象: master的CPU占用过高 或 slave频繁断开连接 问题原因： slave每1秒发送REPLCONF ACK命令到master 当slave接到了慢查询时（keys * ，hgetall等），会大量占用CPU性能 master每1秒调用复制定时函数replicationCron()，比对slave发现长时间没有进行响应 最终结果： master各种资源（输出缓冲区、带宽、连接等）被严重占用 解决方案： 通过设置合理的超时时间repl-timeout，确认是否释放slave。该参数定义了超时时间的阈值（默认60秒），超过该值，释放slave 1.4.4 频繁的网络中断（2）问题现象： slave与master连接断开 问题原因： master发送ping指令频度较低 master设定超时时间较短 ping指令在网络中存在丢包 解决方案： 提高ping指令发送的频度 repl-ping-slave-period 超时时间repl-time的时间至少是ping指令频度的5到10倍，否则slave很容易判定超时 1.4.5 数据不一致问题现象： 多个slave获取相同数据不同步 问题原因： 网络信息不同步，数据发送有延迟 解决方案： 优化主从间的网络环境，通常放置在同一个机房部署，如使用阿里云等云服务器时要注意此现象 监控主从节点延迟（通过offset）判断，如果slave延迟过大，暂时屏蔽程序对该slave的数据访问 slave-serve-stale-data yes|no 开启后仅响应info、slaveof等少数命令（慎用，除非对数据一致性要求很高） 2 哨兵模式上面提到如果主机宕机，需要临时推选出一个从机代替主机工作。 2.1 作用哨兵(sentinel) 是一个分布式系统，用于对主从结构中的每台服务器进行监控，当出现故障时通过投票机制选择新的master并将所有slave连接到新的master。 监控： 不断的检查master和slave是否正常运行。 master存活检测、master与slave运行情况检测 通知（提醒）： 当被监控的服务器出现问题时，向其他（哨兵间，客户端）发送通知。 自动故障转移： 断开master与slave连接，选取一个slave作为master，将其他slave连接到新的master，并告知客户端新的服务器地址 注意： 哨兵也是一台redis服务器，只是不提供数据服务 通常哨兵配置数量为单数 2.2 启用哨兵启用哨兵命令： redis-sentinel sentinel-配置.conf 配置文件： sentinel monitor mymaster 127.0.0.1 6379 2 # 配置监控的主节点 # 这个配置项格式为sentinel monitor &lt;master-group-name&gt; &lt;ip&gt; &lt;port&gt; &lt;quorum&gt; # 意义为监视一个名为mymaster的主节点（这里的mymaster可以自定义，主要是为了标识这个集群） # 主节点ip地址是127.0.0.1，端口为6379 # 法定票数为2票。表示至少需要2个哨兵认为节点down了，才算down了。 sentinel down-after-milliseconds mymaster 30000 # 监控到指定的集群的主节点异常状态持续多久方才将标记为“故障”； sentinel parallel-syncs mymaster 1 # 指在failover过程中，能够被sentinel并行配置的从节点的数量；数值越大，要求网络资源越高，要求越小，同步时间约长 sentinel failover-timeout 180000 # sentinel必须在此指定的时长内完成故障转移操作，否则，将视为故障转移操作失败2.3 哨兵工作原理哨兵在进行主从切换过程中经历三个阶段 监控 通知 故障转移 2.3.1 监控阶段用于同步各个节点的状态信息 获取各个sentinel的状态（是否在线） 获取master的状态 master属性 runid role：master 各个slave的详细信息 获取所有slave的状态（根据master中的slave信息） slave属性 runid role：slave master_host、master_port offset …… 2.3.2 通知阶段sentinel之间也会组建连接网共享master和slave的状态。 每个sentinel收集到了信息都会共享给其他的sentinel。 2.3.3 故障转移阶段如果某一sentinel某时刻联系不上主机并且超过failover-timeout时间，就对其他sentinel发起通知SENTINEL is-master-down-by-addr ……，此时该sentinel对主机的判定为SRI_S_DOWN，即主观下线。 其他sentinel收到通知后也对主机做出评判，如果有超半数(法定票数)的sentinel认为主机宕机了，就判定该主机为SRI_O_DOWN，即客观下线。 然后sentinel内部开始发送竞选指令争选作为处理该故障的哨兵。所有哨兵根据收到竞选指令的先后和一些评判标准投票，获得投票数最多的哨兵处理该故障。 哨兵的任务： 在服务器列表中挑选备选master： 筛选在线的 剔除响应慢的 剔除与原master断开时间久的 按照优先原则 优先级 offset runid 根据以上方法挑选出一个备选master后，开始替换master： 发送指令（sentinel） 向新的master发送slaveof no one 向其他slave发送slaveof 新masterIP端口 3 集群集群就是使用网络将若干台计算机联通起来，并提供统一的管理方式，使其对外呈现单机的服务效果 集群的作用 分散单台服务器的访问压力，实现负载均衡 分散单台服务器的存储压力，实现可扩展性 降低单台服务器宕机带来的业务灾难 3.1 设计 通过算法设计，计算出key应该保存的位置 将所有的存储空间计划切割成16384份槽，每台主机保存一部分每份代表的是一个存储空间，不是一个key的保存空间 将key按照计算出的结果放到对应的存储空间 集群内部也有通信，每台机器都知道一个指定的槽放在哪个机器上，如果槽未命中，则会通知用户正确位置。 3.2 cluster集群搭建参考详解Redis Cluster集群 - 请叫我头头哥 - 博客园","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"Redis","slug":"Redis","permalink":"https://www.codetool.top/tags/Redis/"}]},{"title":"Redis高级数据类型介绍","slug":"Redis高级数据类型介绍","date":"2020-03-03T10:26:52.000Z","updated":"2020-03-03T10:27:35.861Z","comments":true,"path":"article/Redis高级数据类型介绍/","link":"","permalink":"https://www.codetool.top/article/Redis%E9%AB%98%E7%BA%A7%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"1 Bitmaps之前的博客有提到过海量数据算法-BitMap介绍和实现 实际上Redis也有这样的数据结构——就是一个一个的字节（实际上也就是String类型），相关指令： setbit key index 1|0：将对应的位设置为1/0。 getbit key index：获取对应的位的值。 bitop op destKey key1 [key2...]：bitmap之间的位运算，op可以是： and：与 or：或 not：非 xor：异或 bitcount key [start end]：统计bitmap中1的数量 2 HyperLogLog作用：统计不重复数据的数量。 虽然Bitmap也可以实现这个功能，但它的空间复杂度极高，而HyperLogLog中的LogLog代表的是它的空间复杂度，即这种算法的空间复杂度仅有O(log2(log2(Nmax)))。 它的原理基于基数估计算法(Cardinality Estimation Algorithm)：LogLogCounting（这种算法以后有机会再研究） 相关操作： pfadd key element [element ...]：添加数据 pfcount key [key ...]：统计数据，返回不重复数据的个数 pfmerge destkey sourcekey [sourcekey ...]：合并数据 这种算法是一种概率算法，它存在一定的误差。它只需要12K内存，在标准误差0.81%的前提下，能够统计2​64个数据。 pfadd命令并不是一次性分配12k内存使用，会随着基数的增加内存逐渐增大。 但是只要使用了pfmerge命令合并了空间，得到的合并后的空间就是12k。 3 GEO功能：计算两个经纬度坐标点之间的距离。 相关操作： geoadd key longitude latitude member [longitude latitude member]：添加坐标点 geopos key member [member ...]：获取坐标点 geodist key member1 member2 [unit]：计算坐标点，默认单位是米 georadius key longitude latitude radius m|km|ft|mi [withcoord] [withdist] [withhash] [count count]：根据坐标求范围内的数据 georadiusbymember key member radius m|km|ft|mi [withcoord] [withdist] [withhash] [count count]：根据点求范围内的数据 geohash key member [member ...]：获取指定点对应的坐标hash值 示例： 127.0.0.1:6379&gt; geoadd map 1 1 a (integer) 1 127.0.0.1:6379&gt; geoadd map 2 2 b (integer) 1 127.0.0.1:6379&gt; geopos map a 1) 1) &quot;0.99999994039535522&quot; 2) &quot;0.99999945914297683&quot; 127.0.0.1:6379&gt; geodist map a b &quot;157270.0561&quot; 127.0.0.1:6379&gt; geodist map a b km &quot;157.2701&quot; 127.0.0.1:6379&gt; georadiusbymember map a 180 km withdist 1) 1) &quot;a&quot; 2) &quot;0.0000&quot; 2) 1) &quot;b&quot; 2) &quot;157.2701&quot; 127.0.0.1:6379&gt; georadiusbymember map a 120 km withdist 1) 1) &quot;a&quot; 2) &quot;0.0000&quot;","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"Redis","slug":"Redis","permalink":"https://www.codetool.top/tags/Redis/"}]},{"title":"Redis事务、分布式锁、删除策略介绍","slug":"Redis事务、分布式锁、删除策略介绍","date":"2020-03-03T09:25:22.000Z","updated":"2020-03-03T09:25:45.003Z","comments":true,"path":"article/Redis事务、分布式锁、删除策略介绍/","link":"","permalink":"https://www.codetool.top/article/Redis%E4%BA%8B%E5%8A%A1%E3%80%81%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81%E3%80%81%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"1 Redis事务1.1 指令multi：开启事务exec: 结束并执行事务discard：终止并放弃事务 1.2 注意 如果定义的事务中所包含的命令存在语法错误，整体事务中所有命令均不会执行。包括那些语法正确的命令。 如果一个事务在执行过程中某指令出现错误，不影响其他能执行的指令。程序员可以根据需要手动回滚（没有回滚指令，只能用逆操作）。 1.3 锁Redis中可以使用锁来操控基于特定条件的事务执行。 对 key 添加监视锁，在执行exec前如果key发生了变化，终止事务执行：watch key1 [key2……] 取消对所有 key 的监视：unwatch 1.4 分布式锁使用setnx设置一个公共锁：setnx lock-key value 利用setnx命令的返回值特征，有值则返回设置失败，无值则返回设置成功 对于返回设置成功的，拥有控制权，进行下一步的具体业务操作 对于返回设置失败的，不具有控制权，排队或等待 操作完毕通过del操作释放锁 注意： 因为解锁操作依赖于用户控制，必定会出现加锁后未解锁的风险。 解决方案： 使用expire/pexpire设置锁的过期时间，到点自动释放。 由于操作通常都是微秒或毫秒级，因此该锁定时间不宜设置过大。具体时间需要业务测试后确认。 例如：持有锁的操作最长执行时间127ms，最短执行时间7ms。 测试百万次最长执行时间对应命令的最大耗时，测试百万次网络延迟平均耗时 锁时间设定推荐：最大耗时120%+平均网络延迟110% 如果业务最大耗时&lt;&lt;网络平均延迟，通常为2个数量级，取其中单个耗时较长即可 2 删除策略对于那些ttl=-2的已经过期的数据，redis真的将它们删除了吗？ 定时删除 惰性删除 定期删除 redis内存中有一块区域用于存储时效性数据的过期时间，它将数据的存储地址和过期时间关联了起来。 2.1 定时删除创建一个定时器，当key设置有过期时间，且过期时间到达时，由定时器任务立即执行对键的删除操作。 优点：节约内存，到时就删除，快速释放掉不必要的内存占用 缺点：CPU压力很大，无论CPU此时负载量多高，均占用CPU，会影响redis服务器响应时间和指令吞吐量 总结：用处理器性能换取存储空间 （拿时间换空间） 2.2 惰性删除数据到达过期时间，不做处理。等下次访问该数据时如果未过期，返回数据，如果发现已过期，删除，返回不存在。 优点：节约CPU性能，发现必须删除的时候才删除 缺点：内存压力很大，出现长期占用内存的数据 总结：用存储空间换取处理器性能（拿时间换空间） 2.3 定期删除Redis启动服务器初始化时，读取配置server.hz的值，默认为10 每秒钟执行server.hz次serverCron()-&gt;databasesCron()-&gt;activeExpireCycle()。 activeExpireCycle()对每个expires[*]逐一进行检测，每次执行250ms/server.hz 对某个expires[*]检测时，随机挑选W个key检测 如果key超时，删除key 如果一轮中删除的key的数量&gt;W*25%，循环该过程 如果一轮中删除的key的数量≤W25%，检查下一个expires[]，0-15循环 注意： W取值=ACTIVE_EXPIRE_CYCLE_LOOKUPS_PER_LOOP属性值 参数current_db用于记录activeExpireCycle():进入哪个expires[*] 执行 如果activeExpireCycle()执行时间到期，下次从current_db继续向下执行 特点： 周期性轮询redis库中的时效性数据，采用随机抽取的策略，利用过期数据占比的方式控制删除频度 特点1：CPU性能占用设置有峰值，检测频度可自定义设置 特点2：内存压力不是很大，长期占用内存的冷数据会被持续清理 总结：周期性抽查存储空间（随机抽查，重点抽查） 3 逐出算法Redis使用内存存储数据，在执行每一个命令前，会调用freeMemoryIfNeeded()检测内存是否充足。如果内存不满足新加入数据的最低存储要求，redis要临时删除一些数据为当前指令清理存储空间。清理数据的策略称为逐出算法。 注意：逐出数据的过程不是100%能够清理出足够的可使用的内存空间，如果不成功则反复执行。当对所有数据尝试完毕后，如果不能达到内存清理的要求，将出现错误信息。 (error) OOM command not allowed when used memory &gt;&#39;maxmemory&#39;3.1 相关配置 maxmemory：即redis最多能使用的物理内存的比例，默认值为0，表示不限制。生产环境中根据需求设定，通常设置在50%以上。 maxmemory-samples：每次选取待删除数据的个数。选取数据时并不会全库扫描，导致严重的性能消耗，降低读写性能。因此采用随机获取数据的方式作为待检测删除数据 maxmemory-policy：删除策略。 对于会过期的数据： volatile-lru：挑选最近最少使用的数据淘汰 volatile-lfu：挑选最近使用次数最少的数据淘汰 volatile-ttl：挑选将要过期的数据淘汰 volatile-random：任意选择数据淘汰检测全库数据： allkeys-lru：挑选最近最少使用的数据淘汰 allkeys-lfu：挑选最近使用次数最少的数据淘汰 allkeys-random：任意选择数据淘汰放弃数据驱逐： no-enviction（驱逐）：禁止驱逐数据（redis5.0中默认策略），会引发错误OOM（Out Of Memory） 通过指令info Stats可以看到缓存的命中次数和丢失次数。 4 Redis配置拓展 bind：绑定主机地址 databases：设置数据库的数量，默认16 4.1 日志配置 loglevel debug|verbose|notice|warning：设置服务器以指定日志记录级别，默认verbose logfile 端口号.log：日志记录文件名 4.2 客户端配置 maxclients 0：设置同一时间最大客户端连接数，默认无限制。当客户端连接达到上限，Redis会关闭新的连接。 timeout 300：客户端闲置等待最大时长，达到最大值后关闭连接。如需关闭此功能，设置为0。 4.3 多服务器快捷配置include *.conf：导入并加载指定配置文件信息，用于快速创建redis公共配置较多的redis实例配置文件，便于维护。","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"Redis","slug":"Redis","permalink":"https://www.codetool.top/tags/Redis/"}]},{"title":"leetcode46-全排列","slug":"leetcode46-全排列","date":"2020-03-02T18:54:23.000Z","updated":"2020-03-02T18:59:47.573Z","comments":true,"path":"article/leetcode46-全排列/","link":"","permalink":"https://www.codetool.top/article/leetcode46-%E5%85%A8%E6%8E%92%E5%88%97/","excerpt":"","text":"1 原题给定一个没有重复数字的序列，返回其所有可能的全排列。 示例: 输入: [1,2,3]输出:[&nbsp;&nbsp;[1,2,3],&nbsp;&nbsp;[1,3,2],&nbsp;&nbsp;[2,1,3],&nbsp;&nbsp;[2,3,1],&nbsp;&nbsp;[3,1,2],&nbsp;&nbsp;[3,2,1]] 2 解法2.1 思想做这道题的时候我才发现我做这类回溯算法的题还是蛮少的，对集合的浅复制api不是很熟悉。主要是浅复制真的蛮麻烦 -。-|| 思想就是回溯啦，可以用一个数组记录使用过了的元素。 2.2 代码class Solution { List&lt;List&lt;Integer>> ans = new ArrayList&lt;>(); int[] globalNums; public List&lt;List&lt;Integer>> permute(int[] nums) { int[] used = new int[nums.length]; globalNums = nums; List&lt;Integer> list = new ArrayList&lt;>(); trackback(list,used,0); return ans; } public void trackback(List&lt;Integer> list,int[] used,int usedCount){ if(usedCount==globalNums.length){ ans.add(list); } for(int i = 0;i&lt;globalNums.length;i++){ if(used[i]==0){ List&lt;Integer> copy = new ArrayList&lt;>(list); copy.add(globalNums[i]); int[] usedCopy = Arrays.copyOf(used,used.length); usedCopy[i] = 1; trackback(copy,usedCopy,usedCount+1); } } } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"回溯法","slug":"回溯法","permalink":"https://www.codetool.top/tags/%E5%9B%9E%E6%BA%AF%E6%B3%95/"}]},{"title":"Redis持久化方式RDB和AOF介绍","slug":"Redis持久化方式RDB和AOF介绍","date":"2020-03-02T14:58:43.000Z","updated":"2020-03-02T14:59:40.726Z","comments":true,"path":"article/Redis持久化方式RDB和AOF介绍/","link":"","permalink":"https://www.codetool.top/article/Redis%E6%8C%81%E4%B9%85%E5%8C%96%E6%96%B9%E5%BC%8FRDB%E5%92%8CAOF%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"1 持久化简介将内存中的数据隔段时间在硬盘中做备份，防止数据突然丢失 快照方法 RDB 日志方法 AOF 2 RDB2.1 启动方式2.1.1 指令：save 谁：redis操作者（用户） 什么时间：即时（随时进行） 干什么事情：保存数据 手动执行一次保存一次数据，产生在日志文件夹下的rdb文件(二进制) save指令会阻塞当前redis服务器，线上环境不推荐使用。 2.1.2 指令：bgsave 谁：redis操作者（用户）发起指令；redis服务器控制指令执行 什么时间：即时（发起）；合理的时间（执行） 干什么事情：保存数据 127.0.0.1:6379&gt; bgsave Background saving started原理：调用linux的fork函数生成子进程，由这个子进程负责创建rdb文件。 2.1.3 自动执行 谁：redis服务器发起指令（基于条件） 什么时间：满足条件 干什么事情：保存数据 发起的还是bgsave 配置： save second changes：满足限定时间范围内key的变化数量达到指定数量即进行持久化。 示例： save 900 1 save 300 10 save 60 10000 2.1.4 其他启动方式 全量复制 服务器运行过程中重启 debug reload 关闭服务器时指定保存数据 shutdown save 2.2 相关配置 dbfilename dump.rdb 说明：设置本地数据库文件名，默认值为 dump.rdb 经验：通常设置为dump-端口号.rdb dir 说明：设置存储.rdb文件的路径 经验：通常设置成存储空间较大的目录中，目录名称data rdbcompression yes 说明：设置存储至本地数据库时是否压缩数据，默认为 yes，采用 LZF 压缩 经验：通常默认为开启状态，如果设置为no，可以节省 CPU 运行时间，但会使存储的文件变大（巨大） rdbchecksum yes 说明：设置是否进行RDB文件格式校验，该校验过程在写文件和读文件过程均进行 经验：通常默认为开启状态，如果设置为no，可以节约读写性过程约10%时间消耗，但是存储一定的数据损坏风险 stop-writes-on-bgsave-error yes 说明：后台存储过程中如果出现错误现象，是否停止保存操作 经验：通常默认为开启状态 2.3 优点 RDB是一个紧凑压缩的二进制文件，存储效率较高 RDB内部存储的是redis在某个时间点的数据快照，非常适合用于数据备份，全量复制等场景 RDB恢复数据的速度要比AOF快很多 应用：服务器中每X小时执行bgsave备份，并将RDB文件拷贝到远程机器中，用于灾难恢复。 2.4 缺点 RDB方式无论是执行指令还是利用配置，无法做到实时持久化，具有较大的可能性丢失数据 bgsave指令每次运行要执行fork操作创建子进程，要牺牲掉一些性能 Redis的众多版本中未进行RDB文件格式的版本统一，有可能出现各版本服务之间数据格式无法兼容现象 3 AOF3.1 概述AOF（append-only-file）:以独立日志的方式记录每次写命令，重启时再重新执行AOF文件中命令达到恢复数据的目的。与RDB相比可以简单描述为改记录数据为记录数据产生的过程 AOF的主要作用是解决了数据持久化的实时性，目前已经是Redis持久化的主流方式 这个文件是一个文本文件 3.2 AOF写数据三种策略 always（每次）每次写入操作均同步到AOF文件中，数据零误差，性能较低，命令写入到aof_buf后，会调用系统fsync操作同步到文件中。 everysec（每秒）每秒将缓冲区中的指令同步到AOF文件中，数据准确性较高，性能较高，是默认配置。只调用系统write操作，fsync同步文件操作由专门进程每秒调用一次。在系统突然宕机的情况下丢失1秒内的数据 no（系统控制）由操作系统控制每次同步到AOF文件的周期，整体过程不可控，只调用系统write操作，不对AOF文件做fsync操作。 3.3 相关配置 appendonly yes|no 开启AOF appendfsync always|everysec|no 写数据策略 3.4 AOF重写随着命令不断写入AOF，文件会越来越大，为了解决这个问题，Redis引入了AOF重写机制压缩文件体积。AOF文件重写是将Redis进程内的数据转化为写命令同步到新AOF文件的过程。简单说就是将对同一个数据的若干个条命令执行结果转化成最终结果数据对应的指令进行记录。 3.4.1 作用 降低磁盘占用量，提高磁盘利用率 提高持久化效率，降低持久化写时间，提高IO性能 降低数据恢复用时，提高数据恢复效率 3.4.2 重写规则 进程内已超时的数据不再写入文件 忽略无效指令，重写时使用进程内数据直接生成，这样新的AOF文件只保留最终数据的写入命令如del key1、hdel key2、srem key3、set key4 111、set key4 222等 对同一数据的多条写命令合并为一条命令，如lpush list1 a、lpush list1 b、 lpush list1 c 可以转化为：lpush list1 a b c。 为防止数据量过大造成客户端缓冲区溢出，对list、set、hash、zset等类型，每条指令最多写入64个元素 3.4.3 重写方式手动重写：bgrewriteaof 自动重写： # aof_current_size达到最小size开始重写 auto-aof-rewrite-min-size size # (aof_current_size-aof_base_size)/aof_base_size>percentage开始重写 auto-aof-rewrite-percentage percentage 配置自动重写要了解两个参数： aof_current_size aof_base_sizeaof_current_size表示当前AOF文件大小，aof_base_size指的就是上一次重写后AOF文件的大小。这两个参数可以通过运行指令info Persistence查看。 原理和bgsave类似，也是用子进程去重写。 4 RDB与AOF区别 持久化方式 RDB AOF 占用存储空间 小（数据级：压缩） 大（指令级：重写） 存储速度 慢 快 恢复速度 快 慢 数据安全性 会丢失数据 依据策略决定 资源消耗 高/重量级 低/轻量级 启动优先级 低 高 如何选择？ 对数据非常敏感，建议使用默认的AOF持久化方案 AOF持久化策略使用everysecond，每秒钟fsync一次。该策略redis仍可以保持很好的处理性能，当出现问题时，最多丢失0-1秒内的数据。 注意：由于AOF文件存储体积较大，且恢复速度较慢 数据呈现阶段有效性，建议使用RDB持久化方案 数据可以良好的做到阶段内无丢失（该阶段是开发者或运维人员手工维护的），且恢复速度较快，阶段点数据恢复通常采用RDB方案 注意：利用RDB实现紧凑的数据持久化会使Redis降的很低，慎重总结： 综合比对 RDB与AOF的选择实际上是在做一种权衡，每种都有利有弊 如不能承受数分钟以内的数据丢失，对业务数据非常敏感，选用AOF 如能承受数分钟以内的数据丢失，且追求大数据集的恢复速度，选用RDB 灾难恢复选用RDB 双保险策略，同时开启 RDB 和 AOF，重启后，Redis优先使用 AOF 来恢复数据，降低丢失数据的量","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"Redis","slug":"Redis","permalink":"https://www.codetool.top/tags/Redis/"}]},{"title":"MySQL回顾-存储过程与触发器","slug":"MySQL回顾-存储过程与触发器","date":"2020-03-02T12:04:21.000Z","updated":"2020-03-04T13:00:00.501Z","comments":true,"path":"article/MySQL回顾-存储过程与触发器/","link":"","permalink":"https://www.codetool.top/article/MySQL%E5%9B%9E%E9%A1%BE-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E4%B8%8E%E8%A7%A6%E5%8F%91%E5%99%A8/","excerpt":"","text":"1 存储过程1.1 概述存储过程是一组为了完成特定功能的 SQL 语句集合。使用存储过程的目的是将常用或复杂的工作预先用 SQL 语句写好并用一个指定名称存储起来，这个过程经编译和优化后存储在数据库服务器中，因此称为存储过程。当以后需要数据库提供与已定义好的存储过程的功能相同的服务时，只需调用“CALL存储过程名字”即可自动完成。 一个存储过程是一个可编程的函数，它在数据库中创建并保存，一般由 SQL 语句和一些特殊的控制结构组成。当希望在不同的应用程序或平台上执行相同的特定功能时，存储过程尤为合适。 1.2 优点存储过程通常有如下优点： 封装性存储过程被创建后，可以在程序中被多次调用，而不必重新编写该存储过程的 SQL 语句，并且数据库专业人员可以随时对存储过程进行修改，而不会影响到调用它的应用程序源代码。 可增强 SQL 语句的功能和灵活性存储过程可以用流程控制语句编写，有很强的灵活性，可以完成复杂的判断和较复杂的运算。 可减少网络流量由于存储过程是在服务器端运行的，且执行速度快，因此当客户计算机上调用该存储过程时，网络中传送的只是该调用语句，从而可降低网络负载。 高性能存储过程执行一次后，产生的二进制代码就驻留在缓冲区，在以后的调用中，只需要从缓冲区中执行二进制代码即可，从而提高了系统的效率和性能。 提高数据库的安全性和数据的完整性使用存储过程可以完成所有数据库操作，并且可以通过编程的方式控制数据库信息访问的权限。 1.3 编写1.3.1 基本的存储过程CREATE PROCEDURE productpricing() BEGIN SELECT AVG(prod_price) as priceaverage FROM products; END; 创建名为 productpricing 的储存过程。如果存储过程中需要传递参数，则将他们在括号中列举出来即可。括号必须有。BEGIN 和 END 关键字用来限制存储过程体。上述存储过程体本身是一个简单的 select 语句。注意这里只是创建存储过程并没有进行调用。 储存过程的使用：Call productpring(); 1.3.2 使用参数的存储过程一般存储过程并不显示结果，而是把结果返回给你指定的变量上。 变量：内存中一个特定的位置，用来临时存储数据。 CREATE PROCEDURE prod( OUT pl DECIMAL(8,2), OUT ph DECIMAL(8,2), OUT pa DECIMAL(8,2) ) BEGIN SELECT MIN(prod_price) INTO pl FROM products; SELECT MAX(prod_price) INTO ph FROM products; SELECT AVG(prod_price) INTO pa FROM products; END; 关键字 OUT 指出相应的参数用来从存储过程传出一个值(返回给调用者)。 MySQL 支持 in(传递给存储过程)、out(从存储过程传出，这里所用)和 inout(对存储过程传入和传出)类型的参数。存储过程的代码位于 begin 和 end 语句内。他们是一系列 select 语句，用来检索值。然后保存到相对应的变量(通过 INTO 关键字)。存储过程的参数允许的数据类型与表中使用的类型相同。注意记录集是不被允许的类型，因此，不能通过一个参数返回多个行和列，这也是上面为什么要使用 3 个参数和 3 条 select语句的原因。 使用： call PROCEDURE(@pricelow,@pricehigh,@priceaverage); select @pricelow; select @pricehigh; select @pricelow,@pricehigh,@priceaverage; 为调用此存储过程，必须指定 3 个变量名。如上所示。3 个参数是存储过程保存结果的 3 个变量的名字。调用时，语句并不显示任何数据，它返回以后可以显示的变量(或在其他处理中使用)。 注意：所有的 MySQL 变量都是以@开头。 使用IN的示例： CREATE PROCEDURE ordertotal( IN innumber int, OUT outtotal decimal(8,2) ) BEGIN SELECT Sum(item_price * quantity) FROM orderitems WHERE order_num = innumber INTO outtotal; END; CALL ordertotal(20005,@total); select @total; // 得到 20005 订单的合计 CALL ordertotal(20009,@total); select @total; //得到 20009 订单的合计 1.3.3 带有控制语句的存储过程CREATE PROCEDURE ordertotal( IN onumber INT, IN taxable BOOLEAN, OUT ototal DECIMAL(8,2) ) COMMENT 'Obtain order total, optionally adding tax' BEGIN -- declear variable for total DECLARE total DECIMAL(8,2); -- declear tax percentage DECLARE taxrate INT DEFAULT 6; -- get the order total SELECT Sum(item_price * quantity) FROM orderitems WHERE order_num = onumber INTO total; -- IS this taxable? IF taxable THEN -- yes ,so add taxrate to the total SELECT total+(total/100*taxrate)INTO total; END IF; -- finally ,save to out variable SELECT total INTO ototal; END; 在存储过程中我们使用了 DECLARE 语句，他们表示定义两个局部变量，DECLARE 要求指定变量名和数据类型。它也支持可选的默认值(taxrate 默认 6%)，因为后期我们还要判断要不要增加税，所以，我们把 SELECT 查询的结果存储到局部变量 total 中，然后在 IF 和 THEN 的配合下，检查 taxable 是否为真，然后在真的情况下，我们利用另一条 SELECT 语句增加营业税到局部变量 total 中，然后我们再利用 SELECT 语句将 total(增加税或者不增加税的结果)保存到总的 ototal 中。 上面的 COMMENT 关键字可以给出或者不给出，如果给出，将在 SHOW PROCEDURE STATUS 的结果中显示。 所有语法： 变量相关： DECLARE var_name[,...] type [DEFAULT value]：声明变量 SET var_name = expr [, var_name = expr] ...：变量赋值 select ... into var_name：将查询的结果赋值给变量 分支循环： if_then elseif_then else_then if search_condition then statement_list [elseif search_condition then statement_list] ... [else statement_list] end if; case CASE case_value WHEN when_value THEN statement_list [WHEN when_value THEN statement_list] ... [ELSE statement_list] END CASE; while while search_condition do statement_list end while; repeat while 是满足条件才执行，repeat 是满足条件就退出循环。 REPEAT statement_list UNTIL search_condition END REPEAT; loop 通常配合leave语句退出循环，也可以死循环 [begin_label:] LOOP statement_list END LOOP [end_label] leave 退出循环 CREATE PROCEDURE pro_test11(n int) BEGIN declare total int default 0; ins: LOOP IF n &lt;= 0 then leave ins; END IF; set total = total + n; set n = n - 1; END LOOP ins; select total; END$ 1.3.4 使用游标的存储过程游标是用来存储查询结果集的数据类型 , 在存储过程和函数中可以使用光标对结果集进行循环的处理。光标的使用包括光标的声明、OPEN、FETCH 和 CLOSE，其语法分别如下。 声明光标： DECLARE cursor_name CURSOR FOR select_statement ; 代表这个变量是一个cursor类型，对应的是select_statement语句的结果集。 OPEN 光标： OPEN cursor_name ; FETCH 光标： FETCH cursor_name INTO var_name [, var_name] ... CLOSE 光标： CLOSE cursor_name ; 实例： -- 查询emp表中数据, 并逐行获取进行展示 DELIMITER $ create procedure pro_test12() begin DECLARE id int(11); DECLARE name varchar(50); DECLARE age int(11); DECLARE salary int(11); DECLARE has_data int default 1; DECLARE emp_result CURSOR FOR select * from emp; DECLARE EXIT HANDLER FOR NOT FOUND set has_data = 0; open emp_result; repeat fetch emp_result into id , name , age , salary; select concat('id为',id, ', name 为' ,name , ', age为 ' ,age , ', 薪水为: ', salary); until has_data = 0 end repeat; close emp_result; end$ DELIMITER ; 通过DECLARE EXIT HANDLER FOR NOT FOUND set has_data = 0;相当于在光标获取不到下一行的时候给has_data赋值为0。 1.4 修改存储过程MySQL 中修改存储过程的语法格式如下： ALTER PROCEDURE 存储过程名 [ 特征 ... ] 特征指定了存储过程的特性，可能的取值有： CONTAINS SQL 表示子程序包含 SQL 语句，但不包含读或写数据的语句。 NO SQL 表示子程序中不包含 SQL 语句。 READS SQL DATA 表示子程序中包含读数据的语句。 MODIFIES SQL DATA 表示子程序中包含写数据的语句。 SQL SECURITY { DEFINER |INVOKER } 指明谁有权限来执行。 DEFINER 表示只有定义者自己才能够执行。 INVOKER 表示调用者可以执行。 COMMENT &#39;string&#39; 表示注释信息。 ALTER PROCEDURE showstuscore MODIFIES SQL DATA SQL SECURITY INVOKER; 提示：ALTER PROCEDURE 语句用于修改存储过程的某些特征。如果要修改存储过程的内容，可以先删除原存储过程，再以相同的命名创建新的存储过程；如果要修改存储过程的名称，可以先删除原存储过程，再以不同的命名创建新的存储过程。 1.5 删除存储过程MySQL 中使用 DROP PROCEDURE 语句来删除数据库中已经存在的存储过程。语法格式如下： DROP { PROCEDURE | FUNCTION } [ IF EXISTS ] &lt;过程名&gt; IF EXISTS：指定这个关键字用于防止因删除不存在的存储过程而引发的错误。 2 触发器2.1 概述MySQL 数据库中触发器是一个特殊的存储过程，不同的是执行存储过程要使用 CALL 语句来调用，而触发器的执行不需要使用 CALL 语句来调用，也不需要手工启动，只要一个预定义的事件发生就会被 MySQL自动调用。 触发程序的优点如下： 触发程序的执行是自动的，当对触发程序相关表的数据做出相应的修改后立即执行。 触发程序可以通过数据库中相关的表层叠修改另外的表。 触发程序可以实施比 FOREIGN KEY 约束、CHECK 约束更为复杂的检查和操作。 在 MySQL 中，只有执行 INSERT、UPDATE 和 DELETE 操作时才能激活触发器。 2.2 创建触发器在创建触发器时，需要给出 4 条语句（规则）： 唯一的触发器名； 触发器关联的表； 触发器应该响应的活动； 触发器何时执行(处理之前或者之后) CREATE TRIGGER newproduct AFTER INSERT ON products FOR EACH ROW SELECT 'Product added' INTO @info; CREATE TRIGGER 用来创建名为 newproduct 的新触发器。触发器可以在一个操作发生前或者发生后执行，这里 AFTER INSERT 是指此触发器在 INSERT 语句成功执行后执行。这个触发器还指定 FOR EACH ROW ， 因此代码对每个插入行都会执行。文本 Product added 将对每个插入的行显示一次 2.3 INSERT 触发器是在 insert 语句执行之前或者执行之后被执行的触发器。 在 insert 触发器代码中，可引入一个名为 new 的虚拟表，访问被插入的行（普通插入语句之后也存在这个表） 在 before insert 触发器中，new 中的值也可以被更新(允许更改被插入的值) 对于 auto_increment 列，new 在 insert 执行之前包含 0，在 insert 执行之后包含新的自动生成值 CREATE TRIGGER neworder AFTER INSERT ON orders FOR EACH ROW SELECT NEW.order_num; 该语句创建一个名为 neworder 的触发器，按照 AFTER INSERT ON orders 执行。在插入一个新订单到 orders 表时，MySQL 生成一个新的订单号并保存到 order_num 中。触发器从NEW.order_num 取得这个值并返回它。此触发器必须按照 AFTER INSERT 执行，因为在BEFORE INSERT 语句执行之前，新 order_num 还没有生成。 对于 orders 的每次插入使用这个触发器总是返回新的订单号。 2.4 DELETE 触发器Delete 触发器在 delete 语句执行之前或者之后执行。 在 delete 触发器的代码内,可以引用一个名为 OLD 的虚拟表，用来访问被删除的行。 OLD 中的值全为只读，不能更新。 CREATE TRIGGER deleteorder BEFORE DELETE ON orders FOR EACH ROW BEGIN INSERT INTO archive_orders(order_num,order_date,cust_id) values (OLD.order_num,OLD.order_date,OLD.cust_id); END; 在任意订单被删除前将执行此触发器，它使用一条 INSERT 语句将 OLD 中的值(要被删除的订单) 保存到一个名为 archive_orders 的存档表中(为实际使用这个例子，我们需要用与orders 相同的列创建一个名为 archive_orders 的表) 使用 BEFORE DELETE 触发器的优点(相对于 AFTER DELETE 触发器来说)为，如果由于某种原因，订单不能存档，delete 本身将被放弃。 我们在这个触发器使用了 BEGIN 和 END 语句标记触发器体。这在此例子中并不是必须的，只是为了说明使用BEGIN END 块的好处是触发器能够容纳多条SQL 语句(在BEGIN END块中一条挨着一条)。 2.5 UPDATE 触发器在 update 语句执行之前或者之后执行 在 update 触发器的代码内,可以引用一个名为 OLD 的虚拟表，用来访问以前(UPDATE 语句之前)的值，引用一个名为 NEW 的虚拟表访问新更新的值。 在 BEFORE UPDATE 触发器中，NEW 中的值可能也被用于更新(允许更改将要用于 UPDATE语句中的值) OLD 中的值全为只读，不能更新。 CREATE TRIGGER updatevendor BEFORE UPDATE ON vendors FOR EACH ROW SET NEW.vend_state = Upper(NEW.vemd_state); 保证州名缩写总是大写(不管 UPFATE 语句中是否给出了大写)，每次更新一行时，NEW.vend_state 中的值(将用来更新表行的值)都用 Upper(NEW.vend_state)替换。 2.6 总结 与其他 DBMS 相比，MySQL 5 中支持的触发器相当初级，未来的 MySQL 版本中估计会存在一些改进和增强触发器的支持。 通常 before 用于数据的验证和净化(为了保证插入表中的数据确实是需要的数据) 也适用于 update 触发器。 创建触发器可能需要特殊的安全访问权限，但是触发器的执行时自动的，如果 insert，update，或者 delete 语句能够执行，则相关的触发器也能执行。 用触发器来保证数据的一致性(大小写，格式等)。在触发器中执行这种类型的处理的优点就是它总是进行这种处理，而且透明的进行，与客户机应用无关。 触发器的一种非常有意义的使用就是创建审计跟踪。使用触发器，把更改(如果需要，甚至还有之前和之后的状态)记录到另外一个表是非常容易的。 MySQL 触发器不支持 call 语句，无法从触发器内调用存储过程。 总体来说，触发器使用的过程中，MySQL 会按照以下方式来处理错误。 若对于事务性表，如果触发程序失败，以及由此导致的整个语句失败，那么该语句所执行的所有更改将回滚；对于非事务性表，则不能执行此类回滚，即使语句失败，失败之前所做的任何更改依然有效。 若 BEFORE 触发程序失败，则 MySQL 将不执行相应行上的操作。 若在 BEFORE 或 AFTER 触发程序的执行过程中出现错误，则将导致调用触发程序的整个语句失败。 仅当 BEFORE 触发程序和行操作均已被成功执行，MySQL 才会执行AFTER触发程序。","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"https://www.codetool.top/tags/MySQL/"}]},{"title":"MySQL回顾-约束、常用函数和视图","slug":"MySQL回顾-约束、常用函数和视图","date":"2020-03-02T10:35:41.000Z","updated":"2020-03-02T15:04:04.361Z","comments":true,"path":"article/MySQL回顾-约束、常用函数和视图/","link":"","permalink":"https://www.codetool.top/article/MySQL%E5%9B%9E%E9%A1%BE-%E7%BA%A6%E6%9D%9F%E3%80%81%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E5%92%8C%E8%A7%86%E5%9B%BE/","excerpt":"","text":"1 约束 主键约束：不允许重复记录，避免数据冗余 外键约束：保证本事务所关联的其他事务是存在的（主键表中的这个字段） 实际开发中通常不使用外键约束，影响效率。 check约束：限制值在某一个范围之内 default约束： 确定默认值( 可以更改) 保证事务的某个属性一定会有一个值 unique约束：唯一键，不可重复，但允许为空 unique 和 not null 可以组合使用，顺序任意。 主键和唯一键的关系：不要用业务逻辑字段当做主键，应添加一个没有任何实际意义的字段（代理主键）当做主键。 not null约束 要求用户必须为该字段赋一个值，否则出错 2 MySQL常用函数2.1 文本处理函数 LEFT(x,len) 返回串左边指定长度的字串（长度为 len） RIGHT(x,len) 返回串右边指定长度的字串（长度为 len） LENGTH(x)/CHAR_LENGTH(str) – 返回串的长度 LOCATE(x,sub_x) – 找出串的一个子串 SUBSTRING(x, from, to) 返回子字符串 LOWER(x) 全部转小写 UPPER(x) 全部转大写 LTRIM(x) 左边所有的空格被删除 RTRIM(x) 右边所有的空格被删除 TRIM(x) 删除两边的空格 CONCAT(s1,s2…sn) 字符串 s1,s2 等多个字符串合并为一个字符串 2.2 日期时间处理函数 CURDATE()/CURRENT_DATE() 返回当前日期，格式2019-02-19 CURTIME()/CURRENT_TIME() 返回当前时间，格式11:40:45 CURRENT_TIMESTAMP() 返回当前日期和时间，格式2019-02-19 11:41:32 ADDDATE(d,n) 计算起始日期 d 加上 n 天的日期 ADDTIME(t,n) 时间 t 加上 n 秒的时间 DATE(str) 从日期或日期时间表达式中提取日期值 DAY(d) 返回日期值 d 的日期部分，也可以使用EXTRACT(type FROM d) type可以取MONTH,DAY,HOUR,MINUTE等 DATEDIFF(d1,d2) 计算日期d1-&gt;d2之间相隔的天数 DATE_FORMAT(d,f) DATE_FORMAT按表达式 f的要求显示日期 d DAYOFMONTH(d) 计算日期 d 是本月的第几天 DAYOFWEEK(d) 日期 d 今天是星期几，1 星期日，2 星期一，以此类推 DAYOFYEAR(d) 计算日期 d 是本年的第几天 UNIX_TIMESTAMP() 得到时间戳 FROM_UNIXTIME() 时间戳转日期 2.3 数值处理函数 ABS(x) 返回绝对值 AVG(expression) 返回一个表达式的平均值，expression是一个字段 EXP(x) 返回e的x次方 CEIL(x)/FLOOR(x) 向上取整、向下取整 MOD()（取余） PI() 圆周率 RAND() 返回0到1的随机数 SQRT(x) 返回x的平方根 ROUND(x) 返回离 x 最近的整数 3 视图视图是虚拟的表，与包含数据的表不同，视图只包含使用时动态检索数据的查询,主要是用于查询。 3.1 为什么使用视图 重用 sql 语句 简化复杂的 sql 操作，在编写查询后，可以方便地重用它而不必知道他的基本查询细节。 使用表的组成部分而不是整个表。 保护数据。可以给用户授予表的特定部分的访问权限而不是整个表的访问权限。 更改数据格式和表示。视图可返回与底层表的表示和格式不同的数据。 注意： 在视图创建之后，可以用与表基本相同的方式利用它们。可以对视图执行 select 操作，过滤和排序数据，将视图联结到其他视图或表，甚至能添加和更新数据。 重要的是知道视图仅仅是用来查看存储在别处的数据的一种设施。视图本身不包含数据，因此它们返回的数据时从其他表中检索出来的。在添加和更改这些表中的数据时，视图将返回改变过的数据。 因为视图不包含数据，所以每次使用视图时，都必须处理查询执行时所需的任一检索。如果你使用多个连接和过滤创建了复杂的视图或者嵌套了视图，可能会发现性能下降得很厉害。因此，在部署使用了大量视图的应用前，应该进行测试。 3.2 视图的规则和限制 与表一样，视图必须唯一命名； 可以创建任意多的视图； 为了创建视图，必须具有足够的访问权限。这些限制通常由数据库管理人员授予。 视图可以嵌套，可以利用从其他视图中检索数据的查询来构造一个视图。 Order by 可以在视图中使用，但如果从该视图检索数据 select 中也是含有 order by，那么该视图的 order by 将被覆盖。 视图不能索引，也不能有关联的触发器或默认值 视图可以和表一起使用 3.3 视图操作的SQL语句 利用 create view view_name as 查询语句 语句来进行创建视图 使用 show create view view_name 来查看创建视图的语句 用 drop view view_name 来删除视图 更新视图可以先 drop 再 create，也可以使用 create or replace view_name as ...。 3.4 视图的更新视图是否可以更新，要视情况而定。 通常情况下视图是可以更新的，可以对他们进行 insert，update 和 delete。更新视图就是更新其基表(视图本身没有数据)。如果你对视图进行增加或者删除行，实际上就是对基表进行增加或者删除行。 但是，如果 MySQL 不能正确的确定更新的基表数据，则不允许更新(包括插入和删除)，这就意味着视图中如果存在以下操作则不能对视图进行更新： 分组(使用 group by 和having ) 联结 子查询 并 聚集函数 dictinct 导出(计算)列 不推荐更改视图，会使得业务逻辑混淆。","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"https://www.codetool.top/tags/MySQL/"}]},{"title":"leetcode35-搜索插入位置","slug":"leetcode35-搜索插入位置","date":"2020-03-01T17:09:30.000Z","updated":"2020-03-01T17:11:17.677Z","comments":true,"path":"article/leetcode35-搜索插入位置/","link":"","permalink":"https://www.codetool.top/article/leetcode35-%E6%90%9C%E7%B4%A2%E6%8F%92%E5%85%A5%E4%BD%8D%E7%BD%AE/","excerpt":"","text":"1 原题给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。 你可以假设数组中无重复元素。 示例 1: 输入: [1,3,5,6], 5输出: 2 示例 2: 输入: [1,3,5,6], 2输出: 1 示例 3: 输入: [1,3,5,6], 7输出: 4 示例 4: 输入: [1,3,5,6], 0输出: 0 2 解法2.1 思想二分查找 2.2 代码class Solution { public int searchInsert(int[] nums, int target) { int left = 0; int right = nums.length; int mid; while(left&lt;right-1){ mid = (left+right)/2; if(nums[mid] == target) return mid; else if(nums[mid] &lt; target) left = mid; else if(nums[mid] > target) right = mid; } if(nums[left]>=target) return left; return left+1; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"Redis通用指令和Jedis使用","slug":"Redis通用指令和Jedis使用","date":"2020-03-01T15:48:46.000Z","updated":"2020-03-02T14:59:11.948Z","comments":true,"path":"article/Redis通用指令和Jedis使用/","link":"","permalink":"https://www.codetool.top/article/Redis%E9%80%9A%E7%94%A8%E6%8C%87%E4%BB%A4%E5%92%8CJedis%E4%BD%BF%E7%94%A8/","excerpt":"","text":"1 key通用指令常用操作 del key 删除指定key exists key 获取key是否存在 type key 获取key的类型 key 时效性控制 expire key seconds 设置过期时间 pexpire key milliseconds （毫秒版） expireat key timestamp（使用时间戳版） pexpireat key milliseconds-timestamp ttl key 获取过期时间（不存在返回-2，永久返回-1） pttl key （毫秒版） persist key 将key从时效性转换为永久性 key 查询操作 keys pattern：查询符合条件的所有key，pattern的规则： *匹配任意数量的任意符号 ?匹配一个任意符号 []匹配括号内的任意一个符号 key 其他操作 renane key newkey 重命名key renamenx key newkey 如果新名字不存在才会重命名 sort 对集合中所有value排序，只能排list或set 2 数据库通用操作redis为每个服务提供有16个数据库，编号从0到15，每个数据库之间的数据相互独立 select index 切换数据库 move key db 将某个键移入其他数据库中 dbsize 当前db键的个数 flushdb 清空当前数据库 flushall 清空所有数据库 3 Jedis3.1 基本使用方法名和指令名一致。 //1.连接redis Jedis jedis = new Jedis(\"127.0.0.1\", 6379); //2.操作redis jedis.set(\"name\",\"rhett\"); String name = jedis.get(\"name\"); System.out.println(name); //3.关闭连接 jedis.close(); 注意方法的返回值 //1.连接redis Jedis jedis = new Jedis(\"127.0.0.1\", 6379); //2.操作redis //字符串 jedis.set(\"name\",\"rhett\"); String name = jedis.get(\"name\"); //list jedis.lpush(\"list1\",\"a\",\"b\",\"c\"); jedis.rpush(\"list1\",\"d\"); List&lt;String> list1 = jedis.lrange(\"list1\", 0, -1); list1.forEach(e-> System.out.println(e)); //set jedis.hset(\"hash1\",\"a1\",\"a1\"); jedis.hset(\"hash1\",\"a2\",\"a2\"); jedis.hset(\"hash1\",\"a3\",\"a3\"); //hash Map&lt;String, String> hash1 = jedis.hgetAll(\"hash1\"); hash1.forEach((k,v)-> System.out.println(k+\":\"+v)); Set&lt;String> keys = jedis.keys(\"*\"); keys.forEach(e-> System.out.println(e)); //set jedis.sadd(\"set1\",\"50\"); jedis.sadd(\"set1\",\"10\"); jedis.sadd(\"set1\",\"30\"); Set&lt;String> set1 = jedis.smembers(\"set1\"); set1.forEach(e-> System.out.println(e)); //3.关闭连接 jedis.close(); incr操作返回的是Long 3.2 连接池JedisPool:Jedis提供的连接池技术 基于连接池的工厂类的编写： public class JedisUtils { private static JedisPool jp = null; private static String host; private static int port; private static int maxTotal; private static int maxIdle; static { ResourceBundle rb = ResourceBundle.getBundle(\"redis\"); host = rb.getString(\"redis.host\"); port = Integer.parseInt(rb.getString(\"redis.port\")); maxTotal = Integer.parseInt(rb.getString(\"redis.maxTotal\")); maxIdle = Integer.parseInt(rb.getString(\"redis.maxIdle\")); JedisPoolConfig jpc = new JedisPoolConfig(); jpc.setMaxTotal(maxTotal); jpc.setMaxIdle(maxIdle); jp = new JedisPool(jpc,host,port); } public static Jedis getJedis(){ return jp.getResource(); } } redis.properties: redis.host=127.0.0.1 redis.port=6379 redis.maxTotal=30 redis.maxIdle=10 4 Redis可视化管理工具Redis Desktop Manager","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"Redis","slug":"Redis","permalink":"https://www.codetool.top/tags/Redis/"}]},{"title":"蓝桥杯试题-翻硬币","slug":"蓝桥杯试题-翻硬币","date":"2020-03-01T14:36:17.000Z","updated":"2020-03-01T14:39:44.897Z","comments":true,"path":"article/蓝桥杯试题-翻硬币/","link":"","permalink":"https://www.codetool.top/article/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98-%E7%BF%BB%E7%A1%AC%E5%B8%81/","excerpt":"","text":"1 原题资源限制 时间限制：1.0s 内存限制：256.0MB 问题描述 小明正在玩一个“翻硬币”的游戏。 桌上放着排成一排的若干硬币。我们用 * 表示正面，用 o 表示反面（是小写字母，不是零）。 比如，可能情形是：**oo***oooo 如果同时翻转左边的两个硬币，则变为：oooo***oooo 现在小明的问题是：如果已知了初始状态和要达到的目标状态，每次只能同时翻转相邻的两个硬币,那么对特定的局面，最少要翻动多少次呢？ 我们约定：把翻动相邻的两个硬币叫做一步操作，那么要求： 输入格式 两行等长的字符串，分别表示初始状态和要达到的目标状态。每行的长度&lt;1000 输出格式 一个整数，表示最小操作步数。 样例输入1 **********o****o**** 样例输出1 5 样例输入2 *o**o***o****o***o**o*** 样例输出2 1 2 解法2.1 思想如果翻动的次数最少，一定是从左翻到右，这道题符合贪心法 2.2 代码import java.util.*; public class Main{ public static void main(String[] args) { Scanner scanner = new Scanner(System.in); char[] source = scanner.next().toCharArray(); char[] target = scanner.next().toCharArray(); int ans = 0; for(int i = 0;i&lt;source.length;i++){ if(source[i]!=target[i]){ if(source[i]=='*')source[i] = 'o'; else if(source[i]=='o')source[i] = '*'; if(source[i+1]=='*')source[i+1] = 'o'; else if(source[i+1]=='o')source[i+1] = '*'; ans++; } } System.out.println(ans); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"贪心法","slug":"贪心法","permalink":"https://www.codetool.top/tags/%E8%B4%AA%E5%BF%83%E6%B3%95/"},{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"https://www.codetool.top/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"}]},{"title":"蓝桥杯试题-哈夫曼树","slug":"蓝桥杯试题-哈夫曼树","date":"2020-03-01T14:28:31.000Z","updated":"2020-03-01T14:32:29.494Z","comments":true,"path":"article/蓝桥杯试题-哈夫曼树/","link":"","permalink":"https://www.codetool.top/article/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98-%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/","excerpt":"","text":"1 原题Description Huffman树在编码中有着广泛的应用。在这里，我们只关心Huffman树的构造过程。 给出一列数{pi}={p0, p1, …, pn-1}，用这列数构造Huffman树的过程如下： 找到{pi}中最小的两个数，设为pa和pb，将pa和pb从{pi}中删除掉，然后将它们的和加入到{pi}中。这个过程的费用记为pa+ pb。 重复步骤1，直到{pi}中只剩下一个数。 在上面的操作过程中，把所有的费用相加，就得到了构造Huffman树的总费用。 本题任务：对于给定的一个数列，现在请你求出用该数列构造Huffman树的总费用。 例如，对于数列{pi}={5, 3, 8, 2, 9}，Huffman树的构造过程如下： 找到{5, 3, 8, 2, 9}中最小的两个数，分别是2和3，从{pi}中删除它们并将和5加入，得到{5, 8, 9, 5}，费用为5。 找到{5, 8, 9, 5}中最小的两个数，分别是5和5，从{pi}中删除它们并将和10加入，得到{8, 9, 10}，费用为10。 找到{8, 9, 10}中最小的两个数，分别是8和9，从{pi}中删除它们并将和17加入，得到{10, 17}，费用为17。 找到{10, 17}中最小的两个数，分别是10和17，从{pi}中删除它们并将和27加入，得到{27}，费用为27。 现在，数列中只剩下一个数27，构造过程结束，总费用为5+10+17+27=59。 Input 输入的第一行包含一个正整数n（n&lt;=100）。 接下来是n个正整数，表示p0, p1, …, pn-1，每个数不超过1000。 Output 输出用这些数构造Huffman树的总费用。 Sample Input 1 55 3 8 2 9 Sample Output 1 59 Hint HINT:时间限制：1.0s 内存限制：512.0MB 2 解法2.1 思想用一个最小堆，每次弹出两个两个最小数然后把和再放入堆中。 2.2 代码import java.util.*; public class Main{ public static void main(String[] args) { Scanner scanner = new Scanner(System.in); int count = scanner.nextInt(); Queue&lt;Integer> queue = new PriorityQueue&lt;>(); for(int i = 0;i&lt;count;i++){ queue.add(scanner.nextInt()); } int sum = 0; while(queue.size()!=1){ int cost = queue.poll()+queue.poll(); sum += cost; queue.offer(cost); } System.out.println(sum); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"堆","slug":"堆","permalink":"https://www.codetool.top/tags/%E5%A0%86/"},{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"https://www.codetool.top/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"}]},{"title":"leetcode99-恢复二叉搜索树","slug":"leetcode99-恢复二叉搜索树","date":"2020-03-01T08:33:53.000Z","updated":"2020-03-01T09:16:59.194Z","comments":true,"path":"article/leetcode99-恢复二叉搜索树/","link":"","permalink":"https://www.codetool.top/article/leetcode99-%E6%81%A2%E5%A4%8D%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/","excerpt":"","text":"1 原题二叉搜索树中的两个节点被错误地交换。 请在不改变其结构的情况下，恢复这棵树。 示例 1: 输入: [1,3,null,null,2] &nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;/&nbsp;3&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;2 输出: [3,1,null,null,2] &nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;/&nbsp;1&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;2 示例 2: 输入: [3,1,4,null,null,2] &nbsp;&nbsp;3&nbsp;/&nbsp;\\1&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;2 输出: [2,1,4,null,null,3] &nbsp;&nbsp;2&nbsp;/&nbsp;\\1&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;3 进阶: 使用 O(n) 空间复杂度的解法很容易实现。 你能想出一个只使用常数空间的解决方案吗？ 2 解法2.1 思想这道题可以使用中序遍历得到一个序列，这个序列的特征是一个有序序列中的两个元素被交换了，那么问题就变成如何找到这两个元素。 看一个例子： 1 2 8 6 7 4 9 ，有序序列中的两个元素被交换了一定会造成一个较大的元素交换到了前面(8)，一个较小的元素交换到了后面(4)，体现在序列中就是两个异常的情况：6比8小，4比7小。所以可以判断：第一次出现的某节点比前驱节点的值要小的情况，前驱节点就是一个被交换了的节点，而第二次出现的某节点比前驱节点的值要小的情况，该节点就是第二个被交换了的节点。 而还有一种可能是，两个连续的元素被交换了，如：1 3 2 4，出现的情况就是只出现一次某节点比前驱节点的值要小的情况，那么两个被交换的节点就分别是当前节点(2)和其前驱节点(3)。 找到了这两个节点，就可以使用值交换将二叉搜索树恢复回来。 2.2 代码递归中序遍历： class Solution { TreeNode pred; TreeNode former,latter; public void recoverTree(TreeNode root) { recurTree(root); int cache = former.val; former.val = latter.val; latter.val = cache; } public void recurTree(TreeNode root){ if(root == null) return; recurTree(root.left); if(pred == null) pred = root; else if(root.val &lt; pred.val) { if(former == null) former = pred; latter = root; } pred = root; recurTree(root.right); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"搜索树","slug":"搜索树","permalink":"https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"剑指offer46-把数字翻译成字符串","slug":"剑指offer46-把数字翻译成字符串","date":"2020-02-29T15:55:26.000Z","updated":"2020-02-29T16:05:26.460Z","comments":true,"path":"article/剑指offer46-把数字翻译成字符串/","link":"","permalink":"https://www.codetool.top/article/%E5%89%91%E6%8C%87offer46-%E6%8A%8A%E6%95%B0%E5%AD%97%E7%BF%BB%E8%AF%91%E6%88%90%E5%AD%97%E7%AC%A6%E4%B8%B2/","excerpt":"","text":"1 原题给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。 示例1: 输入： 12258输出： 5解释： 12258有5种不同的翻译，分别是”bccfi”, “bwfi”, “bczi”, “mcfi”和”mzi” 提示: 0 &lt;= num &lt; 231 2 解法2.1 思想动态规划： 可以使用leetcode70-爬楼梯的思想，每次翻译一位数看成跳一步，翻译两位数看成跳两步，那么对于任意要跳的一个位置来说，例如12258中的8，由于最后两位是58不能翻译，也就是只能由1225跳过来，此时f(12258)==f(1225)，而对于1225，由于最后两位是25可以翻译，所以可以从12跳过来，也可以从122跳过来，此时f(1225) == f(12)+f(122)。将这两种情况一般化就能得出结论： 2.2 代码class Solution { public int translateNum(int num) { if(num == 0) return 1; if(num &lt; 10) return 1; int left = num%10; //去除最后一位数的last int last = num/=10; //计算出最后两位数的大小 left = 10*(num%10)+left; //去除最后两位数的lastOfLast int lastOfLast = num /= 10; if(left>25||left&lt;10) return translateNum(last); else return translateNum(last)+translateNum(lastOfLast); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"https://www.codetool.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"},{"name":"剑指offer","slug":"剑指offer","permalink":"https://www.codetool.top/tags/%E5%89%91%E6%8C%87offer/"}]},{"title":"Redis概述和使用","slug":"Redis概述和使用","date":"2020-02-29T14:50:38.000Z","updated":"2020-03-02T14:59:20.773Z","comments":true,"path":"article/Redis概述和使用/","link":"","permalink":"https://www.codetool.top/article/Redis%E6%A6%82%E8%BF%B0%E5%92%8C%E4%BD%BF%E7%94%A8/","excerpt":"","text":"1 NoSQLnot only SQL 优势： High Performance Huge Storage High Scalability &amp; High Availibility 类型 部分代表 特点 列存储 Hbase Cassandra Hypertable 顾名思义，是按列存储数据的。最大的特点是方便存储结构化和半结构化数据，方便做数据压缩，对针对某一列或者某几列的查询有非常大的IO优势。 文档存储 MongoDB CouchDB 文档存储一般用类似json的格式存储，存储的内容是文档型的。这样也就有有机会对某些字段建立索引，实现关系数据库的某些功能。 key-value存储 Tokyo&nbsp;Cabinet/Tyrant Berkeley&nbsp;DB MemcacheDB Redis 可以通过key快速查询到其value。一般来说，存储不管value的格式，照单全收。（Redis包含了其他功能） 图存储 Neo4J FlockDB 图形关系的最佳存储。使用传统关系数据库来解决的话性能低下，而且设计使用不方便。 对象存储 db4o Versant 通过类似面向对象语言的语法操作数据库，通过对象的方式存取数据。 xml数据库 Berkeley DB XML BaseX 高效的存储XML数据，并支持XML的内部查询语法，比如XQuery,Xpath。 2 Redis概述Redis是一种键值对数据库。 2.1 特征 数据间没有必然的关联关系 内部采用单线程机制进行工作 高性能。官方提供测试数据，50个并发执行100000 个请求,读的速度是110000 次/s,写的速度是81000次/s。 多数据类型支持 字符串类型 string 列表类型 list 散列类型 hash 集合类型 set 有序集合类型 sorted_set 持久化支持。可以进行数据灾难恢复 2.2 应用 为热点数据加速查询（主要场景），如热点商品、热点新闻、热点资讯、推广类等高访问量信息等 任务队列，如秒杀、抢购、购票排队等 即时信息查询，如各位排行榜、各类网站访问统计、公交到站信息、在线人数信息（聊天室、网站）、设备信号等 时效性信息控制，如验证码控制、投票控制等 分布式数据共享，如分布式集群架构中的 session 分离 消息队列 分布式锁 2.3 安装安装之后修改安装目录下的redis.conf，将daemonize no改为daemonize yes 基本配置： port 6379 #启动端口 daemonize yes #守护进程 logfile \"6379.log\" #日志文件名 dir /usr/local/redis/data #日志文件、持久化文件目录 启动redis的方式： src/redis-server redis.conf 更改端口启动： redis-server --port 6380 或者更改配置文件的port：（可在一台主机上启动多个服务） 连接时使用： redis-cli -p 6380配置服务： mkdir /etc/redis cp redis.conf /etc/redis/6379.conf cp utils/redis_init_script /etc/init.d/redis 启动服务： service redis start 默认端口：6379 3 Redis基本操作Redis 命令参考 — Redis 命令参考 清除屏幕信息：clear 查看命令帮助：help 命令 3.1 String类型String的最大存储量是512MB String的用途之一是存json数据 键名通常有规范，例如user:id:xxxxxxx:fans（表名:主键名:主键值:字段名） set key value [EX seconds] [DX miliseconds]新增、更新键值对。它相当于 setex key seconds value 和 psetex key milliseconds value。 get key获取值 del key删除键值对 ttl key查看ttl（剩余生存）时间 expire key seconds设置过期时间 keys *查看所有的key mset key1 value1 key2 value2...同时设置多个键值对，对应还有mget，可以同时取多个值 getset key更新值的同时返回旧值。 incr key自增value（只对纯数字的字符串有效） decr value自减value incrby key num以num值自增（decrby同理），类似的还有incrbyfloat（增加小数） 注意： redis所有的操作都是原子性的，采用单线程处理所有业务，命令是一个一个执行的，因此无需考虑并发带来的数据影响。 能获取的最大整数范围是java中long的最大值。 append key toAppend 将一段字符串附加到旧值上。 strlen key计算值的长度 setnx key value(set not exist)如果key不存在则设置并返回1，如果key存在不更新返回0 3.2 Hash类型 新的存储需求：对一系列存储的数据进行编组，方便管理，典型应用存储对象信息 需要的存储结构：一个存储空间保存多个键值对数据 hash类型实际上值存的还是一个类似于哈希表的结构，里面的键值对叫field-value hash存储结构优化 如果field数量较少，存储结构优化为类数组结构 如果field数量较多，存储结构使用HashMap结构 注意事项 hash类型下的value只能存储字符串，不允许存储其他数据类型 每个hash可以存储232-1个键值对 hgetall 操作可以获取全部属性，如果内部field过多，遍历整体数据效率就很会低，有可能成为数据访问瓶颈 hset hashname field value设置对应hash的键值对 hget hashname field获取对应的哈希中对应的键对应的值 hmset hashname field1 value1 field2 value2... 多重设置 hmget hashname field1 field2...多重获取 hdel hashname删除键 hsetnx hashname field value类似setnx，只有不存在才添加。 hlen hashname获取哈希中field的个数 hexists hashname field判断field是否存在，存在返回1 hkeys hashname获取某哈希所有的field名 hvals hashname获取某哈希所有的value hgetall hashname获取所有的field名和value hincrby hashname field increment注意这个只有hincrby没有hincr 3.3 List类型 数据存储需求：存储多个数据，并对数据进入存储空间的顺序进行区分 需要的存储结构：一个存储空间保存多个数据，且通过数据可以体现进入顺序 list类型：保存多个数据，底层使用双向链表存储结构实现 list的元素可以重复 lpush listname val1 val2... rpush listname val1 val2...lpush从左边插入，rpush从右边插入。如果list不存在，会先创建list，然后插入。 lrange listname start stop从左边数的范围，start和stop索引允许负值，-1代表最后一个元素，-2代表倒数第二个元素…… lpop listname rpop listname从左边（右边）弹出元素 blpop listname timeout brpop listname timeout阻塞版本的lpop/rpop，如果此时列表中没有元素则阻塞，可以设置最长等待时间 llen listname返回列表的长度 lset listname index value修改列表中索引index对应的值 lindex listname index 获取索引index对应的value lrem listname count value移除值等于指定值的元素count个 linsert listname before/after pivot value这个pivot代表的是list中一个元素的值 3.4 Set类型 新的存储需求：存储大量的数据，在查询方面提供更高的效率 需要的存储结构：能够保存大量的数据，高效的内部存储机制，便于查询 set类型：与hash存储结构完全相同，仅存储键，不存储值（nil），并且值是不允许重复的 sadd setname member向集合中添加元素 smembers setname返回集合的全部成员 srem setname member移除元素 scard setname返回集合中元素的个数 sismember setname member判断是否在集合里。 srandmember setname [count]随机获取集合中指定数量的数据 spop setname返回并移除随机一个元素 sinter setname1 setname2 sunion setname1 setname2 sdiff setname1 setname2求两个集合的交、并、差集。 还有sinterstore等指令可以把结果存储到指定集合中。 smove source destination member将元素从source集合中移动到destination中。 3.5 Sorted_set类型 新的存储需求：数据排序有利于数据的有效展示，需要提供一种可以根据自身特征进行排序的方式 需要的存储结构：新的存储模型，可以保存可排序的数据 sorted_set类型：在set的存储结构基础上添加可排序字段 zadd setname score1 member1 [score2 member2]添加元素，注意要带上一个用于排序的数据（相当于权）。 zrange setname start end [withscores] zrevrange setname start stop [WITHSCORES]zrange从小到大显示指定元素范围，如果带有withscores则会连着score一起返回。zrevrange相反，从大到小。 zcard setname zcount setname min maxzcard显示集合中有多少个元素zcount显示在min-max之间的元素有多少个 zrem setname member移除member zrangebyscore setname min max [WITHSCORES] [LIMIT]; zrevrangebyscore setname [WITHSCORES];按条件获取处于min-max之间的数据 zremrangebyrank setname start stop zremrangebyscore setname min maxzremrangebyrank按排名删除元素 zremrangebyscore删除值在min-max之间的元素 zrank setname member zrevrank setname member查看元素的正序或倒序排名 zscore setname member zincrby setname increment memberscore值获取与修改","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"Redis","slug":"Redis","permalink":"https://www.codetool.top/tags/Redis/"}]},{"title":"leetcode12-整数转罗马数字","slug":"leetcode12-整数转罗马数字","date":"2020-02-29T08:25:42.000Z","updated":"2020-02-29T08:31:44.735Z","comments":true,"path":"article/leetcode12-整数转罗马数字/","link":"","permalink":"https://www.codetool.top/article/leetcode12-%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97/","excerpt":"","text":"1 原题罗马数字包含以下七种字符： I， V， X， L，C，D 和 M。 字符 数值 I 1 V 5 X 10 L 50 C 100 D 500 M 1000例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做 XXVII, 即为 XX + V + II 。 通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况： I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。 X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。 C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。 给定一个整数，将其转为罗马数字。输入确保在 1 到 3999 的范围内。 示例1: 输入: 3输出: “III” 示例2: 输入: 4输出: “IV” 示例3: 输入: 9输出: “IX” 示例4: 输入: 58输出: “LVIII”解释: L = 50, V = 5, III = 3. 示例5: 输入: 1994输出: “MCMXCIV”解释: M = 1000, CM = 900, XC = 90, IV = 4. 2 解法2.1 思想每一位的数字+所在位决定了在罗马数字中用什么表示。 2.2 代码简单粗暴 class Solution { public String intToRoman(int num) { StringBuilder sb = new StringBuilder(); String[] thous = {\"\",\"M\",\"MM\",\"MMM\"}; String[] hundr = {\"\",\"C\",\"CC\",\"CCC\",\"CD\",\"D\",\"DC\",\"DCC\",\"DCCC\",\"CM\"}; String[] ten = {\"\",\"X\",\"XX\",\"XXX\",\"XL\",\"L\",\"LX\",\"LXX\",\"LXXX\",\"XC\"}; String[] one = {\"\",\"I\",\"II\",\"III\",\"IV\",\"V\",\"VI\",\"VII\",\"VIII\",\"IX\"}; return sb.append(thous[num/1000]).append(hundr[num/100%10]).append(ten[num/10%10]).append(one[num%10]).toString(); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"蓝桥杯试题-小数第n位","slug":"蓝桥杯试题-小数第n位","date":"2020-02-28T16:24:46.000Z","updated":"2020-02-28T16:29:05.127Z","comments":true,"path":"article/蓝桥杯试题-小数第n位/","link":"","permalink":"https://www.codetool.top/article/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98-%E5%B0%8F%E6%95%B0%E7%AC%ACn%E4%BD%8D/","excerpt":"","text":"1 原题资源限制 时间限制：1.0s 内存限制：256.0MB 问题描述 我们知道，整数做除法时，有时得到有限小数，有时得到无限循环小数。 如果我们把有限小数的末尾加上无限多个0，它们就有了统一的形式。 本题的任务是：在上面的约定下，求整数除法小数点后的第n位开始的3位数。 输入格式 一行三个整数：a b n，用空格分开。a是被除数，b是除数，n是所求的小数后位置（0&lt;a,b,n&lt;1000000000） 输出格式 一行3位数字，表示：a除以b，小数后第n位开始的3位数字。 样例输入 1 8 1 样例输出 125 样例输入 1 8 3 样例输出 500 样例输入 282866 999000 6 样例输出 914 2 解法2.1 思想一开始想把被除数给乘以10的多少次幂之后再除以除数，然后发现会溢出，这道题还是模拟除法规则求解 2.2 代码import java.util.Scanner; public class Main { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); int divide = scanner.nextInt(); int divideBy = scanner.nextInt(); int start = scanner.nextInt(); int begin = divide%divideBy; for(int i = 0;i&lt;start+2;i++){ begin *= 10; if(i>=start-1) System.out.print(begin/divideBy); begin %= divideBy; } } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"https://www.codetool.top/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"}]},{"title":"蓝桥杯试题-大小写转换","slug":"蓝桥杯试题-大小写转换","date":"2020-02-28T16:04:17.000Z","updated":"2020-02-28T16:09:13.662Z","comments":true,"path":"article/蓝桥杯试题-大小写转换/","link":"","permalink":"https://www.codetool.top/article/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98-%E5%A4%A7%E5%B0%8F%E5%86%99%E8%BD%AC%E6%8D%A2/","excerpt":"","text":"1 原题资源限制 时间限制：1.0s 内存限制：256.0MB 问题描述 输入一个字符串，将大写字符变成小写、小写变成大写，然后输出 输入格式 acbAB 输出格式 ACBab 样例输入 一个满足题目要求的输入范例。例：acbAB 样例输出 与上面的样例输入对应的输出。例：ACBab 数据规模和约定 输入数据中每一个数的范围。例：0&lt;n,m&lt;100, 0&lt;=矩阵中的每个数&lt;=1000。 2 解法2.1 思想加减ascii码值。。 2.2 代码import java.util.Scanner; public class Main { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); String origin = scanner.next(); StringBuilder sb = new StringBuilder(); for(char i:origin.toCharArray()){ if(i>='a'&amp;&amp;i&lt;='z') sb.append((char)(i-('a'-'A'))); else sb.append((char)(i+('a'-'A'))); } System.out.println(sb.toString()); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"https://www.codetool.top/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"}]},{"title":"蓝桥杯试题-黑色星期五","slug":"蓝桥杯试题-黑色星期五","date":"2020-02-28T15:32:59.000Z","updated":"2020-02-28T15:47:00.477Z","comments":true,"path":"article/蓝桥杯试题-黑色星期五/","link":"","permalink":"https://www.codetool.top/article/%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AF%95%E9%A2%98-%E9%BB%91%E8%89%B2%E6%98%9F%E6%9C%9F%E4%BA%94/","excerpt":"","text":"1 原题资源限制 时间限制：1.0s 内存限制：512.0MB 问题描述 有些西方人比较迷信，如果某个月的13号正好是星期五，他们就会觉得不太吉利，用古人的说法，就是“诸事不宜”。请你编写一个程序，统计出在某个特定的年份中，出现了多少次既是13号又是星期五的情形，以帮助你的迷信朋友解决难题。 说明：（1）一年有365天，闰年有366天，所谓闰年，即能被4整除且不能被100整除的年份，或是既能被100整除也能被400整除的年份；（2）已知1998年1月1日是星期四，用户输入的年份肯定大于或等于1998年。 输入格式：输入只有一行，即某个特定的年份（大于或等于1998年）。 输出格式：输出只有一行，即在这一年中，出现了多少次既是13号又是星期五的情形。输入输出样例 样例输入 1998 样例输出 3 2 解法2.1 思想可以偷懒使用Calendar类或者被废弃的Date，不过要求对Calendar类比较熟悉。。 不然就按闰年的情况去处理日期吧。。 2.2 代码java api: import java.util.Calendar; import java.util.Scanner; public class Main { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); int year = scanner.nextInt(); int count = 0; Calendar calendar = Calendar.getInstance(); calendar.set(Calendar.YEAR,year); for(int i = 0;i&lt;12;i++){ calendar.set(Calendar.MONTH,i); calendar.set(Calendar.DATE,13); if(calendar.get(Calendar.DAY_OF_WEEK)==Calendar.FRIDAY) count ++; } System.out.println(count); } } 硬算： import java.util.Scanner; public class Main { public static void main(String[] args) { Scanner scanner = new Scanner(System.in); int year = scanner.nextInt(); int firstDay = getFirstDay(year); boolean isLeap = (year%4==0&amp;&amp;year%100!=0)||(year%100==0&amp;&amp;year%400==0); int count = 0; for(int i = 1;i&lt;=12;i++){ switch (i){ case 1: firstDay = (firstDay+12%7)%7; if(firstDay == 4) count++; break; case 3: firstDay = (firstDay+(isLeap?29:28)%7)%7; if(firstDay == 4) count++; break; case 5: case 7: case 10: case 12: firstDay = (firstDay+30%7)%7; if(firstDay == 4) count++; break; default: firstDay = (firstDay+31%7)%7; if(firstDay == 4) count++; break; } } System.out.println(count); } public static int getFirstDay(int year){ if(year == 1998) return 3; int lastYear = year -1; if((lastYear%4==0&amp;&amp;lastYear%100!=0)||(lastYear%100==0&amp;&amp;lastYear%400==0)) return (getFirstDay(lastYear)+366%7)%7; else return (getFirstDay(lastYear)+365%7)%7; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"https://www.codetool.top/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"}]},{"title":"海量数据去重-由BitMap引出的布隆过滤器","slug":"海量数据去重-由BitMap引出的布隆过滤器","date":"2020-02-28T02:51:06.000Z","updated":"2020-03-03T15:50:25.535Z","comments":true,"path":"article/海量数据去重-由BitMap引出的布隆过滤器/","link":"","permalink":"https://www.codetool.top/article/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E5%8E%BB%E9%87%8D-%E7%94%B1BitMap%E5%BC%95%E5%87%BA%E7%9A%84%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/","excerpt":"","text":"本文参考资源： 那些惊艳的算法们（一）——布隆过滤器_C/C++_xinzhongtianxia的博客-CSDN博客 详解布隆过滤器的原理、使用场景和注意事项 - 简书 1 概述昨天学习了BitMap这种数据结构（算法），链接：海量数据算法-BitMap介绍和实现 然而BitMap也存在着一些问题： 当样本分布极度不均匀的时候，BitMap会造成很大空间上的浪费。 举个例子，比如你有10个数，分别是1、2、3、4、5、6、7、8、99999999999；那么你不得不用99999999999个bit位去实现你的BitMap,而这个BitMap的中间绝大多数位置都是0，并且永远不会用到，这显然是极度不划算的。 当元素不是整型的时候，BitMap就不适用了。想想看，你拿到的是一堆url，然后如果你想用BitMap做去重的话，先得把url转换成int型，在转换的过程中难免某些url会计算出相同的int值，于是BitMap的准确性就会降低。 那针对这两种情况有没有解决办法呢？ 第一种分布不均匀的情况可以通过hash函数，将元素都映射到一个区间范围内，减少大段区间闲置造成的浪费，这很简单，取模就好了，难的是取模之后的值保证不相同，即不发生hash冲突。 第二种情况，把字符串映射成整数是必要的，那么唯一要做的就是保证我们的hash函数尽可能的减少hash冲突，一次不行我就多hash几次，hash还是容易碰撞，那我就扩大数组的范围，使hash值尽可能的均匀分布，减少hash冲突的概率。 基于这种思想，BloomFilter（布隆过滤器）诞生了。 2 原理比如现在有10000个字符串，要进行去重操作，如果用bitmap的方法将字符串的哈希值对应到一个bit，由于字符串的哈希值不是唯一的，可能出现哈希冲突，而若两个字符串哈希冲突了，就会对应到同一个bit上，bitmap就会误判这两个字符串相等。 解决的方法就是，使用多个哈希函数，例如使用三个哈希函数，每个字符串可以计算出三个哈希映射，将所有映射的位标为1，而判断有没有重复的方法是，只要得到的三个映射位不是都已为1了，就认为该字符串没有重复。 可见布隆过滤器相较于BitMap功能较单一，无法根据已有的位倒推回原始数据，只能用作查询去重功能。 但这也不意味着布隆过滤器就不会误判，假如一个新的无重复的字符串，映射的位在之前就被其他字符串得到的哈希映射都标为了1，那么布隆过滤器也认为它是重复的。不过误判的概率较小（比BitMap小多了），在大部分生产环境下是可以接受的（因为有的时候不重复的字符串没多少，反而重复的字符串占了大多数，主要目的只是不用反复处理重复的字符串）。 3 参数调优由上面的原理可知，对于布隆过滤器性能最重要的参数有两个： bit数组的大小，bit越多且哈希映射分布均匀的条件下，哈希冲突的概率是越低的。 哈希函数的个数，哈希函数的个数如果太少，更容易冲突，而如果哈希函数的个数太多，则将bit数组内的元素标为1的进度也会加快，从而造成哈希冲突。所以哈希函数的个数需要均衡。 关于具体的误判率计算维基百科给出了计算过程：Bloom filter - Wikipedia 对于一个期望的误判率p，期望的插入元素个数n，最佳数组bit个数m和哈希函数数量k的计算公式如下： 所以当构造一个布隆过滤器的时候并且希望误判率可控时通常要传入期望的误判率、期望的插入元素个数等参数。 谷歌有java中BloomFilter的实现，有兴趣的可以自己去研究一下： &lt;dependency> &lt;groupId>com.google.guava&lt;/groupId> &lt;artifactId>guava&lt;/artifactId> &lt;version>25.1-jre&lt;/version> &lt;/dependency> 4 应用 重复URL的过滤 邮箱黑名单的去重 推荐去重 Redis防止缓存穿透就可以使用布隆过滤器，日后再谈。","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"海量数据","slug":"海量数据","permalink":"https://www.codetool.top/tags/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE/"}]},{"title":"leetcode9-回文数","slug":"leetcode9-回文数","date":"2020-02-27T17:58:40.000Z","updated":"2020-02-27T18:03:18.927Z","comments":true,"path":"article/leetcode9-回文数/","link":"","permalink":"https://www.codetool.top/article/leetcode9-%E5%9B%9E%E6%96%87%E6%95%B0/","excerpt":"","text":"1 原题判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。 示例1: 输入： 121输出： true 示例2: 输入： -121输出： false解释： 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。 示例3: 输入： 10输出： false解释： 从右向左读, 为 01 。因此它不是一个回文数。 进阶: 你能不将整数转为字符串来解决这个问题吗？ 2 解法2.1 思想除10得余可以得到末位，除10n则可以得到首位（n为数字长度）。 2.2 代码class Solution { public boolean isPalindrome(int x) { if (x &lt; 0) return false; int div = 1; while (x / div >= 10) div *= 10; while (x > 0) { int left = x / div; int right = x % 10; if (left != right) return false; x = (x % div) / 10; div /= 100; } return true; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"SpringMVC使用-续","slug":"SpringMVC使用-续","date":"2020-02-27T15:35:47.000Z","updated":"2020-02-27T15:37:39.072Z","comments":true,"path":"article/SpringMVC使用-续/","link":"","permalink":"https://www.codetool.top/article/SpringMVC%E4%BD%BF%E7%94%A8-%E7%BB%AD/","excerpt":"","text":"1 转发和重定向除了视图解析器配合返回字符串的方法： 1.1 使用request和response@RequestMapping(\"/test\") public void testRedir(HttpServletRequest request, HttpServletResponse response) throws Exception { //使用request转向页面 request.getRequestDispatcher(\"/WEB-INF/pages/success.jsp\") .forward(request,response); //使用response重定向 response.sendRedirect(\"testRetrunString\"); //使用response指定响应结果 response.setCharacterEncoding(\"utf-8\"); response.setContentType(\"application/json;charset=utf-8\"); response.getWriter().write(\"json 串\"); } 1.2 使用返回字符串关键字@RequestMapping(\"/testForward\") public String testForward() { System.out.println(\"AccountController 的 testForward 方法执行了。。。。\"); return \"forward:/WEB-INF/pages/success.jsp\"; } @RequestMapping(\"/testRedirect\") public String testRedirect() { System.out.println(\"AccountController 的 testRedirect 方法执行了。。。。\"); return \"redirect:testReturnModelAndView\"; } 2 ResponseBody 响应 json 数据该注解用于将 Controller 的方法返回的对象，通过 HttpMessageConverter 接口转换为指定格式的数据如：json,xml 等，通过 Response 响应给客户端 Springmvc 默认用 MappingJacksonHttpMessageConverter 对 json 数据进行转换，需要加入jackson 的包。 &lt;dependency> &lt;groupId>com.fasterxml.jackson.core&lt;/groupId> &lt;artifactId>jackson-databind&lt;/artifactId> &lt;version>2.9.0&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>com.fasterxml.jackson.core&lt;/groupId> &lt;artifactId>jackson-core&lt;/artifactId> &lt;version>2.9.0&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>com.fasterxml.jackson.core&lt;/groupId> &lt;artifactId>jackson-annotations&lt;/artifactId> &lt;version>2.9.0&lt;/version> &lt;/dependency> 示例： @RequestMapping(\"/testResponseJson\") public @ResponseBody Account testResponseJson(@RequestBody Account account) { System.out.println(\"异步请求：\"+account); return account; } 前一个@ResponseBody返回的时候转换为json，后一个@ResponseBody接收请求时转换为对象。 3 文件上传和下载3.1 文件上传这里的文件上传用的是multipart/form-data 当 form 表单的 enctype 取值为 Mutilpart/form-data 时，请求正文内容就变成：每一部分都是 MIME 类型描述的正文 -----------------------------7de1a433602ac 分界符 Content-Disposition: form-data; name=&quot;userName&quot; 协议头 aaa 协议的正文 -----------------------------7de1a433602ac Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;C:\\Users\\admin\\Desktop\\fileupload_demofile\\b.txt&quot; Content-Type: text/plain 协议的类型（MIME 类型） bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb -----------------------------7de1a433602ac--Apache Commoms里的两个工具类 commons-fileupload-xxx.jar commons-io-xxx.jar （如果是maven项目只需要添加commons-fileupload依赖） &lt;dependency> &lt;groupId>commons-fileupload&lt;/groupId> &lt;artifactId>commons-fileupload&lt;/artifactId> &lt;version>1.3.3&lt;/version> &lt;/dependency> 配置文件上传处理Bean spring-mvc.xml配置 &lt;!-- 配置文件上传解析器 --> &lt;bean id=\"multipartResolver\" class=\"org.springframework.web.multipart.commons.CommonsMultipartResolver\"> &lt;!-- 设置上传文件的最大尺寸为 5MB --> &lt;property name=\"maxUploadSize\"> &lt; value>5242880&lt;/value> &lt;/property> &lt;/bean> 文件上传处理Controller @Controller @RequestMapping(\"/file\") public class FileController { @RequestMapping(\"/initFileUpload\") public String initFileUpload(){ return \"FileUpload\"; } @RequestMapping() public String fileUpLoad(String name, @RequestParam(\"file\")CommonsMultipartFile file, HttpSession session){ if(!file.isEmpty()){ String path = session.getServletContext().getRealPath(\"/upload\"); String fileName = file.getOriginalFilename(); String fileType = fileName.substring(fileName.lastIndexOf(\".\")); File targetFile = new File(path,new Date().getTime()+fileType); try { file.getFileItem().write(targetFile); }catch (Exception e) { e.printStackTrace(); } } return \"FileUpload\"; } } 3.2 文件下载可先获取下载文件的输入流，并将输入流读入缓冲流BufferedInputStream，最后将缓冲流通过循环的方式写入到response的输出流实现文件下载功能。 public void fileDownLoad(HttpSession session, HttpServletResponse response,String fileName,boolean isOnline) throws Exception{ String path = session.getServletContext().getRealPath(\"/upload\")+\"\\\\\"+fileName; File file = new File(path); System.out.println(path); if(!file.exists()){ response.sendError(404,\"您要下载的文件没找到\"); return; } BufferedInputStream bufIn = new BufferedInputStream(new FileInputStream(file)); byte[] buff = new byte[1024]; int len = -1; response.reset(); if(isOnline){ URL u = new URL(\"file:///\"+path); response.setContentType(u.openConnection().getContentType()); response.setHeader(\"Content-Disposition\",\"inline;filename=\"+fileName); }else{ response.setContentType(\"application/x-msdownload\"); response.setHeader(\"Content-Disposition\",\"attachment;filename=\"+fileName); } OutputStream out = response.getOutputStream(); while ((len=bufIn.read(buff))!=-1){ out.write(buff,0,len); out.flush(); } bufIn.close(); out.close(); } 4 异常处理系统的 dao、service、controller 出现都通过 throws Exception 向上抛出，最后由 SpringMVC 前端控制器交由异常处理器进行异常处理。 编写自定义异常类 public class SysException extends Exception{ //存储提示信息 private String message; @Override public String getMessage() { return message; } public void setMessage(String message) { this.message = message; } public SysException(String message) { this.message = message; } } 编写异常处理器 public class SysExceptionResolver implements HandlerExceptionResolver { @Override public ModelAndView resolveException(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) { //获取异常对象 SysException e = null; if(ex instanceof SysException){ e = (SysException) ex; }else { e = new SysException(\"系统正在维护\"); } ModelAndView mv = new ModelAndView(); mv.addObject(\"errorMsg\",e.getMessage()); mv.setViewName(\"error\"); return mv; } } 配置异常处理器（跳转到提示页面） &lt;!-- 配置异常处理器 --> &lt;bean id=\"sysExceptionResolver\" class=\"com.rhett.exception.SysExceptionResolver\">&lt;/bean> 5 SpringMVC中的拦截器 过滤器是 servlet 规范中的一部分，任何 java web 工程都可以使用。 拦截器是 SpringMVC 框架自己的，只有使用了 SpringMVC 框架的工程才能用。 过滤器在 url-pattern 中配置了/*之后，可以对所有要访问的资源拦截。 拦截器它是只会拦截访问的控制器方法，如果访问的是 jsp，html,css,image 或者 js 是不会进行拦截的。 它也是 AOP 思想的具体应用。 我们要想自定义拦截器， 要求必须实现 HandlerInterceptor 接口。 public class HandlerInterceptorDemo1 implements HandlerInterceptor { @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { System.out.println(\"preHandle 拦截器拦截了\"); return true; } @Override public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler,ModelAndView modelAndView) throws Exception { System.out.println(\"postHandle 方法执行了\"); } @Override public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception { System.out.println(\"afterCompletion 方法执行了\"); } } HandlerInterceptor接口中的方法： preHandle方法是controller方法执行前拦截的方法 可以使用request或者response跳转到指定的页面 return true放行，执行下一个拦截器，如果没有拦截器，执行controller中的方法。 return false不放行，不会执行controller中的方法。 postHandle是controller方法执行后执行的方法，在JSP视图执行前。 可以使用request或者response跳转到指定的页面 如果指定了跳转的页面，那么controller方法跳转的页面将不会显示。 postHandle方法是在JSP执行后执行 request或者response不能再跳转页面了 配置拦截器： &lt;!-- 配置拦截器 --> &lt;mvc:interceptors> &lt;mvc:interceptor> &lt;!-- 要拦截的方法 --> &lt;mvc:mapping path=\"/**\"/> &lt;!-- 不要拦截的方法 --> &lt;!-- &lt;mvc:exclude-mapping path=\"\"/> --> &lt;!-- 配置拦截器对象--> &lt;bean id=\"handlerInterceptorDemo1\" class=\"com.rhett.interceptor.MyInterceptor1\">&lt;/bean> &lt;/mvc:interceptor> &lt;/mvc:interceptors> 若配置多个拦截器形成拦截器链，按配置顺序执行。","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"SpringMVC","slug":"SpringMVC","permalink":"https://www.codetool.top/tags/SpringMVC/"}]},{"title":"海量数据算法-BitMap介绍和实现","slug":"海量数据算法-BitMap介绍和实现","date":"2020-02-27T09:22:49.000Z","updated":"2020-02-27T11:48:23.430Z","comments":true,"path":"article/海量数据算法-BitMap介绍和实现/","link":"","permalink":"https://www.codetool.top/article/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95-BitMap%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%AE%9E%E7%8E%B0/","excerpt":"","text":"作为一个有素质的程序员，在面试中（不是） 难免会遇到海量数据相关的问题，之前有注意过java.util下面有一个BitSet数据结构，但不是很明白是做什么用的。今天就来研究一下它背后的算法——BitMap（位图）算法。 1 BitMap的概念关于BitMap的介绍和实现有一篇微信文章已经讲的很清楚了： 漫画：Bitmap算法 整合版 主要的思想就是把数据对应到bit位中，从而可以实现去重、查找、排序等功能。 我这篇文章就不复制粘贴了 （全是图片粘贴个锤子），主要看看java中BitMap的实现-BitSet 2 BitSet实现2.1 重要内部字段//用于存储数据 private long[] words; 这个字段说明了底层是long数组，而一个long是8个字节也就是64位。而且在BitSet中，把这样一个long单元称为“字”（word）。 private transient int wordsInUse = 0; 这个字段代表目前long数组中不为0的元素的最大的下标。（就是目前实际用了多少个字） 2.2 构造方法2.2.1 BitSet()public BitSet() { initWords(BITS_PER_WORD); sizeIsSticky = false; } initWords，看方法名就是初始化words数组了，而后面的BITS_PER_WORD应该就是默认容量。sizeIsSticky的java doc描述大概意思是判断这个bitset是不是用户指定容量创建的，如果是用户指定了容量，后面就尽可能会保有这个容量。 private final static int ADDRESS_BITS_PER_WORD = 6; private final static int BITS_PER_WORD = 1 &lt;&lt; ADDRESS_BITS_PER_WORD; private void initWords(int nbits) { words = new long[wordIndex(nbits-1) + 1]; } private static int wordIndex(int bitIndex) { return bitIndex >> ADDRESS_BITS_PER_WORD; } ADDRESS_BITS_PER_WORD的意思就是一个字的地址占多少位，因为是64位是2的6次方，这里就是6。而BITS_PER_WORD就是一个字占多少位，这里就是1&lt;&lt;6即64位。 initWords的时候，我们传进去的默认容量为BITS_PER_WORD，这里看形参可以知道这个容量的单位是bit，那么也就是说默认构造函数只会创建一个能容纳64位的bitSet。 而BitSet怎么知道64位需要多少个字(long)呢？就是通过wordIndex去计算，将位值除以64，并向上取整。 后面wordIndex还会在索引的时候用到。 2.2.2 public BitSet(int nbits)public BitSet(int nbits) { // nbits can't be negative; size 0 is OK if (nbits &lt; 0) throw new NegativeArraySizeException(\"nbits &lt; 0: \" + nbits); initWords(nbits); sizeIsSticky = true; } 这个构造方法就是用户自己指定初始容量了，过程和默认构造方法一样，只是把sizeIsSticky设为了true。 2.3 重要方法2.3.1 setpublic void set(int bitIndex) { if (bitIndex &lt; 0) throw new IndexOutOfBoundsException(\"bitIndex &lt; 0: \" + bitIndex); //计算出字的下标 int wordIndex = wordIndex(bitIndex); expandTo(wordIndex); words[wordIndex] |= (1L &lt;&lt; bitIndex); // Restores invariants //保证一些条件 checkInvariants(); } 这个方法的作用就是把相应的位设置为true（1）。而expandTo()就是扩容了，要保证数组大小要大于这个字的下标。这个扩容方法我们放到后面再看。然后就是words[wordIndex] |= (1L &lt;&lt; bitIndex); ，这里的1L &lt;&lt; bitIndex是什么呢，java当左移超出一定范围的时候，对于long类型就是当左移位数大于等于1000000(64)的时候，只会取最后七位，也就是1L &lt;&lt; bitIndex实际上就是bitIndex%64，算出了该位在字中的位置。然后用位或运算将该位置为1。 2.3.2 clearpublic void clear(int bitIndex) { if (bitIndex &lt; 0) throw new IndexOutOfBoundsException(\"bitIndex &lt; 0: \" + bitIndex); int wordIndex = wordIndex(bitIndex); if (wordIndex >= wordsInUse) return; words[wordIndex] &amp;= ~(1L &lt;&lt; bitIndex); recalculateWordsInUse(); checkInvariants(); } 这个方法的作用就是把相应的位设置为false（0）。和set方法过程很像，用位与运算将对应的位置为0。 2.3.3 set(int fromIndex, int toIndex)public void set(int fromIndex, int toIndex) { //检查范围是否有效 checkRange(fromIndex, toIndex); if (fromIndex == toIndex) return; // Increase capacity if necessary // 获取起始位置和结束位置对应的字的下标，必要时扩容 int startWordIndex = wordIndex(fromIndex); int endWordIndex = wordIndex(toIndex - 1); expandTo(endWordIndex); long firstWordMask = WORD_MASK &lt;&lt; fromIndex; long lastWordMask = WORD_MASK >>> -toIndex; if (startWordIndex == endWordIndex) { // Case 1: One word words[startWordIndex] |= (firstWordMask &amp; lastWordMask); } else { // Case 2: Multiple words // Handle first word words[startWordIndex] |= firstWordMask; // Handle intermediate words, if any for (int i = startWordIndex+1; i &lt; endWordIndex; i++) words[i] = WORD_MASK; // Handle last word (restores invariants) words[endWordIndex] |= lastWordMask; } checkInvariants(); } WORD_MASK是什么呢： /* Used to shift left or right for a partial word mask */ private static final long WORD_MASK = 0xffffffffffffffffL; 就是一个全1的long型，这个函数先将起始位置中的起始位往后的位置1，然后将中间的字全部设为全1的，最后将结束位置中的结束位往前的位置置1。 2.3.4 intersects有了上面那些基础方法，就可以进行一些逻辑判断了： public boolean intersects(BitSet set) { for (int i = Math.min(wordsInUse, set.wordsInUse) - 1; i >= 0; i--) if ((words[i] &amp; set.words[i]) != 0) return true; return false; } 比较两个BitSet是否有相同的位被置1了。 2.3.5 andpublic void and(BitSet set) { if (this == set) return; while (wordsInUse > set.wordsInUse) words[--wordsInUse] = 0; // Perform logical AND on words in common for (int i = 0; i &lt; wordsInUse; i++) words[i] &amp;= set.words[i]; recalculateWordsInUse(); checkInvariants(); } 非常常用的与运算，求两个集合的交集，需要两个bitset中对应的位都被置1。这里就是逐字做与运算。 2.3.6 orpublic void or(BitSet set) { if (this == set) return; int wordsInCommon = Math.min(wordsInUse, set.wordsInUse); if (wordsInUse &lt; set.wordsInUse) { ensureCapacity(set.wordsInUse); wordsInUse = set.wordsInUse; } // Perform logical OR on words in common for (int i = 0; i &lt; wordsInCommon; i++) words[i] |= set.words[i]; // Copy any remaining words if (wordsInCommon &lt; set.wordsInUse) System.arraycopy(set.words, wordsInCommon, words, wordsInCommon, wordsInUse - wordsInCommon); // recalculateWordsInUse() is unnecessary checkInvariants(); } 非常常用的或运算，求两个集合的并集，需要两个bitset中任意一位被置1。这里就是逐字做或运算。 2.3.7 xorpublic void xor(BitSet set) { int wordsInCommon = Math.min(wordsInUse, set.wordsInUse); if (wordsInUse &lt; set.wordsInUse) { ensureCapacity(set.wordsInUse); wordsInUse = set.wordsInUse; } // Perform logical XOR on words in common for (int i = 0; i &lt; wordsInCommon; i++) words[i] ^= set.words[i]; // Copy any remaining words if (wordsInCommon &lt; set.wordsInUse) System.arraycopy(set.words, wordsInCommon, words, wordsInCommon, set.wordsInUse - wordsInCommon); recalculateWordsInUse(); checkInvariants(); } 异或运算。求不同时在两个集合内的元素。 2.4 扩容最后来看扩容 private void expandTo(int wordIndex) { int wordsRequired = wordIndex+1; if (wordsInUse &lt; wordsRequired) { ensureCapacity(wordsRequired); wordsInUse = wordsRequired; } } expandTo更新了wordsInUse，真正的扩容在ensureCapacity里面 private void ensureCapacity(int wordsRequired) { if (words.length &lt; wordsRequired) { // 分配两倍数组大小或需要的数组大小中较大的那个。 int request = Math.max(2 * words.length, wordsRequired); words = Arrays.copyOf(words, request); sizeIsSticky = false; } } 3 使用实例这样看来，BitSet好像只能存储数值类型的数据，实际上非数值类型可以使用哈希码或自定的哈希映射存储，但要保证哈希码只能唯一确定一个元素。 3.1 去重public static void containChars(String str) { BitSet used = new BitSet(); for (int i = 0; i &lt; str.length(); i++) used.set(str.charAt(i)); // set bit for char StringBuilder sb = new StringBuilder(); sb.append(\"[\"); int size = used.size(); for (char i = 'a'; i &lt;= 'z'; i++) { if (used.get(i)) { sb.append((char) i); } } sb.append(\"]\"); System.out.println(sb.toString()); } public static void main(String[] args) { containChars(\"abcdfadsaomdosmdfodsingodsbnafgudbgiub\"); } (通常是遍历bitset中所有的位进行去重，这里因为字母有限可以遍历字母) 3.2 排序排序也是遍历bitset中所有的位，但是对于哈希码存储的并没有排序作用。实际上就是用空间换时间。 public static void main(String[] args) { BitSet used = new BitSet(); used.set(45); used.set(16); used.set(78); used.set(23); used.set(44); used.set(11); used.set(98); for(int i = 0;i&lt;used.size();i++){ if(used.get(i)) System.out.print(i+\" \"); } } 3.3 查询给40亿个不重复的unsigned int的整数，没有排过序，然后再给一个数，如果快速判断这个数是否在那40亿个数当中？ 一个一个set进去，然后用get判断有没有。 （set完之后这个数据结构就可复用了）","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"海量数据","slug":"海量数据","permalink":"https://www.codetool.top/tags/%E6%B5%B7%E9%87%8F%E6%95%B0%E6%8D%AE/"}]},{"title":"SpringMVC概述和使用入门","slug":"SpringMVC概述和使用入门","date":"2020-02-27T09:05:01.000Z","updated":"2020-02-27T09:08:52.689Z","comments":true,"path":"article/SpringMVC概述和使用入门/","link":"","permalink":"https://www.codetool.top/article/SpringMVC%E6%A6%82%E8%BF%B0%E5%92%8C%E4%BD%BF%E7%94%A8%E5%85%A5%E9%97%A8/","excerpt":"","text":"1 概述1.1 SpringMVC的概念SpringMVC 是一种基于 Java 的实现 MVC 设计模型的请求驱动类型的轻量级 Web 框架，属于 Spring FrameWork 的后续产品，已经融合在 Spring Web Flow 里面。Spring 框架提供了构建 Web 应用程序的全功能 MVC 模块。使用 Spring 可插入的 MVC 架构，从而在使用 Spring 进行 WEB 开发时，可以选择使用 Spring 的 Spring MVC 框架或集成其他 MVC 开发框架，如 Struts1(现在一般不用)，Struts2 等。 它通过一套注解，让一个简单的 Java 类成为处理请求的控制器，而无须实现任何接口。同时它还支持RESTful 编程风格的请求。 1.2 SpringMVC的优势 清晰的角色划分： 前端控制器（DispatcherServlet） 请求到处理器映射（HandlerMapping） 处理器适配器（HandlerAdapter） 视图解析器（ViewResolver） 处理器或页面控制器（Controller） 验证器（Validator） 命令对象（Command 请求参数绑定到的对象就叫命令对象） 表单对象（Form Object 提供给表单展示和提交到的对象就叫表单对象）。 分工明确，而且扩展点相当灵活，可以很容易扩展，虽然几乎不需要。 由于命令对象就是一个 POJO，无需继承框架特定 API，可以使用命令对象直接作为业务对象。 和 Spring 其他框架无缝集成，是其它 Web 框架所不具备的。 可适配，通过 HandlerAdapter 可以支持任意的类作为处理器。 可定制性，HandlerMapping、ViewResolver 等能够非常简单的定制。 功能强大的数据验证、格式化、绑定机制。 利用 Spring 提供的 Mock 对象能够非常简单的进行 Web 层单元测试。 本地化、主题的解析的支持，使我们更容易进行国际化和主题的切换。 强大的 JSP 标签库，使 JSP 编写更容易。 ………………还有比如RESTful风格的支持、简单的文件上传、约定大于配置的契约式编程支持、基于注解的零配置支持等等。 1.3 SpringMVC和Struts2的优劣分析共同点： 它们都是表现层框架，都是基于 MVC 模型编写的。 它们的底层都离不开原始 ServletAPI。 它们处理请求的机制都是一个核心控制器。 区别： Spring MVC 的入口是 Servlet, 而 Struts2 是 Filter Spring MVC 是基于方法设计的，而 Struts2 是基于类，Struts2 每次执行都会创建一个动作类。所以 Spring MVC 会稍微比 Struts2 快些。 Spring MVC 使用更加简洁,同时还支持 JSR303, 处理 ajax 的请求更方便 (JSR303 是一套 JavaBean 参数校验的标准，它定义了很多常用的校验注解，我们可以直接将这些注解加在我们 JavaBean 的属性上面，就可以在需要校验的时候进行校验了。) Struts2 的 OGNL 表达式使页面的开发效率相比 Spring MVC 更高些，但执行效率并没有比 JSTL 提升，尤其是 struts2 的表单标签，远没有 html 执行效率高。 2 入门案例2.1 maven配置&lt;properties> &lt;project.build.sourceEncoding>UTF-8&lt;/project.build.sourceEncoding> &lt;maven.compiler.source>8&lt;/maven.compiler.source> &lt;maven.compiler.target>8&lt;/maven.compiler.target> &lt;spring.version>5.2.3.RELEASE&lt;/spring.version> &lt;/properties> &lt;dependencies> &lt;dependency> &lt;groupId>junit&lt;/groupId> &lt;artifactId>junit&lt;/artifactId> &lt;version>4.12&lt;/version> &lt;scope>test&lt;/scope> &lt;/dependency> &lt;dependency> &lt;groupId>org.springframework&lt;/groupId> &lt;artifactId>spring-context&lt;/artifactId> &lt;version>${spring.version}&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>org.springframework&lt;/groupId> &lt;artifactId>spring-web&lt;/artifactId> &lt;version>${spring.version}&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>org.springframework&lt;/groupId> &lt;artifactId>spring-webmvc&lt;/artifactId> &lt;version>${spring.version}&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>javax.servlet&lt;/groupId> &lt;artifactId>servlet-api&lt;/artifactId> &lt;version>2.5&lt;/version> &lt;scope>provided&lt;/scope> &lt;/dependency> &lt;dependency> &lt;groupId>javax.servlet.jsp&lt;/groupId> &lt;artifactId>jsp-api&lt;/artifactId> &lt;version>2.0&lt;/version> &lt;scope>provided&lt;/scope> &lt;/dependency> &lt;/dependencies> 2.2 web.xml配置&lt;servlet> &lt;servlet-name>springmvc&lt;/servlet-name> &lt;servlet-class>org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class> &lt;init-param> &lt;param-name>contextConfigLocation&lt;/param-name> &lt;param-value>classpath:spring-mvc.xml&lt;/param-value> &lt;/init-param> &lt;load-on-startup>1&lt;/load-on-startup> &lt;/servlet> &lt;servlet-mapping> &lt;servlet-name>springmvc&lt;/servlet-name> &lt;url-pattern>/&lt;/url-pattern> &lt;/servlet-mapping> DispatcherServlet就是用于分发请求的，这里可以视为过滤器。它配合Controller中的@RequestMapping分发请求。 init-param里面的contextConfigLocation指引springmvc去加载spring配置 2.3 Spring配置文件&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?> &lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:p=\"http://www.springframework.org/schema/p\" xmlns:mvc=\"http://www.springframework.org/schema/mvc\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd\"> &lt;!--启用组件扫描--> &lt;context:component-scan base-package=\"com.test.controller\"/> &lt;!--启动SpringMVC的注解功能，完成请求和注解POJO的映射--> &lt;mvc:annotation-driven/> &lt;!--配置视图解析器--> &lt;bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\" id=\"internalResourceViewResolver\"> &lt;property name=\"prefix\" value=\"/WEB-INF/pages/\" /> &lt;property name=\"suffix\" value=\".jsp\"/> &lt;/bean> &lt;/beans> 2.4 控制类编写@Controller @RequestMapping(\"/user\") public class UserController { @RequestMapping(\"/showUser\") public String ShowUser(){ return \"ShowUser\"; } } 这里的@RequestMapping代表要访问项目目录下的/user/showUser才会被分发到该Controller类 注意返回的字符串配合视图解析器会跳转到/WEB-INF/pages/ShowUser.jsp 3 入门案例涉及的组件 3.1 DispatcherServlet前端控制器：用户请求到达前端控制器，它就相当于 mvc 模式中的 c，dispatcherServlet 是整个流程控制的中心，由它调用其它组件处理用户的请求，dispatcherServlet 的存在降低了组件之间的耦合性。 3.2 HandlerMapping处理器映射器：HandlerMapping 负责根据用户请求找到 Handler 即处理器，SpringMVC 提供了不同的映射器实现不同的映射方式，例如：配置文件方式，实现接口方式，注解方式等。 3.3 Handler处理器：它就是我们开发中要编写的具体业务控制器。由 DispatcherServlet 把用户请求转发到 Handler。由Handler 对具体的用户请求进行处理。 3.4 HandlerAdapter处理器适配器：通过 HandlerAdapter 对处理器进行执行，这是适配器模式的应用，通过扩展适配器可以对更多类型的处理器进行执行。 3.5 View Resolver视图解析器：View Resolver 负责将处理结果生成 View 视图，View Resolver 首先根据逻辑视图名解析成物理视图名即具体的页面地址，再生成 View 视图对象，最后对 View 进行渲染将处理结果通过页面展示给用户。 3.6 ViewSpringMVC 框架提供了很多的 View 视图类型的支持，包括：jstlView、freemarkerView、pdfView等。我们最常用的视图就是 jsp。 一般情况下需要通过页面标签或页面模版技术将模型数据通过页面展示给用户，需要由程序员根据业务需求开发具体的页面。 3.7 总结在 SpringMVC 的各个组件中，处理器映射器、处理器适配器、视图解析器称为 SpringMVC 的三大组件。 使用 &lt;mvc:annotation-driven&gt; 自动加载 HandlerMapping（处理映射器）和HandlerAdapter（处理适配器），可用在 SpringMVC.xml 配置文件中使用&lt;mvc:annotation-driven&gt;替代注解处理器和适配器的配置。 4 RequestMapping注解4.1 value属性value属性就是path属性的别名，填需要指定请求的地址，可以填写： 普通的具体值@RequestMapping(&quot;/user&quot;) 含有某一变量的一类值 @Controller @RequestMapping(\"/user\") public class UserController { @RequestMapping(value=\"/{userId}/deleteUser\",method=RequestMethod.GET) public String deleteUser(@PathVariable String userId){ System.out.println(\"delete:\"+userId); return \"ShowUser\"; } } 含正值表达式的一类值 @Controller @RequestMapping(\"/user\") public class UserController { @RequestMapping(value=\"/{userBirth:\\\\d{4}-\\\\d{2}-\\\\d{2}}/updateUser\",method=RequestMethod.GET) public String updateUser(@PathVariable String userBirth){ System.out.println(\"userBirth:\"+userBirth); return \"ShowUser\"; } } 4.2 method属性GET\\POST\\PUT\\DELETE… 4.3 consumes属性指定处理请求的提交内容类型，例如application/json、text/html 4.4 produces属性指定返回的内容类型，仅当request请求头中的Accept类型中包含该指定类型才返回。 4.5 params属性指定request中必须包含某些参数值时才让该方法处理请求 4.6 headers属性指定request中必须包含某些指定的header值时才让该方法处理请求 5 spring前后台交互5.1 Controller获取前台传递的参数（GET参数、POST参数等） 5.1.1 直接通过形参获取形参的名字必须和前端传递的数据名一样 @RequestMapping(value = \"/addUser\",method = RequestMethod.POST) public String ShowUser(Model model,String name,Integer age){ System.out.println(\"name:\"+name+\"age:\"+age); return \"ShowUser\"; } 如果不一致可以使用@ModelAttribute或@RequestParam来指定形参要接受的参数的值。 @RequestMapping(value = \"/addUser\",method = RequestMethod.POST) public String ShowUser(Model model, @ModelAttribute(\"name\") String nickname, Integer age){ System.out.println(\"name:\"+nickname+\"age:\"+age); return \"ShowUser\"; } 5.1.2 使用对象接受前台传递的参数前台传递的参数名必须和对象的属性名一致 @RequestMapping(value = \"/addUser\",method = RequestMethod.POST) public String ShowUser(Model model, User user,@ModelAttribute(\"name\")String nickname){ System.out.println(\"name:\"+nickname+\"age:\"+user.getAge()); return \"ShowUser\"; } 当@ModelAttribute注解应用在方法前的时候，SpringMVC在调用目标处理方法前，会先逐个调用在方法级上标注了@ModelAttribute的方法（把它看成获取必要属性的前置方法） 如下面的代码可以实现在每次调用处理方法前获取request response session public class BaseController{ protected HttpServletRequest request; protected HttpServletResponse request; protected HttpSession session; @ModelAttribute public void setReqAndRes(HttpServletRequest request,HttpServletResponse response){ this.request = request; this.response = response; this.session = request.getSession(); } } 5.1.3 使用集合接受前台传递的参数如果是list则前台传递的参数名是list[index].propName（index下标，propName属性名） 如果是Map则前台传递的参数名是map[&#39;key&#39;].propName（key键名，propName属性名） 5.2 Controller传递参数到前台5.2.1 直接通过request对象传递直接通过获取的request的setAttribute方法传递。 5.2.2 直接通过返回值ModelAndView对象传递@RequestMapping(value = \"/showUser\") public ModelAndView ShowUser(){ return new ModelAndView(\"ShowUser\",\"message\",\"test message!\"); } 第一个参数是逻辑视图字符串 第二个参数是要往ShowUser视图上传递参数的名称。 第三个参数是要往ShowUser视图上传递参数的值。 当要传递多个参数时可以多次调用ModelAndView.addObject(&quot;attributeName&quot;,attributeValue)。 这些数据也是存放在request中的。 5.2.3 直接通过参数列表中添加形参ModelMap传递写成接口Model也行 @RequestMapping(value = \"/addUser\") public String ShowUser(ModelMap map){ map.put(\"message\",\"test message!\"); map.addAttribute(\"attributeName\",\"attributeValue\"); return \"showUser\"; } 5.3 配置解决中文乱码的过滤器web.xml: &lt;filter> &lt;filter-name>characterEncodingFilter&lt;/filter-name> &lt;filter-class>org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class> &lt;init-param> &lt;param-name>encoding&lt;/param-name> &lt;param-value>UTF-8&lt;/param-value> &lt;/init-param> &lt;/filter> &lt;filter-mapping> &lt;filter-name>characterEncodingFilter&lt;/filter-name> &lt;url-pattern>/*&lt;/url-pattern> &lt;/filter-mapping> 5.4 自定义类型转换器第一步：定义一个类，实现 Converter 接口，该接口有两个泛型参数。 public interface Converter&lt;S, T> {//S:表示接受的类型，T：表示目标类型 /** * 实现类型转换的方法 */ @Nullable T convert(S source); } public class StringToDateConverter implements Converter&lt;String, Date> { /** * 用于把 String 类型转成日期类型 */ @Override public Date convert(String source) { DateFormat format = null; try { if(StringUtils.isEmpty(source)) { throw new NullPointerException(\"请输入要转换的日期\"); } format = new SimpleDateFormat(\"yyyy-MM-dd\"); Date date = format.parse(source); return date; } catch (Exception e) { throw new RuntimeException(\"输入日期有误\"); } } } 第二步：在 spring 配置文件中配置类型转换器。 &lt;!-- 配置类型转换器工厂 --> &lt;bean id=\"converterService\" class=\"org.springframework.context.support.ConversionServiceFactoryBean\"> &lt;!-- 给工厂注入一个新的类型转换器 --> &lt;property name=\"converters\"> &lt;array> &lt;!-- 配置自定义类型转换器 --> &lt;bean class=\"com.itheima.web.converter.StringToDateConverter\">&lt;/bean> &lt;/array> &lt;/property> &lt;/bean> &lt;mvc:annotation-driven conversion-service=\"converterService\"> &lt;/mvc:annotation-driven> 6 SpringMVC常用注解6.1 @Controller控制器负责处理由DispatcherServlet分发过来的请求，它把用户请求的数据经过业务处理层处理之后封装成一个Model，然后再把该Model返回给对应的View进行展示。SpringMVC使用@Controller定义控制器，它还允许自动检测定义在类路径下的组件并自动注册。 6.2 @RequestMapping将URL映射到整个类或特定的处理方法上。 6.3 @PathVariable将注解方法参数绑定到URI模板遍历的值上。”/{userId}/deleteUser” url 支持占位符是 spring3.0 之后加入的。是 springmvc 支持 rest 风格 URL 的一个重要标志。 实例： @RequestMapping(\"/usePathVariable/{id}\") public String usePathVariable(@PathVariable(\"id\") Integer id){ System.out.println(id); return \"success\"; } 6.4 @RequestParam将请求的参数绑定到方法中的参数上。 属性： value：请求参数中的名称。 required：请求参数中是否必须提供此参数。默认值：true。表示必须提供，如果不提供将报错。 6.5 @RequestBody方法参数应该被绑定到HTTP的Body上。直接使用得到是 key=value&amp;key=value…结构的数据。get 请求方式不适用。 属性： required：是否必须有请求体。默认值是:true。当取值为 true 时,get 请求方式会报错。如果取值为 false，get 请求得到是 null。 6.6 @RequestHeader用于获取请求消息头。 属性： value：提供消息头名称 required：是否必须有此消息头 6.7 @CookieValue用于把指定 cookie 名称的值传入控制器方法参数。 属性：value：指定 cookie 的名称。required：是否必须有此 cookie。 6.8 @SessionAttribute用于多次执行控制器方法间的参数共享。 用在方法参数上。 属性： value：用于指定存入的属性名称。 6.9 @SessionAttributes用于多次执行控制器方法间的参数共享。 用在类上。 属性： value：用于指定存入的属性名称 type：用于指定存入的数据类型。 实例： @Controller @SessionAttributes(value = \"age\",types = String.class) public class HelloController { @RequestMapping(value = \"/addUser\") public String ShowUser(ModelMap map,@RequestParam(\"age\") int userAge){ System.out.println(\"age:\"+userAge); map.put(\"age\",userAge); return \"ShowUser\"; } } 调用map.put(&quot;age&quot;,userAge);的时候就会同步存到session域中。 6.10 @RestController创建REST类型的控制器（RESTFUL API） 6.11 HttpEntity（不是注解）能获得request请求和response响应，还能访问请求和请求头 6.12 @ModelAttribute可以作用在方法或方法参数上。作用在方法上时，表明该方法的目的时添加一个或多个模型属性。 @ModelAttribute一共具有如下三个作用： 绑定请求参数到命令对象：放在功能处理方法的入参上时，用于将多个请求参数绑定到一个命令对象，从而简化绑定流程，而且自动暴露为模型数据用于视图页面展示时使用； 暴露表单引用对象为模型数据：放在处理器的一般方法（非功能处理方法）上时，是为表单准备要展示的表单引用对象，如注册时需要选择的所在城市等，而且在执行功能处理方法（@RequestMapping注解的方法）之前，自动添加到模型对象中，用于视图页面展示时使用； 暴露@RequestMapping方法返回值为模型数据：放在功能处理方法的返回值上时，是暴露功能处理方法的返回值为模型数据，用于视图页面展示时使用。 7 HiddentHttpMethodFilter7.1 作用由于浏览器 form 表单只支持 GET 与 POST 请求，而 DELETE、PUT 等 method 并不支持，Spring3.0 添加了一个过滤器，可以将浏览器请求改为指定的请求方式，发送给我们的控制器方法，使得支持 GET、POST、PUT与 DELETE 请求。 7.2 使用方法 在 web.xml 中配置该过滤器。 请求方式必须使用 post 请求。 按照要求提供_method 请求参数，该参数的取值就是我们需要的请求方式。","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"SpringMVC","slug":"SpringMVC","permalink":"https://www.codetool.top/tags/SpringMVC/"}]},{"title":"leetcode11-盛最多水的容器","slug":"leetcode11-盛最多水的容器","date":"2020-02-26T17:17:55.000Z","updated":"2020-02-26T17:26:42.449Z","comments":true,"path":"article/leetcode11-盛最多水的容器/","link":"","permalink":"https://www.codetool.top/article/leetcode11-%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/","excerpt":"","text":"1 原题给定 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点 (i, ai) 。在坐标内画 n 条垂直线，垂直线 i 的两个端点分别为 (i, ai) 和 (i, 0)。找出其中的两条线，使得它们与 x 轴共同构成的容器可以容纳最多的水。 说明： 你不能倾斜容器，且 n 的值至少为 2。 图中垂直线代表输入数组 [1,8,6,2,5,4,8,3,7]。在此情况下，容器能够容纳水（表示为蓝色部分）的最大值为 49。 示例: 输入: [1,8,6,2,5,4,8,3,7]输出: 49 2 解法2.1 思想两个线段之间形成的区域始终受较短长度的限制。 另外，两个线段之间的距离越大，获得的面积越大。 我们在数组中使用两个指针，一个在开头，一个在末尾。 每次移动将较短的线段向较长的线段移动一步。并在过程中记录出现的最大面积。 2.2 代码public class Solution { public int maxArea(int[] height) { int max = 0; int left = 0; int right = height.length - 1; while (left &lt; right) { max = Math.max(max, Math.min(height[left], height[right]) * (right - left)); if (height[left] &lt; height[right]) left++; else right--; } return max; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"计网复习01计算机网络概述","slug":"计网复习01计算机网络概述","date":"2020-02-26T13:06:34.000Z","updated":"2020-02-26T14:45:47.659Z","comments":true,"path":"article/计网复习01计算机网络概述/","link":"","permalink":"https://www.codetool.top/article/%E8%AE%A1%E7%BD%91%E5%A4%8D%E4%B9%A001%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%A6%82%E8%BF%B0/","excerpt":"","text":"偶然翻到了我上课期间做的思维导图，发出来水一水博客（今天太忙了） 本文参考资源： 计算机网络系列–什么是电路交换和分组交换？ - 帅地 - 博客园 电路交换，报文交换，分组交换_网络_天马流欣-CSDN博客 RTT（往返时间）和RPC_网络_IT徐胖子技术专栏-CSDN博客 计算机网络（一）图解：计算机网络五层体系结构_网络_腊八粥-CSDN博客 1 信息时代的作用 2 互联网概述 3 互联网组成 划重点： 3.1 电路交换 报文： 我们将位于应用层的信息分组称为报文，一般指完整的信息，传输层实现报文交付。 电路交换： 电路交换要求必须首先在通信双方之间建立连接通道。在连接建立成功之后，双方的通信活动才能开始。通信时双方会一直霸占这条路径，因此，电路连接的方式资源的利用率是比较低的。 为了解决这种资源利用率低的问题，引出了存储转发技术： 存储转发： 以太网交换机的控制器先将输入端口到来的数据包缓存起来，先检查数据包是否正确，并过滤掉冲突包错误。确定包正确后，取出目的地址，通过查找表找到想要发送的输出端口地址，然后将该包发送出去。 从而发展出了报文交换： 3.2 报文交换报文交换： 整个报文先传输到相邻的结点，全部存储下来后查找转发表，转发到下一个结点。这种方式并不常见，因为一个报文通常很大，某个路由必须收到一个完整的报文才能把报文转发出去，产生较大的传输时延，因此效率较低。 分组： 分组是在网络中传输的二进制格式的单元，为了提供通信性能和可靠性，每个用户发送的数据会被分成多个更小的部分。在每个部分的前面加上一些必要的控制信息组成的首部，有时也会加上尾部，就构成了一个分组。它的起始和目的地是网络层。 分组交换： 将报文划分为分组转发，时延更低。 存储转发会出现的问题： 每个路由必须收到一个完整的报文/分组才能转发出去，产生传输时延 分组在进入路由器后要先在输入队列中等待处理。在路由器确定了转发接口后还需要在输出队列中等待转发，所以就产生了排队时延。 数据被划分之后为了转发加上了一些控制信息，增加了开销。 4 计算机网络类别 5 计算机网络性能 划重点： 5.1 速率数据的传送速率，也称数据率或比特率，单位是bit/s。网络的速率往往指的是额定速率或标称速率（理想速率）。 5.2 带宽在计算机网络中带宽用来表示网络中某通道传送数据的能力，网络带宽指在单位时间内网络中的某信道所能通过的“最高数据率”，单位也是bit/s。 参考如何理解计算机网络性能指标之速率与带宽的区别？ - 知乎 5.3 吞吐量吞吐量指的就是某时刻的速率，单位也是bit/s 5.4 时延5.4.1 发送时延主机或者路由器发送数据帧所需要的时间，发送时延的计算公式为： 数据帧长度/发送速率 5.4.2 传播时延电磁波在信道中传播一定距离需要花费的时间，传播时延的计算公式为： 信道长度/电磁波在信道上的传播速率 5.4.3 处理时延主机或者路由器在接受到分组时候要话费一定的时间进行处理，例如分析分组的首部，从分组中提取数据部分，运行差错检验或者查找适当的路由等等。 这部分可以忽略不计。 5.4.4 排队时延分组在进入路由器后要先在输入队列中等待处理。在路由器确定了转发接口后还需要在输出队列中等待转发，所以就产生了排队时延。 这部分可以忽略不计。 5.5 时延带宽积表示一个链路可以容纳的最多比特，计算公式为： 传播时延 * 带宽 5.6 往返时间RTTRTT(Round-Trip Time)往返时间在计算机网络中它是一个重要的性能指标。表示从发送端发送数据开始，到发送端收到来自接收端的确认（接收端收到数据后便立即发送确认，不包含数据传输时间）总共经历的时间。 它约等于传播时延*2 6 体系结构 划重点： 6.1 OSI七层模型 应用层： 应用程序间通信 传输单位APDU 表示层： 处理数据格式,加密 传输单位PPDU 会话层：建立,维护和管理会话 传输单位SPDU 传输层：建立端到端的链接 传输单位segment(段) 网络层：寻址和路由选择 传输单位packet 数据链路层：介质访问,链路管理 传输单位frame(帧) 物理层：物理层 比特流传输 传输单位BIT 6.2 TCP/IP四层模型 应用层:相当于OSI上三层 常见协议: FTP TELNET 传输层 TCP UDP 网络层 ICMP IP IGMP 链路层:相当于OSI下二层 ARP RARP 6.3 综合而来的五层模型 对应的各层中间设备： 对应各层的传输数据单元： 典型设备 中间设备 数据单元 网络协议 物理层 中继器、集线器 中继器、集线器 位（bit） 无 使用了光纤、 同轴电缆、双绞线…… 数据链路层 网卡、网桥、交换机 网桥、交换机 数据帧 （Frame） ARQ、SW、CSMA/CD、PPP、HDLC、ATM&nbsp; 网络层 路由器、防火墙、多层交换机 路由器 数据包（Packet） IP、ARP 、RARP 、ICMP&nbsp;、ICMPv6、IGMP、RIP 、OSPF 、BGP 传输层 进程和端口 四层路由器 TCP：报文段UDP：数据报 TCP&nbsp;&nbsp;UDP 应用层 应用程序，如FTP，SMTP ，HTTP 网关 报文（message） DHCP、DNS、FTP、HTTP、POP3、SMTP 、SSH 、TELNET","categories":[{"name":"计算机相关","slug":"计算机相关","permalink":"https://www.codetool.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/"}],"tags":[{"name":"计算机网络","slug":"计算机网络","permalink":"https://www.codetool.top/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"}]},{"title":"MySQL学习笔记之InnoDB引擎概述","slug":"MySQL学习笔记之InnoDB引擎概述（上）","date":"2020-02-26T07:27:17.000Z","updated":"2020-03-07T14:14:19.113Z","comments":true,"path":"article/MySQL学习笔记之InnoDB引擎概述（上）/","link":"","permalink":"https://www.codetool.top/article/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8BInnoDB%E5%BC%95%E6%93%8E%E6%A6%82%E8%BF%B0%EF%BC%88%E4%B8%8A%EF%BC%89/","excerpt":"","text":"该笔记为《MySQL技术内幕:InnoDB存储引擎》的读书笔记，多图预警。 1 MySQL体系结构 1.1 连接层（管理客户端的连接，维护线程池） 最上层是一些客户端和连接服务，引入了线程池的概念；实现基于 SSL 的安全连接。 每个客户端都会在服务器进程中拥有一个线程，这个连接的查询只会在这个单独的线程中执行。 当客户端连接到 MySQL 服务器时，服务器需要对其进行认证。如果使用了 SSL 安全套接字的方式连接，还会使用 X.509 证书认证。一旦客户端连接成功，服务器会继续验证该客户端是否具有执行某个特定查询的权限。 1.2 服务器（与具体存储引擎解耦，服务器通过 API 与存储引擎进行通信） SQL 接口 SQL 分析与优化 存储过程 触发器 视图 MySQL 会解析查询，并创建内部数据结构（解析树），然后对其进行各种优化，包括重写查询、决定表的读取顺序，以及选择合适的索引等。 优化器并不关心表使用的是什么存储引擎，但存储引擎对优化查询是有影响的。优化器会请求存储引擎提供容量或某个具体操作的开销信息，以及表数据的统计信息等。 对于 SELECT 语句，在解析查询前，服务器会先检查查询缓存，如果能够在其中找到对应的查询，服务器就不再执行查询解析、优化和执行的整个过程，而是直接返回查询缓存中的结果集。 1.3 存储引擎层（负责数据的存储和存取） 存储引擎层，存储引擎真正的负责了 MySQL 中数据的存储和提取。 存储引擎 API 包含了几十个底层函数，用于执行诸如“开启一个事务”或者“根据主键提取一行记录”等操作。但存储引擎不会去解析 SQL（InnoDB 是一个例外，它会解析外键定义，因为服务器没有实现该功能），不同存储引擎之间也不会相互通信，而只是简单地响应上层服务器的请求。 1.4 存储层（将数据存储到文件系统上） 数据存储层，主要是将数据存储在运行于裸设备的文件系统之上，并完成与存储引擎的交互。 2 InnoDB引擎与MyISAM引擎介绍2.1 InnoDB 支持事务 行锁设计 支持外键 使用MVCC 面向OLTP 2.2 MyISAM 3 InnoDB引擎介绍3.1 概述 3.2 InnoDB体系架构 3.3 后台线程 innodb_purge_threads 3.4 内存 innodb_buffer_pool_size innodb_buffer_pool_instances innodb_old_blocks_pct innodb_old_blocks_time innodb_log_buffer_size 3.5 CheckPoint技术CheckPoint技术即检查点技术，我在数据库理论之事务与恢复技术中有提及。不过当时对检查点相关的阐述是记录了提交的事务，然而InnoDB并不会立即写回磁盘，所以这里谈的是脏页的刷新。 4 InnoDB逻辑存储结构InnoDB的所有数据都被逻辑地存放在表空间，表空间又由段，区，页组成。 4.1 表空间默认情况下InnoDB存储引擎有一个共享表空间ibdata1，所有的数据都存放在这个表空间内。如果用户启用了参数innodb_file_per_table，则每张表的数据可以单独放到一个表空间内，对应一个ibd文件，称为独立表空间，它存放的只是数据、索引和插入缓冲 bitmap 页，其他数据，如回滚信息、插入缓冲索引页、系统事务信息、二次写缓冲等还是存放在原来的共享表空间中。 4.2 段段就是上图的segment区域，常见的段有数据段、索引段、回滚段等，在InnoDB存储引擎中，对段的管理都是由引擎自身所完成的。 数据段即为B+树的叶子节点，索引段即为B+树的非索引节点。 4.3 区 区就是上图的extent区域，区是由连续的页组成的空间，无论页的大小怎么变，区的大小默认总是为1MB。为了保证区中的页的连续性，InnoDB存储引擎一次从磁盘申请4-5个区，InnoDB页的大小默认为16kb，即一个区一共有64（1MB/16kb=16）个连续的页。每个段开始，先用32页（page）大小的碎片页来存放数据，在使用完这些页之后才是64个连续页的申请。这样做的目的是，对于一些小表或者是undo类的段，可以开始申请较小的空间，节约磁盘开销。 4.4 页页在一些文档里也被称为块。 页就是上图的page区域，也可以叫块。页是InnoDB磁盘管理的最小单位。默认大小为16KB，可以通过参数innodb_page_size来设置。常见的页类型有：数据页，undo页，系统页，事务数据页，插入缓冲位图页，插入缓冲空闲列表页，未压缩的二进制大对象页，压缩的二进制大对象页等。 4.5 行每个页允许存放 16KB/2 – 200 行的记录，即 7992 行记录。","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"MySQL","slug":"MySQL","permalink":"https://www.codetool.top/tags/MySQL/"}]},{"title":"leetcode7-整数反转","slug":"leetcode7-整数反转","date":"2020-02-25T17:25:51.000Z","updated":"2020-02-25T17:32:03.665Z","comments":true,"path":"article/leetcode7-整数反转/","link":"","permalink":"https://www.codetool.top/article/leetcode7-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/","excerpt":"","text":"1 原题给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。 示例1: 输入： 123输出： 321 示例2: 输入： -123输出： -321 示例3: 输入： 120输出： 21 注意: 假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−231, 231 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。 2 解法2.1 思想每次用%10取余就能获得原数字最后一位的数字，关键是怎么判断在运算过程中是否溢出。 2.2 代码class Solution { public int reverse(int x) { int ans = 0; boolean isNeg = false; if(x == Integer.MIN_VALUE) return 0; if(x &lt; 0){ isNeg = true; x = -x; } while(x!=0){ if(ans>Integer.MAX_VALUE/10) return 0; ans = ans*10+ x%10; x = x/10; } if(isNeg) ans = -ans; return ans; } } 然后有看到另一种很巧妙的判断溢出的方法： class Solution { public int reverse(int x) { int ans = 0; while (x != 0) { if ((ans * 10) / 10 != ans) { ans = 0; break; } ans = ans * 10 + x % 10; x = x / 10; } return ans; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"Spring之AOP配置","slug":"Spring之AOP配置","date":"2020-02-25T15:39:22.000Z","updated":"2020-02-25T15:45:43.842Z","comments":true,"path":"article/Spring之AOP配置/","link":"","permalink":"https://www.codetool.top/article/Spring%E4%B9%8BAOP%E9%85%8D%E7%BD%AE/","excerpt":"","text":"1 什么是AOP 在软件业，AOP为Aspect Oriented Programming的缩写，意为：面向切面编程，通过预编译方式和运行期间动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。 2 动态代理动态代理相关知识请移步Java反射机制和动态代理详解 2.1 不使用动态代理的项目/** * 账户的业务层实现类 */ public class AccountServiceImpl implements IAccountService{ private IAccountDao accountDao; private TransactionManager txManager; public void setTxManager(TransactionManager txManager) { this.txManager = txManager; } public void setAccountDao(IAccountDao accountDao) { this.accountDao = accountDao; } @Override public List&lt;Account> findAllAccount() { try { txManager.beginTransaction(); List&lt;Account> accounts = accountDao.findAllAccount(); txManager.commit(); return accounts; } catch (Exception e) { txManager.rollback(); throw new RuntimeException(e); } finally { txManager.release(); } } @Override public Account findAccountById(Integer accountId) { try { txManager.beginTransaction(); Account account = accountDao.findAccountById(accountId); txManager.commit(); return account; } catch (Exception e) { txManager.rollback(); throw new RuntimeException(e); } finally { txManager.release(); } } @Override public void saveAccount(Account account) { try { txManager.beginTransaction(); accountDao.saveAccount(account); txManager.commit(); } catch (Exception e) { txManager.rollback(); throw new RuntimeException(e); } finally { txManager.release(); } } @Override public void updateAccount(Account account) { try { txManager.beginTransaction(); accountDao.updateAccount(account); txManager.commit(); } catch (Exception e) { txManager.rollback(); throw new RuntimeException(e); } finally { txManager.release(); } } @Override public void deleteAccount(Integer acccountId) { try { txManager.beginTransaction(); accountDao.deleteAccount(acccountId); txManager.commit(); } catch (Exception e) { txManager.rollback(); throw new RuntimeException(e); } finally { txManager.release(); } } @Override public void transfer(String sourceName, String targetName, Float money) { try { txManager.beginTransaction(); //1.根据名称查询转出账户 Account source = accountDao.findAccountByName(sourceName); //2.根据名称查询转入账户 Account target = accountDao.findAccountByName(targetName); //3.转出减钱 source.setMoney(source.getMoney()-money); //4.转入加钱 target.setMoney(target.getMoney()+money); //5.更新转出账户 accountDao.updateAccount(source); int i = 10/0; //6.更新转入账户 accountDao.updateAccount(target); txManager.commit(); } catch (Exception e) { txManager.rollback(); e.printStackTrace(); } finally { txManager.release(); } } } 2.2 使用动态代理的项目public class BeanFactory { private IAccountService accountService; private TransactionManager txManager; public void setTxManager(TransactionManager txManager) { this.txManager = txManager; } public final void setAccountService(IAccountService accountService){ this.accountService = accountService; } /** * 获取Service代理对象 * @return */ public IAccountService getAccountService(){ return (IAccountService) Proxy.newProxyInstance(accountService.getClass().getClassLoader(), accountService.getClass().getInterfaces(), new InvocationHandler() { @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { Object rtValue = null; try { txManager.beginTransaction(); method.invoke(accountService,args); txManager.commit(); return rtValue; } catch (Exception e) { txManager.rollback(); throw new RuntimeException(e); } finally { txManager.release(); } } }); } } /** * 账户的业务层实现类 */ public class AccountServiceImpl implements IAccountService{ private IAccountDao accountDao; public void setAccountDao(IAccountDao accountDao) { this.accountDao = accountDao; } @Override public List&lt;Account> findAllAccount() { return accountDao.findAllAccount(); } @Override public Account findAccountById(Integer accountId) { return accountDao.findAccountById(accountId); } @Override public void saveAccount(Account account) { accountDao.saveAccount(account); } @Override public void updateAccount(Account account) { accountDao.updateAccount(account); } @Override public void deleteAccount(Integer acccountId) { accountDao.deleteAccount(acccountId); } @Override public void transfer(String sourceName, String targetName, Float money) { //1.根据名称查询转出账户 Account source = accountDao.findAccountByName(sourceName); //2.根据名称查询转入账户 Account target = accountDao.findAccountByName(targetName); //3.转出减钱 source.setMoney(source.getMoney()-money); //4.转入加钱 target.setMoney(target.getMoney()+money); //5.更新转出账户 accountDao.updateAccount(source); int i = 10/0; //6.更新转入账户 accountDao.updateAccount(target); } } 3 Spring中的AOP3.1 AOP相关术语JoinPoint（连接点）： 所谓连接点是指那些被拦截到的点。在 spring 中,这些点指的是方法,因为 spring 只支持方法类型的连接点。 Pointcut(切入点): 所谓切入点是指我们要对哪些 Joinpoint 进行拦截的定义。 Advice(通知/增强):所谓通知是指拦截到 Joinpoint 之后所要做的事情就是通知。通知的类型：前置通知,后置通知,异常通知,最终通知,环绕通知。 Introduction(引介):引介是一种特殊的通知在不修改类代码的前提下, Introduction 可以在运行期为类动态地添加一些方法或 Field。 Target(目标对象): 代理的目标对象。 Weaving(织入): 是指把增强应用到目标对象来创建新的代理对象的过程。spring 采用动态代理织入，而 AspectJ 采用编译期织入和类装载期织入。 Proxy（代理）: 一个类被 AOP 织入增强后，就产生一个结果代理类。 Aspect(切面): 是切入点和通知（引介）的结合。 3.2 maven配置&lt;dependency> &lt;groupId>org.aspectj&lt;/groupId> &lt;artifactId>aspectjweaver&lt;/artifactId> &lt;version>1.8.13&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>org.springframework&lt;/groupId> &lt;artifactId>spring-context&lt;/artifactId> &lt;version>5.2.3.RELEASE&lt;/version> &lt;/dependency> 3.3 编写业务层类public class AccountServiceImpl implements IAccountService { @Override public void saveAccount() { System.out.println(\"执行了保存\"); } @Override public void updateAccount(int i) { System.out.println(\"执行了更新\"); } @Override public int deleteAccount() { System.out.println(\"执行了删除\"); return 0; } } 3.4 编写通知类public class Logger { /** * 用于打印日志，计划让其在切入点方法执行之前执行 */ public void printLog(){ System.out.println(\"logger类中的printLog方法开始记录 日志\"); } } 3.5 基于XML的Spring配置3.5.1 配置文件&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?> &lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:aop=\"http://www.springframework.org/schema/aop\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd\"> &lt;!-- 配置Spring的IoC，把Service对象配置进来 --> &lt;bean id=\"accountService\" class=\"com.rhett.service.impl.AccountServiceImpl\">&lt;/bean> &lt;bean id=\"logger\" class=\"com.rhett.utils.Logger\">&lt;/bean> &lt;aop:config> &lt;!-- 配置切面 --> &lt;aop:aspect id=\"logAdvice\" ref=\"logger\"> &lt;!-- 配置通知的类型，并且建立通知方法和切入点方法的关联 --> &lt;aop:before method=\"printLog\" pointcut=\"execution(public void com.rhett.service.impl.AccountServiceImpl.saveAccount())\">&lt;/aop:before> &lt;/aop:aspect> &lt;/aop:config> &lt;/beans> Spring 中基于XML的AOP配置步骤 把通知类也交给Spring来管理（配置logger类） 使用aop:config标签表明开始AOP的配置 使用aop:aspect标签表明配置切面 id属性： 给切面提供一个唯一标识 ref属性：指定通知类bean的id 在aop:aspect标签的内部使用对应标签来配置通知的类型 3.5.2 通知的类型： 前置通知：aop:before method属性：指定一个方法作为前置通知 pointcut属性：切入点表达式，用于指定对业务层哪些方法增强 pointcut-ref属性：指定aop:pointcut配置的切入点表达式 后置通知: aop:after-returning，在切入点方法正常执行后执行 异常通知：aop:after-throwing，在切入点方法发生异常后执行 最终通知：aop:after，无论是否发生异常，总会最后执行。 切入点表达式的写法： 关键字：execution(表达式) 表达式：访问修饰符 返回值 包名.类名.方法名(参数列表) 全通配写法：* *..*.*(..) 访问修饰符可以省略 返回值可以使用通配符表示任意返回值 包名可以使用通配符表示任意包，但是有几级包，就需要写几个* 包名可以使用..表示当前包及其子包 类名和方法名 都可以使用 * 通配 参数列表： 可以直接写数据类型： 基本类型直接写名称 引用类型写包名.类名的方式 可以使用*表示任意类型 可以使用..表示有无参数均可 可以使用aop:pointcut来配置复用表达式，可以写在aop:aspect内部只在该切面生效，也可以写在aop:aspect外面对所有切面生效 &lt;aop:pointcut id=\"pt1\" expression=\"execution(public void com.rhett.service.impl.AccountServiceImpl.saveAccount())\"/> &lt;aop:after method=\"afterPrintLog\" pointcut-ref=\"pt1\">&lt;/aop:after> 环绕通知： 环绕通知需要显式地调用切入点方法。 Spring框架为我们提供了一个接口，ProceedingJoinPoint，该接口有一个方法proceed()，此方法就相当于明确调用切入点方法。该接口可以作为环绕通知的方法参数，在程序执行时，spring框架会为我们提供该接口的实现类供我们使用。 编写通知方法： public Object aroundPrintLog(ProceedingJoinPoint pjp){ Object rtValue = null; try { //前置通知... Object[] args = pjp.getArgs();//得到方法执行所需的参数 pjp.proceed(args); //后置通知... System.out.println(\"logger类中的aroundPrintLog方法开始记录日志\"); } catch (Throwable throwable) { //异常通知... throwable.printStackTrace(); } finally { //最终通知... } return rtValue; } 配置环绕通知： &lt;aop:pointcut id=\"pt1\" expression=\"execution(public void com.rhett.service.impl.AccountServiceImpl.saveAccount())\"/> &lt;aop:around method=\"aroundPrintLog\" pointcut-ref=\"pt1\"/> 3.6 基于注解的Spring配置开启AOP注解： &lt;aop:aspectj-autoproxy>&lt;/aop:aspectj-autoproxy> 或在配置类中配置： @EnableAspectJAutoProxy 通知类： @Component @Aspect public class Logger { //配置切入点表达式 @Pointcut(\"execution(* com.rhett.service.impl.AccountServiceImpl.saveAccount())\") private void pt1(){} /** * 前置通知 */ @Before(\"pt1()\") public void beforePrintLog(){ System.out.println(\"logger类中的beforePrintLog方法开始记录日志\"); } /** * 后置通知 */ @AfterReturning(\"pt1()\") public void afterReturningLog(){ System.out.println(\"logger类中的afterReturningLog方法开始记录日志\"); } /** * 异常通知 */ @AfterThrowing(\"pt1()\") public void afterThrowingPrintLog(){ System.out.println(\"logger类中的afterThrowingPrintLog方法开始记录日志\"); } /** * 最终通知 */ @After(\"pt1()\") public void afterPrintLog(){ System.out.println(\"logger类中的afterPrintLog方法开始记录日志\"); } @Around(\"pt1()\") public Object aroundPrintLog(ProceedingJoinPoint pjp){ Object rtValue = null; try { //前置通知... Object[] args = pjp.getArgs();//得到方法执行所需的参数 pjp.proceed(args); //后置通知... System.out.println(\"logger类中的aroundPrintLog方法开始记录日志\"); } catch (Throwable throwable) { //异常通知... throwable.printStackTrace(); } finally { //最终通知... } return rtValue; } }","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"https://www.codetool.top/tags/Spring/"}]},{"title":"数据库理论之范式与反范式","slug":"数据库理论之范式与反范式","date":"2020-02-25T08:53:41.000Z","updated":"2020-02-25T08:54:35.790Z","comments":true,"path":"article/数据库理论之范式与反范式/","link":"","permalink":"https://www.codetool.top/article/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA%E4%B9%8B%E8%8C%83%E5%BC%8F%E4%B8%8E%E5%8F%8D%E8%8C%83%E5%BC%8F/","excerpt":"","text":"1 函数依赖1.1 定义A 和 B 是两个属性集，来自同一关系模式，对于同样的 A 属性值，B 属性值也相同。这种关系称为函数依赖。 记作A-&gt;B ，称为B函数依赖于A。 1.2 部分函数依赖如果对于A的一个真子集A’存在A&#39;-&gt;B，称为B部分依赖于A。 1.3 完全函数依赖如果对于A的任意一个真子集A’都不存在A&#39;-&gt;B，称为B完全依赖于A。 1.4 平凡函数依赖当B的属性集是A的子集时，且存在A-&gt;B，称这种关系为平凡函数依赖 1.5 非平凡函数依赖当B的属性集不是A的子集时，且存在A-&gt;B，称这种关系为非平凡的函数依赖 1.6 传递函数依赖在某关系中，若存在 如果 X-&gt;Y(非平凡函数依赖, 完全函数依赖) ，Y-&gt;Z，则称 Z 对 X 有传递函数依赖。 注： X不包含Y，Y不确定X 2 超键、主键、候选键 超键(super key): 在关系中能唯一标识元组的属性集称为关系模式的超键 候选键(candidate key): 不含有多余属性的超键称为候选键。也就是在候选键中，若再删除属性，就不是键了！ 主键(primary key): 用户在候选键中任选一个作为关系的主键。 复合主键(compound primary key)：主键包含多个属性。 候选键中 X 决定所有属性的函数依赖是完全函数依赖 包含在任何一个候选键中的属性，称为主属性，不包含在候选键中的属性称为非主属性 3 范式3.1 1NF第一范式：不包含非原子项，即任一属性不可再分。 3.2 2NF第二范式：在第一范式的基础上。每个非主属性完全依赖于主键，不存在复合主键。 3.3 3NF第三范式：在第二范式的基础上。非主属性不能传递依赖于主键。 3.4 BCNF所有非主属性对每一个候选键都是完全函数依赖； 所有的主属性对每一个不包含它的候选键，也是完全函数依赖；没有任何属性完全函数依赖于非候选键的任何一组属性。 实例可以参考关系数据库的三大范式以及BCNF范式_数据库_jsj13263690918的博客-CSDN博客 4 反范式范式的出现是为了避免数据冗余，减少数据库的空间，减轻维护数据完整性的麻烦。 然而它也存在一些缺点： 按照范式的规范设计出来的表，等级越高的范式设计出来的表越多。而表越多，查询时越会涉及到一些连接操作，影响查询的效率。 当我们的业务所涉及的表非常多，并且我们对表的操作要时间上要尽量的快，这时可以考虑使用“反范式”。例如合并表、复制属性等操作。 反范式就是不遵从范式规则，允许数据库维护一些冗余数据，从而提高查询效率。 4.1 OLAP和OLTP中如何设计范式OLAP 一般冗余比较多，以查询分析为主，这种一般都是采用反范式设计，以提高查询效率。更新一般是定时大批量数据插入。 OLTP 则是尽可能消除冗余，以提高变更的效率。因为这种应用无时无刻不在频繁变化。","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"leetcode540-有序数组中的单一元素","slug":"leetcode540-有序数组中的单一元素","date":"2020-02-24T17:21:09.000Z","updated":"2020-02-24T17:38:22.725Z","comments":true,"path":"article/leetcode540-有序数组中的单一元素/","link":"","permalink":"https://www.codetool.top/article/leetcode540-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E5%8D%95%E4%B8%80%E5%85%83%E7%B4%A0/","excerpt":"","text":"1 原题给定一个只包含整数的有序数组，每个元素都会出现两次，唯有一个数只会出现一次，找出这个数。 示例1: 输入： [1,1,2,3,3,4,4,8,8]输出： 2 示例2: 输入： [3,3,7,7,10,11,11]输出： 10 注意: 您的方案应该在 O(log n)时间复杂度和 O(1)空间复杂度中运行。 2 解法2.1 思想最优解法：二分查找达到O(log n)时间复杂度。 保持数组个数为奇数（即永远只包含一个单一元素），每次取中间的元素，如果前面的元素与当前元素相等，又分两种情况： 前面的元素个数为偶数个，则除去选中本身的这一对，前面的元素个数为奇数个，说明单一元素出现在该元素前面，可以把要查找的结束位置指向当前元素对之前，在图中下一步指向2。 前面的元素个数为奇数个，则除去选中本身的这一对，前面的元素个数为偶数个，说明单一元素出现在该元素后面，可以把要查找的开始位置指向当前元素对之后，在图中下一步指向10。 如果当前元素和后面的元素相等情况也是类似的，可以逐一分析。 其他解法：暴力法，异或。 2.2 代码二分查找： class Solution { public int singleNonDuplicate(int[] nums) { int start = 0; int end = nums.length-1; while(start&lt;end){ int mid = (start+end)/2; if(mid%2==0) { if(nums[mid-1]==nums[mid]) end = mid-2; else if(nums[mid+1] == nums[mid]) start = mid+2; else return nums[mid]; }else{ if(nums[mid-1]==nums[mid]) start = mid+1; else if(nums[mid+1] == nums[mid]) end = mid-1; else return nums[mid]; } } return nums[start]; } } 暴力法： class Solution { public int singleNonDuplicate(int[] nums) { for (int i = 0; i &lt; nums.length - 1; i+=2) { if (nums[i] != nums[i + 1]) { return nums[i]; } } return nums[nums.length - 1]; } } 异或： class Solution { public int singleNonDuplicate(int[] nums) { int cur=0; for (int i:nums) cur=cur^i; return cur; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"Spring之注解配置IoC","slug":"Spring之注解配置IoC","date":"2020-02-24T14:14:43.000Z","updated":"2020-03-09T04:31:36.778Z","comments":true,"path":"article/Spring之注解配置IoC/","link":"","permalink":"https://www.codetool.top/article/Spring%E4%B9%8B%E6%B3%A8%E8%A7%A3%E9%85%8D%E7%BD%AEIoC/","excerpt":"","text":"1 注解配置1.1 定义配置 @Configuration：指定当前类是一个配置类 @ComponentScan：用于通过注解指定Spring在创建容器时要扫描的包@ComponentScan(basePackages=&quot;&quot;)或@ComponentScan(value=&quot;&quot;)指定包名 @Bean：用于把当前方法的返回值作为bean对象存入Spring的IoC容器中@Bean(name=&quot;&quot;)指定bean的id，默认值是当前方法的名称。 @Import：导入其他的配置类。@Import(Class对象)指定要导入的配置类（通常是被AnnotationConfigApplicationContext指定的主配置类关联其他的子配置类） 通过注解配置则获取ApplicationContext的时候需要通过实现类AnnotationConfigApplicationContext(Class对象)获取。 Spring只会扫描配置类下的@Bean 1.2 用于创建对象 @Component:将当前的类对象存入spring容器中 id可以通过@Component(value = &quot;&quot;)修改，如果不设置默认id是类名的首字母变小写。 在spring配置文件中配置扫描包范围： &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?> &lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:context=\"http://www.springframework.org/schema/context\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd\"> &lt;!-- 告知spring在创建容器时要扫描的包 --> &lt;context:component-scan base-package=\"com.rhett\">&lt;/context:component-scan> &lt;/beans> @Controller：一般用于表现层 @Service：一般用于业务层 @Repository：一般用于持久层 作用和属性和Component一样，只为区分三层的概念。 1.3 用于注入数据 @Autowired：自动按照类型注入，只要容器中有唯一的一个bean对象类型和要注入的变量类型匹配，就可以注入成功。 此时set方法不是必须的 如果容器中有多个类型可以匹配的bean对象，则会把要注入的变量的名称作为id查找是否有的对应的bean对象。 @Qualifier：再按照类中注入的基础之上再按照名称注入。它在给类成员注入时不能单独使用（需要配合@Autowired），但是在给方法参数注入时可以。 @Qualifier(value=&quot;&quot;)可以指定要装配的bean在容器中的id。 @Primary：可以指定当有多个类型可以匹配的bean对象优先注入的对象。 @Resource：直接按照bean的id注入，可以单独使用。 @Resource(name=&quot;&quot;)指定id。 以上三个注入都只能注入其他bean类型的数据，而基本类型和String类型无法使用上述注解实现。 集合类型的注入只能通过XML实现。 @Value()：用于注入基本类型和String类型。value可以使用Spring的SpEL表达式：${表达式} @PropertySource：用于指定properties文件的位置@PropertySource(value=&quot;&quot;)指定文件名称和路径，通过前缀classpath:指定类路径下的。 1.4 用于改变作用范围 @Scope：和bean标签中的scope属性的作用是一样的。 @Scope(value=&quot;&quot;)指定bean的作用范围。 1.5 和生命周期相关 @PreDestroy：指定销毁前调用的方法 @PostConstruct：指定构造后调用的方法 这两个注解都是写在方法上。 2 条件装配Bean有时候某些客观的因素会使一些Bean无法进行初始化，例如，在数据库连接池的配置中漏掉一些配置会造成数据源不能连接上。在这样的情况下，可能不希望IoC去装配数据源，Spring4提供了新注解@Conditional，它的作用是按照一定的条件进行判断，满足条件给容器注册bean。它还需要配合另外一个接口Condition来完成对应的功能： @Target({ElementType.TYPE, ElementType.METHOD}) @Retention(RetentionPolicy.RUNTIME) @Documented public @interface Conditional { /** * All {@link Condition Conditions} that must {@linkplain Condition#matches match} * in order for the component to be registered. */ Class&lt;? extends Condition>[] value(); } @FunctionalInterface public interface Condition { /** * Determine if the condition matches. * @param context the condition context * @param metadata metadata of the {@link org.springframework.core.type.AnnotationMetadata class} * or {@link org.springframework.core.type.MethodMetadata method} being checked * @return {@code true} if the condition matches and the component can be registered, * or {@code false} to veto the annotated component's registration */ boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata); } Conditional根据Condition中的match方法，返回true则注入bean，false则不注入。 3 基于xml配置的Spring IoC实例3.1 实体类/** * 账户的实体类 */ public class Account implements Serializable { private Integer id; private String name; private Float money; public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getName() { return name; } public void setName(String name) { this.name = name; } public Float getMoney() { return money; } public void setMoney(Float money) { this.money = money; } @Override public String toString() { return \"Account{\" + \"id=\" + id + \", name='\" + name + '\\'' + \", money=\" + money + '}'; } } 3.2 持久层/** * 账户的持久层接口 */ public interface IAccountDao { /** * 查询所有 * @return */ List&lt;Account> findAllAccount(); /** * 查询一个 * @return */ Account findAccountById(Integer accountId); /** * 保存 * @param account */ void saveAccount(Account account); /** * 更新 * @param account */ void updateAccount(Account account); /** * 删除 * @param accountId */ void deleteAccount(Integer accountId); } /** * 账户的持久层实现类 */ public class AccountDaoImpl implements IAccountDao { private QueryRunner runner; public void setRunner(QueryRunner runner) { this.runner = runner; } public List&lt;Account> findAllAccount() { try { return runner.query(\"select * from account\",new BeanListHandler&lt;Account>(Account.class)); } catch (SQLException e) { e.printStackTrace(); } return null; } public Account findAccountById(Integer accountId) { try { return runner.query(\"select * from account where id = ?\",new BeanHandler&lt;Account>(Account.class),accountId); } catch (SQLException e) { e.printStackTrace(); } return null; } public void saveAccount(Account account) { try { runner.update(\"insert into account(name,money) values(?,?)\",account.getName(),account.getMoney()); } catch (SQLException e) { e.printStackTrace(); } } public void updateAccount(Account account) { try { runner.update(\"update account set name=?,money=? where id=?\",account.getName(),account.getMoney(),account.getId()); } catch (SQLException e) { e.printStackTrace(); } } public void deleteAccount(Integer accountId) { try { runner.update(\"delete from account where id=?\",accountId); } catch (SQLException e) { e.printStackTrace(); } } } 3.3 业务层/** * 账户的业务层接口 */ public interface IAccountService { /** * 查询所有 * @return */ List&lt;Account> findAllAccount(); /** * 查询一个 * @return */ Account findAccountById(Integer accountId); /** * 保存 * @param account */ void saveAccount(Account account); /** * 更新 * @param account */ void updateAccount(Account account); /** * 删除 * @param accountId */ void deleteAccount(Integer accountId); } public class AccountServiceImpl implements IAccountService { private IAccountDao accountDao; public void setAccountDao(IAccountDao accountDao) { this.accountDao = accountDao; } public List&lt;Account> findAllAccount() { return accountDao.findAllAccount(); } public Account findAccountById(Integer accountId) { return accountDao.findAccountById(accountId); } public void saveAccount(Account account) { accountDao.saveAccount(account); } public void updateAccount(Account account) { accountDao.updateAccount(account); } public void deleteAccount(Integer accountId) { accountDao.deleteAccount(accountId); } } 3.4 Spring配置&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?> &lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd\"> &lt;!-- 业务层对象 --> &lt;bean id=\"accountService\" class=\"com.rhett.service.impl.AccountServiceImpl\"> &lt;!--注入Dao--> &lt;property name=\"accountDao\" ref=\"accountDao\">&lt;/property> &lt;/bean> &lt;!-- 配置Dao对象 --> &lt;bean id=\"accountDao\" class=\"com.rhett.dao.impl.AccountDaoImpl\"> &lt;property name=\"runner\" ref=\"runner\">&lt;/property> &lt;/bean> &lt;bean id=\"runner\" class=\"org.apache.commons.dbutils.QueryRunner\" scope=\"prototype\"> &lt;!-- 注入数据源 --> &lt;constructor-arg name=\"ds\" ref=\"dataSource\">&lt;/constructor-arg> &lt;/bean> &lt;!-- 配置数据源 --> &lt;bean id=\"dataSource\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\"> &lt;!-- 连接数据库的必备信息--> &lt;property name=\"driverClass\" value=\"com.mysql.cj.jdbc.Driver\">&lt;/property> &lt;property name=\"jdbcUrl\" value=\"jdbc:mysql://192.168.91.1:3306/learnSpring\">&lt;/property> &lt;property name=\"user\" value=\"root\">&lt;/property> &lt;property name=\"password\" value=\"123456\">&lt;/property> &lt;/bean> &lt;/beans> 3.5 测试类/** * 使用Junit单元测试，测试我们的配置 */ public class AccountServiceTest { ApplicationContext ac; IAccountService as; @Before public void init(){ //1.获取容器 ac = new ClassPathXmlApplicationContext(\"bean.xml\"); //2.得到业务层对象 as = ac.getBean(\"accountService\",IAccountService.class); } @Test public void testFindAll() { //3.执行方法 List&lt;Account> accounts = as.findAllAccount(); for(Account account:accounts){ System.out.println(account); } } @Test public void testFindOne() { //3.执行方法 Account account = as.findAccountById(1); System.out.println(account); } @Test public void testSave() { Account account = new Account(); account.setName(\"test\"); account.setMoney(12345f); as.saveAccount(account); } @Test public void testUpdate() { Account account = new Account(); account.setMoney(23456f); account.setId(4); as.updateAccount(account); } @Test public void testDelete() { as.deleteAccount(5); } } 4 基于注解配置的Spring IoC实例实体类不变。 4.1 持久层/** * 账户的持久层实现类 */ @Repository(\"accountDao\") public class AccountDaoImpl implements IAccountDao { @Autowired private QueryRunner runner; //不变... } 加入@Repository和@Autowired 4.2 业务层@Service(\"accountService\") public class AccountServiceImpl implements IAccountService { @Autowired private IAccountDao accountDao; //不变... } 加入@Service和@Autowired。 4.3 编写配置类/** * 该类是一个配置类，它的作用和bean.xml是一样的 */ @Configuration @ComponentScan(\"com.rhett\") @PropertySource(\"classpath:jdbcConfig.properties\") public class SpringConfiguration { @Value(\"${jdbc.driver}\") private String driver; @Value(\"${jdbc.url}\") private String url; @Value(\"${jdbc.username}\") private String username; @Value(\"${jdbc.password}\") private String password; /** * 用于创建一个QueryRunner对象 * @param dataSource * @return */ @Bean(name=\"runner\") @Scope(\"prototype\") public QueryRunner createQueryRunner(DataSource dataSource){ return new QueryRunner(dataSource); } @Bean(name=\"dataSource\") public DataSource createDataSource(){ try { ComboPooledDataSource ds = new ComboPooledDataSource(); ds.setDriverClass(driver); ds.setJdbcUrl(url); ds.setUser(username); ds.setPassword(password); return ds; } catch (PropertyVetoException e) { e.printStackTrace(); } return null; } } properties文件： jdbc.driver = com.mysql.cj.jdbc.Driver jdbc.url = jdbc:mysql://192.168.91.1:3306/learnSpring jdbc.username = root jdbc.password = 123456 4.4 测试类public class AccountServiceTest { ApplicationContext ac; IAccountService as; @Before public void init(){ //1.获取容器 ac = new AnnotationConfigApplicationContext(SpringConfiguration.class); //2.得到业务层对象 as = ac.getBean(\"accountService\",IAccountService.class); } //不变... } 5 Spring整合JUnit测试导入maven依赖： &lt;dependency> &lt;groupId>org.springframework&lt;/groupId> &lt;artifactId>spring-test&lt;/artifactId> &lt;version>5.2.3.RELEASE&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>junit&lt;/groupId> &lt;artifactId>junit&lt;/artifactId> &lt;version>4.12&lt;/version> &lt;scope>test&lt;/scope> &lt;/dependency> 使用JUnit提供的一个注解把原有的main方法替换称Spring提供的，它在运行时会自动创建Spring容器： @RunWith(SpringJUnit4ClassRunner.class) 告知Spring的运行器，Spring的IoC创建是基于xml还是注解的，并且说明位置： @ContextConfiguration(locations={})：指定xml文件的位置 @ContextConfiguration(classes={})：指定配置类所在的位置 修改之后的测试类： import java.util.List; /** * 使用Junit单元测试，测试我们的配置 */ @RunWith(SpringJUnit4ClassRunner.class) @ContextConfiguration(classes = SpringConfiguration.class) public class AccountServiceTest { @Autowired IAccountService as; //不变... }","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"https://www.codetool.top/tags/Spring/"}]},{"title":"数据库理论之并发控制","slug":"数据库理论之并发控制","date":"2020-02-24T12:55:06.000Z","updated":"2020-03-06T11:22:02.705Z","comments":true,"path":"article/数据库理论之并发控制/","link":"","permalink":"https://www.codetool.top/article/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA%E4%B9%8B%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6/","excerpt":"","text":"1 并发控制概述多用户数据库：允许多个用户同时使用的数据库（订票系统） 不同的多事务执行方式： 串行执行：每个时刻只有一个事务运行，其他事务必须等到这个事务结束后方能运行。 交叉并发方式：单处理机系统中，事务的并发执行实际上是这些并行事务的并行操作轮流交叉运行（不是真正的并发，但是提高了系统效率） 同时并发方式：多处理机系统中，每个处理机可以运行一个事务，多个处理机可以同时运行多个事务，实现多个事务真正的并行运行 并发执行带来的问题： 多个事务同时存取同一数据（共享资源） 存取不正确的数据，破坏事务一致性和数据库一致性 并发操作带来的数据不一致性包括 丢失修改（lost update） 不可重复读（non-repeatable read） 读脏数据（dirty read） 并发控制机制的任务： 对并发操作进行正确的调度 保证事务的隔离性 保证数据库的一致性 并发控制的主要技术： 封锁（locking）（主要使用的） 时间戳（timestamp） 乐观控制法（optimistic scheduler） 多版本并发控制（multi-version concurrency control ，MVCC） 2 封锁封锁：封锁就是事务 T 在对某个数据对象（例如表、记录等）操作之前，先向系统发出请求，对其加锁。加锁后事务 T 就对该数据对象有了一定的控制，在事务 T 释放它的锁之前，其它的事务不能更新此数据对象 确切的控制由封锁的类型决定，基本的封锁类型有两种：排它锁（X 锁，exclusive locks）、共享锁（S 锁，share locks） 排它锁又称写锁，对 A 加了排它锁之后，其他事务不能对 A 加 任何类型的锁（排斥读和写） 共享锁又称读锁，对 A 加了共享锁之后，其他事务只能对 A 加 S 锁，不能加 X 锁（只排斥写） 2.1 封锁协议在运用 X 锁和 S 锁对数据对象加锁时，需要约定一些规则：封锁协议（Locking Protocol） 何时申请 X 锁或 S 锁 持锁时间、何时释放 对封锁方式制定不同的规则，就形成了各种不同的封锁协议。 常用的封锁协议：三级封锁协议 三级封锁协议在不同程度上解决了并发问题，为并发操作的正确调度提供一定的保证。 2.1.1 一级封锁协议事务 T 在修改数据 R 之前，必须先对其加 X 锁，直到事务结束（commit/rollback）才释放。 一级封锁协议可以防止丢失修改。 如果是读数据，不需要加锁，所以它不能保证可重复读和不读“脏”数据。 2.1.2 二级封锁协议在一级封锁协议的基础（写要加 X 锁，事务结束释放）上，增加事务 T 在读入数据 R 之前必须先对其加 S 锁，读完后即可释放 S 锁。（读要加 S 锁，读完即释放） 二级封锁协议除了可以防止丢失修改，还可以防止读脏数据 由于读完数据即释放 S 锁， 不能保证不可重复读 2.1.3 三级封锁协议注意事务的隔离级别，如果事务的隔离级别是重复读（即MySQL默认的隔离级别，那么二级封锁协议和三级封锁协议没有区别，因为在T1执行的时候T2不能操作） 在一级封锁协议基础上增加事务 T 在读取数据 R 之前必须先对其加 S 锁，直到事务结束后释放。 三级封锁协议除了可以防止丢失修改和读脏数据外，还防止了不可重复读。 3 饥饿和死锁3.1 饥饿事务 T1 封锁了数据 R，事务 T2 又请求封锁 R，于是 T2 等待。T3 也请求封锁 R，当T1 释放了 R 上的封锁之后，系统首先批准了 T3 的请求，T2 仍然等待。 T4 又请求封锁 R，当 T3 释放了 R 上的封锁之后系统又批准了 T4 的请求……T2 有可能永远等待，这就是饥饿的情形 避免饥饿的方法：先来先服务 当多个事务请求封锁同一数据对象时，按请求封锁的先后次序对这些事务排队。该数据对象上的锁一旦释放，首先批准申请队列中第一个事务获得锁。 3.2 死锁死锁：事务 T1 封锁了数据 R1，T2 封锁了数据 R2。T1 又请求封锁 R2，因 T2 已封锁了 R2， 于是 T1 等待 T2 释放 R2 上的锁。接着 T2 又申请封锁 R1 ，因 T1 已封锁了 R1 ，T2 也只能等待 T1 释放 R1 上的锁。这样 T1 在等待 T2，而 T2 又在等待 T1 ，T1 和 T2 两个事务永远不能结束，形成死锁。 解决死锁的方法： 预防、诊断和解除 3.2.1 死锁的预防产生死锁的原因是两个或多个事务都已经封锁了一些数据对象，然后又都请求对已被其他事务封锁的数据对象加锁，从而出现死等待。 预防死锁发生就是破坏产生死锁的条件 方法 一次封锁法： 要求每个事务必须一次将所有要使用的数据全部加锁，否则就不能继续执行。 存在的问题：降低系统的并发度；难以实现精确确定封锁对象 顺序封锁法： 预先对数据对象规定一个封锁顺序，所有事务都按这个顺序实施封锁。 存在的问题： 维护成本：数据库系统中的封锁对象极多，并且在不断地变化 难以实现：很难实现确定每一个事务要封锁哪些对象 DBMS普通采用采用的诊断并解除死锁的方法 3.2.2 死锁的诊断和解除方法：超时法和事务等待图法 超时法：如果一个事务的等待时间超过了规定的时限，就认为发生了死锁。优点是实现简单，缺点是会误判。 事务等待图法：用事务等待图动态反映所有事务的等待情况。 事务等待图是一个有向图 G=(T,U)，T 为结点的集合，每个结点表示正运行的事务，U为边的集合，每条边表示事务等待的情况。若 T1 等待 T2 ，则 T1 、T2 之间划一条有向边，从 T1 指向 T2。 如果图中形成了环说明发生了死锁。 解除死锁：并发控制子系统选择一个处理死锁代价最小的事务，将其撤销。释放该事务持有的所有的锁，使其他事务能够继续运行下去。 4 并发调度的可串行性4.1 可串行化调度执行结果等价于串行调度的调度就是正确的，这样的调度称为可串行化调度。 可串行性是并发事务正确调度的准则。按这个准则规定，一个给定的并发调度，当且仅当它是可串行化的，才认为是正确调度。 例：现在有两个事务，分别包含下列操作： 事务T1：读B；A=B+1；写回A 事务T2：读A；B=A+1；写回B 4.2 冲突可串行化调度冲突操作：不同的事务对同一个数据的读写和写写操作。 判断可串行化调度的充分条件: 不同事务的冲突操作和同一事务的两个操作是不能交换的。 我们用Ri(x)表示事务Ti读x，Wi(x)表示事务Ti写x。则Ri(x)和 Wj(x)不可交换，Wi(x)和Wj(x)不可交换 冲突可串行化调度：一个调度 Sc 在保证冲突操作的次序不变的情况下，通过交换两个事务不冲突操作的次序得到另一个调度 Sc’ ，如果 Sc’ 是串行的，称调度 Sc 为冲突可串行化的调度。 若一个调度是冲突可串行化，则一定是可串行化的。冲突可串行化调度是可串行化调度的充分条件而非必要条件，同样存在不满足冲突可串行化调度的可串行化调度。 5 两段锁协议DBMS 的并发控制机制必须提供一定的手段来保证调度是可串行化的。目前 DBMS 普遍采用两段锁协议（TwoPhase Locking，简称 2PL）的方法来显示并发调度的可串行性。 两段锁协议是指所有事务必须分两个阶段对数据对象进行加锁和解锁： 在对任何数据进行读写操作以前，首先要申请并获得对该数据的锁 。 在释放一个锁之后，事务不再申请和获得其他任何的锁。 “两段” 锁的含义：事务分为两个阶段: 第一阶段是获得封锁，也称为扩展阶段事务可以申请获得任何数据对象上的任何类型的锁，但是不能释放任何锁 第二阶段是释放封锁，也称为收缩阶段事务可以释放任何数据对象上的任何类型的锁，但是不能再申请任何锁 事务遵守两段锁协议是可串行化调度的充分条件，而不是必要条件。若并发事务都遵守两段锁协议，则对这些事务的任何并发调度策略都是可串行化的若并发事务的一个调度是可串行化的，不一定所有事务都符合两段锁协议 两段锁协议与防止死锁的一次封锁法: 一次封锁法要求每个事务必须一次将所有要使用的数据全部加锁，否则就不能继续执行，因此一次封锁法遵守两段锁协议 但是两段锁协议并不要求事务必须一次将所有要使用的数据全部加锁，因此遵守两段锁协议的事务可能发生死锁 6 封锁的粒度封锁对象的大小称为封锁粒度（granularity）。 封锁的对象可以是逻辑单元（属性值、属性值集合、元组、关系、索引项、数据库），也可以是物理单元（页、物理记录） 选择封锁粒度原则： 封锁粒度和系统的并发度和并发控制的开销密切相关 封锁的粒度越大，数据库所能够封锁的数据单元就越少，并发度就越低，系统开销也越小； 封锁的粒度越小，并发度较高，但系统开销也就越大。 6.1 多粒度封锁如果在一个系统中同时支持多种封锁粒度供不同的事务选择，这种封锁方法称为多粒度封锁。（multiple granularity locking） 选择封锁粒度应该同时考虑封锁开销和并发度两个因素，适当选择封锁粒度以求得最优的效果。 需要处理多个关系的大量元组的用户事务：以数据库为封锁单位 需要处理大量元组的用户事务：以关系为封锁单元 只处理少量元组的用户事务：以元组为封锁单位 多粒度树： 以树形结构来表示多级封锁粒度。根结点是整个数据库，表示最大的数据粒度，叶结点表示最小的数据粒度 多粒度封锁协议：允许多粒度树中的每个节点被独立地加锁，对一个节点加锁意味着这个节点的所有子节点也被加以同样类型的锁。因此，在多粒度封锁中一个数据对象可能以显式封锁和隐式封锁两种方式封锁。 显式封锁：直接加到数据对象上的封锁 隐式封锁：该数据对象没有独立加锁，是由于其上级结点加锁而使该数据对象加上了锁 显式封锁和隐式封锁的效果是一样的 系统检查封锁冲突时要检查显式封锁，还要检查隐式封锁 例如事务 T 要对关系 R1 加 X 锁，系统必须搜索其上级结点数据库、关系 R1，还要搜索 R1 的下级结点，即 R1 中的每一个元组 。 如果其中某一个数据对象已经加了不相容锁，则 T 必须等待。 对某个数据对象加锁，系统要检查该数据对象上有无显式封锁与之冲突；再检查其所有上级节点，看本事务的显式封锁是否与该数据对象上的隐式封锁 （由于上级节点已加的封锁造成的）冲突 ；还要检查其所有下级节点，看它们的显式封锁是否与本事务的隐式封锁（将加到下级节点的封锁）冲突 。 这种检查方法效率较低，引入一种新的锁：意向锁。有了 意向锁，DBMS 就无须逐个检查下一级节点的显式封锁。 6.2 意向锁意向锁：如果对一个节点加意向锁，则可说明该节点的下层节点正在被加锁；对任一节点加锁时，必须先对它的上层节点加意向锁。 例如，对任一元组加锁时，必须先对它所在的数据库和关系加意向锁。 三种常用的意向锁：意向共享锁（Intent Share Lock，IS 锁）；意向排它锁（Intent Exclusive Lock，IX 锁）；共享意向排它锁（Share Intent Exclusive Lock ，SIX 锁）。 6.2.1 IS 锁如果对一个数据对象加 IS 锁，表示它加的子节点拟加 S 锁。 例如：事务 T1 要对 R1 中某个元组加 S 锁，则要首先对关系 R1 和数据库加 IS 锁。 6.2.2 IX 锁如果对一个数据对象加 IX 锁，表示它的子节点拟加 X 锁。 例如：事务 T1 要对 R1 中某个元组加 X 锁，则要首先对关系 R1 和数据库加 IX 锁。 6.2.3 SIX 锁如果对一个数据对象加 SIX 锁，表示对它加 S 锁，再加 IX 锁，即 SIX = S + IX。 例如：对某个表加 SIX 锁，则表示该事务要读整个表（所以要对该表加 S 锁），同时会更新个别元组（所以要对该表加 IX 锁）。 意向锁的强度：锁的强度是指它对其他锁的排斥程度。一个事务在申请封锁时以强锁代替弱锁是安全的，反之则不然。 具有意向锁的多粒度封锁方法： 申请封锁时应该按自上而下的次序进行 释放封锁时则应该按自下而上的次序进行 优点： 提高了系统并发度。 减少了加锁和解锁的开销。 7 其他并发控制机制并发控制的方法除了封锁技术外，还有时间戳方法、乐观控制法和多版本并发控制。 时间戳方法：给每一个事务盖上一个时标，即事务开始的时间。每个事务具有唯一的时间戳，并按照这个时间戳来解决事务的冲突操作。如果发生冲突操作，就回滚到具有较早时间戳的事务，以保证其他事务的正常执行，被回滚的事务被赋予新的时间戳被从头开始执行。 乐观控制法：乐观控制法认为事务执行时很少发生冲突，所以不对事务进行特殊的管制，而是让 它自由执行，事务提交前再进行正确性检查。如果检查后 发现该事务执行中出现过冲突并影响了可串行性，则拒绝提交并回滚该事务。又称为验证方法。 多版本控制： 指在数据库中通过维护数据对象的多个版本信息来实现高效并发的一种策略。","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"leetcode64-最小路径和","slug":"leetcode64-最小路径和","date":"2020-02-23T16:53:20.000Z","updated":"2020-02-23T16:59:02.358Z","comments":true,"path":"article/leetcode64-最小路径和/","link":"","permalink":"https://www.codetool.top/article/leetcode64-%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/","excerpt":"","text":"1 原题给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。 说明： 每次只能向下或者向右移动一步。 示例: 输入：[ [1,3,1], [1,5,1], [4,2,1]]输出： 7解释： 因为路径 1→3→1→1→1 的总和最小。 2 解法2.1 思想动态规划，用一个数组记录某一个位置最小路径和，从右下角开始，往上一层（斜线）的元素的最小路径和为下面元素的最小路径和与右边元素的最小路径和中的最小值加上当前位置的数字。 当然也可以使用递归+记忆的方法求解，62、63我都是用递归+记忆求解的，这里就不用了。 2.2 代码class Solution { public int minPathSum(int[][] grid) { int height = grid.length; if(height == 0) return 0; int width = grid[0].length; int[][] pathLength = new int[height][width]; pathLength[height-1][width-1] = grid[height-1][width-1]; for(int sum = (height+width-3); sum>=0; sum--){ for(int i = 0;i&lt;=sum ;i++){ int j = sum-i; if(i>=height||j>=width) continue; if(i == height-1) pathLength[i][j] = pathLength[i][j+1] + grid[i][j]; else if(j == width-1) pathLength[i][j] = pathLength[i+1][j] + grid[i][j]; else pathLength[i][j] = Math.min(pathLength[i][j+1] ,pathLength[i+1][j])+ grid[i][j]; } } return pathLength[0][0]; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"https://www.codetool.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]},{"title":"Spring概述和IoC配置","slug":"Spring概述和IoC配置","date":"2020-02-23T15:28:30.000Z","updated":"2020-03-09T15:37:40.380Z","comments":true,"path":"article/Spring概述和IoC配置/","link":"","permalink":"https://www.codetool.top/article/Spring%E6%A6%82%E8%BF%B0%E5%92%8CIoC%E9%85%8D%E7%BD%AE/","excerpt":"","text":"1 spring概述Spring 是轻量级的 JavaEE 的开源框架，具有 IOC/DI，AOP，MVC，TX，ORM 等功能。优点是： DI （依赖注入）有效的降低了耦合度。 AOP（面向切面）提供了通用的任务的集中管理。 ORM（对象关系映射）简化了对数据库的访问。 低侵入式设计，代码污染极低。 2 spring的组成 3 IOC的概念和作用3.1 什么是程序的耦合耦合性(Coupling)，也叫耦合度，是对模块间关联程度的度量。耦合的强弱取决于模块间接口的复杂性、调用模块的方式以及通过界面传送数据的多少。模块间的耦合度是指模块之间的依赖关系，包括控制关系、调用关系、数据传递关系。模块间联系越多，其耦合性越强，同时表明其独立性越差( 降低耦合性，可以提高其独立性)。耦合性存在于各个领域，而非软件设计中独有的，但是我们只讨论软件工程中的耦合。 在软件工程中，耦合指的就是就是对象之间的依赖性。 对象之间的耦合越高，维护成本越高。因此对象的设计应使类和构件之间的耦合最小。软件设计中通常用耦合度和内聚度作为衡量模块独立程度的标准。划分模块的一个准则就是高内聚低耦合。 3.2 耦合的分类 内容耦合。当一个模块直接修改或操作另一个模块的数据时，或一个模块不通过正常入口而转入另一个模块时，这样的耦合被称为内容耦合。内容耦合是最高程度的耦合，应该避免使用之。 公共耦合。两个或两个以上的模块共同引用一个全局数据项，这种耦合被称为公共耦合。在具有大量公共耦合的结构中，确定究竟是哪个模块给全局变量赋了一个特定的值是十分困难的。 外部耦合。一组模块都访问同一全局简单变量而不是同一全局数据结构，而且不是通过参数表传递该全局变量的信息，则称之为外部耦合。 控制耦合。一个模块通过接口向另一个模块传递一个控制信号，接受信号的模块根据信号值而进行适当的动作，这种耦合被称为控制耦合。 标记耦合。若一个模块 A 通过接口向两个模块 B 和 C 传递一个公共参数，那么称模块 B 和 C 之间存在一个标记耦合。 数据耦合。模块之间通过参数来传递数据，那么被称为数据耦合。数据耦合是最低的一种耦合形式，系统中一般都存在这种类型的耦合，因为为了完成一些有意义的功能，往往需要将某些模块的输出数据作为另一些模块的输入数据。 非直接耦合。两个模块之间没有直接关系，它们之间的联系完全是通过主模块的控制和调用来实现的。 3.3 内聚与耦合内聚标志一个模块内各个元素彼此结合的紧密程度，它是信息隐蔽和局部化概念的自然扩展。内聚是从功能角度来度量模块内的联系，一个好的内聚模块应当恰好做一件事。它描述的是模块内的功能联系。耦合是软件结构中各模块之间相互连接的一种度量，耦合强弱取决于模块间接口的复杂程度、进入或访问一个模块的点以及通过接口的数据。 程序讲究的是低耦合，高内聚。就是同一个模块内的各个元素之间要高度紧密，但是各个模块之间的相互依存度却要不那么紧密。 内聚和耦合是密切相关的，同其他模块存在高耦合的模块意味着低内聚，而高内聚的模块意味着该模块同其他模块之间是低耦合。在进行软件设计时，应力争做到高内聚，低耦合。 4 IOC 控制反转（Inversion of Control，缩写为IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。其中最常见的方式叫做依赖注入（Dependency Injection，简称DI），还有一种方式叫“依赖查找”（Dependency Lookup）。通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体将其所依赖的对象的引用传递给它。也可以说，依赖被注入到对象中。 4.1 反射工厂这是一个简单了解IoC思想的小案例 public class BeanFactory { private static Properties props; //使用静态代码块为Properties赋值 static{ try { //实例化对象 props = new Properties(); //获取properties的流对象 InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream(\"bean.properties\"); props.load(in); } catch (Exception e) { throw new ExceptionInInitializerError(\"初始化properties失败!\"); } } /** * 根据bean的名称获取bean对象 * @param beanName * @return */ public static Object getBean(String beanName){ Object bean = null; try { String beanPath = props.getProperty(beanName); bean = Class.forName(beanPath).newInstance(); } catch (Exception e) { e.printStackTrace(); } return bean; } } 问题：每次都会创建新对象，是多例的 单例反射工厂： public class BeanFactory { private static Properties props; private static Map&lt;String,Object> beans; //使用静态代码块为Properties赋值 static{ try { //实例化对象 props = new Properties(); //获取properties的流对象 InputStream in = BeanFactory.class.getClassLoader().getResourceAsStream(\"bean.properties\"); props.load(in); beans = new HashMap&lt;String, Object>(); //取出配置文件中所有的key Enumeration keys = props.keys(); //遍历枚举 while(keys.hasMoreElements()){ //取出每个key String key = keys.nextElement().toString(); String beanPath = props.getProperty(key); Object value = Class.forName(beanPath).newInstance(); //把key和value存入容器中 beans.put(key,value); } } catch (Exception e) { throw new ExceptionInInitializerError(\"初始化properties失败!\"); } } /** * 根据bean的名称获取bean对象 * @param beanName * @return */ public static Object getBean(String beanName){ return beans.get(beanName); } } 而这种思想就是IOC的思想。 4.2 Spring中的IOC4.2.1 spring的maven配置&lt;dependency> &lt;groupId>org.springframework&lt;/groupId> &lt;artifactId>spring-context&lt;/artifactId> &lt;version>5.2.3.RELEASE&lt;/version> &lt;/dependency> 4.2.2 spring的总配置&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?> &lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd\"> &lt;!-- 把对象的创建交给spring来管理 --> &lt;bean id=\"accountService\" class=\"com.rhett.service.impl.AccountServiceImpl\"/> &lt;bean id=\"accountDao\" class=\"com.rhett.dao.impl.AccountDaoImpl\"/> &lt;/beans> 4.2.3 程序中获取bean//1. 获取核心容器对象 ApplicationContext ac = new ClassPathXmlApplicationContext(\"bean.xml\"); //2. 根据id获取bean对象 IAccountService as = (IAccountService) ac.getBean(\"accountService\"); IAccountDao adao = ac.getBean(\"accountDao\", IAccountDao.class); ApplicationContext的三个常用实现类： ClassPathXmlApplicationContext：它可以加载类路径下的配置文件 FileSystemXmlApplicationContext：它可以加载磁盘任意路径下的配置文件（必须有访问权限） AnnotationConfigApplicationContext：它是用于读取注解创建容器的 核心容器的两个接口BeanFactory和ApplicationContext的区别： BeanFactory 是不支持国际化功能的，因为 BeanFactory 没有扩展 Spring 中 MessageResource 接口。相反，由于 ApplicationContext 扩展了 MessageResource 接口，因而具有消息处理的能力。 ApplicationContext 的事件机制主要通过 ApplicationEvent 和 ApplicationListener 这两个接口来提供的，和 java swing 中的事件机制一样。即当 ApplicationContext 中发布一个事件的时，所有扩展了 ApplicationListener 的 Bean 都将会接受到这个事件，并进行相应的处理。 ApplicationContext 扩展了 ResourceLoader(资源加载器)接口，从而可以用来加载多个 Resource，而 BeanFactory 是没有扩展 ResourceLoader BeanFactroy 采用的是延迟加载形式来注入 Bean 的，即只有在使用到某个Bean 时，才对该 Bean 进行加载实例化，这样，我们就不能发现一些存在的 Spring 的配置问题。而 ApplicationContext 则相反，它是在容器启动时，一次性创建了所有的 Bean。这样，在容器启动时，我们就可以发现 Spring中存在的配置错误。 4.2.4 创建bean的三种方式第一种方式： 使用默认构造函数创建。在spring的配置文件中使用bean标签，如果此类中没有默认构造函数，则对象无法创建 &lt;bean id=\"accountService\" class=\"com.rhett.service.impl.AccountServiceImpl\"/> 第二种方式： 使用某个类中的方法创建对象，并存入spring容器 public class InstanceFactory { public IAccountService getAccountService(){ return new AccountServiceImpl(); } } &lt;bean id=\"instanceFactory\" class=\"com.rhett.factory.InstanceFactory\"/> &lt;bean id=\"accountService\" factory-bean=\"instanceFactory\" factory-method=\"getAccountService\"/> 第三种方式： 使用某个类中的静态方法创建对象，并存入spring容器 public class StaticFactory { public static IAccountService getAccountService(){ return new AccountServiceImpl(); } } &lt;bean id=\"instanceFactory\" class=\"com.rhett.factory.StaticFactory\" factory-method=\"getAccountService\"/> 4.2.5 bean的作用范围bean标签的scope属性用于指定bean的作用范围，取值： singleton：单例的（默认） prototype：多例的 request：作用于web应用的请求范围 session：作用于web应用的会话范围 global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session 4.2.6 bean对象的生命周期单例对象： 当容器创建时对象出生 只要容器还在，对象一直活着 容器销毁，对象消亡 单例对象的生命周期和容器相同 多例对象： 当我们使用对象时创建 对象只要在使用过程中就一直活着 当对象长时间不用，且没有别的对象引用时，被垃圾回收 有三种方式在 Bean 初始化后和销毁前添加一些操作。 Bean 的方法加上@PostConstruct 和@PreDestroy 注解（必须有 component-scan 才有效） 在Spring配置中定义 init-method 和 destory-method 方法 Bean 实现 InitializingBean 和 DisposableBean 接口 除此之外还有 BeanNameAware接口设置Bean名称 BeanFactoryAware/ApplicationContextAware接口设置IoC容器 BeanPostProcessor为所有的Bean添加预初始化方法和后初始化方法 最全概括： 实例化一个 Bean－－也就是我们常说的 new； 按照 Spring 上下文对实例化的 Bean 进行配置－－也就是 IOC 注入； 如果这个 Bean 已经实现了 BeanNameAware 接口，会调用它实现的 setBeanName(String)方法，此处传递的就是 Spring 配置文件中 Bean 的 id 值 如果这个 Bean 已经实现了 BeanFactoryAware 接口，会调用它实现的setBeanFactory，传递的是 Spring 工厂自身（可以用这个方式来获取其它 Bean，只需在 Spring 配置文件中配置一个普通的 Bean 就可以）； 如果这个 Bean 已经实现了 ApplicationContextAware 接口，会调用 setApplicationContext方法，传入 Spring 上下文（同样这个方式也可以实现步骤 4 的内容，但比 4 更好，因为 ApplicationContext 是 BeanFactory 的子接口，有更多的实现方法）； 如果Bean中有 @PostConstruct 标注的方法，会调用该方法。 如果Bean实现了InitializingBean接口，会调用AfterPropertiesSet方法 如果这个 Bean 关联了 BeanPostProcessor 接口，将会调用 postProcessBeforeInitialization(Object obj, String s)方法，BeanPostProcessor 经常用作是 Bean内容的更改，并且由于这个是在 Bean 初始化结束时调用那个的方法，也可以被应用于内存或缓存技术； 如果 Bean 在 Spring 配置文件中配置了 init-method 属性会自动调用其配置的初始化方法。 如果这个 Bean 关联了 BeanPostProcessor 接口，将会调用 postProcessAfterInitialization(Object obj, String s)方法 如果Bean中有 @PreDestroy 标注的方法，会调用该方法。 当 Bean 不再需要时，会经过清理阶段，如果 Bean 实现了 DisposableBean 这个接口，会调用那个其实现的 destroy方法； 最后，如果这个 Bean 的 Spring 配置中配置了 destroy-method 属性，会自动调用其配置的销毁方法。 4.3 spring中的依赖注入依赖注入：Dependency injection，DI 依赖关系的管理：交给spring来维护 在当前类需要用到其他类的对象，由spring为我们提供，我们只需要在配置文件中说明。依赖关系的维护就称之为依赖注入。 能注入的数据有三类： 基本类型和String 其他bean类型（在配置文件中或者注解配置过的bean） 复杂类型/集合类型 注入的方式，有三种： 第一种：使用构造函数提供 需要注入依赖的实体类： public class AccountServiceImpl implements IAccountService { private String name; private Integer age; private Date birthday; public AccountServiceImpl(String name, Integer age, Date birthday) { this.name = name; this.age = age; this.birthday = birthday; } public void saveAccount() { System.out.println(\"service中的saveAccount方法执行了\"+name+\",\"+age+\",\"+birthday); } } spring配置： &lt;bean id=\"accountService\" class=\"com.rhett.service.impl.AccountServiceImpl\"> &lt;constructor-arg name=\"name\" value=\"test\">&lt;/constructor-arg> &lt;constructor-arg name=\"age\" value=\"18\">&lt;/constructor-arg> &lt;constructor-arg name=\"birthday\" ref=\"now\">&lt;/constructor-arg> &lt;/bean> &lt;bean id=\"now\" class=\"java.util.Date\">&lt;/bean> 使用标签：&lt;constructor-arg&gt; 标签中的属性： type：用于指定要注入的数据类型 index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值，索引的位置从0开始 name：用于指定给构造函数中指定名称的参数赋值（通常通过这个就能找到对应的参数） value：用于提供基本类型和String类型的数据 ref：用于指定其他的bean类型数据，它指的就是在spring的Ioc容器中出现过的bean对象。 第二种：使用set方法提供 需要注入依赖的实体类： public class AccountServiceImpl implements IAccountService { private String name; private Integer age; private Date birthday; public void setName(String name) { this.name = name; } public void setAge(Integer age) { this.age = age; } public void setBirthday(Date birthday) { this.birthday = birthday; } public void saveAccount() { System.out.println(\"service中的saveAccount方法执行了\"+name+\",\"+age+\",\"+birthday); } } spring配置： &lt;bean id=\"accountService\" class=\"com.rhett.service.impl.AccountServiceImpl\"> &lt;property name=\"name\" value=\"TEST\">&lt;/property> &lt;property name=\"age\" value=\"21\">&lt;/property> &lt;property name=\"birthday\" ref=\"now\">&lt;/property> &lt;/bean> &lt;bean id=\"now\" class=\"java.util.Date\">&lt;/bean> 使用标签：&lt;property&gt; 标签中的属性： name：用于指定注入时所调用的set方法名称 value：用于提供基本类型和String类型的数据 ref：用于指定其他的bean类型数据，它指的就是在spring的Ioc容器中出现过的bean对象。 复杂类型的注入： 需要注入依赖的实体类： public class AccountServiceImpl implements IAccountService { private String[] myStrs; private List&lt;String> myList; private Set&lt;String> mySet; private Map&lt;String,String> myMap; private Properties myProps; public void setMyStrs(String[] myStrs) { this.myStrs = myStrs; } public void setMyList(List&lt;String> myList) { this.myList = myList; } public void setMySet(Set&lt;String> mySet) { this.mySet = mySet; } public void setMyMap(Map&lt;String, String> myMap) { this.myMap = myMap; } public void setMyProps(Properties myProps) { this.myProps = myProps; } } spring配置： &lt;bean id=\"accountService\" class=\"com.rhett.service.impl.AccountServiceImpl\"> &lt;property name=\"myStrs\"> &lt;array> &lt;value>AAA&lt;/value> &lt;value>BBB&lt;/value> &lt;value>CCC&lt;/value> &lt;/array> &lt;/property> &lt;property name=\"myList\"> &lt;list> &lt;value>AAA&lt;/value> &lt;value>BBB&lt;/value> &lt;value>CCC&lt;/value> &lt;/list> &lt;/property> &lt;property name=\"mySet\"> &lt;set> &lt;value>AAA&lt;/value> &lt;value>BBB&lt;/value> &lt;value>CCC&lt;/value> &lt;/set> &lt;/property> &lt;property name=\"myMap\"> &lt;map> &lt;entry key=\"testA\" value=\"aaa\">&lt;/entry> &lt;entry key=\"testB\"> &lt;value>bbb&lt;/value> &lt;/entry> &lt;/map> &lt;/property> &lt;property name=\"myProps\"> &lt;props> &lt;prop key=\"testC\">ccc&lt;/prop> &lt;prop key=\"testD\">ddd&lt;/prop> &lt;/props> &lt;/property> &lt;/bean> property标签中需要搭配array、list、set、map、props使用，其中array、list、set可以互换通用，map、props可以互换通用。 第三种：使用注解提供 见Spring之注解配置IoC （这篇博客的长度已经超出我预期了，一篇博客写那么多太不划算了🌚）","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"Spring","slug":"Spring","permalink":"https://www.codetool.top/tags/Spring/"}]},{"title":"快速失败(fail-fast)和安全失败(fail-safe)","slug":"快速失败-fail-fast-和安全失败-fail-safe","date":"2020-02-22T16:13:19.000Z","updated":"2020-02-22T16:29:34.966Z","comments":true,"path":"article/快速失败-fail-fast-和安全失败-fail-safe/","link":"","permalink":"https://www.codetool.top/article/%E5%BF%AB%E9%80%9F%E5%A4%B1%E8%B4%A5-fail-fast-%E5%92%8C%E5%AE%89%E5%85%A8%E5%A4%B1%E8%B4%A5-fail-safe/","excerpt":"","text":"1 快速失败在用迭代器遍历一个集合对象时，如果遍历过程中对集合对象的内容进行了修改（增加、删除、修改），则会抛出 Concurrent Modification Exception。 迭代器在遍历时直接访问集合中的内容，并且在遍历过程中使用一个 modCount 变量。集合在被遍历期间如果内容发生变化，就会改变 modCount 的值。每当迭代器使用 hashNext()/next()遍历下一个元素之前，都会检测 modCount 变量是否为 expectedModCount 值，是的话就返回遍历；否则抛出异常，终止遍历。 这个机制我在之前的博客中ArrayList源码分析中有提到，也分析了迭代器中关于判断modCount是否为期望值的源码部分。 下面主要来看安全失败(fail-safe) 2 安全失败采用安全失败机制的集合容器，在遍历时不是直接在集合内容上访问的，而是先复制原有集合内容，在拷贝的集合上进行遍历。 这点和CopyOnWriteArrayList在修改上的的机制很一致。 原理：由于迭代时是对原集合的拷贝进行遍历，所以在遍历过程中对原集合所作的修改并不能被迭代器检测到，所以不会触发 Concurrent Modification Exception。 比如我们来看ConcurrentHashMap的迭代器： static class Traverser&lt;K,V> { Node&lt;K,V>[] tab; // current table; updated if resized Node&lt;K,V> next; // the next entry to use TableStack&lt;K,V> stack, spare; // to save/restore on ForwardingNodes int index; // index of bin to use next int baseIndex; // current index of initial table int baseLimit; // index bound for initial table final int baseSize; // initial table size Traverser(Node&lt;K,V>[] tab, int size, int index, int limit) { //在这里复制tab this.tab = tab; this.baseSize = size; this.baseIndex = this.index = index; this.baseLimit = limit; this.next = null; } //遍历逻辑略 } 缺点：基于拷贝内容的优点是避免了 Concurrent Modification Exception，但同样地，迭代器并不能访问到修改后的内容，即：迭代器遍历的是开始遍历那一刻拿到的集合拷贝，在遍历期间原集合发生的修改迭代器是不知道的。 场景：java.util.concurrent 包下的容器都是安全失败，可以在多线程下并发使用，并发修改。 3 总结快速失败和安全失败是对迭代器而言的。 快速失败：当在迭代一个集合的时候，如果有另外一个线程在修改这个集合，就会抛出 ConcurrentModification 异常，java.util 下的集合类都是快速失败。 安全失败：在迭代时候会在集合二层做一个拷贝，所以在修改集合上层元素不会影响下层。在 java.util.concurrent 下的并发集合类都是安全失败。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"基础知识","slug":"基础知识","permalink":"https://www.codetool.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}]},{"title":"leetcode88-合并两个有序数组","slug":"leetcode88-合并两个有序数组","date":"2020-02-22T16:01:24.000Z","updated":"2020-02-28T17:43:27.483Z","comments":true,"path":"article/leetcode88-合并两个有序数组/","link":"","permalink":"https://www.codetool.top/article/leetcode88-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/","excerpt":"","text":"1 原题给定两个有序整数数组 nums1 和 nums2 ，将 nums2 合并到 nums1 中，使得 num1 成为一个有序数组。 说明： 初始化 nums1 和 nums2 的元素数量分别为 m 和 n。 你可以假设 nums1 有足够的空间（空间大小大于或等于 m + n*）来保存 *nums2 中的元素。 示例: 输入：nums1 = [1,2,3,0,0,0], m = 3nums2 = [2,5,6], n = 3输出： [1,2,2,3,5,6] 2 解法2.1 思想双指针，先把结果写到另一个数组，最后复制给nums1 2.2 代码class Solution { public void merge(int[] nums1, int m, int[] nums2, int n) { if(nums2.length==0) return; int[] nums = new int[nums1.length]; int i = 0; int j = 0; int cur = 0; while(i&lt;=m-1||j&lt;=n-1){ if(j!=n&amp;&amp;(i==m||nums1[i]>=nums2[j])) nums[cur++] = nums2[j++]; else nums[cur++] = nums1[i++]; } for(int a = 0; a &lt; nums1.length;a++){ nums1[a] = nums[a]; } } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode63-不同路径II","slug":"leetcode63-不同路径II","date":"2020-02-22T15:09:03.000Z","updated":"2020-02-22T15:28:43.399Z","comments":true,"path":"article/leetcode63-不同路径II/","link":"","permalink":"https://www.codetool.top/article/leetcode63-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84II/","excerpt":"","text":"1 原题一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。 现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？ 网格中的障碍物和空位置分别用 1 和 0 来表示。 说明： m 和 n 的值均不超过 100。 示例1: 输入：[ [0,0,0], [0,1,0], [0,0,0]]输出： 2解释：3x3 网格的正中间有一个障碍物。从左上角到右下角一共有 2 条不同的路径：1. 向右 -&gt; 向右 -&gt; 向下 -&gt; 向下2. 向下 -&gt; 向下 -&gt; 向右 -&gt; 向右 2 解法2.1 思想和leetcode62-不同路径类似，可以使用递归+记忆，每个位置的路径数为右边位置的路径数和下面位置的路径数之和，有障碍的点的路径数为0。 2.2 代码class Solution { int[][] grid; Integer[][] paths; int length; int height; public int uniquePathsWithObstacles(int[][] obstacleGrid) { grid = obstacleGrid; if(grid.length==0||grid[0].length==0) return 0; height = grid.length; length = grid[0].length; paths = new Integer[height][length]; return getPaths(0,0); } public int getPaths(int m,int n){ if(m==height||n==length) return 0; if(grid[m][n]==1) return 0; if(m == height-1 &amp;&amp; n==length-1) return 1; if(paths[m][n] != null) return paths[m][n]; int ans = getPaths(m+1,n)+getPaths(m,n+1); paths[m][n] = ans; return ans; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"数据库理论之事务与恢复技术","slug":"数据库理论之事务与恢复技术","date":"2020-02-22T14:43:45.000Z","updated":"2020-02-22T14:44:06.227Z","comments":true,"path":"article/数据库理论之事务与恢复技术/","link":"","permalink":"https://www.codetool.top/article/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA%E4%B9%8B%E4%BA%8B%E5%8A%A1%E4%B8%8E%E6%81%A2%E5%A4%8D%E6%8A%80%E6%9C%AF/","excerpt":"","text":"本文参考资源： 什么是事务？事务的四个特性、不考虑隔离会导致的三个问题以及四种隔离级别_数据库_cd546566850的博客-CSDN博客 1 基本概念事务：是用户定义的一个数据库操作序列 ，这些操作要么全做，要么全不做，是一个不可分割的工作单位。 在关系数据库中，一个事务可以是一条或多条 SQL 语句, 也可以包含一个或多个程序。一个程序通常包含多个事务 显式定义方式： begin transaction .... commit/rollback 隐式方式： 当用户没有显式地定义事务时，DBMS 按缺省规定自动划分事务（一句SQL语句一个事务） AutoCommit 事务是 SQL Server 默认事务方式, 2 事务的特性ACID 原子性（atomicity）： 一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做； 一致性（consistency）： 事务必须使数据库从一个一致性状态变成另一个一致性状态。 隔离性（isolation）：一个事务的执行不能被其他事务干扰。 持续性（durability）： 也称永久性，指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。 2.1 不考虑隔离性会导致的三个问题 脏读：脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。 不可重复读：一个事务两次读取同一行的数据，结果得到不同状态的结果，中间正好另一个事务更新了该数据，两次结果相异，不可被信任。通俗来讲就是：事务T1在读取某一数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，发送了不可重复读。 幻读（虚读）：一个事务执行两次查询，第二次结果集包含第一次中没有或某些行已经被删除的数据，造成两次结果不一致，只是另一个事务在这两次查询中间插入或删除了数据造成的。通俗来讲就是：例如事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读 2.2 解决办法（四种隔离级别） Read Uncommited（读取未提交内容） 读未提交，顾名思义，就是一个事务可以读取另一个未提交事务的数据。但是，读未提交产生了脏读，采用读提交可以解决脏读问题。 Read Commited（读取提交内容） 读提交，顾名思义，就是一个事务要等另一个事务提交后才能读取数据。 读提交，若有事务对数据进行更新（UPDATE）操作时，读操作事务要等待这个更新操作事务提交后才能读取数据，可以解决脏读问题。但是，读提交两次查询会产生不同的查询结果，就会造成不可重复读问题，采用重复读可以解决此问题。 Repeatable Read（重复读） 重复读，就是在开始读取数据（事务开启）时，不再允许修改操作。重复读可以解决不可重复读问题。应该明白的一点就是，不可重复读对应的是修改，即UPDATE操作。但是可能还会有幻读问题。因为幻读问题对应的是插入INSERT操作，而不是UPDATE操作。采用Serializable可以解决幻读问题 Serializable（可串行化） Serializable 是最高的事务隔离级别，在该级别下，事务串行化顺序执行，可以避免脏读、不可重复读与幻读。但是这种事务隔离级别效率低下，比较耗数据库性能，一般不使用。 注意 大多数数据库默认的事务隔离级别是Read committed，比如Sql Server, Oracle。Mysql的默认隔离级别是Repeatable read，只会出现幻读。 隔离级别的设置只对当前链接有效。对于使用MySQL命令窗口而言，一个窗口就相当于一个链接，当前窗口设置的隔离级别只对当前窗口中的事务有效；对于JDBC操作数据库来说，一个Connection对象相当于一个链接，而对于Connection对象设置的隔离级别只对该Connection对象有效，与其他链接Connection对象无关。 设置数据库的隔离级别一定要是在开启事务之前。 3 数据库恢复技术故障是不可避免的： 系统故障：计算机软、硬件故障 人为故障：操作员的失误、恶意的破坏等。 数据库的恢复： 把数据库从错误状态恢复到某一已知的正确状态（亦称为一致状态或完整状态） 3.1 故障的种类事务内部的故障 ： 有的是可以通过事务程序本身发现的 有的 是非预期的，不能由应用程序处理（如运算溢出、死锁等） 后面，事务故障仅指非预期的故障 事务故障的恢复：UNDO 撤销 系统故障： 造成系统停止运转的任何事件，使得系统要重新启动。（硬件错误、断电等） 影响正在运行的所有事务，但不破坏数据库。此时内存，尤其是数据库缓冲区中的内容全部丢失，所有运行事务非正常终止。 恢复： 未提交的事务：UNDO 撤销所有未完成的事务 已提交的事务，但缓冲区内容未完全写入磁盘：REDO 重做所有已提交的事务 介质故障： 系统故障称为软故障，介质故障称为硬故障（外存故障，如磁盘损坏） 恢复：装入数据库发生介质故障前某个时刻的数据副本，REDO 自此时开始的所有成功事务，将这些事务已提交的结果重新写入 计算机病毒： 计算机病毒是一种人为的故障或破坏，是一些恶作剧者研制的一种计算机程序。可以繁殖和传播，并造成对计算机系统包括数据库的危害。 总之： 各类故障，对数据库的影响有两种可能性 一是数据库本身被破坏 二是数据库没有被破坏，但数据可能不正确，这是由于事务的运行被非正常终止造成的。 3.2 恢复的实现技术恢复操作的基本原理：冗余 恢复机制涉及的两个关键问题： 如何建立冗余数据 数据转储 (backup) 日志文件 (logging) 如何利用这些冗余数据实施数据库恢复 3.2.1 数据转储转储是指 DBA 将整个数据库复制到其他存储介质上保存起来的过程，备用的数据称为后备副本或后援副本 数据库遭到破坏后可以将后备副本重新装入 重装后备副本只能将数据库恢复到转储时的状态 转储方式： 按不同的划分方法可以划分为静态/动态转储或海量/增量转储 3.2.1.1 静态转储： 定义：在系统中无事务运行时进行的转储操作。 转储开始的时刻数据库处于一致性状态，而转储不允许对数据库的任何存取、修改活动。静态转储得到的一定是一个数据一致性的副本。 优点：实现简单 缺点：降低了数据库的可用性 转储必须等待正运行的用户事务结束才能进行；新的事务必须等待转储结束才能执行 3.2.1.2 动态转储： 定义：转储期间允许对数据库进行存取或修改。转储和用户事务可以并发执行 。 优点：不用等待正在运行的用户事务结束；不会影响新事务的运行。 实现：必须把转储期间各事务对数据库的修改活动登记下来，建立日志文件后备副本加上日志文件就能把数据库恢复到某一时刻的正确状态 。 3.2.1.3 海量转储： 定义：每次转储全部数据库 特点：从恢复角度，使用海量转储得到的后备副本进行恢复更方便一些。 3.2.1.4 增量转储： 定义：每次只转储上一次转储后更新过的数据 特点：如果数据库很大，事务处理又十分频繁，则增量转储方式更实用更有效 3.2.2 日志文件日志文件(log)是用来记录事务对数据库的更新操作的文件。 日志文件的格式： 以记录为单位： 日志文件中需要登记的内容包括： 各个事务的开始标记(BEGIN TRANSACTION) 各个事务的结束标记(COMMIT 或 或 ROLLBACK) 各个事务的所有更新操作以上均作为日志文件中的一个日志记录 每个日志记录的内容： 事务标识（标明是哪个事务） 操作类型（插入、删除或修改） 操作对象（记录内部标识） 更新前数据的旧值（对插入操作而言，此项为空值） 更新后数据的新值（对删除操作而言, 此项为空值） 以数据块为单位 日志记录内容包括： 事务标识（标明是哪个事务） 被更新的数据块 日志文件的作用： 进行事务故障恢复 进行系统故障恢复 协助后备副本进行介质故障恢复 事务故障恢复和系统故障恢复必须用日志文件 在动态转储方式中必须建立日志文件，后备副本和日志文件结合起来才能有效地恢复数据库 静态转储方式中也可以建立日志文件（重新装入后备副本，然后利用日志文件把已完成的事务进行重做，对未完成事务进行撤销） 登记日志文件的基本原则： 登记的次序严格按并行事务执行的时间次序 必须先写日志文件，后写数据库 (只要没有记录事务的结束标记，就算多记录了一条实际没有执行的语句，恢复之后也会回滚) 3.3 恢复策略3.3.1 事务故障的恢复事务故障：事务在运行至正常终止点前被终止 恢复方法：由恢复子系统应利用日志文件撤消（UNDO）此事务已对数据库进行的修改 事务故障的恢复由系统自动完成，对用户是透明的，不需要用户干预 事务故障的恢复步骤： 反向扫描文件日志，查找该事务的更新操作。 对该事务的更新操作执行逆操作。即将日志记录中 “ 更新前的值” ” 写入数据库 。 插入操作，“更新前的值” 为空，则相当于做删除操作 删除操作，“更新后的值” 为空，则相当于做插入操作 若是修改操作，则相当于用修改前值代替修改后值 继续反向扫描日志文件，查找该事务的其他更新操作，并做同样处理。 如此处理下去，直至读到此事务的开始标记，事务故障恢复就完成了。 3.3.2 系统故障的恢复系统故障可能导致未完成事务对数据库的更新已写入数据库，或已提交事务对数据库的更新还留在缓冲区没来得及写入数据库，只需要做对应的UNDO或REDO操作。 3.3.3 介质故障的恢复 重装数据库 装入最新的后备副本，使数据库恢复到最近一次转储时的一致性状态（分为静态转储的副本和动态转储的副本，动态转储的副本还需配合日志文件做恢复） 装入有关的日志文件副本，重做已完成的事务 介质故障的恢复需要 DBA 介入 3.3.4 具有检查点的数据恢复利用日志技术进行数据库恢复存在两个问题： 搜索整个日志将耗费大量的时间 REDO 处理：事务实际上已经执行，又重新执行，浪费了大量时间 具有检查点的数据恢复技术在正常工作时周期性地执行如下操作：建立检查点，保存数据库状态。具体步骤是： 将当前日志缓冲区中的所有日志记录写入磁盘的日志文件上 在日志文件中写入一个检查点记录 将当前数据缓冲区的所有数据记录写入磁盘的数据库中 把检查点记录在日志文件中的地址写入一个重新开始文件 当事务 T 在一个检查点之前提交，T 对数据库所做的修改一定都已写入数据库","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"数据库","slug":"数据库","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"Mybatis一级缓存与二级缓存","slug":"Mybatis一级缓存与二级缓存","date":"2020-02-22T09:37:45.000Z","updated":"2020-02-22T10:34:20.768Z","comments":true,"path":"article/Mybatis一级缓存与二级缓存/","link":"","permalink":"https://www.codetool.top/article/Mybatis%E4%B8%80%E7%BA%A7%E7%BC%93%E5%AD%98%E4%B8%8E%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98/","excerpt":"","text":"本文参考资源： MyBatis 二级缓存全详解 - cxuan - 博客园 1 缓存存在于内存中的临时数据 减少和数据库的交互次数，提高执行效率 适用于缓存的数据： 经常查询并且不经常改变。 数据的正确与否对最终结果影响不大 2 一级缓存2.1 概述Mybatis中的一级缓存指的是SqlSession级别的缓存。 一个SqlSession对象通常表示用户和Mybatis建立的一次会话，在这个会话中，重复执行完全相同的查询语句且不受影响的情况下就会使用一级缓存。 每当一个SqlSession对象创建时，它会持有一个Executor执行器，直接和Connection打交道，当我们第一次执行查询之后，查询的结果会同时存入到这个Executor执行器中的一块区域： MyBatis 将缓存和对缓存相关的操作封装成了 Cache 接口中，Executor 接口的实现类 BaseExecutor 中拥有一个 Cache 接口的实现类 PerpetualCache，则对于 BaseExecutor 对象而言，它将使用 PerpetualCache 对象维护缓存。 PerpetualCache 实现原理其实很简单，其内部就是通过一个简单的 HashMap&lt;k,v&gt; 来实现的，没有其他的任何限制。 2.2 生命周期 MyBatis 在开启一个数据库会话时，会创建一个新的 SqlSession 对象，SqlSession 对象中会有一个新的 Executor 对象，Executor 对象中持有一个新的 PerpetualCache 对象；当会话结束时，SqlSession 对象及其内部的 Executor 对象还有 PerpetualCache 对象也一并释放掉。 如果 SqlSession 调用了 close()方法，会释放掉一级缓存 PerpetualCache 对象，一级缓存将不可用； 如果 SqlSession 调用了 clearCache()，会清空 PerpetualCache 对象中的数据，但是该对象仍可使用； SqlSession 中执行了任何一个 update 操作(update()、delete()、insert()) ，都会清空PerpetualCache 对象的数据，但是该对象可以继续使用； 2.3 工作流程 对于某个查询，根据 statementId,params,rowBounds 来构建一个 key 值，根据这个 key 值去缓存 Cache 中取出对应的 key 值存储的缓存结果； 判断从 Cache 中根据特定的 key 值取的数据数据是否为空，即是否命中； 如果命中，则直接将缓存结果返回； 如果没命中： 去数据库中查询数据，得到查询结果； 将 key 和查询到的结果分别作为 key,value 对存储到 Cache 中； 将查询结果返回； 一级缓存是一个粗粒度的缓存，没有更新缓存和缓存过期的概念 3 二级缓存3.1 概述MyBatis一级缓存最大的共享范围就是一个SqlSession内部，那么如果多个 SqlSession 需要共享缓存，则需要开启二级缓存，开启二级缓存后，会使用 CachingExecutor 装饰 Executor，进入一级缓存的查询流程前，先在CachingExecutor 进行二级缓存的查询，具体的工作流程如下所示 当二级缓存开启后，同一个命名空间(namespace) 所有的操作语句，都影响着一个共同的 cache，也就是二级缓存被多个 SqlSession 共享，是一个全局的变量。当开启缓存后，数据的查询执行的流程就是 二级缓存 -&gt; 一级缓存 -&gt; 数据库。 但二级缓存缓存的是数据而不是对象，当我们在使用二级缓存时，所缓存的类一定要实现 java.io.Serializable 接口，这种就可以使用序列化方式来保存对象。 3.2 使用二级缓存默认是不开启的，需要以下操作开启： 在Mybatis.xml总配置 &lt;settings> &lt;setting name=\"cacheEnabled\" value=\"true\"/> &lt;/settings> 因为 cacheEnabled 的取值默认就为 true，所以这一步可以省略不配置。为 true 代表开启二级缓存；为false 代表不开启二级缓存 在Mapper配置文件中配置 &lt;cache/> cache标签可以设置以下属性： eviction: 缓存回收策略，有这几种回收策略 LRU - 最近最少回收，移除最长时间不被使用的对象 FIFO - 先进先出，按照缓存进入的顺序来移除它们 SOFT - 软引用，移除基于垃圾回收器状态和软引用规则的对象 WEAK - 弱引用，更积极的移除基于垃圾收集器和弱引用规则的对象 默认是 LRU 最近最少回收策略 flushinterval: 缓存刷新间隔，缓存多长时间刷新一次，默认不清空，设置一个毫秒值 readOnly: 是否只读；true 只读，MyBatis 认为所有从缓存中获取数据的操作都是只读操作，不会修改数据。MyBatis 为了加快获取数据，直接就会将数据在缓存中的引用交给用户。不安全，速度快。读写(默认)：MyBatis 觉得数据可能会被修改。 size : 缓存存放多少个元素 type: 指定自定义缓存的全类名(实现Cache接口即可) blocking： 若缓存中找不到对应的key，是否会一直blocking，直到有对应的数据进入缓存。 在Select标签中配置 &lt;select id=\"\" useCache=\"true\"> ... &lt;/select> 3.3 注意 二级缓存是以namespace为单位的，不同namespace下的操作互不影响。 insert,update,delete操作会清空所在namespace下的全部缓存。 通常使用MyBatis Generator生成的代码中，都是各个表独立的，每个表都有自己的namespace。 多表操作一定不要使用二级缓存，因为多表操作进行更新操作，一定会产生脏数据。","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"mybatis","slug":"mybatis","permalink":"https://www.codetool.top/tags/mybatis/"}]},{"title":"数据库理论之查询处理和查询优化","slug":"数据库理论之查询处理和查询优化","date":"2020-02-22T03:37:08.000Z","updated":"2020-02-22T03:37:36.573Z","comments":true,"path":"article/数据库理论之查询处理和查询优化/","link":"","permalink":"https://www.codetool.top/article/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA%E4%B9%8B%E6%9F%A5%E8%AF%A2%E5%A4%84%E7%90%86%E5%92%8C%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/","excerpt":"","text":"关系数据库的查询处理和查询优化 1 查询处理查询处理是 是 RDBMS 执行查询语句的过程，其任务是把用户提交给 RDBMS 的查询语句转换为高效的查询执行计划。 1.1 查询处理步骤查询处理分为4个阶段：查询分析、查询检查、查询优化和查询执行。 查询分析（语法）对查询语句进行扫描、词法分析、语法分析 查询检查（语义）对合法的查询语句进行语义检查，即根据数据字典中有关的模式定义检查语句中的数据库对象，如关系名、属性名等是否存在和有效。 然后进行安全性、完整性检查。检查通过后把SQL语句转换成等价的关系代数表达式。RDBMS 一般采用查询树（语法树）来表示拓展的关系代数表达式。 查询优化查询优化就是选择一个高效执行的查询处理策略。分为代数优化和物理优化 代数优化是指关系代数表达式的优化，即按照一定的规则，通过对关系代数表达式进行等价变换，改变代数表达式中操作的次序和组合，使查询执行更高效。 物理优化是指通过存取路径和底层操作算法的选择进行的优化。选择的依据可以是基于规则的、基于代价的、基于语义的。 查询执行依据优化器得到的执行策略生成查询执行计划，由代码生成器生成执行这个查询计划的代码，然后 加以执行，回送查询结果。 1.2 查询操作算法(1) 全表扫描方法 (Table Scan)对查询的基本表顺序扫描，逐一检查每个元组是否满足选择条件，把满足条件的元组作为结果输出适合小表，不适合大表 (2) 索引扫描方法 (Index Scan)适合于选择条件中的属性上有索引(例如B+树索引或Hash索引)通过索引先找到满足条件的元组主码或元组指针，再通过元组指针直接在查询的基本表中找到元组。 当选择率较低时，基于索引的选择算法要优于全表扫描算法 。但在某些情况下，例如选择率较高，或者要查找的元组均匀地分布在查找的表中，这时基于索引的选择算法性能不如全表扫描算法。因此除了对表的扫描操作，还要加上对B+树索引的扫描操作，对每一个检索码，从 B+树根节点到叶子结点路径上的每个结点都要进行一次 IO 操作。 Hash树和B+树也有优劣，等下次写有关索引的时候再讲。 1.3 连接操作算法连接操作是查询处理中最耗时的操作之一 本节只讨论等值连接(或自然连接)最常用的实现算法，例： SELECT * FROM Student, SC WHERE Student.Sno=SC.Sno; (1) 嵌套循环算法 (nested loop join) 对外层循环(Student 表) 的每一个元组(s) ，检索内层循环(SC 表) 中的每一个元组(sc) 检查这两个元组在连接属性(Sno)上是否相等。 如果满足连接条件，则串接后作为结果输出，直到外层循环表中的元组处理完为止。 可见就是O(N2)的时间复杂度，十分耗时。 (2) 排序——合并算法(sort-merge join 或 merge join) 如果连接的表没有排好序，先对 Student 表和 SC 表按连接属性 Sno 排序 取 Student 表中第一个 Sno ，依次扫描 SC 表中具有相同 Sno 的元组 当扫描到 Sno 不相同的第一个 SC 元组时 ，返回 Student 表扫描它的下一个元组，再扫描 SC 表中具有相同 Sno 的元组，把它们连接起来 重复上述步骤直到 Student 表扫描完 这种算法具有动态规划的思想，Student表和SC表都只要扫描一遍，而且如果连接的属性有注册索引，并且索引是有序的，可以省去排序的时间。 对于大表，先排序后使用排序-合并连接算法执行连接，总的时间一般仍会减少。 (3) 索引连接 (index join) 算法 步骤： （前提）在 SC 表上已经建立属性 Sno 的索引。 对 Student 中每一个元组，由 Sno 值通过 SC 的索引查找相应的 SC 元组。 把这些 SC 元组和 Student 元组连接起来 循环执行1、2，直到Student表中的元组处理完为止 只有一个表需要索引 (4) Hash Join 算法 把连接属性作为 hash 码，用同一个hash 函数把 Student 表和 SC 表中的元组散列到 hash 表中。 划分阶段（Build） 对包含较少元组的表(如 Student 表) 进行一遍处理 把它的元组按 hash 函数分散到 hash 表的桶中 试探阶段（Probe） 对另一个表(SC 表) 进行一遍处理 把 SC 表的元组也按同一个 hash 函数（hash 码是连接属性）进行散列 把 SC 元组与桶中来自 Student 表并与之相匹配的元组连接起来 将小表转为哈希表，用表1 的 匹配字段用哈希函数映射到哈希表 上面 hash join 算法前提：假设两个表中较小的表在第一阶段后可以完全放入内存的 hash 桶中。 2 查询优化查询优化在关系数据库系统中有着非常重要的地位 关系查询优化是影响关系数据库管理系统性能的关键因素 由于关系表达式的语义级别很高，使关系系统可以从关系表达式中分析查询语义，提供了执行查询优化的可能性 2.1 概述2.1.1 关系系统的查询优化是关系数据库管理系统实现的关键技术又是关系系统的优点所在减轻了用户选择存取路径的负担 2.2 非关系系统用户使用过程化的语言表达查询要求，执行何种记录级的操作，以及操作的序列是由用户来决定的用户必须了解存取路径，系统要提供用户选择存取路径的手段，查询效率由用户的存取策略决定如果用户做了不当的选择，系统是无法对此加以改进的 2.2.1 查询优化的优点 用户不必考虑如何最好地表达查询以获得较好的效率 系统可以比用户程序的 “优化” 做得更好 优化器可以从数据字典中获取许多统计信息 ， 而用户程序则难以获得这些信息 。 如果数据库的物理统计信息改变了，系统可以自动对查询重新优化以选择相适应的执行计划。在非关系系统中必须重写程序，而重写程序在实际应用中往往是不太可能的。 优化器可以考虑数百种不同的执行计划，程序员一般只能考虑有限的几种可能性 。 优化器中包括了很多复杂的优化技术，这些优化技术往往只有最好的程序员才能掌握。系统的自动优化相当于使得所有人都拥有这些优化技术。 关系数据库管理系统通过某种代价模型计算出各种查询执行策略的执行代价，然后选取代价最小的执行方案 2.2.2 查询优化的总目标 选择有效的策略 求得给定关系表达式的值 使得查询代价最小( 实际上是较小) 2.3 一个实例一个关系查询可以对应不同的执行方案，其效率可能相差非常大。 例：求选修了2号课程的学生姓名。 SELECT Student.Sname FROM Student, SC WHERE Student.Sno=SC.Sno AND SC.Cno='2' 假定学生-课程数据库中有 1000 个学生记录，10000 个选课记录选修 2 号课程的选课记录为 50 个 第一种情况： 计算笛卡尔积 算法： 在内存中尽可能多地装入某个表(如 Student 表) 的若干块 ，留出一块存放另一个表(如 SC 表) 的元组。 把 SC 中的每个元组和 Student 中每个元组连接 ， 连接后的元组装满一块后就写到中间文件上 从 SC 中读入一块和内存中的 Student 元组连接，直到 SC 表处理完。 再读入若干块 Student 元组，读入一块 SC 元组 重复上述处理过程，直到把 Student 表处理完 作选择操作 依次读入连接后的元组，按照选择条件选取满足要求的记录 假定内存处理时间忽略。读取中间文件花费的时间 (同写中间文件一样) 需读入106块。 若满足条件的元组假设仅 50 个，均可放在内存。 作投影操作 把第 2 步的结果在 Sname 上作投影输出，得到最终结果 第一种情况下执行查询的总读写数据块 2100+106+106 第二种情况： 计算自然连接 执行自然连接，读取 Student 和 和 SC 表的策略不变，总的读取块数仍为 2100 块 自然连接的结果比第一种情况大大减少，为 104 个元组 写出数据块= 103 块 读取中间文件块，执行选择运算，读取的数据块= 103 块 把第 2 步结果投影输出。第二种情况下执行查询的总读写数据块=2100+103+103其执行代价大约是第一种情况的 488 分之一 第三种情况： 先对 SC 表作选择运算 ，只需读一遍 SC 表，存取100 块，因为满足条件的元组仅50个，不必使用中间文件。 读取 Student 表，把读入的 Student 元组和内存中的 SC 元组作连接。也只需读一遍Student 表共 100 块。 把连接结果投影输出第三种情况总的读写数据块=100+100其执行代价大约是第一种情况的万分之一，是第二种情况的 20 分之一 注：假如 SC 表的 Cno 字段上有索引 第一步就不必读取所有的 SC 元组而只需读取 Cno=‘2’ 的那些元组(50 个) 存取的索引块和 SC 中满足条件的数据块大约总共 3 ～4 块 若 Student 表在 Sno 上也有索引 不必读取所有的 Student 元组 因为满足条件的 SC 记录仅 50 个，涉及最多 50 个 个 Student 记录 读取 Student 表的块数也可大大减少 2.3.1 总结有选择和连接操作时，先做选择操作，这样参加连接的元组就可以大大减少，这是代数优化。 在 Q3 中 SC 表的选择操作算法有全表扫描或索引扫描，经过初步估算，索引扫描方法较优。 对于 Student 和 SC 表的连接，利用 Student 表上的索引，采用索引连接代价也较小，这就是物理优化。","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"优化","slug":"优化","permalink":"https://www.codetool.top/tags/%E4%BC%98%E5%8C%96/"},{"name":"数据库","slug":"数据库","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"leetcode530-二叉搜索树的最小绝对差","slug":"leetcode530-二叉搜索树的最小绝对差","date":"2020-02-21T16:45:13.000Z","updated":"2020-02-21T16:48:58.787Z","comments":true,"path":"article/leetcode530-二叉搜索树的最小绝对差/","link":"","permalink":"https://www.codetool.top/article/leetcode530-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE/","excerpt":"","text":"1 原题给定一个所有节点为非负值的二叉搜索树，求树中任意两节点的差的绝对值的最小值。 示例: 输入： &nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;2 输出：1解释：最小绝对差为1，其中 2 和 1 的差的绝对值为 1（或者 2 和 3）。 注意: 树中至少有2个节点。 2 解法2.1 思想中序遍历，计算两个相邻节点之间值的差的绝对值，比较出最小值。 2.2 代码class Solution { int min = Integer.MAX_VALUE; int last = -1; public int getMinimumDifference(TreeNode root) { traverse(root); return min; } public void traverse(TreeNode root){ if(root == null){ return; } traverse(root.left); if(last!=-1) min = Math.min(min,root.val-last); last = root.val; traverse(root.right); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"搜索树","slug":"搜索树","permalink":"https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode208-实现Trie(前缀树)","slug":"leetcode208-实现Trie(前缀树)","date":"2020-02-21T16:29:42.000Z","updated":"2020-02-21T16:34:22.263Z","comments":true,"path":"article/leetcode208-实现Trie(前缀树)/","link":"","permalink":"https://www.codetool.top/article/leetcode208-%E5%AE%9E%E7%8E%B0Trie(%E5%89%8D%E7%BC%80%E6%A0%91)/","excerpt":"","text":"1 原题实现一个 Trie (前缀树)，包含 insert, search, 和 startsWith 这三个操作。 示例: Trie trie = new Trie(); trie.insert(&quot;apple&quot;); trie.search(&quot;apple&quot;); // 返回 true trie.search(&quot;app&quot;); // 返回 false trie.startsWith(&quot;app&quot;); // 返回 true trie.insert(&quot;app&quot;); trie.search(&quot;app&quot;); // 返回 true说明: 你可以假设所有的输入都是由小写字母 a-z 构成的。 保证所有输入均为非空字符串。 2 解法2.1 思想我之前的博客算法竞赛常用数据结构-字典树Trie有介绍字典树的结构，字典树的实现总是跟着需求来的，这道题需要判断是否有前缀和是否有整个单词，可以为节点设置一项属性isLeaf（是否是一个单词的结尾字符）。 2.2 代码class Trie { class Node{ boolean isLeaf = false; Node[] children = new Node[26]; } Node root; /** Initialize your data structure here. */ public Trie() { root = new Node(); } /** Inserts a word into the trie. */ public void insert(String word) { char[] chars = word.toCharArray(); Node node = root; for(int n = 0;n&lt;chars.length;n++){ if(node.children[chars[n]-'a'] == null) node = (node.children[chars[n]-'a'] = new Node()); else node = node.children[chars[n]-'a']; } node.isLeaf = true; } /** Returns if the word is in the trie. */ public boolean search(String word) { char[] chars = word.toCharArray(); Node node = root; for(int n = 0;n&lt;chars.length;n++){ if(node.children[chars[n]-'a'] == null) return false; else node = node.children[chars[n]-'a']; } if(node.isLeaf==false) return false; return true; } /** Returns if there is any word in the trie that starts with the given prefix. */ public boolean startsWith(String prefix) { char[] chars = prefix.toCharArray(); Node node = root; for(int n = 0;n&lt;chars.length;n++){ if(node.children[chars[n]-'a'] == null) return false; else node = node.children[chars[n]-'a']; } return true; } } /** * Your Trie object will be instantiated and called as such: * Trie obj = new Trie(); * obj.insert(word); * boolean param_2 = obj.search(word); * boolean param_3 = obj.startsWith(prefix); */","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"搜索树","slug":"搜索树","permalink":"https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"}]},{"title":"Mybatis多表查询-映射关系配置","slug":"Mybatis多表查询-映射关系配置","date":"2020-02-21T13:27:04.000Z","updated":"2020-02-22T08:12:22.255Z","comments":true,"path":"article/Mybatis多表查询-映射关系配置/","link":"","permalink":"https://www.codetool.top/article/Mybatis%E5%A4%9A%E8%A1%A8%E6%9F%A5%E8%AF%A2-%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB%E9%85%8D%E7%BD%AE/","excerpt":"","text":"1 resultMap配置1.1 是什么resultMap处理结果集映射 1.2 基础使用 自动方法 如果resultType为POJO且属性名对应数据表中的字段名，会自动生成resultMap处理映射。 如果列名和属性名不匹配也可以使用SQL语句中的as给列名起别名，对应属性名产生映射 手动方法 id和result的不同点在于，在比较对象实例的时候id作为结果集的标识属性。这有助于提高总体性能，特别是应用缓存和嵌套结果映射的时候。 &lt;resultMap id=\"userinfoResultMap\" type=\"com.test.domain.Userinfo\"> &lt;id property=\"userid\" column=\"user_id\"/> &lt;result property=\"username\" column=\"user_name\"/> &lt;result property=\"password\" column=\"password\"/> &lt;/resultMap> 拓展resultMap &lt;resultMap id=\"userinfoAndAddressResultMap\" type=\"com.test.domain.Userinfo\" extends=\"userinfoResultMap\"> &lt;id property=\"address.addrid\" column=\"addrid\"/> &lt;result property=\"address.city\" column=\"city\"/> &lt;result property=\"address.street\" column=\"street\"/> &lt;result property=\"address.zip\" column=\"zip\"/> &lt;/resultMap> 2 一对一映射2.1 方法一：拓展resultMap2.2 方法二：嵌套resultMap&lt;resultMap id=\"userinfoAndAddressResultMap\" type=\"com.test.domain.Userinfo\"> &lt;id property=\"userid\" column=\"user_id\"/> &lt;result property=\"username\" column=\"user_name\"/> &lt;result property=\"password\" column=\"password\"/> &lt;association property=\"address\" resultMap=\"addressResultMap\">&lt;/association> &lt;/resultMap> association元素处理“一对一”这种类型关系 2.3 方法三：嵌套引入select语句&lt;resultMap id=\"addressResultMap\" type=\"com.test.domain.Address\"> &lt;id property=\"addrid\" column=\"addrid\"/> &lt;result property=\"city\" column=\"city\"/> &lt;result property=\"street\" column=\"street\"/> &lt;result property=\"zip\" column=\"zip\"/> &lt;/resultMap> &lt;select id=\"selectAddressById\" parameterType=\"int\" resultMap=\"addressResultMap\"> SELECT * FROM address WHERE addrid = #{addrid} &lt;/select> &lt;resultMap id=\"userinfoAndAddressResultMap\" type=\"com.test.domain.Userinfo\"> &lt;id property=\"userid\" column=\"user_id\"/> &lt;result property=\"username\" column=\"user_name\"/> &lt;result property=\"password\" column=\"password\"/> &lt;association property=\"address\" column=\"addrid\" select=\"selectAddressByID\"/> &lt;/resultMap> 拓展：如果需要启用延迟加载，即真正用到User中的Address的时候才进行对应sql语句的查询操作，可以在mybatis配置文件中把懒加载打开： &lt;settings> &lt;!-- 开启全局延迟加载 --> &lt;setting name=\"lazyLoadingEnabled\" value=\"true\"/> &lt;setting name=\"aggressiveLazyLoading\" value=\"false\"/> &lt;/setting> 3 一对多映射使用&lt;collection&gt;元素将一对多类型的结果映射到一个对象集合上。 3.1 方法一：内嵌结果resultMap&lt;resultMap id=\"employeeResultMap\" type=\"com.test.domain.Employee\"> &lt;id property=\"empid\" column=\"empid\"/> &lt;result property=\"empname\" column=\"empname\"/> &lt;/resultMap> &lt;resultMap id=\"departmentResultMap\" type=\"com.test.domain.Department\"> &lt;id property=\"depid\" column=\"depid\"/> &lt;result property=\"depname\" column=\"depname\"/> &lt;collection property=\"employees\" resultMap=\"employeeResultMap\">&lt;/collection> &lt;/resultMap> &lt;select id=\"selectDepartmentAndEmployeeById\" parameterType=\"int\" resultMap=\"departmentResultMap\"> SELECT dep.depid,dep.depname,emp.empid,emp.empname FROM department dep LEFT OUTER JOIN employee emp ON dep.depid = emp.empid WHERE dep.depid = #{depid} &lt;/select> 3.2 方法二：嵌套select语句&lt;resultMap id=\"employeeResultMap\" type=\"com.test.domain.Employee\"> &lt;id property=\"empid\" column=\"empid\"/> &lt;result property=\"empname\" column=\"empname\"/> &lt;/resultMap> &lt;resultMap id=\"departmentResultMap\" type=\"com.test.domain.Department\"> &lt;id property=\"depid\" column=\"depid\"/> &lt;result property=\"depname\" column=\"depname\"/> &lt;collection property=\"employees\" select=\"selectEmployeeById\" column=\"depid\">&lt;/collection> &lt;/resultMap> &lt;select id=\"selectEmployeeById\" parameterType=\"int\" resultMap=\"employeeResultMap\"> SELECT emp.empid,emp.empname FROM employee emp WHERE emp.empid = #{empid} &lt;/select> &lt;select id=\"selectDepartmentById\" parameterType=\"int\" resultMap=\"departmentResultMap\"> SELECT dep.depid,dep.depname FROM department dep WHERE dep.depid = #{depid} &lt;/select> 4 注意注意内嵌结果resultMap和嵌套select语句的思路是不同的，内嵌结果resultMap只执行一条sql语句，而嵌套select语句可以分别执行，还支持延迟加载。","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"mybatis","slug":"mybatis","permalink":"https://www.codetool.top/tags/mybatis/"}]},{"title":"Mybatis事务、连接池、动态SQL","slug":"Mybatis事务、连接池、动态SQL","date":"2020-02-21T12:38:07.000Z","updated":"2020-02-23T15:31:31.525Z","comments":true,"path":"article/Mybatis事务、连接池、动态SQL/","link":"","permalink":"https://www.codetool.top/article/Mybatis%E4%BA%8B%E5%8A%A1%E3%80%81%E8%BF%9E%E6%8E%A5%E6%B1%A0%E3%80%81%E5%8A%A8%E6%80%81SQL/","excerpt":"","text":"1 事务什么是事务？ 事务的四大特性ACID 不考虑隔离性会产生的三个问题 解决方法：四种隔离级别 以上内容见Mybatis事务、连接池、动态SQL mybatis通过sqlsession的commit和rollback实现提交和回滚 （通过Executor实现，Executor管理Connection） 如果使用SqlSessionFactory获取SqlSession的时候传递了参数： factory.openSesison(true); 可以实现自动提交 2 连接池我们在实际开发中都会使用连接池。因为它可以减少我们获取连接所需时间。 mybatis的连接池： POOLED UNPOOLED JNDI POOLED: javax.sql.DataSource UNPOOLED: 采用传统的获取连接的方式，虽然也实现了javax.sql.DataSource接口，但是并没有使用池的思想 JNDI: 采用服务器提供的JNDI实现，来获取DataSource对象，如果不是web或者maven的war工程，是不能使用的。 MyBatis是通过工厂模式来创建数据源 DataSource 对象的，MyBatis 定义了抽象的工厂接口：org.apache.ibatis.datasource.DataSourceFactory,通过其getDataSource()方法返回数据源DataSource。 上述三种不同类型的 type，则有对应的以下 dataSource 工厂： POOLED ：PooledDataSourceFactory UNPOOLED ：UnpooledDataSourceFactory JNDI ：JndiDataSourceFactory 2.1 Unpooled获取Connection当&lt;dataSource&gt;的type属性被配置成了”UNPOOLED”，MyBatis首先会实例化一个UnpooledDataSourceFactory工厂实例， 然后通过 getDataSource() 方法返回一个UnpooledDataSource 实例对象引用，我们假定为 dataSource。 使用 UnpooledDataSource 的 getConnection(),每调用一次就会产生一个新的 Connection 实例对象。 UnpooledDataSource 会做以下事情： 初始化驱动：判断 driver 驱动是否已经加载到内存中，如果还没有加载，则会动态地加载 driver 类，并实例化一个 Driver 对象，使用 DriverManager.registerDriver()方法将其注册到内存中，以供后续使用。 创建 Connection 对象：使用DriverManager.getConnection()方法创建连接。 配置 Connection 对象：设置是否自动提交 autoCommit 和隔离级别 isolationLevel。 返回 Connection 对象。 2.2 Pooled获取ConnectionPooledDataSource 将 java.sql.Connection 对象包裹成 PooledConnection 对象放到了 PoolState 类型的容器中维护。MyBatis 将连接池中的 PooledConnection 分为两种状态：空闲状态（idle）和活动状态(active)，这两种状态的 PooledConnection 对象分别被存储到PoolState 容器内的 idleConnections 和 activeConnections 两个 List 集合中： idleConnections: 空闲(idle)状态 PooledConnection 对象被放置到此集合中，表示当前闲置的没有被使用的 PooledConnection 集合，调用 PooledDataSource 的 getConnection()方法时，会优先从此集合中取 PooledConnection 对象。 当用完一个 java.sql.Connection 对象时，MyBatis 会将其包裹成 PooledConnection 对象放到此集合中。 activeConnections: 活动(active)状态的PooledConnection对象被放置到名为activeConnections的ArrayList中，表示当前正在被使用的PooledConnection集合，调用PooledDataSource的getConnection()方法时，会优先从idleConnections 集合中取PooledConnection 对象,如果没有，则看此集合是否已满，如果未满，PooledDataSource会创建出一个 PooledConnection，添加到此集合中，并返回。 popConnection()方法到底做了什么： 先看是否有空闲(idle)状态下的 PooledConnection 对象，如果有，就直接返回一个可用的 PooledConnection 对象；否则进行第 2 步。 查看活动状态的 PooledConnection 池 activeConnections 是否已满；如果没有满，则创建一个新的 PooledConnection 对象，然后放到 activeConnections 池中，然后返回此PooledConnection 对象；否则进行第三步； 看最先进入 activeConnections 池中的 PooledConnection 对象是否已经过期：如果已经过期，从 activeConnections 池中移除此对象，然后创建一个新的 PooledConnection 对象，添加到 activeConnections 中，然后将此对象返回；否则进行第 4 步。 线程等待 当我们的程序中使用完 Connection 对象时，如果不使用数据库连接池，我们一般会调用connection.close()方法，关闭 connection 连接，释放资源。 我们希望当 Connection 使用完后，调用.close()方法，而实际上 Connection 资源并没有被释放，而实际上被添加到了连接池中。 这里要使用代理模式，为真正的 Connection 对象创建一个代理对象，代理对象所有的方法都是调用相应的真正 Connection 对象的方法实现。当代理对象执行 close()方法时，要特殊处理，不调用真正 Connection 对象的 close()方法，而是将 Connection 对象添加到连接池中。 MyBatis 的 PooledDataSource 的 PoolState 内部维护的对象是 PooledConnection 类型的对象，而 PooledConnection 则是对真正的数据库连接 java.sql.Connection 实例对象的包裹器。 PooledConenction 实现了 InvocationHandler 接口，并且 proxyConnection 对象也是根据这个它来生成的代理对象。 3 动态SQL根据不同的条件需要执行不同的SQL命令，称为动态SQL 官方文档参考：https://mybatis.org/mybatis-3/dynamic-sql.html 3.1 条件判断在Mapper配置文件中，在sql中，可以写一些特殊的标签，其中的属性test用于判断条件，基于OGNL表达式 例：&lt;if test=&quot;title != null&quot;&gt; （逻辑运算用 and or） 3.2 if从若干条件中分支 &lt;select id=\"findActiveBlogLike\" resultType=\"Blog\"> SELECT * FROM BLOG WHERE state = ‘ACTIVE’ &lt;if test=\"title != null\"> AND title like #{title} &lt;/if> &lt;if test=\"author != null and author.name != null\"> AND author_name like #{author.name} &lt;/if> &lt;/select> 3.3 choose,when,otherwise从若干条件中选择一项 &lt;select id=\"findActiveBlogLike\" resultType=\"Blog\"> SELECT * FROM BLOG WHERE state = ‘ACTIVE’ &lt;choose> &lt;when test=\"title != null\"> AND title like #{title} &lt;/when> &lt;when test=\"author != null and author.name != null\"> AND author_name like #{author.name} &lt;/when> &lt;otherwise> AND featured = 1 &lt;/otherwise> &lt;/choose> &lt;/select> 3.4 where若写了where但if中没有一个条件满足，则SQL语句会执行失败 当编写where标签时，如果内容中第一个是and去掉第一个and 如果&lt;where&gt;中有内容会生成where关键字，如果没有内容不生成where关键字 &lt;select id=\"findActiveBlogLike\" resultType=\"Blog\"> SELECT * FROM BLOG &lt;where> &lt;if test=\"state != null\"> state = #{state} &lt;/if> &lt;if test=\"title != null\"> AND title like #{title} &lt;/if> &lt;if test=\"author != null and author.name != null\"> AND author_name like #{author.name} &lt;/if> &lt;/where> &lt;/select> 3.5 set动态更新（update）语句 &lt;update id=\"updateAuthorIfNecessary\"> update Author &lt;set> &lt;if test=\"username != null\">username=#{username},&lt;/if> &lt;if test=\"password != null\">password=#{password},&lt;/if> &lt;if test=\"email != null\">email=#{email},&lt;/if> &lt;if test=\"bio != null\">bio=#{bio}&lt;/if> &lt;/set> where id=#{id} &lt;/update> 3.6 foreach对一个集合进行遍历 可以传入可迭代对象 index是当前迭代的次数，item是当前迭代获取的元素 当使用map对象的时候，index是键，item是值 &lt;select id=\"selectPostIn\" resultType=\"domain.blog.Post\"> SELECT * FROM POST P WHERE ID in &lt;foreach item=\"item\" index=\"index\" collection=\"list\" open=\"(\" separator=\",\" close=\")\"> #{item} &lt;/foreach> &lt;/select> 3.7 bindbind 元素可以从 OGNL 表达式中创建一个变量并将其绑定到上下文 &lt;select id=\"selectBlogsLike\" resultType=\"Blog\"> &lt;bind name=\"pattern\" value=\"'%' + _parameter.getTitle() + '%'\" /> SELECT * FROM BLOG WHERE title LIKE #{pattern} &lt;/select> 3.8 sqlSQL元素用来定义能够被其他语句引用的可重用的SQL语句块，例如： &lt;sql id=\"userColumns\">id,username,password&lt;/sql> 这个SQL语句块能够被其他语句引用，配置代码如下: &lt;select id=\"selectUser\" parameterType=\"int\" resultType=\"hashmap\"> select&lt;include refid=\"userColumns\"/> from userinfo where id = #{id} &lt;/select>","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"mybatis","slug":"mybatis","permalink":"https://www.codetool.top/tags/mybatis/"}]},{"title":"leetcode62-不同路径","slug":"leetcode62-不同路径","date":"2020-02-20T16:23:37.000Z","updated":"2020-02-20T16:27:26.945Z","comments":true,"path":"article/leetcode62-不同路径/","link":"","permalink":"https://www.codetool.top/article/leetcode62-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/","excerpt":"","text":"1 原题一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。 问总共有多少条不同的路径？ 例如，上图是一个7 x 3 的网格。有多少可能的路径？ 说明： m 和 n 的值均不超过 100。 示例1: 输入： m = 3, n = 2输出： 3解释：从左上角开始，总共有 3 条路径可以到达右下角。1. 向右 -&gt; 向右 -&gt; 向下2. 向右 -&gt; 向下 -&gt; 向右3. 向下 -&gt; 向右 -&gt; 向右 示例2: 输入： m = 7, n = 3输出： 28 2 解法2.1 思想递归+记忆，每个位置的路径数为右边位置的路径数和下面位置的路径数之和。 2.2 代码class Solution { Integer[][] paths; public int uniquePaths(int m, int n) { paths = new Integer[m][n]; return getPaths(m,n); } public int getPaths(int m,int n){ if(m&lt;1||n&lt;1) return 0; if(m == 1||n==1) return 1; if(paths[m-1][n-1] != null) return paths[m-1][n-1]; int ans = getPaths(m-1,n)+getPaths(m,n-1); paths[m-1][n-1] = ans; return ans; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"使用Mybatis完成CRUD","slug":"使用Mybatis完成CRUD","date":"2020-02-20T14:37:25.000Z","updated":"2020-02-21T14:34:29.296Z","comments":true,"path":"article/使用Mybatis完成CRUD/","link":"","permalink":"https://www.codetool.top/article/%E4%BD%BF%E7%94%A8Mybatis%E5%AE%8C%E6%88%90CRUD/","excerpt":"","text":"1 实例1.1 POJO: Userpackage com.rhett.domain; import java.io.Serializable; import java.util.Date; public class User implements Serializable { private Integer id; private String username; private String address; private String sex; private Date birthday; public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } public String getSex() { return sex; } public void setSex(String sex) { this.sex = sex; } public Date getBirthday() { return birthday; } public void setBirthday(Date birthday) { this.birthday = birthday; } @Override public String toString() { return \"User [id=\" + id + \", username=\" + username + \", birthday=\" + birthday + \", sex=\" + sex + \", address=\" + address + \"]\"; } } 1.2 DAO接口package com.rhett.dao; import com.rhett.domain.User; import java.util.List; public interface IUserDao { /** * 查询所有操作 */ List&lt;User> findAll(); /** * 保存用户 * @param user */ void saveUser(User user); /** * 更新用户信息 * @param user */ void updateUser(User user); /** * 删除用户 * @param userId */ void deleteUser(Integer userId); /** * 根据id查找用户 * @param userId * @return */ User findById(Integer userId); /** * 模糊查询用户信息 * @param username * @return */ List&lt;User> findByName(String username); /** * 查询总用户数 * @return */ int findTotal(); } 1.3 mapper配置&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?> &lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"> &lt;mapper namespace=\"com.rhett.dao.IUserDao\"> &lt;!-- 配置查询所有操作 --> &lt;select id=\"findAll\" resultType=\"User\"> select * from user &lt;/select> &lt;!-- 保存用户 --> &lt;insert id=\"saveUser\" parameterType=\"User\"> &lt;!-- 插入数据后，获取数据的id --> &lt;selectKey keyProperty=\"id\" keyColumn=\"id\" resultType=\"int\" order=\"AFTER\"> select last_insert_id(); &lt;/selectKey> insert into user(username,address,sex,birthday) values (#{username},#{address},#{sex},#{birthday}); &lt;/insert> &lt;!-- 保存用户 --> &lt;update id=\"updateUser\" parameterType=\"User\"> update user set username=#{username},address=#{address},sex=#{sex},birthday=#{birthday} where id=#{id}; &lt;/update> &lt;!-- 删除用户 --> &lt;delete id=\"deleteUser\"> delete from user where id = #{uid}; &lt;/delete> &lt;!-- 根据id查询用户 --> &lt;select id=\"findById\" resultType=\"User\"> select * from user where id = #{uid}; &lt;/select> &lt;!-- 根据名称模糊查询用户 --> &lt;select id=\"findByName\" resultType=\"User\"> select * from user where username like #{username}; &lt;/select> &lt;!-- 获取用户的总记录条数 --> &lt;select id=\"findTotal\" resultType=\"int\"> select count(id) from user; &lt;/select> &lt;/mapper> 1.4 mybatis配置&lt;?xml version=\"1.0\" encoding=\"utf-8\" ?> &lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"> &lt;configuration> &lt;properties resource=\"db.properties\"/> &lt;settings> &lt;setting name=\"logImpl\" value=\"LOG4J\"/> &lt;/settings> &lt;typeAliases> &lt;package name=\"com.rhett.domain\">&lt;/package> &lt;/typeAliases> &lt;environments default=\"development\"> &lt;environment id=\"development\"> &lt;transactionManager type=\"JDBC\"/> &lt;dataSource type=\"POOLED\"> &lt;property name=\"driver\" value=\"${driver}\"/> &lt;property name=\"url\" value=\"${url}\"/> &lt;property name=\"username\" value=\"${username}\"/> &lt;property name=\"password\" value=\"${password}\"/> &lt;/dataSource> &lt;/environment> &lt;/environments> &lt;mappers> &lt;mapper resource=\"com/rhett/dao/IUserDao.xml\"/> &lt;/mappers> &lt;/configuration> 1.5 测试类package test; import com.rhett.dao.IUserDao; import com.rhett.domain.User; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.*; import org.junit.*; import java.io.IOException; import java.io.InputStream; import java.util.Date; import java.util.List; public class MybatisTest { InputStream in; SqlSession session; private IUserDao userDao; @Before public void init() throws IOException { // 1.读取配置文件 in = Resources.getResourceAsStream(\"mybatis.xml\"); // 2.创建SqlSessionFactory工厂 SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder(); SqlSessionFactory factory = builder.build(in); // 3.使用工厂生成SqlSession对象 session = factory.openSession(); // 4.使用SqlSession创建Dao接口的代理 userDao = session.getMapper(IUserDao.class); } @After public void destroy() throws IOException { session.commit(); // 6.释放资源 session.close(); in.close(); } @Test public void testFindAll() throws IOException { // 5.使用代理对象执行方法 List&lt;User> users = userDao.findAll(); for(User user:users){ System.out.println(user); } } /** * 测试保存操作 */ @Test public void testSave() throws IOException { User user = new User(); user.setUsername(\"mybatis save user get insertedId\"); user.setAddress(\"北京市顺义区\"); user.setSex(\"男\"); user.setBirthday(new Date()); System.out.println(\"保存操作之前：\"+user); // 5.使用代理对象执行方法 userDao.saveUser(user); System.out.println(\"保存操作之后：\"+user); } /** * 测试更新操作 */ @Test public void testUpdate() throws IOException { User user = new User(); user.setId(50); user.setUsername(\"mybatis update user\"); user.setAddress(\"北京市顺义区\"); user.setSex(\"女\"); user.setBirthday(new Date()); // 5.使用代理对象执行方法 userDao.updateUser(user); } /** * 测试更新操作 */ @Test public void testDelete() throws IOException { // 5.使用代理对象执行方法 userDao.deleteUser(48); } /** * 测试更新操作 */ @Test public void testFindOne() throws IOException { // 5.执行查询一个方法 User user = userDao.findById(50); System.out.println(user); } /** * 测试模糊查询 */ @Test public void testFindByName() throws IOException { // 5.使用代理对象执行方法 List&lt;User> users = userDao.findByName(\"%王%\"); for(User user:users){ System.out.println(user); } } /** * 测试查询总记录条数 */ @Test public void testFindTotal() throws IOException { // 5.使用代理对象执行方法 int count = userDao.findTotal(); System.out.println(count); } } 2 知识点2.1 SQL参数绑定2.1.1 #{}和${} #{}表示一个占位符，可以防止sql注入 ${}表示一个拼接符，将直接显示在sql中 2.1.2 OGNL表达式#{}中使用OGNL表达式： 它是 apache 提供的一种表达式语言，全称是：Object Graphic Navigation Language 对象图导航语言它是按照一定的语法格式来获取数据的。语法格式就是使用 #{对象.对象} 的方式 根据参数类型的不同可以填的也不同： 基本数据类型 使用#{0},#{1}...的格式 使用#{param1},{param2}...的格式 调用时使用自定义参数注解@Param(&quot;xx&quot;)，则可以使用#{xx} 对象的属性 使用#{属性名} Map的值 使用#{Map的键} 2.1.3 注意 当只有一个参数的时候且数据类型是基本类型，#{}内的内容可以随意填写 除非参数是Map类型，否则配置中的ParameterType不是必填 2.2 事务管理实现增删改时一定要去控制事务的提交，否则会默认回滚事务，使用SqlSession.commit()来实现事务提交。 2.3 插入数据之后获取id配置selectKey标签，id会自动封装到参数对象中： &lt;insert id=\"saveUser\" parameterType=\"USER\"> &lt;!-- 配置保存时获取插入的 id --> &lt;selectKey keyColumn=\"id\" keyProperty=\"id\" resultType=\"int\"> select last_insert_id(); &lt;/selectKey> insert into user(username,birthday,sex,address) values (#{username},#{birthday},#{sex},#{address}) &lt;/insert> 2.4 自动封装出现实体类属性和数据库字段名称不一致解决方案： 在SQL查询的时候给返回的字段用as起别名 用实体类中用注解给属性起别名 在Mapper xml配置文件中使用resultMap配置对应关系 &lt;resultMap id=\"userMap\" type=\"com.rhett.domain.User\"> &lt;!--主键字段的对应--> &lt;id property=\"\" column=\"\"/> &lt;result property=\"\" column=\"\"/> &lt;/resultMap> 然后在select标签中使用resultMap=”userMap”代替parameterType &lt;select id=\"findAll\" resultMap=\"userMap\">","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"mybatis","slug":"mybatis","permalink":"https://www.codetool.top/tags/mybatis/"}]},{"title":"leetcode53-最大子序和","slug":"leetcode53-最大子序和","date":"2020-02-20T12:05:06.000Z","updated":"2020-02-20T12:23:13.416Z","comments":true,"path":"article/leetcode53-最大子序和/","link":"","permalink":"https://www.codetool.top/article/leetcode53-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%92%8C/","excerpt":"","text":"1 原题原题 给定一个整数数组 nums ，找到一个具有最大和的连续子数组（子数组最少包含一个元素），返回其最大和。 示例: 输入： [-2,1,-3,4,-1,2,1,-5,4],输出： 6解释： 连续子数组 [4,-1,2,1] 的和最大，为 6。 进阶: 如果你已经实现复杂度为 O(n) 的解法，尝试使用更为精妙的分治法求解。 2 解法2.1 思想动态规划：以下标0为开始的位置，从左往右遍历数组，获得一个累加的sum，如果遇到在某个位置sum小于0（即前面元素和为负数），而且当前位置元素值大于sum，就可以把起始位置调整至当前位置。 2.2 代码class Solution { public int maxSubArray(int[] nums) { int sum = 0; int max = Integer.MIN_VALUE; for(int i = 0;i&lt;nums.length;i++){ if(nums[i]>=sum&amp;&amp;sum&lt;0){ sum = 0; } sum += nums[i]; if(sum>max) max = sum; } return max; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"https://www.codetool.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]},{"title":"leetcode5-最长回文子串","slug":"leetcode5-最长回文子串","date":"2020-02-19T17:25:24.000Z","updated":"2020-02-19T17:57:51.246Z","comments":true,"path":"article/leetcode5-最长回文子串/","link":"","permalink":"https://www.codetool.top/article/leetcode5-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/","excerpt":"","text":"1 原题给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。 示例1: 输入： “babad”输出： “bab”注意： “aba” 也是一个有效答案。 示例2: 输入： “cbbd”输出： “bb” 2 解法2.1 思想以每个字符或两个字符中间的位置为中心向两边延申看能达到两边对称的最大长度，如果超过记录的最大长度就把start和end位置记录下来，最后根据start和end返回对应的子字符串。 2.2 代码class Solution { int start = 0; int end = 0; char[] chars; public String longestPalindrome(String s) { if(s.equals(\"\")) return \"\"; chars = s.toCharArray(); for(int i = 0;i&lt;chars.length-1;i++){ expandLength(i,i); expandLength(i,i+1); } return s.substring(start,end+1); } public void expandLength(int left,int right){ if(chars[left] != chars[right]) return; while(left!=0&amp;&amp;right!=chars.length-1&amp;&amp;chars[left-1] == chars[right+1]){ left--; right++; } if(right-left>end-start){ start = left; end = right; } } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"LinkedHashMap源码分析","slug":"LinkedHashMap源码分析","date":"2020-02-19T14:58:28.000Z","updated":"2020-02-27T09:12:05.698Z","comments":true,"path":"article/LinkedHashMap源码分析/","link":"","permalink":"https://www.codetool.top/article/LinkedHashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","excerpt":"","text":"1 总结总结放前面防止太长不看： LinkedHashMap继承自HashMap，为Entry额外维护了两个属性：before和after，可以按照节点的插入顺序或者访问顺序为Entry维护一个链表，默认是按插入顺序排序的，遍历LinkedHashMap的时候就是通过链表的顺序访问。 LinkedHashMap将访问节点、移除节点从而调整链表的操作放在了afterNodeAccess,afterNodeRemoval中，但插入节点调整链表的逻辑并不是在afterNodeInsertion中，这个方法对LinkedHashMap总是无用的，然而子类可以重写这个方法实现类似LRU的功能。真正的插入节点调整链表的逻辑放在了newNode和newTreeNode中。 除了维护链表，其他操作和HashMap非常类似。 在SpringMVC的ModelMap中看过它的应用。 2 概述HashMap 是无序的，也就是说，迭代 HashMap 所得到的元素顺序并不是它们最初放置到HashMap 的顺序。HashMap 的这一缺点往往会造成诸多不便，因为在有些场景中，我们确需要用到一个可以保持插入顺序的 Map。庆幸的是，JDK 为我们解决了这个问题，它为HashMap 提供了一个子类 —— LinkedHashMap。虽然 LinkedHashMap 增加了时间和空间上的开销，但是它通过维护一个额外的双向链表保证了迭代顺序。特别地，该迭代顺序可以是插入顺序，也可以是访问顺序。因此，根据链表中元素的顺序可以将 LinkedHashMap 分为：保持插入顺序的 LinkedHashMap 和 保持访问顺序（LRU，get 后调整链表序，最新获取的放在最后）的 LinkedHashMap，其中 LinkedHashMap 的默认实现是按插入顺序排序的。 破例先看一下实现链表的结构： 3 重要内部类和字段3.1 EntryLinkedHashMap实现链表是重写了Entry内部类，将Entry连成链表： static class Entry&lt;K,V> extends HashMap.Node&lt;K,V> { Entry&lt;K,V> before, after; Entry(int hash, K key, V value, Node&lt;K,V> next) { super(hash, key, value, next); } } 可见Entry设计为了可作为双向链表的结点。 3.2 head &amp; tail链表的头节点： transient LinkedHashMap.Entry&lt;K,V> head; 链表的尾节点： transient LinkedHashMap.Entry&lt;K,V> tail; 3.3 accessOrderfinal boolean accessOrder; 这个决定链表的连接顺序，accessOrder为true代表按访问节点的顺序，false代表按插入节点的顺序。 4 重要方法4.1 put首先需要明确的是，LinkedHashMap是继承自HashMap，put方法并没有重写，并且我们在之前HashMap源码分析的时候提到putVal中有一个参数evict没有用到，它就是供LinkedHashMap使用的。 public V put(K key, V value) { return putVal(hash(key), key, value, false, true); } 4.1.1 putValfinal V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) { Node&lt;K,V>[] tab; Node&lt;K,V> p; int n, i; if ((tab = table) == null || (n = tab.length) == 0) //resize，给一个初始容量，n被赋予容量大小 n = (tab = resize()).length; //先获取原来的桶p，如果hash不冲突，直接插入节点 if ((p = tab[i = (n - 1) &amp; hash]) == null) tab[i] = newNode(hash, key, value, null); //hash冲突 else { Node&lt;K,V> e; K k; //虽然哈希冲突，但键是一样的 if (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != null &amp;&amp; key.equals(k)))) e = p; //如果已经是一棵红黑树 else if (p instanceof TreeNode) e = ((TreeNode&lt;K,V>)p).putTreeVal(this, tab, hash, key, value); //是链表 else { for (int binCount = 0; ; ++binCount) { if ((e = p.next) == null) { p.next = newNode(hash, key, value, null); //如果binCount大于TREEIFY_THRESHOLD - 1，则树化，可以猜测转红黑树 if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st treeifyBin(tab, hash); break; } //遇到了相同的键，退出循环 if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) break; p = e; } } if (e != null) { // existing mapping for key V oldValue = e.value; //如果onlyIfAbsent不为true或原来的value为null，替换value if (!onlyIfAbsent || oldValue == null) e.value = value; //待分析 afterNodeAccess(e); return oldValue; } } ++modCount; //大于threshold则扩容 if (++size > threshold) resize(); //待分析 afterNodeInsertion(evict); return null; } putVal方法之前在分析HashMap的时候分析过了，现在就来看看afterNodeAccess(e)和afterNodeInsertion(evict)干了什么： 4.1.2 afterNodeAccess在上面的putVal方法的逻辑中，如果获取的节点之前就已经存在，就会调用afterNodeAccess方法，根据我们对LinkedHashMap性质的推测，如果链表顺序为accessOrder，就会调整Entry在链表中的顺序。 // 把Entry调整至链表尾部 void afterNodeAccess(Node&lt;K,V> e) { // move node to last LinkedHashMap.Entry&lt;K,V> last; // 如果accessOrder为true且链表尾部不是这个节点才会调整位置 if (accessOrder &amp;&amp; (last = tail) != e) { LinkedHashMap.Entry&lt;K,V> p = (LinkedHashMap.Entry&lt;K,V>)e, b = p.before, a = p.after; p.after = null; if (b == null) head = a; else b.after = a; if (a != null) a.before = b; else last = b; if (last == null) head = p; else { p.before = last; last.after = p; } tail = p; ++modCount; } } 4.1.3 afterNodeInsertion//evict代表是不是处于创建模式，put方法调用的就是true void afterNodeInsertion(boolean evict) { // possibly remove eldest LinkedHashMap.Entry&lt;K,V> first; if (evict &amp;&amp; (first = head) != null &amp;&amp; removeEldestEntry(first)) { K key = first.key; removeNode(hash(key), key, null, false, true); } } protected boolean removeEldestEntry(Map.Entry&lt;K,V> eldest) { return false; } 这个方法在LinkedHashMap上调用似乎总是无用的，但子类可以通过重写removeEldestEntry实现诸如LRU等功能（最近最少使用淘汰） 那么把节点连到链表尾部的方法在哪呢，其实分别在newNode和newTreeNode上： 4.1.4 newNodeNode&lt;K,V> newNode(int hash, K key, V value, Node&lt;K,V> e) { LinkedHashMap.Entry&lt;K,V> p = new LinkedHashMap.Entry&lt;K,V>(hash, key, value, e); linkNodeLast(p); return p; } 4.1.5 newTreeNodeTreeNode&lt;K,V> newTreeNode(int hash, K key, V value, Node&lt;K,V> next) { TreeNode&lt;K,V> p = new TreeNode&lt;K,V>(hash, key, value, next); linkNodeLast(p); return p; } 可见把节点连到链表末端的逻辑就在linkNodeLast方法中： 4.1.6 linkNodeLastprivate void linkNodeLast(LinkedHashMap.Entry&lt;K,V> p) { LinkedHashMap.Entry&lt;K,V> last = tail; tail = p; if (last == null) head = p; else { p.before = last; last.after = p; } } 就是把节点连到tail后面 4.2 getLinkedHashMap重写了get方法： public V get(Object key) { Node&lt;K,V> e; if ((e = getNode(hash(key), key)) == null) return null; if (accessOrder) afterNodeAccess(e); return e.value; } getNode还是HashMap中的getNode，逻辑是一样的，只是如果accessOrder为true，在访问完之后会调用一次afterNodeAccess，这个方法我们前面看过了，是把节点调至链表的尾部。 4.3 removeremove还是HashMap中的remove: public V remove(Object key) { Node&lt;K,V> e; return (e = removeNode(hash(key), key, null, false, true)) == null ? null : e.value; } 4.3.1 removeNode//后面两个布尔值分别代表是否要求值匹配，movable如果是false不允许移动其他节点 final Node&lt;K,V> removeNode(int hash, Object key, Object value, boolean matchValue, boolean movable) { Node&lt;K,V>[] tab; Node&lt;K,V> p; int n, index; if ((tab = table) != null &amp;&amp; (n = tab.length) > 0 &amp;&amp; (p = tab[index = (n - 1) &amp; hash]) != null) { Node&lt;K,V> node = null, e; K k; V v; //如果首节点是要移除的节点 if (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != null &amp;&amp; key.equals(k)))) node = p; else if ((e = p.next) != null) { //如果是红黑树 if (p instanceof TreeNode) //使用getTreeNode先获取红黑树节点 node = ((TreeNode&lt;K,V>)p).getTreeNode(hash, key); //如果是链表 else { do { if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) { // 获取链表节点 node = e; break; } p = e; } while ((e = e.next) != null); } } //如果matchValue为true，必须要比对用户给的旧值是否正确 if (node != null &amp;&amp; (!matchValue || (v = node.value) == value || (value != null &amp;&amp; value.equals(v)))) { //如果是红黑树，调用该类的removeTreeNode移除节点 if (node instanceof TreeNode) ((TreeNode&lt;K,V>)node).removeTreeNode(this, tab, movable); //如果是链表，用链表下一个节点替换 else if (node == p) tab[index] = node.next; else p.next = node.next; ++modCount; --size; //可以看到这里有一个afterNodeRemoval，LinkedHashMap重写了实现 afterNodeRemoval(node); return node; } } return null; } 和HashMap的区别就是在移除完节点之后会调用一次afterNodeRemoval(node) 4.3.2 afterNodeRemovalvoid afterNodeRemoval(Node&lt;K,V> e) { // unlink LinkedHashMap.Entry&lt;K,V> p = (LinkedHashMap.Entry&lt;K,V>)e, b = p.before, a = p.after; p.before = p.after = null; if (b == null) head = a; else b.after = a; if (a == null) tail = b; else a.before = b; } 可以看到就是把node前后的节点接在了一起，实现了从链表中移除节点。 4.4 entrySetpublic Set&lt;Map.Entry&lt;K,V>> entrySet() { Set&lt;Map.Entry&lt;K,V>> es; return (es = entrySet) == null ? (entrySet = new LinkedEntrySet()) : es; } 涉及到LinkedEntrySet类： 4.4.1 LinkedEntrySetfinal class LinkedEntrySet extends AbstractSet&lt;Map.Entry&lt;K,V>> { public final int size() { return size; } public final void clear() { LinkedHashMap.this.clear(); } public final Iterator&lt;Map.Entry&lt;K,V>> iterator() { return new LinkedEntryIterator(); } //... } 可以看到迭代器实现自LinkedEntryIterator，跟踪进去： 4.4.2 LinkedEntryIteratorfinal class LinkedEntryIterator extends LinkedHashIterator implements Iterator&lt;Map.Entry&lt;K,V>> { public final Map.Entry&lt;K,V> next() { return nextNode(); } } 继承自LinkedHashIterator，看到这里，和HashMap的迭代器实现已经非常像了，不过可以推测LinkedHashIterator的迭代器就是按链表顺序返回节点： 4.4.3 LinkedHashIteratorabstract class LinkedHashIterator { LinkedHashMap.Entry&lt;K,V> next; LinkedHashMap.Entry&lt;K,V> current; int expectedModCount; LinkedHashIterator() { //把next定位到head next = head; expectedModCount = modCount; current = null; } public final boolean hasNext() { return next != null; } final LinkedHashMap.Entry&lt;K,V> nextNode() { LinkedHashMap.Entry&lt;K,V> e = next; if (modCount != expectedModCount) throw new ConcurrentModificationException(); if (e == null) throw new NoSuchElementException(); current = e; //nextNode就是链表中的下一个元素 next = e.after; return e; } public final void remove() { Node&lt;K,V> p = current; if (p == null) throw new IllegalStateException(); if (modCount != expectedModCount) throw new ConcurrentModificationException(); current = null; K key = p.key; removeNode(hash(key), key, null, false, false); expectedModCount = modCount; } } 验证了我们的猜想。根据我们对HashMap的了解大概也可以猜想LinkedHashMap的KeySet也是通过LinkedHashIterator得到节点，但只返回它的key。 4.5 keySetpublic Set&lt;K> keySet() { Set&lt;K> ks = keySet; if (ks == null) { ks = new LinkedKeySet(); keySet = ks; } return ks; } 4.5.1 LinkedKeySetfinal class LinkedKeySet extends AbstractSet&lt;K> { public final int size() { return size; } public final void clear() { LinkedHashMap.this.clear(); } public final Iterator&lt;K> iterator() { return new LinkedKeyIterator(); } //... } 4.5.2 LinkedKeyIteratorfinal class LinkedKeyIterator extends LinkedHashIterator implements Iterator&lt;K> { public final K next() { return nextNode().getKey(); } } 验证了我们的猜想。 5 构造方法public LinkedHashMap() { super(); accessOrder = false; } public LinkedHashMap(int initialCapacity) { super(initialCapacity); accessOrder = false; } public LinkedHashMap(int initialCapacity, float loadFactor) { super(initialCapacity, loadFactor); accessOrder = false; } public LinkedHashMap(int initialCapacity, float loadFactor, boolean accessOrder) { super(initialCapacity, loadFactor); this.accessOrder = accessOrder; } 可见默认是按插入顺序排序的，也可以指定它的初始容量、负载因子（和HashMap一样的扩容），要设置它的排序顺序必须先设置初始容量和负载因子。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://www.codetool.top/tags/jdk/"},{"name":"集合","slug":"集合","permalink":"https://www.codetool.top/tags/%E9%9B%86%E5%90%88/"},{"name":"源码研究","slug":"源码研究","permalink":"https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"}]},{"title":"模仿Mybatis入门案例实现一个ORM框架","slug":"模仿Mybatis入门案例实现一个ORM框架","date":"2020-02-19T14:01:49.000Z","updated":"2020-02-21T14:38:07.517Z","comments":true,"path":"article/模仿Mybatis入门案例实现一个ORM框架/","link":"","permalink":"https://www.codetool.top/article/%E6%A8%A1%E4%BB%BFMybatis%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAORM%E6%A1%86%E6%9E%B6/","excerpt":"","text":"入门案例参见： Mybatis使用与入门案例 1 设计分析main函数里都在干什么？ // 1.读取配置文件 // 这是相对类的路径，读取配置文件时通常使用两个方法： // a. 类加载器 b.使用ServletContext对象的getRealPath() InputStream in = Resources.getResourceAsStream(\"mybatis.xml\"); // 2.创建SqlSessionFactory工厂，构建者模式 SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder(); SqlSessionFactory factory = builder.build(in); // 3.使用工厂生成SqlSession对象，工厂模式 SqlSession session = factory.openSession(); // 4.使用SqlSession创建Dao接口的代理，代理模式 IUserDao userDao = session.getMapper(IUserDao.class); // 5.使用代理对象执行方法 List&lt;User> users = userDao.findAll(); for(User user:users){ System.out.println(user); } // 6.释放资源 session.close(); in.close(); 自定义ORM框架的思路： 根据配置文件的信息创建Connection对象 注册驱动，获取连接 获取预处理对象PreparedStatement 此时需要SQL语句 conn.prepareStatement(sql) 执行查询 ResultSet set = psm.executeQuery() 遍历结果集用于封装 List list = new ArrayList(); while(resultSet.next()){ E element = xxxx;（通过反射） //进行封装 list.add(element); } 返回list return list; 2 实现仓库地址： http://git.codetool.top/RhettPeng/mybatis_design/src/master 2.1 使用类加载器读取配置文件public class Resources { /** * 根据传入的参数，获取一个字节输入流 */ public static InputStream getResourceAsStream(String filePath){ return Resources.class.getClassLoader().getResourceAsStream(filePath); } } 2.2 使用输入流构建工厂public class SqlSessionFactoryBuilder { /** * 根据参数的字节输入流来构建一个SqlSessionFactory工厂 * @param config * @return */ public SqlSessionFactory build(InputStream config){ //XMLConfigBuilder用于解析xml配置文件并生成Configuration对象 Configuration cfg = XMLConfigBuilder.loadConfiguration(config); return new DefaultSqlSessionFactory(cfg); } } Configuration： public class Configuration { private String driver; private String url; private String username; private String password; private Map&lt;String,Mapper> mappers = new HashMap&lt;>(); //getter &amp; setter... } Configuration里面包含了所有读出来的mapper映射，key为全限定类名.方法名，value为Mapper对象，Mapper类： /** * 用于封装执行的SQL语句和结果类型的全限定类名 */ public class Mapper { private String queryString;//SQL private String resultType;//返回类型 //getter &amp; setter... } 工厂接口： public interface SqlSessionFactory { /** * 用于创建一个SqlSession对象 * @return */ SqlSession openSession(); } 2.3 使用工厂获取session对象/** * SqlSessionFactory接口的实现类 */ public class DefaultSqlSessionFactory implements SqlSessionFactory { private Configuration cfg; public DefaultSqlSessionFactory(Configuration cfg){ this.cfg = cfg; } /** * 用于创建一个新的操作数据库对象 * @return */ @Override public SqlSession openSession() { return new DefaultSqlSession(cfg); } } SqlSession接口： /** * 自定义Mybatis和数据库交互的核心类 * 它里面可以创建dao接口的代理对象 */ public interface SqlSession { /** * 根据参数创建一个代理对象 * @param daoInterfaceClass dao的字节码 * @param &lt;T> * @return */ &lt;T> T getMapper(Class&lt;T> daoInterfaceClass); /** * 释放资源 */ void close(); } 2.4 使用Session获取一个mapper对象这里使用了动态代理，默认SqlSession实现： public class DefaultSqlSession implements SqlSession { private Configuration cfg; private Connection connection; public DefaultSqlSession(Configuration cfg){ this.cfg = cfg; this.connection = DataSourceUtil.getConnection(cfg); } /** * 用于创建代理对象 * @param daoInterfaceClass dao的字节码 * @param &lt;T> * @return */ //通过传过来的接口找到Mapper映射中对应的Mapper对象，然后使用InvocationHandler构建动态代理对象 @Override public &lt;T> T getMapper(Class&lt;T> daoInterfaceClass) { T mapper = (T)Proxy.newProxyInstance(daoInterfaceClass.getClassLoader(), new Class[]{daoInterfaceClass}, new MapperProxy(cfg.getMappers(), connection)); return mapper; } /** * 用于释放资源 */ @Override public void close() { if(connection!=null){ try { connection.close(); } catch (SQLException e) { e.printStackTrace(); } } } } MapperProxy： public class MapperProxy implements InvocationHandler { //key:全限定类名+方法名 private Map&lt;String, Mapper> mappers; private Connection conn; public MapperProxy(Map mappers,Connection conn){ this.mappers = mappers; this.conn = conn; } /** * 用于对方法进行增强，这里就是调用selectList方法 * @param proxy * @param method * @param args * @return * @throws Throwable */ @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { //1. 获取方法名 String methodName = method.getName(); //2. 获取方法所在类的名称 String className = method.getDeclaringClass().getName(); //3. 组合key String key = className+\".\"+methodName; //4. 获取mappers中的mapper对象 Mapper mapper = mappers.get(key); //5. 判断是否有mapper if(mapper==null){ throw new IllegalArgumentException(\"传入的参数有误\"); } //6. 调用工具类执行查询所有 return new Executor().selectList(mapper,conn); } } 用户定义的Mapper： public interface IUserDao { /** * 查询所有操作 */ List&lt;User> findAll(); } 3 总结","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"mybatis","slug":"mybatis","permalink":"https://www.codetool.top/tags/mybatis/"}]},{"title":"Mybatis使用与入门案例","slug":"Mybatis使用与入门案例","date":"2020-02-18T16:01:34.000Z","updated":"2020-02-21T14:38:07.518Z","comments":true,"path":"article/Mybatis使用与入门案例/","link":"","permalink":"https://www.codetool.top/article/Mybatis%E4%BD%BF%E7%94%A8%E4%B8%8E%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B/","excerpt":"","text":"1 前置环境创建数据库表并添加数据： DROP TABLE IF EXISTS `user`; CREATE TABLE `user` ( `id` int(11) NOT NULL auto_increment, `username` varchar(32) NOT NULL COMMENT '用户名称', `birthday` datetime default NULL COMMENT '生日', `sex` char(1) default NULL COMMENT '性别', `address` varchar(256) default NULL COMMENT '地址', PRIMARY KEY (`id`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8; insert into `user`(`id`,`username`,`birthday`,`sex`,`address`) values (41,'老王','2018-02-27 17:47:08','男','北京'), (42,'小二王','2018-03-02 15:09:37','女','北京金燕龙'), (43,'小二王','2018-03-04 11:34:34','女','北京金燕龙'), (45,'传智播客','2018-03-04 12:04:06','男','北京金燕龙'), (46,'老王','2018-03-07 17:37:26','男','北京'), (48,'小马宝莉','2018-03-08 11:44:00','女','北京修正'); 2 项目结构 2.1 配置文件[db.properties] driver=com.mysql.cj.jdbc.Driver url=jdbc:mysql://192.168.91.1:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true username=root password=123456 [mybatis.xml] &lt;?xml version=\"1.0\" encoding=\"utf-8\" ?> &lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"> &lt;configuration> &lt;properties resource=\"db.properties\"/> &lt;settings> &lt;setting name=\"logImpl\" value=\"LOG4J\"/> &lt;/settings> &lt;typeAliases> &lt;package name=\"com.rhett.domain\">&lt;/package> &lt;/typeAliases> &lt;environments default=\"development\"> &lt;environment id=\"development\"> &lt;transactionManager type=\"JDBC\"/> &lt;dataSource type=\"POOLED\"> &lt;property name=\"driver\" value=\"${driver}\"/> &lt;property name=\"url\" value=\"${url}\"/> &lt;property name=\"username\" value=\"${username}\"/> &lt;property name=\"password\" value=\"${password}\"/> &lt;/dataSource> &lt;/environment> &lt;/environments> &lt;mappers> &lt;mapper resource=\"com/rhett/dao/IUserDao.xml\"/> &lt;/mappers> &lt;/configuration> 2.2 添加JavaBean在domain下编写bean： package com.rhett.domain; import java.io.Serializable; import java.util.Date; public class User implements Serializable { private Integer id; private String username; private Date birthday; private String sex; private String address; public Integer getId() { return id; } public void setId(Integer id) { this.id = id; } public String getUsername() { return username; } public void setUsername(String username) { this.username = username; } public Date getBirthday() { return birthday; } public void setBirthday(Date birthday) { this.birthday = birthday; } public String getSex() { return sex; } public void setSex(String sex) { this.sex = sex; } public String getAddress() { return address; } public void setAddress(String address) { this.address = address; } @Override public String toString() { return \"User [id=\" + id + \", username=\" + username + \", birthday=\" + birthday + \", sex=\" + sex + \", address=\" + address + \"]\"; } } 2.3 编写Mapper首先编写接口类IuserDao： package com.rhett.dao; import com.rhett.domain.User; import org.apache.ibatis.annotations.Select; import java.util.List; public interface IUserDao { /** * 查询所有操作 */ List&lt;User> findAll(); } 然后在resources和包对应的相同文件夹下编写mapper的xml配置(IUserDao.xml)： &lt;?xml version=\"1.0\" encoding=\"UTF-8\"?> &lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"> &lt;mapper namespace=\"com.rhett.dao.IUserDao\"> &lt;!-- 配置查询所有操作 --> &lt;select id=\"findAll\" resultType=\"User\"> select * from user &lt;/select> &lt;/mapper> 然后在mybatis.xml文件中配置mapper（见上面的配置，我用了包扫描） 2.4 编写测试类package test; import com.rhett.dao.IUserDao; import com.rhett.domain.User; import org.apache.ibatis.io.Resources; import org.apache.ibatis.session.SqlSession; import org.apache.ibatis.session.SqlSessionFactory; import org.apache.ibatis.session.SqlSessionFactoryBuilder; import java.io.IOException; import java.io.InputStream; import java.util.List; public class MybatisTest { public static void main(String[] args) throws IOException { // 1.读取配置文件 InputStream in = Resources.getResourceAsStream(\"mybatis.xml\"); // 2.创建SqlSessionFactory工厂 SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder(); SqlSessionFactory factory = builder.build(in); // 3.使用工厂生成SqlSession对象 SqlSession session = factory.openSession(); // 4.使用SqlSession创建Dao接口的代理 IUserDao userDao = session.getMapper(IUserDao.class); // 5.使用代理对象执行方法 List&lt;User> users = userDao.findAll(); for(User user:users){ System.out.println(user); } // 6.释放资源 session.close(); in.close(); } } 输出： User [id=41, username=老王, birthday=Wed Feb 28 07:47:08 CST 2018, sex=男, address=北京] User [id=42, username=小二王, birthday=Sat Mar 03 05:09:37 CST 2018, sex=女, address=北京金燕龙] User [id=43, username=小二王, birthday=Mon Mar 05 01:34:34 CST 2018, sex=女, address=北京金燕龙] User [id=45, username=传智播客, birthday=Mon Mar 05 02:04:06 CST 2018, sex=男, address=北京金燕龙] User [id=46, username=老王, birthday=Thu Mar 08 07:37:26 CST 2018, sex=男, address=北京] User [id=48, username=小马宝莉, birthday=Fri Mar 09 01:44:00 CST 2018, sex=女, address=北京修正]3 补充：基于注解的修改方法在编写接口的时候加上注解： public interface IUserDao { /* * 查询所有用户 */ @Select(\"select * from user\") List&lt;User> findAll(); } 然后修改mybatis.xml &lt;!-- 告知 mybatis 映射配置的位置 --> &lt;mappers> &lt;mapper class=\"com.itheima.dao.IUserDao\"/> &lt;/mappers> 就可以不用IUserDao.xml了。","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"mybatis","slug":"mybatis","permalink":"https://www.codetool.top/tags/mybatis/"}]},{"title":"Mybatis概述和配置介绍","slug":"Mybatis概述和配置介绍","date":"2020-02-18T15:25:24.000Z","updated":"2020-02-26T06:48:58.246Z","comments":true,"path":"article/Mybatis概述和配置介绍/","link":"","permalink":"https://www.codetool.top/article/Mybatis%E6%A6%82%E8%BF%B0%E5%92%8C%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"本文参考资源： mybatis的配置文件详解(二) - 那一夜 - 博客园 MyBatis内置常用Java类型对应的别名_Java_小诸葛的博客-CSDN博客 Mybatis—typeHandlers默认支持的类型处理器 - 水痕灬 - 博客园 1 概述mybatis是一种持久层框架，也属于ORM映射。前身是ibatis。 相比于hibernate： hibernate为全自动化，配置文件书写之后不需要书写sql语句，但是欠缺灵活，很多时候需要优化； mybatis为半自动化，需要自己书写sql语句，需要自己定义映射。增加了程序员的一些操作，但是带来了设计上的灵活，并且也是支持hibernate的一些特性，如延迟加载，缓存和映射等；对数据库的兼容性比hibernate差。移植性不好，但是可编写灵活和高性能的sql语句。 1.1 特点 sql语句与代码分离，存放于xml配置文件中 用逻辑标签控制动态SQL的拼接 查询的结果集与java对象自动映射 1.2 整体架构 2 配置2.1 maven配置构建建议从模板maven-archetype-webapp构建 依赖： &lt;dependency> &lt;groupId>org.mybatis&lt;/groupId> &lt;artifactId>mybatis&lt;/artifactId> &lt;version>3.5.4&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>mysql&lt;/groupId> &lt;artifactId>mysql-connector-java&lt;/artifactId> &lt;version>6.0.6&lt;/version> &lt;/dependency> 2.2 全局配置文件mybatis-config.xmlconfiguration properties（属性） settings（全局配置参数） typeAliases（类型别名） typeHandlers（类型处理器） enviroments（环境集合属性对象） enviroment（环境配置） transactionManager（事务管理） dataSource（数据源） mappers（映射器） objectFactory（对象工厂） plugins（插件） 这个配置文件的目的是为了创建一个SqlSeesionFactory实例对象。 2.2.1 属性指定一些键值对，作配置用，建议把这部分放在另一个properties文件中，然后使用resource属性指定文件。如： [db.properties] driver=com.mysql.jdbc.Driver url=jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf-8&amp;allowMultiQueries=true username=root password=123456 &lt;properties resource=\"db.properties\"/> 2.2.2 全局配置参数用于配置一些mybatis的参数，例如使用的日志框架： &lt;settings> &lt;setting name=\"logImpl\" value=\"LOG4J\"/> &lt;/settings> mybatis可以使用的日志框架有： SLF4J Apache Commons Logging Log4J2 Log4J JDK logging 如果没有配置指定的日志框架，mybatis会按该顺序查找，使用最先查找到的日志框架。 2.2.3 类型别名类型别名即指定java类型的一个别名，可以在后面配置Mapper的resultType和ParameterType中使用。 有三种方式可以配置类型别名： 单独配置某个类 &lt;typeAliases> &lt;typeAlias type=\"com.rhett.po.User\" alise=\"user\"/> &lt;/typeAliases> 扫描包 如下配置，那么com.shsxt.po所有类型在这个配置文件中的别名就是它们的类名 &lt;typeAliases> &lt;package name=\"com.rhett.po\" > &lt;typeAliases> 通过注解 在JavaBean上添加注解@Alias(&quot;别名&quot;) 需要注意的是，Mybatis有一些为Java类型默认配置的别名： 映射别名 Alias Java的类型 Mapped Type _byte byte _longyiyi long _short short _int int _integer int _double double _float float _boolean boolean string String byte Byte long Long short Short int Integer integer Integer double Double float Float boolean Boolean date Date decimal BigDecimal bigdecimal BigDecimal object Object map Map hashmap HashMap list List arraylist ArrayList collection Collection iterator Iterator 2.2.4 类型处理器类型处理器就是处理数据库数据类型和Java数据类型之间的映射 下面是Mybatis默认的类型处理器 类型处理器 Java类型 JDBC类型 BooleanTypeHandler java.lang.Boolean,boolean 数据库兼容的 BOOLEAN ByteTypeHandler java.lang.Byte, byte 数据库兼容的 NUMERIC 或 BYTE ShortTypeHandler java.lang.Short, short 数据库兼容的 NUMERIC 或 SHORT INTEGER IntegerTypeHandler java.lang.Integer, int 数据库兼容的 NUMERIC 或 INTEGER LongTypeHandler java.lang.Long, long 数据库兼容的 NUMERIC 或 LONG INTEGER FloatTypeHandler java.lang.Float, float 数据库兼容的 NUMERIC 或 FLOAT DoubleTypeHandler java.lang.Double,double 数据库兼容的 NUMERIC 或 DOUBLE BigDecimalTypeHandler java.math.BigDecimal 数据库兼容的 NUMERIC 或 DECIMAL StringTypeHandler java.lang.String CHAR, VARCHAR ClobReaderTypeHandler java.io.Reader - ClobTypeHandler java.lang.String CLOB, LONGVARCHAR NStringTypeHandler java.lang.String NVARCHAR, NCHAR NClobTypeHandler java.lang.String NCLOB BlobInputStreamTypeHandler java.io.InputStream - ByteArrayTypeHandler byte[] 数据库兼容的字节流类型 BlobTypeHandler byte[] BLOB, LONGVARBINARY DateTypeHandler java.util.Date TIMESTAMP DateOnlyTypeHandler java.util.Date DATE TimeOnlyTypeHandler java.util.Date TIME SqlTimestampTypeHandler java.sql.Timestamp TIMESTAMP SqlDateTypeHandler java.sql.Date DATE SqlTimeTypeHandler java.sql.Time TIME ObjectTypeHandler Any OTHER 或未指定类型 EnumTypeHandler Enumeration Type VARCHAR-任何兼容的字符串类型，存储枚举的名称(而不是索引) EnumOrdinalTypeHandler Enumeration Type 任何兼容的 NUMERIC 或 DOUBLE 类型，存储枚举的索引(而不是名称) 有些类型Mybatis是不支持的，只能用自定义类型处理器来处理相应的类型。 自定义类型处理器的方法： 实现org.apache.ibatis.type.TypeHandler接口（setParameter,getResult） 继承org.apache.ibatis.type.BaseTypeHandler 配置自定义处理器： &lt;typeHandlers> &lt;typeHandler handler=\"com.rhett.mybatis.typehandler.MyTypeHandler\"/> &lt;/typeHandlers> &lt;!-- 或使用批量注册的方式，类似于扫描包--> &lt;typeHandlers> &lt;package name=\"com.rhett.mybatis.typehandler\"/> &lt;/typeHandlers> 2.2.5 环境集合属性对象这其实就是一些数据库连接方法的配置，不同的场合可以使用不同的环境 MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中， 现实情况下有多种理由需要这么做。例如，开发、测试和生产环境需要有不同的配置；或者共享相同 Schema 的多个生产数据库， 想使用相同的 SQL 映射。许多类似的用例。不过要记住：尽管可以配置多个环境，每个 不过要记住：尽管可以配置多个环境，每个SqlSessionFactory 实例只能选 实例只能选择其一。所以，如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例，每个数据库对应一个。而如果是三个数据库，就需要三个实例，依此类推，记起来很简单： &lt;!-- 配置默认的enviroment --> &lt;environments default=\"development\"> &lt;environment id=\"development\"> &lt;!-- type可选JDBC或MANAGED，代表事务由谁管理--> &lt;transactionManager type=\"JDBC\"/> &lt;!-- 是否使用数据库连接池，有POOLED,UNPOOLED,JNDI --> &lt;!-- JNDI可以通过配置Tomcat数据库连接池使用 --> &lt;dataSource type=\"POOLED\"> &lt;property name=\"driver\" value=\"${driver}\"/> &lt;property name=\"url\" value=\"${url}\"/> &lt;property name=\"username\" value=\"${username}\"/> &lt;property name=\"password\" value=\"${password}\"/> &lt;/dataSource> &lt;/environment> &lt;environment id=\"test\"> &lt;transactionManager type=\"JDBC\"/> &lt;dataSource type=\"POOLED\"> &lt;property name=\"driver\" value=\"${driver2}\"/> &lt;property name=\"url\" value=\"${url2}\"/> &lt;property name=\"username\" value=\"${username2}\"/> &lt;property name=\"password\" value=\"${password2}\"/> &lt;/dataSource> &lt;/environment> &lt;/environments> 2.2.6 映射器Mapper，或者说是Dao，就是持久层的接口。 配置Mappers的四种方式： 通过类路径的相对位置导入xml方式的映射文件： &lt;mappers> &lt;mapper resource=\"com/rhett/mybatis/mapper/BlogMapper.xml\"/> &lt;mapper resource=\"com/rhett/mybatis/mapper/StudentMapper.xml\"/> &lt;/mappers> 通过文件系统路径或WEB URL地址导入xml方式的映射文件（不推荐）： &lt;mappers> &lt;mapper url=\"file:///F:/IDEA/mybatis02/src/main/resources/mybatis.xml\"/> &lt;/mappers> 通过映射接口类的方式导入映射类： &lt;mappers> &lt;mapper class=\"com.rhett.mybatis.mapper.UserMapper\"/> &lt;/mappers> 批量注册指定包下面所有接口映射类： &lt;mappers> &lt;package name=\"com.rhett.mybatis.mapper\"/> &lt;/mappers> 2.2.7 对象工厂objectFactory的作用：使用结果集实例化对象。 自定义objectFactory的方法：继承DefaultObjectFactory","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"mybatis","slug":"mybatis","permalink":"https://www.codetool.top/tags/mybatis/"}]},{"title":"leetcode435-无重叠区间","slug":"leetcode435-无重叠区间","date":"2020-02-18T05:12:19.000Z","updated":"2020-02-18T05:35:43.658Z","comments":true,"path":"article/leetcode435-无重叠区间/","link":"","permalink":"https://www.codetool.top/article/leetcode435-%E6%97%A0%E9%87%8D%E5%8F%A0%E5%8C%BA%E9%97%B4/","excerpt":"","text":"1 原题给定一个区间的集合，找到需要移除区间的最小数量，使剩余区间互不重叠。 注意: 可以认为区间的终点总是大于它的起点。 区间 [1,2] 和 [2,3] 的边界相互“接触”，但没有相互重叠。 示例1: 输入： [ [1,2], [2,3], [3,4], [1,3] ]输出： 1解释： 移除 [1,3] 后，剩下的区间没有重叠。 示例2: 输入： [ [1,2], [1,2], [1,2] ]输出： 2解释： 你需要移除两个 [1,2] 来使剩下的区间没有重叠。 示例3: 输入： [ [1,2], [2,3] ]输出： 0解释： 你不需要移除任何区间，因为它们已经是无重叠的了。 2 解法2.1 思想首先将所有区间按开始位置排序，相邻两个区间，如果有重叠的部分包含两种情况： 一个区间完全包含另一个区间，此时只保留较小那个区间。 一个区间的末尾位于另一个区间范围内，此时只保留前面那个区间。（两个区间完全重合或末尾重合也按这种情况处理） 这两种处理方式都是在局部范围内为后面保留更多的空间。 2.2 代码class Solution { public int eraseOverlapIntervals(int[][] intervals) { Arrays.sort(intervals, (array1,array2)->{ return array1[0]-array2[0]; }); int lastIndex = 0; int deleteCount = 0; for(int i = 0;i&lt;intervals.length-1;i++){ if(intervals[lastIndex][1]>intervals[i+1][1]){ deleteCount++; lastIndex = i+1; }else if(intervals[lastIndex][1]>intervals[i+1][0]&amp;&amp;intervals[lastIndex][1]&lt;=intervals[i+1][1]){ deleteCount++; }else{ lastIndex = i+1; } } return deleteCount; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"贪心法","slug":"贪心法","permalink":"https://www.codetool.top/tags/%E8%B4%AA%E5%BF%83%E6%B3%95/"}]},{"title":"leetcode376-摆动序列","slug":"leetcode376-摆动序列","date":"2020-02-17T18:00:44.000Z","updated":"2020-02-17T18:09:01.858Z","comments":true,"path":"article/leetcode376-摆动序列/","link":"","permalink":"https://www.codetool.top/article/leetcode376-%E6%91%86%E5%8A%A8%E5%BA%8F%E5%88%97/","excerpt":"","text":"1 原题如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为摆动序列。第一个差（如果存在的话）可能是正数或负数。少于两个元素的序列也是摆动序列。 例如， [1,7,4,9,2,5] 是一个摆动序列，因为差值 (6,-3,5,-7,3) 是正负交替出现的。相反, [1,4,7,2,5] 和 [1,7,4,5,5] 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。 给定一个整数序列，返回作为摆动序列的最长子序列的长度。 通过从原始序列中删除一些（也可以不删除）元素来获得子序列，剩下的元素保持其原始顺序。 示例1: 输入： [1,7,4,9,2,5]输出： 6解释： 整个序列均为摆动序列。 示例2: 输入： [1,17,5,10,13,15,10,5,16,8]输出： 7解释： 这个序列包含几个长度为 7 摆动序列，其中一个可为[1,17,10,13,10,16,8]。 示例3: 输入： [1,2,3,4,5,6,7,8,9]输出： 2 进阶:你能否用 O(n) 时间复杂度完成此题? 2 解法2.1 思想整个数组要获得最多的能组成摆动序列的数字，就是取峰顶和谷底值，而我们只需要获取个数就行了，可以记录整个变化波形递增和递减的次数。 2.2 代码class Solution { public int wiggleMaxLength(int[] nums) { if(nums.length == 0) return 0; if(nums.length == 1) return 1; int sum = 1; boolean isDown = false; boolean isUp = false; boolean haveBeenFirst = false; for(int i = 0;i&lt;nums.length-1;i++){ //如果之前是上升的现在下降 if((isDown&amp;&amp;nums[i+1]>nums[i])||(isUp&amp;&amp;nums[i+1]&lt;nums[i])){ sum++; isUp = !isUp; isDown = !isDown; //需要注意记录第一次的上升或下降 }else if(!haveBeenFirst&amp;&amp;nums[i+1]!=nums[i]){ sum++; isUp = nums[i+1]>nums[i]; isDown = nums[i+1]&lt;nums[i]; haveBeenFirst = true; } } return sum; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"拉帮结派的数据结构-并查集","slug":"拉帮结派的数据结构-并查集","date":"2020-02-17T12:41:03.000Z","updated":"2020-02-17T12:46:25.386Z","comments":true,"path":"article/拉帮结派的数据结构-并查集/","link":"","permalink":"https://www.codetool.top/article/%E6%8B%89%E5%B8%AE%E7%BB%93%E6%B4%BE%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%B9%B6%E6%9F%A5%E9%9B%86/","excerpt":"","text":"本文参考资源： 超超有爱爱—–并查集~_chen_zan_yu_的博客-CSDN博客 1 概述并查集通常用作集合的合并。 并查集是一种树形结构，又叫“不相交集合”，保持了一组不相交的动态集合，每个集合通过一个代表来识别，代表即集合中的某个成员，通常选择根做这个代表。 我们先来介绍一下并查集的思想： 假设我们现在已知一些连通关系，例如(2,4),(1,2),(5,6),(3,4),(2,3)，我们用一张图来表示这个关系： 现在我们用并查集的思想把它分成几个不连通的集合： 首先我们有一个father数组，它记录的是在并查集这个树形结构中，某个节点对应的父节点是哪个，用数组表示，一开始全为0。 我们把(2,4)这个关系取出来，每次要做的操作就是把它们的根节点连接起来（一直寻找父节点直到对应的father为0），这里就把4连接到2上，然后修改father[4]的值为2. 再处理(1,2)这个关系，由于此时1和2的根节点是它本身，也是将他们连起来。把father[1]修改为2。 5和6的根节点也是它本身，将他们连起来，father[6]修改为6。 这里发现3的根节点是3，4的根节点是2，于是把2和3连接起来。把father[2]修改为3。 最后处理(2,3)的时候发现2和3的根节点都是3，于是不做处理。 最后得到的集合有两个，分别是数组中值为0的3和5。 2 操作上面的图中我们为了模拟自然思想，数组的下标从1开始，而实际编程的时候数组下标从0开始，根据限制可以把没有父节点的元素的值设为-1，也可以就设为该元素的下标，也可以把下标为0的数组元素空出来，对java来说就不用一开始就把数组赋一遍值。 并查集的核心操作有两个： find_root(x): 返回能代表x所在集合的节点，通常返回x所在集合的根节点，有递归和非递归两种方法。 union(x, y): 将包含x,y的集合合并为一个新的集合。合并两个集合的关键是找到两个集合的根节点，如果两个根节点相同则不用合并；如果不同，则需要合并。 class UnionFind { int[] father; //构造函数，这里把它们全部赋值为-1，代表没有父节点 public UnionFind(int totalNodes) { father = new int[totalNodes]; Arrays.fill(father,-1); } //合并两个集合，即将它们的根节点连接。 void union(int node1, int node2) { int root1 = find_root(node1); int root2 = find_root(node2); if (root1 != root2) { father[root2] = root1; } } // 找到一个数组元素对应的根节点 int find_root(int node) { while (father[node] != -1) node = father[node]; return node; } //检查两个数组元素代表的集合是不是相连的，如果是说明它们的根节点是相同的 boolean isConnected(int node1, int node2) { return find_root(node1) == find_root(node2); } } 3 操作优化并查集的优化主要包括： 合并时平衡树的高度（比较要合并的两个树的高度）。 查询时的优化：路径压缩 平衡树的高度这里不详细讲。 路径压缩就是每次查询的时候都会顺着路径查找，最终找到根节点。而找到了根节点之后可以将查询的节点的father直接连到根节点上，实际上也是减小树的高度。 4 算法题讲解4.1 原题蓝桥杯历届试题 合根植物 问题描述 w星球的一个种植园，被分成 m * n 个小格子（东西方向m行，南北方向n列）。每个格子里种了一株合根植物。这种植物有个特点，它的根可能会沿着南北或东西方向伸展，从而与另一个格子的植物合成为一体。 如果我们告诉你哪些小格子间出现了连根现象，你能说出这个园中一共有多少株合根植物吗？ 输入格式 第一行，两个整数m，n，用空格分开，表示格子的行数、列数（1&lt;m,n&lt;1000）。接下来一行，一个整数k，表示下面还有k行数据(0&lt;k&lt;100000)接下来k行，第行两个整数a，b，表示编号为a的小格子和编号为b的小格子合根了。 格子的编号一行一行，从上到下，从左到右编号。比如：5 * 4 的小格子，编号：1 2 3 45 6 7 89 10 11 1213 14 15 1617 18 19 20 样例输入 5 4162 31 55 94 87 89 1010 1111 1210 1412 1614 1817 1815 1919 209 1313 17 样例输出5 样例说明 其合根情况参考下图 4.2 解答这就是一道完全不加修饰，几乎要明示你这道题应该要用并查集的算法题。按照我们之前的讲解，可以写出如下代码： import java.util.Scanner; public class Main { static int[] father; public static void main(String[] args) { Scanner scanner = new Scanner(System.in); //先算出数组的大小，这里我们从下标为1开始记录数据，就可以用0来代表没有父节点了。 father = new int[scanner.nextInt()*scanner.nextInt()+1]; int n = scanner.nextInt(); for(int i = 0;i &lt; n;i ++){ union(scanner.nextInt(),scanner.nextInt()); } int sum = 0; //看看合并完之后还有多少个没有父节点的元素，就是集合的个数 for(int i = 1;i&lt;father.length;i++){ if(father[i] == 0) sum+=1; } System.out.println(sum); } //合并两个集合，即将它们的根节点连接。 static void union(int node1, int node2) { int root1 = find_root(node1); int root2 = find_root(node2); if (root1 != root2) father[root2] = root1; } // 找到一个数组元素对应的根节点，这里由于整道题我们只需要查找一次就不优化了。 static int find_root(int node) { while (father[node] != 0) node = father[node]; return node; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"蓝桥杯","slug":"蓝桥杯","permalink":"https://www.codetool.top/tags/%E8%93%9D%E6%A1%A5%E6%9D%AF/"}]},{"title":"算法竞赛常用数据结构-字典树Trie","slug":"算法竞赛常用数据结构-字典树Trie","date":"2020-02-17T05:56:24.000Z","updated":"2020-02-20T14:55:21.051Z","comments":true,"path":"article/算法竞赛常用数据结构-字典树Trie/","link":"","permalink":"https://www.codetool.top/article/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%B8%B8%E7%94%A8%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%AD%97%E5%85%B8%E6%A0%91Trie/","excerpt":"","text":"本文参考资源： 详谈树结构（传统树、字典树、hash 树、Merkle Patricia Tree）_C/C++_smilejiasmile的博客-CSDN博客 1 概述Tire树称为字典树，又称单词查找树，Trie树，是一种树形结构，是一种哈希树的变种。（高效查找的数据结构-HashTree（哈希树））典型应用是用于统计，排序和保存大量的字符串（但不仅限于字符串），所以经常被搜索引擎系统用于文本词频统计。它的优点是：利用字符串的公共前缀来减少查询时间，最大限度地减少无谓的字符串比较，查询效率比哈希树高。 Trie树的缺点是它非常消耗空间。 Trie树的三个基本性质： 根节点不包含字符，除根节点外每一个节点都只包含一个字符； 从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串； 每个节点的所有子节点包含的字符都不相同。 2 Trie树结构 从根节点到某一节点，路径上经过的字符连接起来，为该节点对应的字符串。 Trie树的应用有： 维护字符串集合（即字典）。 向字符串集合中插入字符串（即建树）。 查询字符串集合中是否有某个字符串（即查询）。 统计字符串在集合中出现的个数（即统计）。 将字符串集合按字典序排序（即字典序排序）。 求集合内两个字符串的LCP（Longest Common Prefix，最长公共前缀）（即求最长公共前缀）。 大多数时候，我们是要维护一个key-value对，key就是这个从根节点到叶子节点形成的字符串，而value信息就存储在叶子节点，例如汉英字典去查一个单词的中文翻译。 java代码实现：（根据不同的应用可以设计不同的实现） class Node{ int num;//有多少单词通过这个节点,即由根至该节点组成的字符串模式出现的次数 Node[] children = new Node[26];//所有的子节点 Object data;// 如果是叶子节点可以存储数据。 } 3 算法题示例你考入大城市沙坪坝的学校， 但是沙坪坝的当地人说着一种很难懂的方言， 你完全听不懂。 幸好你手中有本字典可以帮你。 现在你有若干个听不懂的方言需要查询字典。 输入格式：第一行，两个整数n和m。接下来有n行表示字典的内容，每行表示一条字典的记录。每条记录包含两个空格间隔的单词，第一个单词为英文单词，第二个单词为对应的沙坪坝方言。接下来有m行，每行一个单词，表示你要查询的沙坪坝方言。 输出格式：输出m行，每行一个英文单词，表示翻译后的结果。如果某个单词字典查不到，输出”eh” 样例输入：5 3dog ogdaycat atcaypig igpayfroot ootfrayloops oopslayatcayittenkayoopslay样例输出：catehloops 注：所有单词都用小写字母表示， 且长度不超过10。 解答： static class Node{ Node[] children = new Node[26];//所有的子节点 String data;// 如果是叶子节点可以存储数据。 } public static void main(String[] args) { Scanner scanner = new Scanner(System.in); int referCount = scanner.nextInt(); int targetCount = scanner.nextInt(); Node root = new Node(); for(int i = 0;i&lt;referCount;i++){ String origin = scanner.next(); char[] refer = scanner.next().toCharArray(); Node node = root; for(int n = 0;n&lt;refer.length;n++){ if(node.children[refer[n]-'a'] != null) { node = node.children[refer[n]-'a']; continue; } node = (node.children[refer[n]-'a'] = new Node()); if(n == refer.length-1) node.data = origin; } } for(int i = 0;i&lt;targetCount;i++){ char[] toFind = scanner.next().toCharArray(); Node node = root; boolean isFind = true; for(int n = 0;n&lt;toFind.length;n++){ if((node = node.children[toFind[n]-'a'])!=null) continue; isFind = false; break; } System.out.println(isFind?node.data:\"eh\"); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"搜索树","slug":"搜索树","permalink":"https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"}]},{"title":"leetcode135-分发糖果","slug":"leetcode135-分发糖果","date":"2020-02-17T05:16:20.000Z","updated":"2020-02-17T09:15:32.461Z","comments":true,"path":"article/leetcode135-分发糖果/","link":"","permalink":"https://www.codetool.top/article/leetcode135-%E5%88%86%E5%8F%91%E7%B3%96%E6%9E%9C/","excerpt":"","text":"1 原题老师想给孩子们分发糖果，有 N 个孩子站成了一条直线，老师会根据每个孩子的表现，预先给他们评分。 你需要按照以下要求，帮助老师给这些孩子分发糖果： 每个孩子至少分配到 1 个糖果。 相邻的孩子中，评分高的孩子必须获得更多的糖果。 那么这样下来，老师至少需要准备多少颗糖果呢？ 示例1: 输入： [1,0,2]输出： 5解释： 你可以分别给这三个孩子分发 2、1、2 颗糖果。 示例2: 输入： [1,2,2]输出： 4解释： 你可以分别给这三个孩子分发 1、2、1 颗糖果。第三个孩子只得到 1 颗糖果，这已满足上述两个条件。 2 解法2.1 思想要满足相邻的孩子中，评分高的孩子必须获得更多的糖果，可以进行左右各一次动态规划，每次只保证满足一边评分高的孩子获得更多糖果。 2.2 代码class Solution { public int candy(int[] ratings) { int length = ratings.length; int[] left = new int[length]; int[] right = new int[length]; for(int i = 1; i &lt; length; i++) if(ratings[i] > ratings[i - 1]) left[i] = left[i - 1] + 1; int count = left[length - 1]; for(int i = length - 2; i >= 0; i--) { if(ratings[i] > ratings[i + 1]) right[i] = right[i + 1] + 1; count += Math.max(left[i], right[i]); } return count+length; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"https://www.codetool.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]},{"title":"高效查找的数据结构-HashTree（哈希树）","slug":"高效查找的数据结构-HashTree（哈希树）","date":"2020-02-16T18:14:52.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/高效查找的数据结构-HashTree（哈希树）/","link":"","permalink":"https://www.codetool.top/article/%E9%AB%98%E6%95%88%E6%9F%A5%E6%89%BE%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-HashTree%EF%BC%88%E5%93%88%E5%B8%8C%E6%A0%91%EF%BC%89/","excerpt":"","text":"本文参考资源： 痴人说Hash - 哈希树 (HashTree)_Java_PinusLee阳光灿烂的生活-CSDN博客 查找——图文翔解HashTree（哈希树）_Java_菜鸟的自留地-mooyang-CSDN博客 该数据结构的设计者编写的文档：哈希树HashTree - 百度文库 1 概述二叉排序树，平衡二叉树，红黑树等二叉排序树在数据量大的时候树高很深，我们不断向下找寻值时会比较很多次。二叉排序树自身是有顺序结构的，每个结点除最小结点和最大结点外都有前驱和后继，不论是排序还是搜索它的综合性能比较好，但是单独在搜索这一方面二叉排序树的性能就没有这次要讲的Hash树快了。 2 理论基础Hash树的理论基础为质数分辨定理： n个不同的质数可以“分辨”的连续整数的个数和他们的乘积相等。“分辨”就是指这些连续的整数不可能有完全相同的余数序列。 基于这个理论，假设我们取前十个素数，能分辨的整数有2*3*5*7*9*...*29 = 6 469 693 230个数，也就是说如果有21亿个数字的话，我们查找的哪怕是最底层的也仅仅需要计算10次就能找到对应的数字，而这已经超出int类型的范围。 而这个要分辩的整数，可以是数据库中的主键，可以是唯一标识某一对象的哈希码（不用哈希函数，保证不同对象的哈希码不冲突）。 3 哈希树的实现哈希树的结构：每一层节点的最大子节点数都不一样，对应这一层代表的质数值： java代码： private class Node{ //定义了一个内部类，每一个结点会有一个next数组 public Node[] next = null; //用来装子节点的下标表示余数 public Integer data = 0; //数值 public boolean isDel = false; //是否被删除的标记，作删除用 public Node(Integer data,Integer level){ //构造函数 next = new Node[level]; this.data = data; } public Node(Integer data){ //构造函数 this.data = data; } } 3.1 插入求余看对应位置的结点，如果为空则在空处插入一个新节点，如果被逻辑删除了替换值再逻辑恢复，如果有值就继续往下找，继续求余判断。 3.2 查找查找和插入的逻辑一样，按除余的方法一直找到某个位置 3.3 删除HashTree的删除节点并不要求真正删除节点，只需要逻辑性地删除节点，先按查找的方法获取对应节点，把节点的isDel标记为true，这样如果新加入节点需要放在这个位置也能直接替换它。","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"搜索树","slug":"搜索树","permalink":"https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"}]},{"title":"数据库理论之OLTP与OLAP","slug":"数据库理论之OLTP与OLAP","date":"2020-02-16T14:56:19.000Z","updated":"2020-02-21T14:36:25.390Z","comments":true,"path":"article/数据库理论之OLTP与OLAP/","link":"","permalink":"https://www.codetool.top/article/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%90%86%E8%AE%BA%E4%B9%8BOLTP%E4%B8%8EOLAP/","excerpt":"","text":"1 OLTPOLTP 即联机事务处理，就是我们经常说的关系数据库，意即记录即时的增、删、改、查，就是我们经常应用的东西，主要供基层人员使用，进行一线业务操作，这是数据库的基础。 对于各种数据库系统环境中大家最常见的 OLTP 系统，其特点是并发量大，整体数据量比较多，但每次访问的数据比较少，且访问的数据比较离散，活跃数据占总体数据的比例不是太大。对于这类系统的数据库实际上是最难维护，最难以优化的，对主机整体性能要求也是最高的。因为不仅访问量很高，数据量也不小。 针对上面的这些特点和分析，我们可以对 OLTP 的得出一个大致的方向。 虽然系统总体数据量较大，但是系统活跃数据在数据总量中所占的比例不大，那么我们可以通过扩大内存容量来尽可能多的将活跃数据 cache 到内存中；虽然 IO 访问非常频繁，但是每次访问的数据量较少且很离散，那么我们对磁盘存储的要求是 IOPS(Input/Output Operations Per Second，即每秒进行读写操作的次数)表现要很好，吞吐量是次要因素； 并发量很高，CPU 每秒所要处理的请求自然也就很多，所以 CPU 处理能力需要比较强劲；虽然与客户端的每次交互的数据量并不是特别大，但是网络交互非常频繁，所以主机与客户端交互的网络设备对流量能力也要求不能太弱。 2 OLAP用于数据分析的 OLAP 系统的主要特点就是数据量非常大，并发访问不多，但每次访问所需要检索的数据量都比较多，而且数据访问相对较为集中，没有太明显的活跃数据概念。 OLAP 即联机分析处理，是数据仓库的核心部心，所谓数据仓库是对于大量已经由 OLTP 形成的数据的一种分析型的数据库，用于处理商业智能、决策支持等重要的决策信息；数据仓库是在数据库应用到一定程序之后而对历史数据的加工与分析。数据分析的目标是探索并挖掘数据的价值，作为企业高层进行决策的参考。 基于 OLAP 系统的各种特点和相应的分析，针对 OLAP 系统硬件优化的大致策略如下： 数据量非常大，所以磁盘存储系统的单位容量需要尽量大一些； 单次访问数据量较大，而且访问数据比较集中，那么对 IO 系统的性能要求是需要有尽可能大的每秒 IO 吞吐量，所以应该选用每秒吞吐量尽可能大的磁盘； 虽然 IO 性能要求也比较高，但是并发请求较少，所以 CPU 处理能力较难成为性能瓶颈，所以 CPU 处理能力没有太苛刻的要求； 虽然每次请求的访问量很大，但是执行过程中的数据大都不会返回给客户端，最终返回给客户端的数据量都较小，所以和客户端交互的网络设备要求并不是太高； 此外，由于 OLAP 系统由于其每次运算过程较长，可以很好的并行化，所以一般的 OLAP系统都是由多台主机构成的一个集群，而集群中主机与主机之间的数据交互量一般来说都是非常大的，所以在集群中主机之间的网络设备要求很高。","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"基础知识","slug":"基础知识","permalink":"https://www.codetool.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"name":"数据库","slug":"数据库","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"}]},{"title":"按键排序的Map-TreeMap源码分析","slug":"按键排序的Map-TreeMap源码分析","date":"2020-02-16T11:44:53.000Z","updated":"2020-02-17T05:18:26.272Z","comments":true,"path":"article/按键排序的Map-TreeMap源码分析/","link":"","permalink":"https://www.codetool.top/article/%E6%8C%89%E9%94%AE%E6%8E%92%E5%BA%8F%E7%9A%84Map-TreeMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","excerpt":"","text":"1 总结总结放前面（这篇挺短的） TreeMap基于红黑树实现，可以对Map中的key排序 它的排序和定位需要依赖比较器或实现 Comparable 接口，也因此不需要key重写hashCode方法和equals方法，就可以排除掉重复的key。 TreeMap 的查询、插入、删除效率均没有 HashMap 高，一般只有要对 key 排序时才使用TreeMap。 2 导言之前有写过弱平衡的二叉查找树-红黑树，然而很多具体实现都没有提，这篇文章就来谈谈JDK基于红黑树实现的可以按键排序的Map——TreeMap 还是按我的习惯，直接从重要方法读起： 3 重要方法3.1 putpublic V put(K key, V value) { //可以猜到Entry应该就是红黑树的节点类 Entry&lt;K,V> t = root; //如果根节点为空 if (t == null) { //这里的compare只是类型检查和null值检查key compare(key, key); // type (and possibly null) check root = new Entry&lt;>(key, value, null); size = 1; modCount++; return null; } int cmp; Entry&lt;K,V> parent; // 获取比较器 Comparator&lt;? super K> cpr = comparator; // 如果有比较器 if (cpr != null) { //获取要插入的位置 do { parent = t; cmp = cpr.compare(key, t.key); if (cmp &lt; 0) t = t.left; else if (cmp > 0) t = t.right; else //如果已有这个键了，那么替换值 return t.setValue(value); } while (t != null); } // 如果没有比较器 即为实现了Comparable接口，类似的逻辑 else { if (key == null) throw new NullPointerException(); @SuppressWarnings(\"unchecked\") Comparable&lt;? super K> k = (Comparable&lt;? super K>) key; do { parent = t; cmp = k.compareTo(t.key); if (cmp &lt; 0) t = t.left; else if (cmp > 0) t = t.right; else return t.setValue(value); } while (t != null); } //构造结点 Entry&lt;K,V> e = new Entry&lt;>(key, value, parent); //插入对应位置 if (cmp &lt; 0) parent.left = e; else parent.right = e; //插入后的调整 fixAfterInsertion(e); size++; modCount++; return null; } 看完这个函数的结论： Entry是结点的类 按正常的搜索树方法插入节点之后，调用fixAfterInsertion(e)来调整树。 那么我们分别来看对应的源码： 3.1.1 Entrystatic final class Entry&lt;K,V> implements Map.Entry&lt;K,V> { K key; V value; Entry&lt;K,V> left; Entry&lt;K,V> right; Entry&lt;K,V> parent; boolean color = BLACK; //... } 其实似曾相识，因为之前在HashMap源码分析中看过HashMap用红黑树实现的部分也实现了红黑树的节点，不过当时也没有谈具体方法的实现。 3.1.2 fixAfterInsertionprivate void fixAfterInsertion(Entry&lt;K,V> x) { //插入节点默认为红色 x.color = RED; // 如果父节点也是红色 while (x != null &amp;&amp; x != root &amp;&amp; x.parent.color == RED) { //如果父节点是祖父节点的左子节点 if (parentOf(x) == leftOf(parentOf(parentOf(x)))) { //获取祖父节点的右子节点 Entry&lt;K,V> y = rightOf(parentOf(parentOf(x))); //如果父节点的兄弟节点也是红色 if (colorOf(y) == RED) { //把父节点和父节点的兄弟节点设为黑色 setColor(parentOf(x), BLACK); setColor(y, BLACK); //把祖父节点设为红色 setColor(parentOf(parentOf(x)), RED); //定位到祖父节点，分析下一步的变化规则 x = parentOf(parentOf(x)); //如果父节点的兄弟节点不是红色 } else { //如果当前节点是右子节点 if (x == rightOf(parentOf(x))) { //说明是“折线型失衡”，先左旋，再右旋 x = parentOf(x); rotateLeft(x); } //“直线型失衡”，直接右旋 setColor(parentOf(x), BLACK); setColor(parentOf(parentOf(x)), RED); rotateRight(parentOf(parentOf(x))); } } else { Entry&lt;K,V> y = leftOf(parentOf(parentOf(x))); if (colorOf(y) == RED) { setColor(parentOf(x), BLACK); setColor(y, BLACK); setColor(parentOf(parentOf(x)), RED); x = parentOf(parentOf(x)); } else { if (x == leftOf(parentOf(x))) { x = parentOf(x); rotateRight(x); } setColor(parentOf(x), BLACK); setColor(parentOf(parentOf(x)), RED); rotateLeft(parentOf(parentOf(x))); } } } //永远保持根节点为黑色 root.color = BLACK; } 3.2 getpublic V get(Object key) { Entry&lt;K,V> p = getEntry(key); return (p==null ? null : p.value); } get其实没什么好看的，就是搜索树的搜索。 final Entry&lt;K,V> getEntry(Object key) { // Offload comparator-based version for sake of performance if (comparator != null) return getEntryUsingComparator(key); if (key == null) throw new NullPointerException(); @SuppressWarnings(\"unchecked\") Comparable&lt;? super K> k = (Comparable&lt;? super K>) key; Entry&lt;K,V> p = root; while (p != null) { int cmp = k.compareTo(p.key); if (cmp &lt; 0) p = p.left; else if (cmp > 0) p = p.right; else return p; } return null; } 3.3 removepublic V remove(Object key) { Entry&lt;K,V> p = getEntry(key); if (p == null) return null; V oldValue = p.value; deleteEntry(p); return oldValue; } 写红黑树的时候提到，删除操作可复杂了，分好多情况，这里也不详细说明了： private void deleteEntry(Entry&lt;K,V> p) { modCount++; size--; // If strictly internal, copy successor's element to p and then make p // point to successor. // 如果p有两个孩子节点 if (p.left != null &amp;&amp; p.right != null) { // 获取后继结点 Entry&lt;K,V> s = successor(p); // 用后继节点替换当前节点（颜色不变） p.key = s.key; p.value = s.value; // 然后把p指向s，和后面p只有一个或0个孩子节点的方法通用 p = s; } // p has 2 children // Start fixup at replacement node, if it exists. Entry&lt;K,V> replacement = (p.left != null ? p.left : p.right); //有一个孩子节点 if (replacement != null) { // Link replacement to parent replacement.parent = p.parent; if (p.parent == null) root = replacement; else if (p == p.parent.left) p.parent.left = replacement; else p.parent.right = replacement; // Null out links so they are OK to use by fixAfterDeletion. p.left = p.right = p.parent = null; // Fix replacement if (p.color == BLACK) fixAfterDeletion(replacement); } else if (p.parent == null) { // return if we are the only node. root = null; //没有孩子节点，且要删除的是黑色节点，那么还要通过fixAfterDeletion再继续调整 } else { // No children. Use self as phantom replacement and unlink. if (p.color == BLACK) fixAfterDeletion(p); if (p.parent != null) { if (p == p.parent.left) p.parent.left = null; else if (p == p.parent.right) p.parent.right = null; p.parent = null; } } } private void fixAfterDeletion(Entry&lt;K,V> x) { while (x != root &amp;&amp; colorOf(x) == BLACK) { if (x == leftOf(parentOf(x))) { Entry&lt;K,V> sib = rightOf(parentOf(x)); if (colorOf(sib) == RED) { setColor(sib, BLACK); setColor(parentOf(x), RED); rotateLeft(parentOf(x)); sib = rightOf(parentOf(x)); } if (colorOf(leftOf(sib)) == BLACK &amp;&amp; colorOf(rightOf(sib)) == BLACK) { setColor(sib, RED); x = parentOf(x); } else { if (colorOf(rightOf(sib)) == BLACK) { setColor(leftOf(sib), BLACK); setColor(sib, RED); rotateRight(sib); sib = rightOf(parentOf(x)); } setColor(sib, colorOf(parentOf(x))); setColor(parentOf(x), BLACK); setColor(rightOf(sib), BLACK); rotateLeft(parentOf(x)); x = root; } } else { // symmetric Entry&lt;K,V> sib = leftOf(parentOf(x)); if (colorOf(sib) == RED) { setColor(sib, BLACK); setColor(parentOf(x), RED); rotateRight(parentOf(x)); sib = leftOf(parentOf(x)); } if (colorOf(rightOf(sib)) == BLACK &amp;&amp; colorOf(leftOf(sib)) == BLACK) { setColor(sib, RED); x = parentOf(x); } else { if (colorOf(leftOf(sib)) == BLACK) { setColor(rightOf(sib), BLACK); setColor(sib, RED); rotateLeft(sib); sib = leftOf(parentOf(x)); } setColor(sib, colorOf(parentOf(x))); setColor(parentOf(x), BLACK); setColor(leftOf(sib), BLACK); rotateRight(parentOf(x)); x = root; } } } setColor(x, BLACK); } 4 构造方法考虑到TreeMap是由红黑树实现的，不存在什么扩容，构造方法也很简单： public TreeMap() { comparator = null; } public TreeMap(Comparator&lt;? super K> comparator) { this.comparator = comparator; }","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"搜索树","slug":"搜索树","permalink":"https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"},{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://www.codetool.top/tags/jdk/"},{"name":"集合","slug":"集合","permalink":"https://www.codetool.top/tags/%E9%9B%86%E5%90%88/"},{"name":"源码研究","slug":"源码研究","permalink":"https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"}]},{"title":"leetcode134-加油站","slug":"leetcode134-加油站","date":"2020-02-15T17:57:56.000Z","updated":"2020-02-15T18:47:21.958Z","comments":true,"path":"article/leetcode134-加油站/","link":"","permalink":"https://www.codetool.top/article/leetcode134-%E5%8A%A0%E6%B2%B9%E7%AB%99/","excerpt":"","text":"1 原题在一条环路上有 N 个加油站，其中第 i 个加油站有汽油 gas[i] 升。 你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。 如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1。 说明: 如果题目有解，该答案即为唯一答案。 输入数组均为非空数组，且长度相同。 输入数组中的元素均为非负数。 示例1: 输入：gas = [1,2,3,4,5]cost = [3,4,5,1,2]输出： 3解释：从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。因此，3 可为起始索引。 示例2: 输入：gas = [2,3,4]cost = [3,4,3]输出： -1解释：你不能从 0 号或 1 号加油站出发，因为没有足够的汽油可以让你行驶到下一个加油站。我们从 2 号加油站出发，可以获得 4 升汽油。 此时油箱有 = 0 + 4 = 4 升汽油开往 0 号加油站，此时油箱有 4 - 3 + 2 = 3 升汽油开往 1 号加油站，此时油箱有 3 - 3 + 3 = 3 升汽油你无法返回 2 号加油站，因为返程需要消耗 4 升汽油，但是你的油箱只有 3 升汽油。因此，无论怎样，你都不可能绕环路行驶一周。 2 解法2.1 思想我们从0出发，每经过一个加油站计算剩余的油量（允许负值），那么假设有一个加油站可以从这里出发环行一圈，那么剩余的油量在这之前应该是达到了最低值，后面渐渐才“好起来了”(有起势)。 2.2 代码class Solution { public int canCompleteCircuit(int[] gas, int[] cost) { int minLeft = Integer.MAX_VALUE; int min = -1; int gasLeft = 0; for(int i = 0;i&lt;gas.length;i++){ gasLeft += gas[i]; gasLeft -= cost[i]; if(gasLeft &lt; minLeft) { minLeft = gasLeft; min = i; } } int station = min+1==gas.length?0:min+1; return gasLeft>=0?station:-1; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"贪心法","slug":"贪心法","permalink":"https://www.codetool.top/tags/%E8%B4%AA%E5%BF%83%E6%B3%95/"}]},{"title":"Java反射机制和动态代理详解","slug":"Java反射机制和动态代理详解","date":"2020-02-15T13:49:08.000Z","updated":"2020-02-25T15:43:09.280Z","comments":true,"path":"article/Java反射机制和动态代理详解/","link":"","permalink":"https://www.codetool.top/article/Java%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6%E5%92%8C%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"1 反射1.1 概念反射机制： 指的是可以于运行时加载、探知、使用编译期间完全未知的类。 程序在运行状态中，可以动态加载一个只有名称的类，对于任意一个已加载的类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性； Class c = Class.forName(\"com.abc.test.User\"); 加载完类之后，在堆内存中，就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以我们形象地称之为：反射。 Class.forName 使用的类加载器是调用者的类加载器。 1.2 Class类一个类被加载之后，JVM 会创建一个对应该类的 Class 对象，类的整个结构信息会放在相应的 Class 对象中。 如果多次执行 forName 等加载类的方法，类只会被加载一次；一个类只会形成一个 Class对象，无论执行多少次加载类的方法，获得的 Class 都是一样的。 1.3 使用/* * 获取Class对象的三种方式 */ Class clazz1 = Class.forName(\"className\"); Class clazz2 = obj.getClass();//obj为某一个类的实例，getClass()获取这个实例 Class clazz3 = Proson.class//Person为可以加载到的类名 /* * 使用 */ Object obj1=c.newInstance();//创建一个c的实例 Constructor constructor = clazz1.getConstructor(String.class, Integer.class);//通过class对象获取一个参数类型对应的构造器 Object obj2 = constructor.newInstance(\"name\",22);//通过构造器对象获取实例对象 Method method1 = obj2.getMethod(\"foo\",String.class);//通过class对象获取一个方法对象 method1.invoke(obj2,\"name\");//通过方法对象调用 1.4 用途 动态加载类、动态获取类的信息（属性、方法、构造器） 动态构造对象 动态构造类和对象的任意方法、构造器 动态调用和处理属性 获取泛型信息 处理注解 1.5 性能反射带来灵活性的同时，也有降低程序执行效率的弊端。 很多本来可以在编译阶段优化和验证的东西必须要等到运行时才能处理。 setAccessible 方法不仅可以标记某些私有的属性方法为可访问的属性方法，并且可以提高程序的执行效率。 实际上是启用和禁用访问安全检查的开关。如果做检查就会降低效率；关闭检查就可以提高效率。 反射调用方法比直接调用要慢大约 30 倍，如果跳过安全检查的话比直接调用要慢大约 7 倍 开启和不开启安全检查对于反射而言可能会差 4 倍的执行效率。 为什么慢? 验证等防御代码过于繁琐，这一步本来在 link 阶段，现在却在计算时进行验证 产生很多临时对象，造成 GC 与计算时间消耗 由于缺少上下文，丢失了很多运行时的优化，比如 JIT(它可以看作 JVM 的重要评测标准之一) 当然，现代 JVM 也不是非常慢了，它能够对反射代码进行缓存以及通过方法计数器同样实现 JIT 优化，所以反射不一定慢。 2 动态代理代理的定义：给目标对象提供一个代理对象，并由代理对象控制对目标对象的引用 静态代理：代理类是在编译时就实现好的。也就是说 Java 编译完成后代理类是一个实际的class 文件。代理类和被代理类都实现业务接口，代理类通过组合关系使用被代理对象。 动态代理：代理类是在运行时生成的。也就是说 Java 编译完之后并没有实际的 class 文件，而是在运行时动态生成的类字节码，并加载到 JVM 中。 代理的目的：(1) 通过引入代理对象的方式来间接访问目标对象，防止直接访问目标对象给系统带来的不必要复杂性；(2) 通过代理对象对原有的业务增强。 2.1 JDK动态代理2.1.1 概述和使用静态代理的缺陷：业务的拓展，实现接口的增多。开放-封闭原则：对外拓展开放，对修改关闭。 JDK 动态代理是由 Java 内部的反射机制+动态生成字节码 来实现的，cglib 动态代理底层则是借助 asm 来实现的。总的来说，反射机制在生成类的过程中比较高效，而 asm 在生成类之后的相关执行过程中比较高效（可以通过将 asm 生成的类进行缓存，这样解决 asm 生成类过程低效问题）。还有一点必须注意：JDK 动态代理的应用前提，必须是目标类基于统一的接口。如果没有上述前提，JDK 动态代理不能应用。由此可以看出，JDK 动态代理有一定的局限性，cglib 这种第三方类库实现的动态代理应用更加广泛，且在效率上更有优势。 前者必须基于接口，后者不需要接口，是基于继承的，但是不能代理 final 类和 final 方法；JDK 采用反射机制调用委托类的方法，CGLIB 采用类似索引的方式直接调用委托类方法；前者效率略低于后者效率，CGLIB 效率略高（不是一定的） Proxy 类（代理类）的设计用到代理模式的设计思想，Proxy 类对象实现了代理目标的所有接口，并代替目标对象进行实际的操作。代理的目的是在目标对象方法的基础上作增强，这种增强的本质通常就是对目标对象的方法进行拦截。所以，Proxy 应该包括一个方法拦截器，来指示当拦截到方法调用时作何种处理。InvocationHandler 就是拦截器的接口。 要想创建一个代理对象，需要使用Proxy类的newProxyInstance方法。这个方法有三个参数： 一个类加载器 一个Class对象数组，每个元素都是需要实现的接口 一个调用处理器（InvocationHandler） public class RentInvocationHandler implements InvocationHandler { private Object object;//被代理的对象，实际的方法执行者 public RentInvocationHandler(Object object) { this.object = object; } //通过Proxy获取动态代理的对象 public Object getProxyInstance(){ return Proxy.newProxyInstance(object.getClass().getClassLoader(),object.getClass().getInterfaces(),this) } /** * @param proxy:代理类 * @param method：代理类调用处理程序的方法对象 * @param args：方法的参数 */ @Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable { System.out.println(\"使用动态代理做的一些增强的操作......\"); //第一个参数表示真实对象 //第二个参数表示参数 Object result = method.invoke(object, args); return result; } } 使用的时候就直接传要代理的对象构造代理对象就行了。 2.1.2 原理Proxy.newProxyInstance： public static Object newProxyInstance(ClassLoader loader, Class&lt;?>[] interfaces, InvocationHandler h) throws IllegalArgumentException { Objects.requireNonNull(h); final Class&lt;?>[] intfs = interfaces.clone(); final SecurityManager sm = System.getSecurityManager(); if (sm != null) { checkProxyAccess(Reflection.getCallerClass(), loader, intfs); } /* * Look up or generate the designated proxy class. */ //生成代理类的Class对象 Class&lt;?> cl = getProxyClass0(loader, intfs); /* * Invoke its constructor with the designated invocation handler. */ try { if (sm != null) { checkNewProxyPermission(Reflection.getCallerClass(), cl); } // 获取代理对象的构造方法（constructorParams就是InvocationHandler的Class） final Constructor&lt;?> cons = cl.getConstructor(constructorParams); final InvocationHandler ih = h; if (!Modifier.isPublic(cl.getModifiers())) { AccessController.doPrivileged(new PrivilegedAction&lt;Void>() { public Void run() { cons.setAccessible(true); return null; } }); } // 生成代理类的实例并把 InvocationHandlerImpl 的实例传给它的构造方法 return cons.newInstance(new Object[]{h}); } catch (IllegalAccessException|InstantiationException e) { throw new InternalError(e.toString(), e); } catch (InvocationTargetException e) { Throwable t = e.getCause(); if (t instanceof RuntimeException) { throw (RuntimeException) t; } else { throw new InternalError(t.toString(), t); } } catch (NoSuchMethodException e) { throw new InternalError(e.toString(), e); } } 可以看出getProxyClass0应该就是生成代理类字节码的关键。 private static Class&lt;?> getProxyClass0(ClassLoader loader, Class&lt;?>... interfaces) { if (interfaces.length > 65535) { throw new IllegalArgumentException(\"interface limit exceeded\"); } // If the proxy class defined by the given loader implementing // the given interfaces exists, this will simply return the cached copy; // otherwise, it will create the proxy class via the ProxyClassFactory return proxyClassCache.get(loader, interfaces); } private static final WeakCache&lt;ClassLoader, Class&lt;?>[], Class&lt;?>> proxyClassCache = new WeakCache&lt;>(new KeyFactory(), new ProxyClassFactory()); public V get(K key, P parameter) { Objects.requireNonNull(parameter); expungeStaleEntries(); Object cacheKey = CacheKey.valueOf(key, refQueue); // lazily install the 2nd level valuesMap for the particular cacheKey ConcurrentMap&lt;Object, Supplier&lt;V>> valuesMap = map.get(cacheKey); if (valuesMap == null) { ConcurrentMap&lt;Object, Supplier&lt;V>> oldValuesMap = map.putIfAbsent(cacheKey, valuesMap = new ConcurrentHashMap&lt;>()); if (oldValuesMap != null) { valuesMap = oldValuesMap; } } // create subKey and retrieve the possible Supplier&lt;V> stored by that // subKey from valuesMap Object subKey = Objects.requireNonNull(subKeyFactory.apply(key, parameter)); Supplier&lt;V> supplier = valuesMap.get(subKey); Factory factory = null; while (true) { if (supplier != null) { // supplier might be a Factory or a CacheValue&lt;V> instance V value = supplier.get(); if (value != null) { return value; } } // else no supplier in cache // or a supplier that returned null (could be a cleared CacheValue // or a Factory that wasn't successful in installing the CacheValue) // lazily construct a Factory if (factory == null) { factory = new Factory(key, parameter, subKey, valuesMap); } if (supplier == null) { supplier = valuesMap.putIfAbsent(subKey, factory); if (supplier == null) { // successfully installed Factory supplier = factory; } // else retry with winning supplier } else { if (valuesMap.replace(subKey, supplier, factory)) { // successfully replaced // cleared CacheEntry / unsuccessful Factory // with our Factory supplier = factory; } else { // retry with current supplier supplier = valuesMap.get(subKey); } } } } 最终跟随源码会找到ProxyGenerator.generateClassFile方法，实际上就是根据class文件规则改写字节码流。 private byte[] generateClassFile() { this.addProxyMethod(hashCodeMethod, Object.class); this.addProxyMethod(equalsMethod, Object.class); this.addProxyMethod(toStringMethod, Object.class); Class[] var1 = this.interfaces; int var2 = var1.length; int var3; Class var4; for(var3 = 0; var3 &lt; var2; ++var3) { var4 = var1[var3]; Method[] var5 = var4.getMethods(); int var6 = var5.length; for(int var7 = 0; var7 &lt; var6; ++var7) { Method var8 = var5[var7]; this.addProxyMethod(var8, var4); } } Iterator var11 = this.proxyMethods.values().iterator(); List var12; while(var11.hasNext()) { var12 = (List)var11.next(); checkReturnTypes(var12); } Iterator var15; try { this.methods.add(this.generateConstructor()); var11 = this.proxyMethods.values().iterator(); while(var11.hasNext()) { var12 = (List)var11.next(); var15 = var12.iterator(); while(var15.hasNext()) { ProxyGenerator.ProxyMethod var16 = (ProxyGenerator.ProxyMethod)var15.next(); this.fields.add(new ProxyGenerator.FieldInfo(var16.methodFieldName, \"Ljava/lang/reflect/Method;\", 10)); this.methods.add(var16.generateMethod()); } } this.methods.add(this.generateStaticInitializer()); } catch (IOException var10) { throw new InternalError(\"unexpected I/O Exception\", var10); } if (this.methods.size() > 65535) { throw new IllegalArgumentException(\"method limit exceeded\"); } else if (this.fields.size() > 65535) { throw new IllegalArgumentException(\"field limit exceeded\"); } else { this.cp.getClass(dotToSlash(this.className)); this.cp.getClass(\"java/lang/reflect/Proxy\"); var1 = this.interfaces; var2 = var1.length; for(var3 = 0; var3 &lt; var2; ++var3) { var4 = var1[var3]; this.cp.getClass(dotToSlash(var4.getName())); } this.cp.setReadOnly(); ByteArrayOutputStream var13 = new ByteArrayOutputStream(); DataOutputStream var14 = new DataOutputStream(var13); try { var14.writeInt(-889275714); var14.writeShort(0); var14.writeShort(49); this.cp.write(var14); var14.writeShort(this.accessFlags); var14.writeShort(this.cp.getClass(dotToSlash(this.className))); var14.writeShort(this.cp.getClass(\"java/lang/reflect/Proxy\")); var14.writeShort(this.interfaces.length); Class[] var17 = this.interfaces; int var18 = var17.length; for(int var19 = 0; var19 &lt; var18; ++var19) { Class var22 = var17[var19]; var14.writeShort(this.cp.getClass(dotToSlash(var22.getName()))); } var14.writeShort(this.fields.size()); var15 = this.fields.iterator(); while(var15.hasNext()) { ProxyGenerator.FieldInfo var20 = (ProxyGenerator.FieldInfo)var15.next(); var20.write(var14); } var14.writeShort(this.methods.size()); var15 = this.methods.iterator(); while(var15.hasNext()) { ProxyGenerator.MethodInfo var21 = (ProxyGenerator.MethodInfo)var15.next(); var21.write(var14); } var14.writeShort(0); return var13.toByteArray(); } catch (IOException var9) { throw new InternalError(\"unexpected I/O Exception\", var9); } } } 2.2 CGLIB动态代理CGLIB(Code Generation Library)是一个基于 ASM 的字节码生成库，它允许我们在运行时对字节码进行修改和动态生成。CGLIB 通过继承方式实现代理。 CGLIB 的核心类： net.sf.cglib.proxy.Enhancer – 主要的增强类 net.sf.cglib.proxy.MethodInterceptor – 主要的方法拦截类，它是 Callback 接口的子接口，需要用户实现 net.sf.cglib.proxy.MethodProxy – JDK 的 java.lang.reflect.Method 类的代理类，可以方便的实现对源对象方法的调用,如使用： Object o = methodProxy.invokeSuper(proxy, args);//虽然第一个参数是被代理对象，也不会出现死循环的问题。 net.sf.cglib.proxy.MethodInterceptor 接口是最通用的回调（callback）类型，它经常被基于代理的 AOP 用来实现拦截（intercept）方法的调用。这个接口只定义了一个方法 public Object intercept( Object object, java.lang.reflect.Method method,Object[] args, MethodProxy proxy) throws Throwable; 第一个参数是代理对像，第二和第三个参数分别是拦截的方法和方法的参数。原来的方法可能通过使用 java.lang.reflect.Method 对象的一般反射调用，或者使用net.sf.cglib.proxy.MethodProxy对象调用。net.sf.cglib.proxy.MethodProxy 通常被首选使用，因为它更快。 public class CglibProxy implements MethodInterceptor { @Override public Object intercept(Object o, Method method, Object[] args, MethodProxy methodProxy) throws Throwable { System.out.println(\"++++++before \" + methodProxy.getSuperName() + \"++++++\"); System.out.println(method.getName()); Object o1 = methodProxy.invokeSuper(o, args); System.out.println(\"++++++before \" + methodProxy.getSuperName() + \"++++++\"); return o1; } } public class Main { public static void main(String[] args) { CglibProxy cglibProxy = new CglibProxy(); Enhancer enhancer = new Enhancer(); enhancer.setSuperclass(UserServiceImpl.class); enhancer.setCallback(cglibProxy); UserService o = (UserService)enhancer.create(); o.getName(1); o.getAge(1); } } 我们通过 CGLIB 的 Enhancer 来指定要代理的目标对象、实际处理代理逻辑的对象，最终通过调用 create()方法得到代理对象，对这个对象所有非 final 方法的调用都会转发给MethodInterceptor.intercept()方法，在 intercept()方法里我们可以加入任何逻辑，比如修改方法参数，加入日志功能、安全检查功能等；通过调用 MethodProxy.invokeSuper()方法，我们将调用转发给原始对象，具体到本例，就是 HelloConcrete 的具体方法。CGLIG 中MethodInterceptor 的作用跟 JDK 代理中的 InvocationHandler 很类似，都是方法调用的中转站。 注意：对于从 Object 中继承的方法，CGLIB 代理也会进行代理，如 hashCode()、equals()、toString()等，但是 getClass()、wait()等方法不会，因为它是 final 方法，CGLIB 无法代理。既然是继承就不得不考虑 final 的问题。我们知道 final 类型不能有子类，所以 CGLIB 不能代理 final 类型。 final 方法是不能重载的，所以也不能通过 CGLIB 代理，遇到这种情况不会抛异常，而是会跳过 final 方法只代理其他方法。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"基础知识","slug":"基础知识","permalink":"https://www.codetool.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"name":"动态代理","slug":"动态代理","permalink":"https://www.codetool.top/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"}]},{"title":"CopyOnWriteArrayList源码分析","slug":"CopyOnWriteArrayList源码分析","date":"2020-02-15T11:45:35.000Z","updated":"2020-02-15T11:54:33.917Z","comments":true,"path":"article/CopyOnWriteArrayList源码分析/","link":"","permalink":"https://www.codetool.top/article/CopyOnWriteArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","excerpt":"","text":"1 总结总结放前面防止太长不看 CopyOnWriteArrayList是一个线程安全、并且在读操作时无锁的List实现。 CopyOnWriteArrayList内部通过volatile数组来存储数据，通过getArray和setArray维持语义，读操作不加锁，写操作复制原数组然后在复制的数组上面进行操作，完成操作之后再用新数组替换原数组。 CopyOnWriteArrayList适合读多写少的并发场景，它的写操作效率极低，所有写操作共用一把锁，甚至在容量达到数组上限的时候添加元素只会用一个原数组的容量+1的新数组来代替它。 只能保证数据的最终一致性，不能保证数据的实时一致性。写和读分别作用在新老不同容器上，在写操作执行过程中，读不会阻塞但读取到的却是老容器的数据。 2 重要方法2.1 addpublic boolean add(E e) { final ReentrantLock lock = this.lock; lock.lock(); try { // 仅仅return 内部 array Object[] elements = getArray(); int len = elements.length; // 复制一个数组，并且容量+1 Object[] newElements = Arrays.copyOf(elements, len + 1); newElements[len] = e; // 用新数组替换内部数组 setArray(newElements); return true; } finally { lock.unlock(); } } 2.2 getpublic E get(int index) { return get(getArray(), index); } private E get(Object[] a, int index) { return (E) a[index]; } 可以看出无论在什么时候获取数组都是使用的getArray()，这个方法返回内部数组array，而对array的修改并不会在原数组上直接操作，而是先复制再操作，操作完之后替换原来的数组，这样不论在什么时候写和读都不会在同一个数组上操作而造成冲突。 2.3 setpublic E set(int index, E element) { //写操作用的是同一把锁 final ReentrantLock lock = this.lock; lock.lock(); try { Object[] elements = getArray(); E oldValue = get(elements, index); if (oldValue != element) { int len = elements.length; Object[] newElements = Arrays.copyOf(elements, len); newElements[index] = element; setArray(newElements); } else { // 为了保持“volatile”的语义，任何一个读操作都应该是一个写操作的结果， // 也就是读操作看到的数据一定是某个写操作的结果（尽管写操作没有改变数据本身）。 // 所以这里即使不设置也没有问题，仅仅是为了一个语义上的补充（就如源码中的注释所言） // Not quite a no-op; ensures volatile write semantics setArray(elements); } return oldValue; } finally { lock.unlock(); } } 2.4 removepublic E remove(int index) { final ReentrantLock lock = this.lock; lock.lock(); try { Object[] elements = getArray(); int len = elements.length; E oldValue = get(elements, index); int numMoved = len - index - 1; if (numMoved == 0) setArray(Arrays.copyOf(elements, len - 1)); else { //移除的时候数组容量也是完全紧跟元素的数量，不留空间 Object[] newElements = new Object[len - 1]; System.arraycopy(elements, 0, newElements, 0, index); System.arraycopy(elements, index + 1, newElements, index, numMoved); setArray(newElements); } return oldValue; } finally { lock.unlock(); } }","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://www.codetool.top/tags/jdk/"},{"name":"集合","slug":"集合","permalink":"https://www.codetool.top/tags/%E9%9B%86%E5%90%88/"},{"name":"源码研究","slug":"源码研究","permalink":"https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"},{"name":"多线程","slug":"多线程","permalink":"https://www.codetool.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}]},{"title":"遗留线程安全类Vector和HashTable简要源码分析","slug":"遗留线程安全类Vector和HashTable简要源码分析","date":"2020-02-15T09:06:19.000Z","updated":"2020-02-15T10:16:21.055Z","comments":true,"path":"article/遗留线程安全类Vector和HashTable简要源码分析/","link":"","permalink":"https://www.codetool.top/article/%E9%81%97%E7%95%99%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%B1%BBVector%E5%92%8CHashTable%E7%AE%80%E8%A6%81%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","excerpt":"","text":"1 总结总结放前面防止太长不看 1.1 Vector Vector就是使用synchronized限制线程安全的一个List实现。 Vector是基于数组实现的，默认初始容量是10，在构造的时候可以指定初始容量和一个capacityIncrement，扩容时默认翻倍扩容，如果指定了capacityIncrement则每次扩容增加capacityIncrement容量。 Stack是基于Vector实现的。 1.2 HashTable HashTable只用数组+链表存储节点。 HashTable添加节点的时候把节点连在链表的头部而不是尾部。 HashTable的节点类型是内部类Entry。 HashTable的数组下标与哈希值的对应关系是(hash &amp; 0x7FFFFFFF) % tab.length，本质上只是把HashMap的tab.length-1换成了0x7FFFFFFF，保证最高位符号位不为1，但HashMap把模运算换成了位运算，提高了效率。 HashTable的数组初始容量为11，不要求必须是2的整数次幂，甚至扩容的时候使用2*oldCapacity+1来扩容保证奇数。 2 Vector2.1 构造函数public Vector() { this(10); } public Vector(int initialCapacity) { this(initialCapacity, 0); } public Vector(int initialCapacity, int capacityIncrement) { super(); if (initialCapacity &lt; 0) throw new IllegalArgumentException(\"Illegal Capacity: \"+ initialCapacity); this.elementData = new Object[initialCapacity]; this.capacityIncrement = capacityIncrement; } 可以知道Vector也是基于数组实现的，默认初始容量是10，在构造的时候可以指定初始容量和一个capacityIncrement，可以猜到和扩容相关。 2.2 Addpublic synchronized boolean add(E e) { modCount++; ensureCapacityHelper(elementCount + 1); elementData[elementCount++] = e; return true; } 使用synchronized将整个函数限制了同步，重点看扩容： private void ensureCapacityHelper(int minCapacity) { // overflow-conscious code if (minCapacity - elementData.length > 0) grow(minCapacity); } private void grow(int minCapacity) { // overflow-conscious code int oldCapacity = elementData.length; // 翻倍扩容，如果指定了capacityIncrement则每次扩容增加capacityIncrement容量 int newCapacity = oldCapacity + ((capacityIncrement > 0) ? capacityIncrement : oldCapacity); if (newCapacity - minCapacity &lt; 0) newCapacity = minCapacity; if (newCapacity - MAX_ARRAY_SIZE > 0) newCapacity = hugeCapacity(minCapacity); elementData = Arrays.copyOf(elementData, newCapacity); } 扩容机制和ArrayList稍有不同，默认翻倍扩容，如果指定了capacityIncrement则每次扩容增加capacityIncrement容量。 2.3 removepublic synchronized E remove(int index) { modCount++; if (index >= elementCount) throw new ArrayIndexOutOfBoundsException(index); E oldValue = elementData(index); int numMoved = elementCount - index - 1; if (numMoved > 0) System.arraycopy(elementData, index+1, elementData, index, numMoved); elementData[--elementCount] = null; // Let gc do its work return oldValue; } 删除机制和ArrayList一样，就是用synchronized把整个函数修饰了。 3 HashTable3.1 构造方法public Hashtable() { this(11, 0.75f); } public Hashtable(int initialCapacity) { this(initialCapacity, 0.75f); } public Hashtable(int initialCapacity, float loadFactor) { if (initialCapacity &lt; 0) throw new IllegalArgumentException(\"Illegal Capacity: \"+ initialCapacity); if (loadFactor &lt;= 0 || Float.isNaN(loadFactor)) throw new IllegalArgumentException(\"Illegal Load: \"+loadFactor); if (initialCapacity==0) initialCapacity = 1; this.loadFactor = loadFactor; table = new Entry&lt;?,?>[initialCapacity]; threshold = (int)Math.min(initialCapacity * loadFactor, MAX_ARRAY_SIZE + 1); } 可以看出，和HashMap类似，也有loadFactor，默认位0.75f，而initialCapacity默认为11，不是一个2的整数次幂。 3.2 putpublic synchronized V put(K key, V value) { // Make sure the value is not null if (value == null) { throw new NullPointerException(); } // Makes sure the key is not already in the hashtable. Entry&lt;?,?> tab[] = table; int hash = key.hashCode(); int index = (hash &amp; 0x7FFFFFFF) % tab.length; @SuppressWarnings(\"unchecked\") Entry&lt;K,V> entry = (Entry&lt;K,V>)tab[index]; for(; entry != null ; entry = entry.next) { //如果原来存在旧值，替换旧值 if ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) { V old = entry.value; entry.value = value; return old; } } addEntry(hash, key, value, index); return null; } private void addEntry(int hash, K key, V value, int index) { modCount++; Entry&lt;?,?> tab[] = table; if (count >= threshold) { // Rehash the table if the threshold is exceeded rehash(); tab = table; hash = key.hashCode(); index = (hash &amp; 0x7FFFFFFF) % tab.length; } // Creates the new entry. @SuppressWarnings(\"unchecked\") Entry&lt;K,V> e = (Entry&lt;K,V>) tab[index]; //把e赋值给了新节点的next，可见是把新节点放在了链表的头部 tab[index] = new Entry&lt;>(hash, key, value, e); count++; } 通过这个函数发现它和JDK1.8的HashMap还是有挺大不同的： HashTable只用数组+链表存储节点，JDK1.8的HashMap增加了红黑树。 HashTable添加节点的时候把节点连在链表的头部而不是尾部。 HashTable的节点类型是内部类Entry，而HashMap是Node。 数组下标与哈希值的对应关系不同，HashTable是(hash &amp; 0x7FFFFFFF) % tab.length，本质上只是把HashMap的tab.length-1换成了0x7FFFFFFF，但HashMap把模运算换成了位运算，提高了效率。 然后来看扩容：扩容只发生在count &gt;= threshold的时候 protected void rehash() { int oldCapacity = table.length; Entry&lt;?,?>[] oldMap = table; // overflow-conscious code // 新的容量：旧容量的两倍+1 int newCapacity = (oldCapacity &lt;&lt; 1) + 1; if (newCapacity - MAX_ARRAY_SIZE > 0) { if (oldCapacity == MAX_ARRAY_SIZE) // Keep running with MAX_ARRAY_SIZE buckets return; newCapacity = MAX_ARRAY_SIZE; } Entry&lt;?,?>[] newMap = new Entry&lt;?,?>[newCapacity]; modCount++; threshold = (int)Math.min(newCapacity * loadFactor, MAX_ARRAY_SIZE + 1); table = newMap; // 重建Hash表 for (int i = oldCapacity ; i-- > 0 ;) { for (Entry&lt;K,V> old = (Entry&lt;K,V>)oldMap[i] ; old != null ; ) { Entry&lt;K,V> e = old; old = old.next; int index = (e.hash &amp; 0x7FFFFFFF) % newCapacity; e.next = (Entry&lt;K,V>)newMap[index]; newMap[index] = e; } } } 3.3 removepublic synchronized V remove(Object key) { Entry&lt;?,?> tab[] = table; int hash = key.hashCode(); int index = (hash &amp; 0x7FFFFFFF) % tab.length; @SuppressWarnings(\"unchecked\") Entry&lt;K,V> e = (Entry&lt;K,V>)tab[index]; for(Entry&lt;K,V> prev = null ; e != null ; prev = e, e = e.next) { if ((e.hash == hash) &amp;&amp; e.key.equals(key)) { modCount++; if (prev != null) { prev.next = e.next; } else { tab[index] = e.next; } count--; V oldValue = e.value; e.value = null; return oldValue; } } return null; } 没什么好说的，正常的链表移除节点的方法。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://www.codetool.top/tags/jdk/"},{"name":"集合","slug":"集合","permalink":"https://www.codetool.top/tags/%E9%9B%86%E5%90%88/"},{"name":"源码研究","slug":"源码研究","permalink":"https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"},{"name":"多线程","slug":"多线程","permalink":"https://www.codetool.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}]},{"title":"leetcode45-跳跃游戏II","slug":"leetcode45-跳跃游戏II","date":"2020-02-14T17:51:44.000Z","updated":"2020-02-14T18:02:38.534Z","comments":true,"path":"article/leetcode45-跳跃游戏II/","link":"","permalink":"https://www.codetool.top/article/leetcode45-%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8FII/","excerpt":"","text":"1 原题原题 给定一个非负整数数组，你最初位于数组的第一个位置。 数组中的每个元素代表你在该位置可以跳跃的最大长度。 你的目标是使用最少的跳跃次数到达数组的最后一个位置。 示例: 输入： [2,3,1,1,4]输出： 2解释： 跳到最后一个位置的最小跳跃数是 2。 从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。 说明: 假设你总是可以到达数组的最后一个位置。 2 解法2.1 思想 动态规划，找到能到达最后一个位置的最靠左的点，然后把这个点设为新的要到达的位置，再找能到达这个点的最靠左的点，直到找到下标0为止。 贪心算法，每跳一次，在可跳范围内找能跳到的最远的地方，到达这个最远的地方时则步数加一。 2.2 代码动态规划： class Solution { public int jump(int[] nums) { int jumpTo = nums.length-1; int count = 0; while(jumpTo!=0){ for(int i = 0;i&lt;jumpTo;i++){ if(i+nums[i]>=jumpTo) { jumpTo = i; count++; break; } } } return count; } } 贪心算法：(来源：windliang) class Solution { public int jump(int[] nums) { int end = 0; int maxPosition = 0; int steps = 0; for(int i = 0; i &lt; nums.length - 1; i++){ //找能跳的最远的 maxPosition = Math.max(maxPosition, nums[i] + i); if( i == end){ //遇到边界，就更新边界，并且步数加一 end = maxPosition; steps++; } } return steps; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"贪心法","slug":"贪心法","permalink":"https://www.codetool.top/tags/%E8%B4%AA%E5%BF%83%E6%B3%95/"}]},{"title":"Java日志框架JUL和Log4j介绍","slug":"Java日志框架JUL和Log4j介绍","date":"2020-02-14T14:23:10.000Z","updated":"2020-02-28T15:33:10.613Z","comments":true,"path":"article/Java日志框架JUL和Log4j介绍/","link":"","permalink":"https://www.codetool.top/article/Java%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6JUL%E5%92%8CLog4j%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"日志文件是用于记录系统操作事件的文件集合,可分为事件日志和消息日志。具有处理历史数据、诊断问题的追踪以及理解系统的活动等重要作用。 日志实现：JUL、logback、log4j、log4j2等 1 JUL全称java util logging，是java原生的日志框架，使用时不需要另外引用第三方类库，能够在小型应用中灵活使用 1.1 架构介绍 Loggers:被称为记录器,应用程序通过获取 Logger对象,调用其API来来发布日志信息。Logger通常是应用程序访问日志系统的入口程序。 Appenders:也被称为Handlers,每个Logger都会关联一组Handlers, Logger会将日志交给关联 Handlers处理,由Handlers负责将日志做记录。Handlers在此是一个抽象,其具体的实现决定了日志记录的位置可以是控制台、文件、网络上的其他日志服务或操作系统日志等。 Layouts:也被称为Formatters,它负责对日志事件中的数据进行转换和格式化。Layouts决定了数据在一条日志记录中的最终形式。 Level:每条日志消息都有一个关联的日志级别。该级别粗略指导了日志消息的重要性和紧迫,可以将Level和Loggers, Appenders做关联以便于我们过滤消息。 Filters:过滤器,根据需要定制哪些信息会被记录,哪些信息会被放过。 1.2 使用public class JULTest { // 快速入门 @Test public void testQuick() throws Exception{ // 1.获取Logger Logger logger = Logger.getLogger(\"com.rhett.JULTest\"); // 2.日志记录输出 logger.info(\"Hello JUL\"); // 通用方法进行日志记录 logger.log(Level.INFO,\"info msg\"); // 通过占位符方式输出变量值 String name = \"rhett\"; Integer age = 13; logger.log(Level.INFO,\"用户信息：{0},{1}\",new Object[]{name,age}); } } JUL的日志级别： OFF -&gt;Integer.MAX_VALUE SEVERE WARNING INFO CONFIG FINE FINER FINEST ALL -&gt;Integer.MIN_VALUE 每个级别都有一个value，当设定了过滤级别的值的时候，小于这个值的级别信息都不会输出 //日志级别 @Test public void testLogLevel() throws Exception{ // 1.获取logger Logger logger = Logger.getLogger(this.getClass().getName()); // 2.日志记录输出 logger.severe(\"severe\"); logger.warning(\"warning\"); logger.info(\"info\"); // JUL默认的日志级别 logger.config(\"config\"); logger.fine(\"fine\"); logger.finer(\"finer\"); logger.finest(\"finest\"); } //日志级别 @Test public void testLogConfig() throws Exception{ // 1.获取logger Logger logger = Logger.getLogger(this.getClass().getName()); // 关闭系统默认配置 logger.setUseParentHandlers(false); // 自定义配置日志级别 // 创建ConsoleHandler 控制台输出 ConsoleHandler consoleHandler = new ConsoleHandler(); // 创建simpleFormatter SimpleFormatter simpleFormatter = new SimpleFormatter(); // 进行关联 consoleHandler.setFormatter(simpleFormatter); logger.addHandler(consoleHandler); // 配置日志具体级别 logger.setLevel(Level.ALL); consoleHandler.setLevel(Level.ALL); // 创建FileHandler FileHandler fileHandler = new FileHandler(\"test.log\"); // 进行关联 fileHandler.setFormatter(simpleFormatter); logger.addHandler(fileHandler); // 2.日志记录输出 logger.severe(\"severe\"); logger.warning(\"warning\"); logger.info(\"info\"); // JUL默认的日志级别 logger.config(\"config\"); logger.fine(\"fine\"); logger.finer(\"finer\"); logger.finest(\"finest\"); } 1.3 logger的父子关系@Test public void testLogParent() throws Exception{ Logger logger1 = Logger.getLogger(\"com.rhett\"); Logger logger2 = Logger.getLogger(\"com\"); // 测试，logger2是logger1的父对象 System.out.println(logger1.getParent() == logger2); // 所有日志记录器的顶级父元素 LogManager$RootLogger，名称为空字符串 System.out.println(\"logger2 Parent:\"+logger2.getParent()+\",name:\"+logger2.getParent().getName()); // 关闭默认配置 logger2.setUseParentHandlers(false); // 设置logger2日志级别 // 自定义配置日志级别 // 创建ConsoleHandler 控制台输出 ConsoleHandler consoleHandler = new ConsoleHandler(); // 创建simpleFormatter SimpleFormatter simpleFormatter = new SimpleFormatter(); // 进行关联 consoleHandler.setFormatter(simpleFormatter); logger2.addHandler(consoleHandler); // 配置日志具体级别 logger2.setLevel(Level.ALL); consoleHandler.setLevel(Level.ALL); logger1.severe(\"severe\"); logger1.warning(\"warning\"); logger1.info(\"info\"); // JUL默认的日志级别 logger1.config(\"config\"); logger1.fine(\"fine\"); logger1.finer(\"finer\"); logger1.finest(\"finest\"); } 1.4 自定义配置文件默认配置文件：（logging.properties） # root logger 的默认处理器 handlers= java.util.logging.ConsoleHandler # 代表的是root logger的日志级别 .level= INFO # 默认位置：系统用户目录下 java.util.logging.FileHandler.pattern = %h/java%u.log java.util.logging.FileHandler.limit = 50000 java.util.logging.FileHandler.count = 1 java.util.logging.FileHandler.formatter = java.util.logging.XMLFormatter # 向控制台输出的handler对象 # 指定handler对象的日志级别 java.util.logging.ConsoleHandler.level = INFO # 指定handler对象的日志消息格式对象 java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter 自定义配置文件： # root logger 的默认处理器 handlers= java.util.logging.ConsoleHandler # 代表的是root logger的日志级别 .level= ALL # 自定义Logger使用 com.rhett.handlers = java.util.logging.ConsoleHandler com.rhett.level = CONFIG # 向文件输出的handler对象 # 指定文件路径，默认位置：系统用户目录下 java.util.logging.FileHandler.pattern = %h/java%u.log # 指定日志文件内容大小最多为50000条 java.util.logging.FileHandler.limit = 50000 # 指定日志文件的数量 java.util.logging.FileHandler.count = 1 # 指定handler对象的Formatter java.util.logging.FileHandler.formatter = java.util.logging.SimpleFormatter # 指定以追加的方式添加日志内容 java.util.logging.FileHandler.append = true # 向控制台输出的handler对象 # 指定handler对象的日志级别 java.util.logging.ConsoleHandler.level = ALL # 指定handler对象的Formatter java.util.logging.ConsoleHandler.formatter = java.util.logging.SimpleFormatter # 指定handler对象的字符集 java.util.logging.ConsoleHandler.encoding = UTF-8 # 指定formatter的format格式 java.util.logging.SimpleFormatter = %4$s: %5$s [%1$tc]%n 1.5 日志原理解析 初始化 LogManager LogManager加载logging.properties配置 添加Logger到LogManager 从单例LogManager获取Logger 设置级别Level,并指定日志记录LogRecord Filter提供了日志级别之外更细粒度的控制 Handler是用来处理日志输出位置 Formatter是用来格式化LogRecord的 2 Log4j2.1 使用@Test public void test01()throws Exception{ //初始化配置信息 BasicConfigurator.configure(); //获取logger Logger logger = Logger.getLogger(this.getClass()); //日志记录 logger.info(\"hello log4j\"); //日志级别 logger.fatal(\"fatal\"); // 严重错误，一般会造成系统崩溃并终止运行 logger.error(\"error\"); // 错误信息，一般不会影响系统运行 logger.warn(\"warn\"); // 警告信息，可能会发生问题 logger.info(\"info\"); // 运行信息，数据连接、网络连接、IO操作等等 logger.debug(\"debug\"); // 调试信息，一般在开发中使用，记录程序变量参数传递信息等等 logger.trace(\"trace\"); // 追踪信息，记录程序所有的流程信息 } 2.2 log4j组件Log4j是Apache的一个开源项目。 Log4J主要由Loggers (日志记录器)、Appenders (输出端)和Layouts(日志格式化器)组成。其中Loggers控制日志的输出级别与日志是否输出; Appenders 指定日志的输出方式(输出到控制台、文件等) ; Layouts控制日志信息的输出格式。 2.2.1 Loggers日志记录器，负责收集处理日志记录，实例的命名就是类”XX”的full quailied name (类的全限定名)，Logger的名字大小写敏感，其命名有继承机制:例如:name为org.apache.commons的logger会继承name为org.apache的logger。 Log4J中有一个特殊的logger叫做”root”,他是所有logger的根， 也就意味着其他所有的logger都会直接或者间接地继承自root。root logger可以用Logger.getRootLogger(方法获取。 log4j 1.2之前，Logger 类叫Category类。 2.2.2 Appenders类似于JUL中的handler。 Appender用来指定日志输出到哪个地方，可以同时指定日志的输出目的地。Log4j 常用的输出目的地有以下几种: 输出端类型 作用 ConsoleAppender 将日志输出到控制台 FileAppender 将日志输出到文件中 DailyRollingFileAppender 将日志输出到一个日志文件，并且每天输出到一个新的文件 RollingFileAppender 将日志信息输出到一个日志文件，并且指定文件的尺寸，当文件大小达到指定尺寸时，会自动把文件改名，同时产生一个新的文件 JDBCAppender 把日志信息保存到数据库中 2.2.3 Layouts类似于JUL中的Formatter。 布局器Layouts用于控制日志输出内容的格式，让我们可以使用各种需要的格式输出日志。Log4j常用的Layouts: 格式化器类型|作用HTMLLayout|格式化日志输出为HTML表格形式SimpleLayout|简单的日志输出格式化，打印的日志格式为(info - message)PatternLayout|最强大的格式化器，可以根据自定义格式输出日志，如果没有指定转换格式，就是用默认的转换格式 2.3 配置文件log4j.properties: # 指定Root Logger 默认配置信息 # 指定日志级别，使用的appender log4j.rootLogger = trace,console # 指定日志输出的appender对象 log4j.appender.console = org.apache.log4j.ConsoleAppender # 指定appender使用的layout log4j.appender.console.layout = org.apache.log4j.SimpleLayout 使用PatternLayout： # 指定Root Logger 默认配置信息 # 指定日志级别，使用的appender log4j.rootLogger = trace,console # 指定日志输出的appender对象 log4j.appender.console = org.apache.log4j.ConsoleAppender # 指定appender使用的layout log4j.appender.console.layout = org.apache.log4j.PatternLayout log4j.appender.console.layout.conversionPattern = %r [%t] %p %c %x - %m%n conversionPattern的占位符含义如下： 符号 含义 %m 输出代码中指定的日志信息 %p 输出优先级，即DEBUG、 INFO等 %n 换行符(Windows平台的换行符为 “\\r\\n”, Unix平台为”\\n”) %r 输出自应用启动到输出该log信息耗费的毫秒数 %c 输出打印语句所属的类的全名 %t 输出产生该日志的线程全名 %d 输出服务器当前时间，格式默认为ISO8601, 也可以指定格式，如: %d{yyyy年M月dd日HH:mm:ss} %l 输出日志时间发生的位置，包括类名、线程、在代码中的行数。如: Test.main(Test. java:10) %F 输出日志消息产生时所在的文件名称 %L 输出代码中的行号 %% 输出一个“%”字符 使用FileAppender： # 指定Root Logger 默认配置信息 # 指定日志级别，使用的appender log4j.rootLogger = trace,console,file # 指定日志输出的appender对象 log4j.appender.console = org.apache.log4j.ConsoleAppender # 指定appender使用的layout log4j.appender.console.layout = org.apache.log4j.PatternLayout log4j.appender.console.layout.conversionPattern = %r [%t] %p %c %x - %m%n log4j.appender.file = org.apache.log4j.FileAppender log4j.appender.file.layout = org.apache.log4j.PatternLayout log4j.appender.file.layout.conversionPattern = [%-10p]%r %l %d{yyyy-MM-dd HH:mm:ss.SSS} %m%n # 指定日志文件保存路径 log4j.appender.file.file = logs/log4j.log # 指定日志文件的字符集 log4j.appender.file.encoding = UTF-8 使用RollingFileAppender和DailyRollingFileAppender： # 指定Root Logger 默认配置信息 # 指定日志级别，使用的appender log4j.rootLogger = trace,console,file,rollingFile,dailyFile # 指定日志输出的appender对象 log4j.appender.console = org.apache.log4j.ConsoleAppender # 指定appender使用的layout log4j.appender.console.layout = org.apache.log4j.PatternLayout log4j.appender.console.layout.conversionPattern = %r [%t] %p %c %x - %m%n log4j.appender.file = org.apache.log4j.FileAppender log4j.appender.file.layout = org.apache.log4j.PatternLayout log4j.appender.file.layout.conversionPattern = [%-10p]%r %l %d{yyyy-MM-dd HH:mm:ss.SSS} %m%n # 指定日志文件保存路径 log4j.appender.file.file = logs/log4j.log # 指定日志文件的字符集 log4j.appender.file.encoding = UTF-8 log4j.appender.rollingFile = org.apache.log4j.RollingFileAppender log4j.appender.rollingFile.layout = org.apache.log4j.PatternLayout log4j.appender.rollingFile.layout.conversionPattern = [%-10p]%r %l %d{yyyy-MM-dd HH:mm:ss.SSS} %m%n # 指定日志文件保存路径 log4j.appender.rollingFile.file = logs/log4j.log # 指定日志文件的字符集 log4j.appender.rollingFile.encoding = UTF-8 # 指定日志文件内容的大小 log4j.appender.rollingFile.maxFileSize = 1MB # 指定日志文件的数量，超过该数量则从最久远的日志文件开始覆盖 log4j.appender.rollingFile.maxBackupIndex = 10 log4j.appender.dailyFile = org.apache.log4j.DailyRollingFileAppender log4j.appender.dailyFile.layout = org.apache.log4j.PatternLayout log4j.appender.dailyFile.layout.conversionPattern = [%-10p]%r %l %d{yyyy-MM-dd HH:mm:ss.SSS} %m%n # 指定日志文件保存路径 log4j.appender.dailyFile.file = logs/log4j.log # 指定日志文件的字符集 log4j.appender.dailyFile.encoding = UTF-8 # 指定日期拆分规则 log4j.appender.dailyFile.datePattern = '.'yyyy-MM-dd 使用JDBCAppender： #mysql log4j.appender.logDB=org.apache.log4j.jdbc.JDBCAppender log4j.appender.logDB.layout=org.apache.log4j.PatternLayout log4j.appender.logDB.Driver=com.mysql.jdbc.Driver log4j.appender.logDB.URL= jdbc :mysql ://localhost :3306/test log4j.appender.logDB.User=root log4j.appender.logDB.Password=root log4j.appender.logDB.Sql=INSERT INTO \\ log(project_name,create_date,level,category,file_name,thread_name,line,all_category,message) \\ values('rhett','%d{yyyy-MM-dd HH:mm:ss}','%p','%c','%F','%t','%L','%l','%m') 自定义logger设置： # 自定义logger对象设置 log4j.logger.com.rhett = info,file","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"日志","slug":"日志","permalink":"https://www.codetool.top/tags/%E6%97%A5%E5%BF%97/"}]},{"title":"阻塞队列BlockingQueue详解","slug":"阻塞队列BlockingQueue详解","date":"2020-02-14T08:23:09.000Z","updated":"2020-02-14T08:24:05.013Z","comments":true,"path":"article/阻塞队列BlockingQueue详解/","link":"","permalink":"https://www.codetool.top/article/%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97BlockingQueue%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"阻塞队列是生产者消费者模式的经典体现。 我们在曾在Java线程池详解中自己实现过一个阻塞队列，这篇文章我们来研究一下JDK中的阻塞队列： 1 BlockingQueue接口主要方法 抛出异常 特殊值 阻塞 超时 插入 add(e) offer(e) put(e) offer(e, time, unit) 移除 remove() poll() take() poll(time, unit) 检查 element() peek() 不可用 不可用 其中抛出异常和特殊值都是来自父接口的方法，它们都是非阻塞的，分别代表如果操作不成功抛出 IllegalStateException 异常、如果操作不成功返回false。 而“阻塞”一列会一直保持等待直到操作成功，但是等待过程中可以被interrupt打断。 “超时”一列只等待一个限定时间，时间内没有操作成功则返回false。 2 ArrayBlockingQueue2.1 内部结构/** The queued items */ final Object[] items; /** items index for next take, poll, peek or remove */ int takeIndex; /** items index for next put, offer, or add */ int putIndex; /** Main lock guarding all access */ final ReentrantLock lock; /** Condition for waiting takes */ private final Condition notEmpty; /** Condition for waiting puts */ private final Condition notFull; ArrayBlockingQueue内部使用数组来实现队列操作，有两个指针takeIndex和putIndex分别指向要取出的位置（队列头）和要放入的位置（队列尾），实现了一个类似于循环队列的结构。使用一把锁管理出队、入队操作。 2.2 入队、出队原理入队通过enqueue函数实现： private void enqueue(E x) { // assert lock.getHoldCount() == 1; // assert items[putIndex] == null; final Object[] items = this.items; items[putIndex] = x; //如果队列尾超过数组尾部指向数组头 if (++putIndex == items.length) putIndex = 0; count++; notEmpty.signal(); } 入队完成之后调用notEmpty.signal()唤醒一个消费者线程。 出队通过dequeue函数实现： private E dequeue() { // assert lock.getHoldCount() == 1; // assert items[takeIndex] != null; final Object[] items = this.items; @SuppressWarnings(\"unchecked\") E x = (E) items[takeIndex]; items[takeIndex] = null; if (++takeIndex == items.length) takeIndex = 0; count--; if (itrs != null) itrs.elementDequeued(); notFull.signal(); return x; } 出队完成后调用notFull.signal();唤醒一个生产者线程。 2.3 构造方法及特点总结public ArrayBlockingQueue(int capacity) { this(capacity, false); } public ArrayBlockingQueue(int capacity, boolean fair) { if (capacity &lt;= 0) throw new IllegalArgumentException(); this.items = new Object[capacity]; lock = new ReentrantLock(fair); notEmpty = lock.newCondition(); notFull = lock.newCondition(); } ArrayBlockingQueue的锁可以设置为公平或非公平的，默认为非公平的 ArrayBlockingQueue构造时必须设置容量，容量不会变化。 ArrayBlockingQueue的入队、出队共用一把锁，不能同时进行 3 LinkedBlockingQueue3.1 内部结构static class Node&lt;E> { E item; Node&lt;E> next; Node(E x) { item = x; } } transient Node&lt;E> head; private transient Node&lt;E> last; /** The capacity bound, or Integer.MAX_VALUE if none */ private final int capacity; /** Current number of elements */ private final AtomicInteger count = new AtomicInteger(); /** Lock held by take, poll, etc */ private final ReentrantLock takeLock = new ReentrantLock(); /** Wait queue for waiting takes */ private final Condition notEmpty = takeLock.newCondition(); /** Lock held by put, offer, etc */ private final ReentrantLock putLock = new ReentrantLock(); /** Wait queue for waiting puts */ private final Condition notFull = putLock.newCondition(); LinkedBlockingQueue内部使用链表来实现队列操作，有两个节点指针head和last分别指向哨兵节点、数组的尾节点。与ArrayBlockingQueue不同的是使用了两把锁分别管理入队和出队。 3.2 入队、出队原理入队： public void put(E e) throws InterruptedException { if (e == null) throw new NullPointerException(); int c = -1; Node&lt;E> node = new Node&lt;E>(e); final ReentrantLock putLock = this.putLock; final AtomicInteger count = this.count; putLock.lockInterruptibly(); try { //由于count使用的是AtomicInteger，即使出队操作冲突了也没关系 while (count.get() == capacity) { notFull.await(); } //enqueue函数中就是简单的把节点连接到链表尾 enqueue(node); c = count.getAndIncrement(); if (c + 1 &lt; capacity) //如果插入后容量未满，则通知一个生产者 notFull.signal(); } finally { putLock.unlock(); } //如果插入前容量是0则通知一个消费者 if (c == 0) signalNotEmpty(); } 出队： public E take() throws InterruptedException { E x; int c = -1; final AtomicInteger count = this.count; final ReentrantLock takeLock = this.takeLock; takeLock.lockInterruptibly(); try { while (count.get() == 0) { notEmpty.await(); } //dequeue中就是直接将head.next指向了next.next x = dequeue(); c = count.getAndDecrement(); if (c > 1) //如果出队前容量大于1，则通知一个消费者 notEmpty.signal(); } finally { takeLock.unlock(); } if (c == capacity) //如果出队前容量是满的，则通知一个生产者 signalNotFull(); return x; } 可以看出LinkedBlockingQueue的并发粒度相较于ArrayBlockingQueue有所提高，可以让入队出队同时进行，signal的条件和时机也是考虑到了入队出队的并发执行。 3.3 构造方法及特点总结public LinkedBlockingQueue() { this(Integer.MAX_VALUE); } public LinkedBlockingQueue(int capacity) { if (capacity &lt;= 0) throw new IllegalArgumentException(); this.capacity = capacity; last = head = new Node&lt;E>(null); } LinkedBlockingQueue的head始终指向哨兵节点 LinkedBlockingQueue构造时可以设置容量，默认为int的最大值 LinkedBlockingQueue的入队、出队分别用了一把锁，可以同时进行。 思考：为什么ArrayBlockingQueue的入队出队不能分别使用一把锁？ 由于ArrayBlockingQueue的内部结构是使用数组实现的，类似于循环队列的结构，意味着可能出现入队的指针+1==出队的指针的情况，那么一旦先入队，要出队的元素就会丢失，并把刚才入队的元素出队了，造成极严重的后果。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://www.codetool.top/tags/jdk/"},{"name":"源码研究","slug":"源码研究","permalink":"https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"},{"name":"多线程","slug":"多线程","permalink":"https://www.codetool.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}]},{"title":"leetcode378-有序矩阵中第K小的元素","slug":"leetcode378-有序矩阵中第K小的元素","date":"2020-02-13T17:54:39.000Z","updated":"2020-02-20T15:22:56.573Z","comments":true,"path":"article/leetcode378-有序矩阵中第K小的元素/","link":"","permalink":"https://www.codetool.top/article/leetcode378-%E6%9C%89%E5%BA%8F%E7%9F%A9%E9%98%B5%E4%B8%AD%E7%AC%ACK%E5%B0%8F%E7%9A%84%E5%85%83%E7%B4%A0/","excerpt":"","text":"1 原题给定一个 n x n 矩阵，其中每行和每列元素均按升序排序，找到矩阵中第k小的元素。请注意，它是排序后的第k小元素，而不是第k个元素。 示例: matrix = [&nbsp;&nbsp;[ 1, 5, 9],&nbsp;&nbsp;[10, 11, 13],&nbsp;&nbsp;[12, 13, 15]],k = 8, 返回 13。 说明:你可以假设 k 的值永远是有效的, 1 ≤ k ≤ n2 。 2 解法2.1 思想使用最大堆求topk 2.2 代码class Solution { public int kthSmallest(int[][] matrix, int k) { Queue&lt;Integer> queue = new PriorityQueue&lt;>((o1,o2)->o2-o1); int width = matrix.length; for(int i = 0;i&lt;width;i++){ for(int j = 0;j&lt;width;j++){ queue.offer(matrix[i][j]); } } while(queue.size()>k) queue.poll(); return queue.peek(); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"详解Java中的四种引用及其应用","slug":"详解Java中的四种引用及其应用","date":"2020-02-13T17:21:13.000Z","updated":"2020-02-13T17:22:48.951Z","comments":true,"path":"article/详解Java中的四种引用及其应用/","link":"","permalink":"https://www.codetool.top/article/%E8%AF%A6%E8%A7%A3Java%E4%B8%AD%E7%9A%84%E5%9B%9B%E7%A7%8D%E5%BC%95%E7%94%A8%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8/","excerpt":"","text":"本文参考资源： 深入理解Java中的引用（一）——Reference - 简书 深入理解Java中的引用（二）——强软弱虚引用 - 简书 深入理解Java中的引用（三）——DirectByteBuffer与ThreadLoal的垃圾回收 - 简书 软引用、弱引用、虚引用-他们的特点及应用场景 - 简书 1 引用的抽象父类——Reference1.1 Reference的状态在Reference源码开头的一段注释中谈到了： 一个引用的实例处于四种状态之一： Active：新创建的实例为Active状态，当处于这个状态一段时间后状态变为Pending或Inactive，这取决于它创建的时候是否指定了ReferenceQueue。 Pending：当Reference包装的referent = null的时候，JVM会把Reference设置成pending状态。如果Reference创建时指定了ReferenceQueue，那么会被ReferenceHandler线程处理进入到ReferenceQueue队列中，如果没有就进入Inactive状态。 Enqueue: 进入ReferenceQueue中的对象，等待被回收 Inactive: Reference对象从ReferenceQueue取出来并被处理掉。处于Inactive的Reference对象状态不能再改变 1.2 核心成员变量1) referent: 表示被包装的对象 下面代码中new Object()就是被包装的对象。 WeakReference&lt;Object> wo = new WeakReference&lt;Object>(new Object()); 2) queue: 表示被包装的对象被回收时，需要被通知的队列，该队列在Reference构造函数中指定。当referent被回收的时候，Reference对象就处在了Pending状态，Reference会被放入到该队列中，如果构造函数没有指定队列，那么就进入Inactive状态。 3) pending: 表示等待被加入到queue的Reference 列表。 private static Reference&lt;Object> pending = null; pending理解链表有点费解，因为代码层面上看这明明就是Reference对象。其实当Reference处在Pending状态时，他的pending字段被赋值成了下一个要处理的对象（即下面讲的discovered），通过discovered可以拿到下一个对象并且赋值给pending，直到最后一个，所以这里就可以把它当成一个链表。而discovered是JVM的垃圾回收器添加进去的，大家可以不用关心底层细节。 4) discovered: 当处于Reference处在pending状态：discovered为pending集合中的下一个元素；其他状态：discovered为null transient private Reference&lt;T> discovered; /* used by VM */ 5) next: 当Reference对象在queue中时（即Reference处于Enqueued状态），next描述当前引用节点所存储的下一个即将被处理的节点。 @SuppressWarnings(\"rawtypes\") Reference next; ReferenceHandler线程会把pending状态的Reference放入ReferenceQueue中，上面说的next，discovered 字段在入队之后也会发生变化，下一小节会介绍。 1.3 ReferenceQueue入队过程我们希望当一个对象被gc掉的时候通知用户线程，进行额外的处理时，就需要使用引用队列了 boolean enqueue(Reference&lt;? extends T> r) { /* Called only by Reference class */ synchronized (lock) { // Check that since getting the lock this reference hasn't already been // enqueued (and even then removed) ReferenceQueue&lt;?> queue = r.queue; if ((queue == NULL) || (queue == ENQUEUED)) { return false; } assert queue == this; //设置queue状态 r.queue = ENQUEUED; //改变next指针 r.next = (head == null) ? r : head; head = r; queueLength++; if (r instanceof FinalReference) { sun.misc.VM.addFinalRefCount(1); } lock.notifyAll(); return true; } } 可以看到入队的Reference节点r进入队列，Reference节点被放在队列头，所以这是一个先进后出队列。 入队的示意图如下： 2 ReferenceHandler线程Reference类中另一个比较重要的成员是ReferenceHandler。ReferenceHandler是一个线程。当JVM加载Reference的时候，就会启动这个线程。用jstack查看该线程栈可以看到。Reference Handler是JVM中的2号线程，并且线性优先级被设置为高优先级。 看源代码他是如何工作的： private static class ReferenceHandler extends Thread { ReferenceHandler(ThreadGroup g, String name) { super(g, name); } public void run() { for (;;) { Reference&lt;Object> r; synchronized (lock) { if (pending != null) { r = pending; pending = r.discovered; r.discovered = null; } else { try { try { lock.wait(); } catch (OutOfMemoryError x) { } } catch (InterruptedException x) { } continue; } } // Fast path for cleaners if (r instanceof Cleaner) { ((Cleaner)r).clean(); continue; } ReferenceQueue&lt;Object> q = r.queue; if (q != ReferenceQueue.NULL) q.enqueue(r); } } } 通过上面代码可以看到ReferenceHandler线程做的是不断的检查pending是否为null, 如果不为null,将pending对象进行入队操作，而pending的赋值由JVM操作。所以ReferenceQueue在这里作为JVM与上层Reference对象管理之间的消息传递方式。 3 Java中的四种引用3.1 强引用强引用是我们在代码中最普通的引用，只要维持了引用就不会被回收。 Object o = new Object(); // 强引用 3.2 软引用SoftReference&lt;String> sr = new SoftReference&lt;String>(new String(\"hello\")); 如果一个对象有一个软引用，那么在内存足够的情况下，该对象就不会被垃圾回收器回收。网上有很多资料说软引用只会在内存空间不够用的情况下对象才会被回收。 那么什么时候才是内存不够用呢？ 首先看一下SoftReference类的源码可以看到有两个字段。这两个字段的作用已经标注，这与JVM GC有什么关系呢？ /** * 记录最近一次被GC的时间。 */ static private long clock; /** * 每次调用get方法的时候更新 * 记录当前Reference最近一次被访问的时间 */ private long timestamp; 一起看一下HotSpot的源码，对于软引用的回收策略见下面should_clear_reference函数。 // The oop passed in is the SoftReference object, and not // the object the SoftReference points to. bool LRUMaxHeapPolicy::should_clear_reference(oop p, jlong timestamp_clock) { jlong interval = timestamp_clock - java_lang_ref_SoftReference::timestamp(p); assert(interval >= 0, \"Sanity check\"); // The interval will be zero if the ref was accessed since the last scavenge/gc. if(interval &lt;= _max_interval) { return false; } return true; } 上述代码中interval表示当前引用存活了多久。他的值就是对应上述java代码中的clock与timestamp相减。interval与_max_interval比较，如果大于 _max_interval，那么就和弱引用一样处理，如果小于就当做强引用处理。_max_interval的赋值函数如下： // Capture state (of-the-VM) information needed to evaluate the policy void LRUMaxHeapPolicy::setup() { size_t max_heap = MaxHeapSize; max_heap -= Universe::get_heap_used_at_last_gc(); max_heap /= M; _max_interval = max_heap * SoftRefLRUPolicyMSPerMB; assert(_max_interval >= 0,\"Sanity check\"); } 通过源码可见首先是max_heap减去上次GC之后剩余堆大小，如果上次GC之后还有很多剩余空间，说明内存空间不够用了，那么max_heap的值就越小，相应_max_interval也越小，软引用就越可能被回收。 软引用的一个作用是实现内存敏感的高速缓存。比如浏览器的后退按钮： 如果网页浏览结束就进行内容的回收，则按后退查看前面浏览过的页面时，需要重新构建。 如果将浏览过的网页存储到内存中会造成内存的大量浪费，甚至会造成内存溢出。通过软引用可以解决该问题 3.3 弱引用WeakReference&lt;String> wr = new WeakReference(new String(\"123\")); 只具有弱引用的对象生命周期更短。当垃圾回收器发现了只有弱引用的对象时候，无论内存空间是否足够，都会被GC回收。当你偶尔需要引用某个对象，随时能获取该对象，但是不想介入该对象的生命周期的时候，就可以使用弱引用， 因为弱引用不会对对象的垃圾回收判断产生附加的影响。 在将引用添加到引用队列时，如果先扫描到对象的弱引用，消极地将弱引用直接加入引用队列，在扫描完所有引用后，若该对象还存活，则将该引用从引用队列中移除。 ThreadLocal中就是使用了弱引用来避免内存内存泄漏，参考：ThreadLocal源码分析和相关理解 3.4 虚引用虚引用不会对对象的垃圾回收有任何附加影响，他与软引用和弱引用的一个区别在于：虚引用必须和引用队列 （ReferenceQueue）联合使用。查看他的构造方法可以看到必须与一个ReferenceQueue绑定： public PhantomReference(T referent, ReferenceQueue&lt;? super T> q) { super(referent, q); } jdk中直接内存的回收就用到虚引用，由于jvm自动内存管理的范围是堆内存，而直接内存是在堆内存之外（其实是内存映射文件，自行去理解虚拟内存空间的相关概念），所以直接内存的分配和回收都是有Unsafe类去操作，java在申请一块直接内存之后，会在堆内存分配一个对象保存这个堆外内存的引用，这个对象被垃圾收集器管理，一旦这个对象被回收，相应的用户线程会收到通知并对直接内存进行清理工作。 比如nio中的DirectByteBuffer，我们在使用ByteBuffer.allocate(int capacity)的时候分配的是堆上的空间，而ByteBuffer.allocateDirect(int capacity)分配的是堆外内存（unsafe.allocateMemory），获得一块DirectByteBuffer之后会创建一个Cleaner实例，而Cleaner就是PhantomReference的子类，Cleaner就起到了跟踪DirectByteBuffer的垃圾回收过程的作用。一旦Cleaner被放入了ReferenceQueue，就会调用内部的clean()方法来回收对应的堆外内存。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://www.codetool.top/tags/jdk/"},{"name":"源码研究","slug":"源码研究","permalink":"https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"},{"name":"基础知识","slug":"基础知识","permalink":"https://www.codetool.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}]},{"title":"ThreadLocal源码分析和相关理解","slug":"ThreadLocal源码分析和相关理解","date":"2020-02-13T12:22:15.000Z","updated":"2020-02-21T14:38:26.737Z","comments":true,"path":"article/ThreadLocal源码分析和相关理解/","link":"","permalink":"https://www.codetool.top/article/ThreadLocal%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E5%92%8C%E7%9B%B8%E5%85%B3%E7%90%86%E8%A7%A3/","excerpt":"","text":"1 总结总结放前面防止太长不看： 每个线程都有一个threadLocals字段，是一个ThreadLocalMap的实例，所有的ThreadLocal代表的线程私有数据都存放在这里面。 ThreadLocalMap对象的创建是懒惰的，第一次在该线程上用到ThreadLocal时才会创建，初始容量是16，threshold默认为2/3的数组大小，如果元素个数超过threshold，清理一次无用的Entry（key被回收掉的Entry），如果清理一次之后元素个数仍大于3/4*threshold，进行扩容（翻倍） ThreadLocalMap通过线性探测法解决冲突。 ThreadLocalMap通过弱引用指向一个ThreadLocal对象（key），强引用指向该线程对应的值（value） Entry-&gt;key是弱引用，代表key一旦只剩下Entry的引用，下一次GC的时候就会被回收，但该Entry和内部的value仍会占用空间，所以可以造成内存泄漏，但是ThreadLocalMap中的许多方法都在操作前后检查了数组内部是否有无用的Entry，如果有就清除掉，所以并不容易造成内存泄漏。 2 ThreadLocal概述为共享变量在每个线程中创建一个副本，每个线程可以访问自己内部的副本变量 private static Integer num = 0; private static ThreadLocal&lt;Integer> numLocal = new ThreadLocal&lt;Integer>(){ @Override protected Integer initialValue() { return 0; } }; public static void main(String[] args) { Thread[] threads = new Thread[5]; for (int i = 0;i&lt;threads.length;i++){ threads[i] = new Thread(()->{ int x = numLocal.get().intValue(); x+=5; numLocal.set(x); System.out.println(Thread.currentThread().getName()+\":\"+numLocal.get()); },\"Thread-\"+i); } for (int i = 0;i&lt;threads.length;i++){ threads[i].start(); } } 3 重要方法3.1 setpublic void set(T value) { Thread t = Thread.currentThread(); //通过当前线程获取一个ThreadLocalMap对象 ThreadLocalMap map = getMap(t); //如果该对象不为空调用set方法，可以猜测类似map接口的set if (map != null) map.set(this, value); //如果该对象是空则调用createMap方法，可以猜测能创建一个ThreadLocalMap对象 else createMap(t, value); } 3.1.1 ThreadLocalMap先来看这个叫做ThreadLocalMap的内部类： static class ThreadLocalMap { /** * Entry采用弱引用指向一个ThreadLocal对象，这个ThreadLocal始终 * 是这个ThreadLocalMap的键（key） */ static class Entry extends WeakReference&lt;ThreadLocal&lt;?>> { /** 这个值代表ThreadLocal关联的值. */ Object value; Entry(ThreadLocal&lt;?> k, Object v) { super(k); value = v; } } //初始容量，容量必须是2的整数次幂 private static final int INITIAL_CAPACITY = 16; //存放数据的Entry数组，类似于HashMap的Node数组 private Entry[] table; //Entry的个数 private int size = 0; //类似于HashMap的threshold，size大于这个值则扩容 private int threshold; // Default to 0 //... } 从这里可以看出，ThreadLocalMap和HashMap很大的区别是，Entry没有next属性，至少说明不会以链表形式存储。 我们通过getMap()方法发现，一个Thread对象的内部有一个threadLocals字段，是一个ThreadLocalMap的对象，并且线程创建并不会给这个字段初始化。 那么我们假设第一次在一个线程上调用set方法，此时map==null，调用createMap()创建一个ThreadLocalMap对象： void createMap(Thread t, T firstValue) { t.threadLocals = new ThreadLocalMap(this, firstValue); } 可以看到这个方法还顺便把这次要添加的数据添加了进去。 我们返回来看ThreadLocalMap的set方法，看看是否和HashMap类似： 3.1.1.1 ThreadLocalMap.setprivate void set(ThreadLocal&lt;?> key, Object value) { Entry[] tab = table; int len = tab.length; // 非常类似HashMap的数组下标计算方法，下文我们将一个数组位置称为slot int i = key.threadLocalHashCode &amp; (len-1); // 可以发现，这段代码是用线性探测法解决slot冲突 for (Entry e = tab[i]; e != null; e = tab[i = nextIndex(i, len)]) { ThreadLocal&lt;?> k = e.get(); if (k == key) { e.value = value; return; } // k什么时候为null？因为k是被弱引用的，如果k为null说明中途被回收了，则清理该slot，并把数据放进去 if (k == null) { replaceStaleEntry(key, value, i); return; } } tab[i] = new Entry(key, value); int sz = ++size; //先检查i后面的slot是否有被回收的引用，如果有则清理，否则size大于threshold则扩容 if (!cleanSomeSlots(i, sz) &amp;&amp; sz >= threshold) rehash(); } 3.1.1.2 ThreadLocalMap.cleanSomeSlotsprivate boolean cleanSomeSlots(int i, int n) { boolean removed = false; Entry[] tab = table; int len = tab.length; do { i = nextIndex(i, len); Entry e = tab[i]; //检查是否有被回收的引用 if (e != null &amp;&amp; e.get() == null) { n = len; removed = true; // 清理该slot i = expungeStaleEntry(i); } } while ( (n >>>= 1) != 0); return removed; } 3.1.1.3 ThreadLocalMap.expungeStaleEntryprivate int expungeStaleEntry(int staleSlot) { Entry[] tab = table; int len = tab.length; // 先清理 tab[staleSlot].value = null; tab[staleSlot] = null; size--; // Rehash until we encounter null Entry e; int i; for (i = nextIndex(staleSlot, len); (e = tab[i]) != null; i = nextIndex(i, len)) { ThreadLocal&lt;?> k = e.get(); if (k == null) { e.value = null; tab[i] = null; size--; } else { // 对于还没有被回收的情况，需要做一次 rehash。 //如果对应的 ThreadLocal 的 ID 对 len 取模出来的索引 h 不为当前位置 i， //则从 h 向后线性探测到第一个空的 slot，把当前的 entry 给挪过去。 int h = k.threadLocalHashCode &amp; (len - 1); if (h != i) { tab[i] = null; // Unlike Knuth 6.4 Algorithm R, we must scan until // null because multiple entries could have been stale. while (tab[h] != null) h = nextIndex(h, len); tab[h] = e; } } } return i; } 3.1.1.4 ThreadLocalMap.rehashprivate void rehash() { expungeStaleEntries(); // 如果清理完所有的slot，size仍然大于3/4的threshold，立即扩容防止滞后现象 if (size >= threshold - threshold / 4) resize(); } 3.1.2 threadLocalHashCode再来看看这个threadLocalHashCode是怎么计算的： private final int threadLocalHashCode = nextHashCode(); private static AtomicInteger nextHashCode = new AtomicInteger(); private static final int HASH_INCREMENT = 0x61c88647; private static int nextHashCode() { return nextHashCode.getAndAdd(HASH_INCREMENT); } 每个 ThreadLocal 对象都有一个 hash 值 threadLocalHashCode，每初始化一个 ThreadLocal对象，hash 值就增加一个固定的大小 0x61c88647。 3.2 getpublic T get() { Thread t = Thread.currentThread(); ThreadLocalMap map = getMap(t); if (map != null) { //getEntry来查找是否有这个元素 ThreadLocalMap.Entry e = map.getEntry(this); //如果map中存在该值，返回 if (e != null) { @SuppressWarnings(\"unchecked\") T result = (T)e.value; return result; } } //否则setInitialValue，并将结果返回 return setInitialValue(); } 3.2.1 getEntryprivate Entry getEntry(ThreadLocal&lt;?> key) { int i = key.threadLocalHashCode &amp; (table.length - 1); Entry e = table[i]; if (e != null &amp;&amp; e.get() == key) return e; else //由于采用线性探测法，如果没有找到需要继续向后查找 return getEntryAfterMiss(key, i, e); } 3.2.2 setInitialValueprivate T setInitialValue() { //从initialValue方法获取初始值 T value = initialValue(); Thread t = Thread.currentThread(); ThreadLocalMap map = getMap(t); //set到map中 if (map != null) map.set(this, value); else createMap(t, value); return value; } 而initialValue默认返回null，我们可以在创建ThreadLocal对象时重写initialValue方法来指定第一次调用get获取的值。 3.3 removepublic void remove() { ThreadLocalMap m = getMap(Thread.currentThread()); if (m != null) //直接调用ThreadLocalMap的remove方法移除 m.remove(this); } 3.3.1 ThreadLocalMap.removeprivate void remove(ThreadLocal&lt;?> key) { Entry[] tab = table; int len = tab.length; int i = key.threadLocalHashCode &amp; (len-1); for (Entry e = tab[i]; e != null; e = tab[i = nextIndex(i, len)]) { if (e.get() == key) { //在Entry上调用clear e.clear(); //清理后面的slot expungeStaleEntry(i); return; } } } 4 问题4.1 为什么 ThreadLocalMap 的 Key 是弱引用如果是强引用，ThreadLocal 将无法被释放内存。 因为如果这里使用普通的 key-value 形式来定义存储结构，实质上就会造成节点的生命周期与线程强绑定，只要线程没有销毁，那么节点在 GC 分析中一直处于可达状态，没办法被回收，而程序本身也无法判断是否可以清理节点。弱引用是 Java 中四档引用的第三档，比软引用更加弱一些，如果一个对象没有强引用链可达，那么一般活不过下一次 GC。当某个ThreadLocal 已经没有强引用可达，则随着它被垃圾回收，在 ThreadLocalMap 里对应的 Entry的键值会失效，这为 ThreadLocalMap 本身的垃圾清理提供了便利。 4.2 听说 ThreadLocalMap 还是会造成内存泄漏？网上有博客说ThreadLocal被回收了之后但map中对应的value还是回收不了，造成内存泄漏，确实value不会在ThreadLocal被回收的时候立刻被清除，但是我们在源码中看到各种方法都有在操作前后检查map中是否存在key为null的Entry，如果有的话就清空该Entry，所以大多数情况下这个Entry还是能很快被清除的。除非ThreadLocal被回收了之后该线程的ThreadLocalMap一直不进行任何操作，那么该value不会被回收。 不过作为一个好习惯还是推荐用完了ThreadLocal调用它的remove方法，能够直接移除该Entry。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://www.codetool.top/tags/jdk/"},{"name":"源码研究","slug":"源码研究","permalink":"https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"},{"name":"多线程","slug":"多线程","permalink":"https://www.codetool.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}]},{"title":"ConcurrentHashMap源码分析","slug":"ConcurrentHashMap源码分析","date":"2020-02-13T12:21:28.000Z","updated":"2020-02-20T14:55:21.051Z","comments":true,"path":"article/ConcurrentHashMap源码分析/","link":"","permalink":"https://www.codetool.top/article/ConcurrentHashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","excerpt":"","text":"1 线程安全集合类概述线程安全集合类可以分为三大类： 遗留的线程安全集合如 HashTable ， Vector 使用Collections装饰的线程安全集合，如：（只是内部使用了互斥量mutex进行锁操作） Collections.synchronizedCollection Collections.synchronizedList Collections.synchronizedMap Collections.synchronizedSet Collections.synchronizedNavigableMap Collections.synchronizedNavigableSet Collections.synchronizedSortedMap Collections.synchronizedSortedSet java.util.concurrent.* JUC下的容器则通常包含三大关键词：Blocking、CopyOnWrite、Concurrent Blocking 大部分实现基于锁，并提供用来阻塞的方法 CopyOnWrite 之类容器修改开销相对较重 Concurrent 类型的容器 内部很多操作使用 cas 优化，一般可以提供较高吞吐量 弱一致性 遍历时弱一致性，例如，当利用迭代器遍历时，如果容器发生修改，迭代器仍然可以继续进行遍历，这时内容是旧的 求大小弱一致性，size 操作未必是 100% 准确 读取弱一致性 对于非线程安全容器，遍历时如果发生了修改，使用 fail-fast 机制也能让遍历立刻失败，抛出ConcurrentModificationException，不再继续遍历 2 JDK 7 HashMap 并发死链JDK7中，解决哈希冲突的时候，往链表中插入节点，总是位于链表的头部，而JDK8相反，总是插入链表的尾部。 在JDK7中，HashMap在并发环境下扩容的时候，可能会出现并发死链，产生非常严重的后果。 由于JDK7中扩容是通过迭代器遍历元素插入到新表中，原来在链表中处于头部的元素在新表中处于尾部，之后 // 将 table 迁移至 newTable void transfer(Entry[] newTable, boolean rehash) { int newCapacity = newTable.length; for (Entry&lt;K,V> e : table) { while(null != e) { Entry&lt;K,V> next = e.next; // 1 处 if (rehash) { e.hash = null == e.key ? 0 : hash(e.key); } int i = indexFor(e.hash, newCapacity); // 2 处 // 将新元素加入 newTable[i], 原 newTable[i] 作为新元素的 next e.next = newTable[i]; newTable[i] = e; e = next; } } } 原始链表，格式：[下标] (key,next) [1] (1,35)-&gt;(35,16)-&gt;(16,null) 线程 a 执行到 1 处 ，此时局部变量 e 为 (1,35)，而局部变量 next 为 (35,16) 线程 a 挂起 线程 b 开始执行 第一次循环 [1] (1,null) 第二次循环 [1] (35,1)-&gt;(1,null) 第三次循环 [1] (35,1)-&gt;(1,null) [17] (16,null) 切换回线程 a，此时局部变量 e 和 next 被恢复，引用没变但内容变了：e 的内容被改为 (1,null)，而 next 的内 容被改为 (35,1) 并链向 (1,null) 第一次循环 [1] (1,null) 第二次循环，注意这时 e 是 (35,1) 并链向 (1,null) 所以 next 又是 (1,null) [1] (35,1)-&gt;(1,null) 第三次循环，e 是 (1,null)，而 next 是 null，但 e 被放入链表头，这样 e.next 变成了 35 （2 处） [1] (1,35)-&gt;(35,1)-&gt;(1,35) 已经是死链了 究其原因，是因为在多线程环境下使用了非线程安全的 map 集合 JDK 8 虽然将扩容算法做了调整，不再将元素加入链表头（而是保持与扩容前一样的顺序），但仍不意味着能够在多线程环境下能够安全扩容，还会出现其它问题（如扩容丢数据） 3 ConcurrentHashMap JDK1.8原理3.1 重要属性和内部类// 默认为 0 // 当初始化时, 为 -1 // 当扩容时, 为 -(1 + 扩容线程数) // 当初始化或扩容完成后，为 下一次的扩容的阈值大小 private transient volatile int sizeCtl; // 整个 ConcurrentHashMap 就是一个 Node[] static class Node&lt;K,V> implements Map.Entry&lt;K,V> {} // hash 表 transient volatile Node&lt;K,V>[] table; // 扩容时的 新 hash 表 private transient volatile Node&lt;K,V>[] nextTable; // 扩容时如果某个 bin 迁移完毕, 用 ForwardingNode 作为旧 table bin 的头结点 static final class ForwardingNode&lt;K,V> extends Node&lt;K,V> {} // 用在 compute 以及 computeIfAbsent 时, 用来占位, 计算完成后替换为普通 Node static final class ReservationNode&lt;K,V> extends Node&lt;K,V> {} // 作为 treebin 的头节点, 存储 root 和 first static final class TreeBin&lt;K,V> extends Node&lt;K,V> {} // 作为 treebin 的节点, 存储 parent, left, right static final class TreeNode&lt;K,V> extends Node&lt;K,V> {} 3.2 重要方法// 获取 Node[] 中第 i 个 Node static final &lt;K,V> Node&lt;K,V> tabAt(Node&lt;K,V>[] tab, int i) // cas 修改 Node[] 中第 i 个 Node 的值, c 为旧值, v 为新值 static final &lt;K,V> boolean casTabAt(Node&lt;K,V>[] tab, int i, Node&lt;K,V> c, Node&lt;K,V> v) // 直接修改 Node[] 中第 i 个 Node 的值, v 为新值 static final &lt;K,V> void setTabAt(Node&lt;K,V>[] tab, int i, Node&lt;K,V> v) 3.3 构造器分析可以看到实现了懒惰初始化，在构造方法中仅仅计算了 table 的大小，以后在第一次使用时才会真正创建 public ConcurrentHashMap(int initialCapacity, float loadFactor, int concurrencyLevel) { if (!(loadFactor > 0.0f) || initialCapacity &lt; 0 || concurrencyLevel &lt;= 0) throw new IllegalArgumentException(); if (initialCapacity &lt; concurrencyLevel) // Use at least as many bins initialCapacity = concurrencyLevel; // as estimated threads long size = (long)(1.0 + (long)initialCapacity / loadFactor); // tableSizeFor 仍然是保证计算的大小是 2^n, 即 16,32,64 ... int cap = (size >= (long)MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : tableSizeFor((int)size); this.sizeCtl = cap; } 3.4 get 流程public V get(Object key) { Node&lt;K,V>[] tab; Node&lt;K,V> e, p; int n, eh; K ek; // spread 方法能确保返回结果是正数 int h = spread(key.hashCode()); if ((tab = table) != null &amp;&amp; (n = tab.length) > 0 &amp;&amp; (e = tabAt(tab, (n - 1) &amp; h)) != null) { // 如果头结点已经是要查找的 key if ((eh = e.hash) == h) { if ((ek = e.key) == key || (ek != null &amp;&amp; key.equals(ek))) return e.val; } // hash 为负数表示该 bin 在扩容中或是 treebin, 这时调用 find 方法来查找 else if (eh &lt; 0) return (p = e.find(h, key)) != null ? p.val : null; // 正常遍历链表, 用 equals 比较 while ((e = e.next) != null) { if (e.hash == h &amp;&amp; ((ek = e.key) == key || (ek != null &amp;&amp; key.equals(ek)))) return e.val; } } return null; } 3.5 put 流程以下数组简称（table），链表简称（bin） public V put(K key, V value) { return putVal(key, value, false); } final V putVal(K key, V value, boolean onlyIfAbsent) { if (key == null || value == null) throw new NullPointerException(); // 其中 spread 方法会综合高位低位, 具有更好的 hash 性 int hash = spread(key.hashCode()); int binCount = 0; for (Node&lt;K,V>[] tab = table;;) { // f 是链表头节点 // fh 是链表头结点的 hash // i 是链表在 table 中的下标 Node&lt;K,V> f; int n, i, fh; // 要创建 table if (tab == null || (n = tab.length) == 0) // 初始化 table 使用了 cas, 无需 synchronized 创建成功, 进入下一轮循环 tab = initTable(); // 要创建链表头节点 else if ((f = tabAt(tab, i = (n - 1) &amp; hash)) == null) { // 添加链表头使用了 cas, 无需 synchronized if (casTabAt(tab, i, null, new Node&lt;K,V>(hash, key, value, null))) break; } // 帮忙扩容 else if ((fh = f.hash) == MOVED) // 帮忙之后, 进入下一轮循环 tab = helpTransfer(tab, f); else { V oldVal = null; // 锁住链表头节点 synchronized (f) { // 再次确认链表头节点没有被移动 if (tabAt(tab, i) == f) { // 链表 if (fh >= 0) { binCount = 1; // 遍历链表 for (Node&lt;K,V> e = f;; ++binCount) { K ek; // 找到相同的 key if (e.hash == hash &amp;&amp; ((ek = e.key) == key || (ek != null &amp;&amp; key.equals(ek)))) { oldVal = e.val; // 更新 if (!onlyIfAbsent) e.val = value; break; } Node&lt;K,V> pred = e; // 已经是最后的节点了, 新增 Node, 追加至链表尾 if ((e = e.next) == null) { pred.next = new Node&lt;K,V>(hash, key, value, null); break; } } } // 红黑树 else if (f instanceof TreeBin) { Node&lt;K,V> p; binCount = 2; // putTreeVal 会看 key 是否已经在树中, 是, 则返回对应的 TreeNode if ((p = ((TreeBin&lt;K,V>)f).putTreeVal(hash, key, value)) != null) { oldVal = p.val; if (!onlyIfAbsent) p.val = value; } } } // 释放链表头节点的锁 } if (binCount != 0) { if (binCount >= TREEIFY_THRESHOLD) // 如果链表长度 >= 树化阈值(8), 进行链表转为红黑树 treeifyBin(tab, i); if (oldVal != null) return oldVal; break; } } } // 增加 size 计数 addCount(1L, binCount); return null; } private final Node&lt;K,V>[] initTable() { Node&lt;K,V>[] tab; int sc; while ((tab = table) == null || tab.length == 0) { if ((sc = sizeCtl) &lt; 0) Thread.yield(); // 尝试将 sizeCtl 设置为 -1（表示初始化 table） else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) { // 获得锁, 创建 table, 这时其它线程会在 while() 循环中 yield 直至 table 创建 try { if ((tab = table) == null || tab.length == 0) { int n = (sc > 0) ? sc : DEFAULT_CAPACITY; Node&lt;K,V>[] nt = (Node&lt;K,V>[])new Node&lt;?,?>[n]; table = tab = nt; sc = n - (n >>> 2); } } finally { sizeCtl = sc; } break; } } return tab; } // check 是之前 binCount 的个数 private final void addCount(long x, int check) { CounterCell[] as; long b, s; if ( // 已经有了 counterCells, 向 cell 累加 (as = counterCells) != null || // 还没有, 向 baseCount 累加 !U.compareAndSwapLong(this, BASECOUNT, b = baseCount, s = b + x) ) { CounterCell a; long v; int m; boolean uncontended = true; if ( // 还没有 counterCells as == null || (m = as.length - 1) &lt; 0 || // 还没有 cell (a = as[ThreadLocalRandom.getProbe() &amp; m]) == null || // cell cas 增加计数失败 !(uncontended = U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x)) ) { // 创建累加单元数组和cell, 累加重试 fullAddCount(x, uncontended); return; } if (check &lt;= 1) return; // 获取元素个数 s = sumCount(); } if (check >= 0) { Node&lt;K,V>[] tab, nt; int n, sc; while (s >= (long)(sc = sizeCtl) &amp;&amp; (tab = table) != null &amp;&amp; (n = tab.length) &lt; MAXIMUM_CAPACITY) { int rs = resizeStamp(n); if (sc &lt; 0) { if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 || sc == rs + MAX_RESIZERS || (nt = nextTable) == null || transferIndex &lt;= 0) break; // newtable 已经创建了，帮忙扩容 if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1)) transfer(tab, nt); } // 需要扩容，这时 newtable 未创建 else if (U.compareAndSwapInt(this, SIZECTL, sc, (rs &lt;&lt; RESIZE_STAMP_SHIFT) + 2)) transfer(tab, null); s = sumCount(); } } } 3.6 size 计算流程size 计算实际发生在 put，remove 改变集合元素的操作之中 没有竞争发生，向 baseCount 累加计数 有竞争发生，新建 counterCells，向其中的一个 cell 累加计数 counterCells 初始有两个 cell 如果计数竞争比较激烈，会创建新的 cell 来累加计数 public int size() { long n = sumCount(); return ((n &lt; 0L) ? 0 : (n > (long)Integer.MAX_VALUE) ? Integer.MAX_VALUE : (int)n); } final long sumCount() { CounterCell[] as = counterCells; CounterCell a; // 将 baseCount 计数与所有 cell 计数累加 long sum = baseCount; if (as != null) { for (int i = 0; i &lt; as.length; ++i) { if ((a = as[i]) != null) sum += a.value; } } return sum; } 总结： 初始化，使用 cas 来保证并发安全，懒惰初始化 table 树化，当 table.length &lt; 64 时，先尝试扩容，超过 64 时，并且 bin.length &gt; 8 时，会将链表树化，树化过程会用 synchronized 锁住链表头 put，如果该 bin 尚未创建，只需要使用 cas 创建 bin；如果已经有了，锁住链表头进行后续 put 操作，元素添加至 bin 的尾部 get，无锁操作仅需要保证可见性，扩容过程中 get 操作拿到的是 ForwardingNode 它会让 get 操作在新table 进行搜索 扩容，扩容时以 bin 为单位进行，需要对 bin 进行 synchronized，但这时妙的是其它竞争线程也不是无事可做，它们会帮助把其它 bin 进行扩容，扩容时平均只有 1/6 的节点会把复制到新 table 中 size，元素个数保存在 baseCount 中，并发时的个数变动保存在 CounterCell[] 当中。最后统计数量时累加即可 4 JDK 7 ConcurrentHashMap它维护了一个 segment 数组，每个 segment 对应一把锁 优点：如果多个线程访问不同的 segment，实际是没有冲突的，这与 jdk8 中是类似的 缺点：Segments 数组默认大小为16，这个容量初始化指定后就不能改变了，并且不是懒惰初始化 4.1 构造器分析public ConcurrentHashMap(int initialCapacity, float loadFactor, int concurrencyLevel) { if (!(loadFactor > 0) || initialCapacity &lt; 0 || concurrencyLevel &lt;= 0) throw new IllegalArgumentException(); if (concurrencyLevel > MAX_SEGMENTS) concurrencyLevel = MAX_SEGMENTS; // ssize 必须是 2^n, 即 2, 4, 8, 16 ... 表示了 segments 数组的大小 int sshift = 0; int ssize = 1; while (ssize &lt; concurrencyLevel) { ++sshift; ssize &lt;&lt;= 1; } // segmentShift 默认是 32 - 4 = 28 this.segmentShift = 32 - sshift; // segmentMask 默认是 15 即 0000 0000 0000 1111 this.segmentMask = ssize - 1; if (initialCapacity > MAXIMUM_CAPACITY) initialCapacity = MAXIMUM_CAPACITY; int c = initialCapacity / ssize; if (c * ssize &lt; initialCapacity) ++c; int cap = MIN_SEGMENT_TABLE_CAPACITY; while (cap &lt; c) cap &lt;&lt;= 1; // 创建 segments and segments[0] Segment&lt;K,V> s0 = new Segment&lt;K,V>(loadFactor, (int)(cap * loadFactor), (HashEntry&lt;K,V>[])new HashEntry[cap]); Segment&lt;K,V>[] ss = (Segment&lt;K,V>[])new Segment[ssize]; UNSAFE.putOrderedObject(ss, SBASE, s0); // ordered write of segments[0] this.segments = ss; } 构造完成，如下图所示 可以看到 ConcurrentHashMap 没有实现懒惰初始化，空间占用不友好其中 this.segmentShift 和 this.segmentMask 的作用是决定将 key 的 hash 结果匹配到哪个 segment 例如，根据某一 hash 值求 segment 位置，先将高位向低位移动 this.segmentShift 位 结果再与 this.segmentMask 做位于运算， 终得到 1010 即下标为 10 的 segment 4.2 put 流程public V put(K key, V value) { Segment&lt;K,V> s; if (value == null) throw new NullPointerException(); int hash = hash(key); // 计算出 segment 下标 int j = (hash >>> segmentShift) &amp; segmentMask; // 获得 segment 对象, 判断是否为 null, 是则创建该 segment if ((s = (Segment&lt;K,V>)UNSAFE.getObject (segments, (j &lt;&lt; SSHIFT) + SBASE)) == null) { // 这时不能确定是否真的为 null, 因为其它线程也发现该 segment 为 null, // 因此在 ensureSegment 里用 cas 方式保证该 segment 安全性 s = ensureSegment(j); } // 进入 segment 的put 流程 return s.put(key, hash, value, false); } segment 继承了可重入锁（ReentrantLock），它的 put 方法为 final V put(K key, int hash, V value, boolean onlyIfAbsent) { // 尝试加锁 HashEntry&lt;K,V> node = tryLock() ? null : // 如果不成功, 进入 scanAndLockForPut 流程 // 如果是多核 cpu 最多 tryLock 64 次, 进入 lock 流程 // 在尝试期间, 还可以顺便看该节点在链表中有没有, 如果没有顺便创建出来 scanAndLockForPut(key, hash, value); // 执行到这里 segment 已经被成功加锁, 可以安全执行 V oldValue; try { HashEntry&lt;K,V>[] tab = table; int index = (tab.length - 1) &amp; hash; HashEntry&lt;K,V> first = entryAt(tab, index); for (HashEntry&lt;K,V> e = first;;) { if (e != null) { // 更新 K k; if ((k = e.key) == key || (e.hash == hash &amp;&amp; key.equals(k))) { oldValue = e.value; if (!onlyIfAbsent) { e.value = value; ++modCount; } break; } e = e.next; } else { // 新增 // 1) 之前等待锁时, node 已经被创建, next 指向链表头 if (node != null) node.setNext(first); else // 2) 创建新 node node = new HashEntry&lt;K,V>(hash, key, value, first); int c = count + 1; // 3) 扩容 if (c > threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY) rehash(node); else // 将 node 作为链表头 setEntryAt(tab, index, node); ++modCount; count = c; oldValue = null; break; } } } finally { unlock(); } return oldValue; } 4.3 rehash 流程发生在 put 中，因为此时已经获得了锁，因此 rehash 时不需要考虑线程安全 private void rehash(HashEntry&lt;K,V> node) { HashEntry&lt;K,V>[] oldTable = table; int oldCapacity = oldTable.length; int newCapacity = oldCapacity &lt;&lt; 1; threshold = (int)(newCapacity * loadFactor); HashEntry&lt;K,V>[] newTable = (HashEntry&lt;K,V>[]) new HashEntry[newCapacity]; int sizeMask = newCapacity - 1; for (int i = 0; i &lt; oldCapacity ; i++) { HashEntry&lt;K,V> e = oldTable[i]; if (e != null) { HashEntry&lt;K,V> next = e.next; int idx = e.hash &amp; sizeMask; if (next == null) // Single node on list newTable[idx] = e; else { // Reuse consecutive sequence at same slot HashEntry&lt;K,V> lastRun = e; int lastIdx = idx; // 过一遍链表, 尽可能把 rehash 后 idx 不变的节点重用 for (HashEntry&lt;K,V> last = next; last != null; last = last.next) { int k = last.hash &amp; sizeMask; if (k != lastIdx) { lastIdx = k; lastRun = last; } } newTable[lastIdx] = lastRun; // 剩余节点需要新建 for (HashEntry&lt;K,V> p = e; p != lastRun; p = p.next) { V v = p.value; int h = p.hash; int k = h &amp; sizeMask; HashEntry&lt;K,V> n = newTable[k]; newTable[k] = new HashEntry&lt;K,V>(h, p.key, v, n); } } } } // 扩容完成, 才加入新的节点 int nodeIndex = node.hash &amp; sizeMask; // add the new node node.setNext(newTable[nodeIndex]); newTable[nodeIndex] = node; // 替换为新的 HashEntry table table = newTable; } 4.4 get 流程get 时并未加锁，用了 UNSAFE 方法保证了可见性，扩容过程中，get 先发生就从旧表取内容，get 后发生就从新表取内容 public V get(Object key) { Segment&lt;K,V> s; // manually integrate access methods to reduce overhead HashEntry&lt;K,V>[] tab; int h = hash(key); // u 为 segment 对象在数组中的偏移量 long u = (((h >>> segmentShift) &amp; segmentMask) &lt;&lt; SSHIFT) + SBASE; // s 即为 segment if ((s = (Segment&lt;K,V>)UNSAFE.getObjectVolatile(segments, u)) != null &amp;&amp; (tab = s.table) != null) { for (HashEntry&lt;K,V> e = (HashEntry&lt;K,V>) UNSAFE.getObjectVolatile (tab, ((long)(((tab.length - 1) &amp; h)) &lt;&lt; TSHIFT) + TBASE); e != null; e = e.next) { K k; if ((k = e.key) == key || (e.hash == h &amp;&amp; key.equals(k))) return e.value; } } return null; } 4.5 size 计算流程 计算元素个数前，先不加锁计算两次，如果前后两次结果如一样，认为个数正确返回 如果不一样，进行重试，重试次数超过 3，将所有 segment 锁住，重新计算个数返回 public int size() { // Try a few times to get accurate count. On failure due to // continuous async changes in table, resort to locking. final Segment&lt;K,V>[] segments = this.segments; int size; boolean overflow; // true if size overflows 32 bits long sum; // sum of modCounts long last = 0L; // previous sum int retries = -1; // first iteration isn't retry try { for (;;) { if (retries++ == RETRIES_BEFORE_LOCK) { // 超过重试次数, 需要创建所有 segment 并加锁 for (int j = 0; j &lt; segments.length; ++j) ensureSegment(j).lock(); // force creation } sum = 0L; size = 0; overflow = false; for (int j = 0; j &lt; segments.length; ++j) { Segment&lt;K,V> seg = segmentAt(segments, j); if (seg != null) { sum += seg.modCount; int c = seg.count; if (c &lt; 0 || (size += c) &lt; 0) overflow = true; } } if (sum == last) break; last = sum; } } finally { if (retries > RETRIES_BEFORE_LOCK) { for (int j = 0; j &lt; segments.length; ++j) segmentAt(segments, j).unlock(); } } return overflow ? Integer.MAX_VALUE : size; }","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://www.codetool.top/tags/jdk/"},{"name":"集合","slug":"集合","permalink":"https://www.codetool.top/tags/%E9%9B%86%E5%90%88/"},{"name":"源码研究","slug":"源码研究","permalink":"https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"}]},{"title":"leetcode373-查找和最小的K对数字","slug":"leetcode373-查找和最小的K对数字","date":"2020-02-12T18:39:48.000Z","updated":"2020-02-12T18:45:00.726Z","comments":true,"path":"article/leetcode373-查找和最小的K对数字/","link":"","permalink":"https://www.codetool.top/article/leetcode373-%E6%9F%A5%E6%89%BE%E5%92%8C%E6%9C%80%E5%B0%8F%E7%9A%84K%E5%AF%B9%E6%95%B0%E5%AD%97/","excerpt":"","text":"1 原题给定两个以升序排列的整形数组 nums1 和 nums2, 以及一个整数 k。 定义一对值 (u,v)，其中第一个元素来自 nums1，第二个元素来自 nums2。 找到和最小的 k 对数字 (u1,v1), (u2,v2) … (uk,vk)。 示例1: 输入： nums1 = [1,7,11], nums2 = [2,4,6], k = 3输出： [1,2],[1,4],[1,6]解释： 返回序列中的前 3 对数： [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6] 示例2: 输入： nums1 = [1,1,2], nums2 = [1,2,3], k = 2输出： [1,1],[1,1]解释： 返回序列中的前 2 对数： [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3] 示例3: 输入： nums1 = [1,2], nums2 = [3], k = 3输出： [1,3],[2,3]解释： 也可能序列中所有的数对都被返回:[1,3],[2,3] 2 解法2.1 思想可以把所有的二元组插入堆中，通过自定义的比较器来获取topk。 2.2 代码class Solution { public List&lt;List&lt;Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) { List&lt;List&lt;Integer>> ans = new ArrayList&lt;>(); Queue&lt;List&lt;Integer>> queue = new PriorityQueue&lt;>( new Comparator&lt;List&lt;Integer>>() { public int compare(List&lt;Integer> o1, List&lt;Integer> o2) { int ans = 0; for(Integer i:o1) ans+=i; for(Integer i:o2) ans-=i; return ans; } }); for(int i:nums1){ for(int j:nums2){ List&lt;Integer> list = new ArrayList&lt;>(); list.add(i); list.add(j); queue.add(list); } } for(int i = 0;i&lt;k;i++){ if(queue.isEmpty()) break; ans.add(queue.poll()); } return ans; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"堆","slug":"堆","permalink":"https://www.codetool.top/tags/%E5%A0%86/"}]},{"title":"NIO底层原理-epoll","slug":"NIO底层原理-epoll","date":"2020-02-12T18:38:48.000Z","updated":"2020-02-12T18:39:37.897Z","comments":true,"path":"article/NIO底层原理-epoll/","link":"","permalink":"https://www.codetool.top/article/NIO%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86-epoll/","excerpt":"","text":"BIO模型存在三个socket： ServerSocket：专门用来监听是否有来自客户端的连接accept返回的Socket：专门用于处理客户端请求的socketSocket：客户端的socket BIO由于accpet和read会阻塞，如果不使用多线程，read时候的阻塞会导致无法立即处理下一个客户端的连接。 如果使用多线程，如果某些线程不活跃，可能浪费CPU资源。 NIO可以设置通过configureBlocking设置accept为非阻塞的，对应操作系统五种IO模型介绍中的非阻塞IO模型。 NIO在感知各个连接的读写状态是通过操作系统内核轮询实现的。对应操作系统五种IO模型介绍中的多路复用IO模型。 在linux中，性能会更高一些，linux内核通过内核函数epoll实现被动感知，能有效解决多个连接不活跃的问题。 epoll的原理： epoll原理详解及epoll反应堆模型_青萍之末的博客-CSDN博客 Epoll原理解析_~ LINUX ~-CSDN博客 彻底搞懂epoll高效运行的原理 （就这样水了一篇博客）","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"NIO","slug":"NIO","permalink":"https://www.codetool.top/tags/NIO/"}]},{"title":"操作系统五种IO模型介绍","slug":"操作系统五种IO模型介绍","date":"2020-02-12T15:19:59.000Z","updated":"2020-02-12T16:32:05.118Z","comments":true,"path":"article/操作系统五种IO模型介绍/","link":"","permalink":"https://www.codetool.top/article/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E4%BA%94%E7%A7%8DIO%E6%A8%A1%E5%9E%8B%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"本文转自网络： 五种IO模型详解_IO模型,java_小范的博客-CSDN博客 1 阻塞 IO 模型最传统的一种 IO 模型，即在读写数据过程中会发生阻塞现象。当用户线程发出 IO 请求之后，内核会去查看数据是否就绪，如果没有就绪就会等待数据就绪，而用户线程就会处于阻塞状态，用户线程交出 CPU。当数据就绪之后，内核会将数据拷贝到用户线程，并返回结果给用户线程，用户线程才解除 block 状态。典型的阻塞 IO 模型的例子为：data = socket.read();如果数据没有就绪，就会一直阻塞在 read 方法。 2 非阻塞 IO 模型当用户线程发起一个 read 操作后，并不需要等待，而是马上就得到了一个结果。如果结果是一个error 时，它就知道数据还没有准备好，于是它可以再次发送 read 操作。一旦内核中的数据准备好了，并且又再次收到了用户线程的请求，那么它马上就将数据拷贝到了用户线程，然后返回。所以事实上，在非阻塞 IO 模型中，用户线程需要不断地询问内核数据是否就绪，也就说非阻塞 IO不会交出 CPU，而会一直占用 CPU。典型的非阻塞 IO 模型一般如下： while(true){ data = socket.read(); if(data!= error){ //处理数据 break; } } 但是对于非阻塞 IO 就有一个非常严重的问题，在 while 循环中需要不断地去询问内核数据是否就绪，这样会导致 CPU 占用率非常高，因此一般情况下很少使用 while 循环这种方式来读取数据。 3 多路复用 IO 模型多路复用 IO 模型是目前使用得比较多的模型。Java NIO 实际上就是多路复用 IO。在多路复用IO模型中，会有一个线程(Selector)不断去轮询多个channel 的状态，只有当channel 真正有读写事件时，才真正调用实际的 IO 读写操作。因为在多路复用 IO 模型中，只需要使用一个线程就可以管理多个socket，系统不需要建立新的进程或者线程，也不必维护这些线程和进程，并且只有在真正有socket读写事件进行时，才会使用 IO 资源，所以它大大减少了资源占用。在 Java NIO 中，是通过 selector.select()去查询每个通道是否有到达事件，如果没有事件，则一直阻塞在那里，因此这种方式会导致用户线程的阻塞。多路复用 IO 模式，通过一个线程就可以管理多个 socket，只有当socket 真正有读写事件发生才会占用资源来进行实际的读写操作。因此，多路复用 IO 比较适合连接数比较多的情况。 另外多路复用 IO 为何比非阻塞 IO 模型的效率高是因为在非阻塞 IO 中，不断地询问 socket 状态时通过用户线程去进行的，而在多路复用 IO 中，轮询每个 socket 状态是内核在进行的，这个效率要比用户线程要高的多。 不过要注意的是，多路复用 IO 模型是通过轮询的方式来检测是否有事件到达，并且对到达的事件逐一进行响应。因此对于多路复用 IO 模型来说，一旦事件响应体很大，那么就会导致后续的事件迟迟得不到处理，并且会影响新的事件轮询。 4 信号驱动 IO 模型在信号驱动 IO 模型中，当用户线程发起一个 IO 请求操作，会给对应的 socket 注册一个信号函数，然后用户线程会继续执行，当内核数据就绪时会发送一个信号给用户线程，用户线程接收到信号之后，便在信号函数中调用 IO 读写操作来进行实际的 IO 请求操作。 5 异步 IO 模型异步 IO 模型才是最理想的 IO 模型，在异步 IO 模型中，当用户线程发起 read 操作之后，立刻就可以开始去做其它的事。而另一方面，从内核的角度，当它受到一个 asynchronous read 之后，它会立刻返回，说明 read 请求已经成功发起了，因此不会对用户线程产生任何 block。然后，内核会等待数据准备完成，然后将数据拷贝到用户线程，当这一切都完成之后，内核会给用户线程发送一个信号，告诉它 read 操作完成了。也就说用户线程完全不需要实际的整个 IO 操作是如何进行的，只需要先发起一个请求，当接收内核返回的成功信号时表示 IO 操作已经完成，可以直接去使用数据了。 也就说在异步 IO 模型中，IO 操作的两个阶段都不会阻塞用户线程，这两个阶段都是由内核自动完成，然后发送一个信号告知用户线程操作已完成。用户线程中不需要再次调用 IO 函数进行具体的读写。这点是和信号驱动模型有所不同的，在信号驱动模型中，当用户线程接收到信号表示数据已经就绪，然后需要用户线程调用 IO 函数进行实际的读写操作；而在异步 IO 模型中，收到信号表示 IO 操作已经完成，不需要再在用户线程中调用 IO 函数进行实际的读写操作。","categories":[{"name":"计算机相关","slug":"计算机相关","permalink":"https://www.codetool.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/"}],"tags":[{"name":"基础知识","slug":"基础知识","permalink":"https://www.codetool.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"name":"IO","slug":"IO","permalink":"https://www.codetool.top/tags/IO/"},{"name":"网络编程","slug":"网络编程","permalink":"https://www.codetool.top/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"}]},{"title":"leetcode295-数据流的中位数","slug":"leetcode295-数据流的中位数","date":"2020-02-12T13:24:01.000Z","updated":"2020-02-12T13:32:39.830Z","comments":true,"path":"article/leetcode295-数据流的中位数/","link":"","permalink":"https://www.codetool.top/article/leetcode295-%E6%95%B0%E6%8D%AE%E6%B5%81%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/","excerpt":"","text":"1 原题中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。 例如， [2,3,4] 的中位数是 3 [2,3] 的中位数是 (2 + 3) / 2 = 2.5 设计一个支持以下两种操作的数据结构： void addNum(int num) - 从数据流中添加一个整数到数据结构中。 double findMedian() - 返回目前所有元素的中位数。 示例： addNum(1)addNum(2)findMedian() -&gt; 1.5addNum(3)findMedian() -&gt; 2 进阶: 如果数据流中所有整数都在 0 到 100 范围内，你将如何优化你的算法？ 如果数据流中 99% 的整数都在 0 到 100 范围内，你将如何优化你的算法？ 2 解法2.1 思想求中位树可以维护两个堆，一个大顶堆用于存放数据较小的半部分，一个小顶堆用于存放数据较大的半部分。 2.2 代码public class MedianFinder { private int count; private PriorityQueue&lt;Integer> maxheap; private PriorityQueue&lt;Integer> minheap; /** * initialize your data structure here. */ public MedianFinder() { count = 0; maxheap = new PriorityQueue&lt;>((x, y) -> y - x); minheap = new PriorityQueue&lt;>(); } public void addNum(int num) { count += 1; maxheap.offer(num); minheap.add(maxheap.poll()); if (count%2 != 0) { maxheap.add(minheap.poll()); } } public double findMedian() { if (count%2 != 0) return (double) maxheap.peek(); else return (double) (maxheap.peek() + minheap.peek()) / 2; } } /** * Your MedianFinder object will be instantiated and called as such: * MedianFinder obj = new MedianFinder(); * obj.addNum(num); * double param_2 = obj.findMedian(); */","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"堆","slug":"堆","permalink":"https://www.codetool.top/tags/%E5%A0%86/"}]},{"title":"HashMap源码分析","slug":"HashMap源码分析","date":"2020-02-11T19:13:50.000Z","updated":"2020-02-20T14:55:21.051Z","comments":true,"path":"article/HashMap源码分析/","link":"","permalink":"https://www.codetool.top/article/HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","excerpt":"","text":"HashMap是java中非常常见的一个数据结构，在这篇文章里，我依然以Map中的操作为导向来循序渐进研究HashMap中的源码，阅读这篇文章需要的前置知识有： 弱平衡的二叉查找树-红黑树 大概了解HashMap的使用方法以及内部结构 该文基于JDK1.8 1 总结总结放前面防止太长不看 HashMap通过数组+链表+红黑树实现，遍历规则是在数组上按槽的顺序，在槽内按节点next的顺序。 桶的下标和哈希值的对应关系为：index = (n - 1) &amp; hash，n为数组的大小，出于平衡性考虑n必须是2的整数次幂 如果一个桶中元素的数量大于8的时候，链表转红黑树（但是实际如果此时数组大小小于64，则扩容重建Hash表而不是树化） 一些指标含义： 名称 含义 threshold 键值对的数量一旦超过这个值就需要进行数组扩容并重建哈希表 loadFactor threshold通常是通过数组的大小*loadFactor进行计算 一些指标的值： 名称 解释 DEFAULT_INITIAL_CAPACITY 初始化数组的大小，默认为16 MAXIMUM_CAPACITY 数组最大大小，是最接近int上限的2的整数次幂1 &lt;&lt; 30 DEFAULT_LOAD_FACTOR 负载因子，默认为0.75f，原因见最后 TREEIFY_THRESHOLD 一旦桶中的元素达到这个值，数组升红黑树，8 UNTREEIFY_THRESHOLD 一旦桶中的元素小于这个值，下次resize的时候会重新降为链表，6 MIN_TREEIFY_CAPACITY 只要数组容量小于这个值，不会进行链表升红黑树，通过resize扩容来解决问题，64 发生resize()的所有情况： 构造完HashMap之后第一次添加元素，此时调用resize()为数组分配初始空间 添加完元素之后键值对的数量大于threshold，发生resize()进行扩容 当想要链表升红黑树元素的时候，数组容量小于64，则通过resize()取代树化。 EntrySet和KeySet都不会建立新的集合，只是在map的基础上做一些操作，不同的是entry获取的是整个Node，而key只有key。 2 重要方法我们知道HashMap是Map的重要实现，Map接口的重要方法有： put(),get(),getOrDefault(),putIfAbsent(),containsKey() replace() remove() entrySet() keySet() 下面就让我们开始跟踪这些方法的源码： 2.1 putpublic V put(K key, V value) { return putVal(hash(key), key, value, false, true); } put和get方法是Map最常用的方法了，熟悉哈希表结构的都知道，HashMap的底层就是把哈希值和对象关联起来，但是因为哈希值并不唯一，可能会出现哈希冲突，也就是一个位置可能需要存放多个对象，如果解决Hash冲突是制约查找效率非常重要的问题。 在这个方法里，我们大概能猜到，hash()是获取哈希值的函数，先来看看哈希值怎么获取的： 2.1.1 hashstatic final int hash(Object key) { int h; return (key == null) ? 0 : (h = key.hashCode()) ^ (h >>> 16); } 实际上就是默认Object的hashcode位或自己的高16位，至于Object的hashcode怎么来的，就涉及到JNI层面的理论了，网上有说是对象地址转换而来的，我也有尝试跟踪OpenJdk中c++的源码，最后实在看不懂放弃了QAQ。不过java doc上面说hashcode不要求唯一，也就是说不同的对象可以计算出同一个哈希值，我们就姑且忽略它的具体计算过程，看一下putVal()方法： 2.1.2 putVal这个方法最后两个布尔类型参数分别代表onlyIfAbsent：如果原来存在键，就不替换值和evict:如果是false，代表这个map正处于创建模式 //onlyIfAbsent大概可以联想到和putIfAbsent有关 final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) { Node&lt;K,V>[] tab; Node&lt;K,V> p; int n, i; //如果table是空的或不存在，这里将table赋给tab，可以猜测table是存储所有哈希桶的数组。 if ((tab = table) == null || (n = tab.length) == 0) //resize，给一个初始容量，n被赋予容量大小 n = (tab = resize()).length; //先获取原来的桶p，如果hash不冲突，直接插入节点 if ((p = tab[i = (n - 1) &amp; hash]) == null) tab[i] = newNode(hash, key, value, null); //hash冲突 else { Node&lt;K,V> e; K k; //虽然哈希冲突，但键是一样的 if (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != null &amp;&amp; key.equals(k)))) e = p; //如果已经是一棵红黑树 else if (p instanceof TreeNode) e = ((TreeNode&lt;K,V>)p).putTreeVal(this, tab, hash, key, value); //是链表 else { for (int binCount = 0; ; ++binCount) { if ((e = p.next) == null) { p.next = newNode(hash, key, value, null); //如果binCount大于TREEIFY_THRESHOLD - 1，则树化，可以猜测转红黑树 if (binCount >= TREEIFY_THRESHOLD - 1) // -1 for 1st treeifyBin(tab, hash); break; } //遇到了相同的键，退出循环 if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) break; p = e; } } if (e != null) { // existing mapping for key V oldValue = e.value; //如果onlyIfAbsent不为true或原来的value为null，替换value if (!onlyIfAbsent || oldValue == null) e.value = value; //没有实现，仅在LinkedHashMap中有用到 afterNodeAccess(e); return oldValue; } } ++modCount; //大于threshold则扩容 if (++size > threshold) resize(); //没有实现，仅在LinkedHashMap中有用到 afterNodeInsertion(evict); return null; } 这是一个比较复杂的方法，通过源码跟踪可以总结出： HashMap内部是用Node[]来存储数据的，一个哈希值为hash的元素在数组中的下标为(n - 1) &amp; hash（n是数组的长度） 如果binCount大于TREEIFY_THRESHOLD - 1(static final int TREEIFY_THRESHOLD = 8)，则树化，可以猜测转红黑树（但是实际如果此时数组大小小于64，则扩容重建Hash表而不是树化） threshold是size的上限，如果size超过threshold，则调用resize()扩容 在这个方法里面，我们看到了Node,TreeNode，可以推测Node是链表的节点，而TreeNode继承自Node，代表红黑树的节点 2.1.3 内部类：Nodestatic class Node&lt;K,V> implements Map.Entry&lt;K,V> { final int hash; final K key; V value; Node&lt;K,V> next; //... } 2.1.4 内部类：TreeNodestatic final class TreeNode&lt;K,V> extends LinkedHashMap.Entry&lt;K,V> { TreeNode&lt;K,V> parent; // red-black tree links TreeNode&lt;K,V> left; TreeNode&lt;K,V> right; TreeNode&lt;K,V> prev; // needed to unlink next upon deletion boolean red;//代表节点颜色 //... } 在这个类中实现了许多红黑树的操作，这里就不看它们的实现了。 2.1.5 putIfAbsent之前我们推测putIfAbsent和putVal中的参数onlyIfAbsent有关，现在我们看看源码，确定一下： public V putIfAbsent(K key, V value) { return putVal(hash(key), key, value, true, true); } 可以看出，推测完全正确，就是把参数onlyIfAbsent设为了true，这样即使把节点取出来了但并不会替换掉它的value。 2.2 get看完了put我们来看get，进一步巩固我们对HashMap结构的认知： public V get(Object key) { Node&lt;K,V> e; //可以猜测getNode能通过hash值和键查找到元素节点，可能是链表节点，也可能是红黑树节点 return (e = getNode(hash(key), key)) == null ? null : e.value; } 2.2.1 getNodefinal Node&lt;K,V> getNode(int hash, Object key) { Node&lt;K,V>[] tab; Node&lt;K,V> first, e; int n; K k; //通过哈希下标计算公式获取数组哈希中对应的节点 if ((tab = table) != null &amp;&amp; (n = tab.length) > 0 &amp;&amp; (first = tab[(n - 1) &amp; hash]) != null) { // 看看首节点是不是要找的节点 if (first.hash == hash &amp;&amp; // always check first node ((k = first.key) == key || (key != null &amp;&amp; key.equals(k)))) return first; if ((e = first.next) != null) { //红黑树的情况 if (first instanceof TreeNode) //红黑树查找结点调用该类中的getTreeNode方法 return ((TreeNode&lt;K,V>)first).getTreeNode(hash, key); //链表的情况 do { if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) return e; } while ((e = e.next) != null); } } return null; } 无论是红黑树的情况（搜索二叉树的查找）还是链表的情况查找的实现都挺简单的，这里就不深挖了。 2.2.2 getOrDefault至于getOrDefault是怎么实现的，由于getNode方法如果没找到节点会返回null，我们可以推测getOrDefault先调用getNode方法，如果返回了null，则把用户给的默认值返回回去。 public V getOrDefault(Object key, V defaultValue) { Node&lt;K,V> e; return (e = getNode(hash(key), key)) == null ? defaultValue : e.value; } 2.2.3 containsKeycontainsKey的判断依据也是调用getNode，如果返回null说明没有查找到对应节点，即不包含这个键。 public boolean containsKey(Object key) { return getNode(hash(key), key) != null; } 2.3 replacereplace其实较为不常用，因为put方法就能更新节点的值，他们的区别主要有： replace还有一个重载方法，仅当旧值符合用户传入的参数时才更新 那么它们实现更新的方法是一样的吗？ public V replace(K key, V value) { Node&lt;K,V> e; if ((e = getNode(hash(key), key)) != null) { V oldValue = e.value; e.value = value; afterNodeAccess(e); return oldValue; } return null; } 可以看出因为replace是已经确定了存在这个元素，直接调用getNode去获取原来的节点，并更新它的值。但是查找的过程本质其实和put一样的。 那么replace还有一个重载方法： public boolean replace(K key, V oldValue, V newValue) { Node&lt;K,V> e; V v; if ((e = getNode(hash(key), key)) != null &amp;&amp; ((v = e.value) == oldValue || (v != null &amp;&amp; v.equals(oldValue)))) { e.value = newValue; afterNodeAccess(e); return true; } return false; } 可以看出，仅当原来节点的值符合用户的输入参数时才更新。 2.4 removeremove方法用于从Map中移除元素，对应的无非也就是链表元素的删除或是红黑树元素的删除，链表元素的删除只需要更新指针，红黑树元素的删除却可能需要重新上色和旋转等一系列繁琐的动作，不难想到，如果红黑树的元素删到一定数量以下时，可能会退化回链表。 看源码： public V remove(Object key) { Node&lt;K,V> e; return (e = removeNode(hash(key), key, null, false, true)) == null ? null : e.value; } 这里涉及到函数removeNode，跟踪进去： //后面两个布尔值分别代表是否要求值匹配，movable如果是false不允许移动其他节点 final Node&lt;K,V> removeNode(int hash, Object key, Object value, boolean matchValue, boolean movable) { Node&lt;K,V>[] tab; Node&lt;K,V> p; int n, index; if ((tab = table) != null &amp;&amp; (n = tab.length) > 0 &amp;&amp; (p = tab[index = (n - 1) &amp; hash]) != null) { Node&lt;K,V> node = null, e; K k; V v; //如果首节点是要移除的节点 if (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != null &amp;&amp; key.equals(k)))) node = p; else if ((e = p.next) != null) { //如果是红黑树 if (p instanceof TreeNode) //使用getTreeNode先获取红黑树节点 node = ((TreeNode&lt;K,V>)p).getTreeNode(hash, key); //如果是链表 else { do { if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) { // 获取链表节点 node = e; break; } p = e; } while ((e = e.next) != null); } } //如果matchValue为true，必须要比对用户给的旧值是否正确 if (node != null &amp;&amp; (!matchValue || (v = node.value) == value || (value != null &amp;&amp; value.equals(v)))) { //如果是红黑树，调用该类的removeTreeNode移除节点 if (node instanceof TreeNode) ((TreeNode&lt;K,V>)node).removeTreeNode(this, tab, movable); //如果是链表，用链表下一个节点替换 else if (node == p) tab[index] = node.next; else p.next = node.next; ++modCount; --size; //没有实现，仅在LinkedHashMap中有用到 afterNodeRemoval(node); return node; } } return null; } 这里我们暂时没看到有红黑树退化为链表的操作，不急，继续看下去。（实际上是在下一次resize的时候退化为链表） 2.5 entrySetpublic Set&lt;Map.Entry&lt;K,V>> entrySet() { Set&lt;Map.Entry&lt;K,V>> es; return (es = entrySet) == null ? (entrySet = new EntrySet()) : es; } 可以看出直接获得内部的entrySet字段。我们先看一下EntrySet的定义： //Entry是一个接口，有getKey()、getValue()等方法 final class EntrySet extends AbstractSet&lt;Map.Entry&lt;K,V>> { public final int size() { return size; } public final void clear() { HashMap.this.clear(); } public final Iterator&lt;Map.Entry&lt;K,V>> iterator() { return new EntryIterator(); } public final boolean contains(Object o) { if (!(o instanceof Map.Entry)) return false; Map.Entry&lt;?,?> e = (Map.Entry&lt;?,?>) o; Object key = e.getKey(); Node&lt;K,V> candidate = getNode(hash(key), key); return candidate != null &amp;&amp; candidate.equals(e); } public final boolean remove(Object o) { if (o instanceof Map.Entry) { Map.Entry&lt;?,?> e = (Map.Entry&lt;?,?>) o; Object key = e.getKey(); Object value = e.getValue(); return removeNode(hash(key), key, value, true, true) != null; } return false; } public final Spliterator&lt;Map.Entry&lt;K,V>> spliterator() { return new EntrySpliterator&lt;>(HashMap.this, 0, -1, 0, 0); } public final void forEach(Consumer&lt;? super Map.Entry&lt;K,V>> action) { Node&lt;K,V>[] tab; if (action == null) throw new NullPointerException(); if (size > 0 &amp;&amp; (tab = table) != null) { int mc = modCount; for (int i = 0; i &lt; tab.length; ++i) { for (Node&lt;K,V> e = tab[i]; e != null; e = e.next) action.accept(e); } if (modCount != mc) throw new ConcurrentModificationException(); } } } 迭代器通过EntryIterator获得： 2.5.1 EntryIteratorfinal class EntryIterator extends HashIterator implements Iterator&lt;Map.Entry&lt;K,V>> { public final Map.Entry&lt;K,V> next() { return nextNode(); } } 它又继承了HashIterator： 2.5.2 HashIteratorabstract class HashIterator { Node&lt;K,V> next; // next entry to return Node&lt;K,V> current; // current entry int expectedModCount; // for fast-fail int index; // 当前slot HashIterator() { expectedModCount = modCount; Node&lt;K,V>[] t = table; current = next = null; //从slot为0处开始遍历 index = 0; if (t != null &amp;&amp; size > 0) { // 找到第一个有节点的slot，并把next赋值为第一个节点 do {} while (index &lt; t.length &amp;&amp; (next = t[index++]) == null); } } public final boolean hasNext() { return next != null; } final Node&lt;K,V> nextNode() { Node&lt;K,V>[] t; Node&lt;K,V> e = next; if (modCount != expectedModCount) throw new ConcurrentModificationException(); if (e == null) throw new NoSuchElementException(); // 在当前槽中寻找下一个节点，如果当前槽已经找完了继续向后寻找有节点的slot if ((next = (current = e).next) == null &amp;&amp; (t = table) != null) { do {} while (index &lt; t.length &amp;&amp; (next = t[index++]) == null); } return e; } public final void remove() { Node&lt;K,V> p = current; if (p == null) throw new IllegalStateException(); if (modCount != expectedModCount) throw new ConcurrentModificationException(); current = null; K key = p.key; removeNode(hash(key), key, null, false, false); expectedModCount = modCount; } } 2.6 keySetpublic Set&lt;K> keySet() { Set&lt;K> ks = keySet; if (ks == null) { ks = new KeySet(); keySet = ks; } return ks; } KeySet的定义： final class KeySet extends AbstractSet&lt;K> { public final int size() { return size; } public final void clear() { HashMap.this.clear(); } //KeyIterator也是继承自HashIterator，但返回的只是节点中的键 public final Iterator&lt;K> iterator() { return new KeyIterator(); } public final boolean contains(Object o) { return containsKey(o); } public final boolean remove(Object key) { return removeNode(hash(key), key, null, false, true) != null; } public final Spliterator&lt;K> spliterator() { return new KeySpliterator&lt;>(HashMap.this, 0, -1, 0, 0); } public final void forEach(Consumer&lt;? super K> action) { Node&lt;K,V>[] tab; if (action == null) throw new NullPointerException(); if (size > 0 &amp;&amp; (tab = table) != null) { int mc = modCount; for (int i = 0; i &lt; tab.length; ++i) { for (Node&lt;K,V> e = tab[i]; e != null; e = e.next) action.accept(e.key); } if (modCount != mc) throw new ConcurrentModificationException(); } } } 通过上面的EntrySet和KeySet我们可以看出，EntrySet和KeySet并没有形成一个真正的集合，他们的一些Set操作只是在原map的基础上操作。比如EntrySet的iterator实际上只是使用了HashIterator，next()返回的是一个Node类型，但由于Node类型实现了Entry接口，所以可以当作一个Entry用。KeySet原理类似，只是使用了HashIterator返回的Node类型提取出了key。这也是为什么《阿里巴巴Java开发手册》中说明： 【推荐】使用 entrySet 遍历 Map 类集合 KV，而不是 keySet 方式进行遍历。说明： keySet 其实是遍历了 2 次，一次是转为 Iterator 对象，另一次是从 hashMap 中取出key 所对应的 value。而 entrySet 只是遍历了一次就把 key 和 value 都放到了 entry 中，效率更高。如果是 JDK8，使用 Map.foreach 方法。正例： values()返回的是 V 值集合，是一个 list 集合对象；keySet()返回的是 K 值集合，是一个 Set 集合对象；entrySet()返回的是 K-V 值组合集合。 3 构造方法与扩容3.1 构造方法默认无参构造方法： public HashMap() { this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted } static final float DEFAULT_LOAD_FACTOR = 0.75f; 看到这里似乎有点奇怪，HashMap内部不是有个Node数组嘛！这里怎么没有初始化？不过回想上面的putVal方法，一开始就判断了tab是不是为null，如果是的话执行resize()，估计这个resize方法可以初始化。 那么这个DEFAULT_LOAD_FACTOR是什么东西呢？直译叫做负载因子，看看后面的方法有没有出现。 public HashMap(int initialCapacity) { this(initialCapacity, DEFAULT_LOAD_FACTOR); } 这个指定了初始容量的构造方法带着默认负载因子指向了另一个构造方法 public HashMap(int initialCapacity, float loadFactor) { if (initialCapacity &lt; 0) throw new IllegalArgumentException(\"Illegal initial capacity: \" + initialCapacity); if (initialCapacity > MAXIMUM_CAPACITY) initialCapacity = MAXIMUM_CAPACITY; if (loadFactor &lt;= 0 || Float.isNaN(loadFactor)) throw new IllegalArgumentException(\"Illegal load factor: \" + loadFactor); this.loadFactor = loadFactor; //tableSizeFor可以返回大于且最接近initialCapacity的2的整数次幂 this.threshold = tableSizeFor(initialCapacity); } //其中 static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30; 为什么最大容量是MAXIMUM_CAPACITY？ HashMap在确定数组下标Index的时候，采用的是(length-1) &amp; hash的方式，只有当length为2的指数幂的时候才能较均匀的分布元素。所以HashMap规定了其容量必须是2的n次方 由于HashMap规定了其容量是2的n次方，对于HashMap来说其最大的容量应该是不超过int最大值的一个2的指数幂，即1 &lt;&lt; 30 3.2 扩容终于要来看这个HashMap中最重要的一个函数了-resize() final Node&lt;K,V>[] resize() { Node&lt;K,V>[] oldTab = table; int oldCap = (oldTab == null) ? 0 : oldTab.length; int oldThr = threshold; int newCap, newThr = 0; //如果原来长度不为0 if (oldCap > 0) { //如果大于最大容量不扩容直接返回 if (oldCap >= MAXIMUM_CAPACITY) { threshold = Integer.MAX_VALUE; return oldTab; } // 新容量为旧容量的两倍 else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap >= DEFAULT_INITIAL_CAPACITY) newThr = oldThr &lt;&lt; 1; // 上限也翻倍 } // 如果原来长度为0且threshold不为0，初始容量赋值为threshold // 这种情况发生在使用有参构造函数后，添加第一个元素的时候。 else if (oldThr > 0) // initial capacity was placed in threshold newCap = oldThr; // 如果原来长度和threshold都为0，用DEFAULT_INITIAL_CAPACITY=16充当初始容量 else { // zero initial threshold signifies using defaults newCap = DEFAULT_INITIAL_CAPACITY; //元素上限为0.75倍的数组容量 newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY); } if (newThr == 0) { float ft = (float)newCap * loadFactor; newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ? (int)ft : Integer.MAX_VALUE); } threshold = newThr; @SuppressWarnings({\"rawtypes\",\"unchecked\"}) Node&lt;K,V>[] newTab = (Node&lt;K,V>[])new Node[newCap]; table = newTab; if (oldTab != null) { for (int j = 0; j &lt; oldCap; ++j) { Node&lt;K,V> e; if ((e = oldTab[j]) != null) { oldTab[j] = null; if (e.next == null) newTab[e.hash &amp; (newCap - 1)] = e; else if (e instanceof TreeNode) //split中可能出现红黑树降级为链表 ((TreeNode&lt;K,V>)e).split(this, newTab, j, oldCap); else { // preserve order Node&lt;K,V> loHead = null, loTail = null; Node&lt;K,V> hiHead = null, hiTail = null; Node&lt;K,V> next; do { next = e.next; if ((e.hash &amp; oldCap) == 0) { if (loTail == null) loHead = e; else loTail.next = e; loTail = e; } else { if (hiTail == null) hiHead = e; else hiTail.next = e; hiTail = e; } } while ((e = next) != null); if (loTail != null) { loTail.next = null; newTab[j] = loHead; } if (hiTail != null) { hiTail.next = null; newTab[j + oldCap] = hiHead; } } } } } return newTab; } 看完这个方法我们就大概知道各种指标的含义了。（我放到总结里去了） 《阿里巴巴Java开发手册》中有这样一条建议： 【推荐】集合初始化时，指定集合初始值大小。说明： HashMap 使用 HashMap(int initialCapacity) 初始化。正例： initialCapacity = (需要存储的元素个数 / 负载因子) + 1。注意负载因子（即 loaderfactor）默认为 0.75，如果暂时无法确定初始值大小，请设置为 16（即默认值）。反例： HashMap 需要放置 1024 个元素，由于没有设置容量初始大小，随着元素不断增加，容量 7 次被迫扩大，resize 需要重建 hash 表，严重影响性能。 4 问题 为什么默认负载因子是0.75？ 网上很多博客说这跟泊松分布有关系，原因来自jdk8中的HashMap的一段注释，而我看到有一位博主反驳了这种观点，说官方取默认负载因子为0.75和泊松分布并没有关系，只是一种折中的选择，而对于负载因子为0.75，加上泊松分布公式，推断出一个桶的元素数量超过8的概率非常小，这是为什么要引入红黑树的原因。 参考HashMap defaultLoadFactor = 0.75和泊松分布没有关系_厚积薄发者，轻舟万重山-CSDN博客 为什么8升红黑树，6降链表？ 如上所述，对于负载因子为0.75时，使用泊松分布公式可计算出一个桶中元素数量分布概率为： 0: 0.60653066 1: 0.30326533 2: 0.07581633 3: 0.01263606 4: 0.00157952 5: 0.00015795 6: 0.00001316 7: 0.00000094 8: 0.00000006当数量达到8的时候概率已经非常小了，官方认为此时可以使用红黑树解决效率问题。 至于数量降为6的时候再进行resize会退化为链表，官方在javadoc中写道： The bin count threshold for untreeifying a (split) bin during a resize operation. Should be less than TREEIFY_THRESHOLD, and at most 6 to mesh with shrinkage detection under removal. 首先TREEIFY_THRESHOLD必须小于TREEIFY_THRESHOLD，即必须小于8，为了适应移除元素的时候桶的轻微收缩，TREEIFY_THRESHOLD不超过6。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://www.codetool.top/tags/jdk/"},{"name":"集合","slug":"集合","permalink":"https://www.codetool.top/tags/%E9%9B%86%E5%90%88/"},{"name":"源码研究","slug":"源码研究","permalink":"https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"}]},{"title":"JDK8-Stream流库详解","slug":"JDK8-Stream流库详解（上）","date":"2020-02-11T12:15:42.000Z","updated":"2020-02-20T14:55:21.051Z","comments":true,"path":"article/JDK8-Stream流库详解（上）/","link":"","permalink":"https://www.codetool.top/article/JDK8-Stream%E6%B5%81%E5%BA%93%E8%AF%A6%E8%A7%A3%EF%BC%88%E4%B8%8A%EF%BC%89/","excerpt":"","text":"流提供了一种让我们可以在比集合更高的概念级别上指定计算的数据视图。通过使用流，我们可以说明想要完成什么任务，而不是说明如何去实现它。 1 流的创建 Collection.stream()：从一个集合生成流 Collection.parallelStream()：从一个集合生成并行流 Stream::of(T... t)：从一个或多个元素中生成流 Arrays::stream(T[] array, int startInclusive, int endExclusive)：从数组中生成流 Stream::empty()：生成一个空的流 String str = \"1,2,3,4,5,6,7\"; Stream&lt;String> wordStream1 = Stream.of(words); //等效于 Stream&lt;String> wordStream2 = Arrays.stream(words, 0, words.length); 1.1 无限流 Stream::generate(Supplier&lt;T&gt; s)，通过supplier的get获取流下一个要生成的元素。 Stream&lt;String> echos = Stream.generate(() -> \"Echo\"); Stream&lt;Double> randoms = Stream.generate(Math::random); Stream::iterate(final T seed, final UnaryOperator&lt;T&gt; f)，接受一个种子值和一个一元函数，从种子值开始反复将函数应用到之前的结果上。 Stream&lt;BigInteger> integers = Stream.iterate(BigInteger.ZERO,n->n.add(BigInteger.ONE)); 2 流的修改流的操作不会修改其数据源，当我们想修改流中的数据时，只能通过一些方法获取一个中间流。 2.1 过滤Stream&lt;T> filter(Predicate&lt;? super T> predicate) 用于过滤掉一些数据，只保留predicate.test()返回为true的数据。 Stream&lt;Integer> nums = Stream.of(1,2,3,4,5,6,7); Stream&lt;Integer> modNums = nums.filter(i -> i > 4); //5,6,7 2.2 转换&lt;R> Stream&lt;R> map(Function&lt;? super T, ? extends R> mapper); 当我们想按照某种方式转换流中的的值可以使用map并传递执行该转换的函数。 Stream&lt;Integer> nums = Stream.of(1,2,3,4,5,6,7); Stream&lt;Integer> modNums = nums.map(i -> i + 3); //4,5,6,7,8,9,10 2.3 其他操作 Stream&lt;T&gt; limit(long maxSize)：截取最大maxSize个元素，组成新流。 Stream&lt;T&gt; skip(long n)：丢弃前n个元素，组成新流。 public static &lt;T&gt; Stream&lt;T&gt; concat(Stream&lt;? extends T&gt; a, Stream&lt;? extends T&gt; b)：产生一个流，它的元素是a的元素后面跟了b的元素。 Stream&lt;T&gt; distinct()：去除重复操作 Stream&lt;T&gt; sorted()或Stream&lt;T&gt; sorted(Comparator&lt;? super T&gt; comparator)：返回一个排序后的流。 Stream&lt;T&gt; peek(Consumer&lt;? super T&gt; action)：当实际访问一个元素时，会把函数应用到这个元素。（仅当访问时，因为流的操作是懒惰的） 3 流的约简约简是一种终结操作，它们会将流约简为可以在程序中使用的非流值。 long count(); ：返回流中元素的数量 Optional&lt;T&gt; max(Comparator&lt;? super T&gt; comparator);：返回最大值 Optional&lt;T&gt; min(Comparator&lt;? super T&gt; comparator);：返回最小值 Optional&lt;T&gt; findFirst();：返回第一个值，搭配filter使用有奇效 Optional&lt;T&gt; findAny();：返回任意一个值，适用于并行处理流 boolean anyMatch(Predicate&lt;? super T&gt; predicate);：是否存在匹配 boolean allMatch(Predicate&lt;? super T&gt; predicate);：是否全部匹配 boolean noneMatch(Predicate&lt;? super T&gt; predicate);：是否不存在匹配 需要注意的是部分方法返回的是一个Optional&lt;T&gt;类型的返回值，它要么在其中包装了答案，要么表示没有任何值（因为流碰巧为空）。 Optional有如下主要方法： public boolean isPresent();//检查值是否存在 public T get();//如果有值返回值，没有抛出异常 public T orElse(T other);//如果有值返回值，没有值返回给定的参数 4 收集结果 调用iterator()返回一个旧式风格的迭代器 使用forEach()方法传入一个一元操作方法。 toArray()返回一个Object数组 &lt;R, A&gt; R collect(Collector&lt;? super T, A, R&gt; collector);传入一个collector，返回集合，常用的有Collectors.toList()，Collectors.toSet()或者Collectors.toCollection()里面传入具体集合的构造器方法","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"基础知识","slug":"基础知识","permalink":"https://www.codetool.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}]},{"title":"Junit-单元测试小工具","slug":"Junit-单元测试小工具","date":"2020-02-10T18:46:16.000Z","updated":"2020-02-21T14:38:07.517Z","comments":true,"path":"article/Junit-单元测试小工具/","link":"","permalink":"https://www.codetool.top/article/Junit-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E5%B0%8F%E5%B7%A5%E5%85%B7/","excerpt":"","text":"1 Junit概述JUnit 是一个回归测试框架，被开发者用于实施对应用程序的单元测试，加快程序编制速度，同时提高编码的质量。 JUnit 测试框架具有以下特点： JUnit是用于编写和运行测试的开源框架。 提供了注释，以确定测试方法。 提供断言测试预期结果。 提供了测试运行的运行测试。 JUnit测试让您可以更快地编写代码，提高质量 JUnit是优雅简洁。它是不那么复杂以及不需要花费太多的时间。 JUnit测试可以自动运行，检查自己的结果，并提供即时反馈。没有必要通过测试结果报告来手动梳理。 JUnit测试可以组织成测试套件包含测试案例，甚至其他测试套件。 Junit显示测试进度的，如果测试是没有问题条形是绿色的，测试失败则会变成红色。 2 Junit maven配置&lt;dependency> &lt;groupId>junit&lt;/groupId> &lt;artifactId>junit&lt;/artifactId> &lt;version>4.13&lt;/version> &lt;scope>test&lt;/scope> &lt;/dependency> 注：maven项目通常在test下编写测试类 3 Junit断言 void assertEquals([String message], expected value, actual value)：断言两个值相等。有多种参数类型重载，第一个参数是一个可选的字符串消息 void assertTrue([String message], boolean condition)：断言一个条件为真 void assertFalse([String message],boolean condition)：断言一个条件为假 void assertNotNull([String message], java.lang.Object object)：断言一个对象不为空(null) void assertNull([String message], java.lang.Object object)：断言一个对象为空(null) void assertSame([String message], java.lang.Object expected, java.lang.Object actual)：断言，两个对象引用相同的对象void assertNotSame([String message], java.lang.Object unexpected, java.lang.Object actual)：断言，两个对象不是引用同一个对象void assertArrayEquals([String message], expectedArray, resultArray)：断言预期数组和结果数组相等。有多种参数类型重载。 4 Junit注解 注解 描述 @Testpublic void method() Test注释指示该公共无效方法它所附着可以作为一个测试用例。 @Beforepublic void method() Before注释表示，该方法必须在类中的每个测试之前执行，以便执行测试某些必要的先决条件。 @BeforeClasspublic static void method() BeforeClass注释指出这是附着在静态方法必须执行一次并在类的所有测试之前。发生这种情况时一般是测试计算共享配置方法(如连接到数据库)。 @Afterpublic void method() After 注释指示，该方法在执行每项测试后执行(如执行每一个测试后重置某些变量，删除临时变量等) @AfterClasspublic static void method() 当需要执行所有的测试在JUnit测试用例类后执行，AfterClass注解可以使用以清理建立方法，(从数据库如断开连接)。注意：附有此批注(类似于BeforeClass)的方法必须定义为静态。 @Ignorepublic static void method() 当想暂时禁用特定的测试执行可以使用忽略注释。每个被注解为@Ignore的方法将不被执行。 代码示例： import org.junit.*; public class CalculatorTest { int a = 3; int b = 5; int expectAdd = 8; int expectSub = -2; Calculator calculator = new Calculator(); @BeforeClass public static void beforeClass(){ System.out.println(\"@BeforeClass\"); } @Test public void addTest(){ int res = calculator.add(a,b); System.out.println(\"add(\"+a+\",\"+b+\")=\"+res); Assert.assertEquals(res,expectAdd); } @Test public void subTest(){ int res = calculator.sub(a,b); System.out.println(\"sub(\"+a+\",\"+b+\")=\"+res); Assert.assertEquals(res,expectSub); } @AfterClass public static void onceExecutedAfterAll() { System.out.println(\"@AfterClass\"); } @After public void executedAfterEach() { System.out.println(\"@After\"); } } 5 创建套件测试测试套件是一些测试不同类用例，可以使用@RunWith和@Suite注解运行所有东西在一起。如果有很多测试类，想让它们都运行在同一时间，而不是单一地运行每个测试，这是非常有用的。 下面这段代码即同时测试TestCase1和TestCase2 package junit; import org.junit.runner.RunWith; import org.junit.runners.Suite; @RunWith(Suite.class) @Suite.SuiteClasses({TestCase1.class,TestCase2.class}) public class TestSuite { } 6 构建参数化测试满足下列要求： 该类被注解为 @RunWith(Parameterized.class). 这个类有一个构造函数，存储测试数据。 这个类有一个静态方法生成并返回测试数据，并注明@Parameters注解。 这个类有一个测试，它需要注解@Test到方法。 代码示例： @RunWith(Parameterized.class) public class CalculatorTest2 { int oper1; int oper2; int expectAdd; int expectSub; Calculator calculator = new Calculator(); public CalculatorTest2(int oper1, int oper2, int expectAdd,int expectSub) { this.oper1 = oper1; this.oper2 = oper2; this.expectAdd = expectAdd; this.expectSub = expectSub; } @Parameterized.Parameters public static Collection addedNumbers(){ return Arrays.asList(new Integer[][]{{1,2,3,-1},{4,2,6,2},{7,3,10,10},{5,2,1,3}}); } @Test public void addTest(){ int res = calculator.add(oper1,oper2); System.out.println(\"add(\"+oper1+\",\"+oper2+\")=\"+res); Assert.assertEquals(res,expectAdd); } @Test public void subTest(){ int res = calculator.sub(oper1,oper2); System.out.println(\"sub(\"+oper1+\",\"+oper2+\")=\"+res); Assert.assertEquals(res,expectSub); } }","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"Junit","slug":"Junit","permalink":"https://www.codetool.top/tags/Junit/"},{"name":"软件测试","slug":"软件测试","permalink":"https://www.codetool.top/tags/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"}]},{"title":"leetcode313-超级丑数","slug":"leetcode313-超级丑数","date":"2020-02-10T16:48:51.000Z","updated":"2020-02-10T16:52:07.924Z","comments":true,"path":"article/leetcode313-超级丑数/","link":"","permalink":"https://www.codetool.top/article/leetcode313-%E8%B6%85%E7%BA%A7%E4%B8%91%E6%95%B0/","excerpt":"","text":"1 原题编写一段程序来查找第 n 个超级丑数。 超级丑数是指其所有质因数都是长度为 k 的质数列表 primes 中的正整数。 示例: 输入： n = 12, primes = [2,7,13,19]输出： 32解释： 给定长度为 4 的质数列表 primes = [2,7,13,19]，前 12 个超级丑数序列为：[1,2,4,7,8,13,14,16,19,26,28,32] 。 说明： 1 是任何给定 primes 的超级丑数。 给定 primes 中的数字以升序排列。 0 &lt; k ≤ 100, 0 &lt; n ≤ 106, 0 &lt; primes[i] &lt; 1000 。 第 n 个超级丑数确保在 32 位有符整数范围内。 2 解法2.1 思想该题和leetcode264-丑数II类似，可以使用堆来求解。 2.2 代码class Solution { public int nthUglyNumber(int n) { Queue&lt;Long> queue = new PriorityQueue&lt;>(); int count = 1; long cur = 1; while(count&lt;n){ queue.offer(cur*2); queue.offer(cur*3); queue.offer(cur*5); cur = queue.poll(); while (!queue.isEmpty() &amp;&amp; cur==queue.peek()) queue.poll(); count++; } return (int)cur; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"堆","slug":"堆","permalink":"https://www.codetool.top/tags/%E5%A0%86/"}]},{"title":"leetcode264-丑数II","slug":"leetcode264-丑数II","date":"2020-02-10T15:55:28.000Z","updated":"2020-02-10T19:01:39.472Z","comments":true,"path":"article/leetcode264-丑数II/","link":"","permalink":"https://www.codetool.top/article/leetcode264-%E4%B8%91%E6%95%B0II/","excerpt":"","text":"1 原题编写一个程序，找出第 n 个丑数。 丑数就是只包含质因数 2, 3, 5 的正整数。 示例: 输入： n = 10输出： 12解释： 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 是前 10 个丑数。 说明： 1 是丑数。 n 不超过1690。 2 解法2.1 思想该题的关键是要知道丑数的顺序，从第一个丑数开始，得到它的2、3、5的倍数插入到最小堆中，这样每次我们从堆顶拿出来的都是堆中最小的元素，即下一个丑数，重复该步骤并计数就能得到目标解。 2.2 代码class Solution { public int nthUglyNumber(int n) { Queue&lt;Long> queue = new PriorityQueue&lt;>(); int count = 1; long cur = 1; while(count&lt;n){ queue.offer(cur*2); queue.offer(cur*3); queue.offer(cur*5); cur = queue.poll(); while (!queue.isEmpty() &amp;&amp; cur==queue.peek()) queue.poll(); count++; } return (int)cur; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"堆","slug":"堆","permalink":"https://www.codetool.top/tags/%E5%A0%86/"}]},{"title":"leetcode215-数组中的第K个最大元素","slug":"leetcode215-数组中的第K个最大元素","date":"2020-02-09T19:49:02.000Z","updated":"2020-02-09T19:52:59.958Z","comments":true,"path":"article/leetcode215-数组中的第K个最大元素/","link":"","permalink":"https://www.codetool.top/article/leetcode215-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/","excerpt":"","text":"1 原题在未排序的数组中找到第 k 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。 示例1: 输入： [3,2,1,5,6,4] 和 k = 2输出： 5 示例2: 输入： [3,2,3,1,2,4,5,5,6] 和 k = 4输出： 4 说明: 你可以假设 k 总是有效的，且 1 ≤ k ≤ 数组的长度。 2 解法2.1 思想可以使用最小堆，维持堆里不超过k个数字，一旦超过则移除堆顶数字，最后得到的堆顶数字则是要求的目标数字。 2.2 代码class Solution { public int findKthLargest(int[] nums, int k) { Queue&lt;Integer> queue = new PriorityQueue&lt;>(); for(int i:nums){ queue.offer(i); if(queue.size()>k) queue.poll(); } return queue.peek(); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"堆","slug":"堆","permalink":"https://www.codetool.top/tags/%E5%A0%86/"}]},{"title":"PriorityQueue源码分析","slug":"PriorityQueue源码分析","date":"2020-02-09T18:43:50.000Z","updated":"2020-02-13T12:57:27.049Z","comments":true,"path":"article/PriorityQueue源码分析/","link":"","permalink":"https://www.codetool.top/article/PriorityQueue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","excerpt":"","text":"1 总结总结放前面防止太长不看： PriorityQueue是个最小堆，如果要改变排序顺序只能重写比较器传入构造方法。 内部元素要么实现Comparable接口，要么传入比较器进行比较。 PriorityQueue的核心操作就是堆的思想，插入向上堆化，移除向下堆化。 PriorityQueue的内部是数组存储数据，默认容量是11。 扩容方法是，如果原数组容量小于64个，则新容量是它的2倍+2（考虑到大概率插入双孩子节点），否则1.5倍增长 2 概要昨天学习了带有优先级的完全二叉树-堆，提到了堆的一种应用就是实现优先级队列，今天我们就来看看jdk中优先级队列PriorityQueue的实现吧。 优先级队列顾名思义就是高优先级的元素先出，低优先级的元素后出（警告，是我想当然了，其实是低优先级的元素先出），所以一个优先级队列内的元素类型应该能比较其优先级。 首先看PriorityQueue的声明： public class PriorityQueue&lt;E> extends AbstractQueue&lt;E> implements java.io.Serializable 和LinkedList一样继承了AbstractQueue，来自Queue接口，说明它的主要操作是offer()，peek()和poll() 但是泛型中并不是E extends Comparable，那它是怎么比较优先级的呢？ 3 核心方法3.1 offer我们直接来看offer()方法，offer方法可以构造出一个优先级队列出来，能让我们理解它的内部结构： public boolean offer(E e) { if (e == null) throw new NullPointerException(); modCount++; int i = size; // grow，看名字大概明白是扩容 if (i >= queue.length) grow(i + 1); size = i + 1; // queue[0]，大概明白内部是用数组来存储的数据 if (i == 0) queue[0] = e; else // 注意！是不是似曾相识！ siftUp(i, e); return true; } 我想看过我上一篇博客的看到siftUp就明白了，这不就是堆插入元素之后做一个向上堆化的操作嘛！这里可以直观地看出Java中PriorityQueue就是使用堆来实现的。 继续看siftUp： private void siftUp(int k, E x) { if (comparator != null) siftUpUsingComparator(k, x); else siftUpComparable(k, x); } 到这里大概就知道它是怎么比较优先级的了。因为PriorityQueue有几个带比较器的构造方法： public PriorityQueue(Comparator&lt;? super E&gt; comparator) public PriorityQueue(int initialCapacity,Comparator&lt;? super E&gt; comparator) 通过比较器就可以比较它们的优先级了，如果没有比较器的话，就调用siftUpComparable方法，大概可以猜到是用Comparable接口进行比较。 // 这里的k是原来要插入的数组下标 private void siftUpComparable(int k, E x) { Comparable&lt;? super E> key = (Comparable&lt;? super E>) x; while (k > 0) { // 获取父节点的位置 int parent = (k - 1) >>> 1; Object e = queue[parent]; // 如果大于父节点的值（大于是泛指），不继续操作 if (key.compareTo((E) e) >= 0) break; queue[k] = e; k = parent; } queue[k] = key; } 可以看出，这个向上堆化的操作是将值更小的元素放在堆顶（最小堆） 于是继续来看peek()方法： 3.2 peekpublic E peek() { return (size == 0) ? null : (E) queue[0]; } 可以看出就是返回数组第一个元素。 那么看poll()方法： 3.3 pollpublic E poll() { if (size == 0) return null; int s = --size; modCount++; E result = (E) queue[0]; E x = (E) queue[s]; queue[s] = null; if (s != 0) //向下堆化 siftDown(0, x); return result; } 也很熟悉，就是堆的基本操作，移除堆顶元素，然后向下堆化。 private void siftDownComparable(int k, E x) { Comparable&lt;? super E> key = (Comparable&lt;? super E>)x; int half = size >>> 1; // loop while a non-leaf while (k &lt; half) { // 左孩子位置 int child = (k &lt;&lt; 1) + 1; // assume left child is least Object c = queue[child]; // 右孩子位置 int right = child + 1; if (right &lt; size &amp;&amp; ((Comparable&lt;? super E>) c).compareTo((E) queue[right]) > 0) c = queue[child = right]; if (key.compareTo((E) c) &lt;= 0) break; queue[k] = c; k = child; } queue[k] = key; } 目前为止，核心操作我们就看完了，说实话我之前一直以为它是个最大堆来着，毕竟总会觉得应该是大优先级的先出队列。然而实际上是最小堆，如果要改变它的排序顺序只能重写比较器传入。 4 构造方法与扩容4.1 从Collection构造public PriorityQueue(Collection&lt;? extends E> c) { if (c instanceof SortedSet&lt;?>) { SortedSet&lt;? extends E> ss = (SortedSet&lt;? extends E>) c; this.comparator = (Comparator&lt;? super E>) ss.comparator(); initElementsFromCollection(ss); } else if (c instanceof PriorityQueue&lt;?>) { PriorityQueue&lt;? extends E> pq = (PriorityQueue&lt;? extends E>) c; this.comparator = (Comparator&lt;? super E>) pq.comparator(); initFromPriorityQueue(pq); } else { this.comparator = null; initFromCollection(c); } } PriorityQueue可以从SortedSet和另一个PriorityQueue中获取它的比较器，再进行构造。 private void initFromCollection(Collection&lt;? extends E> c) { initElementsFromCollection(c); heapify(); } 根据我们对堆的了解，看到这里大概就知道了先给数组赋值然后原地堆化。 private void initElementsFromCollection(Collection&lt;? extends E> c) { Object[] a = c.toArray(); // If c.toArray incorrectly doesn't return Object[], copy it. if (a.getClass() != Object[].class) a = Arrays.copyOf(a, a.length, Object[].class); int len = a.length; if (len == 1 || this.comparator != null) for (int i = 0; i &lt; len; i++) if (a[i] == null) throw new NullPointerException(); this.queue = a; this.size = a.length; } 这个函数给数组赋值，值得注意的是容量就维持原集合的容量不变，大概考虑的是由另一个集合构造而来的PriorityQueue很大概率不会再添加元素 private void heapify() { for (int i = (size >>> 1) - 1; i >= 0; i--) siftDown(i, (E) queue[i]); } 这个函数就是给数组原地堆化了，(size&gt;&gt;&gt;1)-1就是数组最后一个非叶节点的位置，从这里开始向下堆化。 4.2 扩容PriorityQueue的默认构造方法是： public PriorityQueue() { this(DEFAULT_INITIAL_CAPACITY, null); } 找到它对应的构造方法： public PriorityQueue(int initialCapacity, Comparator&lt;? super E> comparator) { // Note: This restriction of at least one is not actually needed, // but continues for 1.5 compatibility if (initialCapacity &lt; 1) throw new IllegalArgumentException(); this.queue = new Object[initialCapacity]; this.comparator = comparator; } 它需要传入一个数组的初始容量和一个comparator，而我们刚才看到默认的容量是DEFAULT_INITIAL_CAPACITY，找到它的定义 private static final int DEFAULT_INITIAL_CAPACITY = 11; 说明默认构造方法的初始容量是11。还记得在offer方法中见过一个grow方法，找到定义： private void grow(int minCapacity) { int oldCapacity = queue.length; // Double size if small; else grow by 50% // 如果数组容量小于64个，则翻倍，否则1.5倍增长 int newCapacity = oldCapacity + ((oldCapacity &lt; 64) ? (oldCapacity + 2) : (oldCapacity >> 1)); // overflow-conscious code if (newCapacity - MAX_ARRAY_SIZE > 0) newCapacity = hugeCapacity(minCapacity); queue = Arrays.copyOf(queue, newCapacity); } 需要注意的是，不同于ArrayList直接1.5倍扩容，PriorityQueue在数组容量小于64个的时候按2倍+2扩容。我想熟悉堆的朋友应该也能想到了，2倍+2正好是当前插入的节点右孩子的位置。说明jdk默认在一开始堆的尺寸很小的情况下一旦插入了一个节点则很有可能要插入它的双孩子节点。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://www.codetool.top/tags/jdk/"},{"name":"集合","slug":"集合","permalink":"https://www.codetool.top/tags/%E9%9B%86%E5%90%88/"},{"name":"源码研究","slug":"源码研究","permalink":"https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"},{"name":"堆","slug":"堆","permalink":"https://www.codetool.top/tags/%E5%A0%86/"}]},{"title":"带有优先级的完全二叉树-堆","slug":"带有优先级的完全二叉树-堆","date":"2020-02-09T15:12:12.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/带有优先级的完全二叉树-堆/","link":"","permalink":"https://www.codetool.top/article/%E5%B8%A6%E6%9C%89%E4%BC%98%E5%85%88%E7%BA%A7%E7%9A%84%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91-%E5%A0%86/","excerpt":"","text":"1 堆的概念堆是一种完全二叉树(除了最后一层每个节点的子节点都是满的，最后一层的节点也是集中在左边) 虽然堆是一棵二叉树，但也由于它是一棵完全二叉树的原因，可以使用一个数组来表示堆。（层次遍历） 我们常用到的堆是最大堆和最小堆 1.1 最小堆最小堆要求，对于任意一个父结点来说，其子结点的值都大于这个父节点。 对于这个最小堆，可以用数组表示为[1,3,30,22,10,50] 1.2 最大堆最大堆和最小堆相反，对于任意一个父结点来说，其子结点的值都小于这个父节点。 2 堆的操作2.1 插入我们看如何构建一个最小堆： 对于[30,15,5,11,22,2] 可以看出，我们依次按数组的顺序放入二叉树的节点，一旦出现子节点比父节点的值小，交换子节点和父节点。 我们称这个操作为向上堆化，堆化后的数组为[2,11,5,30,22,15] 2.2 删除将堆树中待删除的节点A与堆树中的最后一个节点B互换，然后调整节点B到合适的位置，最后从堆树中删除排在堆数组最后的节点A。 不过在堆这个数据结构中，我们通常只需要删除堆顶元素。 3 堆的应用3.1 优先级队列实现优先级队列的方法有很多，但是用堆来实现是最直接、最高效的。堆和优先级队列非常相似，一个堆就可以看作一个优先级队列。从优先级队列中取出优先级最高的元素，就相当于取出堆顶元素。 3.2 堆排序堆排序实际上就是不断获取堆顶元素。 对于最大堆来说，我们知道最大堆的队首元素是整个堆最大的元素，当我们删除并得到堆顶元素时，剩下的元素会重新堆化，得到一个新的堆顶元素，这样不断删除并获取堆顶元素，最终拿到的就是一个从大到小的有序序列。 当然，用数组代表堆，我们在排序的时候可以不必删除元素，只需要将原堆顶元素移动到数组末尾，将剩下的元素重新堆化，然后重复该步骤，最后就能得到一个从小到大排序的数组。 4 附：代码示例4.1 实现一个完整的最大堆并堆排序一个数组public class MaxHeap { private int[] heap; private int size; // 用数组来初始化一个堆 public MaxHeap(int[] source){ heap = source; size = source.length; heapify(); } public int get(int index){ return heap[index]; } public int size() { return size; } //移除一个元素，并从这个元素开始向下堆化 public int removeAt(int index){ int node = heap[index]; swap(index,size-1); size--; downShift(index); return node; } //构建堆 public void heapify(){ for(int i = 0; i &lt; size; i++){ int position = i; upShift(position); } } //向上堆化 public void upShift(int position){ int parent = getParent(position); while (position>0 &amp;&amp; (heap[position]>heap[parent])){ swap(position,parent); position = parent; parent = getParent(position); } } //向下堆化 public void downShift(int position){ int children1 = position*2+1; int children2 = position*2+2; while (children1&lt;size){ int toSwap = children1; if(children2&lt;size){ toSwap = heap[children1]>heap[children2]?children1:children2; } if(heap[toSwap]>heap[position]){ swap(position,toSwap); position = toSwap; children1 = position*2+1; children2 = position*2+2; }else break; } } public void swap(int source,int destination){ int cache = heap[source]; heap[source] = heap[destination]; heap[destination] = cache; } /** * 计算父节点下标 */ private int getParent(int child) { return (child + 1) / 2 - 1; } @Override public String toString() { StringBuilder sb = new StringBuilder(\"[\"); for (int i = 0;i&lt;size;i++){ sb.append(heap[i]); if(i!=size-1) sb.append(\",\"); } return sb.append(\"]\").toString(); } public static void main(String[] args) { MaxHeap heap = new MaxHeap(new int[]{30,15,5,11,22,2}); System.out.println(heap); while (heap.size()!=0){ //堆排序得到一个序列 int head = heap.removeAt(0); System.out.println(head); } //操作完后数组里元素的是从小到大排序的 System.out.println(Arrays.toString(heap.heap)); } } 运行结果： [30,22,5,11,15,2] 30 22 15 11 5 2 [2, 5, 11, 15, 22, 30]4.2 堆排序算法Java实现实际的堆排序中，我们肯定不用写这么长一段代码，专门把排序的逻辑提取出来就行了： 来自堆排序算法思路以及Java实现_long_lance的博客-CSDN博客 public class HeapSorting { public static void main(String[] args) { int[] a=new int[]{0,9,8}; Sort(a,a.length-1); for(int i:a){ System.out.println(i); } } //通过递归向下堆化 public static void MaxHeapify(int[] a,int index,int size){ int l=2*index; int r=2*index+1; int largest=index; if(l&lt;=size &amp;&amp; a[l]>a[index]){ largest=l; } if(r&lt;=size &amp;&amp; a[r]>a[largest]){ largest=r; } if(largest!=index){ int temp=a[largest]; a[largest]=a[index]; a[index]=temp; MaxHeapify(a,largest,size); } } //数组堆化，注意上面实现堆的代码中构建堆是通过向上堆化，我们可以优化成将所有非叶节点向下堆化 public static void HeapBuild(int[] a,int size){ for(int i=size/2;i>=1;i--){ MaxHeapify(a,i,size); } } public static void Sort(int[] a,int size){ HeapBuild(a,size); for(int i=size;i>=2;i--){ //每次将堆顶元素移到数组末尾，然后再向下堆化 int temp=a[i]; a[i]=a[1]; a[1]=temp; MaxHeapify(a,1,i-1); } } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"堆","slug":"堆","permalink":"https://www.codetool.top/tags/%E5%A0%86/"}]},{"title":"弱平衡的二叉查找树-红黑树","slug":"弱平衡的二叉查找树-红黑树","date":"2020-02-09T13:03:21.000Z","updated":"2020-02-20T14:55:21.051Z","comments":true,"path":"article/弱平衡的二叉查找树-红黑树/","link":"","permalink":"https://www.codetool.top/article/%E5%BC%B1%E5%B9%B3%E8%A1%A1%E7%9A%84%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91-%E7%BA%A2%E9%BB%91%E6%A0%91/","excerpt":"","text":"为什么会出现红黑树？ 之前我们提过AVL树-自平衡的二叉搜索树，但是一旦树的节点发生变化，AVL树为了维持绝对平衡，需要频繁地进行旋转操作。那么一旦我们插入、删除操作比例相较查询操作变多的时候，AVL树的效率就显得较为低下了。 1 红黑树的定义首先，红黑树是一个二叉搜索树，它同时满足以下特性： 每个节点要么是黑色，要么是红色 根节点是黑色 如果节点是红色的，那么它的子节点必须是黑色的（反之，不一定需要成立） 从根节点到叶节点或空子节点的每条路径，都包含相同数目的黑色节点（我们将空子节点记为黑色的） 红黑树不追求绝对平衡，其只需保证最长路径不超过最短路径的2倍。 2 红黑树的变换操作红黑树除根节点外所有插入的点默认为红色。为了维持一棵红黑树，有三种变换操作。 2.1 改变颜色红色节点变为黑色节点，黑色节点变为红色节点。 2.2 左旋和AVL树一样，以中间结点为轴，中间结点的左子节点变为原根节点的右子节点，再以中间结点为根节点，把原根节点连到左子节点上。 2.3 右旋和左旋类似的操作 3 红黑树的操作3.1 插入3.1.1 变颜色的情况要插入的位置的父节点是红色，且父节点的兄弟节点也是红色，则： 把父节点和父节点的兄弟节点设为黑色 把父节点的父节点(祖父节点)设为红色(如果祖父节点是根节点，不能变颜色) 定位到父节点的父节点，分析下一步的变换规则 我们看下面这个例子，插入6这个节点，出现两个红色节点上下相邻，开始变颜色，将7、13变为黑色，12变为红色，并定位到12，分析接下来要进行的操作。 3.1.2 旋转的情况非常类似AVL，一旦变完颜色还出现红色的节点相邻，进行旋转操作。 折线式失衡（博主自己想出来的概念），双旋 我们继续上面那张图的例子，定位到12后，发现仍然出现上下两个红色节点相邻，此时5-12-7-6形成折线式失衡，和AVL的方法一样先左旋再右旋。 注意右旋后原根节点要变为红色，新根节点变为黑色。 直线式失衡，单旋 直线式失衡就只是单独进行左旋或右旋。旋转完成后也要进行原根节点要变为红色，新根节点变为黑色的操作。 （旋转后的变颜色实质就是维护从根节点到叶节点或空子节点的每条路径，都包含相同数目的黑色节点的性质） 3.2 删除删除操作类似二叉查找树的删除，但删除之后若不满足一棵红黑树的性质则使用一系列着色操作来重新让它成为一棵红黑树。 具体操作参考目前最详细的红黑树原理分析（大量图片+过程推导！！！）_Y先森0.0-CSDN博客","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"搜索树","slug":"搜索树","permalink":"https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"}]},{"title":"leetcode55-跳跃游戏","slug":"leetcode55-跳跃游戏","date":"2020-02-08T17:31:49.000Z","updated":"2020-02-09T12:01:32.315Z","comments":true,"path":"article/leetcode55-跳跃游戏/","link":"","permalink":"https://www.codetool.top/article/leetcode55-%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/","excerpt":"","text":"1 原题原题 给定一个非负整数数组，你最初位于数组的第一个位置。 数组中的每个元素代表你在该位置可以跳跃的最大长度。 判断你是否能够到达最后一个位置。 示例1: 输入： [2,3,1,1,4]输出： true解释： 我们可以先跳 1 步，从位置 0 到达 位置 1, 然后再从位置 1 跳 3 步到达最后一个位置。 示例2: 输入： [3,2,1,0,4]输出： false解释： 无论怎样，你总会到达索引为 3 的位置。但该位置的最大跳跃长度是 0 ， 所以你永远不可能到达最后一个位置。 2 解法2.1 思想 动态规划，看某一个点是否能到达最后一个点，如果能，那是否另外某个点能到达这个点。 贪心算法，如果能到达点a，那么a之前的点也一定能够到达。从右往左找到一个能到达最后一个点的位置，然后继续往左找到一个能到达当前点的位置，如此循环，如果能找到第一个点则返回true。 2.2 代码动态规划+记忆： class Solution { int[] numsGlobal; Boolean[] canJump; public boolean canJump(int[] nums) { numsGlobal = nums; canJump = new Boolean[nums.length]; return canJumpTo(nums.length-1); } public boolean canJumpTo(int index){ if(index == 0) return true; if(canJump[index]!=null) return canJump[index]; for(int i = 0;i&lt;index;i++){ if(numsGlobal[i]>=index-i) { if(canJumpTo(i)) { canJump[i] = true; return true; } } } canJump[index] = false; return false; } } 贪心算法：(来源leetcode官方) public class Solution { public boolean canJump(int[] nums) { int lastPos = nums.length - 1; for (int i = nums.length - 1; i >= 0; i--) { if (i + nums[i] >= lastPos) { lastPos = i; } } return lastPos == 0; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"贪心法","slug":"贪心法","permalink":"https://www.codetool.top/tags/%E8%B4%AA%E5%BF%83%E6%B3%95/"}]},{"title":"网络编程之AIO","slug":"网络编程之AIO","date":"2020-02-08T15:53:57.000Z","updated":"2020-02-08T16:52:20.965Z","comments":true,"path":"article/网络编程之AIO/","link":"","permalink":"https://www.codetool.top/article/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%8BAIO/","excerpt":"","text":"1 AIO介绍AIO是JDK1.7引入的，也称为NIO 2.0 NIO的同步非阻塞类似于轮询，让Selector去询问各个通道的状态。 而AIO则是通过Future实现真正的异步，让IO就绪时由系统来通知应用程序。 核心类： AsyncServerSocketChannel AsyncSocketChannel 当进行如下操作时，都是异步的操作 connect/accept write read 可以通过两种方案处理结果： 通过返回的Future对象获取结果 通过CompletionHandler接口实现回调 对于CompletionHandler接口，里面有completed和failed方法，分别代表成功后的回调和失败后的回调。 2 代码示例实现一个客户端给服务端发送数据，服务端按原数据返回的程序。 服务端： public class Server { final String LOCALHOST = \"localhost\"; final int DEFAULT_PORT = 8888; AsynchronousServerSocketChannel serverSocketChannel; private void close(Closeable... closeable){ for(Closeable c:closeable){ try { c.close(); } catch (IOException e) { e.printStackTrace(); } } } public void start(){ try { // 绑定监听端口 serverSocketChannel = AsynchronousServerSocketChannel.open(); serverSocketChannel.bind(new InetSocketAddress(LOCALHOST,DEFAULT_PORT)); System.out.println(\"启动服务器，监听端口：\"+DEFAULT_PORT); while (true) { serverSocketChannel.accept(null,new AcceptHandler()); System.in.read(); } } catch (IOException e) { e.printStackTrace(); } finally { close(serverSocketChannel); } } private class AcceptHandler implements CompletionHandler&lt;AsynchronousSocketChannel,Object>{ @Override public void completed(AsynchronousSocketChannel result, Object attachment) { if(serverSocketChannel.isOpen()){ serverSocketChannel.accept(null,this); } AsynchronousSocketChannel clientChannel = result; if(clientChannel!=null&amp;&amp;clientChannel.isOpen()){ ClientHandler handler = new ClientHandler(clientChannel); ByteBuffer buffer = ByteBuffer.allocate(1024); Map&lt;String,Object> info = new HashMap&lt;>(); info.put(\"type\",\"read\"); info.put(\"buffer\",buffer); clientChannel.read(buffer,info,handler); } } @Override public void failed(Throwable exc, Object attachment) { // 处理错误 exc.printStackTrace(); if(serverSocketChannel.isOpen()){ serverSocketChannel.accept(null,this); } } } private class ClientHandler implements CompletionHandler&lt;Integer,Object>{ private AsynchronousSocketChannel clientChannel; public ClientHandler(AsynchronousSocketChannel channel){ this.clientChannel = channel; } @Override public void completed(Integer result, Object attachment) { Map&lt;String,Object> info = (Map&lt;String, Object>) attachment; String type = (String) info.get(\"type\"); if(type.equals(\"read\")){ ByteBuffer buffer = (ByteBuffer) info.get(\"buffer\"); buffer.flip(); info.put(\"type\",\"write\"); clientChannel.write(buffer,info,this); buffer.clear(); }else if(type.equals(\"write\")){ ByteBuffer buffer = ByteBuffer.allocate(1024); info.put(\"type\",\"read\"); info.put(\"buffer\",buffer); clientChannel.read(buffer,info,this); } } @Override public void failed(Throwable exc, Object attachment) { //处理错误 } } public static void main(String[] args) { Server server = new Server(); server.start(); } } 客户端： public class Client { final String LOCALHOST = \"localhost\"; final int DEFAULT_PORT = 8888; AsynchronousSocketChannel clientSocketChannel; private void close(Closeable... closeable){ for(Closeable c:closeable){ try { c.close(); } catch (IOException e) { e.printStackTrace(); } } } public void start(){ // 创建channel try { clientSocketChannel = AsynchronousSocketChannel.open(); Future&lt;Void> future = clientSocketChannel.connect(new InetSocketAddress(LOCALHOST, DEFAULT_PORT)); future.get(); // 等待用户的输入 BufferedReader consoleReader = new BufferedReader(new InputStreamReader(System.in)); while(true){ String input = consoleReader.readLine(); byte[] inputBytes = input.getBytes(); ByteBuffer buffer = ByteBuffer.wrap(inputBytes); Future&lt;Integer> writeResult = clientSocketChannel.write(buffer); writeResult.get(); buffer.flip(); Future&lt;Integer> readResult = clientSocketChannel.read(buffer); readResult.get(); String echo = new String(buffer.array()); buffer.clear(); System.out.println(echo); } } catch (IOException e) { e.printStackTrace(); } catch (InterruptedException e) { e.printStackTrace(); } catch (ExecutionException e) { e.printStackTrace(); } finally { close(clientSocketChannel); } } public static void main(String[] args) { Client client = new Client(); client.start(); } }","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"IO","slug":"IO","permalink":"https://www.codetool.top/tags/IO/"},{"name":"网络编程","slug":"网络编程","permalink":"https://www.codetool.top/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"},{"name":"AIO","slug":"AIO","permalink":"https://www.codetool.top/tags/AIO/"}]},{"title":"多叉平衡查找树-B树与B+树","slug":"多叉平衡查找树-B树与B-树","date":"2020-02-08T13:47:51.000Z","updated":"2020-03-04T06:03:31.248Z","comments":true,"path":"article/多叉平衡查找树-B树与B-树/","link":"","permalink":"https://www.codetool.top/article/%E5%A4%9A%E5%8F%89%E5%B9%B3%E8%A1%A1%E6%9F%A5%E6%89%BE%E6%A0%91-B%E6%A0%91%E4%B8%8EB-%E6%A0%91/","excerpt":"","text":"本文参考链接： 从B树、B+树、B*树谈到R 树_磁盘,数据结构,存储_结构之法 算法之道-CSDN博客 【数据结构】B树、B+树详解 - Assassinの - 博客园 BTree.java 1 B树的由来B树是为了磁盘或其它存储设备而设计的一种多叉平衡查找树，许多数据库系统都一般使用B树或者B树的各种变形结构，如B+树，B*树来存储信息。 在大规模的数据查找中，即使是平衡二叉树也会产生过深的深度，导致磁盘频繁存取，影响查找效率。 磁盘上数据必须用一个三维地址唯一标示：柱面号、盘面号、块号。 读/写磁盘上某一指定数据需要下面3个步骤： 首先移动臂根据柱面号使磁头移动到所需要的柱面上，这一过程被称为定位或查找 。 根据盘面号来确定指定盘面上的磁道。 盘面确定以后，盘片开始旋转，将指定块号的磁道段移动至磁头下。 访问某一具体信息，由3部分时间组成： 查找时间(seek time) ：磁头移动到指定磁道的时间。这部分时间代价最高，最大可达到0.1s左右。 等待时间(latency time) ：磁盘旋转到指定盘块的时间。由于盘片绕主轴旋转速度很快，一般为7200转/分(电脑硬盘的性能指标之一, 家用的普通硬盘的转速一般有5400rpm(笔记本)、7200rpm几种)。因此一般旋转一圈大约0.0083s。 传输时间(transmission time) ：数据通过系统总线传送到内存的时间，一般传输一个字节(byte)大概0.02us=2*10-8s 磁盘读取数据是以盘块(block)为基本单位的。位于同一盘块中的所有数据都能被一次性全部读取出来。 而磁盘IO代价主要花费在查找时间上。因此我们应该尽量将相关信息存放在同一盘块，同一磁道中。或者至少放在同一柱面或相邻柱面上，以求在读/写信息时尽量减少磁头来回移动的次数，避免过多的查找时间。 有了B树，我们就可以将节点和盘块关联起来，避免频繁进行磁盘IO访问。 2 B树的操作我们用阶数m来定义一棵B树： 树中每个结点最多含有m个孩子（m&gt;=2），至多有m-1个关键字（两棵子树指针夹着一个关键字） 除根结点和叶子结点外，其它每个结点至少有⌈m/2⌉个孩子（至少⌈m/2⌉-1个关键字，出于效率原因规定的） 若根结点不是叶子结点，则至少有2个孩子（至少一个关键字） 所有叶子结点都出现在同一层，叶子结点不包含任何关键字信息 一颗3阶树结构如下： 2.1 B树的搜索B树是多路查找树,二叉排序树是二路查找,B树是多路查找,所以它是二叉排序树的拓展。因此,B树的查找操作和二叉排序树的查找操作非常类似。 查找过程: 先让待查找关键字key和结点的中的关键字比较,如果等于其中某个关键字,则查找成功。 如果和所有关键字都不相等,则看key处在哪个范围内,然后去对应的指针所指向的子树中查找。 Eg:如果key比第一个关键字K1还小,则去P0指针所指向的子树中查找,如果比最后一个关键字Kn还大,则去Pn指针所指向的子树中查找。 2.2 B树的插入在二叉排序树中,仅需查找到需插入的终端结点的位置。但是,在B树中找到插入的位置后,并不能简单地将其添加到终端结点位置,因为此时可能会导致整棵树不再满足B树中定义中的要求。 给定一组关键字{20,30,50,52,60,68,70},给出创建一棵3阶B树的过程。 由于m=3，所以除了根结点以外,非叶子结点至少有⌈3/2⌉-1=1个关键字，最多有3-1=2个关键字。所以依次插入20和30两个关键字到结点。 接下来插入50，如下，但是由于最多有2个关键字，所以这个结点不满足B树要求，需要分裂 分裂的方法: 取这个关键字数组中的中间关键字(⌈n/2⌉)作为新的结点,然后其他关键字形成两个结点作为新结点的左右孩子。 接下来插入52,,由于50结点只有一个关键字,所以可以插入52 接下来插入60,插入60之后该结点关键字数量又不符合要求,需要分裂 分裂过程: 取中间关键字(⌈3/2⌉=2)52,由于根结点只含30一个关键字,可以将52和30合并到一起。接下来需要处理50和60这两个结点,由于30&lt;50&lt;52,60&gt;52,所以50和60各自单独作为一个结点。 接下来插入68,由于60结点只有一个关键字,所以可以插入68 接下来插入70，插入70之后该结点关键词数量又不符合要求，需要分裂。 2.3 B树的删除B树中的删除操作与插入操作类似,但要稍微复杂些,要使得删除后的结点中的关键字个数≥⌈m/2⌉-1,因此将涉及结点的“合并问题。由于删除的关键字位置不同,可以分为关键字在终端结点和不在终端结点上两种情况。 如果在终端结点上: 结点内关键字数量大于⌈m/2⌉-1,这时删除这个关键字不会破坏B树的定义要求。所以直接删除。 结点内关键字数量等于⌈m/2⌉-1,并且其左右兄弟结点中存在关键字数量大于⌈m/2⌉-1的结点,则去兄弟结点中借关键字。 结点内关键字数量等于⌈m/2⌉-1,并且其左右兄弟结点中不存在关键字数量大于⌈m/2⌉-1的结点,则需要进行结点合并。 如果不在终端结点上: 找出它的相邻关键字，转换成在终端结点上（交换结点） 2.4 B树的高度logm/2(N+1)/2 + 1 3 B+树B+树的特征： 有m个子树的中间节点包含有m个元素（B树中是k-1个元素），每个元素不保存数据，只用来索引 所有的叶子结点中包含了全部关键字的信息，及指向含有这些关键字记录的指针，且叶子结点本身依关键字的大小自小而大的顺序链接。 (而B树的叶子节点并没有包括全部需要查找的信息) 所有的非终端结点可以看成是索引部分，结点中仅含有其子树根结点中最大（或最小）关键字。 (而B树的非终节点也包含需要查找的有效信息) 为什么说B+树比B树更适合数据库索引？ B+树的磁盘读写代价更低 B+树的内部结点并没有指向关键字具体信息的指针。因此其内部结点相对B树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了； B+树查询效率更加稳定 由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当； B+树便于范围查询（最重要的原因，范围查找是数据库的常态） B树在提高了IO性能的同时并没有解决元素遍历的时候效率低下的问题，正是为了解决这个问题，B+树应用而生。B+树只需要去遍历叶子节点就可以实现整棵树的遍历。而且在数据库中基于范围的查询是非常频繁的，而B树不支持这样的操作或者说效率太低 4 附：Algorithms第四版B树实现这个B树实现非叶子节点居然不带信息，把我整懵了 public class BTree&lt;Key extends Comparable&lt;Key>, Value> { // 度数M，一个结点最多有M-1个关键字 private static final int M = 4; private Node root; // 根节点 private int height; // B树的高度 private int n; // 该树中一共有多少个key-value对 // 节点 private static final class Node { private int m; // 有多少个子节点 private Entry[] children = new Entry[M]; // 子节点的数组 // create a node with k children private Node(int k) { m = k; } } // 一条索引 // 内部节点：只使用key和next // 叶子节点，只使用key和value private static class Entry { private Comparable key; private final Object val; private Node next; // 指向一个节点 public Entry(Comparable key, Object val, Node next) { this.key = key; this.val = val; this.next = next; } } /** * Initializes an empty B-tree. */ public BTree() { root = new Node(0); } /** * Returns true if this symbol table is empty. * @return {@code true} if this symbol table is empty; {@code false} otherwise */ public boolean isEmpty() { return size() == 0; } /** * Returns the number of key-value pairs in this symbol table. * @return the number of key-value pairs in this symbol table */ public int size() { return n; } /** * Returns the height of this B-tree (for debugging). * * @return the height of this B-tree */ public int height() { return height; } /** * Returns the value associated with the given key. * * @param key the key * @return the value associated with the given key if the key is in the symbol table * and {@code null} if the key is not in the symbol table * @throws IllegalArgumentException if {@code key} is {@code null} */ public Value get(Key key) { if (key == null) throw new IllegalArgumentException(\"argument to get() is null\"); return search(root, key, height); } private Value search(Node x, Key key, int ht) { Entry[] children = x.children; // 如果是叶子节点 if (ht == 0) { //找到叶子节点中对应的索引项 for (int j = 0; j &lt; x.m; j++) { if (eq(key, children[j].key)) return (Value) children[j].val; } } // 如果不是叶子节点 else { for (int j = 0; j &lt; x.m; j++) { //如果是节点中最后一条索引项或者位于该索引项与下一条索引项之间 if (j+1 == x.m || less(key, children[j+1].key)) //搜索该索引项的next return search(children[j].next, key, ht-1); } } return null; } /** * Inserts the key-value pair into the symbol table, overwriting the old value * with the new value if the key is already in the symbol table. * If the value is {@code null}, this effectively deletes the key from the symbol table. * * @param key the key * @param val the value * @throws IllegalArgumentException if {@code key} is {@code null} */ public void put(Key key, Value val) { if (key == null) throw new IllegalArgumentException(\"argument key to put() is null\"); Node u = insert(root, key, val, height); n++; if (u == null) return; // need to split root Node t = new Node(2); t.children[0] = new Entry(root.children[0].key, null, root); t.children[1] = new Entry(u.children[0].key, null, u); root = t; height++; } private Node insert(Node h, Key key, Value val, int ht) { int j; Entry t = new Entry(key, val, null); // external node if (ht == 0) { for (j = 0; j &lt; h.m; j++) { if (less(key, h.children[j].key)) break; } } // internal node else { for (j = 0; j &lt; h.m; j++) { if ((j+1 == h.m) || less(key, h.children[j+1].key)) { Node u = insert(h.children[j++].next, key, val, ht-1); if (u == null) return null; t.key = u.children[0].key; t.next = u; break; } } } for (int i = h.m; i > j; i--) h.children[i] = h.children[i-1]; h.children[j] = t; h.m++; if (h.m &lt; M) return null; else return split(h); } // split node in half private Node split(Node h) { Node t = new Node(M/2); h.m = M/2; for (int j = 0; j &lt; M/2; j++) t.children[j] = h.children[M/2+j]; return t; } /** * Returns a string representation of this B-tree (for debugging). * * @return a string representation of this B-tree. */ public String toString() { return toString(root, height, \"\") + \"\\n\"; } private String toString(Node h, int ht, String indent) { StringBuilder s = new StringBuilder(); Entry[] children = h.children; if (ht == 0) { for (int j = 0; j &lt; h.m; j++) { s.append(indent + children[j].key + \" \" + children[j].val + \"\\n\"); } } else { for (int j = 0; j &lt; h.m; j++) { if (j > 0) s.append(indent + \"(\" + children[j].key + \")\\n\"); s.append(toString(children[j].next, ht-1, indent + \" \")); } } return s.toString(); } // comparison functions - make Comparable instead of Key to avoid casts private boolean less(Comparable k1, Comparable k2) { return k1.compareTo(k2) &lt; 0; } private boolean eq(Comparable k1, Comparable k2) { return k1.compareTo(k2) == 0; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"搜索树","slug":"搜索树","permalink":"https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"}]},{"title":"leetcode611-有效三角形的个数","slug":"leetcode611-有效三角形的个数","date":"2020-02-07T18:26:22.000Z","updated":"2020-02-20T14:55:21.051Z","comments":true,"path":"article/leetcode611-有效三角形的个数/","link":"","permalink":"https://www.codetool.top/article/leetcode611-%E6%9C%89%E6%95%88%E4%B8%89%E8%A7%92%E5%BD%A2%E7%9A%84%E4%B8%AA%E6%95%B0/","excerpt":"","text":"1 原题给定一个包含非负整数的数组，你的任务是统计其中可以组成三角形三条边的三元组个数。 示例1: 输入： [2,2,3,4]输出： 3解释：有效的组合是:2,3,4 (使用第一个 2)2,3,4 (使用第二个 2)2,2,3 注意: 数组长度不超过1000。 数组里整数的范围为 [0, 1000]。 2 解法2.1 思想三角形的某两边之和必须大于第三边且两边之差小于第三边 方法： 暴力：获取所有3元组，判断能否构成三角形 动态规划：先给数组排序，任意两个较小边之和必须大于第三边。 对于数组[1,3,4,5,6]，先将最大边指向6，一最小边i指向1，一最小边j指向5，如下图所示。 1+5不大于6，可以将最小边往后移一格。 如图所示，此时3+5大于6，可以组成三角形，而因为数组是排序过的，则最小边再向后移最小两边之和也是大于第三边的，所以此时可以把总数加上j-i，然后把i还原回数组头部，j向前移一格 重复之前步骤，1+4不大于6，i向后移一格，3+4大于6，总数加上j-i。 2.2 代码 暴力 class Solution { public int triangleNumber(int[] nums) { int count = 0; for(int i = 0;i&lt;nums.length-2;i++){ for(int j = i+1;j&lt;nums.length-1;j++){ for(int n = j+1;n&lt;nums.length;n++){ if(nums[i]+nums[j]>nums[n]&amp;&amp;Math.abs(nums[i]-nums[j])&lt;nums[n]) count++; } } } return count; } } 动态规划 class Solution { public int triangleNumber(int[] nums) { int count = 0; Arrays.sort(nums); for(int n = nums.length-1;n>=2;n--){ int i = 0; int j = n-1; while(i&lt;j){ if(nums[i]+nums[j]>nums[n]) { count+=(j-i); j--; }else{ i++; } } } return count; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"基于NIO模型改进多人聊天室","slug":"基于NIO模型改进多人聊天室","date":"2020-02-07T15:45:50.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/基于NIO模型改进多人聊天室/","link":"","permalink":"https://www.codetool.top/article/%E5%9F%BA%E4%BA%8ENIO%E6%A8%A1%E5%9E%8B%E6%94%B9%E8%BF%9B%E5%A4%9A%E4%BA%BA%E8%81%8A%E5%A4%A9%E5%AE%A4/","excerpt":"","text":"第一版和第二版见基于BIO模型实现多人聊天室 NIO介绍见： NIO、BIO模型对比实现文件的复制NIO网络编程之Selector介绍 1 第三版：使用NIO模型改进1.1 服务端实现public class ChatServer { private static final int DEFAULT_PORT = 8888; private static final String QUIT = \"quit\"; private static final int Buffer = 1024; private ServerSocketChannel server; private Selector selector; private ByteBuffer rBuffer = ByteBuffer.allocate(Buffer); private ByteBuffer wBuffer = ByteBuffer.allocate(Buffer); private Charset charset = Charset.forName(\"UTF-8\"); private int port; public ChatServer() { } public ChatServer(int port) { this.port = port; } public void start(){ try { server = ServerSocketChannel.open(); server.configureBlocking(false);//！！！ server.socket().bind(new InetSocketAddress(port)); selector = Selector.open(); server.register(selector, SelectionKey.OP_ACCEPT); System.out.println(\"启动服务器，监听端口：\"+port+\"...\"); while (true) { selector.select(); Set&lt;SelectionKey> keys = selector.selectedKeys(); for(SelectionKey key:keys){ //处理被触发的事件 handles(key); } keys.clear(); } } catch (IOException e) { e.printStackTrace(); } finally { close(selector); } } private void handles(SelectionKey key) throws IOException { // ACCEPT事件 - 和客户端建立了连接 if(key.isAcceptable()){ ServerSocketChannel server = (ServerSocketChannel) key.channel(); SocketChannel client = server.accept(); client.configureBlocking(false); client.register(selector,SelectionKey.OP_READ); System.out.println(getClientName(client) +\"已连接\"); } // READ事件 - 客户端发送了消息 else if(key.isReadable()){ SocketChannel client = (SocketChannel) key.channel(); String fwdMsg = receive(client); if(fwdMsg.isEmpty()){ //客户端异常 key.cancel(); selector.wakeup(); }else{ System.out.println(getClientName(client)+\":\"+fwdMsg); // 检查用户是否退出 if(readyToQuit(fwdMsg)){ key.cancel(); selector.wakeup(); System.out.println(getClientName(client)+\"已断开连接\"); }else{ forwardMessage(client,fwdMsg); } } } } private void forwardMessage(SocketChannel client, String fwdMsg) { selector.keys().forEach(key->{ SelectableChannel connectedClient = key.channel(); if(connectedClient instanceof ServerSocketChannel) return; if(key.isValid() &amp;&amp; !client.equals(connectedClient)){ wBuffer.clear(); wBuffer.put(charset.encode(getClientName(client)+\":\"+fwdMsg)); wBuffer.flip(); while (wBuffer.hasRemaining()){ try { ((SocketChannel)connectedClient).write(wBuffer); } catch (IOException e) { e.printStackTrace(); } } } }); } private String receive(SocketChannel client) throws IOException { rBuffer.clear(); while(client.read(rBuffer)>0); rBuffer.flip(); return String.valueOf(charset.decode(rBuffer)); } private String getClientName(SocketChannel client){ return \"客户端[\"+client.socket().getPort()+\"]\"; } private boolean readyToQuit(String msg){ return QUIT.equals(msg); } private void close(Closeable... closeable){ for(Closeable c:closeable){ try { c.close(); } catch (IOException e) { e.printStackTrace(); } } } public static void main(String[] args) { ChatServer chatServer = new ChatServer(7777); chatServer.start(); } } 1.2 客户端实现public class ChatClient { private static final String DEFAULT_SERVER_HOST = \"127.0.0.1\"; private static final int DEFAULT_SERVER_PORT = 8888; private static final String QUIT = \"quit\"; private static final int BUFFER = 1024; private String host; private int port; private SocketChannel client; private ByteBuffer rBuffer = ByteBuffer.allocate(BUFFER); private ByteBuffer wBuffer = ByteBuffer.allocate(BUFFER); private Selector selector; private Charset charset = Charset.forName(\"UTF-8\"); public ChatClient() { } public ChatClient(String host, int port) { this.host = host; this.port = port; } public boolean readyToQuit(String msg){ return QUIT.equals(msg); } private void close(Closeable... closeable){ for(Closeable c:closeable){ try { c.close(); } catch (IOException e) { e.printStackTrace(); } } } private void start(){ try { client = SocketChannel.open(); client.configureBlocking(false); selector = Selector.open(); client.register(selector, SelectionKey.OP_CONNECT); client.connect(new InetSocketAddress(host,port)); while (selector.isOpen()){ selector.select(); Set&lt;SelectionKey> keys = selector.selectedKeys(); keys.forEach(key->{ handles(key); }); keys.clear(); } } catch (IOException e) { e.printStackTrace(); } catch (ClosedSelectorException e){ } finally { close(selector); } } private void handles(SelectionKey key) { // CONNECT连接就绪事件 if (key.isConnectable()){ SocketChannel channel = (SocketChannel) key.channel(); if(client.isConnectionPending()){ try { client.finishConnect(); //处理用户输入 new Thread(new UserInputHandler(this)).start(); client.register(selector,SelectionKey.OP_READ); } catch (IOException e) { e.printStackTrace(); } } } // READ事件 else if(key.isReadable()){ SocketChannel client = (SocketChannel) key.channel(); String msg = null; try { msg = recieve(client); } catch (IOException e) { e.printStackTrace(); } if(msg.isEmpty()){ // 服务器异常 close(selector); }else{ System.out.println(msg); } } } public void send(String msg) throws IOException { if (msg.isEmpty()) return; wBuffer.clear(); wBuffer.put(charset.encode(msg)); wBuffer.flip(); while (wBuffer.hasRemaining()){ client.write(wBuffer); } if(readyToQuit(msg)){ close(selector); } } private String recieve(SocketChannel client) throws IOException { rBuffer.clear(); while(client.read(rBuffer)>0); rBuffer.flip(); return String.valueOf(charset.decode(rBuffer)); } public static void main(String[] args) { ChatClient client = new ChatClient(\"127.0.0.1\",7777); client.start(); } } 处理用户输入的线程： public class UserInputHandler implements Runnable{ private ChatClient chatClient; public UserInputHandler(ChatClient chatClient){ this.chatClient = chatClient; } @Override public void run() { try { // 等待用户输入消息 BufferedReader consoleReader = new BufferedReader( new InputStreamReader(System.in) ); while (true){ String input = consoleReader.readLine(); // 向服务器发送消息 chatClient.send(input); // 检查用户是否准备退出 if(chatClient.readyToQuit(input)){ break; } } } catch (IOException e) { e.printStackTrace(); } } }","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"IO","slug":"IO","permalink":"https://www.codetool.top/tags/IO/"},{"name":"NIO","slug":"NIO","permalink":"https://www.codetool.top/tags/NIO/"}]},{"title":"NIO网络编程之Selector介绍","slug":"NIO网络编程之Selector介绍","date":"2020-02-07T11:38:08.000Z","updated":"2020-02-07T11:39:33.253Z","comments":true,"path":"article/NIO网络编程之Selector介绍/","link":"","permalink":"https://www.codetool.top/article/NIO%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E4%B9%8BSelector%E4%BB%8B%E7%BB%8D/","excerpt":"","text":"1 Selector要实现异步IO要通过Selector，甚至我们可以通过一个线程管理多个Channel的读写，这是NIO相较BIO的优越之处之一。 Channel可以注册到一个Selector上，Selector可以监视多个Channel的状态 Channel的状态有四种： CONNECT ACCEPT READ WRITE CONNECT代表某个Channel成功连接到另一个服务器（客户端）。ACCEPT则是一个ServerSocketChannel准备好接收新连接（服务端）。READ代表该Channel有数据可读，WRITE代表该Channel等待写操作。 这些状态在Java中对应SelectionKey中的四个常量 SelectionKey.OP_CONNECT SelectionKey.OP_ACCEPT SelectionKey.OP_READ SelectionKey.OP_WRITE 在给Channel注册到Selector时可以指定要监听的状态： channel.configureBlocking(false); SelectionKey key =channel.register(selector,SelectionKey.OP_READ); 这个状态可以是多个状态合成的，我们叫它interestOps，是任意几个状态的位或结果。 register方法可以返回一个SelectionKey，作为注册在该Selector上的Channel的唯一标识(一个Selector-Channel对)。 Selector的常用API： int select()：阻塞等待，直到至少有一个绑定的Channel符合监听的状态，返回符合状态Channel的个数，也可能是0（如果中途有一个Key的interestOps被更新了）。 int select(long timeout) ：阻塞等待限制一个最长时间，超过时间直接返回。 int selectNow()：不阻塞，直接查询有几个符合监听状态的Channel。 Set&lt;SelectionKey&gt; selectedKeys()：经过任一select操作后可以获取被select到的keys。 Selector wakeup()：如果一个线程调用select()方法阻塞了，可以让另一个线程调用同一个Selector上的wakeup()方法来唤醒这个线程。 void close()：关闭这个Selector。 2 SelectionKeySelectionKey的常用API： int interestOps()：返回interestOps，可以通过与常量进行位与来判断是否含有某个状态。 int readyOps()：返回的是有哪些监听的状态目前是对应的，也是合成值，可以通过与常量进行位与来判断是否含有某个状态。或者直接调用isConnectable,isAcceptable,isReadable,isWritable。 SelectableChannel channel()：获取这个SelectionKey对应的Channel Selector selector()： 获取这个SelectionKey对应的Selector Object attach(Object ob)：给这个SelectionKey附加一个Object对象 Object attachment()：获取这个附加的Object对象","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"IO","slug":"IO","permalink":"https://www.codetool.top/tags/IO/"},{"name":"NIO","slug":"NIO","permalink":"https://www.codetool.top/tags/NIO/"}]},{"title":"NIO、BIO模型对比实现文件的复制","slug":"NIO、BIO模型对比实现文件的复制","date":"2020-02-06T18:52:49.000Z","updated":"2020-02-07T19:32:35.651Z","comments":true,"path":"article/NIO、BIO模型对比实现文件的复制/","link":"","permalink":"https://www.codetool.top/article/NIO%E3%80%81BIO%E6%A8%A1%E5%9E%8B%E5%AF%B9%E6%AF%94%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E7%9A%84%E5%A4%8D%E5%88%B6/","excerpt":"","text":"1 NIO特点 使用Channel代替Stream，是双向的 使用Selector监控多条Channel 可以在一个线程里处理多个Channel I/O 2 Channel和Buffer2.1 Buffer应用程序对Channel的读写必须通过Buffer。Buffer实质上是一个数组，通常是字节数组，JAVA中的八种基本类型都有各自对应的Buffer。 Buffer包含三个指针： capacity：最大容量 limit：限制位置 position：要操作的位置 Buffer既可以读也可以写，但读和写之间必须进行模式切换，常用API： flip()： 翻转模式：写模式-&gt;读模式 把position还原回初始位置，limit指针指向刚才position指向的位置。position和limit之间即为要读的数据。 clear()： 翻转模式：写模式-&gt;读模式nposition还原初始位置，limit指向capacity。 compact(): 翻转模式：写模式-&gt;读模式 如果只读取了一部分，剩下的一部分以后再读：把未读取的数据拷贝到最开始的位置，position指向未读数据后面的位置，limit指向capacity 2.2 Channel通道之间进行数据的传输，类似于Stream，可不经过Buffer之间transfer数据 主要有如下几种Channel FileChannel ServerSocketChannel SocketChannel 3 NIO和BIO实现文件的复制声明接口： interface FileCopyRunner{ void copyFile(File source, File target); } 关闭资源方法： private static void close(Closeable... closeable){ for(Closeable c:closeable){ try { c.close(); } catch (IOException e) { e.printStackTrace(); } } } BIO，不使用缓冲流： FileCopyRunner noBufferStreamCopy = new FileCopyRunner() { @Override public void copyFile(File source, File target) { InputStream fin = null; OutputStream fout = null; try { fin = new FileInputStream(source); fout = new FileOutputStream(target); int result; while((result = fin.read())!=-1){ fout.write(result); } } catch (IOException e) { e.printStackTrace(); } finally { close(fin,fout); } } @Override public String toString() { return \"noBufferStreamCopy\"; } }; BIO，使用缓冲流： FileCopyRunner bufferedStreamCopy = new FileCopyRunner() { @Override public void copyFile(File source, File target) { InputStream fin = null; OutputStream fout = null; try { fin = new BufferedInputStream(new FileInputStream(source)); fout = new BufferedOutputStream(new FileOutputStream(target)); byte[] buffer = new byte[1024]; int result; while((result = fin.read(buffer))!=-1){ fout.write(buffer,0,result); } } catch (IOException e) { e.printStackTrace(); } finally { close(fin,fout); } } @Override public String toString() { return \"bufferedStreamCopy\"; } }; NIO，经过Buffer： FileCopyRunner nioBufferCopy = new FileCopyRunner() { @Override public void copyFile(File source, File target) { FileChannel fin = null; FileChannel fout = null; try { fin = new FileInputStream(source).getChannel(); fout = new FileOutputStream(target).getChannel(); ByteBuffer buffer = ByteBuffer.allocate(1024); while (fin.read(buffer)!=-1){ buffer.flip(); while (buffer.hasRemaining()){ fout.write(buffer); } buffer.clear(); } } catch (IOException e) { e.printStackTrace(); } finally { close(fin,fout); } } @Override public String toString() { return \"nioBufferCopy\"; } }; NIO，不经过Buffer： FileCopyRunner nioTransferCopy = new FileCopyRunner() { @Override public void copyFile(File source, File target) { FileChannel fin = null; FileChannel fout = null; try { fin = new FileInputStream(source).getChannel(); fout = new FileOutputStream(target).getChannel(); long transferred = 0L; long size = fin.size(); while (transferred!=size) { transferred += fin.transferTo(0,size,fout); } } catch (IOException e) { e.printStackTrace(); } finally { close(fin,fout); } } @Override public String toString() { return \"nioTransferCopy\"; } }; 可以编写函数进行性能测试： private static final int ROUNDS = 5; private static void benchmark(FileCopyRunner test,File source,File target){ long elapsed = 0L; for(int i = 0;i&lt;ROUNDS;i++){ long startTime = System.currentTimeMillis(); test.copyFile(source,target); elapsed += System.currentTimeMillis() - startTime; target.delete(); } System.out.println(test+\":\"+elapsed/ROUNDS); }","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"IO","slug":"IO","permalink":"https://www.codetool.top/tags/IO/"},{"name":"NIO","slug":"NIO","permalink":"https://www.codetool.top/tags/NIO/"}]},{"title":"leetcode122-买卖股票的最佳时机II","slug":"leetcode122-买卖股票的最佳时机II","date":"2020-02-06T18:49:26.000Z","updated":"2020-02-08T17:33:22.686Z","comments":true,"path":"article/leetcode122-买卖股票的最佳时机II/","link":"","permalink":"https://www.codetool.top/article/leetcode122-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BAII/","excerpt":"","text":"1 原题给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。 设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。 注意： 你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。 示例1: 输入： [7,1,5,3,6,4]输出： 7解释： 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。 随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。 示例2: 输入： [1,2,3,4,5]输出： 4解释： 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。 注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。 因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。 示例3: 输入： [7,6,4,3,1]输出： 0解释： 在这种情况下, 没有交易完成, 所以最大利润为 0。 2 解法2.1 思想 记录谷和峰值 贪心算法 2.2 代码记录谷和峰值： class Solution { public int maxProfit(int[] prices) { if(prices.length == 0) return 0; int sum = 0; int min,max; min = max = prices[0]; for(int i = 0;i&lt;prices.length;i++){ if(prices[i]&lt;min) min = prices[i]; if(prices[i]>=max) { max = prices[i]; if(i+1==prices.length || prices[i+1]&lt;max) { sum+=(max-min); if(i+1!=prices.length) min = max = prices[i+1]; } } } return sum; } } 贪心算法： 对于任意两天之间，只要涨了则这个钱一定能赚到。 class Solution { public int maxProfit(int[] prices) { int maxprofit = 0; for (int i = 1; i &lt; prices.length; i++) { if (prices[i] > prices[i - 1]) maxprofit += prices[i] - prices[i - 1]; } return maxprofit; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"贪心法","slug":"贪心法","permalink":"https://www.codetool.top/tags/%E8%B4%AA%E5%BF%83%E6%B3%95/"}]},{"title":"JUC包下的线程协作计数CountDownLatch及CyclicBarrier","slug":"JUC包下的线程协作计数CountDownLatch及CyclicBarrier","date":"2020-02-06T14:53:26.000Z","updated":"2020-02-06T14:55:07.254Z","comments":true,"path":"article/JUC包下的线程协作计数CountDownLatch及CyclicBarrier/","link":"","permalink":"https://www.codetool.top/article/JUC%E5%8C%85%E4%B8%8B%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%8D%8F%E4%BD%9C%E8%AE%A1%E6%95%B0CountDownLatch%E5%8F%8ACyclicBarrier/","excerpt":"","text":"1 CountDownLatch1.1 概述用来进行线程同步协作，等待所有线程完成倒计时。 其中构造参数用来初始化等待计数值，await() 用来等待计数归零，countDown() 用来让计数减一 CountDownLatch不能重用，只能减不能加 public static void main(String[] args) throws InterruptedException { CountDownLatch latch = new CountDownLatch(3); new Thread(() -> { log.debug(\"begin...\"); sleep(1); latch.countDown(); log.debug(\"end...{}\", latch.getCount()); }).start(); new Thread(() -> { log.debug(\"begin...\"); sleep(2); latch.countDown(); log.debug(\"end...{}\", latch.getCount()); }).start(); new Thread(() -> { log.debug(\"begin...\"); sleep(1.5); latch.countDown(); log.debug(\"end...{}\", latch.getCount()); }).start(); log.debug(\"waiting...\"); latch.await(); log.debug(\"wait end...\"); } 输出 18:44:00.778 c.TestCountDownLatch [main] - waiting... 18:44:00.778 c.TestCountDownLatch [Thread-2] - begin... 18:44:00.778 c.TestCountDownLatch [Thread-0] - begin... 18:44:00.778 c.TestCountDownLatch [Thread-1] - begin... 18:44:01.782 c.TestCountDownLatch [Thread-0] - end...2 18:44:02.283 c.TestCountDownLatch [Thread-2] - end...1 18:44:02.782 c.TestCountDownLatch [Thread-1] - end...0 18:44:02.782 c.TestCountDownLatch [main] - wait end... 可以配合线程池使用，改进如下 public static void main(String[] args) throws InterruptedException { CountDownLatch latch = new CountDownLatch(3); ExecutorService service = Executors.newFixedThreadPool(4); service.submit(() -> { log.debug(\"begin...\"); sleep(1); latch.countDown(); log.debug(\"end...{}\", latch.getCount()); }); service.submit(() -> { log.debug(\"begin...\"); sleep(1.5); latch.countDown(); log.debug(\"end...{}\", latch.getCount()); }); service.submit(() -> { log.debug(\"begin...\"); sleep(2); latch.countDown(); log.debug(\"end...{}\", latch.getCount()); }); service.submit(()->{ try { log.debug(\"waiting...\"); latch.await(); log.debug(\"wait end...\"); } catch (InterruptedException e) { e.printStackTrace(); } }); } 1.2 应用等待多线程准备完毕 AtomicInteger num = new AtomicInteger(0); ExecutorService service = Executors.newFixedThreadPool(10, (r) -> { return new Thread(r, \"t\" + num.getAndIncrement()); }); CountDownLatch latch = new CountDownLatch(10); String[] all = new String[10]; Random r = new Random(); for (int j = 0; j &lt; 10; j++) { int x = j; service.submit(() -> { for (int i = 0; i &lt;= 100; i++) { try { Thread.sleep(r.nextInt(100)); } catch (InterruptedException e) { } all[x] = Thread.currentThread().getName() + \"(\" + (i + \"%\") + \")\"; System.out.print(\"\\r\" + Arrays.toString(all)); } latch.countDown(); }); } latch.await(); System.out.println(\"\\n游戏开始...\"); service.shutdown(); 2 CyclicBarrier循环栅栏，用来进行线程协作，等待线程满足某个计数。构造时设置『计数个数』，每个线程执行到某个需要“同步”的时刻调用 await() 方法进行等待，当等待的线程数满足『计数个数』时，继续执行 构造方法： public CyclicBarrier(int parties) public CyclicBarrier(int parties, Runnable barrierAction) parties是参与线程的个数，每次调用await等待的线程数加一，直到达到parties所有线程继续运行。Runnable 参数则是可以选择计数值达到parties要做的任务。 在计数值达到parties之后，等待的线程数清零，可以重用。 CyclicBarrier cb = new CyclicBarrier(2); // 个数为2时才会继续执行 new Thread(()->{ System.out.println(\"线程1开始..\"+new Date()); try { cb.await(); // 当个数不足时，等待 } catch (InterruptedException | BrokenBarrierException e) { e.printStackTrace(); } System.out.println(\"线程1继续向下运行...\"+new Date()); }).start(); new Thread(()->{ System.out.println(\"线程2开始..\"+new Date()); try { Thread.sleep(2000); } catch (InterruptedException e) { } try { cb.await(); // 2 秒后，线程个数够2，继续运行 } catch (InterruptedException | BrokenBarrierException e) { e.printStackTrace(); } System.out.println(\"线程2继续向下运行...\"+new Date()); }).start();","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"多线程","slug":"多线程","permalink":"https://www.codetool.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}]},{"title":"JUC包下的信号量Semaphore","slug":"JUC包下的信号量Semaphore","date":"2020-02-06T12:31:42.000Z","updated":"2020-02-06T12:34:23.008Z","comments":true,"path":"article/JUC包下的信号量Semaphore/","link":"","permalink":"https://www.codetool.top/article/JUC%E5%8C%85%E4%B8%8B%E7%9A%84%E4%BF%A1%E5%8F%B7%E9%87%8FSemaphore/","excerpt":"","text":"1 概述信号量，用来限制能同时访问共享资源的线程上限。 public static void main(String[] args) { // 1. 创建 semaphore 对象 Semaphore semaphore = new Semaphore(3); // 2. 10个线程同时运行 for (int i = 0; i &lt; 10; i++) { new Thread(() -> { // 3. 获取许可 try { semaphore.acquire(); } catch (InterruptedException e) { e.printStackTrace(); } try { log.debug(\"running...\"); sleep(1); log.debug(\"end...\"); } finally { // 4. 释放许可 semaphore.release(); } }).start(); } } 输出： 07:35:15.485 c.TestSemaphore [Thread-2] - running... 07:35:15.485 c.TestSemaphore [Thread-1] - running... 07:35:15.485 c.TestSemaphore [Thread-0] - running... 07:35:16.490 c.TestSemaphore [Thread-2] - end... 07:35:16.490 c.TestSemaphore [Thread-0] - end... 07:35:16.490 c.TestSemaphore [Thread-1] - end... 07:35:16.490 c.TestSemaphore [Thread-3] - running... 07:35:16.490 c.TestSemaphore [Thread-5] - running... 07:35:16.490 c.TestSemaphore [Thread-4] - running... 07:35:17.490 c.TestSemaphore [Thread-5] - end... 07:35:17.490 c.TestSemaphore [Thread-4] - end... 07:35:17.490 c.TestSemaphore [Thread-3] - end... 07:35:17.490 c.TestSemaphore [Thread-6] - running... 07:35:17.490 c.TestSemaphore [Thread-7] - running... 07:35:17.490 c.TestSemaphore [Thread-9] - running... 07:35:18.491 c.TestSemaphore [Thread-6] - end... 07:35:18.491 c.TestSemaphore [Thread-7] - end... 07:35:18.491 c.TestSemaphore [Thread-9] - end... 07:35:18.491 c.TestSemaphore [Thread-8] - running... 07:35:19.492 c.TestSemaphore [Thread-8] - end... 2 应用 使用 Semaphore 限流，在访问高峰期时，让请求线程阻塞，高峰期过去再释放许可，当然它只适合限制单机线程数量，并且仅是限制线程数，而不是限制资源数（例如连接数，请对比 Tomcat LimitLatch 的实现） 用 Semaphore 实现简单连接池，线程数和数据库连接数是相等的 class Pool { // 1. 连接池大小 private final int poolSize; // 2. 连接对象数组 private Connection[] connections; // 3. 连接状态数组 0 表示空闲， 1 表示繁忙 private AtomicIntegerArray states; private Semaphore semaphore; // 4. 构造方法初始化 public Pool(int poolSize) { this.poolSize = poolSize; // 让许可数与资源数一致 this.semaphore = new Semaphore(poolSize); this.connections = new Connection[poolSize]; this.states = new AtomicIntegerArray(new int[poolSize]); for (int i = 0; i &lt; poolSize; i++) { connections[i] = new MockConnection(\"连接\" + (i+1)); } } // 5. 借连接 public Connection borrow() {// t1, t2, t3 // 获取许可 try { semaphore.acquire(); // 没有许可的线程，在此等待 } catch (InterruptedException e) { e.printStackTrace(); } for (int i = 0; i &lt; poolSize; i++) { // 获取空闲连接 if(states.get(i) == 0) { if (states.compareAndSet(i, 0, 1)) { log.debug(\"borrow {}\", connections[i]); return connections[i]; } } } // 不会执行到这里 return null; } // 6. 归还连接 public void free(Connection conn) { for (int i = 0; i &lt; poolSize; i++) { if (connections[i] == conn) { states.set(i, 0); log.debug(\"free {}\", conn); semaphore.release(); break; } } } } 3 原理AQS使用共享模式，state代表资源数，state大于0才能获得锁，否则进入等待队列。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"多线程","slug":"多线程","permalink":"https://www.codetool.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"},{"name":"AQS","slug":"AQS","permalink":"https://www.codetool.top/tags/AQS/"}]},{"title":"基于BIO模型实现多人聊天室","slug":"基于BIO模型实现多人聊天室","date":"2020-02-06T06:20:55.000Z","updated":"2020-02-20T14:51:37.949Z","comments":true,"path":"article/基于BIO模型实现多人聊天室/","link":"","permalink":"https://www.codetool.top/article/%E5%9F%BA%E4%BA%8EBIO%E6%A8%A1%E5%9E%8B%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%BA%BA%E8%81%8A%E5%A4%A9%E5%AE%A4/","excerpt":"","text":"1 第一版服务端实现： public class ChatServer { private int DEFAULT_PORT = 8888; private final String QUIT = \"quit\"; private ServerSocket serverSocket; private Map&lt;Integer, Writer> connectedClients; public ChatServer() { connectedClients = new HashMap&lt;>(); } public synchronized void addClient(Socket socket) throws IOException { if(socket==null) return; int port = socket.getPort(); BufferedWriter writer = new BufferedWriter( new OutputStreamWriter(socket.getOutputStream()) ); connectedClients.put(port,writer); System.out.println(\"客户端[\"+port+\"]已连接到服务器\"); } public synchronized void removeClient(Socket socket) throws IOException { if(socket==null) return; int port = socket.getPort(); if(connectedClients.containsKey(port)){ connectedClients.get(port).close(); } connectedClients.remove(port); System.out.println(\"客户端[\"+port+\"]已断开连接\"); } public synchronized void forwardMessage(Socket socket,String fwdMsg){ connectedClients.forEach((id,writer)->{ if(!id.equals(socket.getPort())){ try { writer.write(fwdMsg); writer.flush(); } catch (IOException e) { e.printStackTrace(); } } }); } public synchronized void close(){ if(serverSocket!=null){ try { serverSocket.close(); System.out.println(\"关闭ServerSocket\"); } catch (IOException e) { e.printStackTrace(); } } } public boolean readyToQuit(String msg){ return msg.equals(QUIT); } public void start(){ try { // 绑定监听端口 serverSocket = new ServerSocket(DEFAULT_PORT); System.out.println(\"启动服务器，监听端口：\"+DEFAULT_PORT+\"...\"); while(true){ // 等待客户端连接 Socket socket = serverSocket.accept(); // 创建ChatHandler线程 new Thread(new ChatHandler(this,socket)).start(); } } catch (IOException e) { e.printStackTrace(); } finally { close(); } } public static void main(String[] args) { ChatServer server = new ChatServer(); server.start(); } } 服务端分配线程服务用户： public class ChatHandler implements Runnable{ private ChatServer server; private Socket socket; public ChatHandler(ChatServer server,Socket socket){ this.server = server; this.socket = socket; } @Override public void run() { try { // 存储新上线用户 server.addClient(socket); // 读取用户发送的消息 BufferedReader reader = new BufferedReader( new InputStreamReader(socket.getInputStream()) ); String msg = null; while ((msg = reader.readLine())!=null){ String fwdMsg = \"客户端[\"+socket.getPort()+\"]:\"+msg; System.out.println(fwdMsg); if(server.readyToQuit(msg)) break; // 将消息转发给聊天室里在线的其他用户 server.forwardMessage(socket,fwdMsg+\"\\n\"); } } catch (IOException e) { e.printStackTrace(); }finally { try { server.removeClient(socket); } catch (IOException e) { e.printStackTrace(); } } } } 用户端： public class ChatClient { private final String DEFAULT_SERVER_HOST = \"127.0.0.1\"; private final int DEFAULT_SERVER_PORT = 8888; private final String QUIT = \"quit\"; private Socket socket; private BufferedReader reader; private BufferedWriter writer; // 发送消息给服务器 public void send(String msg) throws IOException { if(!socket.isOutputShutdown()){ writer.write(msg+\"\\n\"); writer.flush(); } } // 从服务器接收消息 public String recieve() throws IOException { String msg = null; if(!socket.isInputShutdown()){ msg = reader.readLine(); } return msg; } // 检查用户是否准备退出 public boolean readyToQuit(String msg){ return QUIT.equals(msg); } public void close(){ if(writer!=null){ try { System.out.println(\"关闭socket\"); writer.close(); } catch (IOException e) { e.printStackTrace(); } } } public void start(){ try { // 创建socket socket = new Socket(DEFAULT_SERVER_HOST, DEFAULT_SERVER_PORT); // 创建IO流 reader = new BufferedReader( new InputStreamReader(socket.getInputStream()) ); writer = new BufferedWriter( new OutputStreamWriter(socket.getOutputStream()) ); // 处理用户的输入 new Thread(new UserInputHandler(this)).start(); // 读取服务器转发的消息 String msg = null; while((msg = recieve())!=null){ System.out.println(msg); } } catch (IOException e) { e.printStackTrace(); }finally { close(); } } public static void main(String[] args) { ChatClient client = new ChatClient(); client.start(); } } 用户线程处理IO输入： public class UserInputHandler implements Runnable{ private ChatClient chatClient; public UserInputHandler(ChatClient chatClient){ this.chatClient = chatClient; } @Override public void run() { try { // 等待用户输入消息 BufferedReader consoleReader = new BufferedReader( new InputStreamReader(System.in) ); while (true){ String input = consoleReader.readLine(); // 向服务器发送消息 chatClient.send(input); // 检查用户是否准备退出 if(chatClient.readyToQuit(input)){ break; } } } catch (IOException e) { e.printStackTrace(); } } } 2 第二版：使用线程池改进服务端，创建线程使用线程池： public class ChatServer { private int DEFAULT_PORT = 8888; private final String QUIT = \"quit\"; private ExecutorService executorService; private ServerSocket serverSocket; private Map&lt;Integer, Writer> connectedClients; public ChatServer() { executorService = Executors.newFixedThreadPool(10); connectedClients = new HashMap&lt;>(); } public synchronized void addClient(Socket socket) throws IOException { if(socket==null) return; int port = socket.getPort(); BufferedWriter writer = new BufferedWriter( new OutputStreamWriter(socket.getOutputStream()) ); connectedClients.put(port,writer); System.out.println(\"客户端[\"+port+\"]已连接到服务器\"); } public synchronized void removeClient(Socket socket) throws IOException { if(socket==null) return; int port = socket.getPort(); if(connectedClients.containsKey(port)){ connectedClients.get(port).close(); } connectedClients.remove(port); System.out.println(\"客户端[\"+port+\"]已断开连接\"); } public synchronized void forwardMessage(Socket socket,String fwdMsg){ connectedClients.forEach((id,writer)->{ if(!id.equals(socket.getPort())){ try { writer.write(fwdMsg); writer.flush(); } catch (IOException e) { e.printStackTrace(); } } }); } public synchronized void close(){ if(serverSocket!=null){ try { serverSocket.close(); System.out.println(\"关闭ServerSocket\"); } catch (IOException e) { e.printStackTrace(); } } } public boolean readyToQuit(String msg){ return msg.equals(QUIT); } public void start(){ try { // 绑定监听端口 serverSocket = new ServerSocket(DEFAULT_PORT); System.out.println(\"启动服务器，监听端口：\"+DEFAULT_PORT+\"...\"); while(true){ // 等待客户端连接 Socket socket = serverSocket.accept(); // 创建ChatHandler线程 executorService.execute(new ChatHandler(this,socket)); } } catch (IOException e) { e.printStackTrace(); } finally { close(); } } public static void main(String[] args) { ChatServer server = new ChatServer(); server.start(); } }","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"IO","slug":"IO","permalink":"https://www.codetool.top/tags/IO/"},{"name":"网络编程","slug":"网络编程","permalink":"https://www.codetool.top/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"}]},{"title":"leetcode263-丑数","slug":"leetcode263-丑数","date":"2020-02-05T18:51:18.000Z","updated":"2020-02-06T05:38:44.047Z","comments":true,"path":"article/leetcode263-丑数/","link":"","permalink":"https://www.codetool.top/article/leetcode263-%E4%B8%91%E6%95%B0/","excerpt":"","text":"1 原题编写一个程序判断给定的数是否为丑数。 丑数就是只包含质因数 2, 3, 5 的正整数。 示例1: 输入： 6输出： true解释： 6 = 2 × 3 示例2: 输入： 8输出： true解释： 8 = 2 × 2 × 2 示例3: 输入： 14输出： false解释： 14 不是丑数，因为它包含了另外一个质因数 7。说明： 1 是丑数。 输入不会超过 32 位有符号整数的范围: [−231, 231 − 1]。 2 解法2.1 思想在该数没被除为1之前重复除以2、3或5。 2.2 代码class Solution { public boolean isUgly(int num) { if(num&lt;1) return false; while(num!=1){ if(num%2==0){ num /= 2; continue; } if(num%3==0){ num /= 3; continue; } if(num%5==0){ num /= 5; continue; } return false; } return true; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"JUC包下的读写锁ReentrantReadWriteLock以及StampedLock","slug":"JUC包下的读写锁ReentrantReadWriteLock以及StampedLock","date":"2020-02-05T14:42:15.000Z","updated":"2020-02-13T05:24:44.818Z","comments":true,"path":"article/JUC包下的读写锁ReentrantReadWriteLock以及StampedLock/","link":"","permalink":"https://www.codetool.top/article/JUC%E5%8C%85%E4%B8%8B%E7%9A%84%E8%AF%BB%E5%86%99%E9%94%81ReentrantReadWriteLock%E4%BB%A5%E5%8F%8AStampedLock/","excerpt":"","text":"1 ReentrantReadWriteLock1.1 概述当读操作远远高于写操作时，这时候使用 读写锁 让 读-读 可以并发，提高性能。 类似于数据库中的 select ... from ... lock in share mode 提供一个 数据容器类 内部分别使用读锁保护数据的 read() 方法，写锁保护数据的 write() 方法 class DataContainer { private Object data; private ReentrantReadWriteLock rw = new ReentrantReadWriteLock(); private ReentrantReadWriteLock.ReadLock r = rw.readLock(); private ReentrantReadWriteLock.WriteLock w = rw.writeLock(); public Object read() { log.debug(\"获取读锁...\"); r.lock(); try { log.debug(\"读取\"); sleep(1); return data; } finally { log.debug(\"释放读锁...\"); r.unlock(); } } public void write() { log.debug(\"获取写锁...\"); w.lock(); try { log.debug(\"写入\"); sleep(1); } finally { log.debug(\"释放写锁...\"); w.unlock(); } } } 注意事项 读锁不支持条件变量 重入时升级不支持：即持有读锁的情况下去获取写锁，会导致获取写锁永久等待（必须先释放读锁） r.lock();//获取读锁 try { // 获取写锁，不支持 w.lock(); try { // ... } finally{ w.unlock(); } } finally{ r.unlock(); } 重入时降级支持：即持有写锁的情况下去获取读锁 1.2 读写锁应用之缓存一致性在多线程环境下，数据库缓存可能会出现不一致： 先清空缓存： 先更新数据库： class GenericCachedDao&lt;T> { // HashMap 作为缓存非线程安全, 需要保护 HashMap&lt;SqlPair, T> map = new HashMap&lt;>(); ReentrantReadWriteLock lock = new ReentrantReadWriteLock(); GenericDao genericDao = new GenericDao(); public int update(String sql, Object... params) { SqlPair key = new SqlPair(sql, params); // 加写锁, 防止其它线程对缓存读取和更改 lock.writeLock().lock(); try { int rows = genericDao.update(sql, params); map.clear(); return rows; } finally { lock.writeLock().unlock(); } } public T queryOne(Class&lt;T> beanClass, String sql, Object... params) { SqlPair key = new SqlPair(sql, params); // 加读锁, 防止其它线程对缓存更改 lock.readLock().lock(); try { T value = map.get(key); if (value != null) { return value; } } finally { lock.readLock().unlock(); } // 加写锁, 防止其它线程对缓存读取和更改 lock.writeLock().lock(); try { // get 方法上面部分是可能多个线程进来的, 可能已经向缓存填充了数据 // 为防止重复查询数据库, 再次验证 T value = map.get(key); if (value == null) { // 如果没有, 查询数据库 value = genericDao.queryOne(beanClass, sql, params); map.put(key, value); } return value; } finally { lock.writeLock().unlock(); } } // 作为 key 保证其是不可变的 class SqlPair { private String sql; private Object[] params; public SqlPair(String sql, Object[] params) { this.sql = sql; this.params = params; } @Override public boolean equals(Object o) { if (this == o) { return true; } if (o == null || getClass() != o.getClass()) { return false; } SqlPair sqlPair = (SqlPair) o; return sql.equals(sqlPair.sql) &amp;&amp; Arrays.equals(params, sqlPair.params); } @Override public int hashCode() { int result = Objects.hash(sql); result = 31 * result + Arrays.hashCode(params); return result; } } } 注意： 以上实现体现的是读写锁的应用，保证缓存和数据库的一致性，但有下面的问题没有考虑 适合读多写少，如果写操作比较频繁，以上实现性能低 没有考虑缓存容量 没有考虑缓存过期 只适合单机 并发性还是低，目前只会用一把锁 更新方法太过简单粗暴，清空了所有 key（考虑按类型分区或重新设计 key） 可以使用乐观锁实现：用 CAS 去更新 1.3 读写锁原理读写锁将AQS的state分为高16位和低16位。读锁用高16位，表示持有读锁的线程数，写锁用低16位，表示写锁的重入次数。 参考：https://www.cnblogs.com/xiaoxi/p/9140541.html 2 StampedLock该类自 JDK 8 加入，是为了进一步优化读性能，它的特点是在使用读锁、写锁时都必须配合【戳】使用 加解读锁 long stamp = lock.readLock(); lock.unlockRead(stamp); 加解写锁 long stamp = lock.writeLock(); lock.unlockWrite(stamp); 乐观读，StampedLock 支持 tryOptimisticRead() 方法（乐观读），读取完毕后需要做一次 戳校验 如果校验通过，表示这期间确实没有写操作，数据可以安全使用，如果校验没通过，需要重新获取读锁，保证数据安全。 提供一个 数据容器类 内部分别使用读锁保护数据的 read() 方法，写锁保护数据的 write() 方法 class DataContainerStamped { private int data; private final StampedLock lock = new StampedLock(); public DataContainerStamped(int data) { this.data = data; } public int read(int readTime) { long stamp = lock.tryOptimisticRead(); log.debug(\"optimistic read locking...{}\", stamp); sleep(readTime); if (lock.validate(stamp)) { log.debug(\"read finish...{}, data:{}\", stamp, data); return data; } // 锁升级 - 读锁 log.debug(\"updating to read lock... {}\", stamp); try { stamp = lock.readLock(); log.debug(\"read lock {}\", stamp); sleep(readTime); log.debug(\"read finish...{}, data:{}\", stamp, data); return data; } finally { log.debug(\"read unlock {}\", stamp); lock.unlockRead(stamp); } } public void write(int newData) { long stamp = lock.writeLock(); log.debug(\"write lock {}\", stamp); try { sleep(2); this.data = newData; } finally { log.debug(\"write unlock {}\", stamp); lock.unlockWrite(stamp); } } } 测试 读-读 可以优化：（只有线程进行读操作，戳不会变化，不会加锁） public static void main(String[] args) { DataContainerStamped dataContainer = new DataContainerStamped(1); new Thread(() -> { dataContainer.read(1); }, \"t1\").start(); sleep(0.5); new Thread(() -> { dataContainer.read(0); }, \"t2\").start(); } 输出结果： 15:58:50.217 c.DataContainerStamped [t1] - optimistic read locking...256 15:58:50.717 c.DataContainerStamped [t2] - optimistic read locking...256 15:58:50.717 c.DataContainerStamped [t2] - read finish...256, data:1 15:58:51.220 c.DataContainerStamped [t1] - read finish...256, data:1 测试 读-写 时优化读补加读锁： public static void main(String[] args) { DataContainerStamped dataContainer = new DataContainerStamped(1); new Thread(() -> { dataContainer.read(1); }, \"t1\").start(); sleep(0.5); new Thread(() -> { dataContainer.write(100); }, \"t2\").start(); } 输出结果： 15:57:00.219 c.DataContainerStamped [t1] - optimistic read locking...256 15:57:00.717 c.DataContainerStamped [t2] - write lock 384 15:57:01.225 c.DataContainerStamped [t1] - updating to read lock... 256 15:57:02.719 c.DataContainerStamped [t2] - write unlock 384 15:57:02.719 c.DataContainerStamped [t1] - read lock 513 15:57:03.719 c.DataContainerStamped [t1] - read finish...513, data:1000 15:57:03.719 c.DataContainerStamped [t1] - read unlock 513 注意 StampedLock 不支持条件变量 StampedLock 不支持可重入","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"多线程","slug":"多线程","permalink":"https://www.codetool.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"},{"name":"AQS","slug":"AQS","permalink":"https://www.codetool.top/tags/AQS/"}]},{"title":"leetcode169-多数元素","slug":"leetcode169-多数元素","date":"2020-02-04T17:58:20.000Z","updated":"2020-02-20T14:55:21.051Z","comments":true,"path":"article/leetcode169-多数元素/","link":"","permalink":"https://www.codetool.top/article/leetcode169-%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0/","excerpt":"","text":"1 原题给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。 你可以假设数组是非空的，并且给定的数组总是存在多数元素。 示例1: 输入： [3,2,3]输出： 3 示例2: 输入： [2,2,1,1,1,2,2]输出： 2 2 解法2.1 思想哈希表记录每个元素的出现次数 2.2 代码class Solution { public int majorityElement(int[] nums) { int length = nums.length; Map&lt;Integer,Integer> map = new HashMap&lt;>(); for(int i:nums){ int newer = map.getOrDefault(i,0)+1; if(newer>length/2) return i; map.put(i,newer); } return 0; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"Java网络套接字Socket编程","slug":"Java网络套接字Socket编程","date":"2020-02-04T17:27:19.000Z","updated":"2020-02-20T14:55:21.051Z","comments":true,"path":"article/Java网络套接字Socket编程/","link":"","permalink":"https://www.codetool.top/article/Java%E7%BD%91%E7%BB%9C%E5%A5%97%E6%8E%A5%E5%AD%97Socket%E7%BC%96%E7%A8%8B/","excerpt":"","text":"1 Socket概述Socket，译作网络套接字，是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。网络套接字与一个应用进程（ip和端口号）绑定。 2 Socket与ServerSocketSocket与ServerSocket是Java中Socket编程的常用类，一般分别指客户端和服务端的socket。 工作流程： 服务端bind():绑定端口 服务端accept():等待客户端建立连接 客户端connect():连接到服务端 双方进行IO操作 服务端和客户端close():关闭socket连接 2.1 代码示例实现一个客户端给服务端发送数据，服务端按原数据返回的程序。 2.1.1 第一版服务端： public class Server { public static void main(String[] args) { final int DEFAULT_PORT = 8888; ServerSocket serverSocket = null; // 绑定监听端口 try { serverSocket = new ServerSocket(DEFAULT_PORT); System.out.println(\"启动服务器，监听端口\"+DEFAULT_PORT); while (true){ Socket socket = serverSocket.accept();//等待客户端连接，阻塞 System.out.println(\"客户端[\"+socket.getPort()+\"]已连接\"); BufferedReader reader = new BufferedReader( new InputStreamReader(socket.getInputStream()) ); BufferedWriter writer = new BufferedWriter( new OutputStreamWriter(socket.getOutputStream()) ); // 读取客户端发送的消息 String msg = reader.readLine(); if(msg!=null){ System.out.println(\"客户端[\"+socket.getPort()+\"]: \" + msg); //回复客户发送的消息 writer.write(\"服务器: \"+msg+\"\\n\"); writer.flush(); } } } catch (IOException e) { e.printStackTrace(); } finally { try { serverSocket.close(); } catch (IOException e) { e.printStackTrace(); } } } } 客户端：（运行于同一台主机上） public class Client { public static void main(String[] args) { final String DEFAULT_SERVER_HOST=\"127.0.0.1\"; final int DEFAULT_PORT = 8888; Socket socket = null; BufferedWriter writer = null; try { //创建socket socket = new Socket(DEFAULT_SERVER_HOST,DEFAULT_PORT); //创建IO流 BufferedReader reader = new BufferedReader( new InputStreamReader(socket.getInputStream()) ); writer = new BufferedWriter( new OutputStreamWriter(socket.getOutputStream()) ); // 等待用户输入信息 BufferedReader consoleReader = new BufferedReader( new InputStreamReader(System.in) ); String input = consoleReader.readLine(); //发送消息给服务器 writer.write(input+\"\\n\"); writer.flush(); //读取服务器返回的消息 String msg = reader.readLine(); System.out.println(msg); } catch (IOException e) { e.printStackTrace(); }finally { if(writer!=null){ try { writer.close(); } catch (IOException e) { e.printStackTrace(); } } } } } 2.1.2 第二版一个客户端可以反复发送消息，直到输入quit退出 客户端： public class Client { public static void main(String[] args) { final String QUIT = \"quit\"; final String DEFAULT_SERVER_HOST=\"127.0.0.1\"; final int DEFAULT_PORT = 8888; Socket socket = null; BufferedWriter writer = null; try { //创建socket socket = new Socket(DEFAULT_SERVER_HOST,DEFAULT_PORT); //创建IO流 BufferedReader reader = new BufferedReader( new InputStreamReader(socket.getInputStream()) ); writer = new BufferedWriter( new OutputStreamWriter(socket.getOutputStream()) ); // 等待用户输入信息 BufferedReader consoleReader = new BufferedReader( new InputStreamReader(System.in) ); while(true){ String input = consoleReader.readLine(); if(input.equals(QUIT)) break; //发送消息给服务器 writer.write(input+\"\\n\"); writer.flush(); //读取服务器返回的消息 String msg = reader.readLine(); System.out.println(msg); } } catch (IOException e) { e.printStackTrace(); }finally { if(writer!=null){ try { writer.close(); } catch (IOException e) { e.printStackTrace(); } } } } } 服务端： public class Server { public static void main(String[] args) { final int DEFAULT_PORT = 8888; ServerSocket serverSocket = null; // 绑定监听端口 try { serverSocket = new ServerSocket(DEFAULT_PORT); System.out.println(\"启动服务器，监听端口\"+DEFAULT_PORT); while (true){ Socket socket = serverSocket.accept();//等待客户端连接，阻塞 System.out.println(\"客户端[\"+socket.getPort()+\"]已连接\"); BufferedReader reader = new BufferedReader( new InputStreamReader(socket.getInputStream()) ); BufferedWriter writer = new BufferedWriter( new OutputStreamWriter(socket.getOutputStream()) ); String msg = null; while((msg = reader.readLine())!=null){ // 读取客户端发送的消息 System.out.println(\"客户端[\"+socket.getPort()+\"]: \" + msg); //回复客户发送的消息 writer.write(\"服务器: \"+msg+\"\\n\"); writer.flush(); } } } catch (IOException e) { e.printStackTrace(); } finally { try { serverSocket.close(); } catch (IOException e) { e.printStackTrace(); } } } }","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"网络编程","slug":"网络编程","permalink":"https://www.codetool.top/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"}]},{"title":"JavaIO-缓冲流与转换流","slug":"JavaIO-缓冲流与转换流","date":"2020-02-04T15:54:20.000Z","updated":"2020-02-07T10:21:06.987Z","comments":true,"path":"article/JavaIO-缓冲流与转换流/","link":"","permalink":"https://www.codetool.top/article/JavaIO-%E7%BC%93%E5%86%B2%E6%B5%81%E4%B8%8E%E8%BD%AC%E6%8D%A2%E6%B5%81/","excerpt":"","text":"1 缓冲流1.1 概述缓冲流,也叫高效流，是对4个基本的FileXxx 流的增强，所以也是4个流，按照数据类型分类： 字节缓冲流：BufferedInputStream，BufferedOutputStream 字符缓冲流：BufferedReader，BufferedWriter 缓冲流的基本原理，是在创建流对象时，会创建一个内置的默认大小的缓冲区数组，通过缓冲区读写，减少系统IO次数，从而提高读写的效率。 （系统IO指的是磁盘和内存间的交互，缓存流会让每次从磁盘读了足够的数据进内存，再将数据写回磁盘，减少了磁盘与内存间的交互次数） 默认缓存区的大小是8192字节。 public BufferedInputStream(InputStream in) ：创建一个 新的缓冲输入流。 public BufferedOutputStream(OutputStream out)： 创建一个新的缓冲输出流。 public BufferedReader(Reader in) ：创建一个 新的缓冲输入流。 public BufferedWriter(Writer out)： 创建一个新的缓冲输出流。 1.2 特有方法 BufferedReader：public String readLine(): 读一行文字。 BufferedWriter：public void newLine(): 写一行行分隔符,由系统属性定义符号。 2 转换流2.1 InputStreamReader类转换流java.io.InputStreamReader，是Reader的子类，是从字节流到字符流的桥梁。它读取字节，并使用指定的字符集将其解码为字符。它的字符集可以由名称指定，也可以接受平台的默认字符集。 2.1.1 构造方法 InputStreamReader(InputStream in): 创建一个使用默认字符集的字符流。 InputStreamReader(InputStream in, String charsetName): 创建一个指定字符集的字符流。 2.2 OutputStreamWriter类转换流java.io.OutputStreamWriter ，是Writer的子类，是从字符流到字节流的桥梁。使用指定的字符集将字符编码为字节。它的字符集可以由名称指定，也可以接受平台的默认字符集。 2.2.1 构造方法 OutputStreamWriter(OutputStream in): 创建一个使用默认字符集的字符流。 OutputStreamWriter(OutputStream in, String charsetName): 创建一个指定字符集的字符流。 2.3 应用文件转换编码： public class TransDemo { public static void main(String[] args) { // 1.定义文件路径 String srcFile = \"file_gbk.txt\"; String destFile = \"file_utf8.txt\"; // 2.创建流对象 // 2.1 转换输入流,指定GBK编码 InputStreamReader isr = new InputStreamReader(new FileInputStream(srcFile) , \"GBK\"); // 2.2 转换输出流,默认utf8编码 OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream(destFile)); // 3.读写数据 // 3.1 定义数组 char[] cbuf = new char[1024]; // 3.2 定义长度 int len; // 3.3 循环读取 while ((len = isr.read(cbuf))!=-1) { // 循环写出 osw.write(cbuf,0,len); } // 4.释放资源 osw.close(); isr.close(); } }","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"基础知识","slug":"基础知识","permalink":"https://www.codetool.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"name":"IO","slug":"IO","permalink":"https://www.codetool.top/tags/IO/"}]},{"title":"AQS及其应用ReentrantLock源码分析","slug":"AQS及其应用ReentrantLock源码分析","date":"2020-02-04T14:45:27.000Z","updated":"2020-02-06T12:32:34.563Z","comments":true,"path":"article/AQS及其应用ReentrantLock源码分析/","link":"","permalink":"https://www.codetool.top/article/AQS%E5%8F%8A%E5%85%B6%E5%BA%94%E7%94%A8ReentrantLock%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","excerpt":"","text":"1 AQS原理1.1 概述全称是 AbstractQueuedSynchronizer，是阻塞式锁和相关的同步器工具的框架 特点： 用 state 属性来表示资源的状态（分独占模式和共享模式），子类需要定义如何维护这个状态，控制如何获取锁和释放锁 getState - 获取 state 状态 setState - 设置 state 状态 compareAndSetState - cas 机制设置 state 状态 独占模式是只有一个线程能够访问资源，而共享模式可以允许多个线程访问资源 提供了基于 FIFO 的等待队列，类似于 Monitor 的 EntryList 条件变量来实现等待、唤醒机制，支持多个条件变量，类似于 Monitor 的 WaitSet 获取锁 // 如果获取锁失败 if (!tryAcquire(arg)) { // 入队, 可以选择阻塞当前线程 park unpark } 释放锁 // 如果释放锁成功 if (tryRelease(arg)) { // 让阻塞线程恢复运行 } 1.2 实现不可重入锁1.2.1 自定义同步器同步器实现AQS final class MySync extends AbstractQueuedSynchronizer { @Override protected boolean tryAcquire(int acquires) { if (acquires == 1){ if (compareAndSetState(0, 1)) { setExclusiveOwnerThread(Thread.currentThread()); return true; } } return false; } @Override protected boolean tryRelease(int acquires) { if(acquires == 1) { if(getState() == 0) { throw new IllegalMonitorStateException(); } setExclusiveOwnerThread(null); setState(0); return true; } return false; } protected Condition newCondition() { return new ConditionObject(); } @Override //是否持有独占锁 protected boolean isHeldExclusively() { return getState() == 1; } } 1.2.2 自定义锁class MyLock implements Lock { static MySync sync = new MySync(); @Override // 尝试，不成功，进入等待队列 public void lock() { sync.acquire(1); } @Override // 尝试，不成功，进入等待队列，可打断 public void lockInterruptibly() throws InterruptedException { sync.acquireInterruptibly(1); } @Override // 尝试一次，不成功返回，不进入队列 public boolean tryLock() { return sync.tryAcquire(1); } @Override // 尝试，不成功，进入等待队列，有时限 public boolean tryLock(long time, TimeUnit unit) throws InterruptedException { return sync.tryAcquireNanos(1, unit.toNanos(time)); } @Override // 释放锁 public void unlock() { sync.release(1); } @Override // 生成条件变量 public Condition newCondition() { return sync.newCondition(); } } 1.3 心得1.3.1 起源早期程序员会自己通过一种同步器去实现另一种相近的同步器，例如用可重入锁去实现信号量，或反之。这显然不够优雅，于是在 JSR166（java 规范提案）中创建了 AQS，提供了这种通用的同步器机制。 1.3.2 目标AQS 要实现的功能目标 阻塞版本获取锁 acquire 和非阻塞的版本尝试获取锁tryAcquire 获取锁超时机制 通过打断取消机制 独占机制及共享机制 条件不满足时的等待机制 1.3.3 设计AQS 的基本思想其实很简单获取锁的逻辑 while(state 状态不允许获取) { if(队列中还没有此线程) { 入队并阻塞 } } 当前线程出队 释放锁的逻辑 if(state 状态允许了) { 恢复阻塞的线程(s) } 要点 原子维护 state 状态 阻塞及恢复线程 维护队列 1.3.3.1 state设计 state 使用 volatile 配合 cas 保证其修改时的原子性 state 使用了 32bit int 来维护同步状态，因为当时使用 long 在很多平台下测试的结果并不理想 1.3.3.2 阻塞恢复设计 早期的控制线程暂停和恢复的 api 有 suspend 和 resume，但它们是不可用的，因为如果先调用的 resume ，那么 suspend 将感知不到 解决方法是使用 park &amp; unpark 来实现线程的暂停和恢复，先 unpark 再 park 也没问题 park &amp; unpark 是针对线程的，而不是针对同步器的，因此控制粒度更为精细 park 线程还可以通过 interrupt 打断 1.3.3.3 队列设计 使用了 FIFO 先入先出队列，并不支持优先级队列 设计时借鉴了 CLH 队列，它是一种单向无锁队列 Node的waitStatus状态： CANCELLED(1)：表示当前结点已取消调度。当timeout或被中断（响应中断的情况下），会触发变更为此状态，进入该状态后的结点将不会再变化。 SIGNAL(-1)：表示后继结点在等待当前结点唤醒。后继结点入队时，会将前继结点的状态更新为SIGNAL。 CONDITION(-2)：表示结点等待在Condition上，当其他线程调用了Condition的signal()方法后，CONDITION状态的结点将从等待队列转移到同步队列中，等待获取同步锁。 PROPAGATE(-3)：共享模式下，前继结点不仅会唤醒其后继结点，同时也可能会唤醒后继的后继结点。 0：新结点入队时的默认状态。 AQS 在一些方面改进了 CLH private Node enq(final Node node) { for (;;) { Node t = tail; // 队列中还没有元素 tail 为 null if (t == null) { // 将 head 从 null -> dummy if (compareAndSetHead(new Node())) tail = head; } else { // 将 node 的 prev 设置为原来的 tail node.prev = t; // 将 tail 从原来的 tail 设置为 node if (compareAndSetTail(t, node)) { // 原来 tail 的 next 设置为 node t.next = node; return t; } } } } 2 ReentrantLock原理 ReentrantLock使用了继承自AQS的内部类Sync，有两个实现：NonefairSync（非公平锁）和FairSync（公平锁） 由于默认构造非公平锁，这里来看非公平锁的原理： 2.1 加锁final void lock() { //没有竞争，独占状态 if (compareAndSetState(0, 1)) setExclusiveOwnerThread(Thread.currentThread()); else acquire(1);//出现竞争，下一步 } public final void acquire(int arg) { // 先再次尝试能不能获得锁（下一步），否则进入addWaitor(Node.EXCLUSIVE)，跳过下一步 if (!tryAcquire(arg) &amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg)) //如果阻塞过程中被打断，不响应打断，在获得锁之后才能再响应打断。 selfInterrupt(); } final boolean nonfairTryAcquire(int acquires) { final Thread current = Thread.currentThread(); int c = getState(); //直接设置独占 if (c == 0) { if (compareAndSetState(0, acquires)) { setExclusiveOwnerThread(current); return true; } } //可以锁重入 else if (current == getExclusiveOwnerThread()) { int nextc = c + acquires; if (nextc &lt; 0) // overflow throw new Error(\"Maximum lock count exceeded\"); setState(nextc); return true; } //不能获得锁，下一步 return false; } //addWaiter将结点附加到链表尾部 //mode代表一个nextWaiter，在条件等待的时候使用 //Node.EXCLUSIVE代表独占模式。 //添加到链表末尾后调用acquireQueued，下一步 private Node addWaiter(Node mode) { Node node = new Node(Thread.currentThread(), mode); // Try the fast path of enq; backup to full enq on failure Node pred = tail; if (pred != null) { node.prev = pred; if (compareAndSetTail(pred, node)) { pred.next = node; return node; } } enq(node); return node; } final boolean acquireQueued(final Node node, int arg) { boolean failed = true; try { boolean interrupted = false; for (;;) { final Node p = node.predecessor(); //如果node是第二个节点再次尝试获取锁 if (p == head &amp;&amp; tryAcquire(arg)) { setHead(node); p.next = null; // help GC failed = false; return interrupted; } //否则尝试阻塞，下一步 if (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt()) interrupted = true; } } finally { if (failed) cancelAcquire(node); } } //检查是否可以park（前一个节点的waitStatus应该标记成-1） //可以的话调用parkAndCheckInterrupt，下一步 private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) { int ws = pred.waitStatus; if (ws == Node.SIGNAL) /* * This node has already set status asking a release * to signal it, so it can safely park. */ return true; if (ws > 0) { /* * Predecessor was cancelled. Skip over predecessors and * indicate retry. */ do { node.prev = pred = pred.prev; } while (pred.waitStatus > 0); pred.next = node; } else { /* * waitStatus must be 0 or PROPAGATE. Indicate that we * need a signal, but don't park yet. Caller will need to * retry to make sure it cannot acquire before parking. */ compareAndSetWaitStatus(pred, ws, Node.SIGNAL); } return false; } 使用LockSupport.park阻塞 private final boolean parkAndCheckInterrupt() { LockSupport.park(this); return Thread.interrupted(); } 2.2 解锁public final boolean release(int arg) { //调用tryRelease释放锁，因为此时是独占式的，很容易就能释放锁。 //如果重入过了需要把计数减为0了才算释放成功。 if (tryRelease(arg)) { Node h = head; //唤醒等待队列里的下一个线程，下一步 if (h != null &amp;&amp; h.waitStatus != 0) unparkSuccessor(h); return true; } return false; } //唤醒后继结点 private void unparkSuccessor(Node node) { int ws = node.waitStatus; if (ws &lt; 0) compareAndSetWaitStatus(node, ws, 0); Node s = node.next; //如果下一个节点被cancel了从后往前找到一个正常的节点替换它 if (s == null || s.waitStatus > 0) { s = null; for (Node t = tail; t != null &amp;&amp; t != node; t = t.prev) if (t.waitStatus &lt;= 0) s = t; } //unpark唤醒 if (s != null) LockSupport.unpark(s.thread); } 2.3 可打断原理核心方法： private void doAcquireInterruptibly(int arg) throws InterruptedException { final Node node = addWaiter(Node.EXCLUSIVE); boolean failed = true; try { for (;;) { final Node p = node.predecessor(); if (p == head &amp;&amp; tryAcquire(arg)) { setHead(node); p.next = null; // help GC failed = false; return; } //如果等待过程中被打断parkAndCheckInterrupt返回false，抛出异常 if (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt()) throw new InterruptedException(); } } finally { if (failed) cancelAcquire(node); } } 2.4 公平锁原理// 与非公平锁主要区别在于 tryAcquire 方法的实现 protected final boolean tryAcquire(int acquires) { final Thread current = Thread.currentThread(); int c = getState(); if (c == 0) { // 先检查 AQS 队列中是否有前驱节点, 没有才去竞争 if (!hasQueuedPredecessors() &amp;&amp; compareAndSetState(0, acquires)) { setExclusiveOwnerThread(current); return true; } } else if (current == getExclusiveOwnerThread()) { int nextc = c + acquires; if (nextc &lt; 0) throw new Error(\"Maximum lock count exceeded\"); setState(nextc); return true; } return false; } 2.5 条件变量实现原理每个条件变量其实就对应着一个等待队列，其实现类是 ConditionObject ConditionObject里面有一个firstWaiter、lastWaiter，然而它是一个单向队列。 2.5.1 await过程public final void await() throws InterruptedException { if (Thread.interrupted()) throw new InterruptedException(); // 将线程添加到等待队列中，下一步 Node node = addConditionWaiter(); // 释放占有的锁，跳过下一步 long savedState = fullyRelease(node); int interruptMode = 0; //是否在阻塞队列中（即还没有获得到锁） while (!isOnSyncQueue(node)) { LockSupport.park(this); if ((interruptMode = checkInterruptWhileWaiting(node)) != 0) break; } // 自旋等待获取到同步状态（即获取到lock） if (acquireQueued(node, savedState) &amp;&amp; interruptMode != THROW_IE) interruptMode = REINTERRUPT; if (node.nextWaiter != null) // clean up if cancelled unlinkCancelledWaiters(); // 处理被中断的情况 if (interruptMode != 0) reportInterruptAfterWait(interruptMode); } private Node addConditionWaiter() { Node t = lastWaiter; // If lastWaiter is cancelled, clean out. if (t != null &amp;&amp; t.waitStatus != Node.CONDITION) { unlinkCancelledWaiters(); t = lastWaiter; } //连接到等待队列 Node node = new Node(Thread.currentThread(), Node.CONDITION); if (t == null) firstWaiter = node; else t.nextWaiter = node; lastWaiter = node; return node; } final long fullyRelease(Node node) { boolean failed = true; try { long savedState = getState(); //重复调用tryRelease直到锁全部被释放，然后唤醒后继结点 if (release(savedState)) { failed = false; return savedState; } else { throw new IllegalMonitorStateException(); } } finally { if (failed) node.waitStatus = Node.CANCELLED; } } 2.5.2 signal过程public final void signal() { //判断当前线程是不是锁的持有者 if (!isHeldExclusively()) throw new IllegalMonitorStateException(); Node first = firstWaiter; //发出信号，下一步 if (first != null) doSignal(first); } private void doSignal(Node first) { do { if ( (firstWaiter = first.nextWaiter) == null) lastWaiter = null; first.nextWaiter = null; } //转移节点到阻塞队列 while (!transferForSignal(first) &amp;&amp; (first = firstWaiter) != null); } final boolean transferForSignal(Node node) { //设置回状态0 if (!compareAndSetWaitStatus(node, Node.CONDITION, 0)) return false; //插入阻塞队列末尾 Node p = enq(node); int ws = p.waitStatus; if (ws > 0 || !compareAndSetWaitStatus(p, ws, Node.SIGNAL)) LockSupport.unpark(node.thread); return true; }","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://www.codetool.top/tags/jdk/"},{"name":"源码研究","slug":"源码研究","permalink":"https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"},{"name":"多线程","slug":"多线程","permalink":"https://www.codetool.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"},{"name":"AQS","slug":"AQS","permalink":"https://www.codetool.top/tags/AQS/"}]},{"title":"leetcode23-合并K个排序链表","slug":"leetcode23-合并K个排序链表","date":"2020-02-03T18:58:38.000Z","updated":"2020-02-20T14:55:21.129Z","comments":true,"path":"article/leetcode23-合并K个排序链表/","link":"","permalink":"https://www.codetool.top/article/leetcode23-%E5%90%88%E5%B9%B6K%E4%B8%AA%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/","excerpt":"","text":"1 原题合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。 示例: 输入：[ 1-&gt;4-&gt;5, 1-&gt;3-&gt;4, 2-&gt;6]输出： 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4-&gt;5-&gt;6 2 解法2.1 思想逐一比较或两两合并（分治）。 2.2 代码逐一比较： 时间复杂度O(nm)（n为链表个数，m为链表最大长度） class Solution { public ListNode mergeKLists(ListNode[] lists) { ListNode head = new ListNode(0); ListNode cur = head; int min = -1; int leftCount = lists.length; while(leftCount>0){ for(int i = 0;i&lt;leftCount;i++){ if(lists[i]!=null&amp;&amp;(min==-1||lists[i].val&lt;lists[min].val)) min = i; } if(min == -1){ leftCount--; break; } ListNode node = lists[min]; if(lists[min].next==null){ lists[min]=lists[leftCount-1]; leftCount--; }else lists[min] = lists[min].next; cur.next = node; cur = cur.next; min = -1; } return head.next; } } 两两合并：时间复杂度O(nm/2)（n为链表个数，m为链表最大长度） class Solution { public ListNode mergeKLists(ListNode[] lists) { int len = lists.length; if (len == 0) { return null; } // 将n个链表以中间为对称，合并 while(len>1) { for (int i=0; i&lt;len/2; i++) { lists[i] = mergeTwoListsForK(lists[i], lists[len-1-i]); } len = (len+1)/2; } return lists[0]; } private ListNode mergeTwoListsForK(ListNode l1, ListNode l2) { ListNode head = new ListNode(-1); ListNode p = head; while(l1 != null &amp;&amp; l2 != null) { if (l1.val &lt; l2.val) { p.next = l1; l1 = l1.next; } else { p.next = l2; l2 = l2.next; } p = p.next; } if (l1 != null) { p.next = l1; } else if (l2 != null) { p.next = l2; } return head.next; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"java中的File类以及IO流","slug":"File类以及IO流","date":"2020-02-03T18:24:45.000Z","updated":"2020-02-04T15:00:31.104Z","comments":true,"path":"article/File类以及IO流/","link":"","permalink":"https://www.codetool.top/article/File%E7%B1%BB%E4%BB%A5%E5%8F%8AIO%E6%B5%81/","excerpt":"","text":"1 File 类1.1 概述java.io.File 类是文件和目录路径名的抽象表示，主要用于文件和目录的创建、查找和删除等操作。 1.2 构造方法 public File(String pathname) ：通过将给定的路径名字符串转换为抽象路径名来创建新的 File实例。 public File(String parent, String child) ：从父路径名字符串和子路径名字符串创建新的 File实例。 public File(File parent, String child) ：从父抽象路径名和子路径名字符串创建新的 File实例。 构造举例，代码如下： // 文件路径名 String pathname = \"D:\\\\aaa.txt\"; File file1 = new File(pathname); // 文件路径名 String pathname2 = \"D:\\\\aaa\\\\bbb.txt\"; File file2 = new File(pathname2); // 通过父路径和子路径字符串 String parent = \"d:\\\\aaa\"; String child = \"bbb.txt\"; File file3 = new File(parent, child); // 通过父级File对象和子路径字符串 File parentDir = new File(\"d:\\\\aaa\"); String child = \"bbb.txt\"; File file4 = new File(parentDir, child); 1.3 常用方法1.3.1 获取功能的方法 public String getPath() ：返回此File的路径（构造时的路径）。 public String getAbsolutePath() ：返回此File的绝对路径名字符串。 public String getCanonicalPath() ：返回此File的经过路径变换后的字符串。 public String getPath() ：将此File转换为路径名字符串。 public String getName() ：返回由此File表示的文件或目录的名称。 public long length() ：返回由此File表示的文件的长度。 1.3.2 判断功能的方法 public boolean exists() ：此File表示的文件或目录是否实际存在。 public boolean isDirectory() ：此File表示的是否为目录。 public boolean isFile() ：此File表示的是否为文件。 1.3.3 创建删除功能的方法 public boolean createNewFile() ：当且仅当具有该名称的文件尚不存在时，创建一个新的空文件。 public boolean delete() ：删除由此File表示的文件或目录。 public boolean mkdir() ：创建由此File表示的目录。 public boolean mkdirs() ：创建由此File表示的目录，包括任何必需但不存在的父目录。 1.3.4 目录的遍历 public String[] list() ：返回一个String数组，表示该File目录中的所有子文件或目录。 public File[] listFiles() ：返回一个File数组，表示该File目录中的所有的子文件或目录。 listFiles可以接受一个FileFilter接口，只得到符合条件的文件。 1.4 应用示例打印目录树： public class Main { public static void main(String[] args) throws Exception { if(args.length>1) { System.out.println(\"参数格式错误！\"); return; } String dirName = \"./\"; if(args.length == 1) dirName = args[0]; File dir = new File(dirName); if(!dir.isDirectory()) { System.out.println(\"目录不存在！\"); return; } printDir(dir,0); } public static void printDir(File dir,int depth) throws IOException { StringBuilder sb = new StringBuilder(); for(int i = 0;i&lt;depth;i++) sb.append(\" \"); String tab = sb.toString(); for(File file:dir.listFiles()){ if(file.isDirectory()){ System.out.println(tab+\"\\u001B[31m\" + file.getName() + \"\\033[0m\"); printDir(file,depth+1); }else System.out.println(tab+file.getName()); } } } 只输出目录： public class Main { public static void main(String[] args){ File dir = new File(\"./\"); for(File file:dir.listFiles(f->{ if(f.isDirectory()) return true; return false; })){ System.out.println(file.getName()); } } } 2 字节流与字符流2.1 流的分类 输入流 输出流 字节流 字节输入流InputStream 字节输出流OutputStream 字符流 字符输入流Reader 字符输出流Writer 2.2 关闭和刷新因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的流对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要flush 方法了。 flush ：刷新缓冲区，流对象可以继续使用。 close:先刷新缓冲区，然后通知系统释放资源。流对象不可以再被使用了。 2.3 OutputStreamjava.io.OutputStream抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。 public void close() ：关闭此输出流并释放与此流相关联的任何系统资源。 public void flush() ：刷新此输出流并强制任何缓冲的输出字节被写出。 public void write(byte[] b)：将 b.length字节从指定的字节数组写入此输出流。 public void write(byte[] b, int off, int len) ：从指定的字节数组写入 len字节，从偏移量 off开始输出到此输出流。 public abstract void write(int b) ：将指定的字节（b的低8位）写入输出流。 String有个方法getByte()可以方便地获取字符串字节数组。 2.3.1 FileOutputStream类java.io.FileOutputStream类是文件输出流，用于将数据写出到文件。 构造方法： public FileOutputStream(File file, boolean append)： 创建文件输出流以写入由指定的 File对象表示的文件。 public FileOutputStream(String name, boolean append)： 创建文件输出流以指定的名称写入文件。 其中boolean append参数都可省略，默认为false。决定打开文件时是否在文件末尾追加，否则覆盖文件内容。 当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有这个文件，会创建该文件。 2.4 InputStreamjava.io.InputStream抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。它定义了字节输入流的基本共性功能方法。 public void close() ：关闭此输入流并释放与此流相关联的任何系统资源。 public abstract int read()： 从输入流读取数据的下一个字节。 public int read(byte[] b)： 从输入流中读取一些字节，并将它们存储到字节数组 b中 。（读满b的长度） public int read(byte b[], int off, int len) 从输入流中读取一些字节，并将它们存储到字节数组b中 。（off为偏移量，len为读取长度） public long skip(long n) 跳过n长度字节不读取。（指针后移n字节） public void reset() 指针重新移至流开头 read()方法如果读到流末尾返回-1。read(byte[] b)方法返回读取的长度，读到末尾返回-1。 2.4.1 FileInputStream类java.io.FileInputStream类是文件输入流，从文件中读取字节。 构造方法： FileInputStream(File file)： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的 File对象 file命名。 FileInputStream(String name)： 通过打开与实际文件的连接来创建一个 FileInputStream ，该文件由文件系统中的路径名 name命名。 当你创建一个流对象时，必须传入一个文件路径。该路径下，如果没有该文件,会抛出FileNotFoundException 。 2.4.2 应用复制图片文件： public class Copy { public static void main(String[] args) throws IOException { // 1.创建流对象 // 1.1 指定数据源 FileInputStream fis = new FileInputStream(\"D:\\\\test.jpg\"); // 1.2 指定目的地 FileOutputStream fos = new FileOutputStream(\"test_copy.jpg\"); // 2.读写数据 // 2.1 定义数组 byte[] b = new byte[1024]; // 2.2 定义长度 int len; // 2.3 循环读取 while ((len = fis.read(b))!=-1) { // 2.4 写出数据 fos.write(b, 0 , len); } // 3.关闭资源 fos.close(); fis.close(); } } 2.5 Readerjava.io.Reader抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。它定义了字符输入流的基本共性功能方法。 public void close() ：关闭此流并释放与此流相关联的任何系统资源。 public int read()： 从输入流读取一个字符。 返回的char自动提升为int。 public int read(char[] cbuf)： 从输入流中读取一些字符，并将它们存储到字符数组 cbuf中 。 public int read(char cbuf[], int off, int len)：： 从输入流中读取一些字符，并将它们存储到字符数组 cbuf中 。（off为偏移量，len为读取长度） read带数组参数的返回的是读取的字符长度，未读取返回-1。 2.5.1 FileReader类java.io.FileReader类是读取字符文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。 构造方法： FileReader(File file)： 创建一个新的 FileReader ，给定要读取的File对象。 FileReader(String fileName)： 创建一个新的 FileReader ，给定要读取的文件的名称。 2.6 Writerjava.io.Writer抽象类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。它定义了字节输出流的基本共性功能方法。 void write(int c) 写入单个字符。 void write(char[] cbuf)写入字符数组。 abstract void write(char[] cbuf, int off, int len)写入字符数组的某一部分,off数组的开始索引,len写的字符个数。 void write(String str)写入字符串。 void write(String str, int off, int len) 写入字符串的某一部分,off字符串的开始索引,len写的字符个数。 void flush()刷新该流的缓冲。 void close() 关闭此流，但要先刷新它。 2.6.1 FileWriter类java.io.FileWriter类是写出字符到文件的便利类。构造时使用系统默认的字符编码和默认字节缓冲区。 构造方法： FileWriter(File file)： 创建一个新的 FileWriter，给定要读取的File对象。 FileWriter(String fileName)： 创建一个新的 FileWriter，给定要读取的文件的名称。 2.7 try-with-resource如果遇到异常需要关闭流，JDK7之前可以使用try-catch-finally，JDK7提供了一种try-with-resource语法糖，可以方便关闭流。 代码使用演示： public class HandleException2 { public static void main(String[] args) { // 创建流对象 try ( FileWriter fw = new FileWriter(\"**\"); ) { // 写出数据 } catch (IOException e) { e.printStackTrace(); } } }","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"基础知识","slug":"基础知识","permalink":"https://www.codetool.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"name":"IO","slug":"IO","permalink":"https://www.codetool.top/tags/IO/"}]},{"title":"Java线程池详解","slug":"Java线程池详解","date":"2020-02-03T13:44:01.000Z","updated":"2020-02-03T14:08:49.168Z","comments":true,"path":"article/Java线程池详解/","link":"","permalink":"https://www.codetool.top/article/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0%E8%AF%A6%E8%A7%A3/","excerpt":"","text":"线程池就是享元模式和生产者消费者模式的应用 1 动手实现线程池 步骤1：自定义拒绝策略接口 @FunctionalInterface // 拒绝策略 interface RejectPolicy&lt;T> { void reject(BlockingQueue&lt;T> queue, T task); } 步骤2：自定义任务队列 class BlockingQueue&lt;T> { // 1. 任务队列 private Deque&lt;T> queue = new ArrayDeque&lt;>(); // 2. 锁 private ReentrantLock lock = new ReentrantLock(); // 3. 生产者条件变量 private Condition fullWaitSet = lock.newCondition(); // 4. 消费者条件变量 private Condition emptyWaitSet = lock.newCondition(); // 5. 容量 private int capcity; public BlockingQueue(int capcity) { this.capcity = capcity; } // 带超时阻塞获取 public T poll(long timeout, TimeUnit unit) { lock.lock(); try { // 将 timeout 统一转换为 纳秒 long nanos = unit.toNanos(timeout); while (queue.isEmpty()) { try { // 返回值是剩余时间 if (nanos &lt;= 0) { return null; } nanos = emptyWaitSet.awaitNanos(nanos); } catch (InterruptedException e) { e.printStackTrace(); } } T t = queue.removeFirst(); fullWaitSet.signal(); return t; } finally { lock.unlock(); } } // 阻塞获取 public T take() { lock.lock(); try { while (queue.isEmpty()) { try { emptyWaitSet.await(); } catch (InterruptedException e) { e.printStackTrace(); } } T t = queue.removeFirst(); fullWaitSet.signal(); return t; } finally { lock.unlock(); } } // 阻塞添加 public void put(T task) { lock.lock(); try { while (queue.size() == capcity) { try { log.debug(\"等待加入任务队列 {} ...\", task); fullWaitSet.await(); } catch (InterruptedException e) { e.printStackTrace(); } } log.debug(\"加入任务队列 {}\", task); queue.addLast(task); emptyWaitSet.signal(); } finally { lock.unlock(); } } // 带超时时间阻塞添加 public boolean offer(T task, long timeout, TimeUnit timeUnit) { lock.lock(); try { long nanos = timeUnit.toNanos(timeout); while (queue.size() == capcity) { try { if(nanos &lt;= 0) { return false; } log.debug(\"等待加入任务队列 {} ...\", task); nanos = fullWaitSet.awaitNanos(nanos); } catch (InterruptedException e) { e.printStackTrace(); } } log.debug(\"加入任务队列 {}\", task); queue.addLast(task); emptyWaitSet.signal(); return true; } finally { lock.unlock(); } } public int size() { lock.lock(); try { return queue.size(); } finally { lock.unlock(); } } public void tryPut(RejectPolicy&lt;T> rejectPolicy, T task) { lock.lock(); try { // 判断队列是否满 if(queue.size() == capcity) { rejectPolicy.reject(this, task); } else { // 有空闲 log.debug(\"加入任务队列 {}\", task); queue.addLast(task); emptyWaitSet.signal(); } } finally { lock.unlock(); } } } 步骤3：自定义线程池 class ThreadPool { // 任务队列 private BlockingQueue&lt;Runnable> taskQueue; // 线程集合 private HashSet&lt;Worker> workers = new HashSet&lt;>(); // 核心线程数 private int coreSize; // 获取任务时的超时时间 private long timeout; private TimeUnit timeUnit; private RejectPolicy&lt;Runnable> rejectPolicy; // 执行任务 public void execute(Runnable task) { // 当任务数没有超过 coreSize 时，直接交给 worker 对象执行 // 如果任务数超过 coreSize 时，加入任务队列暂存 synchronized (workers) { if(workers.size() &lt; coreSize) { Worker worker = new Worker(task); log.debug(\"新增 worker{}, {}\", worker, task); workers.add(worker); worker.start(); } else { // taskQueue.put(task); // 1) 死等 // 2) 带超时等待 // 3) 让调用者放弃任务执行 // 4) 让调用者抛出异常 // 5) 让调用者自己执行任务 taskQueue.tryPut(rejectPolicy, task); } } } public ThreadPool(int coreSize, long timeout, TimeUnit timeUnit, int queueCapcity, RejectPolicy&lt;Runnable> rejectPolicy) { this.coreSize = coreSize; this.timeout = timeout; this.timeUnit = timeUnit; this.taskQueue = new BlockingQueue&lt;>(queueCapcity); this.rejectPolicy = rejectPolicy; } class Worker extends Thread{ private Runnable task; public Worker(Runnable task) { this.task = task; } @Override public void run() { // 执行任务 // 1) 当 task 不为空，执行任务 // 2) 当 task 执行完毕，再接着从任务队列获取任务并执行 // while(task != null || (task = taskQueue.take()) != null) { while(task != null || (task = taskQueue.poll(timeout, timeUnit)) != null) { try { log.debug(\"正在执行...{}\", task); task.run(); } catch (Exception e) { e.printStackTrace(); } finally { task = null; } } synchronized (workers) { log.debug(\"worker 被移除{}\", this); workers.remove(this); } } } } 2 ThreadPoolExecutor 2.1 线程池状态ThreadPoolExecutor 使用 int 的高 3 位来表示线程池状态，低 29 位表示线程数量 状态名 高3位 接收新任务 处理阻塞队列任务 说明 RUNNING 111 Y Y SHUTDOWN 000 N Y 不会接收新任务，但会处理阻塞队列剩余任务 STOP 001 N N 会中断正在执行的任务，并抛弃阻塞队列任务 TIDYING 010 任务全执行完毕，活动线程为 0 即将进入终结 TERMINATED 011 终结状态 从数字上比较，TERMINATED &gt; TIDYING &gt; STOP &gt; SHUTDOWN &gt; RUNNING 这些信息存储在一个原子变量 ctl 中，目的是将线程池状态与线程个数合二为一，这样就可以用一次 cas 原子操作进行赋值 // c 为旧值， ctlOf 返回结果为新值 ctl.compareAndSet(c, ctlOf(targetState, workerCountOf(c)))); // rs 为高 3 位代表线程池状态， wc 为低 29 位代表线程个数，ctl 是合并它们 private static int ctlOf(int rs, int wc) { return rs | wc; } 2.2 构造方法public ThreadPoolExecutor( int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable> workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler ) corePoolSize 核心线程数目 (最多保留的线程数) maximumPoolSize 最大线程数目 keepAliveTime 生存时间 - 针对救急线程 unit 时间单位 - 针对救急线程 workQueue 阻塞队列 threadFactory 线程工厂 - 可以为线程创建时起个好名字 handler 拒绝策略 工作方式： 线程池中刚开始没有线程，当一个任务提交给线程池后，线程池会创建一个新线程来执行任务。 当线程数达到 corePoolSize 并没有线程空闲，这时再加入任务，新加的任务会被加入workQueue 队列排队，直到有空闲的线程。 如果队列选择了有界队列，那么任务超过了队列大小时，会创建 maximumPoolSize - corePoolSize 数目的线程来救急。 如果线程到达 maximumPoolSize 仍然有新任务这时会执行拒绝策略。拒绝策略 jdk 提供了 4 种实现，其它著名框架也提供了实现 AbortPolicy 让调用者抛出 RejectedExecutionException 异常，这是默认策略 CallerRunsPolicy 让调用者运行任务 DiscardPolicy 放弃本次任务 DiscardOldestPolicy 放弃队列中最早的任务，本任务取而代之 Dubbo 的实现，在抛出 RejectedExecutionException 异常之前会记录日志，并 dump 线程栈信息，方便定位问题 Netty 的实现，是创建一个新线程来执行任务 ActiveMQ 的实现，带超时等待（60s）尝试放入队列，类似我们之前自定义的拒绝策略 PinPoint 的实现，它使用了一个拒绝策略链，会逐一尝试策略链中每种拒绝策略 当高峰过去后，超过 corePoolSize 的救急线程如果一段时间没有任务做，需要结束节省资源，这个时间由 keepAliveTime 和 unit 来控制。 BlockingQueue的各种实现类：(参考链接) ArrayBlockingQueue：基于数组的阻塞队列实现，在ArrayBlockingQueue内部，维护了一个定长的数组，以便缓存队列中的数据对象，其内部没实现读写分离，也就意味着生产和消费者不能完全并行。长度是需要定义的，可以指定先进先出或者先进后出，因为长度是需要定义的，所以也叫有界队列，在很多场合非常适合使用。 LinkedBlockingQueue：基于链表的阻塞队列，同ArrayBlockingQueue类似，其内部也维持着一个数据缓冲队列（该队列由一个链表构成），LinkedBlockingQueue之所以能够高效地处理并发数据，是因为其内部实现采用分离锁（读写分离两个锁），从而实现生产者和消费者操作完全并行运行。需要注意一下，它是一个无界队列。 SynchronousQueue：一种没有缓冲的队列，生产者产生的数据直接会被消费者获取并且立刻消费。 PriorityBlockingQueue：基于优先级别的阻塞队列（优先级的判断通过构造函数传入的Compator对象来决定，也就是说传入队列的对象必须实现Comparable接口），在实现PriorityBlockingQueue时，内部控制线程同步的锁采用的是公平锁，需要注意的是它也是一个无界的队列。 DelayQueue：带有延迟时间的Queue，其中的元素只有当其指定的延迟时间到了，才能够从队列中获取到该元素。DelayQueue中的元素必须先实现Delayed接口，DelayQueue是一个没有大小限制的队列，应用场景很多，比如对缓存超时的数据进行移除、任务超时处理、空闲连接的关闭等等。 根据这个构造方法，JDK Executors 类中提供了众多工厂方法来创建各种用途的线程池。 2.3 newFixedThreadPool固定大小线程池public static ExecutorService newFixedThreadPool(int nThreads) { return new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue&lt;Runnable>()); } 特点 核心线程数 == 最大线程数（没有救急线程被创建），因此也无需超时时间 阻塞队列是无界的，可以放任意数量的任务 评价 适用于任务量已知，相对耗时的任务 2.4 newCachedThreadPool带缓冲线程池public static ExecutorService newCachedThreadPool() { return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue&lt;Runnable>()); } 特点 核心线程数是 0， 最大线程数是 Integer.MAX_VALUE，救急线程的空闲生存时间是 60s，意味着 全部都是救急线程（60s 后可以回收） 救急线程可以无限创建 队列采用了 SynchronousQueue 实现特点是，它没有容量，没有线程来取是放不进去的（一手交钱、一手交货） 评价 整个线程池表现为线程数会根据任务量不断增长，没有上限，当任务执行完毕，空闲 1分钟后释放线程。 适合任务数比较密集，但每个任务执行时间较短的情况。 2.5 newSingleThreadExecutor单线程线程池public static ExecutorService newSingleThreadExecutor() { return new FinalizableDelegatedExecutorService (new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue&lt;Runnable>())); } 使用场景：希望多个任务排队执行。线程数固定为 1，任务数多于 1 时，会放入无界队列排队。任务执行完毕，这唯一的线程也不会被释放。 区别： 自己创建一个单线程串行执行任务，如果任务执行失败而终止那么没有任何补救措施，而线程池还会新建一个线程，保证池的正常工作 Executors.newSingleThreadExecutor() 线程个数始终为1，不能修改 FinalizableDelegatedExecutorService 应用的是装饰器模式，只对外暴露了 ExecutorService 接口，因此不能调用 ThreadPoolExecutor 中特有的方法 Executors.newFixedThreadPool(1) 初始时为1，以后还可以修改 对外暴露的是 ThreadPoolExecutor 对象，可以强转后调用 setCorePoolSize 等方法进行修改 2.6 提交任务// 执行任务 void execute(Runnable command); // 提交任务 task，用返回值 Future 获得任务执行结果 &lt;T> Future&lt;T> submit(Callable&lt;T> task); Future&lt;Integer> future1 = pool.submit(() -> { return 1; }); // 提交 tasks 中所有任务 &lt;T> List&lt;Future&lt;T>> invokeAll(Collection&lt;? extends Callable&lt;T>> tasks) throws InterruptedException; // 提交 tasks 中所有任务，带超时时间，丢弃超出时间未运行的线程，返回的List中的结果按线程顺序排序 &lt;T> List&lt;Future&lt;T>> invokeAll(Collection&lt;? extends Callable&lt;T>> tasks, long timeout, TimeUnit unit) throws InterruptedException; // 提交 tasks 中所有任务，哪个任务先成功执行完毕，返回此任务执行结果，其它任务取消 &lt;T> T invokeAny(Collection&lt;? extends Callable&lt;T>> tasks) throws InterruptedException, ExecutionException; // 提交 tasks 中所有任务，哪个任务先成功执行完毕，返回此任务执行结果，其它任务取消，带超时时间 &lt;T> T invokeAny(Collection&lt;? extends Callable&lt;T>> tasks, long timeout, TimeUnit unit) throws InterruptedException, ExecutionException, TimeoutException; 2.7 关闭线程池2.7.1 shutdown/* 线程池状态变为 SHUTDOWN - 不会接收新任务 - 但已提交任务会执行完 - 此方法不会阻塞调用线程的执行 */ void shutdown(); public void shutdown() { final ReentrantLock mainLock = this.mainLock; mainLock.lock(); try { checkShutdownAccess(); // 修改线程池状态 advanceRunState(SHUTDOWN); // 仅会打断空闲线程 interruptIdleWorkers(); onShutdown(); // 扩展点 ScheduledThreadPoolExecutor } finally { mainLock.unlock(); } // 尝试终结(没有运行的线程可以立刻终结，如果还有运行的线程也不会等) tryTerminate(); } 2.7.2 shutdownNow/* 线程池状态变为 STOP - 不会接收新任务 - 会将队列中的任务返回 - 并用 interrupt 的方式中断正在执行的任务 */ List&lt;Runnable> shutdownNow(); public List&lt;Runnable> shutdownNow() { List&lt;Runnable> tasks; final ReentrantLock mainLock = this.mainLock; mainLock.lock(); try { checkShutdownAccess(); // 修改线程池状态 advanceRunState(STOP); // 打断所有线程 interruptWorkers(); // 获取队列中剩余任务 tasks = drainQueue(); } finally { mainLock.unlock(); } // 尝试终结 tryTerminate(); return tasks; } 2.7.3 其它方法// 不在 RUNNING 状态的线程池，此方法就返回 true boolean isShutdown(); // 线程池状态是否是 TERMINATED boolean isTerminated(); // 调用 shutdown 后，由于调用线程并不会等待所有任务运行结束，因此如果它想在线程池 TERMINATED 后做些事 情，可以利用此方法等待 boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException; 2.8 线程池多大合适2.8.1 CPU 密集型运算通常采用 cpu 核数 + 1 能够实现最优的 CPU 利用率，+1 是保证当线程由于页缺失故障（操作系统）或其它原因导致暂停时，额外的这个线程就能顶上去，保证 CPU 时钟周期不被浪费 2.8.2 I/O 密集型运算CPU 不总是处于繁忙状态，例如，当你执行业务计算时，这时候会使用 CPU 资源，但当你执行 I/O 操作时、远程RPC 调用时，包括进行数据库操作时，这时候 CPU 就闲下来了，你可以利用多线程提高它的利用率。 经验公式如下 线程数 = 核数 * 期望 CPU 利用率 * 总时间(CPU计算时间+等待时间) / CPU 计算时间 例如 4 核 CPU 计算时间是 50% ，其它等待时间是 50%，期望 cpu 被 100% 利用，套用公式 4 * 100% * 100% / 50% = 8 例如 4 核 CPU 计算时间是 10% ，其它等待时间是 90%，期望 cpu 被 100% 利用，套用公式 4 * 100% * 100% / 10% = 40 2.9 任务调度线程池2.9.1 使用方法在『任务调度线程池』功能加入之前，可以使用 java.util.Timer 来实现定时功能，Timer 的优点在于简单易用，但由于所有任务都是由同一个线程来调度，因此所有任务都是串行执行的，同一时间只能有一个任务在执行，前一个任务的延迟或异常都将会影响到之后的任务。 public static void main(String[] args) { Timer timer = new Timer(); TimerTask task1 = new TimerTask() { @Override public void run() { log.debug(\"task 1\"); sleep(2); } }; TimerTask task2 = new TimerTask() { @Override public void run() { log.debug(\"task 2\"); } }; // 使用 timer 添加两个任务，希望它们都在 1s 后执行 // 但由于 timer 内只有一个线程来顺序执行队列中的任务，因此『任务1』的延时，影响了『任务2』的执行 timer.schedule(task1, 1000); timer.schedule(task2, 1000); } 使用 ScheduledExecutorService 改写： // 构造方法只是设置corePoolSize ScheduledExecutorService executor = Executors.newScheduledThreadPool(2); // 添加两个任务，希望它们都在 1s 后执行 executor.schedule(() -> { System.out.println(\"任务1，执行时间：\" + new Date()); try { Thread.sleep(2000); } catch (InterruptedException e) { } }, 1000, TimeUnit.MILLISECONDS); executor.schedule(() -> { System.out.println(\"任务2，执行时间：\" + new Date()); }, 1000, TimeUnit.MILLISECONDS); 构造方法源码： public ScheduledThreadPoolExecutor(int corePoolSize) { super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS, new DelayedWorkQueue()); } 方法： /* * 每间隔一段时间提交执行一次任务 * command 待执行的任务 * initialDelay 第一次执行任务的延迟 * period 每次执行任务之间的延迟 * unit 时间单位 */ executor.scheduleAtFixedRate(Runnable command,long initialDelay,long period,TimeUnit unit) /* * 按一定间隔在上一次任务执行结束之后提交执行下一次任务 */ executor.scheduleWithFixedDelay(Runnable command,long initialDelay,long period,TimeUnit unit) 2.9.2 应用让每周四 18:00:00 定时执行任务 // 获得当前时间 LocalDateTime now = LocalDateTime.now(); // 获取本周四 18:00:00.000 LocalDateTime thursday = now.with(DayOfWeek.THURSDAY).withHour(18).withMinute(0).withSecond(0).withNano(0); // 如果当前时间已经超过 本周四 18:00:00.000， 那么找下周四 18:00:00.000 if(now.compareTo(thursday) >= 0) { thursday = thursday.plusWeeks(1); } // 计算时间差，即延时执行时间 long initialDelay = Duration.between(now, thursday).toMillis(); // 计算间隔时间，即 1 周的毫秒值 long oneWeek = 7 * 24 * 3600 * 1000; ScheduledExecutorService executor = Executors.newScheduledThreadPool(2); System.out.println(\"开始时间：\" + new Date()); executor.scheduleAtFixedRate(() -> { System.out.println(\"执行时间：\" + new Date()); }, initialDelay, oneWeek, TimeUnit.MILLISECONDS); 2.10 处理线程中的异常应该在线程内部捕获并处理异常，否则其他线程和主线程完全感知不到某个线程抛出的异常。 使用线程池的submit方法时，如果callable中发生异常，返回Future.get()会出现异常信息。 3 fork/join3.1 概念Fork/Join 是 JDK 1.7 加入的新的线程池实现，它体现的是一种分治思想，适用于能够进行任务拆分的 cpu 密集型运算 所谓的任务拆分，是将一个大任务拆分为算法上相同的小任务，直至不能拆分可以直接求解。跟递归相关的一些计算，如归并排序、斐波那契数列、都可以用分治思想进行求解 Fork/Join 在分治的基础上加入了多线程，可以把每个任务的分解和合并交给不同的线程来完成，进一步提升了运算效率 Fork/Join 默认会创建与 cpu 核心数大小相同的线程池 3.2 使用提交给 Fork/Join 线程池的任务需要继承 RecursiveTask（有返回值）或 RecursiveAction（没有返回值），例如下面定义了一个对 1~n 之间的整数求和的任务 class AddTask1 extends RecursiveTask&lt;Integer> { int n; public AddTask1(int n) { this.n = n; } @Override public String toString() { return \"{\" + n + '}'; } @Override protected Integer compute() { // 如果 n 已经为 1，可以求得结果了 if (n == 1) { log.debug(\"join() {}\", n); return n; } // 将任务进行拆分(fork) AddTask1 t1 = new AddTask1(n - 1); t1.fork(); log.debug(\"fork() {} + {}\", n, t1); // 合并(join)结果 int result = n + t1.join(); log.debug(\"join() {} + {} = {}\", n, t1, result); return result; } } 然后提交给 ForkJoinPool 来执行 public static void main(String[] args) { ForkJoinPool pool = new ForkJoinPool(4); System.out.println(pool.invoke(new AddTask1(5))); }","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"多线程","slug":"多线程","permalink":"https://www.codetool.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"},{"name":"线程池","slug":"线程池","permalink":"https://www.codetool.top/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"}]},{"title":"leetcode682-棒球比赛","slug":"leetcode682-棒球比赛","date":"2020-02-02T18:01:47.000Z","updated":"2020-02-02T18:05:21.989Z","comments":true,"path":"article/leetcode682-棒球比赛/","link":"","permalink":"https://www.codetool.top/article/leetcode682-%E6%A3%92%E7%90%83%E6%AF%94%E8%B5%9B/","excerpt":"","text":"1 原题你现在是棒球比赛记录员。给定一个字符串列表，每个字符串可以是以下四种类型之一：1. 整数（一轮的得分）：直接表示您在本轮中获得的积分数。2. &quot;+&quot;（一轮的得分）：表示本轮获得的得分是前两轮有效 回合得分的总和。3. &quot;D&quot;（一轮的得分）：表示本轮获得的得分是前一轮有效 回合得分的两倍。4. &quot;C&quot;（一个操作，这不是一个回合的分数）：表示您获得的最后一个有效 回合的分数是无效的，应该被移除。 每一轮的操作都是永久性的，可能会对前一轮和后一轮产生影响。你需要返回你在所有回合中得分的总和。 示例 1: 输入: [“5”,”2”,”C”,”D”,”+”]输出: 30解释:第1轮：你可以得到5分。总和是：5。第2轮：你可以得到2分。总和是：7。操作1：第2轮的数据无效。总和是：5。第3轮：你可以得到10分（第2轮的数据已被删除）。总数是：15。第4轮：你可以得到5 + 10 = 15分。总数是：30。 示例 2: 输入: [“5”,”-2”,”4”,”C”,”D”,”9”,”+”,”+”]输出: 27解释:第1轮：你可以得到5分。总和是：5。第2轮：你可以得到-2分。总数是：3。第3轮：你可以得到4分。总和是：7。操作1：第3轮的数据无效。总数是：3。第4轮：你可以得到-4分（第三轮的数据已被删除）。总和是：-1。第5轮：你可以得到9分。总数是：8。第6轮：你可以得到-4 + 9 = 5分。总数是13。第7轮：你可以得到9 + 5 = 14分。总数是27。 注意： 输入列表的大小将介于1和1000之间。 列表中的每个整数都将介于-30000和30000之间。 2 解法2.1 思想每次根据对应字符串的类型进行不同的处理。 2.2 代码class Solution { public int calPoints(String[] ops) { List&lt;Integer> list = new ArrayList&lt;>(); int cur = 0; for(String i:ops){ if(i.equals(\"+\")){ list.add(list.get(cur-1)+list.get(cur-2)); cur++; } else if(i.equals(\"D\")){ list.add(list.get(cur-1)*2); cur++; } else if(i.equals(\"C\")){ list.remove(list.size()-1); cur--; } else { list.add(Integer.valueOf(i)); cur++; } } int ans = 0; for(Integer i:list){ ans+=i; } return ans; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"CAS应用之JUC下的原子类","slug":"CAS应用之JUC下的原子类","date":"2020-02-02T09:47:58.000Z","updated":"2020-02-02T09:48:44.905Z","comments":true,"path":"article/CAS应用之JUC下的原子类/","link":"","permalink":"https://www.codetool.top/article/CAS%E5%BA%94%E7%94%A8%E4%B9%8BJUC%E4%B8%8B%E7%9A%84%E5%8E%9F%E5%AD%90%E7%B1%BB/","excerpt":"","text":"1 原子整数AtomicInteger i = new AtomicInteger(0); // 获取并自增（i = 0, 结果 i = 1, 返回 0），类似于 i++ System.out.println(i.getAndIncrement()); // 自增并获取（i = 1, 结果 i = 2, 返回 2），类似于 ++i System.out.println(i.incrementAndGet()); // 自减并获取（i = 2, 结果 i = 1, 返回 1），类似于 --i System.out.println(i.decrementAndGet()); // 获取并自减（i = 1, 结果 i = 0, 返回 1），类似于 i-- System.out.println(i.getAndDecrement()); // 获取并加值（i = 0, 结果 i = 5, 返回 0） System.out.println(i.getAndAdd(5)); // 加值并获取（i = 5, 结果 i = 0, 返回 0） System.out.println(i.addAndGet(-5)); // 获取并更新（i = 0, p 为 i 的当前值, 结果 i = -2, 返回 0） // 其中函数中的操作能保证原子，但函数需要无副作用 System.out.println(i.getAndUpdate(p -> p - 2)); // 更新并获取（i = -2, p 为 i 的当前值, 结果 i = 0, 返回 0） // 其中函数中的操作能保证原子，但函数需要无副作用 System.out.println(i.updateAndGet(p -> p + 2)); // 获取并计算（i = 0, p 为 i 的当前值, x 为参数1, 结果 i = 10, 返回 0） // 其中函数中的操作能保证原子，但函数需要无副作用 // getAndUpdate 如果在 lambda 中引用了外部的局部变量，要保证该局部变量是 final 的 // getAndAccumulate 可以通过 参数1 来引用外部的局部变量，但因为其不在 lambda 中因此不必是 final System.out.println(i.getAndAccumulate(10, (p, x) -> p + x)); // 计算并获取（i = 10, p 为 i 的当前值, x 为参数1, 结果 i = 0, 返回 0） // 其中函数中的操作能保证原子，但函数需要无副作用 System.out.println(i.accumulateAndGet(-10, (p, x) -> p + x)); 2 原子引用AtomicReference class DecimalAccountSafeCas implements DecimalAccount { AtomicReference&lt;BigDecimal> ref; public DecimalAccountSafeCas(BigDecimal balance) { ref = new AtomicReference&lt;>(balance); } public BigDecimal getBalance() { return ref.get(); } @Override public void withdraw(BigDecimal amount) { while (true) { BigDecimal prev = ref.get(); BigDecimal next = prev.subtract(amount); if (ref.compareAndSet(prev, next)) { break; } } } } 3 解决ABA问题3.1 AtomicStampedReferenceAtomicStampedReference附带一个Stamp信息（版本号） static AtomicStampedReference&lt;String> ref = new AtomicStampedReference&lt;>(\"A\", 0); public static void main(String[] args) throws InterruptedException { log.debug(\"main start...\"); // 获取值 A String prev = ref.getReference(); // 获取版本号 int stamp = ref.getStamp(); log.debug(\"版本 {}\", stamp); // 如果中间有其它线程干扰，发生了 ABA 现象 other(); sleep(1); // 尝试改为 C log.debug(\"change A->C {}\", ref.compareAndSet(prev, \"C\", stamp, stamp + 1)); } private static void other() { new Thread(() -> { log.debug(\"change A->B {}\", ref.compareAndSet(ref.getReference(), \"B\", ref.getStamp(), ref.getStamp() + 1)); log.debug(\"更新版本为 {}\", ref.getStamp()); }, \"t1\").start(); sleep(0.5); new Thread(() -> { log.debug(\"change B->A {}\", ref.compareAndSet(ref.getReference(), \"A\", ref.getStamp(), ref.getStamp() + 1)); log.debug(\"更新版本为 {}\", ref.getStamp()); }, \"t2\").start(); } 3.2 AtomicMarkableReferenceAtomicStampedReference可以知道变量被更新了几次，但是有时候，并不关心引用变量更改了几次，只是单纯的关心是否更改过，所以就有了AtomicMarkableReference class GarbageBag { String desc; public GarbageBag(String desc) { this.desc = desc; } public void setDesc(String desc) { this.desc = desc; } @Override public String toString() { return super.toString() + \" \" + desc; } } public class TestABAAtomicMarkableReference { public static void main(String[] args) throws InterruptedException { GarbageBag bag = new GarbageBag(\"装满了垃圾\"); // 参数2 mark 可以看作一个标记，表示垃圾袋满了 AtomicMarkableReference&lt;GarbageBag> ref = new AtomicMarkableReference&lt;>(bag, true); log.debug(\"主线程 start...\"); GarbageBag prev = ref.getReference(); log.debug(prev.toString()); new Thread(() -> { log.debug(\"打扫卫生的线程 start...\"); bag.setDesc(\"空垃圾袋\"); while (!ref.compareAndSet(bag, bag, true, false)) {} log.debug(bag.toString()); }).start(); Thread.sleep(1000); log.debug(\"主线程想换一只新垃圾袋？\"); boolean success = ref.compareAndSet(prev, new GarbageBag(\"空垃圾袋\"), true, false); log.debug(\"换了么？\" + success); log.debug(ref.getReference().toString()); } } 4 原子数组//获得数组第i个下标的元素 public final int get(int i); //获得数组的长度 public final int length(); //将数组第i个下标设置为newValue，并返回旧的值 public final int getAndSet(int i, int newValue); //进行CAS操作，如果第i个下标的元素等于expect，则设置为update，设置成功返回true public final boolean compareAndSet(int i, int expect, intupdate); //将第i个下标的元素加1 public final int getAndIncrement(int i); //将第i个下标的元素减1 public final int getAndDecrement(int i); //将第i个下标的元素增加delta（delta可以是负数） public final int getAndAdd(int i, int delta); 5 字段更新器package automic; import java.util.concurrent.atomic.AtomicIntegerFieldUpdater; /** * 原子整型字段更新操作 * @author gosaint * */ public class AtomicIntegerFieldUpdaterTest { private static Class&lt;Person> cls; /** * AtomicIntegerFieldUpdater说明 * 基于反射的实用工具，可以对指定类的指定 volatile int 字段进行原子更新。此类用于原子数据结构， * 该结构中同一节点的几个字段都独立受原子更新控制。 * 注意，此类中 compareAndSet 方法的保证弱于其他原子类中该方法的保证。 * 因为此类不能确保所有使用的字段都适合于原子访问目的，所以对于相同更新器上的 compareAndSet 和 set 的其他调用， * 它仅可以保证原子性和可变语义。 * @param args */ public static void main(String[] args) { // 新建AtomicLongFieldUpdater对象，传递参数是“class对象”和“long类型在类中对应的名称” AtomicIntegerFieldUpdater&lt;Person> mAtoLong = AtomicIntegerFieldUpdater.newUpdater(Person.class, \"id\"); Person person = new Person(12345); mAtoLong.compareAndSet(person, 12345, 1000); System.out.println(\"id=\"+person.getId()); } } class Person { volatile int id; public Person(int id) { this.id = id; } public void setId(int id) { this.id = id; } public int getId() { return id; } } 6 原子累加器参考 https://www.jianshu.com/p/b3c5b05055de 7 Unsafe类Unsafe 对象提供了非常底层的，操作内存、线程的方法，Unsafe 对象不能直接调用，只能通过反射获得 public class UnsafeAccessor { static Unsafe unsafe; static { try { Field theUnsafe = Unsafe.class.getDeclaredField(\"theUnsafe\"); theUnsafe.setAccessible(true); unsafe = (Unsafe) theUnsafe.get(null); } catch (NoSuchFieldException | IllegalAccessException e) { throw new Error(e); } } static Unsafe getUnsafe() { return unsafe; } } Unsafe的compareAndSwap***方法提供了cas操作","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"多线程","slug":"多线程","permalink":"https://www.codetool.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}]},{"title":"leetcode636-函数的独占时间","slug":"leetcode636-函数的独占时间","date":"2020-02-01T19:15:08.000Z","updated":"2020-02-20T14:55:21.051Z","comments":true,"path":"article/leetcode636-函数的独占时间/","link":"","permalink":"https://www.codetool.top/article/leetcode636-%E5%87%BD%E6%95%B0%E7%9A%84%E7%8B%AC%E5%8D%A0%E6%97%B6%E9%97%B4/","excerpt":"","text":"1 原题给出一个非抢占单线程CPU的 n 个函数运行日志，找到函数的独占时间。 每个函数都有一个唯一的 Id，从 0 到 n-1，函数可能会递归调用或者被其他函数调用。 日志是具有以下格式的字符串：function_id：start_or_end：timestamp。例如：&quot;0:start:0&quot; 表示函数 0 从 0 时刻开始运行。&quot;0:end:0&quot; 表示函数 0 在 0 时刻结束。 函数的独占时间定义是在该方法中花费的时间，调用其他函数花费的时间不算该函数的独占时间。你需要根据函数的 Id 有序地返回每个函数的独占时间。 示例 1: 输入:n = 2logs =[“0:start:0”, “1:start:2”, “1:end:5”, “0:end:6”]输出:[3, 4]说明：函数 0 在时刻 0 开始，在执行了 2个时间单位结束于时刻 1。现在函数 0 调用函数 1，函数 1 在时刻 2 开始，执行 4 个时间单位后结束于时刻 5。函数 0 再次在时刻 6 开始执行，并在时刻 6 结束运行，从而执行了 1 个时间单位。所以函数 0 总共的执行了 2 +1 =3 个时间单位，函数 1 总共执行了 4 个时间单位。 说明： 输入的日志会根据时间戳排序，而不是根据日志Id排序。 你的输出会根据函数Id排序，也就意味着你的输出数组中序号为 0 的元素相当于函数 0 的执行时间。 两个函数不会在同时开始或结束。 函数允许被递归调用，直到运行结束。 1 &lt;= n &lt;= 100 2 解法2.1 思想函数的调用天生符合栈的思想 2.2 代码我一开始使用了辅助类记录足够的信息。 class FunctionTime{ String function_id; String timestamp; FunctionTime(String function_id,String timestamp){ this.function_id = function_id; this.timestamp = timestamp; } } class Solution { public int[] exclusiveTime(int n, List&lt;String> logs) { int[] ans = new int[n]; Stack&lt;FunctionTime> stack = new Stack&lt;>(); for(String i:logs){ String[] info = i.split(\":\"); if(!stack.isEmpty()&amp;&amp;info[1].equals(\"end\")){ FunctionTime func = stack.pop(); ans[Integer.valueOf(func.function_id)]+=(Integer.valueOf(info[2])-Integer.valueOf(func.timestamp)+1); //新方法结束时把原方法开始的时间设为当前时间+1。 if(!stack.isEmpty()) stack.peek().timestamp = String.valueOf(Integer.valueOf(info[2])+1); }else{ if(!stack.isEmpty()) { //新方法开始时给上一个方法加上时间。 FunctionTime peek = stack.peek(); ans[Integer.valueOf(peek.function_id)]+=(Integer.valueOf(info[2])-Integer.valueOf(peek.timestamp)); } FunctionTime func = new FunctionTime(info[0],info[2]); stack.push(func); } } return ans; } } 然后发现可以简化。 class Solution { public int[] exclusiveTime(int n, List&lt;String> logs) { int[] ans = new int[n]; Stack&lt;Integer> stack = new Stack(); int curTime = 0; for(String i:logs){ String[] info = i.split(\":\"); int id = Integer.valueOf(info[0]); int timestamp = Integer.valueOf(info[2]); if(info[1].equals(\"start\")){ if(!stack.isEmpty()){ ans[stack.peek()] += timestamp - curTime; } stack.push(id); curTime = timestamp; }else{ timestamp++; ans[stack.pop()] += timestamp - curTime; } curTime = timestamp; } return ans; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"Java多线程共享模型之管程","slug":"Java多线程共享模型之管程","date":"2020-02-01T18:16:59.000Z","updated":"2020-02-01T18:26:04.552Z","comments":true,"path":"article/Java多线程共享模型之管程/","link":"","permalink":"https://www.codetool.top/article/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%85%B1%E4%BA%AB%E6%A8%A1%E5%9E%8B%E4%B9%8B%E7%AE%A1%E7%A8%8B/","excerpt":"","text":"1 Monitor（锁）Monitor被翻译为监视器或管程。 Monitor是重量级锁的实现，是向操作系统申请的。 Monitor的结构：WaitSet、EntryList、Owner 运行状态:Owner指向当前线程 堵塞状态：进入EntryList，称为BLOCKED状态。当Owner解除占用之后，通知EntryList中的线程可以竞争锁。 2 锁优化2.1 轻量级锁见深入理解java虚拟机第三版读书笔记13 2.2 锁膨胀如果在尝试加轻量级锁的过程中，CAS 操作无法成功，这时一种情况就是有其它线程为此对象加上了轻量级锁（有竞争），这时需要进行锁膨胀，将轻量级锁变为重量级锁。 2.3 自旋优化重量级锁竞争的时候，还可以使用自旋来进行优化，如果当前线程自旋成功（即这时候持锁线程已经退出了同步块，释放了锁），这时当前线程就可以避免阻塞。 自旋会占用 CPU 时间，单核 CPU 自旋就是浪费，多核 CPU 自旋才能发挥优势。 在 Java 6 之后自旋锁是自适应的，比如对象刚刚的一次自旋操作成功过，那么认为这次自旋成功的可能性会高，就多自旋几次；反之，就少自旋甚至不自旋，总之，比较智能。 Java 7 之后不能控制是否开启自旋功能 2.4 偏向锁参考深入理解java虚拟机第三版读书笔记13 一个对象创建时： 如果开启了偏向锁（默认开启），那么对象创建后，markword 值为 0x05 即最后 3 位为 101，这时它的thread、epoch、age 都为 0(代表它是可偏向的，一旦获取了它的哈希码就不可偏向了) 偏向锁是默认是延迟的，不会在程序启动时立即生效，如果想避免延迟，可以加 VM 参数 -XX:BiasedLockingStartupDelay=0 来禁用延迟 如果没有开启偏向锁，那么对象创建后，markword 值为 0x01 即最后 3 位为 001，这时它的 hashcode、age 都为 0，第一次用到 hashcode 时才会赋值 调用 wait/notify也会撤销偏向锁： public static void main(String[] args) throws InterruptedException { Dog d = new Dog(); Thread t1 = new Thread(() -> { log.debug(ClassLayout.parseInstance(d).toPrintableSimple(true)); synchronized (d) { log.debug(ClassLayout.parseInstance(d).toPrintableSimple(true)); try { d.wait(); } catch (InterruptedException e) { e.printStackTrace(); } log.debug(ClassLayout.parseInstance(d).toPrintableSimple(true)); } }, \"t1\"); t1.start(); new Thread(() -> { try { Thread.sleep(6000); } catch (InterruptedException e) { e.printStackTrace(); } synchronized (d) { log.debug(\"notify\"); d.notify(); } }, \"t2\").start(); } 2.4.1 批量重偏向当一个线程创建了大量对象并执行了初始的同步操作，后来另一个线程也来将这些对象作为锁对象进行操作，会导偏向锁重偏向的操作。 如果对象虽然被多个线程访问，但没有竞争，这时偏向了线程 T1 的对象仍有机会重新偏向 T2，重偏向会重置对象的 Thread ID. 默认偏向锁批量重偏向阈值为20。 （前20个对象会升级为轻量级锁，后面20-40则重偏向） 2.4.2 批量撤销在多线程竞争剧烈的情况下，使用偏向锁将会降低效率，于是乎产生了批量撤销机制。 默认偏向锁批量撤销阈值为40，如果撤销偏向锁次数超过40，不会再重偏向，全部改为不可偏向的，新建的对象也改为不可偏向的。 2.5 锁消除参考深入理解java虚拟机第三版读书笔记13 关闭锁消除优化：-XX:-EliminateLocks 3 wait notify 3.1 原理 Owner 线程发现条件不满足，调用 wait 方法，即可进入 WaitSet 变为 WAITING 状态 BLOCKED 和 WAITING 的线程都处于阻塞状态，不占用 CPU 时间片 BLOCKED 线程会在 Owner 线程释放锁时唤醒 WAITING 线程会在 Owner 线程调用 notify 或 notifyAll 时唤醒，但唤醒后并不意味者立刻获得锁，仍需进入 EntryList 重新竞争 3.2 API obj.wait() 让进入 object 监视器的线程到 waitSet 等待 obj.wait(long millis) 等待限制的时间，超出时间进入就绪状态 obj.notify() 在 object 上正在 waitSet 等待的线程中随机挑一个唤醒 obj.notifyAll() 让 object 上正在 waitSet 等待的线程全部唤醒 它们都是线程之间进行协作的手段，都属于 Object 对象的方法。必须获得此对象的锁，才能调用这几个方法 synchronized(lock) { while(条件不成立) { lock.wait(); } // 干活 } //另一个线程 synchronized(lock) { lock.notifyAll(); } 3.3 sleep(long n) 和 wait(long n) 的区别 sleep 是 Thread 方法，而 wait 是 Object 的方法 sleep 不需要强制和 synchronized 配合使用，但 wait 需要和 synchronized 一起用 sleep 在睡眠的同时，不会释放对象锁的，但 wait 在等待的时候会释放对象锁 4 同步模式之保护性暂停即 Guarded Suspension，用在一个线程等待另一个线程的执行结果 4.1 要点： 有一个结果需要从一个线程传递到另一个线程，让他们关联同一个 GuardedObject 如果有结果不断从一个线程到另一个线程那么可以使用消息队列 JDK 中，join 的实现、Future 的实现，采用的就是此模式 因为要等待另一方的结果，因此归类到同步模式 4.2 实现：class GuardedObject { private Object response; private final Object lock = new Object(); public Object get() { synchronized (lock) { // 条件不满足则等待 while (response == null) { try { lock.wait(); } catch (InterruptedException e) { e.printStackTrace(); } } return response; } } public void complete(Object response) { synchronized (lock) { // 条件满足，通知等待线程 this.response = response; lock.notifyAll(); } } } 带超时的版本： class GuardedObjectV2 { private Object response; private final Object lock = new Object(); public Object get(long millis) { synchronized (lock) { // 1) 记录最初时间 long begin = System.currentTimeMillis(); // 2) 已经经历的时间 long timePassed = 0; while (response == null) { // 4) 假设 millis 是 1000，结果在 400 时唤醒了，那么还有 600 要等 long waitTime = millis - timePassed; log.debug(\"waitTime: {}\", waitTime); if (waitTime &lt;= 0) { log.debug(\"break...\"); break; } try { lock.wait(waitTime); } catch (InterruptedException e) { e.printStackTrace(); } // 3) 如果提前被唤醒，这时已经经历的时间假设为 400 timePassed = System.currentTimeMillis() - begin; log.debug(\"timePassed: {}, object is null {}\", timePassed, response == null); } return response; } } public void complete(Object response) { synchronized (lock) { // 条件满足，通知等待线程 this.response = response; log.debug(\"notify...\"); lock.notifyAll(); } } } 5 异步模式之生产者/消费者 5.1 要点 与前面的保护性暂停中的 GuardObject 不同，不需要产生结果和消费结果的线程一一对应 消息队列可以用来平衡生产和消费的线程资源 生产者仅负责产生结果数据，不关心数据该如何处理，而消费者专心处理结果数据 消息队列是有容量限制的，满时不会再加入数据，空时不会再消耗数据 JDK 中各种阻塞队列，采用的就是这种模式 5.2 实现class Message { private int id; private Object message; public Message(int id, Object message) { this.id = id; this.message = message; } public int getId() { return id; } public Object getMessage() { return message; } } class MessageQueue { private LinkedList&lt;Message> queue; private int capacity; public MessageQueue(int capacity) { this.capacity = capacity; queue = new LinkedList&lt;>(); } public Message take() { synchronized (queue) { while (queue.isEmpty()) { log.debug(\"没货了, wait\"); try { queue.wait(); } catch (InterruptedException e) { e.printStackTrace(); } } Message message = queue.removeFirst(); queue.notifyAll(); return message; } } public void put(Message message) { synchronized (queue) { while (queue.size() == capacity) { log.debug(\"库存已达上限, wait\"); try { queue.wait(); } catch (InterruptedException e) { e.printStackTrace(); } } queue.addLast(message); queue.notifyAll(); } } } 6 park unpark6.1 基本使用它们是 LockSupport 类中的方法 // 暂停当前线程 LockSupport.park(); // 恢复某个线程的运行 LockSupport.unpark(暂停线程对象) 先park再unpark Thread t1 = new Thread(() -> { System.out.println(\"start...\"); try { Thread.sleep(1000); System.out.println(\"park...\"); LockSupport.park(); System.out.println(\"resume...\"); } catch (InterruptedException e) { e.printStackTrace(); } },\"t1\"); t1.start(); Thread.sleep(2000); System.out.println(\"unpark...\"); LockSupport.unpark(t1); 可以先调用unpark再调用park，会抵消。（但是多次unpark也只能抵消一次park） 6.2 特点与 Object 的 wait &amp; notify 相比 wait，notify 和 notifyAll 必须配合 Object Monitor 一起使用，而 park，unpark 不必 park &amp; unpark 是以线程为单位来【阻塞】和【唤醒】线程，而 notify 只能随机唤醒一个等待线程，notifyAll是唤醒所有等待线程，就不那么【精确】 park &amp; unpark 可以先 unpark，而 wait &amp; notify 不能先 notify 7 ReentrantLock相对于 synchronized 它具备如下特点 可中断 可以设置超时时间 可以设置为公平锁 支持多个条件变量 与 synchronized 一样，都支持可重入 // 获取锁 reentrantLock.lock(); try { // 临界区 } finally { // 释放锁 reentrantLock.unlock(); } 7.1 可打断lockInterruptibly()方法等待锁期间可以被interrupt打断 ReentrantLock lock = new ReentrantLock(); Thread t1 = new Thread(() -> { log.debug(\"启动...\"); try { //如果该锁没有被占用就会获得锁 //如果该锁被占用就进入阻塞队列，可以被其他线程用interrupt打断 lock.lockInterruptibly(); } catch (InterruptedException e) { e.printStackTrace(); log.debug(\"等锁的过程中被打断\"); return; } try { log.debug(\"获得了锁\"); } finally { lock.unlock(); } }, \"t1\"); lock.lock(); log.debug(\"获得了锁\"); t1.start(); try { sleep(1); t1.interrupt(); log.debug(\"执行打断\"); } finally { lock.unlock(); } 7.2 锁超时tryLock()可带参可不带参，如果未指定时间，只要该锁被占用就获取不到锁，返回false，如果指定时间，在指定时间内该锁还被占用则获取不到锁，返回false ReentrantLock lock = new ReentrantLock(); Thread t1 = new Thread(() -> { log.debug(\"启动...\"); if (!lock.tryLock()) { log.debug(\"获取立刻失败，返回\"); return; } try { log.debug(\"获得了锁\"); } finally { lock.unlock(); } }, \"t1\"); lock.lock(); log.debug(\"获得了锁\"); t1.start(); try { sleep(2); } finally { lock.unlock(); } 7.3 公平锁ReentrantLock 默认是不公平的，可以使用new ReentrantLock(true)设置为公平锁，采用先到先得的方法获得锁。（排队） 7.4 条件变量 Condition.await() Condition.await(int millis) Condition.signal() Condition.signalAll() 使用要点： await 前需要获得锁 await 执行后，会释放锁，进入 conditionObject 等待 await 的线程被唤醒（或打断、或超时）取重新竞争 lock 锁 竞争 lock 锁成功后，从 await 后继续执行 8 同步模式之顺序控制8.1 固定顺序比如，必须先 2 后 1 打印 8.1.1 wait notify 版// 用来同步的对象 static Object obj = new Object(); // t2 运行标记， 代表 t2 是否执行过 static boolean t2runed = false; public static void main(String[] args) { Thread t1 = new Thread(() -> { synchronized (obj) { // 如果 t2 没有执行过 while (!t2runed) { try { // t1 先等一会 obj.wait(); } catch (InterruptedException e) { e.printStackTrace(); } } } System.out.println(1); }); Thread t2 = new Thread(() -> { System.out.println(2); synchronized (obj) { // 修改运行标记 t2runed = true; // 通知 obj 上等待的线程（可能有多个，因此需要用 notifyAll） obj.notifyAll(); } }); t1.start(); t2.start(); } 8.1.2 Park Unpark 版park 和 unpark 方法比较灵活，他俩谁先调用，谁后调用无所谓。并且是以线程为单位进行『暂停』和『恢复』，不需要『同步对象』和『运行标记』 Thread t1 = new Thread(() -> { try { Thread.sleep(1000); } catch (InterruptedException e) { } // 当没有『许可』时，当前线程暂停运行；有『许可』时，用掉这个『许可』，当前线程恢复运行 LockSupport.park(); System.out.println(\"1\"); }); Thread t2 = new Thread(() -> { System.out.println(\"2\"); // 给线程 t1 发放『许可』（多次连续调用 unpark 只会发放一个『许可』） LockSupport.unpark(t1); }); t1.start(); t2.start(); 8.2 交替输出见leetcode1115-交替打印FooBar 除此之外知道线程对象还可以使用park、unpark。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"多线程","slug":"多线程","permalink":"https://www.codetool.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}]},{"title":"leetcode1115-交替打印FooBar","slug":"leetcode1115-交替打印FooBar","date":"2020-02-01T18:03:48.000Z","updated":"2020-02-01T18:26:40.115Z","comments":true,"path":"article/leetcode1115-交替打印FooBar/","link":"","permalink":"https://www.codetool.top/article/leetcode1115-%E4%BA%A4%E6%9B%BF%E6%89%93%E5%8D%B0FooBar/","excerpt":"","text":"1 原题我们提供一个类： class FooBar { public void foo() { for (int i = 0; i &lt; n; i++) { print(&quot;foo&quot;); } } public void bar() { for (int i = 0; i &lt; n; i++) { print(&quot;bar&quot;); } } }两个不同的线程将会共用一个 FooBar 实例。其中一个线程将会调用 foo() 方法，另一个线程将会调用 bar() 方法。 请设计修改程序，以确保 “foobar” 被输出 n 次。 示例 1: 输入: n = 1输出: “foobar”解释: 这里有两个线程被异步启动。其中一个调用 foo() 方法, 另一个调用 bar() 方法，”foobar” 将被输出一次。 示例 2: 输入: n = 2输出: “foobarfoobar”解释: “foobar” 将被输出两次。 2 解法2.1 思想wait_notify, await_signal 2.2 代码wait_notify class FooBar { boolean flag = false; private int n; public FooBar(int n) { this.n = n; } public void foo(Runnable printFoo) throws InterruptedException { synchronized(this){ for (int i = 0; i &lt; n; i++) { while(flag) this.wait(); // printFoo.run() outputs \"foo\". Do not change or remove this line. printFoo.run(); flag = true; this.notifyAll(); } } } public void bar(Runnable printBar) throws InterruptedException { synchronized(this){ for (int i = 0; i &lt; n; i++) { while(!flag) this.wait(); // printBar.run() outputs \"bar\". Do not change or remove this line. printBar.run(); flag = false; this.notifyAll(); } } } } await_signal class FooBar { private int n; boolean flag; ReentrantLock lock; Condition condition; public FooBar(int n) { this.n = n; lock = new ReentrantLock(); condition = lock.newCondition(); } public void foo(Runnable printFoo) throws InterruptedException { lock.lock(); try{ for (int i = 0; i &lt; n; i++) { while(flag) condition.await(); // printFoo.run() outputs \"foo\". Do not change or remove this line. printFoo.run(); flag = true; condition.signalAll(); } }finally{ lock.unlock(); } } public void bar(Runnable printBar) throws InterruptedException { lock.lock(); try{ for (int i = 0; i &lt; n; i++) { while(!flag) condition.await(); // printBar.run() outputs \"bar\". Do not change or remove this line. printBar.run(); flag = false; condition.signalAll(); } }finally{ lock.unlock(); } } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"多线程","slug":"多线程","permalink":"https://www.codetool.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}]},{"title":"leetcode1114-按序打印","slug":"leetcode1114-按序打印","date":"2020-02-01T11:27:07.000Z","updated":"2020-02-01T11:35:27.657Z","comments":true,"path":"article/leetcode1114-按序打印/","link":"","permalink":"https://www.codetool.top/article/leetcode1114-%E6%8C%89%E5%BA%8F%E6%89%93%E5%8D%B0/","excerpt":"","text":"1 原题我们提供了一个类： public class Foo { public void one() { print(&quot;one&quot;); } public void two() { print(&quot;two&quot;); } public void three() { print(&quot;three&quot;); } }三个不同的线程将会共用一个 Foo 实例。 线程 A 将会调用 one() 方法 线程 B 将会调用 two() 方法 线程 C 将会调用 three() 方法请设计修改程序，以确保 two() 方法在 one() 方法之后被执行，three() 方法在 two() 方法之后被执行。 示例 1: 输入: [1,2,3]输出: “onetwothree”解释:有三个线程会被异步启动。输入 [1,2,3] 表示线程 A 将会调用 one() 方法，线程 B 将会调用 two() 方法，线程 C 将会调用 three() 方法。正确的输出是 “onetwothree”。 示例 2: 输入: [1,3,2]输出: “onetwothree”解释:输入 [1,3,2] 表示线程 A 将会调用 one() 方法，线程 B 将会调用 three() 方法，线程 C 将会调用 two() 方法。正确的输出是 “onetwothree”。 注意: 尽管输入中的数字似乎暗示了顺序，但是我们并不保证线程在操作系统中的调度顺序。 你看到的输入格式主要是为了确保测试的全面性。 2 解法2.1 思想wait_notify 2.2 代码class Foo { boolean first = false; boolean second = false; public Foo() { } public void first(Runnable printFirst) throws InterruptedException { synchronized(this){ // printFirst.run() outputs \"first\". Do not change or remove this line. printFirst.run(); first = true; this.notifyAll(); } } public void second(Runnable printSecond) throws InterruptedException { synchronized(this){ while(!first) this.wait(); // printSecond.run() outputs \"second\". Do not change or remove this line. printSecond.run(); second = true; this.notifyAll(); } } public void third(Runnable printThird) throws InterruptedException { synchronized(this){ while(!second) this.wait(); // printThird.run() outputs \"third\". Do not change or remove this line. printThird.run(); } } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"多线程","slug":"多线程","permalink":"https://www.codetool.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}]},{"title":"leetcode503-下一个更大元素II","slug":"leetcode503-下一个更大元素II","date":"2020-01-31T18:00:58.000Z","updated":"2020-02-20T14:55:21.051Z","comments":true,"path":"article/leetcode503-下一个更大元素II/","link":"","permalink":"https://www.codetool.top/article/leetcode503-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0II/","excerpt":"","text":"1 原题给定一个循环数组（最后一个元素的下一个元素是数组的第一个元素），输出每个元素的下一个更大元素。数字 x 的下一个更大的元素是按数组遍历顺序，这个数字之后的第一个比它更大的数，这意味着你应该循环地搜索它的下一个更大的数。如果不存在，则输出 -1。 示例1: 输入： [1,2,1]输出： [2,-1,2]解释： 第一个 1 的下一个更大的数是 2；数字 2 找不到下一个更大的数；第二个 1 的下一个最大的数需要循环搜索，结果也是 2。 注意: 输入数组的长度不会超过 10000。 2 解法2.1 思想单调栈，维持一个递减的栈，将数组的下标入栈，遇到一个比栈顶元素对应值大的元素弹出栈顶元素，直到栈顶元素比该元素值大，压入该元素。循环搞两次。 2.2 代码class Solution { public int[] nextGreaterElements(int[] nums) { Stack&lt;Integer> stack = new Stack&lt;>(); boolean[] mark = new boolean[nums.length]; int[] ans = new int[nums.length]; for(int n = 0;n&lt;2;n++){ for(int i = 0;i&lt;nums.length;i++){ while(!stack.isEmpty()&amp;&amp;nums[i]>nums[stack.peek()]){ int index = stack.pop(); ans[index] = nums[i]; mark[index] = true; } if(!mark[i]) stack.push(i); } } for(int i = 0;i&lt;ans.length;i++) if(!mark[i]) ans[i] = -1; return ans; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"Java多线程基础","slug":"Java多线程基础","date":"2020-01-31T11:08:06.000Z","updated":"2020-01-31T18:16:48.445Z","comments":true,"path":"article/Java多线程基础/","link":"","permalink":"https://www.codetool.top/article/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/","excerpt":"","text":"1 多线程应用1.1 异步调用以调用方角度来讲，如果 需要等待结果返回，才能继续运行就是同步 不需要等待结果返回，就能继续运行就是异步 同步在多线程中还有另外一个意思，是让多个线程步调一致。 异步可以防止程序阻塞，例如IO操作可以处理为异步的。 1.2 提高效率充分利用多核cpu的优势，提高运行效率。 例外：不是所有计算任务都能拆分，可能运行效率也不会提高。 2 Java线程2.1 创建和运行线程2.1.1 直接使用Thread// 创建线程对象 Thread t = new Thread() { public void run() { // 要执行的任务 } }; // 启动线程 t.start(); 2.1.2 使用Runnable配合ThreadRunnable runnable = new Runnable() { public void run(){ // 要执行的任务 } }; // 创建线程对象 Thread t = new Thread(runnable); // 启动线程 t.start(); Java 8 以后可以使用 lambda 精简代码 // 创建任务对象 Runnable task2 = () -> log.debug(\"hello\"); // 参数1 是任务对象; 参数2 是线程名字，推荐 Thread t2 = new Thread(task2, \"t2\"); t2.start(); 或 Thread t2 = new Thread(()->log.debug(\"hello\"), \"t2\"); t2.start(); 2.1.3 Thread与Runnable的关系在Thread源码中，Runnable被赋给成员变量target，在run()中调用target.run()（组合关系），而直接重写run()就会覆盖掉Thread的run()（继承关系）。 方法1 是把线程和任务合并在了一起，方法2 是把线程和任务分开了 用 Runnable 更容易与线程池等高级 API 配合 用 Runnable 让任务类脱离了 Thread 继承体系，更灵活 2.1.4 FutureTask配合ThreadFutureTask实现了Runnable接口。 FutureTask 能够接收 Callable 类型的参数，用来处理有返回结果的情况。Callable是带返回值类型版本的Runnable。 // 创建任务对象 FutureTask&lt;Integer> task3 = new FutureTask&lt;>(() -> { log.debug(\"hello\"); return 100; }); // 参数1 是任务对象; 参数2 是线程名字，推荐 new Thread(task3, \"t3\").start(); // 主线程阻塞，同步等待 task 执行完毕的结果 Integer result = task3.get(); log.debug(\"结果是:{}\", result); 2.2 linux下对进程线程的操作 ps -fe查看所有进程 ps -fT -p &lt;PID&gt;查看某个进程（PID）的所有线程 kill杀死进程 top 按大写H切换是否显示线程 top -H -p &lt;PID&gt;查看某个进程（PID）的所有线程 2.3 Thread常用方法 方法名 static 功能说明 注意 start() 启动一个新线程，在新的线程运行 run 方法中的代码 start 方法只是让线程进入就绪，里面代码不一定立刻运行（CPU 的时间片还没分给它）。每个线程对象的start方法只能调用一次，如果调用了多次会出现IllegalThreadStateException run() 新线程启动后会调用的方法 如果在构造 Thread 对象时传递了 Runnable 参数，则线程启动后会调用 Runnable 中的 run 方法，否则默认不执行任何操作。但可以创建 Thread 的子类对象，来覆盖默认行为 join() 等待线程运行结束(进程间通信) join(long n) 等待线程运行结束,最多等待n毫秒 getId() 获取线程长整型的 id id 唯一 getName() 获取线程名 setName(String) 修改线程名 getPriority() 获取线程优先级 setPriority(int) 修改线程优先级 java中规定线程优先级是1~10 的整数，较大的优先级能提高该线程被 CPU 调度的机率 getState() 获取线程状态 Java 中线程状态是用 6 个 enum 表示，分别为：NEW, RUNNABLE, BLOCKED, WAITING,TIMED_WAITING, TERMINATED isInterrupted() 判断是否被打断 不会清除打断标记 isAlive() 线程是否存活（还没有运行完毕） interrupt() 打断线程 如果被打断线程正在 sleep，wait，join 会导致被打断的线程抛出 InterruptedException，并清除打断标记；如果打断的正在运行的线程，则会设置打断标记 ；park 的线程被打断，也会设置打断标记 interrupted() static 判断当前线程是否被打断 会清除打断标记 currentThread() static 获取当前正在执行的线程 sleep(long n) static 让当前执行的线程休眠n毫秒，休眠时让出 cpu的时间片给其它线程 yield() static 提示线程调度器让出当前线程对CPU的使用 主要是为了测试和调试 currentThread() static 获取当前线程对象 2.4 sleep与yield2.4.1 sleep 调用 sleep 会让当前线程从 Running 进入 Timed Waiting 状态（阻塞） 其它线程可以使用 interrupt 方法打断正在睡眠的线程，这时 sleep 方法会抛出 InterruptedException 睡眠结束后的线程未必会立刻得到执行 建议用 TimeUnit 的 sleep 代替 Thread 的 sleep 来获得更好的可读性 TimeUnit.SECONDS.sleep(1); TimeUnit.MILLISECONDS.sleep(1) 2.4.2 yield 调用 yield 会让当前线程从 Running 进入 Runnable 就绪状态，然后调度执行其它线程(仍有可能立即被调度) 具体的实现依赖于操作系统的任务调度器 2.4.3 sleep应用在没有利用cpu来计算时,不要让while(true)空转浪费cpu,这时可以使用yield或sleep来让出cpu的使用权给其他程序 while(true){ try{ Thread.sleep(50); }catch(InterruptedException e){ e.printStackTrace(); } } 可以用wait或条件变量达到类似的效果 不同的是,后两种都需要加锁,并且需要相应的唤醒操作,一般适用于要进行同步的场景 sleep适用于无需锁同步的场景 2.5 join方法2.5.1 join方法的作用下面这段代码，线程t1运行改变r的值需要1秒的时间，主线程就获取不了r被改变后的值，可以使用join解决。 static int r = 0; public static void main(String[] args) throws InterruptedException { test1(); } private static void test1() throws InterruptedException { log.debug(\"开始\"); Thread t1 = new Thread(() -> { log.debug(\"开始\"); sleep(1); log.debug(\"结束\"); r = 10; }); t1.start(); //使用join可以等待t1运行结束 //t1.join(); log.debug(\"结果为:{}\", r); log.debug(\"结束\"); } 这种应用就是同步机制。 2.5.2 有时效的joinjoin(long millis)如果在限定的时间内线程没有结束，则当前线程停止等待，继续执行。 join的底层实现是wait 2.6 interrupt方法只是置一个标志位，是否停止运行由线程自己决定。 2.6.1 两阶段终止模式 class TPTInterrupt { private Thread thread; public void start(){ thread = new Thread(() -> { while(true) { Thread current = Thread.currentThread(); if(current.isInterrupted()) { log.debug(\"料理后事\"); break; } try { Thread.sleep(1000); log.debug(\"将结果保存\"); } catch (InterruptedException e) { current.interrupt(); } // 执行监控操作 } },\"监控线程\"); thread.start(); } public void stop() { thread.interrupt(); } } 2.6.2 打断park线程打断 park 线程, 不会清空打断状态 private static void test3() throws InterruptedException { Thread t1 = new Thread(() -> { log.debug(\"park...\"); LockSupport.park(); log.debug(\"unpark...\"); log.debug(\"打断状态：{}\", Thread.currentThread().isInterrupted()); }, \"t1\"); t1.start(); sleep(1); t1.interrupt(); } 2.7 不推荐使用的方法 方法名 static 功能说明 stop() 停止线程运行 suspend() 挂起（暂停）线程运行 resume() 恢复线程运行 2.8 主线程与守护线程默认情况下，Java 进程需要等待所有线程都运行结束，才会结束。有一种特殊的线程叫做守护线程，只要其它非守护线程运行结束了，即使守护线程的代码没有执行完，也会强制结束。 log.debug(\"开始运行...\"); Thread t1 = new Thread(() -> { log.debug(\"开始运行...\"); sleep(2); log.debug(\"运行结束...\"); }, \"daemon\"); // 设置该线程为守护线程 t1.setDaemon(true); t1.start(); sleep(1); log.debug(\"运行结束...\"); 2.9 五种状态这是从 操作系统 层面来描述的 【初始状态】(新建状态)仅是在语言层面创建了线程对象，还未与操作系统线程关联 【可运行状态】（就绪状态）指该线程已经被创建（与操作系统线程关联），可以由 CPU 调度执行 【运行状态】指获取了 CPU 时间片运行中的状态 当 CPU 时间片用完，会从【运行状态】转换至【可运行状态】，会导致线程的上下文切换 【阻塞状态】 如果调用了阻塞 API，如 BIO 读写文件，这时该线程实际不会用到 CPU，会导致线程上下文切换，进入【阻塞状态】 等 BIO 操作完毕，会由操作系统唤醒阻塞的线程，转换至【可运行状态】 与【可运行状态】的区别是，对【阻塞状态】的线程来说只要它们一直不唤醒，调度器就一直不会考虑调度它们 【终止状态】表示线程已经执行完毕，生命周期已经结束，不会再转换为其它状态 2.10 六种状态这是从 Java API 层面来描述的 根据 Thread.State 枚举，分为六种状态： NEW 线程刚被创建，但是还没有调用 start() 方法 RUNNABLE 当调用了 start() 方法之后，注意，Java API 层面的 RUNNABLE 状态涵盖了 操作系统 层面的【可运行状态】、【运行状态】和【阻塞状态】（由于BIO导致的线程阻塞，在Java里无法区分，仍然认为是可运行） BLOCKED ， WAITING ， TIMED_WAITING 都是 Java API 层面对【阻塞状态】的细分 TERMINATED 当线程代码运行结束","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"多线程","slug":"多线程","permalink":"https://www.codetool.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"}]},{"title":"leetcode496-下一个更大元素I","slug":"leetcode496-下一个更大元素I","date":"2020-01-30T18:38:53.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/leetcode496-下一个更大元素I/","link":"","permalink":"https://www.codetool.top/article/leetcode496-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0I/","excerpt":"","text":"1 原题给定两个没有重复元素的数组 nums1 和 nums2 ，其中nums1 是 nums2 的子集。找到 nums1 中每个元素在 nums2 中的下一个比其大的值。 nums1 中数字 x 的下一个更大元素是指 x 在 nums2 中对应位置的右边的第一个比 x 大的元素。如果不存在，对应位置输出-1。 示例1: 输入： nums1 = [4,1,2], nums2 = [1,3,4,2].输出： [-1,3,-1]解释：&nbsp;&nbsp;&nbsp;&nbsp;对于num1中的数字4，你无法在第二个数组中找到下一个更大的数字，因此输出 -1。&nbsp;&nbsp;&nbsp;&nbsp;对于num1中的数字1，第二个数组中数字1右边的下一个较大数字是 3。&nbsp;&nbsp;&nbsp;&nbsp;对于num1中的数字2，第二个数组中没有下一个更大的数字，因此输出 -1。 示例2: 输入： nums1 = [2,4], nums2 = [1,2,3,4].输出： [3,-1]解释：&nbsp;&nbsp;&nbsp;&nbsp;对于num1中的数字2，第二个数组中的下一个较大数字是3。&nbsp;&nbsp;&nbsp;&nbsp;对于num1中的数字4，第二个数组中没有下一个更大的数字，因此输出 -1。 2 解法2.1 思想单调栈，维持一个递减的栈，遇到一个比栈顶元素值大的元素弹出栈顶元素，直到栈顶元素比该元素值大，压入该元素。 2.2 代码class Solution { public int[] nextGreaterElement(int[] nums1, int[] nums2) { Map&lt;Integer,Integer> map = new HashMap&lt;>(); Stack&lt;Integer> stack = new Stack&lt;>(); int ans[] = new int[nums1.length]; for(int i=0;i&lt;nums2.length;i++){ while(!stack.isEmpty()&amp;&amp;nums2[i]>stack.peek()) map.put(stack.pop(),nums2[i]); stack.push(nums2[i]); } for(int i = 0;i&lt;nums1.length;i++){ ans[i] = map.getOrDefault(nums1[i],-1); } return ans; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"深入理解java虚拟机第三版读书笔记13","slug":"深入理解java虚拟机第三版读书笔记13","date":"2020-01-30T08:08:33.000Z","updated":"2020-02-01T10:40:27.031Z","comments":true,"path":"article/深入理解java虚拟机第三版读书笔记13/","link":"","permalink":"https://www.codetool.top/article/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89%E7%89%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B013/","excerpt":"","text":"以下是第十三章 Java内存模型与线程的内容 1 线程安全当多个线程同时访问一个对象时，如果不用考虑这些线程在运行时环境下的调度和交替执行，也不需要进行额外的同步，或者在调用方进行任何其他的协调操作，调用这个对象的行为都可以获得正确的结果，那就称这个对象是线程安全的。 1.1 Java语言中的线程安全我们可以将Java语言中各种操作共享的数据分为以下五类：不可变、绝对线程安全、相对线程安全、线程兼容和线程对立。 1.1.1 不可变不可变的对象一定是线程安全的，“不可变”带来的安全性是最直接、最纯粹的。 Java语言中，如果多线程共享的数据是一个基本数据类型，那么只要在定义时使用final关键字修饰它就可以保证它是不可变的。如果共享数据是一个对象，由于Java语言目前暂时还没有提供值类型的支持，那就需要对象自行保证其行为不会对其状态产生任何影响才行。 String就是一个典型的不可变对象。 1.1.2 绝对线程安全不管运行时环境如何，调用者都不需要任何额外的同步措施，即使在方法调用端。 1.1.3 相对线程安全相对线程安全就是我们通常意义上所讲的线程安全，它需要保证对这个对象单次的操作是线程安全的，我们在调用的时候不需要进行额外的保障措施，但是对于一些特定顺序的连续调用，就可能需要在调用端使用额外的同步手段来保证调用的正确性。 1.1.4 线程兼容对象本身并不是线程安全的，但是可以通过在调用端正确地使用同步手段来保证对象在并发环境中可以安全地使用。我们平常说一个类不是线程安全的，通常就是指这种情况。Java类库API中大部分的类都是线程兼容的，如与前面的Vector和HashTable相对应的集合类ArrayList和HashMap等。 1.1.5 线程对立线程对立是指不管调用端是否采取了同步措施，都无法在多线程环境中并发使用代码。由于Java语言天生就支持多线程的特性，线程对立这种排斥多线程的代码是很少出现的，而且通常都是有害的，应当尽量避免。一个线程对立的例子是Thread类的suspend()和resume()方法。如果有两个线程同时持有一个线程对象，一个尝试去中断线程，一个尝试去恢复线程，在并发进行的情况下，无论调用时是否进行了同步，目标线程都存在死锁风险——假如suspend()中断的线程就是即将要执行resume()的那个线程，那就肯定要产生死锁了。也正是这个原因，suspend()和resume()方法都已经被声明废弃了。常见的线程对立的操作还有System.setIn()、System.setOut()和System.runFinalizersOnExit()等。 1.2 线程安全的实现方法1.2.1 互斥同步互斥同步是一种最常见也是最主要的并发正确性保障手段。同步是指在多个线程并发访问共享数据时，保证共享数据在同一个时刻只被一条（或者是一些，当使用信号量的时候）线程使用。而互斥是实现同步的一种手段，临界区、互斥量和信号量都是常见的互斥实现方式。因此在“互斥同步”这四个字里面，互斥是因，同步是果；互斥是方法，同步是目的。 在Java里面，最基本的互斥同步手段就是synchronized关键字，这是一种块结构的同步语法。synchronized关键字经过Javac编译之后，会在同步块的前后分别形成monitorenter和monitorexit这两个字节码指令。这两个字节码指令都需要一个reference类型的参数来指明要锁定和解锁的对象。如果Java源码中的synchronized明确指定了对象参数，那就以这个对象的引用作为reference；如果没有明确指定，那将根据synchronized修饰的方法类型（如实例方法或类方法），来决定是取代码所在的对象实例还是取类型对应的Class对象来作为线程要持有的锁。 注意： 被synchronized修饰的同步块对同一条线程来说是可重入的。这意味着同一线程反复进入同步块也不会出现自己把自己锁死的情况。 被synchronized修饰的同步块在持有锁的线程执行完毕并释放锁之前，会无条件地阻塞后面其他线程的进入。这意味着无法像处理某些数据库中的锁那样，强制已获取锁的线程释放锁；也无法强制正在等待锁的线程中断等待或超时退出。 从执行成本的角度看，持有锁是一个重量级的操作。Java如果要阻塞或唤醒一条线程，则需要操作系统来帮忙完成，这就不可避免地陷入用户态到核心态的转换中，进行这种状态转换需要耗费很多的处理器时间。所以说synchronized是Java的一个重量级操作。而虚拟机本身也会进行一些优化，譬如在通知操作系统阻塞线程之前加入一段自旋等待过程，以避免频繁地切入核心态之中。 自JDK 5起，Java类库中新提供了java.util.concurrent包，其中的java.util.concurrent.locks.Lock接口便成了Java的另一种全新的互斥同步手段。基于Lock接口，用户能够以非块结构来实现互斥同步，从而摆脱了语言特性的束缚，改为在类库层面去实现同步，这也为日后扩展出不同调度算法、不同特征、不同性能、不同语义的各种锁提供了广阔的空间。 重入锁（ReentrantLock）是Lock接口最常见的一种实现，顾名思义，它与synchronized一样是可重入的。在基本用法上，ReentrantLock也与synchronized很相似，只是代码写法上稍有区别而已。不过，ReentrantLock与synchronized相比增加了一些高级功能，主要有以下三项： 等待可中断：是指当持有锁的线程长期不释放锁的时候，正在等待的线程可以选择放弃等待，改为处理其他事情。 可中断特性对处理执行时间非常长的同步块很有帮助。 公平锁：是指多个线程在等待同一个锁时，必须按照申请锁的时间顺序来依次获得锁；而非公平锁则不保证这一点，在锁被释放时，任何一个等待锁的线程都有机会获得锁。synchronized中的锁是非公平的，ReentrantLock在默认情况下也是非公平的，但可以通过带布尔值的构造函数要求使用公平锁。不过一旦使用了公平锁，将会导致ReentrantLock的性能急剧下降，会明显影响吞吐量。 锁绑定多个条件：是指一个ReentrantLock对象可以同时绑定多个Condition对象。 在synchronized中，锁对象的wait()跟它的notify()或者notifyAll()方法配合可以实现一个隐含的条件，如果要和多于一个的条件关联的时候，就不得不额外添加一个锁；而ReentrantLock则无须这样做，多次调用newCondition()方法即可。 JDK6以后synchronized和ReentrantLock的性能差距已经不大。 synchronized的优点： synchronized是在Java语法层面的同步，足够清晰，也足够简单。每个Java程序员都熟悉 synchronized，但J.U.C中的Lock接口则并非如此。因此在只需要基础的同步功能时，更推荐 synchronized。 Lock应该确保在finally块中释放锁，否则一旦受同步保护的代码块中抛出异常，则有可能永远不会释放持有的锁。这一点必须由程序员自己来保证，而使用synchronized的话则可以由Java虚拟机来确保即使出现异常，锁也能被自动释放。 尽管在JDK 5时代ReentrantLock曾经在性能上领先过synchronized，但这已经是十多年之前的胜利了。从长远来看，Java虚拟机更容易针对synchronized来进行优化，因为Java虚拟机可以在线程和对象的元数据中记录synchronized中锁的相关信息，而使用J.U.C中的Lock的话，Java虚拟机是很难得知具体哪些锁对象是由特定线程锁持有的。 1.2.2 非阻塞同步互斥同步面临的主要问题是进行线程阻塞和唤醒所带来的性能开销，因此这种同步也被称为阻塞同步（Blocking Synchronization）。 从解决问题的方式上看，互斥同步属于一种悲观的并发策略，其总是认为只要不去做正确的同步措施（例如加锁），那就肯定会出现问题。随着硬件指令集的发展，我们已经有了另外一个选择：基于冲突检测的乐观并发策略，通俗地说就是不管风险，先进行操作，如果没有其他线程争用共享数据，那操作就直接成功了；如果共享的数据的确被争用，产生了冲突，那再进行其他的补偿措施，最常用的补偿措施是不断地重试，直到出现没有竞争的共享数据为止。这种乐观并发策略的实现不再需要把线程阻塞挂起，因此这种同步操作被称为非阻塞同步，使用这种措施的代码也常被称为无锁编程。 为了实现乐观并发策略，硬件保证某些从语义上看起来需要多次操作的行为可以只通过一条处理器指令就能完成，这类指令常用的有： 测试并设置（Test-and-Set） 获取并增加（Fetch-and-Increment） 交换（Swap） 比较并交换（Compare-and-Swap，简称CAS） 加载链接/条件储存（Load-Linked/Store-Conditional，简称LL/SC） CAS指令需要有三个操作数，分别是内存位置（在Java中可以简单地理解为变量的内存地址，用V表示）、旧的预期值（用A表示）和准备设置的新值（用B表示）。CAS指令执行时，当且仅当V符合A时，处理器才会用B更新V的值，否则它就不执行更新。 但是，不管是否更新了V的值，都会返回V的旧值，上述的处理过程是一个原子操作，执行期间不会被其他线程中断。 在JDK 5之后，sun.misc.Unsafe类里面的compareAndSwapInt()和compareAndSwapLong()等几个方法包装提供CAS操作。HotSpot虚拟机在内部对这些方法做了特殊处理，即时编译出来的结果就是一条平台相关的处理器CAS指令，没有方法调用的过程，或者可以认为是无条件内联进去了。不过由于Unsafe类在设计上就不是提供给用户程序调用的类（Unsafe::getUnsafe()的代码中限制了只有启动类加载器加载的Class才能访问它），因此在JDK 9之前只有Java类库可以使用CAS。而如果用户程序也有使用CAS操作的需求，那要么就采用反射手段突破Unsafe的访问限制，要么就只能通过Java类库API来间接使用它。直到JDK 9之后，Java类库才在VarHandle类里开放了面向用户程序使用的CAS操作。 例：（使用AtomicInteger实现原子操作） CAS存在一个逻辑漏洞：如果一个变量V初次读取的时候是A值，并且在准备赋值的时候检查到它仍然为A值，仍有可能是因为在这段期间它的值曾经被改成B，后来又被改回为A，那CAS操作就会误认为它从来没有被改变过。这个漏洞称为CAS操作的“ABA问题”。J.U.C包为了解决这个问题，提供了一个带有标记的原子引用类AtomicStampedReference，它可以通过控制变量值的版本来保证CAS的正确性。不过目前来说这个类处于相当鸡肋的位置，大部分情况下ABA问题不会影响程序并发的正确性，如果需要解决ABA问题，改用传统的互斥同步可能会比原子类更为高效。 1.2.3 无同步方案有一些代码天生就是线程安全的： 可重入代码：可以在代码执行的任何时刻中断它，转而去执行另外一段代码（包括递归调用它本身），而在控制权返回后，原来的程序不会出现任何错误，也不会对结果有所影响。 线程本地存储：如果一段代码中所需要的数据必须与其他代码共享，那就看看这些共享数据的代码是否能保证在同一个线程中执行。如果能保证，我们就可以把共享数据的可见范围限制在同一个线程之内，这样，无须同步也能保证线程之间不出现数据争用的问题。 我们可以通过java.lang.ThreadLocal类来实现线程本地存储的功能。每一个线程的Thread对象中都有一个ThreadLocalMap对象，这个对象存储了一组以ThreadLocal.threadLocalHashCode为键，以本地线程变量为值的K-V值对。 2 锁优化2.1 自旋锁与自适应自旋现在绝大多数的个人电脑和服务器都是多路（核）处理器系统，如果物理机器有一个以上的处理器或者处理器核心，能让两个或以上的线程同时并行执行，我们就可以让后面请求锁的那个线程“稍等一会”，但不放弃处理器的执行时间，看看持有锁的线程是否很快就会释放锁。为了让线程等待，我们只须让线程执行一个忙循环（自旋），这项技术就是所谓的自旋锁。 自旋等待的时间有一定的限度，如果自旋超过了限定的次数仍然没有成功获得锁，就应当使用传统的方式去挂起线程，默认值是十次，用户也可以使用参数-XX：PreBlockSpin来自行更改。 JDK 6中引入了自适应的自旋。自适应意味着自旋的时间不再是固定的了，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定的。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也很有可能再次成功，进而允许自旋等待持续相对更长的时间，比如持续100次忙循环。另一方面，如果对于某个锁，自旋很少成功获得过锁，那在以后要获取这个锁时将有可能直接省略掉自旋过程，以避免浪费处理器资源。 2.2 锁消除锁消除是指虚拟机即时编译器在运行时，对一些代码要求同步，但是对被检测到不可能存在共享数据竞争的锁进行消除。如果判断到一段代码中，在堆上的所有数据都不会逃逸出去被其他线程访问到，那就可以把它们当作栈上数据对待，认为它们是线程私有的，同步加锁自然就无须再进行。 2.3 锁粗化通常编写代码时推荐将同步块的作用范围限制得尽量小，但是如果一系列的连续操作都对同一个对象反复加锁和解锁，甚至加锁操作是出现在循环体之中的，那即使没有线程竞争，频繁地进行互斥同步操作也会导致不必要的性能损耗。 如果虚拟机探测到有这样一串零碎的操作都对同一个对象加锁，将会把加锁同步的范围扩展（粗化）到整个操作序列的外部。 2.4 轻量级锁轻量级锁是JDK 6时加入的新型锁机制，“轻量级”是相对于使用操作系统互斥量来实现的传统锁而言的，因此传统的锁机制就被称为“重量级”锁。它设计的初衷是在没有多线程竞争的前提下，减少传统的重量级锁使用操作系统互斥量产生的性能消耗。 HotSpot虚拟机的对象头分为两部分，第一部分用于存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄等。这部分数据的长度在32位和64位的Java虚拟机中分别会占用32个或64个比特，官方称它为“Mark Word”。这部分是实现轻量级锁和偏向锁的关键。另外一部分用于存储指向方法区对象类型数据的指针，如果是数组对象，还会有一个额外的部分用于存储数组长度。 轻量级锁的工作过程: 在代码即将进入同步块的时候，如果此同步对象没有被锁定（锁标志位为“01”状态），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝（官方为这份拷贝加了一个Displaced前缀，即Displaced Mark Word），这时候线程堆栈与对象头的状态如图: 然后，虚拟机将使用CAS操作尝试把对象的Mark Word更新为指向Lock Record的指针。如果这个更新动作成功了，即代表该线程拥有了这个对象的锁，并且对象Mark Word的锁标志位（Mark Word的最后两个比特）将转变为“00”，表示此对象处于轻量级锁定状态。这时候线程堆栈与对象头的状态如图所示: 如果这个更新操作失败了，那就意味着至少存在一条线程与当前线程竞争获取该对象的锁。虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是，说明当前线程已经拥有了这个对象的锁，那直接进入同步块继续执行就可以了，否则就说明这个锁对象已经被其他线程抢占了。如果出现两条以上的线程争用同一个锁的情况，那轻量级锁就不再有效，必须要膨胀为重量级锁，锁标志的状态值变为“10”，此时Mark Word中存储的就是指向重量级锁（互斥量）的指针，后面等待锁的线程也必须进入阻塞状态。 轻量级锁的解锁过程同样是通过CAS操作来进行的，如果对象的Mark Word仍然指向线程的锁记录，那就用CAS操作把对象当前的Mark Word和线程中复制的Displaced Mark Word替换回来。假如能够成功替换，那整个同步过程就顺利完成了；如果替换失败，则说明有其他线程尝试过获取该锁，就要在释放锁的同时，唤醒被挂起的线程。 轻量级锁能提升程序同步性能的依据是“对于绝大部分的锁，在整个同步周期内都是不存在竞争的”这一经验法则。如果没有竞争，轻量级锁便通过CAS操作成功避免了使用互斥量的开销；但如果确实存在锁竞争，除了互斥量的本身开销外，还额外发生了CAS操作的开销。因此在有竞争的情况下，轻量级锁反而会比传统的重量级锁更慢。 如果发生锁重入Mark Word会反复入栈。 2.5 偏向锁偏向锁也是JDK 6中引入的一项锁优化措施，它的目的是消除数据在无竞争情况下的同步原语，进一步提高程序的运行性能。如果说轻量级锁是在无竞争的情况下使用CAS操作去消除同步使用的互斥量，那偏向锁就是在无竞争的情况下把整个同步都消除掉，连CAS操作都不去做了。 偏向锁的意思是这个锁会偏向于第一个获得它的线程，如果在接下来的执行过程中，该锁一直没有被其他的线程获取，则持有偏向锁的线程将永远不需要再进行同步。 假设当前虚拟机启用了偏向锁，那么当锁对象第一次被线程获取的时候，虚拟机将会把对象头中的标志位设置为“01”、把偏向模式设置为“1”，表示进入偏向模式。同时使用CAS操作把获取到这个锁的线程的ID记录在对象的Mark Word之中。如果CAS操作成功，持有偏向锁的线程以后每次进入这个锁相关的同步块时，虚拟机都可以不再进行任何同步操作。 一旦出现另外一个线程去尝试获取这个锁的情况，偏向模式就马上宣告结束。根据锁对象目前是否处于被锁定的状态决定是否撤销偏向（偏向模式设置为“0”），撤销后标志位恢复到未锁定（标志位为“01”）或轻量级锁定（标志位为“00”）的状态，后续的同步操作就按照上面介绍的轻量级锁那样去执行。偏向锁、轻量级锁的状态转化及对象Mark Word的关系如图所示： 当一个对象已经计算过一致性哈希码后，它就再也无法进入偏向锁状态了；而当一个对象当前正处于偏向锁状态，又收到需要计算其一致性哈希码请求时，它的偏向状态会被立即撤销，并且锁会膨胀为重量级锁。在重量级锁的实现中，对象头指向了重量级锁的位置，代表重量级锁的ObjectMonitor类里有字段可以记录非加锁状态（标志位为“01”）下的Mark Word，其中自然可以存储原来的哈希码。 如果程序中大多数的锁都总是被多个不同的线程访问，那偏向模式就是多余的。在具体问题具体分析的前提下，有时候使用参数-XX：-UseBiasedLocking来禁止偏向锁优化反而可以提升性能。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"深入理解java虚拟机","slug":"深入理解java虚拟机","permalink":"https://www.codetool.top/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"leetcode456-132模式","slug":"leetcode456-132模式","date":"2020-01-29T18:19:44.000Z","updated":"2020-02-20T14:55:21.051Z","comments":true,"path":"article/leetcode456-132模式/","link":"","permalink":"https://www.codetool.top/article/leetcode456-132%E6%A8%A1%E5%BC%8F/","excerpt":"","text":"1 原题给定一个整数序列：a1, a2, …, an，一个132模式的子序列 ai, aj, ak 被定义为：当 i &lt; j &lt; k 时，ai &lt; ak &lt; aj。设计一个算法，当给定有 n 个数字的序列时，验证这个序列中是否含有132模式的子序列。 注意： n 的值小于15000。 示例1: 输入： [1, 2, 3, 4]输出： False解释： 序列中不存在132模式的子序列。 示例2: 输入： [3, 1, 4, 2]输出： True解释： 序列中有 1 个132模式的子序列： [1, 4, 2]. 示例3: 输入： [-1, 3, 2, 0]输出： True解释： 序列中有 3 个132模式的的子序列: [-1, 3, 2], [-1, 3, 0] 和 [-1, 2, 0]. 2 解法2.1 思想 暴力，从尾向头遍历，如果当前元素是132中的最后一个元素，则前面和中间一定分别有一个小于当前元素的元素和一个大于当前元素的元素。 栈，参考 https://leetcode-cn.com/problems/132-pattern/solution/132mo-shi-by-leetcode-2/ 2.2 代码 暴力 class Solution { public boolean find132pattern(int[] nums) { for(int i = nums.length-1;i>=2;i--){ int tail = nums[i]; boolean hasPeek = false; for(int j = i-1;j>=0;j--){ if(nums[j]>tail) hasPeek = true; else if(hasPeek&amp;&amp;nums[j]&lt;tail) return true; } } return false; } } 栈 public class Solution { public boolean find132pattern(int[] nums) { if (nums.length &lt; 3) return false; Stack&lt;Integer> stack = new Stack&lt;>(); int[] min = new int[nums.length]; min[0] = nums[0]; for (int i = 1; i &lt; nums.length; i++) min[i] = Math.min(min[i - 1], nums[i]); for (int j = nums.length - 1; j >= 0; j--) { if (nums[j] > min[j]) { while (!stack.isEmpty() &amp;&amp; stack.peek() &lt;= min[j]) stack.pop(); if (!stack.isEmpty() &amp;&amp; stack.peek() &lt; nums[j]) return true; stack.push(nums[j]); } } return false; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"深入理解java虚拟机第三版读书笔记12","slug":"深入理解java虚拟机第三版读书笔记12","date":"2020-01-29T08:25:14.000Z","updated":"2020-02-13T05:53:37.261Z","comments":true,"path":"article/深入理解java虚拟机第三版读书笔记12/","link":"","permalink":"https://www.codetool.top/article/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89%E7%89%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B012/","excerpt":"","text":"以下是第十二章 Java内存模型与线程的内容 1 硬件的效率与一致性基于高速缓存的存储交互很好地解决了处理器与内存速度之间的矛盾，但是也为计算机系统带来更高的复杂度，它引入了一个新的问题：缓存一致性。在多路处理器系统中，每个处理器都有自己的高速缓存，而它们又共享同一主内存。当多个处理器的运算任务都涉及同一块主内存区域时，将可能导致各自的缓存数据不一致。为了解决一致性的问题，需要各个处理器访问缓存时都遵循一些协议，在读写时要根据协议来进行操作，这类协议有MSI、MESI（Illinois Protocol）、MOSI、Synapse、Firefly及Dragon Protocol等。 不同架构的物理机器可以拥有不一样的内存模型，而Java虚拟机也有自己的内存模型，并且与这里介绍的内存访问操作及硬件的缓存访问操作具有高度的可类比性。 2 Java内存模型2.1 主内存与工作内存Java内存模型规定了所有的变量都存储在主内存中，每条线程还有自己的工作内存，线程对变量的所有操作都必须在工作内存中进行，而不能直接读写主内存中的数据，不同的线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成。 主内存、工作内存与Java内存区域中的Java堆、栈、方法区等并不是同一个层次的对内存的划分，这两者基本上是没有任何关系的。 2.2 内存间交互操作关于主内存与工作内存之间具体的交互协议，Java内存模型中定义了以下8种操作来完成。每一种操作都是原子的、不可再分的： lock（锁定）：作用于主内存的变量，它把一个变量标识为一条线程独占的状态。 unlock（解锁）：作用于主内存的变量，它把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。 read（读取）：作用于主内存的变量，它把一个变量的值从主内存传输到线程的工作内存中，以便随后的load动作使用。 load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。 use（使用）：作用于工作内存的变量，它把工作内存中一个变量的值传递给执行引擎，每当虚拟机遇到一个需要使用变量的值的字节码指令时将会执行这个操作。 assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收的值赋给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。 store（存储）：作用于工作内存的变量，它把工作内存中一个变量的值传送到主内存中，以便随后的write操作使用。 write（写入）：作用于主内存的变量，它把store操作从工作内存中得到的变量的值放入主内存的变量中。 如果要把一个变量从主内存拷贝到工作内存，那就要按顺序执行read和load操作，相反就要顺序执行store和write操作。可以不连续执行，但必须相对地顺序在执行。 这些操作必须满足规则： 不允许read和load、store和write操作之一单独出现，即不允许一个变量从主内存读取了但工作内存不接受，或者工作内存发起回写了但主内存不接受的情况出现。 不允许一个线程丢弃它最近的assign操作，即变量在工作内存中改变了之后必须把该变化同步回主内存。 不允许一个线程无原因地（没有发生过任何assign操作）把数据从线程的工作内存同步回主内存中。 一个新的变量只能在主内存中“诞生”，不允许在工作内存中直接使用一个未被初始化（load或 assign）的变量，换句话说就是对一个变量实施use、store操作之前，必须先执行assign和load操作。 一个变量在同一个时刻只允许一条线程对其进行lock操作，但lock操作可以被同一条线程重复执行多次，多次执行lock后，只有执行相同次数的unlock操作，变量才会被解锁。 如果对一个变量执行lock操作，那将会清空工作内存中此变量的值，在执行引擎使用这个变量前，需要重新执行load或assign操作以初始化变量的值。 如果一个变量事先没有被lock操作锁定，那就不允许对它执行unlock操作，也不允许去unlock一个被其他线程锁定的变量。 对一个变量执行unlock操作之前，必须先把此变量同步回主内存中（执行store、write操作）。 最近JSR-133文档中把Java内存模型的操作简化成read、write、lock和unlock四种，但实际设计没有变。 2.3 对于volatile型变量的特殊规则当一个变量被定义成volatile之后，它将具备两项特性： 第一项是保证此变量对所有线程的可见性，这里的“可见性”是指当一条线程修改了这个变量的值，新值对于其他线程来说是可以立即得知的。而普通变量并不能做到这一点，普通变量的值在线程间传递时均需要通过主内存来完成。 Java里面的运算操作符并非原子操作，这导致volatile变量的运算在并发下一样是不安全的，示例： 这段代码发起了20个线程，每个线程对race变量进行10000次自增操作，如果这段代码能够正确并发的话，最后输出的结果应该是200000。读者运行完这段代码之后，并不会获得期望的结果，而且会发现每次运行程序，输出的结果都不一样，都是一个小于200000的数字。 问题就出在自增运算“race++”之中，反编译这段代码后，发现只有一行代码的increase()方法在Class文件中是由4条字节码指令构成。从字节码层面上已经很容易分析出并发失败的原因了：当getstatic指令把 race的值取到操作栈顶时，volatile关键字保证了race的值在此时是正确的，但是在执行iconst_1、iadd这些指令的时候，其他线程可能已经把race的值改变了，而操作栈顶的值就变成了过期的数据，所以 putstatic指令执行后就可能把较小的race值同步回主内存之中。 public static void increase(); Code: Stack=2, Locals=0, Args_size=0 0: getstatic #13; //Field race:I 3: iconst_1 4: iadd 5: putstatic #13; //Field race:I 8: return LineNumberTable: line 14: 0 line 15: 8由于volatile变量只能保证可见性，在不符合以下两条规则的运算场景中，我们仍然要通过加锁（使用synchronized、java.util.concurrent中的锁或原子类）来保证原子性： 运算结果并不依赖变量的当前值，或者能够确保只有单一的线程修改变量的值。 变量不需要与其他的状态变量共同参与不变约束。 第二项是禁止指令重排序优化： 有volatile修饰的变量，赋值后（前面mov%eax，0x150(%esi)这句便是赋值操作）多执行了一个“lock addl$0x0，(%esp)”操作，这个操作的作用相当于一个内存屏障,指令重排序时不能把后面的指令重排序到内存屏障之前的位置。 这种操作相当于对缓存中的变量做了一次前面介绍Java内存模式中所说的“store和write”操作。所以通过这样一个空操作，可让前面volatile变量的修改对其他处理器立即可见。 Java内存模型中对volatile变量定义的特殊规则的定义: 假定T表示一个线程，V和W分别表示两个volatile型变量，那么在进行read、load、use、assign、store和write操作时需要满足如下规则： 只有当线程T对变量V执行的前一个动作是load的时候，线程T才能对变量V执行use动作；并且，只有当线程T对变量V执行的后一个动作是use的时候，线程T才能对变量V执行load动作。线程T对变量V的use动作可以认为是和线程T对变量V的load、read动作相关联的，必须连续且一起出现。 这条规则要求在工作内存中，每次使用V前都必须先从主内存刷新最新的值，用于保证能看见其他线程对变量V所做的修改。 只有当线程T对变量V执行的前一个动作是assign的时候，线程T才能对变量V执行store动作；并且，只有当线程T对变量V执行的后一个动作是store的时候，线程T才能对变量V执行assign动作。线程T对变量V的assign动作可以认为是和线程T对变量V的store、write动作相关联的，必须连续且一起出现。 这条规则要求在工作内存中，每次修改V后都必须立刻同步回主内存中，用于保证其他线程可以看到自己对变量V所做的修改。 假定动作A是线程T对变量V实施的use或assign动作，假定动作F是和动作A相关联的load或store动作，假定动作P是和动作F相应的对变量V的read或write动作；与此类似，假定动作B是线程T对变量W实施的use或assign动作，假定动作G是和动作B相关联的load或store动作，假定动作Q是和动作G相应的对变量W的read或write动作。如果A先于B，那么P先于Q。 这条规则要求volatile修饰的变量不会被指令重排序优化，从而保证代码的执行顺序与程序的顺序相同。 2.4 针对long和double型变量的特殊规则对于64位的数据类型（long和double），允许虚拟机将没有被volatile修饰的64位数据的读写操作划分为两次32位的操作来进行，即允许虚拟机实现自行选择是否要保证64位数据类型的load、store、read和write这四个操作的原子性，这就是所谓的“long和double的非原子性协定”。 但是目前主流平台下商用的64位Java虚拟机中并不会出现非原子性访问行为。并且JDK9开始实验性的虚拟机参数-XX：+AlwaysAtomicAccesses要求对所有数据类型进行原子性的访问。 2.5 原子性、可见性与有序性Java内存模型是围绕着在并发过程中如何处理原子性、可见性和有序性这三个特征来建立的。 2.5.1 原子性由Java内存模型来直接保证的原子性变量操作包括read、load、assign、use、store和write这六个，我们大致可以认为，基本数据类型的访问、读写都是具备原子性的（例外就是long和double的非原子性协定） 如果应用场景需要一个更大范围的原子性保证，通常通过synchronized来实现。 2.5.2 可见性可见性就是指当一个线程修改了共享变量的值时，其他线程能够立即得知这个修改。普通变量与volatile变量的区别是，volatile的特殊规则保证了新值能立即同步到主内存，以及每次使用前立即从主内存刷新。因此我们可以说volatile保证了多线程操作时变量的可见性，而普通变量则不能保证这一点。 除了volatile之外，Java还有两个关键字能实现可见性，它们是synchronized和final。 同步块的可见性是由“对一个变量执行unlock操作之前，必须先把此变量同步回主内存中（执行store、write操作）”这条规则获得的。而final关键字的可见性是指：被final修饰的字段在构造器中一旦被初始化完成，并且构造器没有把“this”的引用传递出去（this引用逃逸是一件很危险的事情，其他线程有可能通过这个引用访问到“初始化了一半”的对象），那么在其他线程中就能看见final字段的值。 2.5.3 有序性Java程序中天然的有序性可以总结为一句话：如果在本线程内观察，所有的操作都是有序的；如果在一个线程中观察另一个线程，所有的操作都是无序的。前半句是指“线程内似表现为串行的语义”，后半句是指“指令重排序”现象和“工作内存与主内存同步延迟”现象。 Java语言提供了volatile和synchronized两个关键字来保证线程之间操作的有序性，volatile关键字本身就包含了禁止指令重排序的语义，而synchronized则是由“一个变量在同一个时刻只允许一条线程对其进行lock操作”这条规则获得的，这个规则决定了持有同一个锁的两个同步块只能串行地进入。 2.6 先行发生原则先行发生是Java内存模型中定义的两项操作之间的偏序关系，比如说操作A先行发生于操作B，其实就是说在发生操作B之前，操作A产生的影响能被操作B 观察到，“影响”包括修改了内存中共享变量的值、发送了消息、调用了方法等。 // 以下操作在线程A中执行 i = 1; // 以下操作在线程B中执行 j = i; // 以下操作在线程C中执行 i = 2; 假设线程A中的操作“i=1”先行发生于线程B的操作“j=i”，那我们就可以确定在线程B的操作执行后，变量j的值一定是等于1，得出这个结论的依据有两个：一是根据先行发生原则，“i=1”的结果可以被观察到；二是线程C还没登场，线程A操作结束之后没有其他线程会修改变量i的值。现在再来考虑线程C，我们依然保持线程A和B之间的先行发生关系，而C出现在线程A和B的操作之间，但是C与B没有先行发生关系，那j的值会是多少呢？答案是不确定！1和2都有可能，因为线程C对变量i的影响可能会被线程B观察到，也可能不会，这时候线程B就存在读取到过期数据的风险，不具备多线程安全性。 下面是Java内存模型下一些“天然的”先行发生关系，这些先行发生关系无须任何同步器协助就已经存在，可以在编码中直接使用。如果两个操作之间的关系不在此列，并且无法从下列规则推导出来，则它们就没有顺序性保障，虚拟机可以对它们随意地进行重排序。 程序次序规则：在一个线程内，按照控制流顺序，书写在前面的操作先行发生于书写在后面的操作。注意，这里说的是控制流顺序而不是程序代码顺序，因为要考虑分支、循环等结构。 管程锁定规则：一个unlock操作先行发生于后面对同一个锁的lock操作。这里必须强调的是“同一个锁”，而“后面”是指时间上的先后。 volatile变量规则：对一个volatile变量的写操作先行发生于后面对这个变量的读操作，这里的“后面”同样是指时间上的先后。 线程启动规则：Thread对象的start()方法先行发生于此线程的每一个动作。 线程终止规则：线程中的所有操作都先行发生于对此线程的终止检测，我们可以通过Thread::join()方法是否结束、Thread::isAlive()的返回值等手段检测线程是否已经终止执行。 线程中断规则：对线程interrupt()方法的调用先行发生于被中断线程的代码检测到中断事件的发生，可以通过Thread::interrupted()方法检测到是否有中断发生。 对象终结规则：一个对象的初始化完成（构造函数执行结束）先行发生于它的 finalize()方法的开始。 传递性：如果操作A先行发生于操作B，操作B先行发生于操作C，那就可以得出操作A先行发生于操作C的结论。 3 Java与线程3.1 线程的实现目前线程是Java里面进行处理器资源调度的最基本单位，主流的操作系统都提供了线程实现，Java语言则提供了在不同硬件和操作系统平台下对线程操作的统一处理，每个已经调用过start()方法且还未结束的java.lang.Thread类的实例就代表着一个线程。 实现线程主要有三种方式：使用内核线程实现（1：1实现），使用用户线程实现（1：N实现），使用用户线程加轻量级进程混合实现（N：M实现）。 3.1.1 内核线程实现使用内核线程实现的方式也被称为1：1实现。内核线程（Kernel-Level Thread，KLT）就是直接由操作系统内核支持的线程，这种线程由内核来完成线程切换，内核通过操纵调度器（Scheduler）对线程进行调度，并负责将线程的任务映射到各个处理器上。每个内核线程可以视为内核的一个分身，这样操作系统就有能力同时处理多件事情，支持多线程的内核就称为多线程内核。 程序一般不会直接使用内核线程，而是使用内核线程的一种高级接口——轻量级进程（LightWeight Process，LWP），轻量级进程就是我们通常意义上所讲的线程，由于每个轻量级进程都由一个内核线程支持，因此只有先支持内核线程，才能有轻量级进程。这种轻量级进程与内核线程之间1：1 的关系称为一对一的线程模型。 由于内核线程的支持，每个轻量级进程都成为一个独立的调度单元，即使其中某一个轻量级进程在系统调用中被阻塞了，也不会影响整个进程继续工作。轻量级进程也具有它的局限性：首先，由于是基于内核线程实现的，所以各种线程操作，如创建、析构及同步，都需要进行系统调用。而系统调用的代价相对较高，需要在用户态（User Mode）和内核态（Kernel Mode）中来回切换。其次，每个轻量级进程都需要有一个内核线程的支持，因此轻量级进程要消耗一定的内核资源（如内核线程的栈空间），因此一个系统支持轻量级进程的数量是有限的。 3.1.2 用户线程实现广义上来讲，一个线程只要不是内核线程，都可以认为是用户线程（User Thread，UT）的一种，因此从这个定义上看，轻量级进程也属于用户线程，但轻量级进程的实现始终是建立在内核之上的，许多操作都要进行系统调用，因此效率会受到限制，并不具备通常意义上的用户线程的优点。 而狭义上的用户线程指的是完全建立在用户空间的线程库上，系统内核不能感知到用户线程的存在及如何实现的。用户线程的建立、同步、销毁和调度完全在用户态中完成，不需要内核的帮助。如果程序实现得当，这种线程不需要切换到内核态，因此操作可以是非常快速且低消耗的，也能够支持规模更大的线程数量，部分高性能数据库中的多线程就是由用户线程实现的。这种进程与用户线程之间1：N的关系称为一对多的线程模型。 用户线程的优势在于不需要系统内核支援，但也正由于不依赖于系统内核，应用程序很难独立实现线程的创建、销毁、切换和调度等操作或者实现起来较为复杂。 3.1.3 混合实现线程除了依赖内核线程实现和完全由用户程序自己实现之外，还有一种将内核线程与用户线程一起使用的实现方式，被称为N：M实现。在这种混合实现下，既存在用户线程，也存在轻量级进程。用户线程还是完全建立在用户空间中，因此用户线程的创建、切换、析构等操作依然廉价，并且可以支持大规模的用户线程并发。而操作系统支持的轻量级进程则作为用户线程和内核线程之间的桥梁，这样可以使用内核提供的线程调度功能及处理器映射，并且用户线程的系统调用要通过轻量级进程来完成，这大大降低了整个进程被完全阻塞的风险。在这种混合模式中，用户线程与轻量级进程的数量比是不定的，是N：M的关系。 3.1.4 Java线程的实现Java线程如何实现并不受Java虚拟机规范的约束，这是一个与具体虚拟机相关的话题。从JDK 1.3起，“主流”平台上的“主流”商用Java虚拟机的线程模型普遍都被替换为基于操作系统原生线程模型来实现，即采用1：1的线程模型。 以HotSpot为例，它的每一个Java线程都是直接映射到一个操作系统原生线程来实现的，而且中间没有额外的间接结构，所以HotSpot自己是不会去干涉线程调度的（可以设置线程优先级给操作系统提供调度建议），全权交给底下的操作系统去处理，所以何时冻结或唤醒线程、该给线程分配多少处理器执行时间、该把线程安排给哪个处理器核心去执行等，都是由操作系统完成的，也都是由操作系统全权决定的。 3.2 Java线程调度线程调度是指系统为线程分配处理器使用权的过程，调度主要方式有两种，分别是协同式线程调度和抢占式线程调度。 如果使用协同式调度的多线程系统，线程的执行时间由线程本身来控制，线程把自己的工作执行完了之后，要主动通知系统切换到另外一个线程上去。协同式多线程的最大好处是实现简单，而且由于线程要把自己的事情干完后才会进行线程切换，切换操作对线程自己是可知的，所以一般没有什么线程同步的问题。它的坏处也很明显：线程执行时间不可控制，甚至如果一个线程的代码编写有问题，一直不告知系统进行线程切换，那么程序就会一直阻塞在那里。 如果使用抢占式调度的多线程系统，那么每个线程将由系统来分配执行时间，线程的切换不由线程本身来决定。譬如在Java中，有Thread::yield()方法可以主动让出执行时间，但是如果想要主动获取执行时间，线程本身是没有什么办法的。在这种实现线程调度的方式下，线程的执行时间是系统可控的，也不会有一个线程导致整个进程甚至整个系统阻塞的问题。Java使用的线程调度方式就是抢占式调度。 虽然说Java线程调度是系统自动完成的，但是我们仍然可以“建议”操作系统给某些线程多分配一点执行时间，另外的一些线程则可以少分配一点——这项操作是通过设置线程优先级来完成的。Java 语言一共设置了10个级别的线程优先级（Thread.MIN_PRIORITY至Thread.MAX_PRIORITY）。 不过，线程优先级并不是一项稳定的调节手段，线程调度最终还是由操作系统说了算。如果操作系统原生提供的线程优先级的数量比Java少，就不得不出现几个线程优先级对应到同一个操作系统优先级的情况，例如Windows中就只有七种优先级。 3.3 状态转换Java语言定义了6种线程状态，在任意一个时间点中，一个线程只能有且只有其中的一种状态，并且可以通过特定的方法在不同状态之间转换。这6种状态分别是： 新建（New）：创建后尚未启动的线程处于这种状态。 运行（Runnable）：包括操作系统线程状态中的Running和Ready，也就是处于此状态的线程有可能正在执行，也有可能正在等待着操作系统为它分配执行时间。 无限期等待（Waiting）：处于这种状态的线程不会被分配处理器执行时间，它们要等待被其他线程显式唤醒。以下方法会让线程陷入无限期的等待状态： 没有设置Timeout参数的Thread::join()方法； LockSupport::park()方法。 限期等待（Timed Waiting）：处于这种状态的线程也不会被分配处理器执行时间，不过无须等待被其他线程显式唤醒，在一定时间之后它们会由系统自动唤醒。以下方法会让线程进入限期等待状态： Thread::sleep()方法； 设置了Timeout参数的Object::wait()方法； 设置了Timeout参数的Thread::join()方法； LockSupport::parkNanos()方法； LockSupport::parkUntil()方法。 阻塞（Blocked）：线程被阻塞了，“阻塞状态”与“等待状态”的区别是“阻塞状态”在等待着获取到一个排它锁，这个事件将在另外一个线程放弃这个锁的时候发生；而“等待状态”则是在等待一段时间，或者唤醒动作的发生。在程序等待进入同步区域的时候，线程将进入这种状态。 结束（Terminated）：已终止线程的线程状态，线程已经结束执行。 4 Java与协程4.1 内核线程的局限今天对Web应用的服务要求，不论是在请求数量上还是在复杂度上，与十多年前相比已不可同日而语，这一方面是源于业务量的增长，另一方面来自于为了应对业务复杂化而不断进行的服务细分。 Java目前的并发编程机制产生了一些矛盾，1：1的内核线程模型是如今Java虚拟机线程实现的主流选择，但是这种映射到操作系统上的线程天然的缺陷是切换、调度成本高昂，系统能容纳的线程数量也很有限。以前处理一个请求可以允许花费很长时间在单体应用中，具有这种线程切换的成本也是无伤大雅的，但现在在每个请求本身的执行时间变得很短、数量变得很多的前提下，用户线程切换的开销甚至可能会接近用于计算本身的开销，这就会造成严重的浪费。 传统的Java Web服务器的线程池的容量通常在几十个到两百之间，当程序员把数以百万计的请求往线程池里面灌时，系统即使能处理得过来，但其中的切换损耗也是相当可观的。 4.2 协程的复苏协程采用协同调度，通过应用来模拟多线程，分为有栈协程、无栈协程。 各种语言中的await、async、yield这类关键字是无栈协程，更轻量，但功能也相对有限。 4.3 Java的解决方案对于有栈协程，有一种特例实现名为纤程（Fiber），这个词最早是来自微软公司，后来微软还推出过系统层面的纤程包来方便应用做现场保存、恢复和纤程调度。 OpenJDK在2018年创建了Loom项目，这是Java用来应对本节开篇所列场景的官方解决方案，根据目前公开的信息，如无意外，日后该项目为Java语言引入的、与现在线程模型平行的新并发编程机制中应该也会采用“纤程”这个名字。 Loom项目背后的意图是重新提供对用户线程的支持，但与过去的绿色线程不同，这些新功能不是为了取代当前基于操作系统的线程实现，而是会有两个并发编程模型在Java虚拟机中并存，可以在程序中同时使用。新模型有意地保持了与目前线程模型相似的API设计，它们甚至可以拥有一个共同的基类，这样现有的代码就不需要为了使用纤程而进行过多改动，甚至不需要知道背后采用了哪个并发编程模型。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"深入理解java虚拟机","slug":"深入理解java虚拟机","permalink":"https://www.codetool.top/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"leetcode402-移掉K位数字","slug":"leetcode402-移掉K位数字","date":"2020-01-28T19:44:58.000Z","updated":"2020-02-13T05:20:57.982Z","comments":true,"path":"article/leetcode402-移掉K位数字/","link":"","permalink":"https://www.codetool.top/article/leetcode402-%E7%A7%BB%E6%8E%89K%E4%BD%8D%E6%95%B0%E5%AD%97/","excerpt":"","text":"1 原题给定一个以字符串表示的非负整数 num，移除这个数中的 k 位数字，使得剩下的数字最小。 注意： num 的长度小于 10002 且 ≥ k。 num 不会包含任何前导零。 示例 1： 输入: num = “1432219”, k = 3输出: “1219”解释: 移除掉三个数字 4, 3, 和 2 形成一个新的最小的数字 1219。 示例 2： 输入: num = “10200”, k = 1输出: “200”解释: 移掉首位的 1 剩下的数字为 200. 注意输出不能有任何前导零。789 示例 3 : 输入: num = “10”, k = 2输出: “0”解释: 从原数字移除所有的数字，剩余为空就是0。 2 解法2.1 思想要在一个长度为length的字符数组中去掉k位，留下一个最小数字，则是要留下一个length-k位的数字，我们每一次都要保证在剩余位数充足的情况下选择最小的数字。 对于示例一，&quot;1432219&quot;要选出7-3=4位数字，我们可以保留最后三位，在前五位中选出一个最小数字1，然后在剩下的&quot;432219&quot;中选出3位数字，我们可以保留最后两位，在前四位中选出一个最小数字2，然后在剩下的&quot;219&quot;中选出2位数字，我们可以保留最后一位，在前两位中选出一个最小数字1，然后在剩下的&quot;9&quot;中选出1位数字，选取9。 得到的结果就是&quot;1219&quot; 2.2 代码class Solution { public String removeKdigits(String num, int k) { char[] nums = num.toCharArray(); int start = 0;//下一次选取数字开始的位置 int min = 0; int origink = k; char[] result = new char[nums.length-k];//保存结果 while(k&lt;nums.length){ for(int i = start;i&lt;k+1;i++){//保留有限位数，选取最小数字 if(nums[i]&lt;nums[min]){ min = i; } } result[k-origink] = nums[min]; k++; start = min+1; min = start; } for(int i = 0;i&lt;=result.length;i++){//去除开头的0 if(i==result.length) return \"0\"; if(result[i]!='0'){ result = Arrays.copyOfRange(result,i,result.length); break; } } return String.valueOf(result); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"https://www.codetool.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]},{"title":"leetcode385-迷你语法分析器","slug":"leetcode385-迷你语法分析器","date":"2020-01-27T18:14:31.000Z","updated":"2020-01-27T18:37:12.316Z","comments":true,"path":"article/leetcode385-迷你语法分析器/","link":"","permalink":"https://www.codetool.top/article/leetcode385-%E8%BF%B7%E4%BD%A0%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8/","excerpt":"","text":"1 原题给定一个用字符串表示的整数的嵌套列表，实现一个解析它的语法分析器。 列表中的每个元素只可能是整数或整数嵌套列表 提示： 你可以假定这些字符串都是格式良好的： 字符串非空 字符串不包含空格 字符串只包含数字0-9, [, - ,,, ] 示例 1： 给定 s = “324”, 你应该返回一个 NestedInteger 对象，其中只包含整数值 324。 示例 2： 给定 s = “[123,[456,[789]]]”, 返回一个 NestedInteger 对象包含一个有两个元素的嵌套列表： 1. 一个 integer 包含值 1232. 一个包含两个元素的嵌套列表：&nbsp;&nbsp;&nbsp;&nbsp;i. 一个 integer 包含值 456&nbsp;&nbsp;&nbsp;&nbsp;ii. 一个包含一个元素的嵌套列表&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a. 一个 integer 包含值 789 2 解法2.1 思想设定一个getNest()函数用于返回一个列表类型的NestedInteger。 相当于每个[ ]中都代表一次递归函数调用。 最重要的思想是通过类的全局字符数组和一个下标值让每次调用递归函数都知道要处理哪个位置。 2.2 代码class Solution { //递归函数通过字符数组和cur下标确定要处理的位置 char[] chars; int cur = 0; public NestedInteger deserialize(String s) { chars = s.toCharArray(); //本身不是一个集合而是一个整数的情况 if(chars[0]!='[') return new NestedInteger(Integer.valueOf(s)); //调用递归函数返回根集合 return getNest(); } public NestedInteger getNest(){ NestedInteger nest = new NestedInteger(); int num = 0;//num用于缓存用逗号分割的整数类型的值 boolean negative = false;//当前记录的整数是不是负数 while(cur!=chars.length-1){ cur ++; if(chars[cur]==',') continue; if(chars[cur]=='[') nest.add(getNest());//遇到[递归获取子集合 else if(chars[cur]==']') return nest; else if(chars[cur]=='-') negative = true; else{//是数字的情况 if(negative) num = 10*num - (chars[cur]-48); else num = 10*num + (chars[cur]-48); //如果下一个字符是,或者]说明当前数字已经记录完了，需要加入集合中 if(chars[cur+1]==','||chars[cur+1]==']'){ nest.add(new NestedInteger(num)); num = 0; negative = false; } } } return null; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"深入理解java虚拟机第三版读书笔记11","slug":"深入理解java虚拟机第三版读书笔记11","date":"2020-01-27T12:32:40.000Z","updated":"2020-01-29T08:24:41.480Z","comments":true,"path":"article/深入理解java虚拟机第三版读书笔记11/","link":"","permalink":"https://www.codetool.top/article/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89%E7%89%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B011/","excerpt":"","text":"以下是第十一章 后端编译与优化的内容 把Class文件转换成与本地基础设施（硬件指令集、操作系统）相关的二进制机器码可以视为整个编译过程的后端。 最近几年提前编译也开始兴起，我们在这章把它和即时编译共称为后端编译。 1 即时编译器目前主流的两款商用Java虚拟机（HotSpot、OpenJ9）里，Java程序最初都是通过解释器进行解释执行的，当虚拟机发现某个方法或代码块的运行特别频繁，就会把这些代码认定为“热点代码”（Hot Spot Code），为了提高热点代码的执行效率，在运行时，虚拟机将会把这些代码编译成本地机器码，并以各种手段尽可能地进行代码优化，运行时完成这个任务的后端编译器被称为即时编译器。 1.1 解释器与编译器目前主流的商用Java虚拟机内部都同时包含解释器与编译器。解释器与编译器两者各有优势：当程序需要迅速启动和执行的时候，解释器可以首先发挥作用，省去编译的时间，立即运行。当程序启动后，随着时间的推移，编译器逐渐发挥作用，把越来越多的代码编译成本地代码，这样可以减少解释器的中间损耗，获得更高的执行效率。 HotSpot虚拟机中内置了两个（或三个）即时编译器，其中有两个编译器存在已久，分别被称为“客户端编译器”（Client Compiler）和“服务端编译器”（Server Compiler），或者简称为C1编译器和C2编译器,第三个是在JDK 10时才出现的、长期目标是代替C2的Graal编译器。 解释器与编译器搭配使用的方式在虚拟机中被称为“混合模式”，用户也可以使用参数-Xint强制虚拟机运行于“解释模式”。另外，也可以使用参数-Xcomp强制虚拟机运行于“编译模式”，这时候将优先采用编译方式执行程序，但是解释器仍然要在编译无法进行的情况下介入执行过程。 由于即时编译器编译本地代码需要占用程序运行时间，通常要编译出优化程度越高的代码，所花费的时间便会越长；而且想要编译出优化程度更高的代码，解释器可能还要替编译器收集性能监控信息，这对解释执行阶段的速度也有所影响。为了在程序启动响应速度与运行效率之间达到最佳平衡， HotSpot虚拟机在编译子系统中加入了分层编译的功能。 分层编译根据编译器编译、优化的规模与耗时，划分出不同的编译层次，其中包括： 第0层。程序纯解释执行，并且解释器不开启性能监控功能（Profiling）。 第1层。使用客户端编译器将字节码编译为本地代码来运行，进行简单可靠的稳定优化，不开启性能监控功能。 第2层。仍然使用客户端编译器执行，仅开启方法及回边次数统计等有限的性能监控功能。 第3层。仍然使用客户端编译器执行，开启全部性能监控，除了第2层的统计信息外，还会收集如分支跳转、虚方法调用版本等全部的统计信息。 第4层。使用服务端编译器将字节码编译为本地代码，相比起客户端编译器，服务端编译器会启用更多编译耗时更长的优化，还会根据性能监控信息进行一些不可靠的激进优化。 1.2 编译对象与触发条件热点代码： 被多次调用的方法 被多次执行的循环体 对于这两种情况，编译的目标对象都是整个方法体，而不会是单独的循环体。 要知道某段代码是不是热点代码，称为“热点探测”，有两种方法： 基于采样的热点探测：周期性地检查各个线程的调用栈顶，如果发现某个（或某些）方法经常出现在栈顶，那这个方法就是“热点方法”。 基于计数器的热点探测：为每个方法（甚至是代码块）建立计数器，统计方法的执行次数，如果执行次数超过一定的阈值就认为它是“热点方法”，更精确。 HotSpot使用了第二种方法，为了实现热点计数，HotSpot为每个方法准备了两类计数器：方法调用计数器（Invocation Counter）和回边计数器（Back Edge Counter，“回边”的意思就是指在循环边界往回跳转）。当虚拟机运行参数确定的前提下，这两个计数器都有一个明确的阈值，一旦溢出，就会触发即时编译。 方法调用计数器默认阈值在客户端模式下是1500次，在服务端模式下是10000次，这个阈值可以通过虚拟机参数-XX： CompileThreshold来人为设定。 在默认设置下，方法调用计数器统计的并不是方法被调用的绝对次数，而是一段时间之内方法被调用的次数。当超过一定的时间限度，如果方法的调用次数仍然不足以让它提交给即时编译器编译，那该方法的调用计数器就会被减少一半，这个过程被称为方法调用计数器热度的衰减，而这段时间就称为此方法统计的半衰周期，进行热度衰减的动作是在虚拟机进行垃圾收集时顺便进行的，可以使用虚拟机参数-XX：-UseCounterDecay来关闭热度衰减，让方法计数器统计方法调用的绝对次数，这样只要系统运行时间足够长，程序中绝大部分方法都会被编译成本地代码。另外还可以使用-XX：CounterHalfLifeTime参数设置半衰周期的时间，单位是秒。 回边计数器统计一个方法中循环体代码执行的次数，阈值使用-XX：OnStackReplacePercentage间接设置： 虚拟机运行在客户端模式下，回边计数器阈值计算公式为：方法调用计数器阈值（-XX：CompileThreshold）乘以OSR比率（-XX：OnStackReplacePercentage）除以100。其中-XX：OnStackReplacePercentage默认值为933，如果都取默认值，那客户端模式虚拟机的回边计数器的阈值为13995。 虚拟机运行在服务端模式下，回边计数器阈值的计算公式为：方法调用计数器阈值（-XX：CompileThreshold）乘以（OSR比率（-XX：OnStackReplacePercentage）减去解释器监控比率（-XX：InterpreterProfilePercentage）的差值）除以100。其中-XX：OnStack ReplacePercentage默认值为140，XX：InterpreterProfilePercentage默认值为33，如果都取默认值，那服务端模式虚拟机回边计数器的阈值为10700。 与方法计数器不同，回边计数器没有计数热度衰减的过程，因此这个计数器统计的就是该方法循环执行的绝对次数。当计数器溢出的时候，它还会把方法计数器的值也调整到溢出状态，这样下次再进入该方法的时候就会执行标准编译过程。 1.3 编译过程在默认条件下，编译的过程中，虚拟机仍然将按照解释方式继续执行代码，编译动作则在后台的编译线程中进行。用户可以通过参数-XX：-BackgroundCompilation来禁止后台编译，后台编译被禁止后，编译的时候将会一直阻塞等待，直到编译过程完成再开始执行代码。 服务端编译器和客户端编译器的编译过程是有所差别的。对于客户端编译器来说，它是一个相对简单快速的三段式编译器，主要的关注点在于局部性的优化，而放弃了许多耗时较长的全局优化手段。 在第一个阶段，一个平台独立的前端将字节码构造成一种高级中间代码表示（HIR，即与目标机器指令集无关的中间表示）。HIR使用静态单分配（Static Single Assignment，SSA）的形式来代表代码值，这可以使得一些在HIR的构造过程之中和之后进行的优化动作更容易实现。在此之前编译器已经会在字节码上完成一部分基础优化，如方法内联、常量传播等优化将会在字节码被构造成HIR之前完成。 在第二个阶段，一个平台相关的后端从HIR中产生低级中间代码表示（LIR，即与目标机器指令集相关的中间表示），而在此之前会在HIR上完成另外一些优化，如空值检查消除、范围检查消除等，以便让HIR达到更高效的代码表示形式。 最后的阶段是在平台相关的后端使用线性扫描算法在LIR上分配寄存器，并在LIR上做窥孔（Peephole）优化，然后产生机器代码。 而服务端编译器则是专门面向服务端的典型应用场景，并为服务端的性能配置针对性调整过的编译器，也是一个能容忍很高优化复杂度的高级编译器，几乎能达到GNU C++编译器使用-O2参数时的优化强度。它会执行大部分经典的优化动作，如：无用代码消除、循环展开、循环表达式外提、消除公共子表达式、常量传播、基本块重排序等，还会实施一些与Java语言特性密切相关的优化技术，如范围检查消除、空值检查消除（不过并非所有的空值检查消除都是依赖编译器优化的，有一些是代码运行过程中自动优化了）等。另外，还可能根据解释器或客户端编译器提供的性能监控信息，进行一些不稳定的预测性激进优化，如守护内联、分支频率预测等。 2 提前编译器Android中的ART（Android Runtime）就是提前编译的。 2.1 提前编译的优劣得失字节膨胀：提前编译的本地二进制码的体积会明显大于字节码的体积。 动态扩展：提前编译通常要求程序是封闭的，不能在外部动态加载新的字节码。 提前编译有两种分支： 做与传统C、C++编译器类似的，在程序运行之前把程序代码编译成机器码的静态翻译工作 把原本即时编译器在运行时要做的编译工作提前做好并保存下来，下次运行到这些代码（譬如公共库代码在被同一台机器其他Java进程使用）时直接把它加载进来使用。 第一条是传统的提前编译应用形式。编译期间需要消耗很多资源和时间用来优化，例如“过程间分析”，将它节省下来给运行能明显提高效率。 第二条则是给即时编译器做缓存加速，去改善Java程序的启动时间。这种提前编译被称为动态提前编译（DynamicAOT）或者索性就大大方方地直接叫即时编译缓存（JIT Caching）。 而即时编译器的优势有： 性能分析制导优化：在解释器或者客户端编译器运行过程中，会不断收集性能监控信息，有助于在运行期动态优化。 激进预测性优化：提前编译做的优化较为保守，需要考虑程序实际运行的效果不能有差错，而即时编译可以大胆地按照高概率的假设进行优化，万一真的走到罕见分支上，大不了退回到低级编译器甚至解释器上去执行。 链接时优化：Java语言天生就是动态链接的，如果要连接的代码在运行前在不同的机器、编译器上进行编译，最后连接可能会出现边界隔阂。 3 编译器优化技术3.1 优化技术概览参考地址：https://wiki.openjdk.java.net/display/HotSpot/PerformanceTacticIndex 编译器策略 延迟编译 分层编译 栈上替换 延迟优化 程序依赖图表示 静态单赋值表示 基于性能监控的优化技术 乐观空值断言 乐观类型断言 乐观类型增强 乐观数组长度加强 裁剪未被选择的分支 乐观的多态内联 分支频率预测 调用频率预测 基于证据的优化技术 精确类型推断 内存值推断 内存值跟踪 常量折叠 重组 操作符退化 空值检查消除 类型检测退化 类型检测消除 代数化简 公共子表达式消除 数据流敏感重写 条件常量传播 基于流承载的类型缩减转换 无用代码消除 语言相关的优化技术 类型继承关系分析 去虚拟机化 符号常量传播 自动装箱消除 逃逸分析 锁消除 锁膨胀 消除反射 内存及代码位置变换 表达式提升 表达式下沉 冗余存储消除 相邻存储合并 交汇点分离 循环变换 循环展开 循环剥离 安全点消除 迭代范围分离 范围检查消除 循环向量化 全局代码调整 内联 全局代码外提 基于热度的代码布局 Switch 调整 控制流图变换 本地代码编排 本地代码封包 延迟槽填充 着色图寄存器分配 线性扫描寄存器分配 复写聚合 常量分裂 复写移除 地址模式匹配 下面介绍四种优化技术： 最重要的优化技术之一：方法内联。 最前沿的优化技术之一：逃逸分析。 语言无关的经典优化技术之一：公共子表达式消除。 语言相关的经典优化技术之一：数组边界检查消除。 3.2 方法内联内联为除了消除方法调用的成本之外，它更重要的意义是为其他优化手段建立良好的基础。 内联可能会遇到虚方法无法确定的问题。为了解决虚方法的内联问题，Java虚拟机首先引入了一种名为类型继承关系分析（CHA）的技术，用于确定在目前已加载的类中，某个接口是否有多于一种的实现、某个类是否存在子类、某个子类是否覆盖了父类的某个虚方法等信息。这样，编译器在进行内联时，如果遇到虚方法，则会向CHA查询此方法在当前程序状态下是否有多个目标版本可供选择，如果查询到只有一个版本，那就可以假设“应用程序的全貌就是现在运行的这个样子”来进行内联，这种内联被称为守护内联。不过由于后面可能会加载其他类，这属于激进优化。如果在后面的加载过程加载了导致继承关系发生变化的新类，那么就必须抛弃已经编译的代码，退回到解释状态进行执行，或者重新进行编译。 假如向CHA查询出来的结果是该方法确实有多个版本的目标方法可供选择，那即时编译器还将进行最后一次努力，使用内联缓存的方式来缩减方法调用的开销。 这种状态下方法调用是真正发生了的，但是比起直接查虚方法表还是要快一些。内联缓存是一个建立在目标方法正常入口之前的缓存，它的工作原理大致为：在未发生方法调用之前，内联缓存状态为空，当第一次调用发生后，缓存记录下方法接收者的版本信息，并且每次进行方法调用时都比较接收者的版本。如果以后进来的每次调用的方法接收者版本都是一样的，那么这时它就是一种单态内联缓存。通过该缓存来调用，比用不内联的非虚方法调用，仅多了一次类型判断的开销而已。但如果真的出现方法接收者不一致的情况，就说明程序用到了虚方法的多态特性，这时候会退化成超多态内联缓存，其开销相当于真正查找虚方法表来进行方法分派。 3.3 逃逸分析逃逸分析（Escape Analysis）是目前Java虚拟机中比较前沿的优化技术，它与类型继承关系分析一样，并不是直接优化代码的手段，而是为其他优化措施提供依据的分析技术。 逃逸分析的基本原理是：分析对象动态作用域，当一个对象在方法里面被定义后，它可能被外部方法所引用，例如作为调用参数传递到其他方法中，这种称为方法逃逸；甚至还有可能被外部线程访问到，譬如赋值给可以在其他线程中访问的实例变量，这种称为线程逃逸；从不逃逸、方法逃逸到线程逃逸，称为对象由低到高的不同逃逸程度。如果能证明一个对象不会逃逸到方法或线程之外（换句话说是别的方法或线程无法通过任何途径访问到这个对象），或者逃逸程度比较低（只逃逸出方法而不会逃逸出线程），则可能为这个对象实例采取不同程度的优化，如： 栈上分配：栈上分配变量可以避免对这个变量进行垃圾回收，从而提高效率，（同时，栈上存储的数据，很大机会被虚拟机分配至物理机器的高速寄存器中存储）栈上分配支持方法逃逸，但不能支持线程逃逸。 标量替换：不能分解的，例如int、long等数值类型及reference类型等称为标量。相对的，可以继续分解称为聚合量，例如Java中的对象。如果把一个Java对象拆散，将其用到的成员变量恢复为原始类型来访问，这个过程就称为标量替换。假如逃逸分析能够证明一个对象不会被方法外部访问，并且这个对象可以被拆散，那么程序真正执行的时候将可能不去创建这个对象，而改为直接创建它的若干个被这个方法使用的成员变量来代替。将对象拆分后，除了可以让对象的成员变量在栈上分配和读写之外，还可以为后续进一步的优化手段创建条件。标量替换可以视作栈上分配的一种特例，实现更简单，但对逃逸程度的要求更高，它不允许对象逃逸出方法范围内。 同步消除：线程同步本身是一个相对耗时的过程，如果逃逸分析能够确定一个变量不会逃逸出线程，无法被其他线程访问，那么这个变量的读写肯定就不会有竞争，对这个变量实施的同步措施也就可以安全地消除掉。 3.4 公共子表达式消除如果一个表达式E之前已经被计算过了，并且从先前的计算到现在E中所有变量的值都没有发生变化，那么E 的这次出现就称为公共子表达式。对于这种表达式，没有必要花时间再对它重新进行计算，只需要直接用前面计算过的表达式结果代替E。 3.5 数组边界检查消除有些代码在编译的时候就可以确定运行的时候数组下标一定不会越界，那么运行时就可以不做检查。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"深入理解java虚拟机","slug":"深入理解java虚拟机","permalink":"https://www.codetool.top/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"leetcode341-扁平化嵌套列表迭代器","slug":"leetcode341-扁平化嵌套列表迭代器","date":"2020-01-26T18:18:33.000Z","updated":"2020-01-26T18:36:09.178Z","comments":true,"path":"article/leetcode341-扁平化嵌套列表迭代器/","link":"","permalink":"https://www.codetool.top/article/leetcode341-%E6%89%81%E5%B9%B3%E5%8C%96%E5%B5%8C%E5%A5%97%E5%88%97%E8%A1%A8%E8%BF%AD%E4%BB%A3%E5%99%A8/","excerpt":"","text":"1 原题给定一个嵌套的整型列表。设计一个迭代器，使其能够遍历这个整型列表中的所有整数。 列表中的项或者为一个整数，或者是另一个列表。 示例1： 输入: [[1,1],2,[1,1]]输出: [1,1,2,1,1]解释: 通过重复调用 next 直到 hasNext 返回false，next 返回的元素的顺序应该是: [1,1,2,1,1]。 示例2： 输入: 14输出: False解释: 通过重复调用 next 直到 hasNext 返回false，next 返回的元素的顺序应该是: [1,4,6]。 2 解法2.1 思想构造通过递归构造，获取元素就是通用迭代器的方法。 2.2 代码public class NestedIterator implements Iterator&lt;Integer> { List&lt;Integer> list = new ArrayList&lt;>(); int cur = 0; public NestedIterator(List&lt;NestedInteger> nestedList) { addViaList(nestedList); } public void addViaList(List&lt;NestedInteger> nestedList){ for(NestedInteger i:nestedList){ if(i.isInteger()) list.add(i.getInteger()); else addViaList(i.getList()); } } @Override public Integer next() { return list.get(cur++); } @Override public boolean hasNext() { return cur&lt;list.size(); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode331-验证二叉树的前序序列化","slug":"leetcode331-验证二叉树的前序序列化","date":"2020-01-26T15:51:46.000Z","updated":"2020-01-26T16:14:19.038Z","comments":true,"path":"article/leetcode331-验证二叉树的前序序列化/","link":"","permalink":"https://www.codetool.top/article/leetcode331-%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E5%BA%8F%E5%88%97%E5%8C%96/","excerpt":"","text":"1 原题序列化二叉树的一种方法是使用前序遍历。当我们遇到一个非空节点时，我们可以记录下这个节点的值。如果它是一个空节点，我们可以使用一个标记值记录，例如 #。 _9_ / \\ 3 2 / \\ / \\ 4 1 # 6 / \\ / \\ / \\ # # # # # #例如，上面的二叉树可以被序列化为字符串 &quot;9,3,4,#,#,1,#,#,2,#,6,#,#&quot;，其中 # 代表一个空节点。 给定一串以逗号分隔的序列，验证它是否是正确的二叉树的前序序列化。编写一个在不重构树的条件下的可行算法。 每个以逗号分隔的字符或为一个整数或为一个表示 null 指针的 &#39;#&#39; 。 你可以认为输入格式总是有效的，例如它永远不会包含两个连续的逗号，比如 &quot;1,,3&quot; 。 示例 1: 输入: “9,3,4,#,#,1,#,#,2,#,6,#,#”输出: true 示例 2: 输入: “1,#”输出: false 示例 3: 输入: “9,#,#,1”输出: false 2 解法2.1 思想可能导致前序序列化验证失败的情况有： null做空节点 子节点不完全 # 1 / \\ / \\ 1 2 3假设任一状态待填充的节点数为count，第一种情况会导致在某一个时刻count小于0，第二种情况会导致最后count大于0。而这两种情况是不会同时存在的。 每次遇到一个节点count的值减一，遇到一个非null的节点count的值加二，最后看count是否为0。 2.2 代码class Solution { public boolean isValidSerialization(String preorder) { String[] nodes = preorder.split(\",\"); int count = 1; for(String i:nodes){ count-=1; if(count&lt;0) return false; if(!i.equals(\"#\")) count+=2; } return count==0; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode224-基本计算器","slug":"leetcode224-基本计算器","date":"2020-01-25T19:07:56.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/leetcode224-基本计算器/","link":"","permalink":"https://www.codetool.top/article/leetcode224-%E5%9F%BA%E6%9C%AC%E8%AE%A1%E7%AE%97%E5%99%A8/","excerpt":"","text":"1 原题实现一个基本的计算器来计算一个简单的字符串表达式的值。 字符串表达式可以包含左括号 ( ，右括号 )，加号 + ，减号 -，非负整数和空格 。 示例1： 输入: “1 + 1”输出: 2 示例2： 输入: “ 2-1 + 2 “输出: 3 示例 3: 输入: “(1+(4+5+2)-3)+(6+8)”输出: 23 说明： 你可以假设所给定的表达式都是有效的。 请不要使用内置的库函数 eval。 2 解法2.1 思想操作数栈的思想 2.2 代码原来以为递归会很取巧，结果遇到了很多细节问题。 class Solution { public int calculate(String s) { if(s.indexOf(\"(\")==-1){ int num = 0; int sum = 0; boolean negative = false; boolean hasNum = false; for(char i:s.toCharArray()){ if(i==' ') continue; if(i>='0'&amp;&amp;i&lt;='9') { hasNum = true; if(negative==false) num=(num*10)+(i-48); else num=(num*10)-(i-48); } if(i=='+'){ hasNum = false; sum+=num; num = 0; negative = false; }if(i=='-'){ if(hasNum == false) negative = !negative; else negative = true; hasNum = false; sum+=num; num = 0; } } sum+=num; return sum; } int lastLeft = s.lastIndexOf(\"(\"); int right = s.substring(lastLeft,s.length()).indexOf(\")\")+lastLeft; return calculate(s.substring(0,lastLeft)+calculate(s.substring(lastLeft+1,right))+s.substring(right+1)); } } 栈的方法： class Solution { public int calculate(String s) { Deque&lt;Integer> signs = new ArrayDeque&lt;>(); int num = 0; int res = 0; int sign = 1; signs.push(sign); for (char c : s.toCharArray()) { if (Character.isDigit(c)) { num = num * 10 + (c - '0'); } else if (c == '(') { signs.push(sign); } else if (c == ')') { signs.pop(); } else if (c == '+' || c == '-') { res += sign * num; num = 0; sign = signs.peek() * (c == '+' ? 1 : -1); } } return res + sign * num; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"深入理解java虚拟机第三版读书笔记10","slug":"深入理解java虚拟机第三版读书笔记10","date":"2020-01-25T13:15:55.000Z","updated":"2020-01-29T18:40:41.513Z","comments":true,"path":"article/深入理解java虚拟机第三版读书笔记10/","link":"","permalink":"https://www.codetool.top/article/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89%E7%89%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B010/","excerpt":"","text":"以下是第十章 前端编译与优化的内容 Java中的编译可能是指： 前端编译：把*.java文件转变成*.class文件的过程 即时编译（JIT）：运行期把字节码转变成本地机器码的过程 提前编译（AOT）：直接把程序编译成与目标机器指令集相关的二进制代码的过程 这一章讲的是前端编译 1 Javac编译器javac是一个由java语言编写的程序 1.1 Javac的源码与调试Java6以后，Javac的源码放在了JDK_SRC_HOME/langtools/src/share/classes/com/sun/tools/javac Javac的工作流程 准备过程：初始化插入式注解处理器。 解析与填充符号表过程，包括：·词法、语法分析。将源代码的字符流转变为标记集合，构造出抽象语法树。·填充符号表。产生符号地址和符号信息。 插入式注解处理器的注解处理过程：插入式注解处理器的执行阶段。 分析与字节码生成过程，包括： 标注检查。对语法的静态信息进行检查。 数据流及控制流分析。对程序动态运行过程进行检查。 解语法糖。将简化代码编写的语法糖还原为原有的形式。 字节码生成。将前面各个步骤所生成的信息转化成字节码。 执行插入式注解时又可能会产生新的符号，如果有新的符号产生，就必须转回到之前的解析、填充符号表的过程中重新处理这些新符号。 2 Java语法糖的味道2.1 泛型2.1.1 Java与C#的泛型Java是 “类型擦除式泛型”，C#是 “具现化式泛型”。 Java语言中的泛型只在程序源码中存在，在编译后的字节码文件中，全部泛型都被替换为原来的裸类型，并且在相应的地方插入了强制转型代码。 Java的类型擦除式泛型无论在使用效果上还是运行效率上，几乎是全面落后于C#的具现化式泛型，而它的唯一优势是在于实现这种泛型的影响范围上。 Java选择类型擦除主要是因为遗留代码多，向前兼容。 2.1.2 类型擦除实现：泛型类原地泛型化变成裸类型 Java是简单粗暴地直接在编译时把ArrayList&lt;Integer&gt;还原回ArrayList，只在元素访问、修改时自动插入一些强制类型转换和检查指令。 类型擦除的缺陷： 不支持基本类型，例如ArrayList&lt;int&gt;，因为无法实现int和Object互转，只能自动装箱、拆箱使用Integer，导致执行效率低。 运行期无法取到泛型类型信息，导致不能出现下列操作： if (item instanceof E) { // 不合法，无法对泛型进行实例判断 E newItem = new E(); // 不合法，无法使用泛型创建对象 E[] itemArray = new E[10]; // 不合法，无法使用泛型创建数组 方法重载即使是不同泛型类型的参数也不能作为不一样的特征签名。但是返回值类型不同实际是可以正常运行的，虽然特征签名还是一致，但class文件支持不同描述符的方法共存，后续JVM有优化。 2.1.3 值类型和未来的泛型在2014年，刚好是Java泛型出现的十年之后，Oracle建立了一个名为Valhalla的语言改进项目，希望改进Java语言留下的各种缺陷（解决泛型的缺陷就是项目主要目标其中之一）。 在Valhalla项目中规划了几种不同的新泛型实现方案，在这些新的泛型设计中，泛型类型有可能被具现化，也有可能继续维持类型擦除以保持兼容（取决于采用哪种实现方案），即使是继续采用类型擦除的方案，泛型的参数化类型也可以选择不被完全地擦除掉，而是相对完整地记录在Class文件中，能够在运行期被使用，也可以指定编译器默认要擦除哪些类型。相对于使用不同方式实现泛型，目前比较明确的是未来的Java应该会提供“值类型”（Value Type）的语言层面的支持。 值类型可以与引用类型一样，具有构造函数、方法或是属性字段，等等，而它与引用类型的区别在于它在赋值的时候通常是整体复制，而不是像引用类型那样传递引用的。更为关键的是，值类型的实例很容易实现分配在方法的调用栈上的，这意味着值类型会随着当前方法的退出而自动释放，不会给垃圾收集子系统带来任何压力。 在Valhalla项目中，Java的值类型方案被称为“内联类型”，计划通过一个新的关键字inline来定义。 2.2 条件编译使用条件为常量的if语句，可以在编译期间过滤掉一些代码 public static void main(String[] args) { if (true) { System.out.println(\"block 1\"); } else { System.out.println(\"block 2\"); } } 反编译的结果 public static void main(String[] args) { System.out.println(\"block 1\"); } 2.3 可变参数public void foo(String... args){} =&gt; public void foo(String[] args){} 2.4 switch-字符串和switch-enum2.4.1 switch-字符串配合字符串的哈希值使用。 String i = \"hello\"; switch (i){ case \"hello\": System.out.println(\"h\"); break; case \"world\": System.out.println(\"w\"); break; } 反编译后 String i = \"hello\"; byte var3 = -1; switch(i.hashCode()) { case 99162322: if (i.equals(\"hello\")) { var3 = 0; } break; case 113318802: if (i.equals(\"world\")) { var3 = 1; } } switch(var3) { case 0: System.out.println(\"h\"); break; case 1: System.out.println(\"w\"); } 2.4.2 switch-enumenum Sex{ MALE,FEMALE } public static void foo(Sex sex){ switch (sex){ case MALE: System.out.println(\"男\"); break; case FEMALE: System.out.println(\"女\"); break; } } 反编译后 /* *定义一个合成类（仅jvm使用，对我们不可见） *用来映射枚举的ordina1与数组元素的关系 *枚举的ordinal表示枚举对象的序号，从0开始 *即MALE的ordinal()=0，FEMALE的ordinal()=1 */ static class $MAP{ //数组大小即为枚举元素个数，里面存储case用来对比的数字 static int[] map = new int[2]; static{ map[Sex.MALE.ordinal()]=1; map[Sex.FEMALE.ordinal()]=2; } } public static void foo(Sex sex) { int x = $MAP.map[sex.ordinal()]; switch(x){ case 1: System.out.println(\"男\"）; break; case 2: System.out.println(\"女\"）; break; } } 2.5 枚举enum Sex{ MALE,FEMALE } 实际上是编译成了 public final class Sex extends Enum&lt;Sex>{ public static final Sex MALE; public static final Sex FEMALE; private static final Sex[] $VALUES; static{ MALE = new Sex(\"MALE\",0); FEMALE = new Sex(\"FEMALE\",1); $VALUES = new Sex[]{MALE,FEMALE}; } private Sex(String name,int ordinal){ super(name,ordinal); } public static Sex[] values(){ return $VALUES.clone(); } public static Sex valueOf(String name){ return Enum.valueOf(Sex.class,name); } } 2.6 try-with-resourcesJDK7开始新增了对需要关闭的资源处理的特殊语法try-with-resources: try(资源变量=创建资源对象){ }catch(){ } 其中资源对象需要实现Autocloseable接口，例如InputStream、OutputStream、Connection、Statement、Resultset等接口都实现了Autocloseable，使用try-with-resources可以不用写finally语句块，编译器会帮助生成关闭资源代码，例如： public static void main(String[]args){ try(InputStream is = new FileInputStream(\"d:\\\\1.txt\")){ System.out.println(is); }catch(IOException e){ e.printStackTrace(); } } 反编译后： try { InputStream is = new FileInputStream(\"d:\\\\1.txt\"); Throwable var2 = null; try { System.out.println(is); } catch (Throwable var12) { var2 = var12; throw var12; } finally { if (is != null) { if (var2 != null) { try { is.close(); } catch (Throwable var11) { var2.addSuppressed(var11); } } else { is.close(); } } } } catch (IOException var14) { var14.printStackTrace(); }","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"深入理解java虚拟机","slug":"深入理解java虚拟机","permalink":"https://www.codetool.top/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"leetcode103-二叉树的锯齿形层次遍历","slug":"leetcode103-二叉树的锯齿形层次遍历","date":"2020-01-24T18:52:24.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/leetcode103-二叉树的锯齿形层次遍历/","link":"","permalink":"https://www.codetool.top/article/leetcode103-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%94%AF%E9%BD%BF%E5%BD%A2%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/","excerpt":"","text":"1 原题给定一个二叉树，返回其节点值的锯齿形层次遍历。（即先从左往右，再从右往左进行下一层遍历，以此类推，层与层之间交替进行）。 例如:给定二叉树: [3,9,20,null,null,15,7], &nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;/ \\&nbsp;&nbsp;9&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;15&nbsp;&nbsp;&nbsp;7 返回锯齿形层次遍历如下： [&nbsp;&nbsp;[3],&nbsp;&nbsp;[20,9],&nbsp;&nbsp;[15,7]] 2 解法2.1 思想用两个栈来交替存储某一层和下一层的节点: 读取第一个栈的时候，从左向右的读取节点，将它们的子节点从左向右入第二个栈，能使读取第二个栈的时候是以从右向左的顺序出栈的。 读取第二个栈的时候，从右向左的读取节点，将它们的子节点从右向左入第一个栈，能使读取第一个栈的时候是以从左向右的顺序出栈的。 这样交替使用两个栈，可以实现两层之间的顺序反转。 2.2 代码class Solution { public List&lt;List&lt;Integer>> zigzagLevelOrder(TreeNode root) { List&lt;List&lt;Integer>> ans = new ArrayList&lt;>(); Stack&lt;TreeNode> first = new Stack&lt;>(); Stack&lt;TreeNode> second = new Stack&lt;>(); List&lt;Integer> cur; if(root == null) return ans; first.push(root); while(!first.isEmpty()||!second.isEmpty()){ //当前层的节点按从左向右的顺序依次出栈，子节点按从左向右的顺序入second栈，实现顺序逆转 cur = new ArrayList&lt;>(); while(!first.isEmpty()){ TreeNode node = first.pop(); cur.add(node.val); if(node.left!=null) second.push(node.left); if(node.right!=null) second.push(node.right); } ans.add(cur); //下一层的节点按从右向左的顺序依次出栈，子节点按从右向左的顺序入first栈，实现顺序逆转 if(second.isEmpty()) break; cur = new ArrayList&lt;>(); while(!second.isEmpty()){ TreeNode node = second.pop(); cur.add(node.val); if(node.right!=null) first.push(node.right); if(node.left!=null) first.push(node.left); } ans.add(cur); } return ans; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"愿广大国人都能平安度过这个春节","slug":"愿广大国人都能平安度过这个春节","date":"2020-01-24T16:30:44.000Z","updated":"2020-01-24T16:51:20.114Z","comments":true,"path":"article/愿广大国人都能平安度过这个春节/","link":"","permalink":"https://www.codetool.top/article/%E6%84%BF%E5%B9%BF%E5%A4%A7%E5%9B%BD%E4%BA%BA%E9%83%BD%E8%83%BD%E5%B9%B3%E5%AE%89%E5%BA%A6%E8%BF%87%E8%BF%99%E4%B8%AA%E6%98%A5%E8%8A%82/","excerpt":"","text":"今天是2020年1月25日，农历正月初一，是咱们国家的传统佳节——春节。我一直觉得春节是中国很重要的一个文化符号，我相信对于所有华人来说，春节的特殊性已经融于血液之中，是不可替代的节日。我在这里恭祝所有华人新年快乐，鼠年大吉。 同时我也希望，大家应时刻把自己的健康安全放在第一位，在2019-nCoV（武汉肺炎）肆虐之际，要时刻注意清洁卫生，出门戴好口罩，这段时间尽量避免和别人接触。 截至目前，大多数省级行政区都启动了突发公共卫生事件一级响应，这件事的重要程度不言而喻，我也有在持续关注疫情的动态。我相信只要大家齐心协力，我们一定能打好这场攻坚战，我们也不用太过恐慌，保护好自己就是最重要的。 目前已经可以看到很多市民的防范意识都有提高，我觉得我们现在做的一切都在步入正轨。 希望这个春节所有人都平平安安！武汉加油！中国加油！","categories":[{"name":"日常/随笔","slug":"日常-随笔","permalink":"https://www.codetool.top/categories/%E6%97%A5%E5%B8%B8-%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"日常","slug":"日常","permalink":"https://www.codetool.top/tags/%E6%97%A5%E5%B8%B8/"}]},{"title":"leetcode85-最大矩形","slug":"leetcode85-最大矩形","date":"2020-01-24T05:19:04.000Z","updated":"2020-01-24T05:53:01.977Z","comments":true,"path":"article/leetcode85-最大矩形/","link":"","permalink":"https://www.codetool.top/article/leetcode85-%E6%9C%80%E5%A4%A7%E7%9F%A9%E5%BD%A2/","excerpt":"","text":"1 原题给定一个仅包含 0 和 1 的二维二进制矩阵，找出只包含 1 的最大矩形，并返回其面积。 示例： 输入:[&nbsp;&nbsp;[“1”,”0”,”1”,”0”,”0”],&nbsp;&nbsp;[“1”,”0”,”1”,”1”,”1”],&nbsp;&nbsp;[“1”,”1”,”1”,”1”,”1”],&nbsp;&nbsp;[“1”,”0”,”0”,”1”,”0”]]输出: 6 2 解法2.1 思想这道题可以分解成若干leetcode84-柱状图中最大的矩形的子问题，可以使用相同的方法。 我们从上往下动态规划二维数组，每增加一行就会出现不同的柱状区域。 从每一次得到的最大矩形面积中获取最大值，就是该题的答案 2.2 代码class Solution { public int largestRectangleArea(int[] heights) { int length = heights.length; if(length==0) return 0; int max = 0; int left[] = new int[length]; int right[] = new int[length]; left[0] = -1; right[length-1] = length; for(int i = 1;i&lt;length;i++){ //如果左边一列比当前列矮，则left就等于左边一列的下标。 if(heights[i]>heights[i-1]) left[i] = i-1; else{ //否则沿着左边这列的left一直查找过去，直到找到比当前列低的一列 left[i] = left[i-1]; while(left[i]!=-1&amp;&amp;heights[left[i]]>=heights[i]) left[i] = left[left[i]]; } } for(int i = length-2;i>=0;i--){ //如果右边一列比当前列矮，则right就等于右边一列的下标。 if(heights[i]>heights[i+1]) right[i] = i+1; else{ //否则沿着右边这列的right一直查找过去，直到找到比当前列低的一列 right[i] = right[i+1]; while(right[i]!=length&amp;&amp;heights[right[i]]>=heights[i]) right[i] = right[right[i]]; } } for(int i = 0;i&lt;length;i++){ int area = (right[i]-left[i]-1)*heights[i]; if(area>max) max = area; } return max; } public int maximalRectangle(char[][] matrix) { if(matrix.length == 0) return 0; int height[] = new int[matrix[0].length]; int max = 0; for(char[] line:matrix){ //每增加一行改变height数组 for(int i=0;i&lt;line.length;i++){ if(line[i]=='0') height[i]=0; else height[i] += 1; } int area = largestRectangleArea(height); if(area>max) max=area; } return max; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"https://www.codetool.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]},{"title":"leetcode84-柱状图中最大的矩形","slug":"leetcode84-柱状图中最大的矩形","date":"2020-01-23T19:01:50.000Z","updated":"2020-01-23T19:12:16.370Z","comments":true,"path":"article/leetcode84-柱状图中最大的矩形/","link":"","permalink":"https://www.codetool.top/article/leetcode84-%E6%9F%B1%E7%8A%B6%E5%9B%BE%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9A%84%E7%9F%A9%E5%BD%A2/","excerpt":"","text":"1 原题给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。 求在该柱状图中，能够勾勒出来的矩形的最大面积。 以上是柱状图的示例，其中每个柱子的宽度为 1，给定的高度为 [2,1,5,6,2,3]。 图中阴影部分为所能勾勒出的最大矩形面积，其面积为 10 个单位。 示例： 输入： [2,1,5,6,2,3]输出： 10 2 解法2.1 思想这道题和leetcode42-接雨水较为相似。 对于每列来说，以当前列高为高的最大矩形区域的宽度区域为被左边最近较矮一列和右边最近较矮一列围起来的宽度。 如果两边有一边没有比当前列矮的一列，则左边算作-1，右边算作length。 2.2 代码class Solution { public int largestRectangleArea(int[] heights) { int length = heights.length; if(length==0) return 0; int max = 0; int left[] = new int[length]; int right[] = new int[length]; left[0] = -1; right[length-1] = length; for(int i = 1;i&lt;length;i++){ //如果左边一列比当前列矮，则left就等于左边一列的下标。 if(heights[i]>heights[i-1]) left[i] = i-1; else{ //否则沿着左边这列的left一直查找过去，直到找到比当前列低的一列 left[i] = left[i-1]; while(left[i]!=-1&amp;&amp;heights[left[i]]>=heights[i]) left[i] = left[left[i]]; } } for(int i = length-2;i>=0;i--){ //如果右边一列比当前列矮，则right就等于右边一列的下标。 if(heights[i]>heights[i+1]) right[i] = i+1; else{ //否则沿着右边这列的right一直查找过去，直到找到比当前列低的一列 right[i] = right[i+1]; while(right[i]!=length&amp;&amp;heights[right[i]]>=heights[i]) right[i] = right[right[i]]; } } for(int i = 0;i&lt;length;i++){ int area = (right[i]-left[i]-1)*heights[i]; if(area>max) max = area; } return max; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"https://www.codetool.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]},{"title":"深入理解java虚拟机第三版读书笔记09","slug":"深入理解java虚拟机第三版读书笔记09","date":"2020-01-23T13:14:13.000Z","updated":"2020-01-25T13:15:49.781Z","comments":true,"path":"article/深入理解java虚拟机第三版读书笔记09/","link":"","permalink":"https://www.codetool.top/article/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89%E7%89%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B009/","excerpt":"","text":"续深入理解java虚拟机第三版读书笔记08 1 类加载器通过一个类的全限定名来获取描述该类的二进制字节流称为类加载器。类加载器可以用户自定义，是java语言流行的一项原因 1.1 类与类加载器对于任意一个类，都必须由加载它的类加载器和这个类本身一起共同确立其在Java虚拟机中的唯一性，每一个类加载器，都拥有一个独立的类名称空间。 或者说：比较两个类是否“相等”，只有在这两个类是由同一个类加载器加载的前提下才有意义，否则，即使这两个类来源于同一个Class文件，被同一个Java虚拟机加载，只要加载它们的类加载器不同，那这两个类就必定不相等。 这里所指的“相等”，包括代表类的Class对象的equals()方法、isAssignableFrom()方法、isInstance()方法的返回结果，也包括了使用instanceof关键字做对象所属关系判定等各种情况。 1.2 双亲委派模型站在Java虚拟机的角度来看，只存在两种不同的类加载器：一种是启动类加载器（BootstrapClassLoader），这个类加载器使用C++语言实现，是虚拟机自身的一部分；另外一种就是其他所有的类加载器，这些类加载器都由Java语言实现，独立存在于虚拟机外部，并且全都继承自抽象类 java.lang.ClassLoader。 自JDK 1.2以来，Java一直保持着三层类加载器、双亲委派的类加载架构。 对于JDK8及之前版本的Java，绝大多数程序都会使用到以下3个系统提供的类加载器来进行加载 启动类加载器（Bootstrap Class Loader）：这个类加载器负责加载存放在 &lt;JAVA_HOME&gt;\\lib目录，或者被-Xbootclasspath参数所指定的路径中存放的，而且是Java虚拟机能够识别的类库加载到虚拟机的内存中。用户在编写自定义类加载器时，如果需要把加载请求委派给引导类加载器去处理，那直接使用null代替即可。 扩展类加载器（Extension Class Loader）：这个类加载器是在类sun.misc.Launcher$ExtClassLoader中以Java代码的形式实现的。它负责加载&lt;JAVA_HOME&gt;\\lib\\ext目录中，或者被java.ext.dirs系统变量所指定的路径中所有的类库。JDK的开发团队允许用户将具有通用性的类库放置在ext目录里以扩展Java SE的功能，在JDK 9之后，这种扩展机制被模块化带来的天然的扩展能力所取代。由于扩展类加载器是由Java代码实现的，开发者可以直接在程序中使用扩展类加载器来加载Class文件。 应用程序类加载器（Application Class Loader）：这个类加载器由 sun.misc.Launcher$AppClassLoader来实现。由于应用程序类加载器是ClassLoader类中的getSystemClassLoader()方法的返回值，所以有些场合中也称它为“系统类加载器”。它负责加载用户类路径（ClassPath）上所有的类库，开发者同样可以直接在代码中使用这个类加载器。如果应用程序中没有自定义过自己的类加载器，一般情况下这个就是程序中默认的类加载器。 双亲委派模型要求除了顶层的启动类加载器外，其余的类加载器都应有自己的父类加载器。不过这里类加载器之间的父子关系一般不是以继承（Inheritance）的关系来实现的，而是通常使用组合（Composition）关系来复用父加载器的代码。（子加载器将部分动作委派给父加载器） 双亲委派模型的工作过程是：如果一个类加载器收到了类加载的请求，它首先不会自己去尝试加载这个类，而是把这个请求委派给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到最顶层的启动类加载器中，只有当父加载器反馈自己无法完成这个加载请求（它的搜索范围中没有找到所需的类）时，子加载器才会尝试自己去完成加载。 好处是Java中的类随着它的类加载器一起具备了一种带有优先级的层次关系，例如类java.lang.Object都是交给启动类加载器进行加载，因此Object类在程序的各种类加载器环境中都能够保证是同一个类。 实现双亲委派模型的代码： protected synchronized Class&lt;?> loadClass(String name, boolean resolve) throws ClassNotFoundException { // 首先，检查请求的类是否已经被加载过了 Class c = findLoadedClass(name); if (c == null) { try { if (parent != null) { c = parent.loadClass(name, false); } else {//代表找到了启动类加载器 c = findBootstrapClassOrNull(name); } } catch (ClassNotFoundException e) { // 如果父类加载器抛出ClassNotFoundException // 说明父类加载器无法完成加载请求 } if (c == null) { // 在父类加载器无法加载时 // 再调用本身的findClass方法来进行类加载 c = findClass(name);//findClass实现加载过程 } } if (resolve) { resolveClass(c); } return c; } 1.3 破坏双亲委派模型为什么要破坏双亲委派模型？ 如果基础类型要调用回用户的代码。 实例： 启动类加载器加载的DriverManager在loadInitialDriver()加载com.mysql.jdbc.Driver应用程序类 JNDI服务对资源进行查找和集中管理，可以通过接口名获取所有实现类，需要调用由其他厂商实现并部署在应用程序的ClassPath下的JNDI服务提供者接口（Service Provider Interface，SPI）的代码。 JDK9的模块化实现热部署。 解决方案： 线程上下文类加载器（Thread Context ClassLoader）。这个类加载器可以通过java.lang.Thread类的setContextClassLoader()方法进行设置，如果创建线程时还未设置，它将会从父线程中继承一个，如果在应用程序的全局范围内都没有设置过的话，那这个类加载器默认就是应用程序类加载器。 使用Class.forName(String name, boolean initialize,ClassLoader loader)方法使用指定的类加载器加载类。 1.4 自定义类加载器 继承ClassLoader父类 要遵从双亲委派模型，重写findClass方法。 读取类文件的字节码 调用父类的defineClass方法来加载类 使用者调用该类加载器的loadClass方法 class MyClassLoader extends ClassLoader{ @Override protected Class&lt;?> findClass(String name) throws ClassNotFoundException { String path = \"e:\\\\mypath\\\\\" + name + \".class\"; try { ByteArrayOutputStream os = new ByteArrayOutputStream(); Files.copy(Paths.get(path),os); byte[] bytes = os.toByteArray(); return defineClass(name,bytes,0,bytes.length); }catch (IOException e){ e.printStackTrace(); throw new ClassNotFoundException(); } } } 1.5 补充 Class.getClassLoader()可以获取一个类的加载器，启动类加载器是null -Xbootclasspath/a:&lt;追加路径&gt;可以在JAVA_HOME/lib的基础上追加路径让启动类加载器加载。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"深入理解java虚拟机","slug":"深入理解java虚拟机","permalink":"https://www.codetool.top/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"Java字节码实例探究","slug":"Java字节码实例探究","date":"2020-01-23T10:22:05.000Z","updated":"2020-02-13T05:25:32.096Z","comments":true,"path":"article/Java字节码实例探究/","link":"","permalink":"https://www.codetool.top/article/Java%E5%AD%97%E8%8A%82%E7%A0%81%E5%AE%9E%E4%BE%8B%E6%8E%A2%E7%A9%B6/","excerpt":"","text":"深入理解java虚拟机第三版读书笔记06中介绍了class文件结构，这里我们动手实践，编译一个类查看一下它的字节码。 java源码： public class Main { private int i = 10; private static int j = 40000; public static String str = \"Hello World!\"; public static void main(String[] args){ System.out.println(str); } } 这个类有方法有实例变量有静态变量，在JDK8环境下编译后的字节码开头部分如下图： 我们来逐字节分析： 1 魔数、次版本号、主版本号00~03：CA FE BA BE，魔数。 04~05：00 00 Minor Version，次版本号06~07：00 34 十进制52，Major Version，主版本号，两者对应JDK8 2 常量池08~09：00 2F 十进制47，代表常量池内项的数量。 10开始为常量池中的各表： #10A：0A 十进制10，代表CONSTANT_Methodref_info类型，0B~0E：00 0A 00 1E #10，#30 #20F：09 十进制9，代表CONSTANT_Fieldref_info类型，10~13：00 09 00 1F #9，#31 #314：09 十进制9，代表CONSTANT_Fieldref_info类型，15~18：00 20 00 21 #32，#33 #419：09 十进制9，代表CONSTANT_Fieldref_info类型，1A~1D：00 09 00 22 #9，#34 #51E：0A 十进制9，代表CONSTANT_Methodref_info类型，1F~22：00 23 00 24 #35，#36 #61E：03 十进制3，代表CONSTANT_Integer_info类型，15~18：00 00 9C 40 40000 #728：09 十进制9，代表CONSTANT_Fieldref_info类型，29~2C：00 09 00 25 #9，#37 #82D：08 十进制8，代表CONSTANT_String_info类型，2E~2F：00 26 #38 #930：07 十进制7，代表CONSTANT_Class_info类型，31~32：00 27 #39 #1033：07 十进制7，代表CONSTANT_Class_info类型，34~35：00 28 #40 #1136：01 十进制1，代表CONSTANT_Utf8_info类型，37~38：00 01代表长度为1，39：69 代表字符&#39;i&#39; #123A：01 十进制1，代表CONSTANT_Utf8_info类型，3B~3C：00 01代表长度为1，3D：49 代表字符&#39;I&#39; 剩余常量池的项我们用javap得到（其实累了）： #13 = Utf8 j #14 = Utf8 str #15 = Utf8 Ljava/lang/String; #16 = Utf8 &lt;init&gt; #17 = Utf8 ()V #18 = Utf8 Code #19 = Utf8 LineNumberTable #20 = Utf8 LocalVariableTable #21 = Utf8 this #22 = Utf8 LMain; #23 = Utf8 main #24 = Utf8 ([Ljava/lang/String;)V #25 = Utf8 args #26 = Utf8 [Ljava/lang/String; #27 = Utf8 &lt;clinit&gt; #28 = Utf8 SourceFile #29 = Utf8 Main.java #30 = NameAndType #16:#17 // &quot;&lt;init&gt;&quot;:()V #31 = NameAndType #11:#12 // i:I #32 = Class #41 // java/lang/System #33 = NameAndType #42:#43 // out:Ljava/io/PrintStream; #34 = NameAndType #14:#15 // str:Ljava/lang/String; #35 = Class #44 // java/io/PrintStream #36 = NameAndType #45:#46 // println:(Ljava/lang/String;)V #37 = NameAndType #13:#12 // j:I #38 = Utf8 Hello World! #39 = Utf8 Main #40 = Utf8 java/lang/Object #41 = Utf8 java/lang/System #42 = Utf8 out #43 = Utf8 Ljava/io/PrintStream; #44 = Utf8 java/io/PrintStream #45 = Utf8 println #46 = Utf8 (Ljava/lang/String;)V3 访问标志、类索引、父类索引、接口索引集合跳过常量池，到了访问标志： 01C1~01C2：00 21，代表ACC_SUPER（0x0020）和ACC_PUBLIC（0x0001）。 接着是类索引： 01C3~01C4：00 09 代表常量池中#9，#9又指向#39，可以得知是Main，即类名 父类索引： 01C5~01C6：00 0A 代表常量池中#10，#10又指向#40，可以得知是java/lang/Object 接口索引集合： 01C7~01D8：00 00 代表接口索引集合中没有数据，长度是0 4 字段表集合01C9~01CA: 00 03 十进制3，代表字段表中有三项数据： 第一个字段： 01CB~01CC: 00 02 ，访问标志，代表ACC_PRIVATE（0x0002）01CD~01CE：00 0B ，name_index，指向常量池#11，#11代表&#39;i&#39;01CF~01D0：00 0C , discriptor_index，指向常量池#12，#12代表&#39;I&#39;（即int类型）01D1~01D2：00 00 , attributes_count，代表该字段无属性表。 第二个字段： 01D3~01D4: 00 0A ，访问标志，代表ACC_STATIC（0x0008）和ACC_PRIVATE（0x0002）01D5~01D6：00 0D ，name_index，指向常量池#13，#13代表&#39;j&#39;01D7~01D8：00 0C , discriptor_index，指向常量池#12，#12代表&#39;I&#39;（即int类型）01D9~01DA：00 00 , attributes_count，代表该字段无属性表。 第三个字段： 01DB~01DC: 00 09 ，访问标志，代表ACC_STATIC（0x0008）和ACC_PUBLIC（0x0001）01DD~01DE：00 0E ，name_index，指向常量池#14，#14代表&quot;str&quot;01DF~01E0：00 0F , discriptor_index，指向常量池#15，#15代表&quot;Ljava/lang/String;&quot;（即String类型）01E1~01E2：00 00 , attributes_count，代表该字段无属性表。 5 方法表集合01E3~01E4：00 03 ，十进制3，代表方法表中有三项数据： 第一个方法： 01E5~01E6: 00 01 ，访问标志，代表ACC_PUBLIC（0x0001）01E7~01E8：00 10 ，name_index，指向常量池#16，#16代表&quot;&lt;init&gt;&quot;（即对象构造器）01E9~01EA：00 11 , discriptor_index，指向常量池#17，#17代表&quot;()V&quot;（即无参、无返回值）01EB~01EC：00 01 , attributes_count，代表属性表中有一项数据。01ED~01EE: 00 12 ，attribute_name_index，指向常量池#18，#18代表&quot;Code&quot;（即Code属性）01EF~01F2：00 00 00 39，代表Code内容长度为57个字节。 接下来57个字节我们不查表逐一翻译，查看javap提供的内容： 01F3~022B Code: stack=2, locals=1, args_size=1 0: aload_0 1: invokespecial #1 // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V 4: aload_0 5: bipush 10 7: putfield #2 // Field i:I 10: return LineNumberTable: line 7: 0 line 8: 4 LocalVariableTable: Start Length Slot Name Signature 0 11 0 this LMain;我们来解释一下它的字节码指令： aload_0 将局部变量表slot 0加载到操作数栈，那么局部变量表slot 0原来存放的是什么呢？非静态方法局部变量表0位置一开始都是存放的this，即调用方法的当前对象。这句话就是把this入操作数栈。 invokespecial #1 this调用#1代表的方法，我们查常量表#1，#1又指向#10和#30，#10指向#40，是java/lang/Object，#30是&quot;&lt;init&gt;&quot;:()V，即调用父类Object的构造方法。 aload_0 再次加载this bipush 10 将常量10压入操作数栈。 putfield #2 putfield是设置对象的字段值，通过查常量表，#2代表Main中的i:I，这句话就把栈里的两个操作数：10设置给this.i return 返回 第二个方法： 022C~022D: 00 09 ，访问标志，代表ACC_PUBLIC（0x0001）和ACC_STATIC（0x0008）022E~022F：00 17 ，name_index，指向常量池#23，#23代表&quot;main&quot;0230~0231：00 18 , discriptor_index，指向常量池#24，#24代表&quot;([Ljava/lang/String;)V&quot;（即参数为String数组、无返回值）0232~0233：00 01 , attributes_count，代表属性表中有一项数据。0234~0235: 00 12 ，attribute_name_index，指向常量池#18，#18代表&quot;Code&quot;（即Code属性）0236~0239：00 00 00 38，代表Code内容长度为56个字节。 接下来56个字节我们不查表逐一翻译，查看javap提供的内容： 023A~0271 Code: stack=2, locals=1, args_size=1 0: getstatic #3 // Field java/lang/System.out:Ljava/io/PrintStream; 3: getstatic #4 // Field str:Ljava/lang/String; 6: invokevirtual #5 // Method java/io/PrintStream.println:(Ljava/lang/String;)V 9: return LineNumberTable: line 12: 0 line 13: 9 LocalVariableTable: Start Length Slot Name Signature 0 10 0 args [Ljava/lang/String;我们来解释一下它的字节码指令： getstatic #3 获取一个类的静态字段，通过查常量表可知#3是java/lang/System的out:Ljava/io/PrintStream;即获取System.out getstatic #4 获取一个类的静态字段，通过查常量表可知#4是Main的str:Ljava/lang/String;即获取str字段。 invokevirtual #5 调用#5方法，通过查常量表可知#5是java/io/PrintStream的println:(Ljava/lang/String;)V，即在操作栈的基础上调用System.out.println(str) return 返回 第三个方法： 0272~0273: 00 08 ，访问标志，代表ACC_STATIC（0x0008）0274~0275：00 1B ，name_index，指向常量池#27，#27代表&quot;&lt;clinit&gt;&quot;（即类构造器）0276~0277：00 11 , discriptor_index，指向常量池#17，#17代表&quot;()V&quot;（即无参无返回值）0278~0279：00 01 , attributes_count，代表属性表中有一项数据。027A~027B: 00 12 ，attribute_name_index，指向常量池#18，#18代表&quot;Code&quot;（即Code属性）027C~027F：00 00 00 27，代表Code内容长度为39个字节。 接下来39个字节我们不查表逐一翻译，查看javap提供的内容： 0280~02A6 Code: stack=1, locals=0, args_size=0 0: ldc #6 // int 40000 2: putstatic #7 // Field j:I 5: ldc #8 // String Hello World! 7: putstatic #4 // Field str:Ljava/lang/String; 10: return LineNumberTable: line 9: 0 line 10: 5我们来解释一下它的字节码指令： ldc #6 把一个常量#6加载到操作数栈，通过查常量表可知#6是40000。 putstatic #7 设置一个类的静态字段，通过查常量表可知#7是Main的j:I，即设置j的值为40000。（注意这里与第一个方法不同的是，设置小于等于short最大值的值的时候常数放在字节码中，而大于short最大值的常量放在常量表中） ldc #8 把一个常量#8加载到操作数栈，通过查常量表可知#8是&quot;Hello World!&quot;。 putstatic #4 设置一个类的静态字段，通过查常量表可知#4是Main的str:Ljava/lang/String;，即将str的值设置为&quot;Hello World!&quot;。 return 返回 6 属性表02A7~02A8：00 01 attributes_count，代表属性表中有一项数据02A9~02AA：00 1C attribute_name_index，指向常量池#28，#28代表&quot;SourceFile&quot;（记录源文件名称）02AB~02AE: 00 00 00 02 代表属性内容长度为2个字节。02AF~02B0: 00 1D 代表属性的值，指向常量池#29，#29代表&quot;Main.java&quot; 到此，该class文件的字节码全部分析完","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"}]},{"title":"leetcode71-简化路径","slug":"leetcode71-简化路径","date":"2020-01-23T06:40:01.000Z","updated":"2020-02-20T14:55:21.053Z","comments":true,"path":"article/leetcode71-简化路径/","link":"","permalink":"https://www.codetool.top/article/leetcode71-%E7%AE%80%E5%8C%96%E8%B7%AF%E5%BE%84/","excerpt":"","text":"1 原题以 Unix 风格给出一个文件的绝对路径，你需要简化它。或者换句话说，将其转换为规范路径。 在 Unix 风格的文件系统中，一个点（.）表示当前目录本身；此外，两个点 （..） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。更多信息请参阅：Linux / Unix中的绝对路径 vs 相对路径 请注意，返回的规范路径必须始终以斜杠 / 开头，并且两个目录名之间必须只有一个斜杠 /。最后一个目录名（如果存在）不能以 / 结尾。此外，规范路径必须是表示绝对路径的最短字符串。 示例 1： 输入： “/home/“输出： “/home”解释： 注意，最后一个目录名后面没有斜杠。 示例 2： 输入： “/../“输出： “/“解释： 从根目录向上一级是不可行的，因为根是你可以到达的最高级。 示例 3： 输入： “/home//foo/“输出： “/home/foo”解释： 在规范路径中，多个连续斜杠需要用一个斜杠替换。 示例 4： 输入： “/a/./b/../../c/“输出： “/c” 示例 5： 输入： “/a/../../b/../c//.//“输出： “/c” 示例 6： 输入： “/a//b////c/d//././/..”输出： “/a/b/c” 2 解法2.1 思想使用栈的思想来解决该问题，将给定的字符串使用&quot;/&quot;分割，会得到由空字符串、&quot;.&quot;、&quot;..&quot;、目录名组成的字符串数组，然后根据它们的特点对元素进行入栈出栈等操作。 2.2 代码class Solution { public String simplifyPath(String path) { StringBuilder sb = new StringBuilder(); //因为最后要遍历栈，这里用ArrayList来模拟栈 List&lt;String> stack = new ArrayList&lt;>(); String[] dirs = path.split(\"/\"); for(String i:dirs){ //空字符串和\".\"都表示当前目录 if(i.equals(\"\") || i.equals(\".\")) continue; //\"..\"表示上一级目录，出栈一个元素 if(i.equals(\"..\")){ if(stack.size()!=0) stack.remove(stack.size()-1); } //其他目录名入栈 else stack.add(i); } if(stack.size()==0) return \"/\"; //通过\"/\"连接起来 for(String i:stack){ sb.append(\"/\"); sb.append(i); } return sb.toString(); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode42-接雨水","slug":"leetcode42-接雨水","date":"2020-01-22T17:09:42.000Z","updated":"2020-01-22T17:39:56.787Z","comments":true,"path":"article/leetcode42-接雨水/","link":"","permalink":"https://www.codetool.top/article/leetcode42-%E6%8E%A5%E9%9B%A8%E6%B0%B4/","excerpt":"","text":"1 原题给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。 上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 示例： 输入： [0,1,0,2,1,0,1,3,2,1,2,1]输出： 6 2 解法2.1 思想每一列能存下的雨水单位等于左右最高两列当中的较矮一列与当前高度的高度差。 如图，第五列的积雨水量，等于左边最高一列（第四列left）和右边最高一列（第八列right）的较矮一列（left）与当前列高度的高度差（2-1=1） 如果两边有一边没有比当前列高的列，则当前列不会积水。 2.2 代码我一开始是这样写的： class Solution { public int trap(int[] height) { int total = 0; int count = height.length; Integer[] left = new Integer[count]; Integer[] right = new Integer[count]; for(int i = 0;i&lt;count;i++){ for(int j = 1;j&lt;=i;j++){//更新左边所有列的right if(right[j]==null||height[i]>right[j]) right[j] = height[i]; } for(int j = i;j&lt;count-1;j++){//更新右边所有列的left if(left[j]==null||height[i]>left[j]) left[j] = height[i]; } } for(int i = 0;i&lt;count;i++){ if(left[i]==null || right[i] == null) continue; total += (Math.min(left[i],right[i])-height[i]); } return total; } } 时间复杂度达到了N2级别，那么如何优化呢？ 不必使用null来表示没有比当前列高的列，即使两列相等，高度差也是0，相当于不积水。 利用动态规划的思想，如果前一列的left比当前列高，则当前列的left也等于前一列的left。对于right也是一样的。 优化后： class Solution { public int trap(int[] height) { int total = 0; int count = height.length; if(count==0) return 0; Integer[] left = new Integer[count]; Integer[] right = new Integer[count]; left[0] = height[0]; right[count-1] = height[count-1]; for(int i = 1;i&lt;count;i++){//从左向右更新left if(height[i]>left[i-1]) left[i] = height[i]; else left[i] = left[i-1]; } for(int i = count-2;i>=0;i--){//从右向左更新right if(height[i]>right[i+1]) right[i] = height[i]; else right[i] = right[i+1]; } for(int i = 0;i&lt;count;i++){ total += (Math.min(left[i],right[i])-height[i]); } return total; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"动态规划","slug":"动态规划","permalink":"https://www.codetool.top/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"}]},{"title":"leetcode95-不同的二叉搜索树II","slug":"leetcode95-不同的二叉搜索树II","date":"2020-01-22T15:12:01.000Z","updated":"2020-01-22T15:20:18.019Z","comments":true,"path":"article/leetcode95-不同的二叉搜索树II/","link":"","permalink":"https://www.codetool.top/article/leetcode95-%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91II/","excerpt":"","text":"1 原题给定一个整数 n，求以 1 … n 为节点组成的二叉搜索树有多少种？ 示例: 输入: 3输出:[&nbsp;&nbsp;[1,null,3,2],&nbsp;&nbsp;[3,2,null,1],&nbsp;&nbsp;[3,1,null,null,2],&nbsp;&nbsp;[2,1,3],&nbsp;&nbsp;[1,null,2,null,3]]解释:以上的输出对应以下 5 种不同结构的二叉搜索树：&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;\\ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;\\ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3 2 解法2.1 思想这道题的思想和leetcode96-不同的二叉搜索树类似，通过各种左右组合情况得到为一个list返回。 2.2 代码class Solution { public List&lt;TreeNode> generateTrees(int n) { if(n==0) return new ArrayList&lt;TreeNode>(); return nodesInRange(1,n); } public List&lt;TreeNode> nodesInRange(int start,int end){ List&lt;TreeNode> list = new ArrayList&lt;>(); if(start>end){//返回一个包含null的list使得for嵌套能正常工作 list.add(null); return list; } if(start==end){//返回一个包含本数字的list list.add(new TreeNode(start)); return list; } for(int i = start;i&lt;=end;i++){ //自由组合左子树和右子树的情况 for(TreeNode left:nodesInRange(start,i-1)){ for(TreeNode right:nodesInRange(i+1,end)){ TreeNode root = new TreeNode(i); root.left = left; root.right = right; list.add(root); } } } return list; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"搜索树","slug":"搜索树","permalink":"https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode96-不同的二叉搜索树","slug":"leetcode96-不同的二叉搜索树","date":"2020-01-22T14:15:52.000Z","updated":"2020-01-22T15:16:07.897Z","comments":true,"path":"article/leetcode96-不同的二叉搜索树/","link":"","permalink":"https://www.codetool.top/article/leetcode96-%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/","excerpt":"","text":"1 原题给定一个整数 n，求以 1 … n 为节点组成的二叉搜索树有多少种？ 示例: 输入: 3输出: 5解释: 给定 n = 3, 一共有 5 种不同结构的二叉搜索树: &nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;\\ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;\\ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3 2 解法2.1 思想对于每一个n对应的数量应该是相同的，我们从1~n中任选一个做根节点（假设是第i个），那么左右两边各有F(i-1)和F(n-i)中情况，将它们相乘就是此时第i个元素做根节点的情况。如此递归计算总数量。 2.2 代码我一开始的写法： class Solution { public int numTrees(int n) { return kindsCount(1,n); } public int kindsCount(int start,int end){ if(start >= end) return 1; int count = 0; for(int i = start;i&lt;=end;i++){ count += kindsCount(start,i-1)*kindsCount(i+1,end); } return count; } } 但是发现这样写消耗非常多时间，leetcode执行用时1700 ms。 优化的思路主要是： end和start并不关键，只要start-end（即范围内的数字数量,用n表示）相同，对应的值就相同。 假如优化上条，很多F(n)单元会被重复计算，可以使用数组做缓存。 优化后： class Solution { Integer[] cache; public int numTrees(int n) { cache = new Integer[n+1]; return kindsCount(n); } public int kindsCount(int n){ if(n &lt;= 1) return 1; if(cache[n]!=null) return cache[n]; int count = 0; for(int i = 1;i&lt;=n;i++){ count += kindsCount(i-1)*kindsCount(n-i); } cache[n] = count; return count; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"搜索树","slug":"搜索树","permalink":"https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"深入理解java虚拟机第三版读书笔记08","slug":"深入理解java虚拟机第三版读书笔记08","date":"2020-01-22T08:54:44.000Z","updated":"2020-01-22T19:37:45.581Z","comments":true,"path":"article/深入理解java虚拟机第三版读书笔记08/","link":"","permalink":"https://www.codetool.top/article/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89%E7%89%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B008/","excerpt":"","text":"以下是第七章 虚拟机类加载机制的内容 1 概述Java虚拟机把描述类的数据从Class文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的Java类型，这个过程被称作虚拟机的类加载机制。在Java语言里面，类型的加载、连接和初始化过程都是在程序运行期间完成的，这种策略让Java语言进行提前编译会面临额外的困难，也会让类加载时稍微增加一些性能开销，但是却为Java应用提供了极高的扩展性和灵活性。 2 类加载的时机一个类型从被加载到虚拟机内存中开始，到卸载出内存为止，它的整个生命周期将会经历加载（Loading）、验证（Verification）、准备（Preparation）、解析（Resolution）、初始化（Initialization）、使用（Using）和卸载（Unloading）七个阶段，其中验证、准备、解析三个部分统称为连接（Linking）。 加载、验证、准备、初始化和卸载这五个阶段的顺序是确定的，类型的加载过程必须按照这种顺序按部就班地开始，而解析阶段则不一定：它在某些情况下可以在初始化阶段之后再开始，这是为了支持Java语言的运行时绑定特性。 加载阶段并没有严格规定开始的时机，而有且只有六种情况必须立即对类进行“初始化”： 遇到new、getstatic、putstatic或invokestatic这四条字节码指令 使用java.lang.reflect包的方法对类型进行反射调用 当初始化类的时候，如果发现其父类还没有进行过初始化，则需要先触发其父类的初始化。 当虚拟机启动时，用户需要指定一个要执行的主类（包含main()方法的那个类），虚拟机会先初始化这个主类。 当使用JDK 7新加入的动态语言支持时，如果一个java.lang.invoke.MethodHandle实例最后的解析结果为REF_getStatic、REF_putStatic、REF_invokeStatic、REF_newInvokeSpecial四种类型的方法句柄，并且这个方法句柄对应的类没有进行过初始化，则需要先触发其初始化。 当一个接口中定义了JDK 8新加入的默认方法（被default关键字修饰的接口方法）时，如果有这个接口的实现类发生了初始化，那该接口要在其之前被初始化。 这六种操作称为主动引用，其他引用称为被动引用，不会触发初始化。 接口的初始化稍有不同：对于第三点，接口只有真正用到父接口的时候才会使父接口初始化。 3 类加载的过程3.1 加载在加载阶段，Java虚拟机需要完成以下三件事情： 通过一个类的全限定名来获取定义此类的二进制字节流。 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。 在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口。 其中第一步自由度就很高，从ZIP压缩包中读取、从网络中获取、运行时计算生成等等。 加载阶段既可以使用Java虚拟机里内置的引导类加载器来完成，也可以由用户自定义的类加载器去完成，开发人员通过定义自己的类加载器去控制字节流的获取方式（重写一个类加载器的findClass()或loadClass()方法），实现根据自己的想法来赋予应用程序获取运行代码的动态性。 数组类本身不通过类加载器创建，它是由Java虚拟机直接在内存中动态构造出来的。但数组类与类加载器仍然有很密切的关系，因为数组类的元素类型（指的是数组去掉所有维度的类型）最终还是要靠类加载器来完成加载，一个数组类（下面简称为C）创建过程遵循以下规则： 如果数组的组件类型（指的是数组去掉一个维度的类型）是引用类型，那就递归采用本节中定义的加载过程去加载这个组件类型，数组C将被标识在加载该组件类型的类加载器的类名称空间上。 如果数组的组件类型不是引用类型（例如int[]数组的组件类型为int），Java虚拟机将会把数组C标记为与引导类加载器关联。 数组类的可访问性与它的组件类型的可访问性一致，如果组件类型不是引用类型，它的数组类的可访问性将默认为public，可被所有的类和接口访问到。 加载阶段与连接阶段的部分动作（如一部分字节码文件格式验证动作）是交叉进行的，但加载阶段提前开始于连接阶段。 3.2 验证这一阶段的目的是确保Class文件的字节流中包含的信息符合《Java虚拟机规范》的全部约束要求，保证这些信息被当作代码运行后不会危害虚拟机自身的安全。 尽管Java代码编译时会拒绝编译一些致命错误，但字节码可以被轻易修改，字节码检查也是必不可少的。 3.2.1 文件格式验证 是否以魔数0xCAFEBABE开头。 主、次版本号是否在当前Java虚拟机接受范围之内。 常量池的常量中是否有不被支持的常量类型（检查常量tag标志）。 指向常量的各种索引值中是否有指向不存在的常量或不符合类型的常量。 CONSTANT_Utf8_info型的常量中是否有不符合UTF-8编码的数据。 Class文件中各个部分及文件本身是否有被删除的或附加的其他信息。 …… 该验证阶段的主要目的是保证输入的字节流能正确地解析并存储于方法区之内，格式上符合描述一个Java类型信息的要求。这阶段的验证是基于二进制字节流进行的，只有通过了这个阶段的验证之后，这段字节流才被允许进入Java虚拟机内存的方法区中进行存储。 3.2.2 元数据验证 这个类是否有父类（除了java.lang.Object之外，所有的类都应当有父类）。 这个类的父类是否继承了不允许被继承的类（被final修饰的类）。 如果这个类不是抽象类，是否实现了其父类或接口之中要求实现的所有方法。 类中的字段、方法是否与父类产生矛盾（例如覆盖了父类的final字段，或者出现不符合规则的方法重载，例如方法参数都一致，但返回值类型却不同等）。 …… 第二阶段的主要目的是对类的元数据信息进行语义校验，保证不存在与《Java语言规范》定义相悖的元数据信息。 3.2.3 字节码验证 保证任意时刻操作数栈的数据类型与指令代码序列都能配合工作，例如不会出现类似于“在操作栈放置了一个int类型的数据，使用时却按long类型来加载入本地变量表中”这样的情况。 保证任何跳转指令都不会跳转到方法体以外的字节码指令上。 保证方法体中的类型转换总是有效的，例如可以把一个子类对象赋值给父类数据类型，这是安全的，但是把父类对象赋值给子类数据类型，甚至把对象赋值给与它毫无继承关系、完全不相干的一个数据类型，则是危险和不合法的。 目的是通过数据流分析和控制流分析，确定程序语义是合法的、符合逻辑的，不会危害虚拟机安全。 3.2.4 符号引用验证最后一个阶段的校验行为发生在虚拟机将符号引用转化为直接引用的时候，这个转化动作在解析阶段中发生。符号引用验证可以看作是对类自身以外（常量池中的各种符号引用）的各类信息进行匹配性校验，通俗来说就是，该类是否缺少或者被禁止访问它依赖的某些外部类、方法、字段等资源。 符号引用中通过字符串描述的全限定名是否能找到对应的类。 在指定类中是否存在符合方法的字段描述符及简单名称所描述的方法和字段。 符号引用中的类、字段、方法的可访问性（private、protected、public、&lt;package&gt;）是否可被当前类访问。 …… 符号引用验证的主要目的是确保解析行为能正常执行，如果无法通过符号引用验证，Java虚拟机将会抛出一个java.lang.IncompatibleClassChangeError的子类异常，典型的如：java.lang.IllegalAccessError、java.lang.NoSuchFieldError、java.lang.NoSuchMethodError等。 验证阶段不是必需的，如果程序运行使用的所有字节码都是安全的，可以考虑使用-Xverify：none参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间。 3.3 准备准备阶段是正式为类中定义的变量（即静态变量，被static修饰的变量）分配内存并设置类变量初始值的阶段。（初始值指的是零值，类初始化阶段中调用类构造器方法才会对类变量赋值） 特殊情况：如果字段存在ConstantValue属性（声明为final，会在字段表的属性表中增加一项ConstantValue属性），那在准备阶段变量值就会被初始化为ConstantValue属性所指定的初始值。 3.4 解析解析阶段是Java虚拟机将常量池内的符号引用替换为直接引用的过程。 直接引用是可以直接指向目标的指针、相对偏移量或者是一个能间接定位到目标的句柄。直接引用是和虚拟机实现的内存布局直接相关的，同一个符号引用在不同虚拟机实例上翻译出来的直接引用一般不会相同。如果有了直接引用，那引用的目标必定已经在虚拟机的内存中存在。 而符号引用只是能无歧义定位到目标的一套自定符号表述。 解析阶段发生的具体时间并未强制规定，只要求了在执行ane-warray、checkcast、getfield、getstatic、instanceof、invokedynamic、invokeinterface、invoke-special、invokestatic、invokevirtual、ldc、ldc_w、ldc2_w、multianewarray、new、putfield和putstatic这17个用于操作符号引用的字节码指令之前，先对它们所使用的符号引用进行解析。 对同一个符号引用可以进行多次解析请求，虚拟机也可以缓存解析的结果，但对于invokedynamic指令不能缓存，执行到该条指令时才能解析，它对应的引用称为“动态调用点限定符”。 invokedynamic本是为了支持如JRuby、 Scala等动态语言，JDK8后Lambda表达式和接口的默认方法的底层也会用到invokedynamic。 3.4.1 类或接口的解析将符号代表的类的全限定名交给当前类的类加载器来加载，如果是数组类型，则是加载它的数组元素类型，再由虚拟机生成对应的数组类型。 之后，验证当前类是否具有对该类的访问权限，若没有抛出异常java.lang.IllegalAccessError 3.4.2 字段解析要解析一个未被解析过的字段符号引用，会先找到字段表中对应的所属类并解析。 如果该类本身就包含了简单名称和字段描述符都与目标相匹配的字段，则返回这个字段的直接引用，查找结束。 否则，如果该类实现了接口，将会按照继承关系从下往上递归搜索各个接口和它的父接口，如果接口中包含了简单名称和字段描述符都与目标相匹配的字段，则返回这个字段的直接引用，查找结束。 否则。如果该类不是java.lang.Object的话，将会按照继承关系从下往上递归搜索其父类，如果在父类中包含了简单名称和字段描述符都与目标相匹配的字段，则返回这个字段的直接引用，查找结束。 否则，查找失败，抛出java.lang.NoSuchFieldError异常。 如果查找过程成功返回了引用，将会对这个字段进行权限验证，如果发现不具备对字段的访问权限，将抛出java.lang.IllegalAccessError异常。 如果一个字段具有多义性（如果不严格按照顺序可能多种方式都能找到），javac可能会拒绝编译。 3.4.3 方法解析方法解析也会先找到方法表中对应的所属类并解析。 类的方法和接口的方法符号引用的常量类型定义是分开的，如果发现该类是个接口的话，那就直接抛出java.lang.IncompatibleClassChangeError 异常。 如果通过了第一步，在该类中查找是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方法的直接引用，查找结束。 否则，在该类的父类中递归查找是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方法的直接引用，查找结束。 否则，在该类实现的接口列表及它们的父接口之中递归查找是否有简单名称和描述符都与目标相匹配的方法，如果存在匹配的方法，说明该类是一个抽象类，这时候查找结束，抛出 java.lang.AbstractMethodError异常。 否则，宣告方法查找失败，抛出java.lang.NoSuchMethodError。 最后，如果查找过程成功返回了直接引用，将会对这个方法进行权限验证，如果发现不具备对此方法的访问权限，将抛出java.lang.IllegalAccessError异常。 3.4.4 接口方法解析接口方法解析也会先找到方法表中对应的所属类并解析。 与类的方法解析相反，如果发现该类是个类而不是接口，那么就直接抛出java.lang.IncompatibleClassChangeError异常。 否则，在该接口中查找是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方法的直接引用，查找结束。 否则，在该接口的父接口中递归查找，直到java.lang.Object类（接口方法的查找范围也会包括Object类中的方法）为止，看是否有简单名称和描述符都与目标相匹配的方法，如果有则返回这个方法的直接引用，查找结束。 如果多重继承多个父接口都有该方法，可能会返回其中一个方法的直接引用，在编译期间javac也可能拒绝编译。 否则，宣告方法查找失败，抛出java.lang.NoSuchMethodError异常。 JDK9模块化之后也可能抛出java.lang.IllegalAccessError异常。 3.5 初始化初始化阶段就是执行类构造器&lt;clinit&gt;()方法的过程。&lt;clinit&gt;()并不是程序员在Java代码中直接编写的方法，它是Javac编译器的自动生成物。 &lt;clinit&gt;()方法是由编译器自动收集类中的所有类变量的赋值动作和静态语句块（static{}块）中的语句合并产生的，顺序为出现的顺序。 Java虚拟机会保证在子类的&lt;clinit&gt;()方法执行前，父类的&lt;clinit&gt;()方法已经执行完毕。因此在Java虚拟机中第一个被执行的&lt;clinit&gt;()方法的类型肯定是java.lang.Object。 这个方法不是必需的，如果一个类中没有静态语句块，也没有对变量的赋值操作，那么编译器可以不为这个类生成&lt;clinit&gt;()方法。 在多线程环境下，如果多个线程同时去初始化一个类，那么只会有其中一个线程去执行这个类的&lt;clinit&gt;()方法，其他线程都需要阻塞等待。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"深入理解java虚拟机","slug":"深入理解java虚拟机","permalink":"https://www.codetool.top/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"leetcode779-第K个语法符号","slug":"leetcode779-第K个语法符号","date":"2020-01-21T18:06:24.000Z","updated":"2020-01-21T18:11:32.523Z","comments":true,"path":"article/leetcode779-第K个语法符号/","link":"","permalink":"https://www.codetool.top/article/leetcode779-%E7%AC%ACK%E4%B8%AA%E8%AF%AD%E6%B3%95%E7%AC%A6%E5%8F%B7/","excerpt":"","text":"1 原题在第一行我们写上一个 0。接下来的每一行，将前一行中的0替换为01，1替换为10。 给定行数 N 和序数 K，返回第 N 行中第 K个字符。（K从1开始） 例子： 输入: N = 1, K = 1输出: 0 输入: N = 2, K = 1输出: 0 输入: N = 2, K = 2输出: 1 输入: N = 4, K = 5输出: 1 解释:第一行: 0第二行: 01第三行: 0110第四行: 01101001 注意: N 的范围 [1, 30]. K 的范围 [1, 2^(N-1)]. 2 解法2.1 思想递归分析要查找的字符是上一行的哪个数字得到的，然后根据奇偶性得到目标字符 2.2 代码class Solution { public int kthGrammar(int N, int K) { if(N==0) return 0; if(K%2 == 1){ if(kthGrammar(N-1,(K+1)/2)==0) return 0; else return 1; }else{ if(kthGrammar(N-1,(K+1)/2)==0) return 1; else return 0; } } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode70-爬楼梯","slug":"leetcode70-爬楼梯","date":"2020-01-21T05:58:10.000Z","updated":"2020-01-21T06:11:07.542Z","comments":true,"path":"article/leetcode70-爬楼梯/","link":"","permalink":"https://www.codetool.top/article/leetcode70-%E7%88%AC%E6%A5%BC%E6%A2%AF/","excerpt":"","text":"1 原题假设你正在爬楼梯。需要 n 阶你才能到达楼顶。 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？ 注意： 给定 n 是一个正整数。 示例 1： 输入： 2输出： 2解释： 有两种方法可以爬到楼顶。1. 1 阶 + 1 阶2. 2 阶 示例 2： 输入： 3输出： 2解释： 有三种方法可以爬到楼顶。1. 1 阶 + 1 阶 + 1 阶2. 1 阶 + 2 阶3. 2 阶 + 1 阶 2 解法2.1 思想实际上是斐波那契数问题： 假设现在要走三阶楼梯，那么第一次走一阶楼梯时，还有f(2)种可能性，第一次走两阶楼梯时，还有f(1)种可能性，则f(3)=f(2)+f(1)，以此类推。 2.2 代码class Solution { Map&lt;Integer,Integer> map = new HashMap&lt;>(); public int climbStairs(int n) { if(n == 1) return 1; if(n == 2) return 2; if(map.containsKey(n)){ return map.get(n); } int ans = climbStairs(n-1)+climbStairs(n-2); map.put(n,ans); return ans; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode509-斐波那契数","slug":"leetcode509-斐波那契数","date":"2020-01-20T18:39:37.000Z","updated":"2020-01-21T06:11:11.023Z","comments":true,"path":"article/leetcode509-斐波那契数/","link":"","permalink":"https://www.codetool.top/article/leetcode509-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0/","excerpt":"","text":"1 原题斐波那契数，通常用 F(n) 表示，形成的序列称为斐波那契数列。该数列由 0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是： F(0) = 0, F(1) = 1F(N) = F(N - 1) + F(N - 2), 其中 N &gt; 1. 给定 N，计算 F(N)。 示例 1： 输入： 2输出： 1解释： F(2) = F(1) + F(0) = 1 + 0 = 1. 示例 2： 输入： 3输出： 2解释： F(3) = F(2) + F(1) = 1 + 1 = 2. 示例 3： 输入： 4输出： 3解释： F(4) = F(3) + F(2) = 2 + 1 = 3. 提示： 0 ≤ N ≤ 30 2 解法2.1 思想递归，由于很多递归单元会被重复计算，需要做缓存。 2.2 代码class Solution { Integer[] cache = new Integer[30]; public int fib(int N) { if(N == 0) return 0; if(N == 1) return 1; if(cache[N-1]!=null){ return cache[N-1]; } int ans = fib(N-1)+fib(N-2); cache[N-1] = ans; return ans; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"深入理解java虚拟机第三版读书笔记07","slug":"深入理解java虚拟机第三版读书笔记07","date":"2020-01-20T17:41:55.000Z","updated":"2020-01-23T10:17:17.175Z","comments":true,"path":"article/深入理解java虚拟机第三版读书笔记07/","link":"","permalink":"https://www.codetool.top/article/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89%E7%89%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B007/","excerpt":"","text":"附： Java虚拟机规范-Java虚拟机指令集：JDK8 Java虚拟机规范-Java虚拟机指令集：JDK13 续深入理解java虚拟机第三版读书笔记06 1 字节码指令简介Java虚拟机的指令由一个字节长度的、代表着某种特定操作含义的数字（称为操作码，Opcode）以及跟随其后的零至多个代表此操作所需的参数（称为操作数，Operand）构成。 1.1 字节码数据类型字节码指令集中存在大量与数据类型相关的字节码指令，它们的操作码助记符中都有特殊的字符来表明专门为哪种数据类型服务：i代表对int类型的数据操作，l代表long，s代表short，b代表byte，c代表char，f代表float，d代表double，a代表reference。 因为操作码一字节的限制，并非每种数据类型和每一种操作都有对应的指令，有一些单独的指令可以在必要的时候用来将一些不支持的类型转换为可被支持的类型。 下表列举了Java虚拟机所支持的与数据类型相关的字节码指令，通过使用数据类型列所代表的特殊字符替换opcode列的指令模板中的T，就可以得到一个具体的字节码指令。如果在表中指令模板与数据类型两列共同确定的格为空，则说明虚拟机不支持对这种数据类型执行这项操作： opcode byte short int long float double char reference Tipush bipush sipush Tconst iconst lconst fconst dconst aconst Tload iload lload fload dload aload Tstore istore lstore fstore dstore astore Taload baload saload iaload laload faload daload caload aaload Tastore bastore sastore iastore lastore fastore dastore castore aastore Tadd iadd ladd fadd dadd Tsub isub lsub fsub dsub Tmul imul lmul fmul dmul Tdiv idiv ldiv fdiv ddiv Tneg ineg lneg fneg dneg Tshl ishl lshl Tshr ishr lshr Tushr iushr lushr Tand iand land Tor ior lor Txor ixor lxor i2T i2b i2s i2l i2f i2d 12T 12i 12f 12d f2T f2i f2l f2d d2T d2i d2l d2f Tcmp lcmp Tcmpl fcmpl dcmpl Tcmpg fcmpg dcmpg if_TempOP if_icmpOP if_acmpOP Treturn ireturn lreturn fretun dretun areturn 大部分指令都没有支持整数类型byte、char和short，甚至没有任何指令支持boolean类型。编译器会在编译期或运行期将byte和short类型的数据带符号扩展（Sign-Extend）为相应的int类型数据，将boolean和char类型数据零位扩展（Zero-Extend）为相应的int类型数据。与之类似，在处理boolean、byte、short和char类型的数组时，也会转换为使用对应的int类型的字节码指令来处理。 1.2 加载和存储指令加载和存储指令用于将数据在栈帧中的局部变量表和操作数栈之间来回传输，这类指令包括： 将一个局部变量加载到操作数栈：iload、iload_&lt;n&gt;、lload、lload_&lt;n&gt;、fload、fload_&lt;n&gt;、dload、 dload_&lt;n&gt;、aload、aload_&lt;n&gt; 将一个数值从操作数栈存储到局部变量表：istore、istore_&lt;n&gt;、lstore、lstore_&lt;n&gt;、fstore、 fstore_&lt;n&gt;、dstore、dstore_&lt;n&gt;、astore、astore_&lt;n&gt; 将一个常量加载到操作数栈：bipush、sipush、ldc、ldc_w、ldc2_w、aconst_null、iconst_m1、 iconst_&lt;i&gt;、lconst_&lt;l&gt;、fconst_&lt;f&gt;、dconst_&lt;d&gt; 扩充局部变量表的访问索引的指令：wide 存储数据的操作数栈和局部变量表主要由加载和存储指令进行操作，除此之外，还有少量指令，如访问对象的字段或数组元素的指令也会向操作数栈传输数据。 上面所列举的指令助记符中，有一部分是以尖括号结尾的（例如iload_），这些指令助记符实际上代表了一组指令（例如iload_，它代表了iload_0、iload_1、iload_2和iload_3这几条指令）。这几组指令都是某个带有一个操作数的通用指令（例如iload）的特殊形式，对于这几组特殊指令，它们省略掉了显式的操作数，不需要进行取操作数的动作，因为实际上操作数就隐含在指令中。除了这点不同以外，它们的语义与原生的通用指令是完全一致的（例如iload_0的语义与操作数为0时的iload指令语义完全一致）。 1.3 运算指令算术指令用于对两个操作数栈上的值进行某种特定运算，并把结果重新存入到操作栈顶。 大体上运算指令可以分为两种：对整型数据进行运算的指令与对浮点型数据进行运算的指令。整数与浮点数的算术指令在溢出和被零除的时候也有各自不同的行为表现。 加法指令：iadd、ladd、fadd、dadd 减法指令：isub、lsub、fsub、dsub 乘法指令：imul、lmul、fmul、dmul 除法指令：idiv、ldiv、fdiv、ddiv 求余指令：irem、lrem、frem、drem 取反指令：ineg、lneg、fneg、dneg 位移指令：ishl、ishr、iushr、lshl、lshr、lushr 按位或指令：ior、lor 按位与指令：iand、land 按位异或指令：ixor、lxor 局部变量自增指令：iinc 比较指令：dcmpg、dcmpl、fcmpg、fcmpl、lcmp 非精确的结果必须舍入为可被表示的最接近的精确值；如果有两种可表示的形式与该值一样接近，那将优先选择最低有效位为零的，称为向最接近数舍入模式。而在把浮点数转换为整数时，使用向零舍入模式，这种模式的舍入结果会导致数字被截断，所有小数部分的有效字节都会被丢弃掉。向零舍入模式将在目标数值类型中选择一个最接近，但是不大于原值的数字来作为最精确的舍入结果。 在对long类型数值进行比较时，Java虚拟机采用带符号的比较方式，而对浮点数值进行比较时（dcmpg、dcmpl、fcmpg、fcmpl），虚拟机会采用IEEE 754规范所定义的无信号比较（Nonsignaling Comparison）方式进行。 iinc直接在局部变量槽slot上运算。 1.4 类型转换指令类型转换指令可以将两种不同的数值类型相互转换，这些转换操作一般用于实现用户代码中的显式类型转换操作，或者用来处理字节码指令集中数据类型相关指令无法与数据类型一一对应的问题。 Java虚拟机直接支持（即转换时无须显式的转换指令）以下数值类型的宽化类型转换（WideningNumeric Conversion，即小范围类型向大范围类型的安全转换）： int类型到long、float或者double类型 long类型到float、double类型 float类型到double类型 与之相对的，处理窄化类型转换（Narrowing Numeric Conversion）时，就必须显式地使用转换指令来完成，这些转换指令包括i2b、i2c、i2s、l2i、f2i、f2l、d2i、d2l和d2f。窄化类型转换可能会导致转换结果产生不同的正负号、不同的数量级的情况，转换过程很可能会导致数值的精度丢失。 1.5 对象创建与访问指令虽然类实例和数组都是对象，但Java虚拟机对类实例和数组的创建与操作使用了不同的字节码指令。对象创建后，就可以通过对象访问指令获取对象实例或者数组实例中的字段或者数组元素，这些指令包括： 创建类实例的指令：new 创建数组的指令：newarray、anewarray、multianewarray 访问类字段（static字段，或者称为类变量）和实例字段（非static字段，或者称为实例变量）的指令：getfield、putfield、getstatic、putstatic 把一个数组元素加载到操作数栈的指令：baload、caload、saload、iaload、laload、faload、 daload、aaload 将一个操作数栈的值储存到数组元素中的指令：bastore、castore、sastore、iastore、fastore、 dastore、aastore 取数组长度的指令：arraylength 检查类实例类型的指令：instanceof、checkcast 1.6 操作数栈管理指令Java虚拟机提供了一些用于直接操作操作数栈的指令，包括： 将操作数栈的栈顶一个或两个元素出栈：pop、pop2 复制栈顶一个或两个数值并将复制值或双份的复制值重新压入栈顶：dup、dup2、dup_x1、 dup2_x1、dup_x2、dup2_x2 将栈最顶端的两个数值互换：swap 1.7 控制转移指令控制转移指令可以让Java虚拟机有条件或无条件地从指定位置指令（而不是控制转移指令）的下一条指令继续执行程序，从概念模型上理解，可以认为控制指令就是在有条件或无条件地修改PC寄存器的值。控制转移指令包括：·条件分支：ifeq、iflt、ifle、ifne、ifgt、ifge、ifnull、ifnonnull、if_icmpeq、if_icmpne、if_icmplt、 if_icmpgt、if_icmple、if_icmpge、if_acmpeq和if_acmpne·复合条件分支：tableswitch、lookupswitch·无条件分支：goto、goto_w、jsr、jsr_w、ret 1.8 方法调用和返回指令 invokevirtual指令：用于调用对象的实例方法，根据对象的实际类型进行分派（虚方法分派），这也是Java语言中最常见的方法分派方式。 invokeinterface指令：用于调用接口方法，它会在运行时搜索一个实现了这个接口方法的对象，找出适合的方法进行调用。 invokespecial指令：用于调用一些需要特殊处理的实例方法，包括实例初始化方法、私有方法和父类方法。 invokestatic指令：用于调用类静态方法（static方法）。 invokedynamic指令：用于在运行时动态解析出调用点限定符所引用的方法。并执行该方法。前面四条调用指令的分派逻辑都固化在Java虚拟机内部，用户无法改变，而invokedynamic指令的分派逻辑是由用户所设定的引导方法决定的。 方法调用指令与数据类型无关，而方法返回指令是根据返回值的类型区分的，包括ireturn（当返回值是boolean、byte、char、short和int类型时使用）、lreturn、freturn、dreturn和areturn，另外还有一条return指令供声明为void的方法、实例初始化方法、类和接口的类初始化方法使用。 1.9 异常处理指令在Java程序中显式抛出异常的操作（throw语句）都由athrow指令来实现，除了用throw语句显式抛出异常的情况之外，《Java虚拟机规范》还规定了许多运行时异常会在其他Java虚拟机指令检测到异常状况时自动抛出。例如前面介绍整数运算中，当除数为零时，虚拟机会在idiv或ldiv指令中抛出ArithmeticException异常。 而在Java虚拟机中，处理异常（catch语句）不是由字节码指令来实现的（很久之前曾经使用jsr和ret指令来实现，现在已经不用了），而是采用异常表来完成。 1.10 同步指令Java虚拟机可以支持方法级的同步和方法内部一段指令序列的同步，这两种同步结构都是使用管程（Monitor，更常见的是直接将它称为“锁”）来实现的。 方法级的同步是隐式的，无须通过字节码指令来控制，它实现在方法调用和返回操作之中。虚拟机可以从方法常量池中的方法表结构中的ACC_SYNCHRONIZED访问标志得知一个方法是否被声明为同步方法。当方法调用时，调用指令将会检查方法的ACC_SYNCHRONIZED访问标志是否被设置，如果设置了，执行线程就要求先成功持有管程，然后才能执行方法，最后当方法完成（无论是正常完成还是非正常完成）时释放管程。在方法执行期间，执行线程持有了管程，其他任何线程都无法再获取到同一个管程。如果一个同步方法执行期间抛出了异常，并且在方法内部无法处理此异常，那这个同步方法所持有的管程将在异常抛到同步方法边界之外时自动释放。 同步一段指令集序列通常是由Java语言中的synchronized语句块来表示的，Java虚拟机的指令集中有monitorenter和monitorexit两条指令来支持synchronized关键字的语义。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"深入理解java虚拟机","slug":"深入理解java虚拟机","permalink":"https://www.codetool.top/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"leetcode24-两两交换链表中的节点","slug":"leetcode24-两两交换链表中的节点","date":"2020-01-20T12:55:44.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/leetcode24-两两交换链表中的节点/","link":"","permalink":"https://www.codetool.top/article/leetcode24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/","excerpt":"","text":"1 原题给定一个链表，两两交换其中相邻的节点，并返回交换后的链表。 你不能只是单纯的改变节点内部的值，而是需要实际的进行节点交换。 示例: 给定 1-&gt;2-&gt;3-&gt;4, 你应该返回 2-&gt;1-&gt;4-&gt;3.2 解法2.1 思想递归，自底向上 终止点： head为null，返回null head的next为null，代表此时是倒数第一个元素（链表节点是奇数个），直接返回head 否则，直接交换当前节点和下一个节点，下一个节点的next使用swapPairs()计算 2.2 代码class Solution { public ListNode swapPairs(ListNode head) { if(head==null) return null; if(head.next == null) return head; ListNode next = head.next; head.next = swapPairs(next.next); next.next = head; return next; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode559-N叉树的最大深度","slug":"leetcode559-N叉树的最大深度","date":"2020-01-20T12:39:39.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/leetcode559-N叉树的最大深度/","link":"","permalink":"https://www.codetool.top/article/leetcode559-N%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/","excerpt":"","text":"1 原题给定一个 N 叉树，找到其最大深度。 最大深度是指从根节点到最远叶子节点的最长路径上的节点总数。 例如，给定一个 3叉树 : 我们应返回其最大深度，3。 说明: 树的深度不会超过 1000。 树的节点总不会超过 5000。 2 解法2.1 思想 自底向上，每个节点是所有孩子节点的深度的最大值+1 自顶向下，依次更新最大高度 2.2 代码自底向上： class Solution { public int maxDepth(Node root) { return depth(root,0); } public int depth(Node root,int depth){ if(root == null) return depth; int max = 0; for(Node node:root.children){ int level = depth(node,depth+1); if(level>max) max = level; } return max+1; } } 自顶向下： class Solution { int depth = 0; public int maxDepth(Node root) { depth(root,1); return depth; } public void depth(Node root,int cur){ if(root == null) return; if(cur>depth) depth = cur; for(Node node:root.children) depth(node,cur+1); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode429-N叉树的层序遍历","slug":"leetcode429-N叉树的层序遍历","date":"2020-01-19T18:36:06.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/leetcode429-N叉树的层序遍历/","link":"","permalink":"https://www.codetool.top/article/leetcode429-N%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/","excerpt":"","text":"1 原题给定一个 N 叉树，返回其节点值的层序遍历。 (即从左到右，逐层遍历)。 例如，给定一个 3叉树 : 返回其层序遍历: [ [1], [3,2,4], [5,6] ]说明: 树的深度不会超过 1000。 树的节点总数不会超过 5000。 2 解法2.1 思想类似leetcode102-二叉树的层次遍历，通过DFS或BFS实现。 2.2 代码迭代（BFS）： class Solution { public List&lt;List&lt;Integer>> levelOrder(Node root) { Queue&lt;Node> queue = new LinkedList&lt;>(); List&lt;List&lt;Integer>> ans = new ArrayList&lt;>(); List&lt;Integer> cur = new ArrayList&lt;>(); if(root == null) return new ArrayList&lt;List&lt;Integer>>(); queue.offer(root); queue.offer(null);//以null作为每层结束的标志符 while(!queue.isEmpty()){ Node node = queue.poll(); if(node == null){ if(cur.size()!=0) ans.add(cur); cur = new ArrayList&lt;>(); }else{ cur.add(node.val); for(Node child:node.children){ if(child!=null) queue.offer(child); } //若队首为null说明这一层的节点的子节点已经全部加入队列了，需要加入一个null if(queue.peek()==null) queue.offer(null); } } return ans; } } 递归（DFS）： class Solution { List&lt;List&lt;Integer>> ans = new ArrayList&lt;>(); public List&lt;List&lt;Integer>> levelOrder(Node root) { if(root==null) return ans; DFS(root,0); return ans; } public void DFS(Node root,int level){ if(ans.size()==level) ans.add(new ArrayList&lt;Integer>()); ans.get(level).add(root.val); for(Node node:root.children){ if(node!=null) DFS(node,level+1); } } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode590-N叉树的后序遍历","slug":"leetcode590-N叉树的后序遍历","date":"2020-01-19T18:23:52.000Z","updated":"2020-02-20T14:55:21.051Z","comments":true,"path":"article/leetcode590-N叉树的后序遍历/","link":"","permalink":"https://www.codetool.top/article/leetcode590-N%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/","excerpt":"","text":"1 原题给定一个 N 叉树，返回其节点值的后序遍历。 例如，给定一个 3叉树 : 返回其前序遍历: [5,6,3,2,4,1]. 说明: 递归法很简单，你可以使用迭代法完成此题吗? 2 解法2.1 思想类似二叉树的后序遍历，递归回溯时将根节点加入集合中。 2.2 代码class Solution { List&lt;Integer> list; public List&lt;Integer> postorder(Node root) { list = new ArrayList&lt;>(); recursion(root); return list; } public void recursion(Node root){ if(root == null) return; for(Node node:root.children){ recursion(node); } list.add(root.val); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode589-N叉树的前序遍历","slug":"leetcode589-N叉树的前序遍历","date":"2020-01-18T18:52:50.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/leetcode589-N叉树的前序遍历/","link":"","permalink":"https://www.codetool.top/article/leetcode589-N%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/","excerpt":"","text":"1 原题给定一个 N 叉树，返回其节点值的前序遍历。 例如，给定一个 3叉树 : 返回其前序遍历: [1,3,5,6,2,4]。 说明: 递归法很简单，你可以使用迭代法完成此题吗? 2 解法2.1 思想类似二叉树的前序遍历，递归将根节点加入集合中。 2.2 代码class Solution { List&lt;Integer> list; public List&lt;Integer> preorder(Node root) { list = new ArrayList&lt;>(); recursion(root); return list; } public void recursion(Node root){ if(root == null) return; list.add(root.val); for(Node node:root.children){ recursion(node); } } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"深入理解java虚拟机第三版读书笔记06","slug":"深入理解java虚拟机第三版读书笔记06","date":"2020-01-18T14:12:50.000Z","updated":"2020-01-23T10:17:24.346Z","comments":true,"path":"article/深入理解java虚拟机第三版读书笔记06/","link":"","permalink":"https://www.codetool.top/article/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89%E7%89%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B006/","excerpt":"","text":"附： Java虚拟机规范-Class文件格式：JDK8 Java虚拟机规范-Class文件格式：JDK13 以下是第六章 类文件结构的内容 1 Class类文件的结构Class文件是一组以8个字节为基础单位的二进制流，各个数据项都是紧凑排列的，如果有需要占用8个字节以上的数据项时，会按照高位在前的方式分割成多个8字节进行存储。 Class文件格式采用一种类似于C语言结构体的伪结构来存储数据，这种伪结构中只有两种数据类型——“无符号数”和“表”： 无符号数：基本的数据类型，以u1、u2、u4、u8来分别代表1个字节、2个字节、4个字节和8个字节的无符号数，无符号数可以用来描述数字、索引引用、数量值或者按照UTF-8编码构成字符串值。 表：由多个无符号数或者其他表作为数据项构成的复合数据类型，为了便于区分，所有表的命名都习惯性地以“_info”结尾。 Class文件由以下这些数据项组成： 类型 名称 数量 u4 magic 1 u2 minor_version 1 u2 major_version 1 u2 constant_pool_count 1 cp_info constant_pool constant_pool_count-1 u2 access_flags 1 u2 this_class 1 u2 super_class 1 u2 interfaces_count 1 u2 interfaces interfaces_count u2 fields_count 1 field_info fields fields_count u2 methods_count 1 method_info methods methods_count u2 attributes_count 1 attribute_info attributes attributes_count 1.1 魔数与Class文件的版本每个Class文件的头4个字节被称为魔数（Magic Number），它的唯一作用是确定这个文件是否为一个能被虚拟机接受的Class文件。很多文件格式标准都会用魔数来确认文件格式，使用魔数而不是扩展名来进行识别主要是基于安全考虑，因为文件扩展名可以随意改动。Class文件的魔数值为0xCAFEBABE（咖啡宝贝）。 紧接着魔数的4个字节存储的是Class文件的版本号：第5和第6个字节是次版本号（Minor Version），第7和第8个字节是主版本号（Major Version）。Java的主版本号是从45开始的，JDK 1.1之后的每个JDK大版本发布主版本号向上加1（JDK 1.0～1.1使用了45.0～45.3的版本号），高版本的JDK能向下兼容以前版本的Class文件，但不能运行以后版本的Class文件。 Java1：45Java4：48Java5：49Java8：52以此类推 关于次版本号，曾经在Java 2出现前被短暂使用过，从JDK 1.2以后，直到JDK 12之前次版本号均未使用，全部固定为零。而到了JDK 12时期，由于JDK提供的功能集已经非常庞大，有一些复杂的新特性需要以“公测”的形式放出，所以设计者重新启用了副版本号，将它用于标识“技术预览版”功能特性的支持。如果Class文件中使用了该版本JDK尚未列入正式特性清单中的预览功能，则必须把次版本号标识为65535，以便Java虚拟机在加载类文件时能够区分出来。 JDK版本 -target参数 -source参数 版本号 JDK 1.1.8 不支持target参数 不支持source参数 45.3 JDK 1.2.2 不带（默认为-target 1.1） 1.1~1.2 45.3 JDK 1.2.2 -target 1.2 1.1~1.2 46.0 JDK 1.3.1_19 不带（默认为-target 1.1) 1.1~1.3 45.3 JDK 1.3.1_19 -target 1.3 1.1~1.3 47.0 JDK 1.4.2_10 不带（默认为-target 1.2） 1.1~1.4 46.0 JDK 1.4.2_10 -target 1.4 1.1~1.4 48.0 JDK 5.0_11 不带（默认为-target 1.5），后续版本不带target参数默认编译的Class文件均与其JDK版本相同 11～15 49.0 JDK 5.0_11 -target 1.4 -source 1.4 1.1~1.5 48.0 JDK 6 不带（默认为-target 6） 1.1~6 50.0 JDK 7 不带（默认为-target 7） 1.1～7 51.0 JDK 8 不带（默认为-target 8) 1.1~8 52.0 JDK 9 不带（默认为-target 9） 6～9 53.0 JDK 10 不带（默认为-target 10） 6~10 54.0 JDK 11 不带（默认为-target 11） 6~11 55.0 JDK 12 不带（默认为-target 12） 6~12 56.0 JDK 13 不带（默认为-target 13） 6~13 57.0 1.2 常量池8~9字节是一项u2类型的数据，代表常量池容量计数值（常量池有多少项），这个容量计数是从1而不是0开始的。 常量池中主要存放两大类常量：字面量（Literal）和符号引用（Symbolic References）。字面量比较接近于Java语言层面的常量概念，如文本字符串、被声明为final的常量值等。而符号引用则属于编译原理方面的概念，主要包括下面几类常量： 被模块导出或者开放的包（Package） 类和接口的全限定名（Fully Qualified Name） 字段的名称和描述符（Descriptor） 方法的名称和描述符 方法句柄和方法类型（Method Handle、Method Type、Invoke Dynamic） 动态调用点和动态常量（Dynamically-Computed Call Site、Dynamically-Computed Constant） 最初常量表中共有11种结构各不相同的表结构数据，后来为了更好地支持动态语言调用，额外增加了4种动态语言相关的常量，为了支持Java模块化系统（Jigsaw），又加入了CONSTANT_Module_info和CONSTANT_Package_info两个常量，所以截至JDK13，常量表中分别有17种不同类型的常量。 这17类表都有一个共同的特点，表结构起始的第一位是个u1类型的标志位（tag，取值见下表标志列），代表着当前常量属于哪种常量类型。17种常量类型所代表的具体含义如表所示。 类型 标志 描述 CONSTANT_Utf8_info 1 UTF-8编码的字符串 CONSTANT_Integer_info 3 整型字面量 CONSTANT_Float_info 4 浮点型字面量 CONSTANT_Long_info 5 长整型字面量 CONSTANT_Double_info 6 双精度浮点型字面量 CONSTANT_Class_info 7 类或接口的符号引用 CONSTANT_String_info 8 字符串类型字面量 CONSTANT_Fieldref_info 9 字段的符号引用 CONSTANT_Methodref_info 10 类中方法的符号引用 CONSTANT_InterfaceMethodref_info 11 接口中方法的符号引用 CONSTANT_NameAndType_info 12 字段或方法的部分符号引用 CONSTANT_MethodHandle_info 15 表示方法句柄 CONSTANT_MethodType_info 16 表示方法类型 CONSTANT_Dynamic_info 17 表示一个动态计算常量 CONSTANT_InvokeDynamic_info 18 表示一个动态方法调用点 CONSTANT_Module_info 19 表示一个模块 CONSTANT_Package_info 20 表示一个模块中开放或者导出的包。 常量池中的17种数据类型的结构总表： 常量 项目 类型 描述 CONSTANT_Utf8_info tag u1 值为1 length&nbsp; u2 UTF-8编码的字符串占用的字节数 bytes&nbsp; u1 长度为length的UTF-8编码的字符串 CONSTANT_Integer_info tag u1 值为3 bytes&nbsp; u4 按照高位在前存储的int值 CONSTANT_Float_info tag u1 值为4 bytes&nbsp; u4 按照高位在前存储的float值 CONSTANT_Long_info tag u1 值为5 bytes&nbsp; u8 按照高位在前存储的long值 CONSTANT_Double_info tag u1 值为6 bytes&nbsp; u8 按照高位在前存储的double值 CONSTANT_Class_info tag u1 值为7 index u2 指向全限定名常量项的索引 CONSTANT_String_info tag u1 值为8 index u2 指向字符串字面量的索引 CONSTANT_Fieldref_info tag u1 值为9 index u2 指向声明字段的类或者接口描述符CONSTANT_Class_info的索引项 index u2 指向字段描述符CONSTANT_NameAndType的索引项 CONSTANT_Methodref_info tag u1 值为10 index u2 指向声明方法的类描述符CONSTANT_Class_info的索引项 index u2 指向名称及类型描述符CONSTANT_NameAndType的索引项 CONSTANT_InterfaceMethodref_info tag u1 值为11 index u2 指向声明方法的接口描述符CONSTANT_Class_info的索引项 index u2 指向名称及类型描述符CONSTANT_NameAndType的索引项 CONSTANT_NameAndType_info tag u1 值为12 index u2 指向该字段或方法名称常量项的索引 index u2 指向该字段或方法描述符常量项的索引 CONSTANT_MethodHandle_info tag u1 值为15 reference_kind u1 值必须在1至9之间（包括1和9），它决定了方法句柄的类型。方法句柄类型的值表示方法句柄的字节码行为 reference_index u2 值必须是对常量池的有效索引 CONSTANT_MethodType_info tag u1 值为16 descriptor_index u2 值必须是对常量池的有效索引，常量池在该索引处的项必须是CONSTANT_Utf8_info结构，表示方法的描述符 CONSTANT_Dynamic_info tag u1 值为17 bootstrap_method_attr_ index u2 值必须是对当前Class文件中引导方法表的bootstrap_methods[]数组的有效索引 name_and_type_index u2 值必须是对当前常量池的有效索引，常量池在该索引处的项必须是CONSTANT_NameAndType_info结构，表示方法名和方法描述符。 CONSTANT_InvokeDynamic_info tag u1 值为18 bootstrap_method_attr_ index u2 值必须是对当前Class文件中引导方法表的bootstrap_methods[]数组的有效索引 name_and_type_index u2 值必须是对当前常量池的有效索引，常量池在该索引处的项必须是CONSTANT_NameAndType_info结构，表示方法名和方法描述符。 CONSTANT_Module_info tag u1 值为19 name_index u2 值必须是对常量池的有效索引，常量池在该索引处的项必须是CONSTANT_Utf8_info结构，表示模块名字 CONSTANT_Package_info tag u1 值为20 name_index u2 值必须是对常量池的有效索引，常量池在该索引处的项必须是CONSTANT_Utf8_info结构，表示包名称 1.3 访问标志在常量池结束之后，紧接着的2个字节代表访问标志（access_flags），这个标志用于识别一些类或者接口层次的访问信息 标志名称 标志值 含义 ACC_PUBLIC 0x0001 是否为public类型 ACC_FINAL 0x0010 是否被声明为final，只有类可设置 ACC_SUPER 0x0020 是否允许使用invokespecial字节码指令的新语义，invokespecial指令的语义在JDK1.0.2发生过改变，为了区别这条指令使用哪种语义，JDK1.0.2之后编译出来的类的这个标志都必须为真 ACC_INTERFACE 0X0200 标识这是一个接口 ACC_ABSTRACT 0X0400 是否为abstract类型，对于接口或者抽象类来说，此标志值为真，其他类型值为假 ACC_SYNTHETIC 0x1000 标识这个类并非由用户代码产生的 ACC_ANNOTATION 0X2000 标识这是一个注解 ACC_ENUM 0x4000 标识这是一个枚举 ACC_MODULE 0x8000 标识这是一个模块 access_flags中一共有16个标志位可以使用，当前只定义了其中9个，没有使用到的标志位要求一律为零。 1.4 类索引、父类索引与接口索引集合跟在访问标志后面的，分别是类索引、父类索引和接口索引集合。类索引（this_class）和父类索引（super_class）都是一个u2类型的数据，而接口索引集合（interfaces）是一组u2类型的数据的集合，Class文件中由这三项数据来确定该类型的继承关系。类索引用于确定这个类的全限定名，父类索引用于确定这个类的父类的全限定名。除了java.lang.Object外，所有Java类的父类索引都不为0。接口索引集合就用来描述这个类实现了哪些接口，这些被实现的接口将按implements关键字后的接口顺序从左到右排列在接口索引集合中。 类索引和父类索引用两个u2类型的索引值表示，它们各自指向一个类型为CONSTANT_Class_info的类描述符常量，通过CONSTANT_Class_info类型的常量中的索引值可以找到定义在CONSTANT_Utf8_info类型的常量中的全限定名字符串。 接口索引集合的入口的第一项u2类型的数据为接口计数器（interfaces_count），表示索引表的容量。 1.5 字段表集合字段表（field_info）用于描述接口或者类中声明的变量，包括类级变量以及实例级变量。 字段表结构: 类型 名称 数量 u2 access_flags 1 u2 name_index 1 u2 discriptor_index 1 u2 attributes_count 1 attribute_info attributes attributes_count 其中access_flags代表字段修饰符，含义如下 标志名称 标志值 含义 ACC_PUBLIC 0x0001 字段是否public ACC_PRIVATE 0x0002 字段是否private ACC_PROTECTED 0x0004 字段是否protected ACC_STATIC 0x0008 字段是否static ACC_FINAL 0x0010 字段是否final ACC_VOLATILE 0x0040 字段是否volatile ACC_TRANSIENT 0x0080 字段是否transient ACC_SYNTHETIC 0x1000 字段是否由编译器自动产生 ACC_ENUM 0x4000 字段是否enum 跟随access_flags标志的是两项索引值：name_index和descriptor_index。它们都是对常量池项的引用，分别代表着字段的简单名称以及字段和方法的描述符。 概念解析： 全限定名：”org/fenixsoft/clazz/TestClass”，把类全名中的”.”替换成了”/“，最后一般会加入一个“;”号表示全限定名结束 简单名称：没有类型和参数修饰的方法或者字段名称 描述符：描述字段的数据类型、方法的参数列表和返回值，基本数据类型以及代表无返回值的void类型都用一个大写字符来表示，而对象类型则用字符L加对象的全限定名来表示： 标识字符 含义 B 基本类型byte C 基本类型char D 基本类型double F 基本类型float I 基本类型int J 基本类型long S 基本类型short Z 基本类型boolean V 特殊类型void L 对象类型，如Ljava/lang/Object; 对于数组类型，每一维度将使用一个前置的”[“字符来描述，如一个定义为”java.lang.String[][]”类型的二维数组将被记录成”[[Ljava/lang/String;“ 用描述符来描述方法时，按照先参数列表、后返回值的顺序描述，参数列表按照参数的严格顺序放在一组小括号“()”之内。如方法void inc()的描述符为“()V”，方法java.lang.String toString()的描述符为“()Ljava/lang/String;”。 字段表集合中不会列出从父类或者父接口中继承而来的字段，但有可能出现原本Java代码之中不存在的字段，譬如在内部类中为了保持对外部类的访问性，编译器就会自动添加指向外部类实例的字段。 1.6 方法表集合Class文件中方法表的结构同字段表完全一致： 类型 名称 数量 u2 access_flags 1 u2 name_index 1 u2 discriptor_index 1 u2 attributes_count 1 attribute_info attributes attributes_count 访问标志的内容有所区别： 标志名称 标志值 含义 ACC_PUBLIC 0x0001 字段是否public ACC_PRIVATE 0x0002 字段是否private ACC_PROTECTED 0x0004 字段是否protected ACC_STATIC 0x0008 字段是否static ACC_FINAL 0x0010 字段是否final ACC_SYNCHRONIZED 0x0020 方法是否为synchronized ACC_BRIDGE 0x0040 方法是不是由编译器产生的桥接方法 ACC_VARARGS 0x0080 方法是否接受不定参数 ACC_NATIVE 0x0100 方法是否为native ACC_ABSTRACT 0x0400 方法是否为abstract ACC_STRICT 0X0800 方法是否为strictfp ACC_SYNTHETIC 0x1000 方法是否由编译器自动产生 方法里的Java代码，经过Javac编译器编译成字节码指令之后，存放在方法属性表集合中一个名为“Code”的属性里面 1.7 属性表集合Class文件、字段表、方法表都可以携带自己的属性表集合，以描述某些场景专有的信息。 属性表不再要求各个属性表具有严格顺序，甚至只要不与已有属性名重复，任何人实现的编译器都可以向属性表中写入自己定义的属性信息。 为了能正确解析Class文件，《Java虚拟机规范》最初只预定义了9项所有Java虚拟机实现都应当能识别的属性，而在最新的《Java虚拟机规范》的Java SE 12版本中，预定义属性已经增加到29项： 属性名称 使用位置 含义 Code 方法表 Java代码编译成的字节码指令 Constant Value 字段表 由final关键字定义的常量值 Deprecated 类、方法表、字段表 被声明为deprecated的方法和字段 Exceptions 方法表 方法抛出的异常列表 EnclosingMethod 类文件 仅当一个类为局部类或者匿名类时才能拥有这个属性，这个属性用于标示这个类所在的外围方法 InnerClasses 类文件 内部类列表 LineNumberTable Code属性 Java源码的行号与字节码指令的对应关系 LocalVariableTable Code属性 方法的局部变量描述 StackMapTable Code属性 JDK 6中新增的属性，供新的类型检查验证器（Type Checker)检查和处理目标方法的局部变量和操作数栈所需要的类型是否匹配 Signature 类、方法表、字段表 JDK 5中新增的属性，用于支持范型情况下的方法签名。在Java语言中，任何类、接口、初始化方法或成员的泛型签名如果包含了类型变量（TypeVariables)或参数化类型（Parameterized Types)，则Signature属性会为它记录泛型签名信息。由于Java的范型采用擦除法实现，为了避免类型信息被擦除后导致签名混乱，需要这个属性记录范型中的相关信息 SourceFile 类文件 记录源文件名称 SourceDebugExtension 类文件 JDK 5中新增的属性，用于存储额外的调试信息。譬如在进行JSP文件调试时，无法通过Java堆栈来定位到JSP文件的行号，JSR45提案为这些非Java语言编写，却需要编译成字节码并运行在Java虚拟机中的程序提供了一个进行调试的标准机制，使用该属性就可以用于存储这个标准所新加入的调试信息 Synthetic 类、方法表、字段表 标识方法或字段为编译器自动生成的 LocalVariableTypeTable 类 JDK 5中新增的属性，它使用特征签名代替描述符，是为了引入泛型语法之后能描述泛型参数化类型而添加 RuntimeVisibleAnnotations 类、方法表、字段表 JDK 5中新增的属性，为动态注解提供支持。该属性用于指明哪些注解是运行时（实际上运行时就是进行反射调用）可见的 RuntimeInvisibleAnnotations 类、方法表、字段表 JDK 5中新增的属性，与RuntimeVisibleAnnotations属性作用刚好相反，用于指明哪些注解是运行时不可见的 RuntimeVisibleParameterAnnotations 方法表 JDK 5中新增的属性，作用与RuntimeVisibleAnnotations属性类似，只不过作用对象为方法参数 RuntimeInvisibleParameterAnnotations 方法表 JDK 5中新增的属性，作用与RuntimeInvisibleAnnotations属性类似，只不过作用对象为方法参数 AnnotationDefault 方法表 JDK 5中新增的属性，用于记录注解类元素的默认值 BootstrapMethods 类文件 JDK 7中新增的属性，用于保存invokedynamic指令引用的引导方法限定符 RuntimeVisibleTypeAnnotations 类、方法表、字段表，Code属性 JDK 8中新增的属性，为实现JSR 308中新增的类型注解提供的支持，用于指明哪些类注解是运行时（实际上运行时就是进行反射调用）可见的 RuntimeInvisibleTypeAnnotations 类、方法表、字段表，Code属性 JDK 8中新增的属性，为实现JSR 308中新增的类型注解提供的支持，与RuntimeVisibleTypeAnnotations属性作用刚好相反，用于指明哪些注解是运行时不可见的 MethodParameters 方法表 JDK 8中新增的属性，用于支持（编译时加上-parameters参数)将方法名称编译进Class文件中，并可运行时获取。此前要获取方法名称（典型的如IDE的代码提示）只能通过JavaDoc中得到 Module 类 JDK 9中新增的属性，用于记录一个Module的名称以及相关信息（requires、exports、opens、uses、provides) ModulePackages 类 JDK 9中新增的属性，用于记录一个模块中所有被exports或者opens的包 ModuleMainClass 类 JDK 9中新增的属性，用于指定一个模块的主类 NestHost 类 JDK 11中新增的属性，用于支持嵌套类（Java中的内部类)的反射和访问控制的API，一个内部类通过该属性得知自己的宿主类 NestMembers 类 JDK 11中新增的属性，用于支持嵌套类（Java中的内部类)的反射和访问控制的API，一个宿主类通过该属性得知自己有哪些内部类 对于每一个属性，它的名称都要从常量池中引用一个CONSTANT_Utf8_info类型的常量来表示，而属性值的结构则是完全自定义的，只需要通过一个u4的长度属性去说明属性值所占用的位数即可。一个符合规则的属性表应该满足下表所定义的结构： 类型 名称 数量 u2 attribute_name_index 1 u4 attribute_length 1 u1 info attribute_length 1.7.1 Code属性Java程序方法体里面的代码经过Javac编译器处理之后，最终变为字节码指令存储在Code属性内。结构如下表： 类型 名称 数量 u2 attribute_name_index 1 u4 attribute_length 1 u2 max_stack 1 u2 max_ locals 1 u4 code_length 1 u1 code code_length u2 exception_table_length 1 exception_info exception_table exception_table_length u2 attributes_count 1 attribute_info attributes attributes_count attribute_name_index指向固定常量“Code”，它代表了该属性的属性名称 attribute_length指示了属性值的总长度，不包括attribute_name_index和attribute_length的长度。 max_stack代表了操作数栈深度的最大值。虚拟机运行的时候需要根据这个值来分配栈帧中的操作栈深度。 max_locals代表了局部变量表所需的存储空间。单位是变量槽（Slot），对于byte、char、float、int、short、boolean和returnAddress等长度不超过32位的数据类型，每个局部变量占用一个变量槽，而double和long这两种64位的数据类型则需要两个变量槽来存放。 code_length和code用来存储Java源程序编译后生成的字节码指令。code_length代表字节码长度，code是用于存储字节码指令的一系列字节流。 关于code_length，虽然它是一个u4类型的长度值，理论上最大值可以达到2的32次幂，但是《Java虚拟机规范》中明确限制了一个方法不允许超过65535条字节码指令，即它实际只使用了u2的长度，如果超过这个限制，Javac编译器就会拒绝编译。 code中每个指令就是一个u1类型的单字节。每读取一个字节便可知道指令是什么、后面是否跟着参数。 通过javap可以查看字节码指令 如果存在异常表，它的格式如下表所示 类型 名称 数量 u2 start_pc 1 u2 end_pc 1 u2 handler_pc 1 u2 catch_type 1 如果当字节码从第start_pc行到第end_pc行之间（不含第end_pc行）出现了类型为catch_type或者其子类的异常（catch_type为指向一个CONSTANT_Class_info型常量的索引），则转到第handler_pc行继续处理。当catch_type的值为0时，代表任意异常情况都需要转到handler_pc处进行处理。 尽管字节码中有最初为处理异常而设计的跳转指令，但《Java 虚拟机规范》中明确要求Java语言的编译器应当选择使用异常表而不是通过跳转指令来实现Java异常及finally处理机制。 1.7.2 LineNumberTable属性LineNumberTable属性用于描述Java源码行号与字节码行号（字节码的偏移量）之间的对应关系。它并不是运行时必需的属性，但默认会生成到Class文件之中，可以在Javac中使用-g：none或-g：lines选项来取消或要求生成这项信息。如果选择不生成LineNumberTable属性，对程序运行产生的最主要影响就是当抛出异常时，堆栈中将不会显示出错的行号，并且在调试程序的时候，也无法按照源码行来设置断点。 类型 名称 数量 u2 attribute_name_index 1 u4 attribute_length 1 u2 line_number_table_length 1 line_number_info line_number_table line_number_table_length line_number_table是一个数量为line_number_table_length、类型为line_number_info的集合，line_number_info表包含start_pc和line_number两个u2类型的数据项，前者是字节码行号，后者是Java源码行号。 1.7.3 LocalVariableTable及LocalVariableTypeTable属性LocalVariableTable属性用于描述栈帧中局部变量表的变量与Java源码中定义的变量之间的关系，它也不是运行时必需的属性，但默认会生成到Class文件之中，可以在Javac中使用-g：none或-g：vars选项来取消或要求生成这项信息。如果没有生成这项属性，最大的影响就是当其他人引用这个方法时，所有的参数名称都将会丢失，譬如IDE将会使用诸如arg0、arg1之类的占位符代替原有的参数名，这对程序运行没有影响，但是会对代码编写带来较大不便，而且在调试期间无法根据参数名称从上下文中获得参数值。 类型 名称 数量 u2 attribute_name_index 1 u4 attribute_length 1 u2 local variable table length 1 local_ variable_info local_variable_table local_variable_table_length 其中local_variable_info项目代表了一个栈帧与源码中的局部变量的关联: 类型 名称 数量 u2 start_pe 1 u2 length 1 u2 name index 1 u2 descriptor_index 1 u2 index 1 start_pc和length属性分别代表了这个局部变量的生命周期开始的字节码偏移量及其作用范围覆盖的长度，两者结合起来就是这个局部变量在字节码之中的作用域范围。 name_index和descriptor_index都是指向常量池中CONSTANT_Utf8_info型常量的索引，分别代表了局部变量的名称以及这个局部变量的描述符。 index是这个局部变量在栈帧的局部变量表中变量槽的位置。当这个变量数据类型是64位类型时（double和long），它占用的变量槽为index和index+1两个。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"深入理解java虚拟机","slug":"深入理解java虚拟机","permalink":"https://www.codetool.top/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"leetcode108-将有序数组转换为二叉搜索树","slug":"leetcode108-将有序数组转换为二叉搜索树","date":"2020-01-17T16:59:42.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/leetcode108-将有序数组转换为二叉搜索树/","link":"","permalink":"https://www.codetool.top/article/leetcode108-%E5%B0%86%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E8%BD%AC%E6%8D%A2%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/","excerpt":"","text":"1 原题将一个按照升序排列的有序数组，转换为一棵高度平衡二叉搜索树。 本题中，一个高度平衡二叉树是指一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过 1。 示例: 给定有序数组: [-10,-3,0,5,9], 一个可能的答案是：[0,-3,9,-10,null,5]，它可以表示下面这个高度平衡二叉搜索树： 0 / \\ -3 9 / / -10 52 解法2.1 思想类似于二分查找，每次递归使用数组的中间元素作为根节点。就能最大化利用左右节点空间，使之平衡。 2.2 代码class Solution { public TreeNode sortedArrayToBST(int[] nums) { return sortedArrayToBST(nums, 0, nums.length); } private TreeNode sortedArrayToBST(int[] nums, int start, int end) { if (start == end) { return null; } int mid = (start + end) >>> 1; TreeNode root = new TreeNode(nums[mid]); root.left = sortedArrayToBST(nums, start, mid); root.right = sortedArrayToBST(nums, mid + 1, end); return root; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode110-平衡二叉树","slug":"leetcode110-平衡二叉树","date":"2020-01-17T15:30:21.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/leetcode110-平衡二叉树/","link":"","permalink":"https://www.codetool.top/article/leetcode110-%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/","excerpt":"","text":"1 原题给定一个二叉树，判断它是否是高度平衡的二叉树。 本题中，一棵高度平衡二叉树定义为： 一个二叉树每个节点 的左右两个子树的高度差的绝对值不超过1。 示例 1:给定二叉树 [3,9,20,null,null,15,7] 3 / \\ 9 20 / \\ 15 7返回 true 。 示例 2: 给定二叉树 [1,2,2,3,3,null,null,4,4] 1 / \\ 2 2 / \\ 3 3 / \\ 4 4返回 false 。 2 解法2.1 思想自顶向下：每个节点获取左右两棵子树的高度，并比较高度差是否大于1，获取高度通过递归实现。 自底向上：回溯时比较左右节点的高度，如果有任意节点左右子树高度差大于1，则说明不是平衡树。 2.2 代码自顶向下： class Solution { public boolean isBalanced(TreeNode root) { if(root == null) return true; if(Math.abs(Height(root.left)-Height(root.right))>1) return false; return isBalanced(root.left)&amp;&amp;isBalanced(root.right); } public int Height(TreeNode root){ if(root == null) return 0; int left = Height(root.left); int right = Height(root.right); if(left>=right) return left+1; else return right+1; } } 自底向上： public class BalancedBinaryTree { boolean res = true; public boolean isBalanced(TreeNode root) { helper(root); return res; } private int helper(TreeNode root) { if (root == null) return 0; int left = helper(root.left) + 1; int right = helper(root.right) + 1; if (Math.abs(right - left) > 1) res = false; return Math.max(left, right); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode235-二叉搜索树的最近公共祖先","slug":"leetcode235-二叉搜索树的最近公共祖先","date":"2020-01-17T13:03:36.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/leetcode235-二叉搜索树的最近公共祖先/","link":"","permalink":"https://www.codetool.top/article/leetcode235-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/","excerpt":"","text":"1 原题给定一个二叉二叉树, 找到该树中两个指定节点的最近公共祖先。 百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。” 例如，给定如下二叉搜索树: root = [6,2,8,0,4,7,9,null,null,3,5] 示例1： 输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8输出: 6解释: 节点 2 和节点 8 的最近公共祖先是 6。 示例2： 输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4输出: 2解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。 说明: 所有节点的值都是唯一的。 p、q 为不同节点且均存在于给定的二叉搜索树中。 2 解法2.1 思想利用二叉搜索树的性质，两个节点p、q可以有两种分布情况： 分别位于公共祖先的左、右子树。 其中一个节点就是公共祖先，另一个节点位于子树上。 如此递归查找。 2.2 代码class Solution { public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) { if(root.val>p.val &amp;&amp; root.val>q.val) return lowestCommonAncestor(root.left, p, q); if(root.val&lt;p.val &amp;&amp; root.val&lt;q.val) return lowestCommonAncestor(root.right,p,q); return root; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"}]},{"title":"leetcode450-删除二叉搜索树中的节点","slug":"leetcode450-删除二叉搜索树中的节点","date":"2020-01-16T11:35:34.000Z","updated":"2020-01-16T12:23:07.811Z","comments":true,"path":"article/leetcode450-删除二叉搜索树中的节点/","link":"","permalink":"https://www.codetool.top/article/leetcode450-%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/","excerpt":"","text":"1 原题给定一个二叉搜索树的根节点 root 和一个值 key，删除二叉搜索树中的 key 对应的节点，并保证二叉搜索树的性质不变。返回二叉搜索树（有可能被更新）的根节点的引用。 一般来说，删除节点可分为两个步骤： 首先找到需要删除的节点； 如果找到了，删除它。 说明： 要求算法时间复杂度为 O(h)，h 为树的高度。 示例: root = [5,3,6,2,4,null,7]key = 3 &nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;6&nbsp;/&nbsp;\\ &nbsp;&nbsp;&nbsp;\\2&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;7 给定需要删除的节点值是 3，所以我们首先找到 3 这个节点，然后删除它。 一个正确的答案是 [5,4,6,2,null,null,7], 如下图所示。 &nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;6&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7 另一个正确答案是 [5,2,6,null,4,null,7]。 &nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;6&nbsp;&nbsp;&nbsp;\\ &nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;7 2 解法2.1 思想删除一个节点，可以有三种情况： 它没有子节点，那么直接删除。 它拥有一个子节点，那么直接用子节点替换它 它有两个子节点，则可以： 将它的右子节点附在左子节点的最右边： 或，将它的左子节点附在右子节点的最左边： 实际就是让搜索树线性化，这样操作会让搜索树的高度逐渐失衡，所以并不推荐作为一个数据结构这样实现。 更好的删除方法可以参考官方题解： https://leetcode-cn.com/problems/delete-node-in-a-bst/solution/shan-chu-er-cha-sou-suo-shu-zhong-de-jie-dian-by-l/ 2.2 代码class Solution { public TreeNode deleteNode(TreeNode root, int key) { if(root == null) return null; if(root.val == key) {//根节点就是要删除的节点 if(root.left==null &amp;&amp; root.right==null) return null; else if(root.left!=null){ TreeNode node = root.left; while(node.right!=null){ node = node.right; } node.right = root.right; return root.left; }else return root.right; } if(root.left!=null&amp;&amp;root.left.val==key){//左子节点是要删除的节点 if(root.left.left==null &amp;&amp; root.left.right==null) root.left = null; else if(root.left.left!=null){ TreeNode node = root.left.left; while(node.right!=null){ node = node.right; } node.right = root.left.right; root.left = root.left.left; }else root.left = root.left.right; }else if(root.right!=null&amp;&amp;root.right.val==key){//右子节点是要删除的节点 if(root.right.left==null &amp;&amp; root.right.right==null) root.right = null; else if(root.right.right!=null){ TreeNode node = root.right.right; while(node.left!=null){ node = node.left; } node.left = root.right.left; root.left = root.right.right; }else root.right = root.right.left; }else { deleteNode(root.left,key); deleteNode(root.right,key); } return root; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"搜索树","slug":"搜索树","permalink":"https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode701-二叉搜索树中的插入操作","slug":"leetcode701-二叉搜索树中的插入操作","date":"2020-01-16T09:52:36.000Z","updated":"2020-01-16T10:15:50.606Z","comments":true,"path":"article/leetcode701-二叉搜索树中的插入操作/","link":"","permalink":"https://www.codetool.top/article/leetcode701-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C/","excerpt":"","text":"1 原题给定二叉搜索树（BST）的根节点和要插入树中的值，将值插入二叉搜索树。 返回插入后二叉搜索树的根节点。 保证原始二叉搜索树中不存在新值。 注意，可能存在多种有效的插入方式，只要树在插入后仍保持为二叉搜索树即可。 你可以返回任意有效的结果。 例如, 给定二叉搜索树: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;3 和 插入的值: 5 你可以返回这个二叉搜索树: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;\\ &nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;3&nbsp;5 或者这个树也是有效的: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4 2 解法2.1 思想与搜索操作类似，对于每个节点，我们将： 根据节点值与目标节点值的关系，搜索左子树或右子树； 重复步骤 1 直到到达外部节点； 根据节点的值与目标节点的值的关系，将新节点添加为其左侧或右侧的子节点。 如此递归。 2.2 代码class Solution { public TreeNode insertIntoBST(TreeNode root, int val) { if(val&lt;root.val){ if(root.left==null) root.left = new TreeNode(val); else insertIntoBST(root.left,val); } if(val>root.val){ if(root.right==null) root.right = new TreeNode(val); else insertIntoBST(root.right,val); } return root; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"搜索树","slug":"搜索树","permalink":"https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode700-二叉搜索树中的搜索","slug":"leetcode700-二叉搜索树中的搜索","date":"2020-01-16T05:45:31.000Z","updated":"2020-01-16T09:56:49.231Z","comments":true,"path":"article/leetcode700-二叉搜索树中的搜索/","link":"","permalink":"https://www.codetool.top/article/leetcode700-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%90%9C%E7%B4%A2/","excerpt":"","text":"1 原题给定二叉搜索树（BST）的根节点和一个值。 你需要在BST中找到节点值等于给定值的节点。 返回以该节点为根的子树。 如果节点不存在，则返回 NULL。 例如， 给定二叉搜索树: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;3 和值: 2 你应该返回如下子树: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;3 在上述示例中，如果要找的值是 5，但因为没有节点值为 5，我们应该返回 NULL。 2 解法2.1 思想根据BST的特性，对于每个节点： 如果目标值等于节点的值，则返回节点; 如果目标值小于节点的值，则继续在左子树中搜索; 如果目标值大于节点的值，则继续在右子树中搜索。 如此递归搜索。 2.2 代码class Solution { public TreeNode searchBST(TreeNode root, int val) { if(root==null)return null; if(root.val == val) return root; else if(root.val &lt; val) return searchBST(root.right,val); else return searchBST(root.left,val); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"搜索树","slug":"搜索树","permalink":"https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode173-二叉搜索树迭代器","slug":"leetcode173-二叉搜索树迭代器","date":"2020-01-15T17:05:07.000Z","updated":"2020-01-15T17:09:07.963Z","comments":true,"path":"article/leetcode173-二叉搜索树迭代器/","link":"","permalink":"https://www.codetool.top/article/leetcode173-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BF%AD%E4%BB%A3%E5%99%A8/","excerpt":"","text":"1 原题实现一个二叉搜索树迭代器。你将使用二叉搜索树的根节点初始化迭代器。 调用 next() 将返回二叉搜索树中的下一个最小的数。 示例： BSTIterator iterator = new BSTIterator(root);iterator.next(); // 返回 3iterator.next(); // 返回 7iterator.hasNext(); // 返回 trueiterator.next(); // 返回 9iterator.hasNext(); // 返回 trueiterator.next(); // 返回 15iterator.hasNext(); // 返回 trueiterator.next(); // 返回 20iterator.hasNext(); // 返回 false 提示： next() 和 hasNext() 操作的时间复杂度是 O(1)，并使用 O(h) 内存，其中 h 是树的高度。 你可以假设 next() 调用总是有效的，也就是说，当调用 next() 时，BST 中至少存在一个下一个最小的数。 2 解法2.1 思想理解二叉搜索树的数据结构，像二叉树的中序遍历那样构造一个list。 2.2 代码class BSTIterator { List&lt;TreeNode> list; int cur; public BSTIterator(TreeNode root) { list = new ArrayList&lt;>(); cur = -1; buildList(root); } public void buildList(TreeNode root){ if(root == null) return; buildList(root.left); list.add(root); buildList(root.right); } /** @return the next smallest number */ public int next() { cur++; return list.get(cur).val; } /** @return whether we have a next smallest number */ public boolean hasNext() { if(cur&lt;list.size()-1) return true; return false; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"搜索树","slug":"搜索树","permalink":"https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"JDK8u20字符串去重","slug":"JDK8u20字符串去重","date":"2020-01-15T11:54:37.000Z","updated":"2020-01-15T12:54:11.995Z","comments":true,"path":"article/JDK8u20字符串去重/","link":"","permalink":"https://www.codetool.top/article/JDK8u20%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8E%BB%E9%87%8D/","excerpt":"","text":"优点：节省大量内存 缺点：略微多占用cpu时间，新生代回收时间略微增加 -XX:+UseStringDeduplication String s1 = new String(\"hello\");//char[] {'h','e','l','l','o'} String s2 = new String(\"hello\");//char[] {'h','e','l','l','o'} 将所有新分配的字符串放入一个队列 当新生代回收时，G1并发检查是否有字符串重复 如果它们值一样，让它们引用同一个char[] 注意，与String.intern()不一样 String.intern()关注的是字符串对象 而字符串去重关注的是char[] 在JVM内部，使用了不同的字符串表","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"优化","slug":"优化","permalink":"https://www.codetool.top/tags/%E4%BC%98%E5%8C%96/"}]},{"title":"leetcode98-验证二叉搜索树","slug":"leetcode98-验证二叉搜索树","date":"2020-01-15T08:20:17.000Z","updated":"2020-01-15T09:11:16.498Z","comments":true,"path":"article/leetcode98-验证二叉搜索树/","link":"","permalink":"https://www.codetool.top/article/leetcode98-%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/","excerpt":"","text":"1 原题给定一个二叉树，判断其是否是一个有效的二叉搜索树。 假设一个二叉搜索树具有如下特征： 节点的左子树只包含小于当前节点的数。 节点的右子树只包含大于当前节点的数。 所有左子树和右子树自身必须也是二叉搜索树。 示例 1: 输入:&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;3输出: true 示例 2: 输入:&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;6输出: false解释: 输入为: [5,1,4,null,null,3,6]。 根节点的值为 5 ，但是其右子节点值为 4 。 2 解法2.1 思想递归，要考虑整个左子树的最大值小于根节点，整个右子树的最小值大于根节点。通过传参来获取这些信息。 2.2 代码class Solution { public boolean isValidBST(TreeNode root) { return recursion(root, null, null); } private boolean recursion(TreeNode root, Integer up, Integer low) { if (root == null) { return true; } if (up != null &amp;&amp; root.val >= up) { return false; } if (low != null &amp;&amp; root.val &lt;= low) { return false; } return recursion(root.left, root.val, low) &amp;&amp; recursion(root.right, up, root.val); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"搜索树","slug":"搜索树","permalink":"https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode297-二叉树的序列化与反序列化","slug":"leetcode297-二叉树的序列化与反序列化","date":"2020-01-14T18:29:14.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/leetcode297-二叉树的序列化与反序列化/","link":"","permalink":"https://www.codetool.top/article/leetcode297-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%8E%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/","excerpt":"","text":"1 原题序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，采取相反方式重构得到原数据。 请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。 示例： 你可以将以下二叉树： &nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;5 序列化为 “[1,2,3,null,null,4,5]” 提示: 这与 LeetCode 目前使用的方式一致，详情请参阅 LeetCode 序列化二叉树的格式。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。 说明: 不要使用类的成员 / 全局 / 静态变量来存储状态，你的序列化和反序列化算法应该是无状态的。 2 解法2.1 思想BFS，完全用队列实现就好，我这里会形成1,2,3,null,null,4,5,null,null,null,null,这样的字符串。 2.2 代码public class Codec { // Encodes a tree to a single string. public String serialize(TreeNode root) { Queue&lt;TreeNode> queue = new LinkedList&lt;>(); StringBuilder sb = new StringBuilder(); queue.offer(root); while(!queue.isEmpty()){ TreeNode node = queue.poll(); if(node == null) sb.append(\"null\"); else{ sb.append(node.val); queue.offer(node.left); queue.offer(node.right); } sb.append(\",\"); } return sb.toString(); } // Decodes your encoded data to tree. public TreeNode deserialize(String data) { if(data.equals(\"null,\")) return null; Queue&lt;TreeNode> queue = new LinkedList&lt;>(); String[] datas = data.split(\",\"); int count = 0; TreeNode root = new TreeNode(Integer.valueOf(datas[0])); queue.offer(root); while(!queue.isEmpty()){ TreeNode node = queue.poll(); TreeNode left = null; if(!datas[count+1].equals(\"null\")){ left = new TreeNode(Integer.valueOf(datas[count+1])); queue.offer(left); } TreeNode right = null; if(!datas[count+2].equals(\"null\")){ right = new TreeNode(Integer.valueOf(datas[count+2])); queue.offer(right); } node.left = left; node.right = right; count+=2; } return root; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"BFS","slug":"BFS","permalink":"https://www.codetool.top/tags/BFS/"}]},{"title":"leetcode236-二叉树的最近公共祖先","slug":"leetcode236-二叉树的最近公共祖先","date":"2020-01-14T16:54:05.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/leetcode236-二叉树的最近公共祖先/","link":"","permalink":"https://www.codetool.top/article/leetcode236-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/","excerpt":"","text":"1 原题给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。 百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。” 例如，给定如下二叉树: root = [3,5,1,6,2,0,8,null,null,7,4] 示例1： 输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1输出: 3解释: 节点 5 和节点 1 的最近公共祖先是节点 3。 示例2： 输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4输出: 5解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。 2 解法2.1 思想我首先的思路就是要有一个reach函数，可以判断一个节点是不是指定节点的祖先，通过dfs实现，返回一个bool值。那么这道题要寻找离p、q最近的祖先节点，就可以再使用一个dfs，我们都知道dfs回溯的时候是从下往上的，那么只要调用函数最早对参数p、q都返回true的节点就是要得到的答案了，然后沿着回溯返回值链传回这个节点。 2.2 代码class Solution { public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) { if(root == null) return null; TreeNode left = lowestCommonAncestor(root.left,p,q); if(left!=null) return left; TreeNode right = lowestCommonAncestor(root.right,p,q); if(right!=null) return right; if(reach(root,p.val)==true&amp;&amp;reach(root,q.val)==true) return root; return null; } public boolean reach(TreeNode root,int value){ if(root == null) return false; if(root.val == value) return true; return reach(root.left,value) || reach(root.right,value); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"}]},{"title":"leetcode117-填充每个节点的下一个右侧节点指针II","slug":"leetcode117-填充每个节点的下一个右侧节点指针II","date":"2020-01-14T13:45:48.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/leetcode117-填充每个节点的下一个右侧节点指针II/","link":"","permalink":"https://www.codetool.top/article/leetcode117-%E5%A1%AB%E5%85%85%E6%AF%8F%E4%B8%AA%E8%8A%82%E7%82%B9%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%8F%B3%E4%BE%A7%E8%8A%82%E7%82%B9%E6%8C%87%E9%92%88II/","excerpt":"","text":"1 原题给定一个二叉树 struct Node {&nbsp;&nbsp;int val;&nbsp;&nbsp;Node *left;&nbsp;&nbsp;Node *right;&nbsp;&nbsp;Node *next;} 填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。 初始状态下，所有 next 指针都被设置为 NULL。 进阶： 你只能使用常量级额外空间。 使用递归解题也符合要求，本题中递归程序占用的栈空间不算做额外的空间复杂度。 示例： 输入： root = [1,2,3,4,5,null,7]输出：[1,#,2,3,#,4,5,7,#]解释： 给定二叉树如图 A 所示，你的函数应该填充它的每个 next 指针，以指向其下一个右侧节点，如图 B 所示。 提示： 树中的节点数小于 6000 -100 &lt;= node.val &lt;= 100 2 解法2.1 思想我在leetcode116-填充每个节点的下一个右侧节点指针用的方法仍适用于该题 2.2 代码class Solution { List&lt;Node> list; public Node connect(Node root) { list = new ArrayList&lt;Node>(); dfs(root,0); return root; } public void dfs(Node root,int depth){ if(root == null) return; if(list.size()>depth){ Node node = list.get(depth); node.next = root; list.set(depth,root); } else list.add(root); dfs(root.left,depth+1); dfs(root.right,depth+1); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode116-填充每个节点的下一个右侧节点指针","slug":"leetcode116-填充每个节点的下一个右侧节点指针","date":"2020-01-14T12:23:22.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/leetcode116-填充每个节点的下一个右侧节点指针/","link":"","permalink":"https://www.codetool.top/article/leetcode116-%E5%A1%AB%E5%85%85%E6%AF%8F%E4%B8%AA%E8%8A%82%E7%82%B9%E7%9A%84%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%8F%B3%E4%BE%A7%E8%8A%82%E7%82%B9%E6%8C%87%E9%92%88/","excerpt":"","text":"1 原题给定一个完美二叉树，其所有叶子节点都在同一层，每个父节点都有两个子节点。二叉树定义如下： struct Node {&nbsp;&nbsp;int val;&nbsp;&nbsp;Node *left;&nbsp;&nbsp;Node *right;&nbsp;&nbsp;Node *next;} 填充它的每个 next 指针，让这个指针指向其下一个右侧节点。如果找不到下一个右侧节点，则将 next 指针设置为 NULL。 初始状态下，所有 next 指针都被设置为 NULL。 示例： 输入：{“$id”:”1”,”left”:{“$id”:”2”,”left”:{“$id”:”3”,”left”:null,”next”:null,”right”:null,”val”:4},”next”:null,”right”:{“$id”:”4”,”left”:null,”next”:null,”right”:null,”val”:5},”val”:2},”next”:null,”right”:{“$id”:”5”,”left”:{“$id”:”6”,”left”:null,”next”:null,”right”:null,”val”:6},”next”:null,”right”:{“$id”:”7”,”left”:null,”next”:null,”right”:null,”val”:7},”val”:3},”val”:1}输出： {“$id”:”1”,”left”:{“$id”:”2”,”left”:{“$id”:”3”,”left”:null,”next”:{“$id”:”4”,”left”:null,”next”:{“$id”:”5”,”left”:null,”next”:{“$id”:”6”,”left”:null,”next”:null,”right”:null,”val”:7},”right”:null,”val”:6},”right”:null,”val”:5},”right”:null,”val”:4},”next”:{“$id”:”7”,”left”:{“$ref”:”5”},”next”:null,”right”:{“$ref”:”6”},”val”:3},”right”:{“$ref”:”4”},”val”:2},”next”:null,”right”:{“$ref”:”7”},”val”:1}解释： 给定二叉树如图 A 所示，你的函数应该填充它的每个 next 指针，以指向其下一个右侧节点，如图 B 所示。 提示： 你只能使用常量级额外空间。 使用递归解题也符合要求，本题中递归程序占用的栈空间不算做额外的空间复杂度。 2 解法2.1 思想DFS搜索，用一个list存放每层前一个遍历的节点，再次遍历到该层的时候从list中取出上一个元素并修改next指针。 2.2 代码class Solution { List&lt;Node> list; public Node connect(Node root) { list = new ArrayList&lt;Node>(); dfs(root,0); return root; } public void dfs(Node root,int depth){ if(root == null) return; if(list.size()>depth){ Node node = list.get(depth); node.next = root; list.set(depth,root); } else list.add(root); dfs(root.left,depth+1); dfs(root.right,depth+1); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode105-从前序与中序遍历序列构造二叉树","slug":"leetcode105-从前序与中序遍历序列构造二叉树","date":"2020-01-12T18:50:27.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/leetcode105-从前序与中序遍历序列构造二叉树/","link":"","permalink":"https://www.codetool.top/article/leetcode105-%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/","excerpt":"","text":"1 原题根据一棵树的前序遍历与中序遍历构造二叉树。 注意:你可以假设树中没有重复的元素。 例如，给出 前序遍历 preorder = [3,9,20,15,7]中序遍历 inorder = [9,3,15,20,7] 返回如下的二叉树： &nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;/ \\&nbsp;&nbsp;9&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;15&nbsp;&nbsp;&nbsp;7 2 解法2.1 思想根据前序遍历第一个元素是根、中序遍历以根为中心划分左子树和右子树的特点，递归构造左子树和右子树。 算法优化过程见：leetcode106-从中序与后序遍历序列构造二叉树 2.2 代码class Solution { int[] preorderGlobal; Map&lt;Integer,Integer> map; public TreeNode buildTree(int[] preorder, int[] inorder) { preorderGlobal = preorder; map = new HashMap&lt;>(); for(int i = 0;i &lt; inorder.length; i++) map.put(inorder[i], i); if(preorder.length == 0) return null; TreeNode root = getUnit(0,preorder.length,0,inorder.length); return root; } public TreeNode getUnit(int preorderStart,int preorderEnd,int inorderStart,int inorderEnd){ if(preorderStart==preorderEnd) return null; TreeNode root = new TreeNode(preorderGlobal[preorderStart]); int index = map.get(preorderGlobal[preorderStart]); int leftCount = index - inorderStart; root.left = getUnit(preorderStart+1,preorderStart+leftCount+1,inorderStart,index); root.right = getUnit(preorderStart+leftCount+1,preorderEnd,index+1,inorderEnd); return root; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode106-从中序与后序遍历序列构造二叉树","slug":"leetcode106-从中序与后序遍历序列构造二叉树","date":"2020-01-12T18:43:49.000Z","updated":"2020-02-20T14:55:21.053Z","comments":true,"path":"article/leetcode106-从中序与后序遍历序列构造二叉树/","link":"","permalink":"https://www.codetool.top/article/leetcode106-%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/","excerpt":"","text":"1 原题根据一棵树的中序遍历与后序遍历构造二叉树。 注意:你可以假设树中没有重复的元素。 例如，给出 中序遍历 inorder = [9,3,15,20,7]后序遍历 postorder = [9,15,7,20,3] 返回如下的二叉树： &nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;/ \\&nbsp;&nbsp;9&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;15&nbsp;&nbsp;&nbsp;7 2 解法2.1 思想根据后序遍历最后一个元素是根、中序遍历以根为中心划分左子树和右子树的特点，递归构造左子树和右子树。 2.2 代码我们逐渐来优化时间复杂度： 第一版，较好懂： class Solution { public int indexOf(int target,int[] order){ for(int i = 0;i&lt;order.length;i++){ if(order[i] == target) return i; } return -1; } public TreeNode buildTree(int[] inorder, int[] postorder) { if(postorder.length == 0) return null; TreeNode root = getUnit(inorder,postorder); return root; } public TreeNode getUnit(int[] inorder,int[] postorder){ if(postorder.length == 0) return null; TreeNode root = new TreeNode(postorder[postorder.length-1]); int index = indexOf(postorder[postorder.length-1],inorder); int[] leftpartInorder = Arrays.copyOfRange(inorder,0,index); int[] rightpartInorder = Arrays.copyOfRange(inorder,index+1,inorder.length); int leftCount = leftpartInorder.length; int[] leftpartPostorder = Arrays.copyOfRange(postorder,0,leftCount); int[] rightpartPostorder = Arrays.copyOfRange(postorder,leftCount,postorder.length-1); root.left = getUnit(leftpartInorder,leftpartPostorder); root.right = getUnit(rightpartInorder,rightpartPostorder); return root; } } 第二版，不用再复制数组，直接在原数组上操作： class Solution { int[] inorderGlobal; int[] postorderGlobal; public int indexOf(int target,int start,int end){ for(int i = 0;i&lt;end-start;i++){ if(inorderGlobal[i+start] == target) return i+start; } return -1; } public TreeNode buildTree(int[] inorder, int[] postorder) { inorderGlobal = inorder; postorderGlobal = postorder; if(postorder.length == 0) return null; TreeNode root = getUnit(0,inorder.length,0,postorder.length); return root; } public TreeNode getUnit(int inorderStart,int inorderEnd,int postorderStart,int postorderEnd){ if(postorderEnd==postorderStart) return null; TreeNode root = new TreeNode(postorderGlobal[postorderEnd-1]); int index = indexOf(postorderGlobal[postorderEnd-1],inorderStart,inorderEnd); int leftCount = index-inorderStart; root.left = getUnit(inorderStart,index,postorderStart,leftCount+postorderStart); root.right = getUnit(index+1,inorderEnd,postorderStart+leftCount,postorderEnd-1); return root; } } 第三版，既然经常要用查找元素在中序遍历中的位置，可以不需要使用indexOf函数，而是一开始则将对应关系保存在哈希表中： class Solution { int[] postorderGlobal; Map&lt;Integer,Integer> map; public TreeNode buildTree(int[] inorder, int[] postorder) { postorderGlobal = postorder; map = new HashMap&lt;>(); for(int i = 0;i &lt; inorder.length; i++) map.put(inorder[i], i); if(postorder.length == 0) return null; TreeNode root = getUnit(0,inorder.length,0,postorder.length); return root; } public TreeNode getUnit(int inorderStart,int inorderEnd,int postorderStart,int postorderEnd){ if(postorderEnd==postorderStart) return null; TreeNode root = new TreeNode(postorderGlobal[postorderEnd-1]); int index = map.get(postorderGlobal[postorderEnd-1]); int leftCount = index-inorderStart; root.left = getUnit(inorderStart,index,postorderStart,leftCount+postorderStart); root.right = getUnit(index+1,inorderEnd,postorderStart+leftCount,postorderEnd-1); return root; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode112-路径总和","slug":"leetcode112-路径总和","date":"2020-01-11T16:31:56.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/leetcode112-路径总和/","link":"","permalink":"https://www.codetool.top/article/leetcode112-%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C/","excerpt":"","text":"1 原题给定一个二叉树和一个目标和，判断该树中是否存在根节点到叶子节点的路径，这条路径上所有节点值相加等于目标和。 说明: 叶子节点是指没有子节点的节点。 示例:给定如下二叉树，以及目标和 sum = 22， &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;11&nbsp;&nbsp;13&nbsp;&nbsp;4&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;\\ &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;&nbsp;7&nbsp;&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1 返回 true, 因为存在目标和为 22 的根节点到叶子节点的路径 5-&gt;4-&gt;11-&gt;2。 2 解法2.1 思想DFS搜索，每经过一个节点减去对应节点的值，到叶子节点的时候查看是否为0。 2.2 代码class Solution { public boolean hasPathSum(TreeNode root, int sum) { if(root == null) return false; int left = sum-root.val; if(left == 0 &amp;&amp; root.left==null &amp;&amp; root.right == null) return true; return hasPathSum(root.left,left)||hasPathSum(root.right,left); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"深入理解java虚拟机第三版读书笔记05","slug":"深入理解java虚拟机第三版读书笔记05","date":"2020-01-11T16:07:31.000Z","updated":"2020-01-20T17:44:00.617Z","comments":true,"path":"article/深入理解java虚拟机第三版读书笔记05/","link":"","permalink":"https://www.codetool.top/article/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89%E7%89%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B005/","excerpt":"","text":"续深入理解java虚拟机第三版读书笔记04 1 HotSpot的算法细节实现1.1 根节点枚举如何高效的找出所有GC Roots？ 迄今为止，所有收集器在根节点枚举这一步骤时都是必须暂停用户线程的，枚举时必须在一个保障一致性的快照中才能进行。 目前主流Java虚拟机使用的都是准确式垃圾收集，在HotSpot的解决方案里，是使用一组称为OopMap的数据结构来获取那些地方存放着对象引用，一旦类加载动作完成的时候，HotSpot就会把对象内什么偏移量上是什么类型的数据计算出来，在即时编译过程中，也会在特定的位置记录下栈里和寄存器里哪些位置是引用。这样收集器在扫描时就可以直接得知这些信息了，并不需要真正一个不漏地从方法区等GC Roots开始查找。 1.2 安全点如果导致引用关系变化，或者说导致OopMap内容变化的指令非常多，为每一条指令都生成对应的OopMap，那将会需要大量的额外存储空间。 实际上HotSpot也的确没有为每条指令都生成OopMap，只是在“特定的位置”记录了这些信息，这些位置被称为安全点。只有用户程序执行到达安全点才能停下来进行垃圾收集。 对于安全点，另外一个需要考虑的问题是，如何在垃圾收集发生时让所有线程（这里其实不包括执行JNI调用的线程）都跑到最近的安全点，然后停顿下来。有两种方法： 抢先式中断 抢先式中断不需要线程的执行代码主动去配合，在垃圾收集发生时，系统首先把所有用户线程全部中断，如果发现有用户线程中断的地方不在安全点上，就恢复这条线程执行，让它一会再重新中断，直到跑到安全点上。 现在几乎没有虚拟机实现采用抢先式中断来暂停线程响应GC事件。 主动式中断 当垃圾收集需要中断线程的时候，不直接对线程操作，仅仅简单地设置一个标志位，各个线程执行过程时会不停地主动去轮询这个标志，一旦发现中断标志为真时就自己在最近的安全点上主动中断挂起。 轮询标志的地方和安全点是重合的，另外还要加上所有创建对象和其他需要在Java堆上分配内存的地方，这是为了检查是否即将要发生垃圾收集，避免没有足够内存分配新对象。 由于轮询操作在代码中会频繁出现，这要求它必须足够高效。HotSpot使用内存保护陷阱的方式，把轮询操作精简至只有一条汇编指令的程度。下面代码中的test指令就是HotSpot生成的轮询指令，当需要暂停用户线程时，虚拟机把0x160100的内存页设置为不可读，那线程执行到test指令时就会产生一个自陷异常信号，然后在预先注册的异常处理器中挂起线程实现等待，这样仅通过一条汇编指令便完成安全点轮询和触发线程中断了。 0x01b6d627: call 0x01b2b210 ; OopMap{[60]=Oop off=460} ; *invokeinterface size ; - Client1::main@113 (line 23) ; {virtual_call} 0x01b6d62c: nop ; OopMap{[60]=Oop off=461} ; *if_icmplt ; - Client1::main@118 (line 23) 0x01b6d62d: test %eax,0x160100 ; {poll} 0x01b6d633: mov 0x50(%esp),%esi 0x01b6d637: cmp %eax,%esi1.3 安全区域如果程序没有分配处理器时间，典型的场景便是用户线程处于Sleep状态或者Blocked状态，这时候线程无法响应虚拟机的中断请求，不能再走到安全的地方去中断挂起自己。此时必须引入安全区域来解决。 安全区域是指能够确保在某一段代码片段之中，引用关系不会发生变化，因此，在这个区域中任意地方开始垃圾收集都是安全的。我们也可以把安全区域看作被扩展拉伸了的安全点。 当用户线程执行到安全区域里面的代码时，首先会标识自己已经进入了安全区域，那样当这段时间里虚拟机要发起垃圾收集时就不必去管这些已声明自己在安全区域内的线程了。当线程要离开安全区域时，它要检查虚拟机是否已经完成了根节点枚举（或者垃圾收集过程中其他需要暂停用户线程的阶段），如果完成了，那线程就当作没事发生过，继续执行；否则它就必须一直等待，直到收到可以离开安全区域的信号为止。 1.4 记忆集与卡表为解决对象跨代引用所带来的问题，垃圾收集器在新生代中建立了名为记忆集（Remembered Set）的数据结构，用以避免把整个老年代加进GC Roots扫描范围。事实上并不只是新生代、老年代之间才有跨代引用的问题，所有涉及部分区域收集（Partial GC）行为的垃圾收集器，典型的如G1、ZGC和Shenandoah收集器，都会面临相同的问题。 记忆集是一种用于记录从非收集区域指向收集区域的指针集合的抽象数据结构。如果我们不考虑效率和成本的话，最简单的实现可以用非收集区域中所有含跨代引用的对象数组来实现这个数据结构： Class RememberedSet { Object[] set[OBJECT_INTERGENERATIONAL_REFERENCE_SIZE]; }这种记录全部含跨代引用对象的实现方案，无论是空间占用还是维护成本都相当高昂。而在垃圾收集的场景中，收集器只需要通过记忆集判断出某一块非收集区域是否存在有指向了收集区域的指针就可以了，并不需要了解这些跨代指针的全部细节。那设计者在实现记忆集的时候，便可以选择更为粗犷的记录粒度来节省记忆集的存储和维护成本，下面是一些可供选择的记录精度： 字长精度：每个记录精确到一个机器字长（就是处理器的寻址位数，如常见的32位或64位，这个精度决定了机器访问物理内存地址的指针长度），该字包含跨代指针。 对象精度：每个记录精确到一个对象，该对象里有字段含有跨代指针。 卡精度：每个记录精确到一块内存区域，该区域内有对象含有跨代指针。 其中，第三种“卡精度”所指的是用一种称为“卡表”（Card Table）的方式去实现记忆集，这也是目前最常用的一种记忆集实现形式 卡表最简单的形式可以只是一个字节数组，而HotSpot虚拟机确实也是这样做的。以下这行代码是HotSpot默认的卡表标记逻辑： CARD_TABLE [this address &gt;&gt; 9] = 0;字节数组CARD_TABLE的 每一个元素都对应着其标识的内存区域中一块特定大小的内存块，这个内存块被称作“卡页”。 一般来说，卡页大小都是以2的N次幂的字节数，通过上面代码可以看出HotSpot中使用的卡页是2的9次幂，即512字节。 一个卡页的内存中通常包含不止一个对象， 只要卡页内有一个（或更多）对象的字段存在着跨代指针，那就将对应卡表的数组元素的值标识为1，称为这个元素变脏，没有则标识为0。 在垃圾收集发生时，只要筛选出卡表中变脏的元素，就能轻易得出哪些卡页内存块中包含跨代指针，把它们加入GC Roots中一并扫描。 1.5 写屏障卡表元素何时变脏、谁来把它们变脏？ 卡表元素何时变脏的答案是很明确的——有其他分代区域中对象引用了本区域对象时，其对应的卡表元素就应该变脏，变脏时间点原则上应该发生在引用类型字段赋值的那一刻。但问题是如何变脏，即如何在对象赋值的那一刻去更新维护卡表呢？假如是解释执行的字节码，那相对好处理，虚拟机负责每条字节码指令的执行，有充分的介入空间；但在编译执行的场景中呢？经过即时编译后的代码已经是纯粹的机器指令流了，这就必须找到一个在机器码层面的手段，把维护卡表的动作放到每一个赋值操作之中。 写屏障可以看作在虚拟机层面对“引用类型字段赋值”这个动作的AOP切面，在引用对象赋值时会产生一个环形通知，供程序执行额外的动作，也就是说赋值的前后都在写屏障的覆盖范畴内。在赋值前的部分的写屏障叫作写前屏障，在赋值后的则叫作写后屏障。HotSpot虚拟机的许多收集器中都有使用到写屏障，但直至G1收集器出现之前，其他收集器都只用到了写后屏障。 下面这段代码是一段更新卡表状态的简化逻辑： void oop_field_store(oop* field, oop new_value) { // 引用字段赋值操作 *field = new_value; // 写后屏障，在这里完成卡表状态更新 post_write_barrier(field, new_value); } 应用写屏障后，虚拟机就会为所有赋值操作生成相应的指令，一旦收集器在写屏障中增加了更新卡表操作，无论更新的是不是老年代对新生代对象的引用，每次只要对引用进行更新，就会产生额外的开销，不过开销较小。 卡表在高并发场景下还面临着“伪共享”问题，现代中央处理器的缓存系统中是以缓存行（Cache Line）为单位存储的，当多线程修改互相独立的变量时，如果这些变量恰好共享同一个缓存行，就会彼此影响（写回、无效化或者同步）而导致性能降低。 一种简单的解决方案是不采用无条件的写屏障，而是先检查卡表标记，只有当该卡表元素未被标记过时才将其标记为变脏。 在JDK 7之后，HotSpot虚拟机增加了一个新的参数-XX：+UseCondCardMark，用来决定是否开启卡表更新的条件判断。开启会增加一次额外判断的开销，但能够避免伪共享问题，两者各有性能损耗，是否打开要根据应用实际运行情况来进行测试权衡。 1.6 并发的可达性分析可达性分析算法理论上要求全过程都基于一个能保障一致性的快照中才能够进行分析，这意味着必须全程冻结用户线程的运行。 如果过程前后不一致可能出现两种后果：一种是把原本消亡的对象错误标记为存活，这其实是可以容忍的，只不过产生了一点逃过本次收集的浮动垃圾而已，下次收集清理掉就好。另一种是把原本存活的对象错误标记为已消亡，这就是非常致命的后果了。 我们引入三色标记作为工具来辅助推导，把遍历对象图过程中遇到的对象，按照“是否访问过”这个条件标记成以下三种颜色： 白色：表示对象尚未被垃圾收集器访问过。显然在可达性分析刚刚开始的阶段，所有的对象都是白色的，若在分析结束的阶段，仍然是白色的对象，即代表不可达。 黑色：表示对象已经被垃圾收集器访问过，且这个对象的所有引用都已经扫描过。黑色的对象代表已经扫描过，它是安全存活的，如果有其他对象引用指向了黑色对象，无须重新扫描一遍。黑色对象不可能直接（不经过灰色对象）指向某个白色对象。 灰色：表示对象已经被垃圾收集器访问过，但这个对象上至少存在一个引用还没有被扫描过。 当且仅当以下两个条件同时满足时，会产生“对象消失”的问题，即原本应该是黑色的对象被误标为白色： 赋值器插入了一条或多条从黑色对象到白色对象的新引用； 赋值器删除了全部从灰色对象到该白色对象的直接或间接引用。 要解决这个问题，仅需破坏其中任一条件，由此分别产生了两种解决方案：增量更新和原始快照。 增量更新：当黑色对象插入新的指向白色对象的引用关系时，就将这个新插入的引用记录下来，等并发扫描结束之后，再将这些记录过的引用关系中的黑色对象为根，重新扫描一次。这可以简化理解为，黑色对象一旦新插入了指向白色对象的引用之后，它就变回灰色对象了。 原始快照：当灰色对象要删除指向白色对象的引用关系时，就将这个要删除的引用记录下来，在并发扫描结束之后，再将这些记录过的引用关系中的灰色对象为根，重新扫描一次。这也可以简化理解为，无论引用关系删除与否，都会按照刚刚开始扫描那一刻的对象图快照来进行搜索。 在HotSpot虚拟机中，增量更新和原始快照这两种解决方案都有实际应用，譬如，CMS是基于增量更新来做并发标记的，G1、Shenandoah则是用原始快照来实现。 2 经典垃圾收集器 这里展示了七种作用于不同分代的收集器，如果两个收集器之间存在连线，就说明它们可以搭配使用。重点分析CMS和G1这两款相对复杂而又广泛使用的收集器。 JAVA9取消了对Serial+CMS、ParNew+Serial Old的支持。 2.1 Serail收集器-XX:+UseSerialGC=Serial+SerialOld Serial收集器是最基础、历史最悠久的收集器。这是一个单线程工作的收集器，它进行垃圾收集时，不仅只会使用一个处理器或一条收集线程去完成垃圾收集工作，而且必须暂停其他所有工作线程，直到它收集结束。 对于“Stop The World”，从JDK 1.3开始，一直到现在最新的JDK 13，HotSpot虚拟机开发团队为消除或者降低用户线程因垃圾收集而导致停顿的努力一直持续进行着，从Serial收集器到Parallel收集器，再到Concurrent Mark Sweep（CMS）和Garbage First（G1）收集器，最终至现在垃圾收集器的最前沿成果Shenandoah和ZGC等，我们看到了一个个越来越构思精巧，越来越优秀，也越来越复杂的垃圾收集器不断涌现，用户线程的停顿时间在持续缩短，但是仍然没有办法彻底消除。 迄今为止，它依然是HotSpot虚拟机运行在客户端模式下的默认新生代收集器，有着优于其他收集器的地方，那就是简单而高效。它是所有收集器里额外内存消耗最小的，对于单核处理器或处理器核心数较少的环境来说，Serial收集器由于没有线程交互的开销，专心做垃圾收集自然可以获得最高的单线程收集效率。 2.2 ParNew收集器-XX：+/-UseParNewGC ParNew收集器实质上是Serial收集器的多线程并行版本，除了同时使用多条线程进行垃圾收集之外，其余的行为包括Serial收集器可用的所有控制参数（例如：-XX：SurvivorRatio、-XX：PretenureSizeThreshold、-XX：HandlePromotionFailure等）、收集算法、Stop The World、对象分配规则、回收策略等都与Serial收集器完全一致 ParNew收集器除了支持多线程并行收集之外，其他与Serial收集器相比并没有太多创新之处，但它却是不少运行在服务端模式下的HotSpot虚拟机，尤其是JDK 7之前的遗留系统中首选的新生代收集器，其中有一个与功能、性能无关但其实很重要的原因是：除了Serial收集器外，目前只有它能与CMS收集器配合工作。 随着更先进的G1收集器带着CMS继承者和替代者的光环登场，从JDK 9开始,ParNew和CMS从此只能互相搭配使用，再也没有其他收集器能够和它们配合了，也可以理解为从此以后，ParNew合并入CMS，成为它专门处理新生代的组成部分。 可以使用-XX：ParallelGCThreads参数来限制垃圾收集的线程数。 2.3 Parallel Scavenge收集器-XX:+UseParallelGC -XX:+UseParallelOldGC Parallel Scavenge收集器也是一款新生代收集器，它同样是基于标记-复制算法实现的收集器，也是能够并行收集的多线程收集器。 Parallel Scavenge收集器的特点是它的关注点与其他收集器不同，CMS等收集器的关注点是尽可能地缩短垃圾收集时用户线程的停顿时间，而Parallel Scavenge收集器的目标则是达到一个可控制的吞吐量（Throughput）。所谓吞吐量就是处理器用于运行用户代码的时间与处理器总消耗时间的比值。 Parallel Scavenge收集器提供了两个参数用于精确控制吞吐量，分别是控制最大垃圾收集停顿时间的-XX：MaxGCPauseMillis参数以及直接设置吞吐量大小的-XX：GCTimeRatio参数。 -XX：GCTimeRatio参数的值则应当是一个大于0小于100的整数，也就是垃圾收集时间占总时间的比率，相当于吞吐量的倒数。譬如把此参数设置为19，那允许的最大垃圾收集时间就占总时间的5%（即1/(1+19)），默认值为99，即允许最大1%（即1/(1+99)）的垃圾收集时间。 参数-XX：+UseAdaptiveSizePolicy：当这个参数被激活之后，就不需要人工指定新生代的大小（-Xmn）、Eden与Survivor区的比例（-XX：SurvivorRatio）、晋升老年代对象大小（-XX：PretenureSizeThreshold）等细节参数了，虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间或者最大的吞吐量。这种调节方式称为垃圾收集的自适应的调节策略。 2.4 Serial Old收集器Serial Old是Serial收集器的老年代版本，它同样是一个单线程收集器，使用标记-整理算法。 这个收集器的主要意义也是供客户端模式下的HotSpot虚拟机使用。如果在服务端模式下，它也可能有两种用途： 在JDK 5以及之前的版本中与Parallel Scavenge收集器搭配使用 作为CMS收集器发生失败时的后备预案，在并发收集发生Concurrent Mode Failure时使用。 2.5 Parallel Old收集器Parallel Old是Parallel Scavenge收集器的老年代版本，支持多线程并发收集，基于标记-整理算法实现。这个收集器是直到JDK 6时才开始提供的，配合Parallel Scavenge有着良好的“吞吐量优先”的表现。 2.6 CMS收集器CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。目前很大一部分的Java应用集中在互联网网站或者基于浏览器的B/S系统的服务端上，这类应用通常都会较为关注服务的响应速度，希望系统停顿时间尽可能短，以给用户带来良好的交互体验。CMS收集器就非常符合这类应用的需求。 CMS收集器是基于标记-清除算法实现的，它的运作过程相对于前面几种收集器来说要更复杂一些，整个过程分为四个步骤，包括： 初始标记（CMS initial mark） 并发标记（CMS concurrent mark） 重新标记（CMS remark） 并发清除（CMS concurrent sweep） 其中初始标记、重新标记这两个步骤仍然需要“Stop The World”。初始标记仅仅只是标记一下GC Roots能直接关联到的对象，速度很快；并发标记阶段就是从GC Roots的直接关联对象开始遍历整个对象图的过程，这个过程耗时较长但是不需要停顿用户线程，可以与垃圾收集线程一起并发运行；而重新标记阶段则是为了修正并发标记期间，因用户程序继续运作而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间通常会比初始标记阶段稍长一些，但也远比并发标记阶段的时间短；最后是并发清除阶段，清理删除掉标记阶段判断的已经死亡的对象，由于不需要移动存活对象，所以这个阶段也是可以与用户线程同时并发的。 由于在整个过程中耗时最长的并发标记和并发清除阶段中，垃圾收集器线程都可以与用户线程一起工作，所以从总体上来说，CMS收集器的内存回收过程是与用户线程一起并发执行的。 CMS收集器的缺点： 1) CMS收集器对处理器资源非常敏感。CMS默认启动的回收线程数是（处理器核心数量+3）/4，也就是说，如果处理器核心数在四个或以上，并发回收时垃圾收集线程只占用不超过25%的处理器运算资源，并且会随着处理器核心数量的增加而下降。但是当处理器核心数量不足四个时，CMS对用户程序的影响就可能变得很大。为了缓解这种情况，虚拟机提供了一种称为“增量式并发收集器”（Incremental Concurrent Mark Sweep/i-CMS）的CMS收集器变种，所做的事情和以前单核处理器年代PC机操作系统靠抢占式多任务来模拟多核并行多任务的思想一样，是在并发标记、清理的时候让收集器线程、用户线程交替运行，尽量减少垃圾收集线程的独占资源的时间，这样整个垃圾收集的过程会更长，但对用户程序的影响就会显得较少一些，直观感受是速度变慢的时间更多了，但速度下降幅度就没有那么明显。实践证明增量式的CMS收集器效果很一般，从 JDK 7开始，i-CMS模式已经被声明为“deprecated”，即已过时不再提倡用户使用，到JDK 9发布后i-CMS模式被完全废弃。 2) CMS收集器无法处理“浮动垃圾”,有可能出现“Concurrent Mode Failure”失败进而导致另一次完全“Stop The World”的Full GC的产生。在CMS的并发标记和并发清理阶段，用户线程是还在继续运行的，程序在运行自然就还会伴随有新的垃圾对象不断产生，但这一部分垃圾对象是出现在标记过程结束以后，CMS无法在当次收集中处理掉它们，只好留待下一次垃圾收集时再清理掉。这一部分垃圾就称为“浮动垃圾”。同样也是由于在垃圾收集阶段用户线程还需要持续运行，那就还需要预留足够内存空间提供给用户线程使用，因此CMS收集器不能像其他收集器那样等待到老年代几乎完全被填满了再进行收集，必须预留一部分空间供并发收集时的程序运作使用。在JDK 5的默认设置下，CMS收集器当老年代使用了68%的空间后就会被激活，这是一个偏保守的设置，如果在实际应用中老年代增长并不是太快，可以适当调高参数-XX：CMSInitiatingOccupancyFraction的值来提高CMS的触发百分比，降低内存回收频率，获取更好的性能。到了JDK 6时，CMS收集器的启动阈值就已经默认提升至92%。但这又会更容易面临另一种风险：要是CMS运行期间预留的内存无法满足程序分配新对象的需要，就会出现一次“并发失败”（Concurrent Mode Failure），这时候虚拟机将不得不启动后备预案：冻结用户线程的执行，临时启用Serial Old收集器来重新进行老年代的垃圾收集，但这样停顿时间就很长了。所以参数-XX：CMSInitiatingOccupancyFraction设置得太高将会很容易导致大量的并发失败产生，性能反而降低，用户应在生产环境中根据实际应用情况来权衡设置。 3) CMS是一款基于“标记-清除”算法实现的收集器,收集结束时会有大量空间碎片产生,空间碎片过多时，将会给大对象分配带来很大麻烦。为了解决这个问题，CMS收集器提供了一个-XX：+UseCMSCompactAtFullCollection开关参数（默认是开启的，此参数从 JDK 9开始废弃），用于在CMS收集器不得不进行Full GC时开启内存碎片的合并整理过程，由于这个内存整理必须移动存活对象，（在Shenandoah和ZGC出现前）是无法并发的。这样空间碎片问题是解决了，但停顿时间又会变长，因此虚拟机设计者们还提供了另外一个参数-XX：CMSFullGCsBeforeCompaction（此参数从JDK 9开始废弃），这个参数的作用是要求CMS收集器在执行过若干次（数量由参数值决定）不整理空间的Full GC之后，下一次进入Full GC前会先进行碎片整理（默认值为0，表示每次进入Full GC时都进行碎片整理）。 2.7 Garbage First收集器（G1）-XX:+UseG1GC Garbage First（简称G1）开创了收集器面向局部收集的设计思路和基于Region的内存布局形式。 G1是一款主要面向服务端应用的垃圾收集器。最初期望可以替换掉CMS收集器。JDK 9发布之后代替Parallel Scavenge加Parallel Old成为服务端模式下的默认垃圾收集器，而CMS则沦落至被声明为不推荐使用（Deprecate）的收集器。 目标： 支持可预测的停顿时间模型——能够支持指定在一个长度为M毫秒的时间片段内，消耗在垃圾收集上的时间大概率不超过N毫秒，这几乎已经是实时Java（RTSJ）的中软实时垃圾收集器特征了。 那具体要怎么做才能实现这个目标呢？ G1可以面向堆内存任何部分来组成回收集（Collection Set，一般简称CSet）进行回收，衡量标准不再是它属于哪个分代，而是哪块内存中存放的垃圾数量最多，回收收益最大，这就是G1收集器的Mixed GC模式。 G1不再坚持固定大小以及固定数量的分代区域划分，而是把连续的Java堆划分为多个大小相等的独立区域（Region），每一个Region都可以根据需要，扮演新生代的Eden空间、Survivor空间，或者老年代空间。收集器能够对扮演不同角色的Region采用不同的策略去处理，这样无论是新创建的对象还是已经存活了一段时间、熬过多次收集的旧对象都能获取很好的收集效果。 -XX:G1HeapRegionSize=size设定region大小，取值范围为1MB～32MB，且应为2的N次幂。 Region中还有一类特殊的Humongous区域，专门用来存储大对象。 G1认为只要大小超过了一个Region容量一半的对象即可判定为大对象。而对于那些超过了整个Region容量的超级大对象，将会被存放在N个连续的Humongous Region之中，G1的大多数行为都把Humongous Region作为老年代的一部分来进行看待。 虽然G1仍然保留新生代和老年代的概念，但新生代和老年代不再是固定的了，它们都是一系列区域（不需要连续）的动态集合。G1收集器之所以能建立可预测的停顿时间模型，是因为它将Region作为单次回收的最小单元，即每次收集到的内存空间都是Region大小的整数倍，这样可以有计划地避免在整个Java堆中进行全区域的垃圾收集。更具体的处理思路是让G1收集器去跟踪各个Region里面的垃圾堆积的“价值”大小，价值即回收所获得的空间大小以及回收所需时间的经验值，然后在后台维护一个优先级列表，每次根据用户设定允许的收集停顿时间，优先处理回收价值收益最大的那些Region，这也就是“Garbage First”名字的由来。这种使用Region划分内存空间，以及具有优先级的区域回收方式，保证了G1收集器在有限的时间内获取尽可能高的收集效率。 -XX：MaxGCPauseMillis指定用户期望的收集停顿时间，默认值是200毫秒，设置成一百或者两三百是较为合理的。 解决的细节问题： 将Java堆分成多个独立Region后，Region里面存在的跨Region引用对象如何解决？它的每个Region都维护有自己的记忆集，这些记忆集会记录下别的Region 指向自己的指针，并标记这些指针分别在哪些卡页的范围之内。G1的记忆集在存储结构的本质上是一种哈希表，Key是别的Region的起始地址，Value是一个集合，里面存储的元素是卡表的索引号。这种“双向”的卡表结构（卡表是“我指向谁”，这种结构还记录了“谁指向我”）比原来的卡表实现起来更复杂，同时由于Region数量比传统收集器的分代数量明显要多得多，因此G1收集器要比其他的传统垃圾收集器有着更高的内存占用负担。根据经验，G1至少要耗费大约相当于Java堆容量10%至20%的额外内存来维持收集器工作。 在并发标记阶段如何保证收集线程与用户线程互不干扰地运行？CMS收集器采用增量更新算法实现，而G1 收集器则是通过原始快照算法来实现的。G1为每一个Region设计了两个名为TAMS（Top at Mark Start）的指针，把Region中的一部分空间划分出来用于并发回收过程中的新对象分配，并发回收时新分配的对象地址都必须要在这两个指针位置以上。G1收集器默认在这个地址以上的对象是被隐式标记过的，即默认它们是存活的，不纳入回收范围。与CMS中的“Concurrent Mode Failure”失败会导致Full GC类似，如果内存回收的速度赶不上内存分配的速度，G1收集器也要被迫冻结用户线程执行，导致Full GC而产生长时间“Stop The World”。 怎样建立起可靠的停顿预测模型？G1收集器的停顿预测模型是以衰减均值（Decaying Average）为理论基础来实现的，在垃圾收集过程中，G1收集器会记录每个Region的回收耗时、每个Region记忆集里的脏卡数量等各个可测量的步骤花费的成本，并分析得出平均值、标准偏差、置信度等统计信息。 G1收集器的运作过程大致可划分为以下四个步骤： 初始标记：仅仅只是标记一下GC Roots能直接关联到的对象，并且修改TAMS指针的值，让下一阶段用户线程并发运行时，能正确地在可用的Region中分配新对象。这个阶段需要停顿线程，但耗时很短，而且是借用进行Minor GC的时候同步完成的，所以G1收集器在这个阶段实际并没有额外的停顿。 并发标记：从GC Root开始对堆中对象进行可达性分析，递归扫描整个堆里的对象图，找出要回收的对象，这阶段耗时较长，但可与用户程序并发执行。当对象图扫描完成以后，还要重新处理SATB记录下的在并发时有引用变动的对象。 最终标记：对用户线程做另一个短暂的暂停，用于处理并发阶段结束后仍遗留下来的最后那少量的SATB记录。 筛选回收：负责更新Region的统计数据，对各个Region的回收价值和成本进行排序，根据用户所期望的停顿时间来制定回收计划，可以自由选择任意多个Region 构成回收集，然后把决定回收的那一部分Region的存活对象复制到空的Region中，再清理掉整个旧Region的全部空间。这里的操作涉及存活对象的移动，是必须暂停用户线程，由多条收集器线程并行完成的。 G1收集器除了并发标记外，其余阶段也是要完全暂停用户线程的，换言之，它并非纯粹地追求低延迟，官方给它设定的目标是在延迟可控的情况下获得尽可能高的吞吐量。 G1收集器常会被拿来与CMS收集器互相比较，毕竟它们都非常关注停顿时间的控制： 与CMS的“标记-清除”算法不同，G1从整体来看是基于“标记-整理”算法实现的收集器，但从局部（两个Region之间）上看又是基于“标记-复制”算法实现，无论如何，这两种算法都意味着G1运作期间不会产生内存空间碎片，垃圾收集完成之后能提供规整的可用内存。 在用户程序运行过程中，G1无论是为了垃圾收集产生的内存占用（Footprint）还是程序运行时的额外执行负载（Overload）都要比CMS要高。 就内存占用来说，虽然G1和CMS都使用卡表来处理跨代指针，但G1的卡表实现更为复杂，而且堆中每个Region，无论扮演的是新生代还是老年代角色，都必须有一份卡表，这导致G1的记忆集（和其他内存消耗）可能会占整个堆容量的20%乃至更多的内存空间；相比起来CMS的卡表就相当简单，只有唯一一份，而且只需要处理老年代到新生代的引用，反过来则不需要。 在执行负载的角度上，同样由于两个收集器各自的细节实现特点导致了用户程序运行时的负载会有不同，譬如它们都使用到写屏障，CMS用写后屏障来更新维护卡表；而G1除了使用写后屏障来进行同样的卡表维护操作外，为了实现原始快照搜索（SATB）算法，还需要使用写前屏障来跟踪并发时的指针变化情况。相比起增量更新算法，原始快照搜索能够减少并发标记和重新标记阶段的消耗，避免CMS那样在最终标记阶段停顿时间过长的缺点，但是在用户程序运行过程中确实会产生由跟踪引用变化带来的额外负担。由于G1对写屏障的复杂操作要比CMS消耗更多的运算资源，所以CMS的写屏障实现是直接的同步操作，而G1就不得不将其实现为类似于消息队列的结构，把写前屏障和写后屏障中要做的事情都放到队列里，然后再异步处理。 3 低延迟垃圾收集器衡量垃圾收集器的三项最重要的指标是：内存占用（Footprint）、吞吐量（Throughput）和延迟（Latency）,在这三项指标里，延迟的重要性日益凸显，越发备受关注。其原因是随着计算机硬件的发展、性能的提升，我们越来越能容忍收集器多占用一点点内存，硬件的规格和性能越高，吞吐量也会越高，但对延迟反而会带来负面的效果。 浅色阶段表示必须挂起用户线程，深色表示收集器线程与用户线程是并发工作的。可以看出，Shenandoah和ZGC，几乎整个工作过程全部都是并发的，只有初始标记、最终标记这些阶段有短暂的停顿，这部分停顿的时间基本上是固定的，与堆的容量、堆中对象的数量没有正比例关系。实际上，它们都可以在任意可管理的堆容量下，实现垃圾收集的停顿都不超过十毫秒。 3.1 Shenandoah收集器Shenandoah是由RedHat领导开发的，受到了Oracle的抵制。Oracle明确拒绝在OracleJDK 12中支持Shenandoah收集器，Shenandoah是一款只有OpenJDK才会包含，而OracleJDK里反而不存在的收集器。 Shenandoah和G1有着相似的堆内存布局，在初始标记、并发标记等许多阶段的处理思路上都高度一致，甚至还直接共享了一部分实现代码。 不同之处： 支持并发的整理算法 默认不使用分代收集，不会有新生代Region和老年代Region 摒弃了记忆集，改用名为 “连接矩阵” 的全局数据结构来记录跨Region的引用关系 连接矩阵可以简单理解为一张二维表格，如果Region N有对象指向Region M，就在表格的N行M列中打上一个标记，如图所示，如果Region 5中的对象Baz引用了Region 3的Foo，Foo又引用了Region 1的Bar，那连接矩阵中的5行3列、3行1列就应该被打上标记。在回收时通过这张表格就可以得出哪些Region之间产生了跨代引用。 Shenandoah收集器的工作过程大致可以划分为以下九个阶段: 初始标记：与G1一样，首先标记与GC Roots直接关联的对象，这个阶段仍是“Stop The World”的，但停顿时间与堆大小无关，只与GC Roots的数量相关。 并发标记：与G1一样，遍历对象图，标记出全部可达的对象，这个阶段是与用户线程一起并发的，时间长短取决于堆中存活对象的数量以及对象图的结构复杂程度。 最终标记：与G1一样，处理剩余的SATB扫描，并在这个阶段统计出回收价值最高的Region，将这些Region构成一组回收集。最终标记阶段也会有一小段短暂的停顿。 并发清理：这个阶段用于清理那些整个区域内连一个存活对象都没有找到的Region（这类Region被称为Immediate Garbage Region）。 并发回收：并发回收阶段是Shenandoah与之前HotSpot中其他收集器的核心差异。在这个阶段，Shenandoah要把回收集里面的存活对象先复制一份到其他未被使用的Region之中。复制对象这件事情如果将用户线程冻结起来再做那是相当简单的，但如果两者必须要同时并发进行的话，就变得复杂起来了。其困难点是在移动对象的同时，用户线程仍然可能不停对被移动的对象进行读写访问，移动对象是一次性的行为，但移动之后整个内存中所有指向该对象的引用都还是旧对象的地址，这是很难一瞬间全部改变过来的。对于并发回收阶段遇到的这些困难，Shenandoah将会通过读屏障和被称为“Brooks Pointers”的转发指针来解决。并发回收阶段运行的时间长短取决于回收集的大小。 初始引用更新：并发回收阶段复制对象结束后，还需要把堆中所有指向旧对象的引用修正到复制后的新地址，这个操作称为引用更新。引用更新的初始化阶段实际上并未做什么具体的处理，设立这个阶段只是为了建立一个线程集合点，确保所有并发回收阶段中进行的收集器线程都已完成分配给它们的对象移动任务而已。初始引用更新时间很短，会产生一个非常短暂的停顿。 并发引用更新：真正开始进行引用更新操作，这个阶段是与用户线程一起并发的，时间长短取决于内存中涉及的引用数量的多少。并发引用更新与并发标记不同，它不再需要沿着对象图来搜索，只需要按照内存物理地址的顺序，线性地搜索出引用类型，把旧值改为新值即可。 最终引用更新：解决了堆中的引用更新后，还要修正存在于GC Roots 中的引用。这个阶段是Shenandoah的最后一次停顿，停顿时间只与GC Roots的数量相关。 并发清理：经过并发回收和引用更新之后，整个回收集中所有的Region已再无存活对象，这些Region都变成Immediate Garbage Regions了，最后再调用一次并发清理过程来回收这些Region的内存空间，供以后新对象分配使用。 原书还有关于转发指针原理的讲解，这里暂时略去。 3.2 ZGC收集器ZGC收集器是一款基于Region内存布局的，（暂时）不设分代的，使用了读屏障、染色指针和内存多重映射等技术来实现可并发的标记-整理算法的，以低延迟为首要目标的一款垃圾收集器。 ZGC也采用基于Region的堆内存布局，但与它们不同的是，ZGC的Region（一些官方资料中将它称为Page或者ZPage）具有动态性——动态创建和销毁，以及动态的区域容量大小。在x64硬件平台下，ZGC的Region可以具有大、中、小三类容量： 小型Region（Small Region）：容量固定为2MB，用于放置小于256KB的小对象。 中型Region（Medium Region）：容量固定为32MB，用于放置大于等于256KB但小于4MB的对象。 大型Region（Large Region）：容量不固定，可以动态变化，但必须为2MB的整数倍，用于放置4MB或以上的大对象。每个大型Region中只会存放一个大对象，这也预示着虽然名字叫作“大型 Region”，但它的实际容量完全有可能小于中型Region，最小容量可低至4MB。大型Region在ZGC的实现中是不会被重分配（重分配是ZGC的一种处理动作，用于复制对象的收集器阶段）的，因为复制一个大对象的代价非常高昂。 接下来是ZGC的核心问题——并发整理算法的实现。Shenandoah使用转发指针和读屏障来实现并发整理，ZGC虽然同样用到了读屏障，但用的却是一条与Shenandoah完全不同，更加复杂精巧的解题思路——染色指针。 原书还有关于染色指针原理的讲解，这里暂时略去。 4 选择合适的垃圾收集器4.1 Epsilon收集器JDK11中，出现了一款以不能够进行垃圾收集为“卖点”的垃圾收集器。这里称这种“垃圾收集器”为“自动内存管理子系统”。一个垃圾收集器除了垃圾收集这个本职工作之外，它还要负责堆的管理与布局、对象的分配、与解释器的协作、与编译器的协作、与监控子系统协作等职责。 传统Java有着内存占用较大，在容器中启动时间长，即时编译需要缓慢优化等特点，这对大型应用来说并不是什么太大的问题，但对短时间、小规模的服务形式就有诸多不适。为了应对新的技术潮流，最近几个版本的JDK逐渐加入了提前编译、面向应用的类数据共享等支持。Epsilon也是有着类似的目标，如果读者的应用只要运行数分钟甚至数秒，只要Java虚拟机能正确分配内存，在堆耗尽之前就会退出，那显然运行负载极小、没有任何回收行为的Epsilon便是很恰当的选择。 4.2 收集器的权衡如何选择一款适合自己应用的收集器呢？ 应用程序的主要关注点是什么？如果是数据分析、科学计算类的任务，目标是能尽快算出结果，那吞吐量就是主要关注点；如果是SLA应用，那停顿时间直接影响服务质量，严重的甚至会导致事务超时，这样延迟就是主要关注点；而如果是客户端应用或者嵌入式应用，那垃圾收集的内存占用则是不可忽视的。 运行应用的基础设施如何？譬如硬件规格，要涉及的系统架构是x86-32/64、SPARC还是ARM/Aarch64；处理器的数量多少，分配内存的大小；选择的操作系统是Linux、Solaris还是Windows等。 使用JDK的发行商是什么？版本号是多少？是ZingJDK/Zulu、OracleJDK、Open-JDK、OpenJ9抑或是其他公司的发行版？该JDK对应了《Java虚拟机规范》的哪个版本？ 4.3 虚拟机及垃圾收集器日志在JDK 9以前，HotSpot并没有提供统一的日志处理框架，虚拟机各个功能模块的日志开关分布在不同的参数上，日志级别、循环日志大小、输出格式、重定向等设置在不同功能上都要单独解决。直到JDK 9，这种混乱不堪的局面才终于消失，HotSpot所有功能的日志都收归到了“-Xlog”参数上，这个参数的能力也相应被极大拓展了。 -Xlog[:[selector][:[output][:[decorators][:output-options]]]]这里不详细列举。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"深入理解java虚拟机","slug":"深入理解java虚拟机","permalink":"https://www.codetool.top/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"leetcode101-对称二叉树","slug":"leetcode101-对称二叉树","date":"2020-01-11T11:05:17.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/leetcode101-对称二叉树/","link":"","permalink":"https://www.codetool.top/article/leetcode101-%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/","excerpt":"","text":"1 原题给定一个二叉树，检查它是否是镜像对称的。 例如，二叉树 [1,2,2,3,4,4,3] 是对称的。 &nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;2&nbsp;/&nbsp;\\ /&nbsp;\\3&nbsp;&nbsp;4&nbsp;4&nbsp;&nbsp;3 但是下面这个 [1,2,2,null,3,null,3] 则不是镜像对称的: &nbsp;&nbsp;&nbsp;&nbsp;1&nbsp;&nbsp;&nbsp;/&nbsp;\\&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;&nbsp;\\ &nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;&nbsp;3 说明: 如果你可以运用递归和迭代两种方法解决这个问题，会很加分。 2 解法2.1 思想 迭代，自顶向下比较对称位置的节点。 递归，实际上是模拟迭代，将对称位置的节点前后顺序入队列，每次从队列中取出两个元素进行比较。 2.2 代码递归： class Solution { public boolean isSymmetric(TreeNode root) { if(root == null) return true; return isSymetricUnit(root.left,root.right); } public boolean isSymmetricUnit(TreeNode node1,TreeNode node2){ if(node1 == null &amp;&amp; node2 == null) return true; if(node1 == null || node2 == null) return false; if(node1.val != node2.val) return false; return isSymmetricUnit(node1.left,node2.right) &amp;&amp; isSymmetricUnit(node1.right,node2.left); } } 迭代： public boolean isSymmetric(TreeNode root) { Queue&lt;TreeNode> q = new LinkedList&lt;>(); q.add(root); q.add(root); while (!q.isEmpty()) { TreeNode t1 = q.poll(); TreeNode t2 = q.poll(); if (t1 == null &amp;&amp; t2 == null) continue; if (t1 == null || t2 == null) return false; if (t1.val != t2.val) return false; q.add(t1.left); q.add(t2.right); q.add(t1.right); q.add(t2.left); } return true; }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode104-二叉树的最大深度","slug":"leetcode104-二叉树的最大深度","date":"2020-01-11T09:15:31.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/leetcode104-二叉树的最大深度/","link":"","permalink":"https://www.codetool.top/article/leetcode104-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/","excerpt":"","text":"1 原题给定一个二叉树，找出其最大深度。 二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。 说明: 叶子节点是指没有子节点的节点。 示例：给定二叉树 [3,9,20,null,null,15,7]， &nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;/ \\&nbsp;&nbsp;9&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;15&nbsp;&nbsp;&nbsp;7 返回它的最大深度 3 。 2 解法2.1 思想 自底向上，每个节点是左右两个孩子节点的深度的最大值+1 自顶向下，依次更新最大高度 2.2 代码自底向上： class Solution { public int maxDepth(TreeNode root) { return depth(root); } public int depth(TreeNode root){ if(root == null) return 0; if(root.left == null &amp;&amp; root.right == null) return 1; return Math.max(depth(root.left),depth(root.right))+1; } } 自顶向下： class Solution { int depth = 0; public int maxDepth(TreeNode root) { depth(root,1); return depth; } public void depth(TreeNode root,int cur){ if(root == null) return; if(cur>depth) depth = cur; depth(root.left,cur+1); depth(root.right,cur+1); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode102-二叉树的层次遍历","slug":"leetcode102-二叉树的层次遍历","date":"2020-01-11T08:33:52.000Z","updated":"2020-02-20T14:55:21.053Z","comments":true,"path":"article/leetcode102-二叉树的层次遍历/","link":"","permalink":"https://www.codetool.top/article/leetcode102-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E6%AC%A1%E9%81%8D%E5%8E%86/","excerpt":"","text":"1 原题给定一个二叉树，返回其按层次遍历的节点值。 （即逐层地，从左到右访问所有节点）。 例如:给定二叉树: [3,9,20,null,null,15,7], &nbsp;&nbsp;&nbsp;&nbsp;3&nbsp;&nbsp;&nbsp;/ \\&nbsp;&nbsp;9&nbsp;&nbsp;20&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;15&nbsp;&nbsp;&nbsp;7 返回其层次遍历结果： [&nbsp;&nbsp;[3],&nbsp;&nbsp;[9,20],&nbsp;&nbsp;[15,7]] 2 解法2.1 思想 迭代，广度优先搜索，但需要记录元素是哪一层的。 递归，深度优先搜索，将元素加进每层对应的List中 2.2 代码迭代： class Solution { public List&lt;List&lt;Integer>> levelOrder(TreeNode root) { Queue&lt;TreeNode> queue = new LinkedList&lt;>(); List&lt;List&lt;Integer>> ans = new ArrayList&lt;>(); List&lt;Integer> cur = new ArrayList&lt;>(); if(root == null) return new ArrayList&lt;List&lt;Integer>>(); queue.offer(root); queue.offer(null);//以null作为每层结束的标志符 while(!queue.isEmpty()){ TreeNode node = queue.poll(); if(node == null){ if(cur.size()!=0) ans.add(cur); cur = new ArrayList&lt;>(); }else{ cur.add(node.val); if(node.left!=null) queue.offer(node.left); if(node.right!=null) queue.offer(node.right); //若队首为null说明这一层的节点的子节点已经全部加入队列了，需要加入一个null if(queue.peek()==null) queue.offer(null); } } return ans; } } 递归： class Solution { List&lt;List&lt;Integer>> ans = new ArrayList&lt;>(); public List&lt;List&lt;Integer>> levelOrder(TreeNode root) { if(root==null) return ans; DFS(root,0); return ans; } public void DFS(TreeNode root,int level){ if(ans.size()==level) ans.add(new ArrayList&lt;Integer>()); ans.get(level).add(root.val); if(root.left!=null) DFS(root.left,level+1); if(root.right!=null) DFS(root.right,level+1); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"BFS","slug":"BFS","permalink":"https://www.codetool.top/tags/BFS/"}]},{"title":"StringTable性能调优","slug":"stringtable性能调优","date":"2020-01-10T14:55:10.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/stringtable性能调优/","link":"","permalink":"https://www.codetool.top/article/stringtable%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98/","excerpt":"","text":"StringTable是jvm运行时常量池表中的字符串常量池，深入理解java虚拟机第三版读书笔记02有相关的介绍。 无论是运行时常量表还是StringTable，他们内部都是通过哈希表来保证字符串常量的唯一性，可以通过配置jvm参数-XX:+PrintStringTableStatistics来查看常量表的详细信息。 1 验证StringTable的垃圾回收首先我们运行下面这段代码：使用虚拟机参数：-XX:+PrintGCDetails -XX:+PrintStringTableStatistics public static void main(String[] args) throws IOException { for(int i = 0;i&lt;10000;i++){ String.valueOf(i).intern(); } } 截取部分输出： StringTable statistics: Number of buckets : 60013 = 480104 bytes, avg 8.000 Number of entries : 11695 = 280680 bytes, avg 24.000 Number of literals : 11695 = 635176 bytes, avg 54.312可见StringTable总共有60013个桶，10000个字符串全部进入常量池，且没有垃圾回收的信息输出。 那我们让进入堆的内存适度减小，让它有可能发生堆空间不足的情况： 使用虚拟机参数：-Xmx10m -XX:+PrintGCDetails -XX:+PrintStringTableStatistics再次运行上面那段代码 截取部分输出： [GC (Allocation Failure) [PSYoungGen: 2048K-&gt;504K(2560K)] 2048K-&gt;720K(9728K), 0.0014597 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] Number of buckets : 60013 = 480104 bytes, avg 8.000 Number of entries : 7981 = 191544 bytes, avg 24.000 Number of literals : 7981 = 456584 bytes, avg 57.209可以看到，这次10000个字符串并没有全部进入常量池，一部分被回收掉了。 2 调整桶的个数我们都知道哈希表的存取效率和桶的个数是紧密相关的，桶的个数太大则空间有可能浪费，太小则可能效率过低。 我们运行这段代码：使用虚拟机参数-XX:+PrintStringTableStatistics public static void main(String[] args) throws IOException { long start = System.nanoTime(); List&lt;String> list = new ArrayList&lt;>(); for(int i = 0;i&lt;500000;i++){ list.add(String.valueOf(i).intern()); } System.out.println(\"cost:\"+(System.nanoTime()-start)/1000000000.0 + \"s\"); } 截取部分输出： cost:0.0997132sStringTable statistics: Number of buckets : 60013 = 480104 bytes, avg 8.000 Number of entries : 501704 = 12040896 bytes, avg 24.000 Number of literals : 501704 = 28075720 bytes, avg 55.961我们使用虚拟机参数来调整桶的个数：使用虚拟机参数-XX:StringTableSize=1009 -XX:+PrintStringTableStatistics cost:3.1234771s Number of buckets : 1009 = 8072 bytes, avg 8.000 Number of entries : 503097 = 12074328 bytes, avg 24.000 Number of literals : 503097 = 28176912 bytes, avg 56.007可见消耗时间明显增大 我们再将桶的个数调至更大：使用虚拟机参数-XX:StringTableSize=1009 -XX:+PrintStringTableStatistics 截取部分输出： cost:0.0879392sStringTable statistics: Number of buckets : 1000000 = 8000000 bytes, avg 8.000 Number of entries : 501704 = 12040896 bytes, avg 24.000 Number of literals : 501704 = 28075720 bytes, avg 55.961可见消耗时间有所减少 3 是否该使用intern方法将字符串入池我们运行下面这段代码，使用jvisualvm查看堆内存的变化情况： public static void main(String[] args) throws IOException { System.in.read(); List&lt;String> list = new ArrayList&lt;>(); for(int n = 0;n&lt;10;n++){//每个字符串搞出10次 for(int i = 0;i&lt;500000;i++){ list.add(String.valueOf(i)); } System.out.println(\"part \"+n+\" has done\"); } System.in.read(); } 可见String和char[]占用了极高内存（接近300M） 我们在原来代码的基础上使用intern方法： public static void main(String[] args) throws IOException { System.in.read(); List&lt;String> list = new ArrayList&lt;>(); for(int n = 0;n&lt;10;n++){//每个字符串搞出10次 for(int i = 0;i&lt;500000;i++){ list.add(String.valueOf(i).intern()); } System.out.println(\"part \"+n+\" has done\"); } System.in.read(); } 再次查看运行结束后的内存占用： 可见这次String和char[]占用的内存接近100M，相比减少很多。 所以当java程序可能引用很多相同内容的字符串的时候，最好将字符串入池，能有效减轻内存负担，所增开销仅是intern方法内部开销。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"优化","slug":"优化","permalink":"https://www.codetool.top/tags/%E4%BC%98%E5%8C%96/"}]},{"title":"leetcode145-二叉树的后序遍历","slug":"leetcode145-二叉树的后序遍历","date":"2020-01-10T08:03:17.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/leetcode145-二叉树的后序遍历/","link":"","permalink":"https://www.codetool.top/article/leetcode145-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86/","excerpt":"","text":"1 原题给定一个二叉树，返回它的 后序 遍历。 示例: 输入: [1,null,2,3]&nbsp;1&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;/&nbsp;3输出: [3,2,1] 进阶: 递归算法很简单，你可以通过迭代算法完成吗？ 2 解法2.1 思想 递归 迭代（不同于前序遍历和中序遍历，后序遍历迭代更麻烦） 逆转前序遍历 2.2 代码递归： /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { List&lt;Integer> ans = new ArrayList&lt;>(); public List&lt;Integer> postorderTraversal(TreeNode root) { if(root!=null){ postorderTraversal(root.left); postorderTraversal(root.right); ans.add(root.val); } return ans; } } 迭代： public List&lt;Integer> postorderTraversal(TreeNode root) { List&lt;Integer> list = new ArrayList&lt;>(); Stack&lt;TreeNode> stack = new Stack&lt;>(); TreeNode cur = root; TreeNode last = null; while (cur != null || !stack.isEmpty()) { if (cur != null) { stack.push(cur); cur = cur.left; } else { TreeNode temp = stack.peek(); //是否变到右子树 if (temp.right != null &amp;&amp; temp.right != last) { cur = temp.right; } else { list.add(temp.val); last = temp; stack.pop(); } } } return list; } 逆转前序遍历：（来源leetcode官方） class Solution { public List&lt;Integer> postorderTraversal(TreeNode root) { LinkedList&lt;TreeNode> stack = new LinkedList&lt;>(); LinkedList&lt;Integer> output = new LinkedList&lt;>(); if (root == null) { return output; } stack.add(root); while (!stack.isEmpty()) { TreeNode node = stack.pollLast(); output.addFirst(node.val); if (node.left != null) { stack.add(node.left); } if (node.right != null) { stack.add(node.right); } } return output; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"}]},{"title":"leetcode144-二叉树的前序遍历","slug":"leetcode144-二叉树的前序遍历","date":"2020-01-10T07:37:59.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/leetcode144-二叉树的前序遍历/","link":"","permalink":"https://www.codetool.top/article/leetcode144-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86/","excerpt":"","text":"1 原题给定一个二叉树，返回它的 前序 遍历。 示例: 输入: [1,null,2,3]&nbsp;1&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;/&nbsp;3输出: [1,2,3] 进阶: 递归算法很简单，你可以通过迭代算法完成吗？ 2 解法2.1 思想递归、迭代，类似 leetcode94-二叉树的中序遍历 2.2 代码递归： /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { List&lt;Integer> ans = new ArrayList&lt;>(); public List&lt;Integer> preorderTraversal(TreeNode root) { if(root!=null){ ans.add(root.val); preorderTraversal(root.left); preorderTraversal(root.right); } return ans; } } 迭代： public class Solution { public List &lt;Integer> inorderTraversal(TreeNode root) { List &lt;Integer> res = new ArrayList&lt;>(); Stack &lt;TreeNode> stack = new Stack&lt;>(); TreeNode curr = root; while (curr != null || !stack.isEmpty()) { while (curr != null) { stack.push(curr); res.add(curr.val); curr = curr.left; } curr = stack.pop(); curr = curr.right; } return res; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"}]},{"title":"leetcode410-分割数组的最大值","slug":"leetcode410-分割数组的最大值","date":"2020-01-09T13:58:22.000Z","updated":"2020-01-09T15:32:05.998Z","comments":true,"path":"article/leetcode410-分割数组的最大值/","link":"","permalink":"https://www.codetool.top/article/leetcode410-%E5%88%86%E5%89%B2%E6%95%B0%E7%BB%84%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/","excerpt":"","text":"1 原题给定一个非负整数数组和一个整数 m，你需要将这个数组分成 m 个非空的连续子数组。设计一个算法使得这 m 个子数组各自和的最大值最小。 注意:数组长度 n 满足以下条件: 1 ≤ n ≤ 1000 1 ≤ m ≤ min(50, n) 示例： 输入:nums = [7,2,5,10,8]m = 2 输出:18 解释:一共有四种方法将nums分割为2个子数组。其中最好的方式是将其分为[7,2,5] 和 [10,8]，因为此时这两个子数组各自的和的最大值为18，在所有情况中最小。 2 解法2.1 思想二分查找。要分成连续子数组，子数组的和的下限和上限分别是值最大的元素和所有元素之和，根据和不大于mid的子数组个数来逼近一个值，就是分割数组的最大值。 2.2 代码class Solution { public int splitArray(int[] nums, int m) { int max = nums[0]; int sum = 0; for(int i:nums){ if(i>max) max = i; sum += i; } long start = max, end = sum; while(start&lt;end){ long mid = (start + end)/2; long temp = 0; int count = 1; for(int i:nums) { temp += i; if(temp>mid) { temp = i; ++count; } } if(count>m) start = mid + 1; else end = mid; } return (int)start; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"leetcode4-寻找两个有序数组的中位数","slug":"leetcode4-寻找两个有序数组的中位数","date":"2020-01-09T09:20:24.000Z","updated":"2020-01-09T15:33:57.153Z","comments":true,"path":"article/leetcode4-寻找两个有序数组的中位数/","link":"","permalink":"https://www.codetool.top/article/leetcode4-%E5%AF%BB%E6%89%BE%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/","excerpt":"","text":"这道题我没想出符合条件的思路 1 原题给定两个大小为 m 和 n 的有序数组 nums1 和 nums2。 请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m + n))。 你可以假设 nums1 和 nums2 不会同时为空。 示例1： nums1 = [1, 3]nums2 = [2] 则中位数是 2.0 示例2： nums1 = [1, 2]nums2 = [3, 4] 则中位数是 (2 + 3)/2 = 2.5 2 解法2.1 思想二分查找合并后的数组中第k/2个数，排除法,参考 https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-w-2/ 2.2 代码class Solution { public double findMedianSortedArrays(int[] nums1, int[] nums2) { int n = nums1.length; int m = nums2.length; int left = (n + m + 1) / 2; int right = (n + m + 2) / 2; //将偶数和奇数的情况合并，如果是奇数，会求两次同样的 k 。 return (getKth(nums1, 0, n - 1, nums2, 0, m - 1, left) + getKth(nums1, 0, n - 1, nums2, 0, m - 1, right)) * 0.5; } private int getKth(int[] nums1, int start1, int end1, int[] nums2, int start2, int end2, int k) { int len1 = end1 - start1 + 1; int len2 = end2 - start2 + 1; //让 len1 的长度小于 len2，这样就能保证如果有数组空了，一定是 len1 if (len1 > len2) return getKth(nums2, start2, end2, nums1, start1, end1, k); if (len1 == 0) return nums2[start2 + k - 1]; if (k == 1) return Math.min(nums1[start1], nums2[start2]); int i = start1 + Math.min(len1, k / 2) - 1; int j = start2 + Math.min(len2, k / 2) - 1; if (nums1[i] > nums2[j]) { return getKth(nums1, start1, end1, nums2, j + 1, end2, k - (j - start2 + 1)); } else { return getKth(nums1, i + 1, end1, nums2, start2, end2, k - (i - start1 + 1)); } } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"深入理解java虚拟机第三版读书笔记04","slug":"深入理解java虚拟机第三版读书笔记04","date":"2020-01-08T14:45:04.000Z","updated":"2020-02-13T12:20:45.376Z","comments":true,"path":"article/深入理解java虚拟机第三版读书笔记04/","link":"","permalink":"https://www.codetool.top/article/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89%E7%89%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B004/","excerpt":"","text":"以下是第三章 垃圾收集器与内存分配策略的内容 1 概述程序计数器、虚拟机栈、本地方法栈是线程独有的，栈帧更是随方法结束而消亡，不需要垃圾回收。而堆和方法区则需要经过垃圾回收的设计 2 对象已死？2.1 引用计数算法在对象中添加一个引用计数器，每当有一个地方引用它时，计数器值就加一；当引用失效时，计数器值就减一；任何时刻计数器为零的对象就是不可能再被使用的。 特点：虽然占用了一些额外的内存空间来进行计数，但它的原理简单，判定效率也很高，在大多数情况下它都是一个不错的算法。但是，在Java 领域，至少主流的Java虚拟机里面都没有选用引用计数算法来管理内存，主要原因是，这个看似简单的算法有很多例外情况要考虑，必须要配合大量额外处理才能保证正确地工作，譬如单纯的引用计数就很难解决对象之间相互循环引用的问题。 2.2 可达性分析算法这个算法的基本思路就是通过一系列称为 “GC Roots” 的根对象作为起始节点集，从这些节点开始，根据引用关系向下搜索，搜索过程所走过的路径称为“引用链”，如果某个对象到GC Roots间没有任何引用链相连，或者用图论的话来说就是从GC Roots到这个对象不可达时，则证明此对象是不可能再被使用的。 如图所示，对象object 5、object 6、object 7虽然互有关联，但是它们到GC Roots是不可达的，因此它们将会被判定为可回收的对象。 固定可作为GC Roots的对象包括以下几种： 在虚拟机栈（栈帧中的本地变量表）中引用的对象，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。 在方法区中类静态属性引用的对象，譬如Java类的引用类型静态变量。 在方法区中常量引用的对象，譬如字符串常量池（String Table）里的引用。 ·在本地方法栈中JNI（即通常所说的Native方法）引用的对象。 Java虚拟机内部的引用，如基本数据类型对应的Class对象，一些常驻的异常对象（比如NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。 所有被同步锁（synchronized关键字）持有的对象。 反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存等。 2.3 再谈引用需求：有一类对象，当内存空间还足够时，能保留在内存之中，如果内存空间在进行垃圾收集后仍然非常紧张，那就可以抛弃这些对象——很多系统的缓存功能都符合这样的应用场景。 在JDK 1.2版之后，Java对引用的概念进行了扩充，将引用分为强引用、软引用、弱引用和虚引用4种，这4种引用强度依次逐渐减弱。 强引用：传统的引用关系，无论任何情况下，只要强引用关系还存在，垃圾收集器就永远不会回收掉被引用的对象。 软引用：还有用，但非必须的对象。在系统将要发生内存溢出异常前，会把这些对象列进回收范围之中进行第二次回收，在JDK 1.2版之后提供了SoftReference类来实现软引用。 弱引用：非必须对象，但是它的强度比软引用更弱一些。当垃圾收集器开始工作，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在JDK 1.2版之后提供了WeakReference类来实现弱引用 虚引用：一个对象是否有虚引用的存在，完全不会对其生存时间构成影响，也无法通过虚引用来取得一个对象实例。为一个对象设置虚引用关联的唯一目的只是为了能在这个对象被收集器回收时收到一个系统通知。在JDK 1.2版之后提供了PhantomReference类来实现虚引用。 2.4 生存还是死亡？即使在可达性分析算法中判定为不可达的对象，也不是“非死不可”的，这时候它们暂时还处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经历两次标记过程：如果对象在进行可达性分析后发现没有与GC Roots相连接的引用链，那它将会被第一次标记，随后进行一次筛选，筛选的条件是此对象是否有必要执行finalize()方法。假如对象没有覆盖finalize()方法，或者finalize()方法已经被虚拟机调用过，那么虚拟机将这两种情况都视为“没有必要执行”。 如果这个对象被判定为确有必要执行finalize()方法，那么该对象将会被放置在一个名为F-Queue的队列之中，并在稍后由一条由虚拟机自动建立的、低调度优先级的Finalizer线程去执行它们的finalize()方法。 网上有称这种重写了finalize方法的对象为终结器引用。 finalize()是解救一个对象的最后机会 2.5 回收方法区虚拟机规范不强制要求实现方法区的垃圾回收，方法区的垃圾回收性价比较低。方法区的垃圾收集主要回收两部分内容：废弃的常量和不再使用的类型。 要判定一个类型是否属于“不再被使用的类”需要同时满足下面三个条件： 该类所有的实例都已经被回收，也就是Java堆中不存在该类及其任何派生子类的实例。 加载该类的类加载器已经被回收，这个条件除非是经过精心设计的可替换类加载器的场景，如OSGi、JSP的重加载等，否则通常是很难达成的。 该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法。 然而满足了上面三个条件也不一定要回收，-Xnoclassgc参数可以指定是否要进行类型回收。 -verbose:class、-XX:+TraceClassLoading可以输出类加载信息。-XX:+TraceClassUnLoading可以输出类卸载信息。 3 垃圾收集算法从如何判定对象消亡的角度出发，垃圾收集算法可以划分为“引用计数式垃圾收集”和“追踪式垃圾收集”两大类，这里介绍的都是“追踪式垃圾收集”。 3.1 分代收集理论分代收集理论实际是实质是一套符合大多数程序运行实际情况的经验法则，它建立在两个分代假说上： 弱分代假说：绝大多数对象都是朝生夕灭的。 强分代假说：熬过越多次垃圾收集过程的对象就越难以消亡。 多款常用垃圾收集器的一致的设计原则：收集器应该将Java堆划分出不同的区域，然后将回收对象依据其年龄（年龄即对象熬过垃圾收集过程的次数）分配到不同的区域之中存储。 在Java堆划分出不同的区域之后，垃圾收集器才可以每次只回收其中某一个或者某些部分的区域——因而才有了 “Minor GC” “Major GC” “Full GC” 这样的回收类型的划分；也才能够针对不同的区域安排与里面存储对象存亡特征相匹配的垃圾收集算法——因而发展出了“标记-复制算法”“标记-清除算法”“标记-整理算法”等针对性的垃圾收集算法。 现在的商用Java虚拟机一般至少会把Java堆划分为新生代（Young Generation）和老年代（Old Generation）两个区域。顾名思义，在新生代中，每次垃圾收集时都发现有大批对象死去，而每次回收后存活的少量对象，将会逐步晋升到老年代中存放。 一个明显的困难：对象不是孤立的，对象之间会存在跨代引用。 为了解决这个问题，就需要对分代收集理论添加第三条经验法则：跨代引用假说：跨代引用相对于同代引用来说仅占极少数。（存在互相引用关系的两个对象，是应该倾向于同时生存或者同时消亡的。） 解决方案：在新生代上建立一个全局的数据结构（该结构被称为 “记忆集”），这个结构把老年代划分成若干小块，标识出老年代的哪一块内存会存在跨代引用。此后当发生Minor GC时，只有包含了跨代引用的小块内存里的对象才会被加入到GC Roots进行扫描。 名词解释： 部分收集（Partial GC）：指目标不是完整收集整个Java堆的垃圾收集，其中又分为： 新生代收集（Minor GC/Young GC）：指目标只是新生代的垃圾收集。 老年代收集（Major GC/Old GC）：指目标只是老年代的垃圾收集。目前只有CMS收集器会有单独收集老年代的行为。“Major GC”这个说法现在有点混淆,可能是指老年代的收集或是整堆收集。 混合收集（Mixed GC）：指目标是收集整个新生代以及部分老年代的垃圾收集。目前只有G1收集器会有这种行为。 整堆收集（Full GC）：收集整个Java堆和方法区的垃圾收集。 相关VM参数： 含义 参数 堆初始大小 -Xms 堆最大大小 -Xmx或-XX:MaxHeapSize=size 新生代大小 -Xmn或（-XX:NewSize=size + -XX:MaxNewSize=size） 幸存区比例（动态） -XX:InitialSurvivorRatio=ratio和-XX:UseAdaptiveSizePolicy 幸存区比例 -XX:SurvivorRatio=ratio 晋升阈值 -XX:MaxTenuringThreshold=threshold 晋升详情 -XX:+PrintTenuringDistribution GC详情 -XX:+PrintGCDetails -verbose:gc FullGC前先MinorGC -XX:+ScavengeBeforeFullGC 3.2 标记-清除算法分为“标记”和“清除”两个阶段：首先标记出所有需要回收的对象，在标记完成后，统一回收掉所有被标记的对象。 主要缺点： 执行效率不稳定，如果Java堆中包含大量对象，而且其中大部分是需要被回收的，这时必须进行大量标记和清除的动作，导致标记和清除两个过程的执行效率都随对象数量增长而降低 内存空间的碎片化问题，标记、清除之后会产生大量不连续的内存碎片，空间碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作 3.3 标记-复制算法将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。 适用于多数对象是可回收的，缺点是可用内存缩小为了原来的一半，空间浪费太多。 现在的商用Java虚拟机大多都优先采用了这种收集算法去回收新生代。 一种更优化的半区复制分代策略:“Appel式回收”，HotSpot虚拟机的Serial、ParNew等新生代收集器均采用了这种策略来设计新生代的内存布局： 把新生代分为一块较大的Eden空间和两块较小的Survivor空间，每次分配内存只使用Eden和其中一块Survivor。发生垃圾搜集时，将Eden和Survivor中仍然存活的对象一次性复制到另外一块Survivor空间上，然后直接清理掉Eden和已用过的那块Survivor空间。HotSpot虚拟机默认Eden和Survivor的大小比例是8∶1，也即每次新生代中可用内存空间为整个新生代容量的90%（Eden的80%加上一个Survivor的10%），只有一个Survivor空间，即10%的新生代是会被“浪费”的。还有一个充当罕见情况的“逃生门”的安全设计，当Survivor空间不足以容纳一次Minor GC之后存活的对象时，就需要依赖其他内存区域（实际上大多就是老年代）进行分配担保。 3.4 标记-整理算法针对老年代的存亡特征设计的，其中的标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向内存空间一端移动，然后直接清理掉边界以外的内存。 如果移动存活对象，尤其是在老年代这种每次回收都有大量对象存活区域，移动存活对象并更新所有引用这些对象的地方将会是一种极为负重的操作，而且这种对象移动操作必须全程暂停用户应用程序才能进行（最新的ZGC和Shenandoah收集器使用读屏障技术实现了整理过程与用户线程的并发执行）；但如果跟标记-清除算法那样完全不考虑移动和整理存活对象的话，弥散于堆中的存活对象导致的空间碎片化问题就只能依赖更为复杂的内存分配器和内存访问器来解决。 移动则内存回收时会更复杂，不移动则内存分配时会更复杂。HotSpot虚拟机里面关注吞吐量的Parallel Scavenge收集器是基于标记-整理算法的，而关注延迟的CMS收集器则是基于标记-清除算法的。 还有一种解决方案是让虚拟机平时多数时间都采用标记-清除算法，暂时容忍内存碎片的存在，直到内存空间的碎片化程度已经大到影响对象分配时，再采用标记-整理算法收集一次，以获得规整的内存空间。基于标记-清除算法的CMS收集器面临空间碎片过多时采用的就是这种处理办法。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"深入理解java虚拟机","slug":"深入理解java虚拟机","permalink":"https://www.codetool.top/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"leetcode287-寻找重复数","slug":"leetcode287-寻找重复数","date":"2020-01-07T05:07:59.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/leetcode287-寻找重复数/","link":"","permalink":"https://www.codetool.top/article/leetcode287-%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E6%95%B0/","excerpt":"","text":"1 原题给定一个包含 n + 1 个整数的数组 nums ，其数字都在 1 到 n 之间（包括 1 和 n），可知至少存在一个重复的整数。假设只有一个重复的整数，找出这个重复的数。 示例1： 输入: [1,3,4,2,2]输出: 2 示例2： 输入: [3,1,3,4,2]输出: 3 说明： 不能更改原数组（假设数组是只读的）。 只能使用额外的 O(1) 的空间。 时间复杂度小于 O(n2) 。 数组中只有一个重复的数字，但它可能不止重复出现一次。 2 解法2.1 思想有排序和哈希集的方法，但要满足4点限制，可以使用二分查找或快慢指针： 二分查找，参考 https://leetcode-cn.com/problems/find-the-duplicate-number/solution/er-fen-fa-si-lu-ji-dai-ma-python-by-liweiwei1419/ 快慢指针，将index看成有向图里的节点，将对应的value看成节点指向的节点。那么有重复元素必然会形成环。如图： 那么入环的节点值就是重复出现的元素，可以使用leetcode142-环形链表II的双指针法来找出入环的元素。 2.2 代码哈希集： class Solution { public int findDuplicate(int[] nums) { HashSet&lt;Integer> set = new HashSet&lt;>(); for(int i:nums){ if(set.contains(i)) return i; set.add(i); } return -1; } } 二分查找： public class Solution { public int findDuplicate(int[] nums) { int len = nums.length; int left = 1; int right = len - 1; while (left &lt; right) { // int mid = left + (right - left) / 2; int mid = (left + right) >>> 1; int counter = 0; for (int num : nums) { if (num &lt;= mid) { counter += 1; } } if (counter > mid) { right = mid; } else { left = mid + 1; } } return left; } } 快慢指针： class Solution { public int findDuplicate(int[] nums) { int slow = nums[0]; int fast = nums[0]; do{ slow = nums[slow]; //相当于走一步 fast = nums[nums[fast]]; //相当于走两步 } while (slow!=fast); slow = nums[0]; while (slow != fast){ slow = nums[slow]; fast = nums[fast]; } return slow; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode154-寻找旋转排序数组中的最小值II","slug":"leetcode154-寻找旋转排序数组中的最小值II","date":"2020-01-07T04:29:31.000Z","updated":"2020-01-07T04:46:01.956Z","comments":true,"path":"article/leetcode154-寻找旋转排序数组中的最小值II/","link":"","permalink":"https://www.codetool.top/article/leetcode154-%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BCII/","excerpt":"","text":"1 原题假设按照升序排序的数组在预先未知的某个点上进行了旋转。 ( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。 请找出其中最小的元素。 注意数组中可能存在重复的元素。 示例1： 输入： [1,3,5]输出： 1 示例2： 输入： [2,2,2,0,1]输出： 0 说明： 这道题是 寻找旋转排序数组中的最小值 的延伸题目。 允许重复会影响算法的时间复杂度吗？会如何影响，为什么？ 2 解法2.1 思想 线性查找 二分查找,参考 https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/solution/154-find-minimum-in-rotated-sorted-array-ii-by-jyd/ 2.2 代码 线性查找 class Solution { public int findMin(int[] nums) { int min = nums[0]; for(int i:nums){ if(i&lt;min){ min=i; break; } } return min; } } 二分查找 class Solution { public int findMin(int[] nums) { int left = 0, right = nums.length - 1; while (left &lt; right) { int mid = (left + right) / 2; if (nums[mid] > nums[right]) left = mid + 1; else if (nums[mid] &lt; nums[right]) right = mid; else right = right - 1; } return nums[left]; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"深入理解java虚拟机第三版读书笔记03","slug":"深入理解java虚拟机第三版读书笔记03","date":"2020-01-06T08:36:25.000Z","updated":"2020-01-20T17:43:56.175Z","comments":true,"path":"article/深入理解java虚拟机第三版读书笔记03/","link":"","permalink":"https://www.codetool.top/article/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89%E7%89%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B003/","excerpt":"","text":"续深入理解java虚拟机第三版读书笔记02 1 HotSpot虚拟机对象探秘1.1 对象的创建 当Java虚拟机遇到一条字节码new指令时，首先将去检查这个指令的参数是否能在常量池中定位到一个类的符号引用，并且检查这个符号引用代表的类是否已被加载、解析和初始化过。如果没有，那必须先执行相应的类加载过程 类加载检查通过后，为新生对象分配内存。有两种方法： 假设Java堆中内存是绝对规整的，所有被使用过的内存都被放在一边，空闲的内存被放在另一边，中间放着一个指针作为分界点的指示器，那所分配内存就仅仅是把那个指针向空闲空间方向挪动一段与对象大小相等的距离，这种分配方式称为 “指针碰撞” 如果Java堆中的内存并不是规整的，已被使用的内存和空闲的内存相互交错在一起，那就没有办法简单地进行指针碰撞了，虚拟机就必须维护一个列表，记录上哪些内存块是可用的，在分配的时候从列表中找到一块足够大的空间划分给对象实例，并更新列表上的记录，这种分配方式称为“空闲列表” 同步问题：仅仅修改一个指针所指向的位置，在并发情况下也并不是线程安全的，可能出现正在给对象A分配内存，指针还没来得及修改，对象B又同时使用了原来的指针来分配内存的情况。解决方法： 对分配内存空间的动作进行同步处理（实际上虚拟机是采用CAS配上失败重试的方式保证更新操作的原子性） 把内存分配的动作按照线程划分在不同的空间之中进行，即每个线程在Java堆中预先分配一小块内存，称为本地线程分配缓冲（TLAB），是否启用TLAB可以通过-XX：+/-UseTLAB参数来设定。 将分配到的内存空间（但不包括对象头）都初始化为零值 对对象进行必要的设置，例如这个对象是哪个类的实例、如何才能找到类的元数据信息、对象的哈希码（实际上对象的哈希码会延后到真正调用Object::hashCode()方法时才计算）、对象的GC分代年龄等信息。 执行 ()方法（构造函数） 1.2 对象的内存布局在HotSpot虚拟机里，对象在堆内存中的存储布局可以划分为三个部分：对象头（Header）、实例数据（Instance Data）和对齐填充（Padding）。 1.2.1 对象头Markword:存储对象自身的运行时数据，如哈希码（HashCode）、GC分代年龄、锁状态标志、线程持有的锁、偏向线程ID、偏向时间戳等，这部分数据的长度在32位和64位的虚拟机（未开启压缩指针）中分别为32个比特和64个比特。 类型指针，即对象指向它的类型元数据的指针，Java虚拟机通过这个指针来确定该对象是哪个类的实例。并不是所有的虚拟机实现都必须在对象数据上保留类型指针，这部分数据的长度在32位和64位的虚拟机（未开启压缩指针）中分别为32个比特和64个比特，如果开启指针压缩，可以在64位机上也变成32比特。 开启指针压缩：-XX:+UseCompressedOops 数组长度： 如果对象是一个Java数组，那在对象头中还必须有一块用于记录数组长度的数据，这部分数据的长度是32比特。 1.2.2 实例数据对象真正存储的有效信息，即我们在程序代码里面所定义的各种类型的字段内容，无论是从父类继承下来的，还是在子类中定义的字段都必须记录起来。 这部分的存储顺序会受到虚拟机分配策略参数（-XX：FieldsAllocationStyle参数）和字段在Java源码中定义顺序的影响。 1.2.3 对齐填充由于HotSpot虚拟机的自动内存管理系统要求对象起始地址必须是8字节的整数倍，因此如果对象实例数据部分没有对齐的话，就需要通过对齐填充来补全。 1.3 对象的访问定位Java程序会通过栈上的reference数据来操作堆上的具体对象。对象访问方式是由虚拟机实现而定的，主流的访问方式主要有使用句柄和直接指针两种： 句柄访问：可能会划分出一块内存来作为句柄池，reference中存储的就是对象的句柄地址，而句柄中包含了对象实例数据与类型数据各自具体的地址信息，其结构如图所示： 好处：好处就是reference中存储的是稳定句柄地址，在对象被移动（垃圾收集时移动对象是非常普遍的行为）时只会改变句柄中的实例数据指针，而reference本身不需要被修改。 直接指针访问:Java堆中对象的内存布局就必须考虑如何放置访问类型数据的相关信息，reference中存储的直接就是对象地址，如果只是访问对象本身的话，就不需要多一次间接访问的开销，如图所示: 好处：速度更快，它节省了一次指针定位的时间开销，由于对象访问在Java中非常频繁，因此这类开销积少成多也是一项极为可观的执行成本，HotSpot是使用的这种方式。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"深入理解java虚拟机","slug":"深入理解java虚拟机","permalink":"https://www.codetool.top/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"深入理解java虚拟机第三版读书笔记02","slug":"深入理解java虚拟机第三版读书笔记02","date":"2020-01-05T12:08:33.000Z","updated":"2020-01-31T06:18:07.369Z","comments":true,"path":"article/深入理解java虚拟机第三版读书笔记02/","link":"","permalink":"https://www.codetool.top/article/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89%E7%89%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B002/","excerpt":"","text":"以下是第二章 Java内存区域与内存溢出异常的内容 1 运行时数据区域 1.1 程序计数器1.1.1 特点 程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。 程序计数器是线程私有的，线程轮换之后通过程序计数器确定要执行的指令位置。 不存在内存溢出。 1.2 Java虚拟机栈1.2.1 特点 Java虚拟机栈也是线程私有的,它的生命周期与线程相同。 虚拟机栈描述的是Java方法执行的线程内存模型：每个方法被执行的时候，Java虚拟机都会同步创建一个栈帧用于存储局部变量表、操作数栈、动态连接、方法出口等信息。栈帧的入栈出栈对应一个方法的调用。 局部变量表存放了编译期可知的各种Java虚拟机基本数据类型、对象引用和返回地址。 局部变量表中的存储空间以 局部变量槽（Slot） 来表示，其中64位长度的long和double类型的数据会占用两个变量槽，其余的数据类型只占用一个。局部变量表所需的内存空间在编译期间完成分配。 1.2.2 异常 如果线程请求的栈深度大于虚拟机所允许的深度，将抛出StackOverflowError异常，可能会有这两种情况： 栈帧过多 栈帧过大 如果Java虚拟机栈容量可以动态扩展，当栈扩展时无法申请到足够的内存会抛出OutOfMemoryError异常。（HotSpot虚拟机的栈容量是不可以动态扩展的，也不会导致这种异常） 代码演示：通过-Xss参数来设定栈的大小 （无限递归导致栈帧过多） /** * VM Args：-Xss128k * @author zzm */ public class JavaVMStackSOF { private int stackLength = 1; public void stackLeak() { stackLength++; stackLeak(); } public static void main(String[] args) throws Throwable { JavaVMStackSOF oom = new JavaVMStackSOF(); try { oom.stackLeak(); } catch (Throwable e) { System.out.println(\"stack length:\" + oom.stackLength); throw e; } } } （栈帧太大） /** * @author zzm */ public class JavaVMStackSOF { private static int stackLength = 0; public static void test() { long unused1, unused2, unused3, unused4, unused5, unused6, unused7, unused8, unused9, unused10, unused11, unused12, unused13, unused14, unused15, unused16, unused17, unused18, unused19, unused20, unused21, unused22, unused23, unused24, unused25, unused26, unused27, unused28, unused29, unused30, unused31, unused32, unused33, unused34, unused35, unused36, unused37, unused38, unused39, unused40, unused41, unused42, unused43, unused44, unused45, unused46, unused47, unused48, unused49, unused50, unused51, unused52, unused53, unused54, unused55, unused56, unused57, unused58, unused59, unused60, unused61, unused62, unused63, unused64, unused65, unused66, unused67, unused68, unused69, unused70, unused71, unused72, unused73, unused74, unused75, unused76, unused77, unused78, unused79, unused80, unused81, unused82, unused83, unused84, unused85, unused86, unused87, unused88, unused89, unused90, unused91, unused92, unused93, unused94, unused95, unused96, unused97, unused98, unused99, unused100; stackLength ++; test(); unused1 = unused2 = unused3 = unused4 = unused5 = unused6 = unused7 = unused8 = unused9 = unused10 = unused11 = unused12 = unused13 = unused14 = unused15 = unused16 = unused17 = unused18 = unused19 = unused20 = unused21 = unused22 = unused23 = unused24 = unused25 = unused26 = unused27 = unused28 = unused29 = unused30 = unused31 = unused32 = unused33 = unused34 = unused35 = unused36 = unused37 = unused38 = unused39 = unused40 = unused41 = unused42 = unused43 = unused44 = unused45 = unused46 = unused47 = unused48 = unused49 = unused50 = unused51 = unused52 = unused53 = unused54 = unused55 = unused56 = unused57 = unused58 = unused59 = unused60 = unused61 = unused62 = unused63 = unused64 = unused65 = unused66 = unused67 = unused68 = unused69 = unused70 = unused71 = unused72 = unused73 = unused74 = unused75 = unused76 = unused77 = unused78 = unused79 = unused80 = unused81 = unused82 = unused83 = unused84 = unused85 = unused86 = unused87 = unused88 = unused89 = unused90 = unused91 = unused92 = unused93 = unused94 = unused95 = unused96 = unused97 = unused98 = unused99 = unused100 = 0; } public static void main(String[] args) { try { test(); }catch (Error e){ System.out.println(\"stack length:\" + stackLength); throw e; } } } 1.3 本地方法栈是java虚拟机栈的native方法版。HotSpot虚拟机中并不区分虚拟机栈和本地方法栈 1.4 Java堆1.4.1 特点 是各个线程共享的。 所有的对象实例以及数组都应当在堆上分配，日后可能出现值类型的支持。 Java堆中可以划分出多个线程私有的分配缓冲区，以提升对象分配时的效率。 Java堆既可以被实现成固定大小的，也可以是可扩展的，不过当前主流的Java虚拟机都是按照可扩展来实现的（通过参数-Xmx和-Xms设定）。 1.4.2 异常如果在Java堆中没有内存完成实例分配，并且堆也无法再扩展时，Java虚拟机将会抛出OutOfMemoryError异常。 代码演示：(将堆的最小值-Xms参数与最大值-Xmx参数设置为一样即可避免堆自动扩展，通过参数-XX：+HeapDumpOnOutOf-MemoryError可以让虚拟机在出现内存溢出异常的时候Dump出当前的内存堆转储快照以便进行事后分析) /**· * VM Args：-Xms20m -Xmx20m -XX:+HeapDumpOnOutOfMemoryError * @author zzm */ public class HeapOOM { static class OOMObject { } public static void main(String[] args) { List&lt;OOMObject> list = new ArrayList&lt;OOMObject>(); while (true) { list.add(new OOMObject()); } } } 1.5 方法区1.5.1 特点 是各个进程共享的。 它用于存储已被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等数据。 JAVA8以前HotSpot使用永久代实现方法区，把堆的垃圾回收机制延申至方法区，JAVA8开始使用位于本地内存中的元空间实现方法区。 JAVA虚拟机规范不要求实现垃圾回收。 -XX：MaxMetaspaceSize：设置元空间最大值，默认是-1，即不限制，或者说只受限于本地内存大小。 -XX：MetaspaceSize：指定元空间的初始空间大小，以字节为单位，达到该值就会触发垃圾收集进行类型卸载，同时收集器会对该值进行调整：如果释放了大量的空间，就适当降低该值；如果释放了很少的空间，那么在不超过-XX：MaxMetaspaceSize（如果设置了的话）的情况下，适当提高该值。 -XX：MinMetaspaceFreeRatio：作用是在垃圾收集之后控制最小的元空间剩余容量的百分比，可减少因为元空间不足导致的垃圾收集的频率。类似的还有-XX：Max-MetaspaceFreeRatio，用于控制最大的元空间剩余容量的百分比。 1.5.2 异常如果方法区无法满足新的内存分配需求时，将抛出OutOfMemoryError异常。(由于JAVA8后方法区位于本地内存中，很少出现这种情况，一般是涉及到动态加载过多类) 1.6 运行时常量池 运行时常量池是方法区的一部分。 类的字节码中有一项信息是常量池表，用于存放编译期生成的类名、方法名、参数类型与字面量，这部分内容将在类加载后存放到方法区的运行时常量池中。 Java语言并不要求常量一定只有编译期才能产生，String类的intern方法可以将字符串常量放进字符串常量池表。 1.6.1 异常常量池无法再申请到内存时会抛出OutOfMemoryError异常。 1.6.2 intern方法有意思的点public class RuntimeConstantPoolOOM { public static void main(String[] args) { String str1 = new StringBuilder(\"计算机\").append(\"软件\").toString(); System.out.println(str1.intern() == str1); String str2 = new StringBuilder(\"ja\").append(\"va\").toString(); System.out.println(str2.intern() == str2); } } 这段代码在JDK 6中运行，会得到两个false，而在JDK 7中运行，会得到一个true和一个false。产生差异的原因是，在JDK 6中，intern()方法会把首次遇到的字符串实例复制到永久代的字符串常量池中存储，返回的也是永久代里面这个字符串实例的引用，而由StringBuilder创建的字符串对象实例在 Java堆上，所以必然不可能是同一个引用，结果将返回false。 而JDK 7（以及部分其他虚拟机，例如JRockit）的intern()方法实现就不需要再拷贝字符串的实例到永久代了，既然字符串常量池已经移到Java堆中，那只需要在常量池里记录一下首次出现的实例引用即可，因此intern()返回的引用和由StringBuilder创建的那个字符串实例就是同一个。而对str2比较返回false，这是因为“java”这个字符串在执行String-Builder.toString()之前就已经出现过了（sun.misc.Version类中加载），字符串常量池中已经有它的引用，不符合intern()方法要求“首次遇到”的原则，“计算机软件”这个字符串则是首次出现的，因此结果返回true。 1.7 直接内存1.7.1 特点 直接内存就是机器的内存，JDK1.4中的NIO可以使用Native函数库直接分配堆外内存 分配回收成本较高，但读写性能高 不受JVM内存回收管理 -XX：MaxDirectMemorySize指定可使用的直接内存大小，如果不去指定，则默认与Java堆最大值（由-Xmx指定）一致 1.7.2 分配与回收 使用了Unsafe对象完成直接内存的分配回收,并且回收需要主动调用freeMemory方法 ByteBuffer的实现类内部,使用了Cleaner(虚引用)来监测ByteBuffer对象,一旦ByteBuffer对象被垃圾回收,那么就会由ReferenceHandler线程通过Cleaner的clean方法调用freeMemory来释放直接内存","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"深入理解java虚拟机","slug":"深入理解java虚拟机","permalink":"https://www.codetool.top/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"leetcode744-寻找比目标字母大的最小字母","slug":"leetcode744-寻找比目标字母大的最小字母","date":"2020-01-05T09:31:46.000Z","updated":"2020-01-05T09:40:41.163Z","comments":true,"path":"article/leetcode744-寻找比目标字母大的最小字母/","link":"","permalink":"https://www.codetool.top/article/leetcode744-%E5%AF%BB%E6%89%BE%E6%AF%94%E7%9B%AE%E6%A0%87%E5%AD%97%E6%AF%8D%E5%A4%A7%E7%9A%84%E6%9C%80%E5%B0%8F%E5%AD%97%E6%AF%8D/","excerpt":"","text":"1 原题给定一个只包含小写字母的有序数组letters 和一个目标字母 target，寻找有序数组里面比目标字母大的最小字母。 数组里字母的顺序是循环的。举个例子，如果目标字母target = &#39;z&#39; 并且有序数组为 letters = [&#39;a&#39;, &#39;b&#39;]，则答案返回 &#39;a&#39;。 示例： 输入:letters = [“c”, “f”, “j”]target = “a”输出: “c”输入:letters = [“c”, “f”, “j”]target = “c”输出: “f”输入:letters = [“c”, “f”, “j”]target = “d”输出: “f”输入:letters = [“c”, “f”, “j”]target = “g”输出: “j”输入:letters = [“c”, “f”, “j”]target = “j”输出: “c”输入:letters = [“c”, “f”, “j”]target = “k”输出: “c” 注: letters长度范围在[2, 10000]区间内。 letters 仅由小写字母组成，最少包含两个不同的字母。 目标字母target 是一个小写字母。 2 解法2.1 思想二分查找。 2.2 代码class Solution { public char nextGreatestLetter(char[] letters, char target) { int start = 0; int end = letters.length-1; while(start&lt;end){ int mid = start + (end-start)/2; if(letters[mid]&lt;=target) start = mid+1; else end = mid; } if(letters[start] &lt;= target) return letters[0]; return letters[start]; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"leetcode367-有效的完全平方数","slug":"leetcode367-有效的完全平方数","date":"2020-01-05T08:52:03.000Z","updated":"2020-01-05T08:55:48.398Z","comments":true,"path":"article/leetcode367-有效的完全平方数/","link":"","permalink":"https://www.codetool.top/article/leetcode367-%E6%9C%89%E6%95%88%E7%9A%84%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/","excerpt":"","text":"1 原题给定一个正整数 num*，编写一个函数，如果 *num 是一个完全平方数，则返回 True，否则返回 False。 说明： 不要使用任何内置的库函数，如 sqrt。 示例1： 输入: 16输出: True 示例2： 输入: 14输出: False 2 解法2.1 思想二分查找。由于平方后可能会超出int范围要注意long的使用。 2.2 代码class Solution { public boolean isPerfectSquare(int num) { if(num == 1) return true; long start = 1; long end = num/2; while(start&lt;=end){ long mid = start + (end-start)/2; if(mid*mid == num) return true; if(mid*mid > num) end = mid-1; else if(mid*mid &lt;num) start = mid + 1; } return false; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"leetcode50-Pow(x,n)","slug":"leetcode50-Pow-x-n","date":"2020-01-05T08:10:49.000Z","updated":"2020-01-05T08:17:50.635Z","comments":true,"path":"article/leetcode50-Pow-x-n/","link":"","permalink":"https://www.codetool.top/article/leetcode50-Pow-x-n/","excerpt":"","text":"1 原题实现 pow(x, n) ，即计算 x 的 n 次幂函数。 示例1： 输入： 2.00000, 10输出： 1024.00000 示例2： 输入： 2.10000, 3输出： 9.26100 示例3： 输入： 2.00000, -2输出： 0.25000解释： 2-2 = 1/22 = 1/4 = 0.25 2 解法2.1 思想这道题使用暴力解法会超出时间限制。 自底向上，快速幂。由xn = (xn/2)2得到。 2.2 代码class Solution { public double myPow(double x, int n) { if (n == 0) return 1; if (n == 1) return x; if (n == -1) return 1 / x; double half = myPow(x, n / 2); double rest = myPow(x, n % 2); return half * half * rest; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"深入理解java虚拟机第三版读书笔记01","slug":"深入理解java虚拟机第三版读书笔记01","date":"2020-01-04T12:54:41.000Z","updated":"2020-01-06T06:43:46.278Z","comments":true,"path":"article/深入理解java虚拟机第三版读书笔记01/","link":"","permalink":"https://www.codetool.top/article/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%89%E7%89%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B001/","excerpt":"","text":"1 做笔记之前的感言谈到《深入理解java虚拟机》，在业内可太有名了，是国内的一位大神写的一本关于java虚拟机的畅销书，基本上对java稍有深入的程序员都听说过这本书。不过遗憾的是，这本书第二版的创作背景是java7，而在过了这么多年java的更新之后，jvm内部也发生了许多变化，最近听闻这本书的第三版出来了，赶紧买了一本来看。 以下是第一章 走进Java的内容 2 java技术体系从广义上讲，Kotlin、Clojure、JRuby、Groovy等运行于Java虚拟机上的编程语言及其相关的程序都属于Java技术体系中的一员。如果仅从传统意义上来看，JCP官方所定义的Java技术体系包括了以下几个组成部分： Java程序设计语言 各种硬件平台上的Java虚拟机实现 Class文件格式 Java类库API 来自商业机构和开源社区的第三方Java类库 JavaEE中对JavaSE中的针对性补充一般以javax.*作为包名。 3 java发展史 1995年5月23日，Oak语言改名为Java，并且在SunWorld大会上正式发布Java 1.0版本。Java语言第一次提出了“Write Once，Run Anywhere”的口号。 JDK 1.0版本的代表技术包括：Java虚拟机、Applet、AWT等。 JDK 1.1版的技术代表有：JAR文件格式、JDBC、JavaBeans、RMI等。Java语言的语法也有了一定的增强，如内部类（Inner Class）和反射（Reflection）都是在这时候出现的。 JDK 1.4同样带来了很多新的技术特性，如正则表达式、异常链、NIO、日志类、XML解析器和XSLT转换器。 JDK 5在Java语法易用性上做出了非常大的改进。如：自动装箱、泛型、动态注解、枚举、可变长参数、遍历循环（foreach循环）等语法特性都是在JDK 5中加入的。在虚拟机和API层面上，这个版本改进了Java的内存模型（Java Memory Model，JMM）、提供了java.util.concurrent并发包等。 JDK 6的改进包括：提供初步的动态语言支持（通过内置Mozilla JavaScriptRhino引擎实现）、提供编译期注解处理器和微型HTTP服务器API，等等。同时，这个版本对Java虚拟机内部做了大量改进，包括锁与同步、垃圾收集、类加载等方面的实现都有相当多的改动。 JDK 7包含的改进有：提供新的G1收集器、加强对非Java语言的调用支持（JSR-292，这项特性在到JDK 11还有改动）、可并行的类加载架构等。 JDK 8提供了那些曾在JDK 7中规划过，但最终未能在JDK 7中完成的功能，主要包括：对Lambda表达式的支持，这让Java语言拥有了流畅的函数式表达能力、内置Nashorn JavaScript引擎的支持、新的时间、日期API、彻底移除HotSpot的永久代。 除了Jigsaw外，JDK 9还增强了若干工具（JS Shell、JLink、JHSDB等），整顿了HotSpot各个模块各自为战的日志系统，支持HTTP 2客户单API等91个JEP。 JDK 11发布，这是一个LTS版本的JDK，包含17个JEP，其中有ZGC这样的革命性的垃圾收集器出现。 JDK 12发布，只包含8个JEP，其中主要有Switch表达式、Java微测试套件（JMH）等新功能，最引人注目的特性无疑是加入了由RedHat领导开发的Shen-andoah垃圾收集器。 4 java虚拟机家族虚拟机始祖：Sun Classic/Exact VM 5 java技术的未来5.1 无语言倾向2018年4月，Oracle Labs新公开了一项黑科技：Graal VM Graal VM被官方称为“Universal VM”和“Polyglot VM”，这是一个在HotSpot虚拟机基础上增强而成的跨语言全栈虚拟机，可以作为“任何语言”的运行平台使用，这里“任何语言”包括了Java、Scala、Groovy、Kotlin等基于Java虚拟机之上的语言，还包括了C、C++、Rust等基于LLVM的语言，同时支持其他像JavaScript、Ruby、Python和R语言等。Graal VM可以无额外开销地混合使用这些编程语言，支持不同语言中混用对方的接口和对象，也能够支持这些语言使用已经编写好的本地库文件。 5.2 新一代即时编译器HotSpot虚拟机中含有两个即时编译器，分别是编译耗时短但输出代码优化程度较低的客户端编译器（简称为C1）以及编译耗时长但输出代码优化质量也更高的服务端编译器（简称为C2），通常它们会在分层编译机制下与解释器互相配合来共同构成HotSpot虚拟机的执行子系统 自JDK 10起，HotSpot中又加入了一个全新的即时编译器：Graal编译器，看名字就可以联想到它是来自于前一节提到的Graal VM。Graal编译器是以C2编译器替代者的身份登场的。C2的历史已经非常长了，可以追溯到Cliff Click大神读博士期间的作品，这个由C++写成的编译器尽管目前依然效果拔群，但已经复杂到连Cliff Click本人都不愿意继续维护的程度。而Graal编译器本身就是由Java语言写成，实现时又刻意与C2采用了同一种名为“Sea-of-Nodes”的高级中间表示（High IR）形式，使其能够更容易借鉴C2的优点。Graal编译器比C2编译器晚了足足二十年面世，有着极其充沛的后发优势，在保持输出相近质量的编译代码的同时，开发效率和扩展性上都要显著优于C2编译器，这决定了C2编译器中优秀的代码优化技术可以轻易地移植到Graal编译器上，但是反过来Graal编译器中行之有效的优化在 C2编译器里实现起来则异常艰难。这种情况下，Graal的编译效果短短几年间迅速追平了C2，甚至某些测试项中开始逐渐反超C2编译器。Graal能够做比C2更加复杂的优化，如“部分逃逸分析”（Partial Escape Analysis），也拥有比C2更容易使用激进预测性优化（Aggressive Speculative Optimization）的策略，支持自定义的预测性假设等。 5.3 向Native迈进微服务架构的兴起促进java提前编译技术的发展 Substrate VM是在Graal VM 0.20版本里新出现的一个极小型的运行时环境，包括了独立的异常处理、同步调度、线程管理、内存管理（垃圾收集）和JNI访问等组件，目标是代替HotSpot用来支持提前编译后的程序执行。它还包含了一个本地镜像的构造器（Native Image Generator），用于为用户程序建立基于Substrate VM 的本地运行时镜像。这个构造器采用指针分析（Points-To Analysis）技术，从用户提供的程序入口出发，搜索所有可达的代码。在搜索的同时，它还将执行初始化代码，并在最终生成可执行文件时，将已初始化的堆保存至一个堆快照之中。这样一来，Substrate VM就可以直接从目标程序开始运行，而无须重复进行Java虚拟机的初始化过程。但相应地，原理上也决定了Substrate VM必须要求目标程序是完全封闭的，即不能动态加载其他编译器不可知的代码和类库。基于这个假设，Substrate VM才能探索整个编译空间，并通过静态分析推算出所有虚方法调用的目标方法。 5.4 灵活的胖子经过一系列的重构与开放，HotSpot虚拟机逐渐从时间的侵蚀中挣脱出来，虽然代码复杂度还在增长，体积仍在变大，但其架构并未老朽，而是拥有了越来越多的开放性和扩展性，使得HotSpot成为一个能够联动外部功能，能够应对各种场景，能够学会十八般武艺的身手灵活敏捷的“胖子”。 5.5 语言语法持续增强随着Java每半年更新一次的节奏，新版本的Java中会出现越来越多其他语言里已有的优秀特性，相信博采众长的Java，还能继续保持现在的勃勃生机相当长时间。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jvm","slug":"jvm","permalink":"https://www.codetool.top/tags/jvm/"},{"name":"深入理解java虚拟机","slug":"深入理解java虚拟机","permalink":"https://www.codetool.top/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA/"}]},{"title":"leetcode658-找到K个最接近的元素","slug":"leetcode658-找到K个最接近的元素","date":"2020-01-04T12:08:07.000Z","updated":"2020-01-04T12:44:46.915Z","comments":true,"path":"article/leetcode658-找到K个最接近的元素/","link":"","permalink":"https://www.codetool.top/article/leetcode658-%E6%89%BE%E5%88%B0K%E4%B8%AA%E6%9C%80%E6%8E%A5%E8%BF%91%E7%9A%84%E5%85%83%E7%B4%A0/","excerpt":"","text":"1 原题给定一个排序好的数组，两个整数 k 和 x，从数组中找到最靠近 x（两数之差最小）的 k 个数。返回的结果必须要是按升序排好的。如果有两个数与 x 的差值一样，优先选择数值较小的那个数。 示例1： 输入: [1,2,3,4,5], k=4, x=3输出: [1,2,3,4] 示例2： 输入: [1,2,3,4,5], k=4, x=-1输出: [1,2,3,4] 说明: k 的值为正数，且总是小于给定排序数组的长度。 数组不为空，且长度不超过 104 数组里的每个元素与 x 的绝对值不超过 104 2 解法2.1 思想 按照差值排序 双指针 2.2 代码 排序 public List&lt;Integer> findClosestElements(List&lt;Integer> arr, int k, int x) { Collections.sort(arr, (a,b) -> a == b ? a - b : Math.abs(a-x) - Math.abs(b-x)); arr = arr.subList(0, k); Collections.sort(arr); return arr; } 双指针（作者：liweiwei1419） public class Solution { public List&lt;Integer> findClosestElements(int[] arr, int k, int x) { int size = arr.length; int left = 0; int right = size - 1; int removeNums = size - k; while (removeNums > 0) { if (x - arr[left] &lt;= arr[right] - x) { right--; } else { left++; } removeNums--; } List&lt;Integer> res = new ArrayList&lt;>(); for (int i = left; i &lt; left + k; i++) { res.add(arr[i]); } return res; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"leetcode34--在排序数组中查找元素的第一个和最后一个位置","slug":"leetcode34-在排序数组中查找元素的第一个和最后一个位置","date":"2020-01-03T09:58:04.000Z","updated":"2020-01-03T10:00:44.523Z","comments":true,"path":"article/leetcode34-在排序数组中查找元素的第一个和最后一个位置/","link":"","permalink":"https://www.codetool.top/article/leetcode34-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%92%8C%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E4%BD%8D%E7%BD%AE/","excerpt":"","text":"1 原题给定一个按照升序排列的整数数组 nums，和一个目标值 target。找出给定目标值在数组中的开始位置和结束位置。 你的算法时间复杂度必须是 O(log n) 级别。 如果数组中不存在目标值，返回 [-1, -1]。 示例1： 输入： nums = [5,7,7,8,8,10], target = 8输出： [3,4] 示例2： 输入： nums = [5,7,7,8,8,10], target = 6输出： [-1,-1] 2 解法2.1 思想二分查找，找到一个目标值时向两边继续查找最初和最末出现的地方。 2.2 代码class Solution { public int[] searchRange(int[] nums, int target) { int[] pos = new int[2]; int start = 0; int end = nums.length - 1; if(end == -1) return new int[]{-1,-1}; int mid = start + (end-start)/2; while(nums[mid]!=target &amp;&amp;start&lt;=end){ mid = start + (end-start)/2; if(nums[mid]&lt;target) start = mid + 1; else if(nums[mid] > target) end = mid -1; } if(nums[mid]!=target) return new int[]{-1,-1}; int mid_cache = mid; int end_cache = end; end = mid; while(start&lt;end){ mid = start + (end-start)/2; if(nums[mid] == target) end = mid; else if(nums[mid] &lt; target) start = mid+1; } pos[0] = start; start = mid_cache; end = end_cache; while(start&lt;end){ mid = start + (end-start+1)/2; if(nums[mid] == target) start = mid; else if(nums[mid] > target) end = mid-1; } pos[1] = end; return pos; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"leetcode153-寻找旋转排序数组中的最小值","slug":"leetcode153-寻找旋转排序数组中的最小值","date":"2020-01-03T07:59:23.000Z","updated":"2020-01-07T04:45:58.246Z","comments":true,"path":"article/leetcode153-寻找旋转排序数组中的最小值/","link":"","permalink":"https://www.codetool.top/article/leetcode153-%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/","excerpt":"","text":"1 原题假设按照升序排序的数组在预先未知的某个点上进行了旋转。 ( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。 搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。 请找出其中最小的元素。 你可以假设数组中不存在重复元素。 示例1： 输入： [3,4,5,1,2]输出： 1 示例2： 输入： [4,5,6,7,0,1,2]输出： 0 2 解法2.1 思想 线性查找 二分查找，找出旋转点 2.2 代码 线性查找 class Solution { public int findMin(int[] nums) { int min = nums[0]; for(int i:nums){ if(i&lt;min){ min=i; break; } } return min; } } 二分查找 class Solution { public int findMin(int[] nums) { int head = nums[0]; int start = 0; int end = nums.length-1; while(start&lt;end){ int mid = start + (end-start)/2; if(nums[mid] >= head) start = mid+1; else if(nums[mid] &lt; head) end = mid; } if(nums[start]>head) return head; return nums[start]; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"leetcode162-寻找峰值","slug":"leetcode162-寻找峰值","date":"2020-01-03T07:22:04.000Z","updated":"2020-01-03T07:34:16.842Z","comments":true,"path":"article/leetcode162-寻找峰值/","link":"","permalink":"https://www.codetool.top/article/leetcode162-%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/","excerpt":"","text":"1 原题峰值元素是指其值大于左右相邻值的元素。 给定一个输入数组 nums，其中 nums[i] ≠ nums[i+1]，找到峰值元素并返回其索引。 数组可能包含多个峰值，在这种情况下，返回任何一个峰值所在位置即可。 你可以假设 nums[-1] = nums[n] = -∞。 示例1： 输入: nums = [1,2,3,1]输出: 2解释: 3 是峰值元素，你的函数应该返回其索引 2。 示例2： 输入: nums = [1,2,1,3,5,6,4]输出: 1 或 5解释: 你的函数可以返回索引 1，其峰值元素为 2； 或者返回索引 5， 其峰值元素为 6。 2 解法2.1 思想 线性查找，从第一个元素开始，第一个打破单调递增的元素。 二分查找，看中间元素值的的趋势（斜率） 2.2 代码 线性查找 class Solution { public int findPeakElement(int[] nums) { int n = 1; int cache = nums[0]; while(n&lt;nums.length &amp;&amp;nums[n]>=cache){ cache = nums[n]; n++; } return n-1; } } 二分查找（来源：leetcode官方） public class Solution { public int findPeakElement(int[] nums) { int l = 0, r = nums.length - 1; while (l &lt; r) { int mid = (l + r) / 2; if (nums[mid] > nums[mid + 1]) r = mid; else l = mid + 1; } return l; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"leetcode278-第一个错误的版本","slug":"leetcode278-第一个错误的版本","date":"2020-01-02T13:17:40.000Z","updated":"2020-01-02T13:20:58.762Z","comments":true,"path":"article/leetcode278-第一个错误的版本/","link":"","permalink":"https://www.codetool.top/article/leetcode278-%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%E7%9A%84%E7%89%88%E6%9C%AC/","excerpt":"","text":"1 原题你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。 假设你有 n 个版本 [1, 2, ..., n]，你想找出导致之后所有版本出错的第一个错误的版本。 你可以通过调用 bool isBadVersion(version) 接口来判断版本号 version 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。 示例： 给定 n = 5，并且 version = 4 是第一个错误的版本。调用 isBadVersion(3) -&gt; false调用 isBadVersion(5) -&gt; true调用 isBadVersion(4) -&gt; true所以，4 是第一个错误的版本。 2 解法2.1 思想二分查找。 2.2 代码/* The isBadVersion API is defined in the parent class VersionControl. boolean isBadVersion(int version); */ public class Solution extends VersionControl { public int firstBadVersion(int n) { int start = 1; int end = n; int mid; while(start&lt;end){ mid = start + (end-start)/2; if(isBadVersion(mid)) end = mid; else start = mid+1; } return start; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"leetcode33-搜索旋转排序数组","slug":"leetcode33-搜索旋转排序数组","date":"2020-01-01T14:03:54.000Z","updated":"2020-01-01T14:15:51.535Z","comments":true,"path":"article/leetcode33-搜索旋转排序数组/","link":"","permalink":"https://www.codetool.top/article/leetcode33-%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84/","excerpt":"","text":"1 原题假设按照升序排序的数组在预先未知的某个点上进行了旋转。 ( 例如，数组 [0,1,2,4,5,6,7] 可能变为 [4,5,6,7,0,1,2] )。 搜索一个给定的目标值，如果数组中存在这个目标值，则返回它的索引，否则返回 -1 。 你可以假设数组中不存在重复的元素。 你的算法时间复杂度必须是 O(log n) 级别。 示例1： 输入： nums = [4,5,6,7,0,1,2], target = 0输出： 4 示例2： 输入： nums = [4,5,6,7,0,1,2], target = 3输出： -1 2 解法2.1 思想二分查找，需要注意、区分一些情况。 2.2 代码class Solution { public int search(int[] nums, int target) { if(nums.length == 0) return -1; int head = nums[0]; if(target == head) return 0; int start = 0; int end = nums.length-1; int mid = 0; while(start&lt;=end){ mid = start + (end-start)/2; if(nums[mid] == target) return mid; if(nums[mid]>target){//mid比target大 if(target>head){//target在左边 if(nums[mid]>=head) end = mid-1;//mid在左边 else start = mid+1; }else{//target在右边 if(nums[mid]>=head) start = mid+1;//mid在左边 else end = mid-1; } }else if(nums[mid]&lt;target){//mid比target小 if(target>head){//target在左边 if(nums[mid]>=head) start = mid+1;//mid在左边 else end = mid-1; }else{//target在右边 start = mid+1; } } } return -1; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"2019年的最后一天，我想说些什么","slug":"2019年的最后一天，我想说些什么","date":"2019-12-31T11:22:37.000Z","updated":"2020-01-01T10:39:44.969Z","comments":true,"path":"article/2019年的最后一天，我想说些什么/","link":"","permalink":"https://www.codetool.top/article/2019%E5%B9%B4%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9%EF%BC%8C%E6%88%91%E6%83%B3%E8%AF%B4%E4%BA%9B%E4%BB%80%E4%B9%88/","excerpt":"","text":"首先，祝所有朋友们新年快乐♥ 时间过得挺快的，我是2018年8月19日创立的博客，到现在也有一年多的时间了。 看着年龄随年份的增长是一件很奇妙的事情，我是00年出生的，这意味着，我永远不需要进行年龄的计算，到了2020年也就20岁了。如果是十年前的我，对大学阶段不是很了解，我会觉得20岁真好啊，大概已经开始工作，不再忍受每天繁重的作业任务了。 可是实际上，我对20岁感到挺恐惧的。这种恐惧，或许是来源于不知大四的我会有什么去向，不知道我是否有能力去胜任一份工作，未知永远是骇人的。又或许是，我明白自己已经不会再年轻了。 最近有一句话在网上很火：“我的青春又回来了”。大概涉足不同圈子的人有不同的理解，对于热爱lol的我来说，如果有那么一瞬间会让我感到“我的青春又回来了”，大概就是最近德玛西亚杯决赛上“猪狗大战”的那场BO5。这么说或许有点离谱，毕竟我初入LOL坑是在高一那一年，那一年是英雄联盟的S5，是EDG的辉煌年份。所以当看到蓝方和红方分别为EDG和RNG的时候，我不禁有些恍惚，似乎回到了S5的LPL，正盛的EDG和粉丝众多的RNG开战一刻。 但“青春回来”的时刻永远是那么短暂，总是有那么多一瞬提醒我“青春将不再回来了”，作为一个猪仔，厂长今年休赛期从现役选手位上淡出转为主教练令我颇为感慨，厂长的英雄联盟之路比我长得多。他是LPL的一号选手，也是EDG的灵魂人物，S5到S9，不仅是选手一批一批地更替，战队也出现了许多我不认识的战队。然而我永远知道EDG的厂长会一直在场，一直打下去，因为他要追逐他的电竞梦。“一代人终将老去，但总有人正年轻”。 我高二高三时尤其喜欢玩英雄联盟，现在却也不怎么接触了，主要是没人一起玩，少了很多乐趣，偶尔和高中同学一起五黑，又能回忆起当年网吧五连坐的激情，只是技术已大不如前。我特别喜欢我的高中时期，虽然那时的我并不轻松，却带有抹不去的青春气息。 回到现在，我常常想，当初创立这个博客的初心是什么呢。我记得，从入这个专业起，我很早就开始捣鼓服务器了，从使用简单的wordpress开始搭建网站，那时为了避免备案使用了国外的服务器，因此网速也非常的慢，我却乐此不彼地研究着一个个的可以用服务器实现的有趣的功能。2018年8月19日，我决定搞一个个人的编程相关的博客，我想，那时的我只是三分钟热度，导致写了几篇博客之后就很久一段时间没有更新。2019年11月8日，我从同学处听说了Hexo这个框架，出于把我的博客继续搞下去的念头，我使用hexo重新搭建了这个网站，现在一直保持一天大于一更的写文章速度，我觉得这既是对我学习成果的一种总结，也是督促我学习的一种方式。 看着我的博客的文章数目越来越多，我是非常欣喜的，然而我知道我还有许多的知识需要学习，大四的逼近时常让我赶到压力，我没有过考研的打算，所以明年的秋招我只能放手一搏，可是我非常担心我的能力不够，随着最近了解java架构越多，越感到自己所学的那点知识的匮乏程度，深深感到了自己的无力感。 今天就说到这，写的挺杂的，不管怎样，2020冲冲冲！！！","categories":[{"name":"日常/随笔","slug":"日常-随笔","permalink":"https://www.codetool.top/categories/%E6%97%A5%E5%B8%B8-%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"日常","slug":"日常","permalink":"https://www.codetool.top/tags/%E6%97%A5%E5%B8%B8/"}]},{"title":"leetcode374-猜数字大小","slug":"leetcode374-猜数字大小","date":"2019-12-31T11:17:27.000Z","updated":"2019-12-31T11:21:11.868Z","comments":true,"path":"article/leetcode374-猜数字大小/","link":"","permalink":"https://www.codetool.top/article/leetcode374-%E7%8C%9C%E6%95%B0%E5%AD%97%E5%A4%A7%E5%B0%8F/","excerpt":"","text":"1 原题我们正在玩一个猜数字游戏。 游戏规则如下：我从 1 到 n 选择一个数字。 你需要猜我选择了哪个数字。每次你猜错了，我会告诉你这个数字是大了还是小了。你调用一个预先定义好的接口 guess(int num)，它会返回 3 个可能的结果（-1，1 或 0）： -1 : 我的数字比较小 1 : 我的数字比较大 0 : 恭喜！你猜对了！ 示例 : 输入： n = 10, pick = 6输出： 6 2 解法2.1 思想二分查找，注意求中位数的公式不要用(start+end)/2容易溢出，应该用start+(end-start)/2 2.2 代码/* The guess API is defined in the parent class GuessGame. @param num, your guess @return -1 if my number is lower, 1 if my number is higher, otherwise return 0 int guess(int num); */ public class Solution extends GuessGame { public int guessNumber(int n) { int start = 1; int end = n; int mid = 1; while(start&lt;end){ mid = start+(end-start)/2; if(guess(mid)==0) return mid; if(guess(mid)==-1) end = mid-1; else if(guess(mid)==1) start = mid+1; } return start; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"leetcode69-x的平方根","slug":"leetcode69-x的平方根","date":"2019-12-30T11:58:11.000Z","updated":"2019-12-30T12:02:18.174Z","comments":true,"path":"article/leetcode69-x的平方根/","link":"","permalink":"https://www.codetool.top/article/leetcode69-x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/","excerpt":"","text":"1 原题实现 int sqrt(int x) 函数。 计算并返回 x 的平方根，其中 x 是非负整数。 由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。 示例1： 输入： 4输出： 2 示例2： 输入： 8输出： 2说明： 8 的平方根是 2.82842…, 由于返回类型是整数，小数部分将被舍去。 2 解法2.1 思想二分法 2.2 代码class Solution { public int mySqrt(int x) { //为了防止end * end 超过int范围，这里统一使用使用long long longx = x; long start = 0; long end = x/2; long mid; while(start&lt;=end){ mid = (end+start)/2; if(mid*mid == longx) return (int)mid; if(mid*mid &lt; longx) { start = mid + 1; if(start*start>longx) return (int)mid; } else if(mid*mid > longx) { end = mid - 1; if(end*end&lt;longx) return (int)end; } } return (int)start; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"leetcode704-二分查找","slug":"leetcode704-二分查找","date":"2019-12-29T12:04:34.000Z","updated":"2019-12-29T12:07:49.068Z","comments":true,"path":"article/leetcode704-二分查找/","link":"","permalink":"https://www.codetool.top/article/leetcode704-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/","excerpt":"","text":"1 原题给定一个 n 个元素有序的（升序）整型数组 nums 和一个目标值 target ，写一个函数搜索 nums 中的 target，如果目标值存在返回下标，否则返回 -1。 示例1: 输入： nums = [-1,0,3,5,9,12], target = 9输出： 4解释： 9 出现在 nums 中并且下标为 4 示例2: 输入： nums = [-1,0,3,5,9,12], target = 2输出： -1解释： 2 不存在 nums 中因此返回 -1 提示： 你可以假设 nums 中的所有元素是不重复的。 n 将在 [1, 10000]之间。 nums 的每个元素都将在 [-9999, 9999]之间。 2 解法2.1 思想二分查找思想 2.2 代码class Solution { public int search(int[] nums, int target) { int start = 0; int end = nums.length-1; while(start&lt;end){ int middle = start + (end-start)/2; if(nums[middle]==target) return middle; if(nums[middle]>target) end = middle-1; else if(nums[middle]&lt;target) start = middle+1; } if(nums[start]==target) return start; return -1; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"二分查找","slug":"二分查找","permalink":"https://www.codetool.top/tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"}]},{"title":"leetcode380-常数时间插入、删除和获取随机元素","slug":"leetcode380-常数时间插入、删除和获取随机元素","date":"2019-12-28T14:44:41.000Z","updated":"2019-12-31T11:57:39.433Z","comments":true,"path":"article/leetcode380-常数时间插入、删除和获取随机元素/","link":"","permalink":"https://www.codetool.top/article/leetcode380-%E5%B8%B8%E6%95%B0%E6%97%B6%E9%97%B4%E6%8F%92%E5%85%A5%E3%80%81%E5%88%A0%E9%99%A4%E5%92%8C%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E5%85%83%E7%B4%A0/","excerpt":"","text":"1 原题设计一个支持在平均 时间复杂度 O(1) 下，执行以下操作的数据结构。 insert(val)：当元素 val 不存在时，向集合中插入该项。 remove(val)：元素 val 存在时，从集合中移除该项。 getRandom：随机返回现有集合中的一项。每个元素应该有相同的概率被返回。 示例： // 初始化一个空的集合。RandomizedSet randomSet = new RandomizedSet();// 向集合中插入 1 。返回 true 表示 1 被成功地插入。randomSet.insert(1);// 返回 false ，表示集合中不存在 2 。randomSet.remove(2);// 向集合中插入 2 。返回 true 。集合现在包含 [1,2] 。randomSet.insert(2);// getRandom 应随机返回 1 或 2 。randomSet.getRandom();// 从集合中移除 1 ，返回 true 。集合现在包含 [2] 。randomSet.remove(1);// 2 已在集合中，所以返回 false 。randomSet.insert(2);// 由于 2 是集合中唯一的数字，getRandom 总是返回 2 。randomSet.getRandom(); 2 解法2.1 思想 初始想法 哈希表的插入删除的时间复杂度都是O(1)，获取的时候可以通过EntrySet。所以这道题是不能用HashSet的。 这样虽然获取随机元素的时候时间复杂度最高可能是O(n)，但仍比遍历一遍Set转ArrayList好很多。 正确解法 哈希表插入和删除都是O(1)，而顺序表随机访问则是O(1)，可以使用ArrayList来存储所有的数据。但是必须解决ArrayList删除元素的O(n)问题。 于是可以： 在哈希表中用value-index来记录值和在list中的下标的对应关系，如图所示 当删除元素时，size减一，用list中最后那个元素替换要删除的那个元素，并且将哈希表中的对应关系改过来（用要删除的元素的index替换list中最后那个元素对应的index）： 此时若要随机访问元素，只需获取list中前3(size)个元素中的一个。 那么如果需要继续插入元素，只需从list中下标为3(size)处替换掉后面那个元素或是在后面那个元素之前插入（这里如果用插入是使用add(index,value)方法，个人觉得比起set会增加时间复杂度，因为使用add后面的元素都需要向后移动，虽然jdk源码中使用了System.arraycopy即内存拷贝来优化，但是也比直接替换的时间复杂度更高）： 如果不是替换元素而是add操作，这里会变成1-4-2-8-4。 2.2 代码 初始想法 class RandomizedSet { Object none = new Object(); HashMap&lt;Integer,Object> map; Random random; /** Initialize your data structure here. */ public RandomizedSet() { map = new HashMap&lt;>(); random = new Random(); } /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */ public boolean insert(int val) { if(map.containsKey(val)) return false; map.put(val,none); return true; } /** Removes a value from the set. Returns true if the set contained the specified element. */ public boolean remove(int val) { if(!map.containsKey(val)) return false; map.remove(val); return true; } /** Get a random element from the set. */ public int getRandom() { int ran = random.nextInt(map.size()); int n = 0; for(Map.Entry&lt;Integer,Object> i:map.entrySet()){ if(n==ran) return i.getKey(); n++; } return 0; } } /** * Your RandomizedSet object will be instantiated and called as such: * RandomizedSet obj = new RandomizedSet(); * boolean param_1 = obj.insert(val); * boolean param_2 = obj.remove(val); * int param_3 = obj.getRandom(); */ 正确解法（来源：leetcode用户，添加元素时是直接插入） class RandomizedSet { Map&lt;Integer,Integer> map; // 存放值和在 list 的下标位置的映射 List&lt;Integer> list; // 存放要插入数据的结构 int size; // 数据的长度 /** Initialize your data structure here. */ public RandomizedSet() { map = new HashMap&lt;>(); list = new ArrayList&lt;>(); size = 0; } /** Inserts a value to the set. Returns true if the set did not already contain the specified element. */ public boolean insert(int val) { if(map.containsKey(val)) return false; else{ // 插入数据，并更新 map 的映射后将长度加一 list.add(size,val); map.put(val,size++); return true; } } /** Removes a value from the set. Returns true if the set contained the specified element. */ public boolean remove(int val) { if(!map.containsKey(val)) return false; else if( size == 0 ){ map.remove(val);} else{ // 取到 list 末尾的数据 int tailKey = list.get(size-1); // 然后将要原先 map 中得 val-index 映射改为 tailKey-index map.put(tailKey,map.get(val)); // 在 map 中取得 val 在 list 的位置，然后根据这个位置用末尾元素 tailKey 替代 list.set(map.get(val),tailKey); // 在 map 中删除 val 的映射 map.remove(val); size--; } return true; } /** Get a random element from the set. */ public int getRandom() { Random rand = new Random(); // rand.nextInt(size) 产生的是 0 到 size（不包括 size） 的数据 return list.get(rand.nextInt(size)); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"}]},{"title":"leetcode347-前K个高频元素","slug":"leetcode347-前K个高频元素","date":"2019-12-28T13:39:09.000Z","updated":"2020-02-20T14:55:21.053Z","comments":true,"path":"article/leetcode347-前K个高频元素/","link":"","permalink":"https://www.codetool.top/article/leetcode347-%E5%89%8DK%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/","excerpt":"","text":"1 原题给定一个非空的整数数组，返回其中出现频率前 k 高的元素。 示例1： 输入： nums = [1,1,1,2,2,3], k = 2输出： [1,2] 示例2： 输入： nums = [1], k = 1输出： [1] 说明: 你可以假设给定的 k 总是合理的，且 1 ≤ k ≤ 数组中不相同的元素的个数。 你的算法的时间复杂度必须优于 O(n log n) , n 是数组的大小。 2 解法2.1 思想可以用哈希表记录下出现的次数，然后将哈希表按值排序。（获取entryList用Collections来排序） 2.2 代码class Solution { public List&lt;Integer> topKFrequent(int[] nums, int k) { Map&lt;Integer,Integer> map = new HashMap&lt;>(); List&lt;Integer> list = new ArrayList&lt;>(); for(int i:nums){ map.put(i,map.getOrDefault(i,0)+1); } List&lt;Map.Entry&lt;Integer,Integer>> entryList = new ArrayList&lt;>(map.entrySet()); entryList.sort((entry1, entry2) -> entry2.getValue() - entry1.getValue()); int n = 0; for(Map.Entry&lt;Integer,Integer> i:entryList){ if(n>=k) break; list.add(i.getKey()); n ++; } return list; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode454-四数相加II","slug":"leetcode454-四数相加II","date":"2019-12-27T12:45:57.000Z","updated":"2020-02-20T14:55:21.053Z","comments":true,"path":"article/leetcode454-四数相加II/","link":"","permalink":"https://www.codetool.top/article/leetcode454-%E5%9B%9B%E6%95%B0%E7%9B%B8%E5%8A%A0II/","excerpt":"","text":"1 原题给定四个包含整数的数组列表 A , B , C , D ,计算有多少个元组 (i, j, k, l) ，使得 A[i] + B[j] + C[k] + D[l] = 0。 为了使问题简单化，所有的 A, B, C, D 具有相同的长度 N，且 0 ≤ N ≤ 500 。所有整数的范围在 -228 到 228 - 1 之间，最终结果不会超过 231 - 1 。 例如: 输入：A = [ 1, 2]B = [-2,-1]C = [-1, 2]D = [ 0, 2] 输出：2 解释:两个元组如下: (0, 0, 0, 1) -&gt; A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0 (1, 1, 0, 0) -&gt; A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0 2 解法2.1 思想 暴力（超出时间限制）：暴力的问题是，只要数组的数目超过两个，便会重复计算很多单元，比如A1+B1+C2和A2+B1+C2其中B1+C2就被反复计算了，他的时间复杂度会成nN的形势增长。 为了解决暴力的时间复杂性幂增长，可以将其降维，两个两个分组，然后作查找表配对总和为0的情况。 2.2 代码 暴力 class Solution { public int fourSumCount(int[] A, int[] B, int[] C, int[] D) { int count = 0; int len = A.length; if(len == 0) return 0; for(int a = 0;a&lt;len;a++){ for(int b = 0;b&lt;len;b++){ for(int c = 0;c&lt;len;c++){ for(int d = 0;d&lt;len;d++){ if(A[a]+B[b]+C[c]+D[d]==0) count ++; } } } } return count; } } 查找表 class Solution { public int fourSumCount(int[] A, int[] B, int[] C, int[] D) { if(A.length == 0)return 0; int count = 0; Map&lt;Integer,Integer> map = new HashMap&lt;>(); for(int i:A){ for(int j:B){ //记录下-(i+j)可以对应的次数。 map.put(-i-j,map.getOrDefault(-i-j,0)+1); } } for(int i:C){ for(int j:D){ count += map.getOrDefault(i+j,0); } } return count; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode3-无重复字符的最长子串","slug":"leetcode3-无重复字符的最长子串","date":"2019-12-26T14:18:21.000Z","updated":"2020-02-20T14:55:21.056Z","comments":true,"path":"article/leetcode3-无重复字符的最长子串/","link":"","permalink":"https://www.codetool.top/article/leetcode3-%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/","excerpt":"","text":"1 原题给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。 示例1： 输入： “abcabcbb”输出： 3解释： 因为无重复字符的最长子串是 “abc”，所以其长度为 3。 示例2： 输入： “bbbbb”输出： 1解释： 因为无重复字符的最长子串是 “b”，所以其长度为 1。 示例3： 输入： “pwwkew”输出： 3解释： 因为无重复字符的最长子串是 “wke”，所以其长度为 3。 请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。 2 解法2.1 思想滑动窗口，将出现的字符和下标在哈希表中对应起来。 该问题的关键是获取所有不重复字符子串的长度，比较出最大的长度，我们用last记录当前计算的子串的第一个字符位置。 那么不重复字符子串的长度的计算方法就是： 假设从last开始都是不重复字符，如果遇到一个在哈希集中出现过的字符并且是last或last之后的，说明遇到了重复字符，如下图的d，则此时的不重复字符子串adv的长度为第二个d之前的长度3-0=3。然后将last移到v上（第一个d后面的那个元素，这样新子串中就不会有两个d了），便可继续进行操作。 这样依次进行无重复字符子串的长度计算，当最后遍历到最后一个字符c的时候，都和last以及last之后出现的字符无重复，那么此时最后计算的子串vdfc的长度是5-2+1=4（因为c是计入子串的） 那么假设最后一个字符是v，当最后遍历到最后一个字符v的时候，和当前子串中的v重复了(vdfv)，那么和之前计算子串长度的方法一样是5-2=3（最后一个v不计入长度） 2.2 代码class Solution { public int lengthOfLongestSubstring(String s) { Map&lt;Character,Integer> map = new HashMap&lt;>(); int max = 0; int last = 0; char[] chars = s.toCharArray(); for(int i = 0;i&lt;chars.length;i++){ if(map.containsKey(chars[i])&amp;&amp;map.get(chars[i])>=last){ if(i-last>=max) max = i-last; last = map.get(chars[i]) + 1; }else if(i == chars.length-1&amp;&amp;i-last+1>=max){ max = i-last+1; } map.put(chars[i],i); } return max; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode771-宝石与石头","slug":"leetcode771-宝石与石头","date":"2019-12-26T14:13:37.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/leetcode771-宝石与石头/","link":"","permalink":"https://www.codetool.top/article/leetcode771-%E5%AE%9D%E7%9F%B3%E4%B8%8E%E7%9F%B3%E5%A4%B4/","excerpt":"","text":"1 原题给定字符串J 代表石头中宝石的类型，和字符串 S代表你拥有的石头。 S 中每个字符代表了一种你拥有的石头的类型，你想知道你拥有的石头中有多少是宝石。 J 中的字母不重复，J 和 S中的所有字符都是字母。字母区分大小写，因此&quot;a&quot;和&quot;A&quot;是不同类型的石头。 示例 1: 输入： J = “aA”, S = “aAAbbbb”输出： 3 示例 2: 输入： J = “z”, S = “ZZ”输出： 0 注意： S 和 J 最多含有50个字母。 J 中的字符不重复。 2 解法2.1 思想将代表宝石的字符存放在哈希集中。 2.2 代码class Solution { public int numJewelsInStones(String J, String S) { Set&lt;Character> set = new HashSet&lt;>(); for(char i:J.toCharArray()){ set.add(i); } int count = 0; for(char i:S.toCharArray()){ if(set.contains(i)) count++; } return count; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode652-寻找重复的子树","slug":"leetcode652-寻找重复的子树","date":"2019-12-26T05:52:10.000Z","updated":"2020-02-20T14:55:21.053Z","comments":true,"path":"article/leetcode652-寻找重复的子树/","link":"","permalink":"https://www.codetool.top/article/leetcode652-%E5%AF%BB%E6%89%BE%E9%87%8D%E5%A4%8D%E7%9A%84%E5%AD%90%E6%A0%91/","excerpt":"","text":"1 原题给定一棵二叉树，返回所有重复的子树。对于同一类的重复子树，你只需要返回其中任意一棵的根结点即可。 两棵树重复是指它们具有相同的结构以及相同的结点值。 示例1: 1 / \\ 2 3 / / \\ 4 2 4 / 4 下面是两个重复的子树： 2 / 4 和 4 因此，你需要以列表的形式返回上述重复子树的根结点。 2 解法2.1 思想将子树按照某种算法遍历序列化成字符串，作为哈希表的键。 2.2 代码/** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { Map&lt;String,Integer> map; List&lt;TreeNode> list; public String LRD(TreeNode node){ StringBuilder sb = new StringBuilder(); dfs(sb,node); return sb.toString(); } public void dfs(StringBuilder str,TreeNode node){ if(node == null){ str.append('n'); return; } dfs(str,node.left); dfs(str,node.right); str.append(String.valueOf(node.val)); return; } public List&lt;TreeNode> findDuplicateSubtrees(TreeNode root) { map = new HashMap&lt;>(); list = new ArrayList&lt;>(); dfsFindSubtrees(root); return list; } public void dfsFindSubtrees(TreeNode root){ if(root == null) return; dfsFindSubtrees(root.left); dfsFindSubtrees(root.right); String LRD = LRD(root); if(map.containsKey(LRD)){ if(map.get(LRD)==1){ list.add(root); map.put(LRD,0); } }else{ map.put(LRD,1); } } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode36-有效的数独","slug":"leetcode36-有效的数独","date":"2019-12-26T05:25:23.000Z","updated":"2020-02-20T14:55:21.056Z","comments":true,"path":"article/leetcode36-有效的数独/","link":"","permalink":"https://www.codetool.top/article/leetcode36-%E6%9C%89%E6%95%88%E7%9A%84%E6%95%B0%E7%8B%AC/","excerpt":"","text":"1 原题判断一个 9x9 的数独是否有效。只需要根据以下规则，验证已经填入的数字是否有效即可。 数字 1-9 在每一行只能出现一次。 数字 1-9 在每一列只能出现一次。 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。 上图是一个部分填充的有效的数独。 数独部分空格内已填入了数字，空白格用 &#39;.&#39; 表示。 示例1： 输入：[ [“5”,”3”,”.”,”.”,”7”,”.”,”.”,”.”,”.”], [“6”,”.”,”.”,”1”,”9”,”5”,”.”,”.”,”.”], [“.”,”9”,”8”,”.”,”.”,”.”,”.”,”6”,”.”], [“8”,”.”,”.”,”.”,”6”,”.”,”.”,”.”,”3”], [“4”,”.”,”.”,”8”,”.”,”3”,”.”,”.”,”1”], [“7”,”.”,”.”,”.”,”2”,”.”,”.”,”.”,”6”], [“.”,”6”,”.”,”.”,”.”,”.”,”2”,”8”,”.”], [“.”,”.”,”.”,”4”,”1”,”9”,”.”,”.”,”5”], [“.”,”.”,”.”,”.”,”8”,”.”,”.”,”7”,”9”]]输出： true 示例1： 输入：[ [“8”,”3”,”.”,”.”,”7”,”.”,”.”,”.”,”.”], [“6”,”.”,”.”,”1”,”9”,”5”,”.”,”.”,”.”], [“.”,”9”,”8”,”.”,”.”,”.”,”.”,”6”,”.”], [“8”,”.”,”.”,”.”,”6”,”.”,”.”,”.”,”3”], [“4”,”.”,”.”,”8”,”.”,”3”,”.”,”.”,”1”], [“7”,”.”,”.”,”.”,”2”,”.”,”.”,”.”,”6”], [“.”,”6”,”.”,”.”,”.”,”.”,”2”,”8”,”.”], [“.”,”.”,”.”,”4”,”1”,”9”,”.”,”.”,”5”], [“.”,”.”,”.”,”.”,”8”,”.”,”.”,”7”,”9”]]输出： false解释： 除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。 说明: 一个有效的数独（部分已被填充）不一定是可解的。 只需要根据以上规则，验证已经填入的数字是否有效即可。 给定数独序列只包含数字 1-9 和字符 &#39;.&#39; 。 给定数独永远是 9x9 形式的。 2 解法2.1 思想行、列、宫分别分配一个哈希集记录出现的数字。 2.2 代码class Solution { char[][] globalBoard; //行:0-8,列:9-17,宫:18-26 Set&lt;Character>[] sets = new Set[27]; public boolean isValidSudoku(char[][] board) { for(int i = 0;i&lt;27;i++){ sets[i] = new HashSet&lt;>(); } globalBoard = board; for(int x = 0 ; x &lt; 9 ; x ++){ for(int y = 0;y&lt;9;y++){ if(isValidSingle(x,y)==false) return false; } } return true; } public boolean isValidSingle(int x,int y){ if(globalBoard[x][y]=='.') return true; if(sets[x].contains(globalBoard[x][y])) return false; sets[x].add(globalBoard[x][y]); if(sets[9+y].contains(globalBoard[x][y])) return false; sets[9+y].add(globalBoard[x][y]); if(sets[18+y/3*3+x/3].contains(globalBoard[x][y])) return false; sets[18+y/3*3+x/3].add(globalBoard[x][y]); return true; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode49-字母异位词分组","slug":"leetcode49-字母异位词分组","date":"2019-12-25T14:27:42.000Z","updated":"2020-02-20T14:55:21.056Z","comments":true,"path":"article/leetcode49-字母异位词分组/","link":"","permalink":"https://www.codetool.top/article/leetcode49-%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/","excerpt":"","text":"1 原题给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。 示例： 输入： [“eat”, “tea”, “tan”, “ate”, “nat”, “bat”]输出：[ [“ate”,”eat”,”tea”], [“nat”,”tan”], [“bat”]] 说明： 所有输入均为小写字母。 不考虑答案输出的顺序。 2 解法2.1 思想将字符串按字典顺序排序作为键，存储对应的异位字符串的List作为值。 2.2 代码class Solution { public List&lt;List&lt;String>> groupAnagrams(String[] strs) { Map&lt;String,List&lt;String>> map = new HashMap&lt;>(); List&lt;List&lt;String>> list = new ArrayList&lt;>(); for(String i:strs){ char[] chars = i.toCharArray(); Arrays.sort(chars); if(map.containsKey(String.valueOf(chars))){ map.get(String.valueOf(chars)).add(i); }else{ List&lt;String> newList = new ArrayList&lt;>(); newList.add(i); map.put(String.valueOf(chars),newList); list.add(newList); } } return list; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode219-存在重复元素II","slug":"leetcode219-存在重复元素II","date":"2019-12-24T14:46:27.000Z","updated":"2020-02-20T14:55:21.053Z","comments":true,"path":"article/leetcode219-存在重复元素II/","link":"","permalink":"https://www.codetool.top/article/leetcode219-%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0II/","excerpt":"","text":"1 原题给定一个整数数组和一个整数 k，判断数组中是否存在两个不同的索引 i 和 j，使得 nums [i] = nums [j]，并且 i 和 j 的差的绝对值最大为 k。 示例1： 输入： nums = [1,2,3,1], k = 3输出： true 示例2： 输入： nums = [1,0,1,1], k = 1输出： true 示例3： 输入： nums = [1,2,3,1,2,3], k = 2输出： false 2 解法2.1 思想哈希表，将元素和最后出现的下标对应起来，后面遍历到相同元素时看下标之差是否小于等于k 2.2 代码class Solution { public boolean containsNearbyDuplicate(int[] nums, int k) { Map&lt;Integer,Integer> map = new HashMap&lt;>(); for(int i = 0;i&lt;nums.length;i++){ if(map.containsKey(nums[i])){ if(i-map.get(nums[i])&lt;=k) return true; } map.put(nums[i],i); } return false; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode350-两个数组的交集II","slug":"leetcode350-两个数组的交集II","date":"2019-12-23T14:35:59.000Z","updated":"2020-02-20T14:55:21.053Z","comments":true,"path":"article/leetcode350-两个数组的交集II/","link":"","permalink":"https://www.codetool.top/article/leetcode350-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86II/","excerpt":"","text":"1 原题给定两个数组，编写一个函数来计算它们的交集。 输入： nums1 = [1,2,2,1], nums2 = [2,2]输出： [2,2] 示例2： 输入： nums1 = [4,9,5], nums2 = [9,4,9,8,4]输出： [4,9] 说明： 输出结果中每个元素出现的次数，应与元素在两个数组中出现的次数一致。 我们可以不考虑输出结果的顺序。 进阶: 如果给定的数组已经排好序呢？你将如何优化你的算法？ 如果 nums1 的大小比 nums2 小很多，哪种方法更优？ 如果 nums2 的元素存储在磁盘上，磁盘内存是有限的，并且你不能一次加载所有的元素到内存中，你该怎么办？ 2 解法2.1 思想哈希表，遍历第一个数组的时候把值和出现的次数对应起来，遍历第二个数组的时候可以得出并集。 2.2 代码class Solution { public int[] intersect(int[] nums1, int[] nums2) { Map&lt;Integer,Integer> map = new HashMap&lt;>(); for(int i:nums1){ if(map.containsKey(i)){ map.put(i,map.get(i)+1); }else map.put(i,1); } int length = 0; for(int i:nums2){ if(map.containsKey(i)){ if(map.get(i)-1 == 0){ map.remove(i); }else map.put(i,map.get(i)-1); nums1[length] = i; length++; } } int[] ret = new int[length]; System.arraycopy(nums1,0,ret,0,length); return ret; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode387-字符串中的第一个唯一字符","slug":"leetcode387-字符串中的第一个唯一字符","date":"2019-12-22T14:32:40.000Z","updated":"2020-02-20T14:55:21.053Z","comments":true,"path":"article/leetcode387-字符串中的第一个唯一字符/","link":"","permalink":"https://www.codetool.top/article/leetcode387-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/","excerpt":"","text":"1 原题给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。 案例: s = “leetcode”返回 0.s = “loveleetcode”,返回 2. 注意事项： 您可以假定该字符串只包含小写字母。 2 解法2.1 思想遍历两次数组，第一次将字母和出现的次数放在哈希表中对应起来，第二遍找出哈希表中值为1的字母。 2.2 代码class Solution { public int firstUniqChar(String s) { Map&lt;Character,Integer> map = new HashMap&lt;>(); int n = 0; char[] chars = s.toCharArray(); for(char i:chars){ if(map.containsKey(i)){ map.put(i,map.get(i)+1); }else{ map.put(i,1); } n++; } n = 0; for (char i:chars) { if(map.get(i)==1) return n; n++; } return -1; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode599-两个列表的最小索引总和","slug":"leetcode599-两个列表的最小索引总和","date":"2019-12-22T12:58:42.000Z","updated":"2020-02-20T14:55:21.053Z","comments":true,"path":"article/leetcode599-两个列表的最小索引总和/","link":"","permalink":"https://www.codetool.top/article/leetcode599-%E4%B8%A4%E4%B8%AA%E5%88%97%E8%A1%A8%E7%9A%84%E6%9C%80%E5%B0%8F%E7%B4%A2%E5%BC%95%E6%80%BB%E5%92%8C/","excerpt":"","text":"1 原题假设Andy和Doris想在晚餐时选择一家餐厅，并且他们都有一个表示最喜爱餐厅的列表，每个餐厅的名字用字符串表示。 你需要帮助他们用最少的索引和找出他们共同喜爱的餐厅。 如果答案不止一个，则输出所有答案并且不考虑顺序。 你可以假设总是存在一个答案。 示例1: 输入:[“Shogun”, “Tapioca Express”, “Burger King”, “KFC”][“Piatti”, “The Grill at Torrey Pines”, “Hungry Hunter Steakhouse”, “Shogun”]输出: [“Shogun”]解释: 他们唯一共同喜爱的餐厅是“Shogun”。 示例2: 输入:[“Shogun”, “Tapioca Express”, “Burger King”, “KFC”][“KFC”, “Shogun”, “Burger King”]输出: [“Shogun”]解释: 他们共同喜爱且具有最小索引和的餐厅是“Shogun”，它有最小的索引和1(0+1)。 提示: 两个列表的长度范围都在 [1, 1000]内。 两个列表中的字符串的长度将在[1，30]的范围内。 下标从0开始，到列表的长度减1。 两个列表都没有重复的元素。 2 解法2.1 思想哈希表，将第一个列表中的字符串和下标对应起来，然后遍历第二个列表找最小下标之和。 2.2 代码class Solution { public String[] findRestaurant(String[] list1, String[] list2) { Map&lt;String,Integer> map = new HashMap&lt;>(); int newLength = 0; int minSum = 2000; for(int i = 0;i&lt;list1.length;i++){ map.put(list1[i],i); } for(int i = 0;i&lt;list2.length;i++){ if(map.containsKey(list2[i])){ int n = i + map.get(list2[i]); if(n&lt;minSum){ list1[0] = list2[i]; newLength = 1; minSum = n; }else if(n == minSum){ list1[newLength] = list2[i]; newLength++; } } } String[] ret = new String[newLength]; System.arraycopy(list1,0,ret,0,newLength); return ret; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"对象的输入输出-java序列化机制","slug":"对象的输入输出-java序列化机制","date":"2019-12-21T14:54:22.000Z","updated":"2020-02-04T15:55:27.942Z","comments":true,"path":"article/对象的输入输出-java序列化机制/","link":"","permalink":"https://www.codetool.top/article/%E5%AF%B9%E8%B1%A1%E7%9A%84%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA-java%E5%BA%8F%E5%88%97%E5%8C%96%E6%9C%BA%E5%88%B6/","excerpt":"","text":"对象序列化和反序列化，在java中体现为两种字节流： ObjectInputStream、ObjectOutputStream 1 序列化的概念指堆内存中的java对象数据，通过某种方式存储到磁盘文件中，或者传递给其他网络节点（网络传输）。这个过程称为序列化，通常是指将数据结构或对象转化成二进制的过程。 反序列化，顾名思义，则是将二进制字节流转化回java对象的过程。 java序列化是平台无关的。 2 序列化的作用 对象持久化 网络传输对象 进程间传递对象 3 如何序列化3.1 默认序列化 为类实现一个Serializable接口，这是一个空接口，没有需要实现的方法。 可以调用ObjectOutputStream.writeObject方法来序列化了。 调用ObjectInputStream.readObject来反序列化 3.2 自定义序列化过程实现Serializable接口之后，重写 writeObject(ObjectOutputStream) 、 readObject(ObjectInputStream) 方法。 4 序列化ID通常可序列化的类会使用一个序列化ID： private static final long serialVersionUID = 1L; java的序列化机制是通过判断运行时类的serialVersionUID来验证版本一致性的，在进行反序列化时，JVM会把传进来的字节流中的serialVersionUID与本地实体类中的serialVersionUID进行比较，如果相同则认为是一致的，便可以进行反序列化，否则就会报序列化版本不一致的异常InvalidClassException。 5 序列化之后的字节流格式我们用这样一段代码做实验： class SerializableObject implements Serializable{ } public class Main { public static void main(String[] args) throws IOException { ObjectOutputStream out = new ObjectOutputStream(System.out); Object obj = new SerializableObject(); out.writeObject(obj); } } 得到的结果为: aced 0005 7372 0012 5365 7269 616c 697a 6162 6c65 4f62 6a65 6374 0b8e b091 7d68 738d 0200 0078 70前两个字节固定： ac ed 紧接的是对象序列化格式的版本号： 00 05 接下来，73 代表接下来读取到的将是一个对象，72 代表该对象是一个对类的描述：73 72 接下来的两字节描述类名长度：00 12，对应18个字节的全限定类名。 于是接下来的18字节就是类名的UTF编码：5365 7269 616c 697a 6162 6c65 4f62 6a65 6374，就是类名SerializableObject。 接下来八个字节是序列化版本ID：0b8e b091 7d68 738d 接下来一个字节02代表了序列化中标识类版本。 继续往下两个字节就是 00 00 , 代表该类中字段的个数，由于我这个类内部为空没有字段，所以这里就是0。 然后是它包含的字段序列类型描述,其顺序即它们存储的顺序. 基本类型的组成为：一字节类型描述符 两字节字段名称长度 字段名称 类型描述符： 解码字符 代表类型 B byte C char D double F float I int J long L 对象 S short Z boolean [ 数组 字段序列类型描述结束后附加两个字节是固定的78 70 最后是字段信息（内容）的描述，这里都没有。 6 特殊情况 静态变量不会被序列化(static)，transient则可以限定字段不参与序列化。 当一个父类实现序列化，子类自动实现序列化，不需要显式实现Serializable接口。 当一个对象的实例变量引用其他对象，序列化该对象时也把引用对象进行序列化。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"基础知识","slug":"基础知识","permalink":"https://www.codetool.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"},{"name":"序列化","slug":"序列化","permalink":"https://www.codetool.top/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"},{"name":"IO","slug":"IO","permalink":"https://www.codetool.top/tags/IO/"}]},{"title":"leetcode205-同构字符串","slug":"leetcode205-同构字符串","date":"2019-12-21T05:00:29.000Z","updated":"2020-02-20T14:55:21.053Z","comments":true,"path":"article/leetcode205-同构字符串/","link":"","permalink":"https://www.codetool.top/article/leetcode205-%E5%90%8C%E6%9E%84%E5%AD%97%E7%AC%A6%E4%B8%B2/","excerpt":"","text":"1 原题给定两个字符串 s 和 t，判断它们是否是同构的。 如果 s 中的字符可以被替换得到 t ，那么这两个字符串是同构的。 所有出现的字符都必须用另一个字符替换，同时保留字符的顺序。两个字符不能映射到同一个字符上，但字符可以映射自己本身。 示例1： 输入： s = “egg”, t = “add”输出： true 示例2： 输入： s = “foo”, t = “bar”输出： false 示例3： 输入： s = “paper”, t = “title”输出： true 2 解法2.1 思想 相同的字符要对应相同的字符，那么相同字符处于后位置的字符的第一次出现的位置就应该相同。 哈希表记录对应关系 2.2 代码 indexOf （作者:hao-fei-hao） class Solution { public boolean isIsomorphic(String s, String t) { char[] ch1 = s.toCharArray(); char[] ch2 = t.toCharArray(); int len = s.length(); for (int i = 0; i &lt; len; i++) { if(s.indexOf(ch1[i]) != t.indexOf(ch2[i])){ return false; } } return true; } } 哈希表 class Solution { public boolean isIsomorphic(String s, String t) { Map&lt;Character,Character> map = new HashMap&lt;>(); Map&lt;Character,Character> mapB = new HashMap&lt;>(); for(int i = 0;i&lt;s.length();i++){ if(map.containsKey(s.charAt(i))){ if(t.charAt(i)!=map.get(s.charAt(i))) return false; } if(mapB.containsKey(t.charAt(i))){ if(s.charAt(i)!=mapB.get(t.charAt(i))) return false; } map.put(s.charAt(i),t.charAt(i)); mapB.put(t.charAt(i),s.charAt(i)); } return true; } } 或 class Solution { public boolean isIsomorphic(String s, String t) { HashMap&lt;Character,Character> map=new HashMap&lt;>(); for (int i=0;i&lt;s.length();i++){ if (map.containsKey(s.charAt(i))) { if (map.get(s.charAt(i))!=t.charAt(i)) return false; }else{ //不存在对应的键但是存在对应的值 if (map.containsValue(t.charAt(i))) return false; else map.put(s.charAt(i),t.charAt(i)); } } return true; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode1-两数之和","slug":"leetcode1-两数之和","date":"2019-12-20T13:41:49.000Z","updated":"2020-02-20T14:55:21.057Z","comments":true,"path":"article/leetcode1-两数之和/","link":"","permalink":"https://www.codetool.top/article/leetcode1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/","excerpt":"","text":"1 原题给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。 你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。 示例: 给定 nums = [2, 7, 11, 15], target = 9因为 nums[0] + nums[1] = 2 + 7 = 9所以返回 [0, 1] 2 解法2.1 思想遍历一次数组，每次在哈希表中将target-当前数的值和当前下标关联起来，则之后遇到的值如果在哈希表中存在，就能得到前面的下标。 2.2 代码class Solution { public int[] twoSum(int[] nums, int target) { Map&lt;Integer,Integer> map = new HashMap&lt;>(); for(int i = 0;i&lt;nums.length;i++){ if(map.containsKey(nums[i])) { return new int[]{map.get(nums[i]),i}; } map.put(target-nums[i],i); } return null; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"今天是我写博客历史上最黑暗的一天","slug":"今天是我写博客历史上最黑暗的一天","date":"2019-12-19T08:27:09.000Z","updated":"2019-12-19T08:44:32.468Z","comments":true,"path":"article/今天是我写博客历史上最黑暗的一天/","link":"","permalink":"https://www.codetool.top/article/%E4%BB%8A%E5%A4%A9%E6%98%AF%E6%88%91%E5%86%99%E5%8D%9A%E5%AE%A2%E5%8E%86%E5%8F%B2%E4%B8%8A%E6%9C%80%E9%BB%91%E6%9A%97%E7%9A%84%E4%B8%80%E5%A4%A9/","excerpt":"","text":"由于我博客中的图片一直是放在了一个公共图床上，这几天我这边加载博客中的图片有点加载不出来，再加上各种因素考虑，打算将我博客中的图片全部转到我自己服务器里面来。 当然，手动一篇一篇找博客中的图片链接，然后上传到自己的服务器的工作量肯定是非常大的。于是我想到了用python这个小助手（确实没想到后来我的工作量更大了😀） 我的主要需求就是，找出我博客目录下所有markdown文件中保存在公共图床上的图片链接，然后上传到自己的服务器，获取图片链接，然后替换掉原来的链接。 最后写出来应该是这样的（为了我的api安全就不展示所有代码了） import os import re url = ''# 我的图床api pattern = re.compile(r'https://s2\\S+\\.png')# 正则匹配我原来的图床链接 for dirName, subdirList, fileList in os.walk(\"./\"): print('Folder: %s' % dirName) for fname in fileList: if fname != '': # 排除掉一些文件，或只选择md文件 print(\"正在处理\"+fname+\"文件\") fp = open(dirName+\"/\"+fname,\"r+\",encoding='utf-8') content = fp.read() result = re.findall(pattern,content) for imgUrl in result: print(\"检测到图片：\"+imgUrl) # # # replaceUrl = '' # 上传到自己服务器，获取replaceUrl content = content.replace(imgUrl,replaceUrl) fp = open(dirName + \"/\" + fname, \"w+\", encoding='utf-8') fp.write(content) print(\"替换成功\") 那么，我犯了个什么错误呢😀 for fname in fileList: if fname != '': print(\"正在处理\"+fname+\"文件\") fp = open(dirName+\"/\"+fname,\"w+\",encoding='utf-8') # w+哦 content = fp.read() 没错就是要读的时候打开的方式写成了w+ 然后就直接运行了😀 后果就是哈麻批我markdown源文件全变成空白的了。 然后我就花了几个小时从我网站上一个一个网页地把他们写回markdown源文件。 如果现在某篇博客里有什么错误，很有可能就是我没仔细检查。 真是写博客历史上最黑暗的一天😀","categories":[{"name":"日常/随笔","slug":"日常-随笔","permalink":"https://www.codetool.top/categories/%E6%97%A5%E5%B8%B8-%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"日常","slug":"日常","permalink":"https://www.codetool.top/tags/%E6%97%A5%E5%B8%B8/"}]},{"title":"leetcode136-只出现一次的数字","slug":"leetcode136-只出现一次的数字","date":"2019-12-18T10:05:23.000Z","updated":"2020-02-20T14:55:21.056Z","comments":true,"path":"article/leetcode136-只出现一次的数字/","link":"","permalink":"https://www.codetool.top/article/leetcode136-%E5%8F%AA%E5%87%BA%E7%8E%B0%E4%B8%80%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/","excerpt":"","text":"1 原题给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。 说明： 你的算法应该具有线性时间复杂度。 你可以不使用额外空间来实现吗？ 输入： [2,2,1]输出： 1 示例2： 输入： [4,1,2,1,2]输出： 4 2 解法2.1 思想 哈希集第一次出现加到集合中，第二次出现从集合中删除，最后集合中剩下的那个元素即为只出现一次的数。 亦或 两个相同的数亦或的结果为0 0和n亦或的结果为n=&gt; 则所有数亦或的结果即为只出现一次的数。 2.2 代码 哈希集 class Solution { public int singleNumber(int[] nums) { Set&lt;Integer> set = new HashSet&lt;>(); for(int i:nums){ if(set.contains(i)) set.remove(i); else set.add(i); } for(int i:nums){ if(set.contains(i)) return i; } return 0; } } 亦或 class Solution { public int singleNumber(int[] nums) { int i,res=0; for(i=0;i&lt;nums.length;i++){ res=res^nums[i]; } return res; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode202-快乐数","slug":"leetcode202-快乐数","date":"2019-12-18T10:05:23.000Z","updated":"2020-02-20T14:55:21.056Z","comments":true,"path":"article/leetcode202-快乐数/","link":"","permalink":"https://www.codetool.top/article/leetcode202-%E5%BF%AB%E4%B9%90%E6%95%B0/","excerpt":"","text":"1 原题编写一个算法来判断一个数是不是“快乐数”。 一个“快乐数”定义为：对于一个正整数，每一次将该数替换为它每个位置上的数字的平方和，然后重复这个过程直到这个数变为 1，也可能是无限循环但始终变不到 1。如果可以变为 1，那么这个数就是快乐数。 示例： 输入： 19输出： true解释:12 + 92 = 8282 + 22 = 6862 + 82 = 10012 + 02 + 02 = 1 2 解法2.1 思想递归求解，当每一位上的数字的平方之和为1时返回true，否则递归计算其和。不是1的和可以计入哈希集中，避免重复遇到。 2.2 代码class Solution { Set&lt;Integer> set = new HashSet&lt;>(); public boolean isHappy(int n) { int sum = 0; char[] nums = String.valueOf(n).toCharArray(); int num = 0; for(char i:nums){ //获取每一位上的数字 num = i-48; sum += num * num; } if(sum==1) return true; if(set.contains(sum)) return false; set.add(sum); return isHappy(sum); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode217-存在重复元素","slug":"leetcode217-存在重复元素","date":"2019-12-18T10:05:23.000Z","updated":"2020-02-20T14:55:21.053Z","comments":true,"path":"article/leetcode217-存在重复元素/","link":"","permalink":"https://www.codetool.top/article/leetcode217-%E5%AD%98%E5%9C%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/","excerpt":"","text":"1 原题给定一个整数数组，判断是否存在重复元素。 如果任何值在数组中出现至少两次，函数返回 true。如果数组中每个元素都不相同，则返回 false。 示例1： 输入： [1,2,3,1]输出： true 示例2： 输入： [1,2,3,4]输出： false 示例3： 输入： [1,1,1,3,3,4,3,2,4,2]输出： true 2 解法2.1 思想哈希集 2.2 代码class Solution { public boolean containsDuplicate(int[] nums) { Set&lt;Integer> set = new HashSet&lt;>(); for(int i:nums){ if(set.contains(i)) return true; set.add(i); } return false; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode705-设计哈希集合","slug":"leetcode705-设计哈希集合","date":"2019-12-18T10:05:23.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/leetcode705-设计哈希集合/","link":"","permalink":"https://www.codetool.top/article/leetcode705-%E8%AE%BE%E8%AE%A1%E5%93%88%E5%B8%8C%E9%9B%86%E5%90%88/","excerpt":"","text":"1 原题不使用任何内建的哈希表库设计一个哈希集合 具体地说，你的设计应该包含以下的功能 add(value)：向哈希集合中插入一个值。 contains(value) ：返回哈希集合中是否存在这个值。 remove(value)：将给定值从哈希集合中删除。如果哈希集合中没有这个值，什么也不做。 示例： MyHashSet hashSet = new MyHashSet();hashSet.add(1);hashSet.add(2);hashSet.contains(1); // 返回 truehashSet.contains(3); // 返回 false (未找到)hashSet.add(2);hashSet.contains(2); // 返回 truehashSet.remove(2);hashSet.contains(2); // 返回 false (已经被删除) 注意: 所有的值都在 [0, 1000000]的范围内。 操作的总数目在[1, 10000]范围内。 不要使用内建的哈希集合库。 2 解法2.1 思想偷懒，已知值的范围，直接将整数值映射为哈希值，有多少个哈希值建多少个桶，用空间换时间。 2.2 代码class MyHashSet { boolean[] exist; /** Initialize your data structure here. */ public MyHashSet() { exist = new boolean[1000001]; } public void add(int key) { exist[key] = true; } public void remove(int key) { exist[key] = false; } /** Returns true if this set contains the specified element */ public boolean contains(int key) { return exist[key]; } } /** * Your MyHashSet object will be instantiated and called as such: * MyHashSet obj = new MyHashSet(); * obj.add(key); * obj.remove(key); * boolean param_3 = obj.contains(key); */","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"}]},{"title":"leetcode706-设计哈希映射","slug":"leetcode706-设计哈希映射","date":"2019-12-18T10:05:23.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/leetcode706-设计哈希映射/","link":"","permalink":"https://www.codetool.top/article/leetcode706-%E8%AE%BE%E8%AE%A1%E5%93%88%E5%B8%8C%E6%98%A0%E5%B0%84/","excerpt":"","text":"1 原题不使用任何内建的哈希表库设计一个哈希映射 具体地说，你的设计应该包含以下的功能 put(key, value)：向哈希映射中插入(键,值)的数值对。如果键对应的值已经存在，更新这个值。 get(key)：返回给定的键所对应的值，如果映射中不包含这个键，返回-1。 remove(key)：如果映射中存在这个键，删除这个数值对。 示例： MyHashMap hashMap = new MyHashMap();hashMap.put(1, 1);hashMap.put(2, 2);hashMap.get(1); // 返回 1hashMap.get(3); // 返回 -1 (未找到)hashMap.put(2, 1); // 更新已有的值hashMap.get(2); // 返回 1hashMap.remove(2); // 删除键为2的数据hashMap.get(2); // 返回 -1 (未找到) 注意: 所有的值都在 [0, 1000000]的范围内。 操作的总数目在[1, 10000]范围内。 不要使用内建的哈希库。 2 解法2.1 思想偷懒，已知值的范围，直接将整数值映射为哈希值，有多少个哈希值建多少个桶，用空间换时间。（这里时间也换不了了，毕竟给1000000个元素赋初值还是挺耗时间的） 2.2 代码class MyHashMap { int[] values; /** Initialize your data structure here. */ public MyHashMap() { values = new int[1000001]; Arrays.fill(values, -1); } /** value will always be non-negative. */ public void put(int key, int value) { values[key] = value; } /** Returns the value to which the specified key is mapped, or -1 if this map contains no mapping for the key */ public int get(int key) { return values[key]; } /** Removes the mapping of the specified value key if this map contains a mapping for the key */ public void remove(int key) { values[key] = -1; } } /** * Your MyHashMap object will be instantiated and called as such: * MyHashMap obj = new MyHashMap(); * obj.put(key,value); * int param_2 = obj.get(key); * obj.remove(key); */","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"}]},{"title":"leetcode138-复制带随机指针的链表","slug":"leetcode138-复制带随机指针的链表","date":"2019-12-17T10:05:23.000Z","updated":"2020-02-20T14:55:21.056Z","comments":true,"path":"article/leetcode138-复制带随机指针的链表/","link":"","permalink":"https://www.codetool.top/article/leetcode138-%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/","excerpt":"","text":"这道题和leetcode133-克隆图有异曲同工之妙。 1 原题给定一个链表，每个节点包含一个额外增加的随机指针，该指针可以指向链表中的任何节点或空节点。 要求返回这个链表的深拷贝。 示例： 输入:{“$id”:”1”,”next”:{“$id”:”2”,”next”:null,”random”:{“$ref”:”2”},”val”:2},”random”:{“$ref”:”2”},”val”:1} 解释:节点 1 的值是 1，它的下一个指针和随机指针都指向节点 2 。节点 2 的值是 2，它的下一个指针指向 null，随机指针指向它自己。 提示: 你必须返回给定头的拷贝作为对克隆列表的引用。 2 解法2.1 思想和leetcode133-克隆图的解法一致，甚至只需要改几行代码。 2.2 代码/* // Definition for a Node. class Node { public int val; public Node next; public Node random; public Node() {} public Node(int _val,Node _next,Node _random) { val = _val; next = _next; random = _random; } }; */ class Solution { //hashmap维持原链表和克隆链表之间节点的对应关系 Map&lt;Node, Node> lookup; public Node copyRandomList(Node head) { lookup = new HashMap&lt;>(); return dfs(head); } private Node dfs(Node node) { if (node == null) return null; //存在对应的克隆节点直接返回 if (lookup.containsKey(node)) return lookup.get(node); //先创建对应的克隆节点，next和random在递归返回的时候添加。 Node clone = new Node(node.val,null,null); lookup.put(node, clone); clone.next = dfs(node.next); clone.random = dfs(node.random); return clone; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"}]},{"title":"leetcode2-两数相加","slug":"leetcode2-两数相加","date":"2019-12-17T10:05:23.000Z","updated":"2020-02-20T14:55:21.057Z","comments":true,"path":"article/leetcode2-两数相加/","link":"","permalink":"https://www.codetool.top/article/leetcode2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/","excerpt":"","text":"1 原题给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。 如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。 您可以假设除了数字 0 之外，这两个数都不会以 0 开头。 示例： 输入： (2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)输出： 7 -&gt; 0 -&gt; 8原因： 342 + 465 = 807 2 解法2.1 思想模拟数学规则，将每一位对应的值和进位相加，将null一般化为0。 2.2 代码/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode addTwoNumbers(ListNode l1, ListNode l2) { ListNode preHead = new ListNode(0); int val1,val2,sum = 0; int carry = 0; ListNode cur = preHead; while(l1!=null || l2!=null || carry != 0){ val1 = l1==null?0:l1.val; val2 = l2==null?0:l2.val; sum = val1+val2+carry; if(sum>=10) { carry = 1; sum -= 10; }else carry = 0; cur.next = new ListNode(sum); cur = cur.next; l1 = l1 == null?null:l1.next; l2 = l2 == null?null:l2.next; } return preHead.next; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode21-合并两个有序链表","slug":"leetcode21-合并两个有序链表","date":"2019-12-17T10:05:23.000Z","updated":"2020-02-20T14:55:21.056Z","comments":true,"path":"article/leetcode21-合并两个有序链表/","link":"","permalink":"https://www.codetool.top/article/leetcode21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8/","excerpt":"","text":"1 原题将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 示例： 输入： 1-&gt;2-&gt;4, 1-&gt;3-&gt;4输出： 1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4 2 解法2.1 思想比较两个有序链表的头指针指向的值，取其中值更小的连接到一个哨兵节点后面，然后该链表的头指针向后移一格，继续和另一个节点的头指针比较。 2.2 代码/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode mergeTwoLists(ListNode l1, ListNode l2) { ListNode virtualHead = new ListNode(0); ListNode cur = virtualHead; ListNode min; while(l1!=null || l2 != null){ min = null; if(l1==null || l2!=null&amp;&amp;l1.val>=l2.val){ min = l2; l2 = l2.next; } else if(l2==null || l1!=null&amp;&amp;l2.val>l1.val){ min = l1; l1 = l1.next; } cur.next = min; cur = cur.next; } return virtualHead.next; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode430-扁平化多级双向链表","slug":"leetcode430-扁平化多级双向链表","date":"2019-12-17T10:05:23.000Z","updated":"2020-02-20T14:55:21.053Z","comments":true,"path":"article/leetcode430-扁平化多级双向链表/","link":"","permalink":"https://www.codetool.top/article/leetcode430-%E6%89%81%E5%B9%B3%E5%8C%96%E5%A4%9A%E7%BA%A7%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/","excerpt":"","text":"1 原题您将获得一个双向链表，除了下一个和前一个指针之外，它还有一个子指针，可能指向单独的双向链表。这些子列表可能有一个或多个自己的子项，依此类推，生成多级数据结构，如下面的示例所示。 扁平化列表，使所有结点出现在单级双链表中。您将获得列表第一级的头部。 示例： 输入：1—2—3—4—5—6–NULL | 7—8—9—10–NULL | 11–12–NULL 输出：1-2-3-7-8-11-12-9-10-4-5-6-NULL 以上示例的说明: 给出以下多级双向链表: 我们应该返回如下所示的扁平双向链表: 2 解法2.1 思想深度优先搜索，将每次最后一个搜索到节点记录下来，回溯的时候能继续附加在上一个节点之后。 2.2 代码/* // Definition for a Node. class Node { public int val; public Node prev; public Node next; public Node child; }; */ class Solution { Node pre = null; public Node flatten(Node head) { dfs(head); return head; } public void dfs(Node node){ if(node==null) return; Node child = node.child; Node next = node.next; node.child = null; if(pre != null){ pre.next = node; node.prev = pre; } pre = node; dfs(child); dfs(next); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"}]},{"title":"leetcode61-旋转链表","slug":"leetcode61-旋转链表","date":"2019-12-17T10:05:23.000Z","updated":"2020-02-20T14:55:21.057Z","comments":true,"path":"article/leetcode61-旋转链表/","link":"","permalink":"https://www.codetool.top/article/leetcode61-%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/","excerpt":"","text":"1 原题给定一个链表，旋转链表，将链表每个节点向右移动 k 个位置，其中 k 是非负数。 示例1： 输入： 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2输出： 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL解释:向右旋转 1 步: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL向右旋转 2 步: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL 示例2： 输入： 0-&gt;1-&gt;2-&gt;NULL, k = 4输出： 2-&gt;0-&gt;1-&gt;NULL解释:向右旋转 1 步: 2-&gt;0-&gt;1-&gt;NULL向右旋转 2 步: 1-&gt;2-&gt;0-&gt;NULL向右旋转 3 步: 0-&gt;1-&gt;2-&gt;NULL向右旋转 4 步: 2-&gt;0-&gt;1-&gt;NULL 2 解法2.1 思想连接成环，找到新起点和终点。 2.2 代码/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode rotateRight(ListNode head, int k) { if(head == null) return null; ListNode cur = head; int size = 1; //找到尾节点 while(cur.next!=null){ size++; cur = cur.next; } //连接成环 cur.next = head; //找到新的尾节点 for(int i = 0;i&lt;size-(k%size);i++){ cur = cur.next; } //新的头节点 ListNode result = cur.next; cur.next = null; return result; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode203-移除链表元素","slug":"leetcode203-移除链表元素","date":"2019-12-16T10:05:23.000Z","updated":"2020-02-20T14:55:21.056Z","comments":true,"path":"article/leetcode203-移除链表元素/","link":"","permalink":"https://www.codetool.top/article/leetcode203-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/","excerpt":"","text":"1 原题删除链表中等于给定值 val 的所有节点。 示例： 输入： 1-&gt;2-&gt;6-&gt;3-&gt;4-&gt;5-&gt;6, val = 6输出： 1-&gt;2-&gt;3-&gt;4-&gt;5 2 解法2.1 思想pre指针停留在val出现之前，cur指针越过val，让pre的next指向cur。为了处理出现头节点被删除的特殊情况，增加一个虚拟头节点。 2.2 代码/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode removeElements(ListNode head, int val) { ListNode newHead = new ListNode(0); newHead.next = head; ListNode cur = head; ListNode pre = newHead; while(cur!=null){ if(cur.val!=val){ pre.next = cur; pre = cur; } cur = cur.next; } pre.next = cur; return newHead.next; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode206-反转链表","slug":"leetcode206-反转链表","date":"2019-12-16T10:05:23.000Z","updated":"2020-03-01T16:14:47.023Z","comments":true,"path":"article/leetcode206-反转链表/","link":"","permalink":"https://www.codetool.top/article/leetcode206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/","excerpt":"","text":"1 原题反转一个单链表。 示例： 输入： 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL输出： 5-&gt;4-&gt;3-&gt;2-&gt;1-&gt;NULL 进阶： 你可以迭代或递归地反转链表。你能否用两种方法解决这道题？ 2 解法2.1 思想 迭代（两种解法） 双指针 旋转前半部分cur其实就是head 递归从最后一个节点开始回溯，将箭头倒置。 2.2 代码迭代： 双指针(作者：王尼玛) class Solution { public ListNode reverseList(ListNode head) { //申请节点，pre和 cur，pre指向null ListNode pre = null; ListNode cur = head; ListNode tmp = null; while(cur!=null) { //记录当前节点的下一个节点 tmp = cur.next; //然后将当前节点指向pre cur.next = pre; //pre和cur节点都前进一位 pre = cur; cur = tmp; } return pre; } } 旋转前半部分 /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode reverseList(ListNode head) { ListNode newHead = head; ListNode cur = head; if(head == null) return null; while(cur.next != null){ //记录不动的节点 ListNode follow = cur.next.next; //前半部分连成环 cur.next.next = newHead; newHead = cur.next; //将cur连到后半部分上 cur.next = follow; } return newHead; } } 递归： /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode reverseList(ListNode head) { //从最后一个节点回溯 if(head==null||head.next==null){ return head; } ListNode node = reverseList(head.next); //将head和head.next之间的箭头反转 head.next.next = head; head.next = null; return node; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode234-回文链表","slug":"leetcode234-回文链表","date":"2019-12-16T10:05:23.000Z","updated":"2020-02-20T14:55:21.053Z","comments":true,"path":"article/leetcode234-回文链表/","link":"","permalink":"https://www.codetool.top/article/leetcode234-%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/","excerpt":"","text":"1 原题请判断一个链表是否为回文链表。 示例1： 输入： 1-&gt;2输出： false 示例2： 输入： 1-&gt;2-&gt;2-&gt;1输出： true 进阶: 你能否用 O(n) 时间复杂度和 O(1) 空间复杂度解决此题？ 2 解法2.1 思想双指针解法：一个快指针一个慢指针，快指针每次移两步，慢指针每次移一步，这样快指针的落点有两种情况： 落在最后一个节点上，此时链表节点为奇数个，慢指针落在中间节点上。 落在最后一个节点指向的null上，此时链表节点为偶数个，慢指针落在中间靠右第一个节点上。 慢指针将链表分成了两半，将前半部分反转，再与后半部分比较，即可获取结果 2.2 代码/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ public boolean isPalindrome(ListNode head) { if(head == null || head.next == null) { return true; } ListNode slow = head, fast = head; ListNode pre = head, prepre = null; while(fast != null &amp;&amp; fast.next != null) { pre = slow; slow = slow.next; fast = fast.next.next; pre.next = prepre; prepre = pre; } //链表节点个数为奇数 if(fast != null) { slow = slow.next; } while(pre != null &amp;&amp; slow != null) { if(pre.val != slow.val) { return false; } pre = pre.next; slow = slow.next; } return true; }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode328-奇偶链表","slug":"leetcode328-奇偶链表","date":"2019-12-16T10:05:23.000Z","updated":"2020-02-20T14:55:21.053Z","comments":true,"path":"article/leetcode328-奇偶链表/","link":"","permalink":"https://www.codetool.top/article/leetcode328-%E5%A5%87%E5%81%B6%E9%93%BE%E8%A1%A8/","excerpt":"","text":"1 原题给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。 请尝试使用原地算法完成。你的算法的空间复杂度应为 O(1)，时间复杂度应为 O(nodes)，nodes 为节点总数。 示例1： 输入： 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL输出： 1-&gt;3-&gt;5-&gt;2-&gt;4-&gt;NULL 示例2： 输入： 2-&gt;1-&gt;3-&gt;5-&gt;6-&gt;4-&gt;7-&gt;NULL输出： 2-&gt;3-&gt;6-&gt;7-&gt;1-&gt;5-&gt;4-&gt;NULL 说明: 应当保持奇数节点和偶数节点的相对顺序。 链表的第一个节点视为奇数节点，第二个节点视为偶数节点，以此类推。 2 解法2.1 思想1后面只连接奇数，2后面只连接偶数，最后合二为一。 2.2 代码/** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode oddEvenList(ListNode head) { if(head == null || head.next == null) return head; ListNode oddCur=head; ListNode evenCur=head.next; ListNode evenHead = head.next; ListNode cur=evenCur.next; while(cur!=null){ oddCur.next = cur; oddCur = cur; if(cur.next!=null){ evenCur.next = cur.next; evenCur = cur.next; cur = cur.next.next; }else break; } evenCur.next = null; oddCur.next = evenHead; return head; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode19-删除链表的倒数第N个节点","slug":"leetcode19-删除链表的倒数第N个节点","date":"2019-12-15T10:05:23.000Z","updated":"2020-02-20T14:55:21.056Z","comments":true,"path":"article/leetcode19-删除链表的倒数第N个节点/","link":"","permalink":"https://www.codetool.top/article/leetcode19-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E8%8A%82%E7%82%B9/","excerpt":"","text":"1 原题给定一个链表，删除链表的倒数第 n 个节点，并且返回链表的头结点。 示例: 给定一个链表: 1-&gt;2-&gt;3-&gt;4-&gt;5, 和 n = 2. 当删除了倒数第二个节点后，链表变为 1-&gt;2-&gt;3-&gt;5. 说明: 给定的 n 保证是有效的。 进阶: 你能尝试使用一趟扫描实现吗？ 2 解法2.1 思想使用两个指针，让快指针一开始和慢指针保持n的距离，两者一起以同样速度移动，则当快指针指向链表的最后一个节点的时候，慢指针的下一个节点就是要删除的节点。 2.2 代码HashSet： /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { val = x; } * } */ class Solution { public ListNode removeNthFromEnd(ListNode head, int n) { ListNode slow; ListNode fast; slow = fast = head; for(int i = 0;i&lt;n;i++){ fast = fast.next; } //这种情况需要删除头节点 if(fast == null) return head.next; while(fast.next!=null){ fast = fast.next; slow = slow.next; } slow.next = slow.next.next; return head; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode141-环形链表","slug":"leetcode141-环形链表","date":"2019-12-14T10:05:23.000Z","updated":"2020-02-20T14:55:21.056Z","comments":true,"path":"article/leetcode141-环形链表/","link":"","permalink":"https://www.codetool.top/article/leetcode141-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/","excerpt":"","text":"1 原题给定一个链表，判断链表中是否有环。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。 示例1: 输入: head = [3,2,0,-4], pos = 1输出: true解释: 链表中有一个环，其尾部连接到第二个节点。 示例2: 输入: head = [1,2], pos = 0输出: true解释: 链表中有一个环，其尾部连接到第一个节点。 示例3: 输入: head = [1], pos = -1输出: false解释: 链表中没有环。 进阶： 你能用 O(1)（即，常量）内存解决此问题吗？ 2 解法2.1 思想 HashSet依次将获取到的链表元素插入一个HashSet中，看是否有相同元素。 双指针一个快指针一个慢指针，如果有环快指针总会赶上慢指针。 2.2 代码HashSet： /** * Definition for singly-linked list. * class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public boolean hasCycle(ListNode head) { if(head == null) return false; Set&lt;ListNode> set = new HashSet&lt;>(); ListNode cur = head; while(cur.next!=null){ if(set.contains(cur)) return true; set.add(cur); cur = cur.next; } return false; } } 双指针： /** * Definition for singly-linked list. * class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public boolean hasCycle(ListNode head) { if(head == null){ return false; } ListNode slow = head; ListNode fast = head; while (slow!=null &amp;&amp; fast!=null &amp;&amp; fast.next!=null){ slow = slow.next; fast = fast.next.next; if(slow == fast){ return true; } } return false; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode142-环形链表II","slug":"leetcode142-环形链表II","date":"2019-12-14T10:05:23.000Z","updated":"2020-02-20T14:55:21.056Z","comments":true,"path":"article/leetcode142-环形链表II/","link":"","permalink":"https://www.codetool.top/article/leetcode142-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8II/","excerpt":"","text":"1 原题给定一个链表，返回链表开始入环的第一个节点。 如果链表无环，则返回 null。 为了表示给定链表中的环，我们使用整数 pos 来表示链表尾连接到链表中的位置（索引从 0 开始）。 如果 pos 是 -1，则在该链表中没有环。 说明： 不允许修改给定的链表。 示例1: 输入: head = [3,2,0,-4], pos = 1输出: tail connects to node index 1解释: 链表中有一个环，其尾部连接到第二个节点。 示例2: 输入: head = [1,2], pos = 0输出: tail connects to node index 0解释: 链表中有一个环，其尾部连接到第一个节点。 示例3: 输入: head = [1], pos = -1输出: no cycle解释: 链表中没有环。 进阶： 你是否可以不用额外空间解决此题？ 2 解法2.1 思想 HashSet依次将获取到的链表元素插入一个HashSet中，返回第一个重复的节点。 双指针理论上慢指针和快指针在环中相遇的位置是有规律可循的：设第一个节点入环的距离为x，环的长度为y，则快指针每次走两步，慢指针每次走一步，第一次相遇经过的次数为t,则有：(t-x)%y = (2t-x)%y它等价于：(2t-x)-(t-x) = ny(n为自然数，代表第几次相遇)也就可以得出t = ny再通过第一次相遇的环上坐标为(t-x)%y，将t = y代入，得第一次相遇的环上坐标为y-x。此时，相遇点和出发点距入环点的距离都是x。于是让快指针回到出发点，两指针都以速度为1继续行走，直到相遇就是入环点。 2.2 代码HashSet： /** * Definition for singly-linked list. * class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public ListNode detectCycle(ListNode head) { if(head == null) return null; Set&lt;ListNode> set = new HashSet&lt;>(); ListNode cur = head; while(cur.next!=null){ if(set.contains(cur)) return cur; set.add(cur); cur = cur.next; } return null; } } 双指针： /** * Definition for singly-linked list. * class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public ListNode detectCycle(ListNode head){ ListNode fast = head, slow = head; boolean flag = false; while (fast != null &amp;&amp; fast.next != null){ fast = fast.next.next; slow = slow.next; if (fast == slow){ flag = true; break; } } if (!flag) return null; fast = head; while (fast != slow){ fast = fast.next; slow = slow.next; } return fast; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode160-相交链表","slug":"leetcode160-相交链表","date":"2019-12-14T10:05:23.000Z","updated":"2020-02-20T14:55:21.056Z","comments":true,"path":"article/leetcode160-相交链表/","link":"","permalink":"https://www.codetool.top/article/leetcode160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/","excerpt":"","text":"1 原题编写一个程序，找到两个单链表相交的起始节点。 如下面的两个链表： 在节点 c1 开始相交。 示例 1： 输入： intersectVal = 8, listA = [4,1,8,4,5], listB = [5,0,1,8,4,5], skipA = 2, skipB = 3输出： Reference of the node with value = 8输入解释： 相交节点的值为 8 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [4,1,8,4,5]，链表 B 为 [5,0,1,8,4,5]。在 A 中，相交节点前有 2 个节点；在 B 中，相交节点前有 3 个节点。 示例 2： 输入： intersectVal = 2, listA = [0,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1输出： Reference of the node with value = 2输入解释： 相交节点的值为 2 （注意，如果两个列表相交则不能为 0）。从各自的表头开始算起，链表 A 为 [0,9,1,2,4]，链表 B 为 [3,2,4]。在 A 中，相交节点前有 3 个节点；在 B 中，相交节点前有 1 个节点。 示例 3： 输入： intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2输出： null输入解释： 从各自的表头开始算起，链表 A 为 [2,6,4]，链表 B 为 [1,5]。由于这两个链表不相交，所以 intersectVal 必须为 0，而 skipA 和 skipB 可以是任意值。解释：这两个链表不相交，因此返回 null。 注意： 如果两个链表没有交点，返回 null. 在返回结果后，两个链表仍须保持原有的结构。 可假定整个链表结构中没有循环。 程序尽量满足 O(n) 时间复杂度，且仅用 O(1) 内存。 2 解法2.1 思想 HashSet依次将获取到的链表元素插入一个HashSet中，返回第一个重复的节点。 双指针两个指针从头走到尾的路径长度之差就是两条路径相交点前的长度之差，获取了这个差之后就可以路径短的让路径长的先走几步，然后同时出发，在相交点相遇。 2.2 代码HashSet： /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public ListNode getIntersectionNode(ListNode headA, ListNode headB) { if(headA==null || headB==null) return null; Set&lt;ListNode> set = new HashSet&lt;ListNode>(); ListNode curA = headA; ListNode curB = headB; while(curA!=null){ set.add(curA); curA = curA.next; } while(curB!=null){ if(set.contains(curB)) return curB; set.add(curB); curB = curB.next; } return null; } } 双指针： /** * Definition for singly-linked list. * public class ListNode { * int val; * ListNode next; * ListNode(int x) { * val = x; * next = null; * } * } */ public class Solution { public ListNode getIntersectionNode(ListNode headA, ListNode headB) { if(headA == null || headB == null) return null; if(headA == headB) return headA; ListNode curA = headA; ListNode curB = headB; int countA = 0; int countB = 0; //两个指针先一起走一遍 while(curA!=curB &amp;&amp; (curA.next!=null || curB.next!=null)){ if(curA.next!=null){ curA = curA.next; countA++; } if(curB.next!=null){ curB = curB.next; countB++; } } if(curA != curB) return null; //获取两条路径的长度只差 int step; ListNode longer; ListNode near; if(countA>=countB){ step = countA-countB; longer = headA; near = headB; }else{ step = countB-countA; longer = headB; near = headA; } //近的让远的先走 while(longer != near){ longer = longer.next; if(step==0) near = near.next; else step --; } return longer; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode349-两个数组的交集","slug":"leetcode349-两个数组的交集","date":"2019-12-14T10:05:23.000Z","updated":"2020-02-20T14:55:21.053Z","comments":true,"path":"article/leetcode349-两个数组的交集/","link":"","permalink":"https://www.codetool.top/article/leetcode349-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86/","excerpt":"","text":"1 原题给定两个数组，编写一个函数来计算它们的交集。 输入： nums1 = [1,2,2,1], nums2 = [2,2]输出： [2] 示例2： 输入： nums1 = [4,9,5], nums2 = [9,4,9,8,4]输出： [9,4] 2 解法2.1 思想哈希集，第一个数组中出现的数加入到集合中，第二个数组中存在集合中的数则加入到一个新的集合中，最后把第二个集合变成数组返回。 2.2 代码这种写法没有用第二个集合，但是思想是一样的，计算并集大小的过程中不要浪费时间，可以将并集元素搞在一块区域，然后复制地址空间返回。 class Solution { public int[] intersection(int[] nums1, int[] nums2) { Set&lt;Integer> set = new HashSet&lt;>(); int size = 0; for(int i:nums1){ set.add(i); } for(int i = 0;i&lt;nums2.length;i++){ if(set.contains(nums2[i])){ nums1[size] = nums2[i]; set.remove(nums2[i]); size++; } } int[] result = new int[size]; System.arraycopy(nums1,0,result,0,size); return result; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode707-设计链表","slug":"leetcode707-设计链表","date":"2019-12-14T10:05:23.000Z","updated":"2020-02-20T14:55:21.053Z","comments":true,"path":"article/leetcode707-设计链表/","link":"","permalink":"https://www.codetool.top/article/leetcode707-%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/","excerpt":"","text":"1 原题设计链表的实现。您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：val 和 next。val 是当前节点的值，next 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 prev 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。 在链表类中实现这些功能： get(index)：获取链表中第 index 个节点的值。如果索引无效，则返回-1。 addAtHead(val)：在链表的第一个元素之前添加一个值为 val 的节点。插入后，新节点将成为链表的第一个节点。 addAtTail(val)：将值为 val 的节点追加到链表的最后一个元素。 addAtIndex(index,val)：在链表中的第 index 个节点之前添加值为 val 的节点。如果 index 等于链表的长度，则该节点将附加到链表的末尾。如果 index 大于链表长度，则不会插入节点。如果index小于0，则在头部插入节点。 deleteAtIndex(index)：如果索引 index 有效，则删除链表中的第 index 个节点。 示例： MyLinkedList linkedList = new MyLinkedList();linkedList.addAtHead(1);linkedList.addAtTail(3);linkedList.addAtIndex(1,2); //链表变为1-&gt; 2-&gt; 3linkedList.get(1); //返回2linkedList.deleteAtIndex(1); //现在链表是1-&gt; 3linkedList.get(1); //返回3 提示: 所有val值都在 [1, 1000] 之内。 操作次数将在 [1, 1000] 之内。 请不要使用内置的 LinkedList 库。 2 解法2.1 思想链表的数据结构！！ 一般会有一个size和一个head，特别注意如果有tail涉及到可能更改tail的地方一定要注意更改tail。（我调试这个bug调试了一个下午😭） 2.2 代码class MyLinkedList { private class Node{ public int val; public Node next; } private int size; private Node head; private Node tail; /** Initialize your data structure here. */ public MyLinkedList() { size = 0; head = tail = null; } /** Get the value of the index-th node in the linked list. If the index is invalid, return -1. */ public int get(int index) { if(index>=size || index&lt;0) return -1; Node cur = head; for(int i = 0;i&lt;index;i++) cur = cur.next; return cur.val; } /** Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list. */ public void addAtHead(int val) { Node newHead = new Node(); newHead.val = val; newHead.next = head; if(size==0) tail = newHead; head = newHead; size++; } /** Append a node of value val to the last element of the linked list. */ public void addAtTail(int val) { Node newTail = new Node(); newTail.val = val; newTail.next = null; if(size==0) head = newTail; else tail.next = newTail; tail = newTail; size++; } /** Add a node of value val before the index-th node in the linked list. If index equals to the length of linked list, the node will be appended to the end of linked list. If index is greater than the length, the node will not be inserted. */ public void addAtIndex(int index, int val) { if(index>size) return; if(index &lt;= 0) { addAtHead(val); return; } if(index == size){ addAtTail(val); return; } Node node = new Node(); node.val = val; Node cur = head; for(int i = 0;i&lt;index-1;i++) cur = cur.next; node.next = cur.next; cur.next = node; size++; } /** Delete the index-th node in the linked list, if the index is valid. */ public void deleteAtIndex(int index) { if(index>=size || index &lt;0) return; size--; if(index == 0) { head = head.next; return; } Node cur = head; for(int i = 0;i&lt;index-1;i++) cur = cur.next; cur.next = cur.next.next; //这个地方！！！ 考虑到可能会把tail删除！！！ if(index == size){ tail = cur; } } } /** * Your MyLinkedList object will be instantiated and called as such: * MyLinkedList obj = new MyLinkedList(); * int param_1 = obj.get(index); * obj.addAtHead(val); * obj.addAtTail(val); * obj.addAtIndex(index,val); * obj.deleteAtIndex(index); */","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"}]},{"title":"leetcode225--用队列实现栈","slug":"leetcode225-用队列实现栈","date":"2019-12-13T10:05:23.000Z","updated":"2020-02-20T14:55:21.053Z","comments":true,"path":"article/leetcode225-用队列实现栈/","link":"","permalink":"https://www.codetool.top/article/leetcode225-%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/","excerpt":"","text":"1 原题使用队列实现栈的下列操作： push(x) – 元素 x 入栈 pop() – 移除栈顶元素 top() – 获取栈顶元素 empty() – 返回栈是否为空 注意: 你只能使用队列的基本操作– 也就是 push to back, peek/pop from front, size, 和 is empty 这些操作是合法的。 你所使用的语言也许不支持队列。 你可以使用 list 或者 deque（双端队列）来模拟一个队列 , 只要是标准的队列操作即可。 你可以假设所有操作都是有效的（例如, 对一个空的栈不会调用 pop 或者 top 操作）。 2 解法2.1 思想用一个队列进行插入操作，要得到队列的最后一个插入的元素可以将其他的元素先插入第二个队列，得到最后一个元素之后再把元素插入回来。 2.2 代码class MyStack { Queue&lt;Integer> queue; Queue&lt;Integer> buffer; /** Initialize your data structure here. */ public MyStack() { queue = new LinkedList&lt;>(); buffer = new LinkedList&lt;>(); } /** Push element x onto stack. */ public void push(int x) { queue.offer(x); } /** Removes the element on top of the stack and returns that element. */ public int pop() { while(queue.size()!=1){ buffer.offer(queue.poll()); } int result = queue.poll(); while(!buffer.isEmpty()){ queue.offer(buffer.poll()); } return result; } /** Get the top element. */ public int top() { while(queue.size()!=1){ buffer.offer(queue.poll()); } int result = queue.poll(); buffer.offer(result); while(!buffer.isEmpty()){ queue.offer(buffer.poll()); } return result; } /** Returns whether the stack is empty. */ public boolean empty() { return queue.isEmpty(); } } /** * Your MyStack object will be instantiated and called as such: * MyStack obj = new MyStack(); * obj.push(x); * int param_2 = obj.pop(); * int param_3 = obj.top(); * boolean param_4 = obj.empty(); */","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"}]},{"title":"leetcode232-用栈实现队列","slug":"leetcode232-用栈实现队列","date":"2019-12-13T10:05:23.000Z","updated":"2020-02-20T14:55:21.053Z","comments":true,"path":"article/leetcode232-用栈实现队列/","link":"","permalink":"https://www.codetool.top/article/leetcode232-%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/","excerpt":"","text":"1 原题使用栈实现队列的下列操作： push(x) – 将一个元素放入队列的尾部。 pop() – 从队列首部移除元素。 peek() – 返回队列首部的元素。 empty() – 返回队列是否为空。 示例: MyQueue queue = new MyQueue();queue.push(1);queue.push(2);queue.peek(); // 返回 1queue.pop(); // 返回 1queue.empty(); // 返回 false 说明: 你只能使用标准的栈操作 – 也就是只有 push to top, peek/pop from top, size, 和 is empty 操作是合法的。 你所使用的语言也许不支持栈。你可以使用 list 或者 deque（双端队列）来模拟一个栈，只要是标准的栈操作即可。 假设所有操作都是有效的 （例如，一个空的队列不会调用 pop 或者 peek 操作）。 2 解法2.1 思想用一个栈进行插入操作，要得到栈的第一个插入的元素需要再用一个栈将第一个栈中的元素次序翻转过来，得到第一个元素，再依次压栈回去。 2.2 代码class MyQueue { public Stack&lt;Integer> stack; public Stack&lt;Integer> reverse; /** Initialize your data structure here. */ public MyQueue() { stack = new Stack&lt;>(); reverse = new Stack&lt;>(); } /** Push element x to the back of queue. */ public void push(int x) { stack.push(x); } /** Removes the element from in front of queue and returns that element. */ public int pop() { while(!stack.empty()){ reverse.push(stack.pop()); } int result = reverse.pop(); while(!reverse.empty()){ stack.push(reverse.pop()); } return result; } /** Get the front element. */ public int peek() { while(!stack.empty()){ reverse.push(stack.pop()); } int result = reverse.peek(); while(!reverse.empty()){ stack.push(reverse.pop()); } return result; } /** Returns whether the queue is empty. */ public boolean empty() { return stack.empty(); } } /** * Your MyQueue object will be instantiated and called as such: * MyQueue obj = new MyQueue(); * obj.push(x); * int param_2 = obj.pop(); * int param_3 = obj.peek(); * boolean param_4 = obj.empty(); */","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"}]},{"title":"leetcode394-字符串解码","slug":"leetcode394-字符串解码","date":"2019-12-13T10:05:23.000Z","updated":"2019-12-19T08:18:18.962Z","comments":true,"path":"article/leetcode394-字符串解码/","link":"","permalink":"https://www.codetool.top/article/leetcode394-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E7%A0%81/","excerpt":"","text":"1 原题给定一个经过编码的字符串，返回它解码后的字符串。 编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。 你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。 此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。 示例: s = “3[a]2[bc]”, 返回 “aaabcbc”.s = “3[a2[c]]”, 返回 “accaccacc”.s = “2[abc]3[cd]ef”, 返回 “abcabccdcdcdef”. 2 解法2.1 思想DFS，只处理字符串中不包含括号的，遇到带括号的将其分解。 2.2 代码class Solution { public String decodeString(String s) { return multify(1,s); } public String multify(int repeat,String s){ StringBuilder sb = new StringBuilder(); //字符串中不带括号 if(s.indexOf('[') == -1){ for(int i = 0;i&lt;repeat;i++){ sb.append(s); } return sb.toString(); }else{ //未匹配括号的个数 int count = 0; //第一个数字出现的index int firstNumberIndex = 0; //第一个左括号出现的index int firstLeftIndex = 0; boolean firstNumberHasShown = false; for(int i = 0;i&lt;s.length();i++){ //如果是数字记录第一个数字出现的index if(s.charAt(i)>='0'&amp;&amp;s.charAt(i)&lt;='9'){ if(firstNumberHasShown == false){ firstNumberIndex = i; firstNumberHasShown = true; } } //如果是左括号记录第一个左括号出现的index else if(s.charAt(i) == '['){ if(count == 0) firstLeftIndex = i; count ++; } //如果是右括号则未匹配的左括号数量减一，如果全部匹配完则把repeat和substring递归处理。 else if(s.charAt(i) == ']'){ count --; if(count == 0) { firstNumberHasShown = false; int repeatNum = Integer.valueOf(s.substring(firstNumberIndex,firstLeftIndex)); String subString = s.substring(firstLeftIndex+1,i); sb.append(multify(repeatNum,subString)); } } else if(count==0){ sb.append(s.charAt(i)); } } } return multify(repeat,sb.toString()); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"leetcode542-01矩阵","slug":"leetcode542-01矩阵","date":"2019-12-13T10:05:23.000Z","updated":"2020-02-20T14:55:21.053Z","comments":true,"path":"article/leetcode542-01矩阵/","link":"","permalink":"https://www.codetool.top/article/leetcode542-01%E7%9F%A9%E9%98%B5/","excerpt":"","text":"1 原题给定一个由 0 和 1 组成的矩阵，找出每个元素到最近的 0 的距离。 两个相邻元素间的距离为 1 。 示例1: 输入: 0 0 00 1 00 0 0 输出: 0 0 00 1 00 0 0 示例2: 输入: 0 0 00 1 01 1 1 输出: 0 0 00 1 01 2 1 注意: 给定矩阵的元素个数不超过 10000。 给定矩阵中至少有一个元素是 0。 矩阵中的元素只在四个方向上相邻: 上、下、左、右。 2 解法2.1 思想 BFS：先将所有0标记出，然后紧挨0未被标记出的就是1，标记所有1，紧挨1未被标记出的就是2…… 动态规划：依次遍历每个元素，如果四周有0就是1，如果没有也不是0就根据所有相邻元素对应的值中的最小值+1获得。 2.2 代码BFS： class Solution { class Point{ public int x; public int y; public Point(int x,int y){ this.x = x; this.y = y; } } public int[][] floodFill(int[][] image, int sr, int sc, int newColor) { Queue&lt;Point> queue = new LinkedList&lt;>(); queue.offer(new Point(sr,sc)); int origin = image[sr][sc]; int height = image.length; int width = image[0].length; if(newColor == origin) return image; while(!queue.isEmpty()){ Point point = queue.poll(); image[point.x][point.y] = newColor; if(point.x!=height-1 &amp;&amp; image[point.x+1][point.y] == origin){ queue.offer(new Point(point.x+1,point.y)); } if(point.x!=0 &amp;&amp; image[point.x-1][point.y] == origin){ queue.offer(new Point(point.x-1,point.y)); } if(point.y!=width-1 &amp;&amp; image[point.x][point.y+1] == origin){ queue.offer(new Point(point.x,point.y+1)); } if(point.y!= 0&amp;&amp; image[point.x][point.y-1] == origin){ queue.offer(new Point(point.x,point.y-1)); } } return image; } } 动态规划： class Solution { public int[][] updateMatrix(int[][] matrix) { int m = matrix.length ; int n = matrix[0].length; int[][] dp = new int[m][n]; for(int i = 0;i &lt; m; i++){ for(int j = 0; j &lt; n; j++){ dp[i][j] = dfs(matrix, dp, i, j); } } return dp; } public static int dfs(int[][] matrix,int[][] dp, int i, int j){ int m = matrix.length ; int n = matrix[0].length; if(i&lt;0 || i>m-1 || j &lt; 0 || j > n-1) return 9999; // 如果自身是0 if(matrix[i][j] == 0) return 0; // 如果四周有0 if(i > 0 &amp;&amp; matrix[i-1][j] == 0) return 1; if(j &lt; n-1 &amp;&amp; matrix[i][j+1] == 0) return 1; if(i &lt; m-1 &amp;&amp; matrix[i+1][j] == 0) return 1; if(j>0 &amp;&amp; matrix[i][j-1] == 0) return 1; // 如果四周没有0根据四周的dp最小值+1获取 int left,bottom,right,top; left=top=9999; if(i > 0 &amp;&amp; dp[i-1][j] != 0){ top = dp[i-1][j]; } if(j> 0 &amp;&amp; dp[i][j-1] != 0){ left = dp[i][j-1]; } bottom = dfs(matrix, dp,i+1, j); right = dfs(matrix, dp,i,j+1); return Math.min(Math.min(left, right), Math.min(top,bottom))+1; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode733-图像渲染","slug":"leetcode733-图像渲染","date":"2019-12-13T10:05:23.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/leetcode733-图像渲染/","link":"","permalink":"https://www.codetool.top/article/leetcode733-%E5%9B%BE%E5%83%8F%E6%B8%B2%E6%9F%93/","excerpt":"","text":"1 原题有一幅以二维整数数组表示的图画，每一个整数表示该图画的像素值大小，数值在 0 到 65535 之间。 给你一个坐标 (sr, sc) 表示图像渲染开始的像素值（行 ，列）和一个新的颜色值 newColor，让你重新上色这幅图像。 为了完成上色工作，从初始坐标开始，记录初始坐标的上下左右四个方向上像素值与初始坐标相同的相连像素点，接着再记录这四个方向上符合条件的像素点与他们对应四个方向上像素值与初始坐标相同的相连像素点，……，重复该过程。将所有有记录的像素点的颜色值改为新的颜色值。 最后返回经过上色渲染后的图像。 示例1: 输入:image = [[1,1,1],[1,1,0],[1,0,1]]sr = 1, sc = 1, newColor = 2输出: [[2,2,2],[2,2,0],[2,0,1]]解析:在图像的正中间，(坐标(sr,sc)=(1,1)),在路径上所有符合条件的像素点的颜色都被更改成2。注意，右下角的像素没有更改为2，因为它不是在上下左右四个方向上与初始点相连的像素点。 注意: image 和 image[0] 的长度在范围 [1, 50] 内。 给出的初始点将满足 0 &lt;= sr &lt; image.length 和 0 &lt;= sc &lt; image[0].length。 image[i][j] 和 newColor 表示的颜色值在范围 [0, 65535]内。 2 解法2.1 思想图的BFS 2.2 代码class Solution { class Point{ public int x; public int y; public Point(int x,int y){ this.x = x; this.y = y; } } public int[][] floodFill(int[][] image, int sr, int sc, int newColor) { Queue&lt;Point> queue = new LinkedList&lt;>(); queue.offer(new Point(sr,sc)); int origin = image[sr][sc]; int height = image.length; int width = image[0].length; if(newColor == origin) return image; while(!queue.isEmpty()){ Point point = queue.poll(); image[point.x][point.y] = newColor; if(point.x!=height-1 &amp;&amp; image[point.x+1][point.y] == origin){ queue.offer(new Point(point.x+1,point.y)); } if(point.x!=0 &amp;&amp; image[point.x-1][point.y] == origin){ queue.offer(new Point(point.x-1,point.y)); } if(point.y!=width-1 &amp;&amp; image[point.x][point.y+1] == origin){ queue.offer(new Point(point.x,point.y+1)); } if(point.y!= 0&amp;&amp; image[point.x][point.y-1] == origin){ queue.offer(new Point(point.x,point.y-1)); } } return image; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"BFS","slug":"BFS","permalink":"https://www.codetool.top/tags/BFS/"}]},{"title":"leetcode841-钥匙和房间","slug":"leetcode841-钥匙和房间","date":"2019-12-13T10:05:23.000Z","updated":"2019-12-19T08:19:32.625Z","comments":true,"path":"article/leetcode841-钥匙和房间/","link":"","permalink":"https://www.codetool.top/article/leetcode841-%E9%92%A5%E5%8C%99%E5%92%8C%E6%88%BF%E9%97%B4/","excerpt":"","text":"1 原题有 N 个房间，开始时你位于 0 号房间。每个房间有不同的号码：0，1，2，...，N-1，并且房间里可能有一些钥匙能使你进入下一个房间。 在形式上，对于每个房间 i 都有一个钥匙列表 rooms[i]，每个钥匙 rooms[i][j] 由 [0,1，...，N-1] 中的一个整数表示，其中 N = rooms.length。 钥匙 rooms[i][j] = v 可以打开编号为 v 的房间。 最初，除 0 号房间外的其余所有房间都被锁住。 你可以自由地在房间之间来回走动。 如果能进入每个房间返回 true，否则返回 false。 示例 1: 输入: [[1],[2],[3],[]]输出： true解释：我们从 0 号房间开始，拿到钥匙 1。之后我们去 1 号房间，拿到钥匙 2。然后我们去 2 号房间，拿到钥匙 3。最后我们去了 3 号房间。由于我们能够进入每个房间，我们返回 true。 示例 2: 输入: [[1,3],[3,0,1],[2],[0]]输出： false解释： 我们不能进入 2 号房间。 提示： 1 &lt;= rooms.length &lt;= 1000 0 &lt;= rooms[i].length &lt;= 1000 所有房间中的钥匙数量总计不超过 3000。 2 解法2.1 思想BFS搜索，记录去过哪些房间。 2.2 代码class Solution { public boolean canVisitAllRooms(List&lt;List&lt;Integer>> rooms) { int size = rooms.size(); int[] mark = new int[size]; mark[0] = 1; Queue&lt;List&lt;Integer>> queue = new LinkedList&lt;>(); queue.offer(rooms.get(0)); while(!queue.isEmpty()){ List&lt;Integer> room = queue.poll(); for(int i:room){ if(mark[i]==0){ queue.offer(rooms.get(i)); mark[i] = 1; } } } for(int i:mark){ if(i==0) return false; } return true; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"BFS","slug":"BFS","permalink":"https://www.codetool.top/tags/BFS/"}]},{"title":"leetcode133-克隆图","slug":"leetcode133-克隆图","date":"2019-12-12T10:05:23.000Z","updated":"2020-02-20T14:55:21.056Z","comments":true,"path":"article/leetcode133-克隆图/","link":"","permalink":"https://www.codetool.top/article/leetcode133-%E5%85%8B%E9%9A%86%E5%9B%BE/","excerpt":"","text":"1 原题给定无向连通图中一个节点的引用，返回该图的深拷贝（克隆）。图中的每个节点都包含它的值 val（Int） 和其邻居的列表（list[Node]）。 示例: 输入: {&quot;$id&quot;:&quot;1&quot;,&quot;neighbors&quot;:[{&quot;$id&quot;:&quot;2&quot;,&quot;neighbors&quot;:[{&quot;$ref&quot;:&quot;1&quot;},{&quot;$id&quot;:&quot;3&quot;,&quot;neighbors&quot;:[{&quot;$ref&quot;:&quot;2&quot;},{&quot;$id&quot;:&quot;4&quot;,&quot;neighbors&quot;:[{&quot;$ref&quot;:&quot;3&quot;},{&quot;$ref&quot;:&quot;1&quot;}],&quot;val&quot;:4}],&quot;val&quot;:3}],&quot;val&quot;:2},{&quot;$ref&quot;:&quot;4&quot;}],&quot;val&quot;:1}解释:节点 1 的值是 1，它有两个邻居：节点 2 和 4 。节点 2 的值是 2，它有两个邻居：节点 1 和 3 。节点 3 的值是 3，它有两个邻居：节点 2 和 4 。节点 4 的值是 4，它有两个邻居：节点 1 和 3 。 2 解法2.1 思想Hashmap维持原图节点和克隆节点的对应关系，如果给邻居节点赋值的时候不存在对应的克隆节点则获取对应的克隆节点，直到有一个节点的邻居节点的克隆节点都存在于map中。 2.2 代码/* // Definition for a Node. class Node { public int val; public List&lt;Node> neighbors; public Node() {} public Node(int _val,List&lt;Node> _neighbors) { val = _val; neighbors = _neighbors; } }; */ class Solution { //hashmap维持原图和克隆图之间节点的对应关系 Map&lt;Node, Node> lookup; public Node cloneGraph(Node node) { lookup = new HashMap&lt;>(); return dfs(node); } //每一次dfs操作实际上就是确保存在node节点的复制节点 private Node dfs(Node node) { if (node == null) return null; //存在对应的克隆节点直接返回 if (lookup.containsKey(node)) return lookup.get(node); //先创建对应的克隆节点，邻居列表在递归返回的时候添加。 Node clone = new Node(node.val, new ArrayList&lt;>()); lookup.put(node, clone); for (Node n : node.neighbors) //添加n的克隆节点 clone.neighbors.add(dfs(n)); return clone; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"}]},{"title":"leetcode150-逆波兰表达式求值","slug":"leetcode150-逆波兰表达式求值","date":"2019-12-12T10:05:23.000Z","updated":"2020-02-20T14:55:21.057Z","comments":true,"path":"article/leetcode150-逆波兰表达式求值/","link":"","permalink":"https://www.codetool.top/article/leetcode150-%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/","excerpt":"","text":"1 原题根据逆波兰表示法，求表达式的值。 有效的运算符包括 +, -, *, / 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。 说明： 整数除法只保留整数部分。 给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。 示例1: 输入: [“2”, “1”, “+”, “3”, “”]*输出:** 9解释: ((2 + 1) * 3) = 9 示例2: 输入: [“4”, “13”, “5”, “/“, “+”]输出: 6解释: (4 + (13 / 5)) = 6 示例3: 输入: [“10”, “6”, “9”, “3”, “+”, “-11”, “”, “/“, “”, “17”, “+”, “5”, “+”]输出: 22解释: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5= ((10 * (6 / (12 * -11))) + 17) + 5= ((10 * (6 / -132)) + 17) + 5= ((10 * 0) + 17) + 5= (0 + 17) + 5= 17 + 5= 22 2 解法2.1 思想最底层必是一个能运算的最小单元，只要将后序遍历的结果依次入栈，遇到一个运算符则让两个数字出栈，计算结果之后再将结果入栈，如此循环最后就能得到答案。 2.2 代码class Solution { public int evalRPN(String[] tokens) { Stack&lt;Integer> stack = new Stack&lt;>(); for(String i:tokens){ if(i.equals(\"+\")){ int num1 = Integer.valueOf(stack.pop()); int num2 = Integer.valueOf(stack.pop()); stack.push(num1+num2); }else if(i.equals(\"-\")){ int num1 = Integer.valueOf(stack.pop()); int num2 = Integer.valueOf(stack.pop()); stack.push(num2-num1); }else if(i.equals(\"*\")){ int num1 = Integer.valueOf(stack.pop()); int num2 = Integer.valueOf(stack.pop()); stack.push(num1*num2); }else if(i.equals(\"/\")){ int num1 = Integer.valueOf(stack.pop()); int num2 = Integer.valueOf(stack.pop()); stack.push(num2/num1); }else{ stack.push(Integer.valueOf(i)); } } return stack.peek(); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode494-目标和","slug":"leetcode494-目标和","date":"2019-12-12T10:05:23.000Z","updated":"2019-12-19T08:18:26.367Z","comments":true,"path":"article/leetcode494-目标和/","link":"","permalink":"https://www.codetool.top/article/leetcode494-%E7%9B%AE%E6%A0%87%E5%92%8C/","excerpt":"","text":"1 原题给定一个非负整数数组，a1, a2, …, an, 和一个目标数，S。现在你有两个符号 + 和 -。对于数组中的任意一个整数，你都可以从 + 或 -中选择一个符号添加在前面。 返回可以使最终数组和为目标数 S 的所有添加符号的方法数。 示例 1: 输入: nums: [1, 1, 1, 1, 1], S: 3输出: 5解释:-1+1+1+1+1 = 3+1-1+1+1+1 = 3+1+1-1+1+1 = 3+1+1+1-1+1 = 3+1+1+1+1-1 = 3一共有5种方法让最终目标和为3。 注意: 数组非空，且长度不会超过20。 初始的数组的和不会超过1000。 保证返回的最终结果能被32位整数存下。 2 解法2.1 思想DFS比较暴力，追求时间快可以用01背包问题的动态规划思想，以后更。 2.2 代码class Solution { public int[] numsArray; public int target; public int findTargetSumWays(int[] nums, int S) { numsArray = nums; target = S; return dfs(0,0); } public int dfs(int index,int sum){ if(index == numsArray.length){ if(sum == target) return 1; else return 0; } return dfs(index+1,sum+numsArray[index])+dfs(index+1,sum-numsArray[index]); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"}]},{"title":"leetcode94-二叉树的中序遍历","slug":"leetcode94-二叉树的中序遍历","date":"2019-12-12T10:05:23.000Z","updated":"2020-02-20T14:55:21.056Z","comments":true,"path":"article/leetcode94-二叉树的中序遍历/","link":"","permalink":"https://www.codetool.top/article/leetcode94-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86/","excerpt":"","text":"1 原题给定一个二叉树，返回它的 中序 遍历。 示例: 输入: [1,null,2,3]&nbsp;1&nbsp;&nbsp;\\&nbsp;&nbsp;&nbsp;2&nbsp;&nbsp;/&nbsp;3输出: [1,3,2] 进阶: 递归算法很简单，你可以通过迭代算法完成吗？ 2 解法2.1 思想DFS，递归方法着实很简单，迭代很抽象。 2.2 代码递归： /** * Definition for a binary tree node. * public class TreeNode { * int val; * TreeNode left; * TreeNode right; * TreeNode(int x) { val = x; } * } */ class Solution { List&lt;Integer> ans = new ArrayList&lt;>(); public List&lt;Integer> inorderTraversal(TreeNode root) { if(root!=null){ inorderTraversal(root.left); ans.add(root.val); inorderTraversal(root.right); } return ans; } } 迭代，我一开始这么写的，用一个HashSet记录栈存储过的节点： class Solution { public List&lt;Integer> inorderTraversal(TreeNode root) { Stack&lt;TreeNode> stack = new Stack&lt;>(); List&lt;Integer> ans = new ArrayList&lt;>(); Set&lt;TreeNode> set = new HashSet&lt;>(); stack.push(root); if(root == null) return ans; while(!stack.empty()){ TreeNode node = stack.peek(); if(null!=node.left &amp;&amp; !set.contains(node.left)) { stack.push(node.left); set.add(node.left); } else{ ans.add(node.val); stack.pop(); if(null!=node.right) stack.push(node.right); node = null; } } return ans; } } 然后看到官方的写法，这才是递归转化过来的写法： public class Solution { public List &lt;Integer> inorderTraversal(TreeNode root) { List &lt;Integer> res = new ArrayList&lt;>(); Stack &lt;TreeNode> stack = new Stack&lt;>(); TreeNode curr = root; while (curr != null || !stack.isEmpty()) { while (curr != null) { stack.push(curr); curr = curr.left; } curr = stack.pop(); res.add(curr.val); curr = curr.right; } return res; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"}]},{"title":"leetcode155-最小栈","slug":"leetcode155-最小栈","date":"2019-12-11T10:05:23.000Z","updated":"2020-02-20T14:55:21.056Z","comments":true,"path":"article/leetcode155-最小栈/","link":"","permalink":"https://www.codetool.top/article/leetcode155-%E6%9C%80%E5%B0%8F%E6%A0%88/","excerpt":"","text":"1 原题设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。 push(x) – 将元素 x 推入栈中。 pop() – 删除栈顶的元素。 top() – 获取栈顶元素。 getMin() – 检索栈中的最小元素。 示例: MinStack minStack = new MinStack();minStack.push(-2);minStack.push(0);minStack.push(-3);minStack.getMin(); –&gt; 返回 -3.minStack.pop();minStack.top(); –&gt; 返回 0.minStack.getMin(); –&gt; 返回 -2. 2 解法2.1 思想用list实现栈，再用一个stack保存着入栈期间出现过的所有最小数。（栈首元素表示在某个时刻list中最小的数）。 2.2 代码class MinStack { public List&lt;Integer> list; public Stack&lt;Integer> stack; /** initialize your data structure here. */ public MinStack() { list = new ArrayList&lt;>(); stack = new Stack&lt;>(); } public void push(int x) { //添加元素时，如果最小数栈是空的或者该元素比栈首元素要小，则入栈 if(stack.empty()||x&lt;=stack.peek()) stack.push(x); list.add(x); } public void pop() { //移除元素时，如果移除的元素是最小数栈的栈首元素，那么栈首元素也要出栈 if(stack.peek().equals(list.get(list.size()-1))) stack.pop(); list.remove(list.size()-1); } public int top() { return list.get(list.size()-1); } public int getMin() { //最小数栈的栈首元素 return stack.peek(); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"}]},{"title":"leetcode20-有效的括号","slug":"leetcode20-有效的括号","date":"2019-12-11T10:05:23.000Z","updated":"2020-02-20T14:55:21.062Z","comments":true,"path":"article/leetcode20-有效的括号/","link":"","permalink":"https://www.codetool.top/article/leetcode20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/","excerpt":"","text":"1 原题给定一个只包括 &#39;(&#39;，&#39;)&#39;，&#39;{&#39;，&#39;}&#39;，&#39;[&#39;，&#39;]&#39; 的字符串，判断字符串是否有效。 有效字符串需满足： 左括号必须用相同类型的右括号闭合。 左括号必须以正确的顺序闭合。 注意空字符串可被认为是有效字符串。 示例1: 输入: “()”输出: true 示例2: 输入: “()[]{}”输出: true 示例3: 输入: “(]”输出: false 示例4: 输入: “([)]”输出: false 示例5: 输入: “{[]}”输出: true 2 解法2.1 思想左括号全部入栈，如果是右括号寻找栈首是否为对应的左括号，存在就将左括号出栈，直到栈元素全部清空。 2.2 代码class Solution { public boolean isValid(String s) { if(s.equals(\"\")) return true; Stack&lt;Character> stack = new Stack&lt;>(); for(char c:s.toCharArray()){ if(c=='('||c=='['||c=='{'){ stack.push(c); } if(c == ')'){ if(!stack.empty()&amp;&amp;stack.peek().equals('(')) stack.pop(); else return false; } if(c == ']'){ if(!stack.empty()&amp;&amp;stack.peek().equals('[')) stack.pop(); else return false; } if(c == '}'){ if(!stack.empty()&amp;&amp;stack.peek().equals('{')) stack.pop(); else return false; } } if(stack.empty()) return true; return false; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode279-完全平方数","slug":"leetcode279-完全平方数","date":"2019-12-11T10:05:23.000Z","updated":"2019-12-19T08:18:18.960Z","comments":true,"path":"article/leetcode279-完全平方数/","link":"","permalink":"https://www.codetool.top/article/leetcode279-%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/","excerpt":"","text":"1 原题给定正整数 n，找到若干个完全平方数（比如 1, 4, 9, 16, …）使得它们的和等于 n。你需要让组成和的完全平方数的个数最少。 示例 1: 输入: n = 12输出: 3解释: 12 = 4 + 4 + 4. 示例 2: 输入: n = 13输出: 2解释: 13 = 4 + 9. 2 解法2.1 思想以12为例。 这道题确实对时间要求比较严格，如果不过滤掉重复计算的部分会无法通过。 从目标数出发自顶向下： 由已知的目标数出发，减去比它小的平方数，这样一层一层减下去，直到获得0的那一层的层数就是答案。 需要过滤掉数值重复的节点，比如11-4和8-1。 从平方数出发自底向上： 由比已知目标数小的所有平方数出发，每层做一个组合加法，但是有一些地方需要处理： 遇到数值相等的节点，如1+4和4+1，跳过该节点。 在组合的时候遇到从一个数开始，加上它就会大于目标数，那么它之后的平方数都可以不做组合了，因为都比它大。 2.2 代码自顶向下： class Node{ public int value; public int depth; public Node(int value,int depth){ this.value = value; this.depth = depth; } } class Solution { public int numSquares(int n) { int mark[] = new int[n]; if(n&lt;4) return n; Queue&lt;Node> queue = new LinkedList&lt;>(); queue.offer(new Node(n,0)); while(!queue.isEmpty()){ Node node = queue.poll(); if(node.value==0) return node.depth; int sqrt = (int)Math.sqrt(node.value); for(int i = sqrt; i > 0 ; i--){ if(mark[node.value-i*i]==0){ queue.offer(new Node(node.value-i*i,node.depth+1)); mark[node.value-i*i] = 1; } } } return -1; } } 自底向上 class Node{ public int value; public int depth; public Node(int value,int depth){ this.value = value; this.depth = depth; } } class Solution { public int numSquares(int n) { Queue&lt;Node> queue = new LinkedList&lt;>(); int a = (int)Math.sqrt(n); int[] mark = new int[n+1]; for(int i = a;i>a/2;i--){ queue.offer(new Node(i*i,1)); mark[i*i] = 1; } while(!queue.isEmpty()){ Node node = queue.poll(); int value = node.value; if(value==n) return node.depth; for(int i = 1;i&lt;=a;i++){ if(value+i*i>n) break; if(mark[value+i*i]==1) continue; queue.offer(new Node(value+i*i,node.depth+1)); mark[value+i*i] = 1; } } return -1; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"BFS","slug":"BFS","permalink":"https://www.codetool.top/tags/BFS/"}]},{"title":"leetcode739-每日温度","slug":"leetcode739-每日温度","date":"2019-12-11T10:05:23.000Z","updated":"2020-02-20T14:55:21.052Z","comments":true,"path":"article/leetcode739-每日温度/","link":"","permalink":"https://www.codetool.top/article/leetcode739-%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/","excerpt":"","text":"1 原题根据每日 气温 列表，请重新生成一个列表，对应位置的输入是你需要再等待多久温度才会升高超过该日的天数。如果之后都不会升高，请在该位置用 0 来代替。 例如，给定一个列表 temperatures = [73, 74, 75, 71, 69, 72, 76, 73]，你的输出应该是 [1, 1, 4, 2, 1, 1, 0, 0]。 提示： 气温 列表长度的范围是 [1, 30000]。每个气温的值的均为华氏度，都是在 [30, 100] 范围内的整数。 2 解法2.1 思想 基础栈解法：时间复杂度O(nlog n)将数组元素依次入栈，如果当前元素比栈首元素大则将栈首元素出栈，并知道了和栈首元素之间的距离。再次和下一个栈首元素比较，如此循环。 逆序跳跃：时间复杂度O(n)https://leetcode-cn.com/problems/daily-temperatures/solution/jie-ti-si-lu-by-pulsaryu/ 2.2 代码 基础栈 class Node{ public int value; public int pos; public Node(int value,int pos){ this.value = value; this.pos = pos; } } class Solution { public int[] dailyTemperatures(int[] T) { Stack&lt;Node> stack = new Stack&lt;>(); int[] ans = new int[T.length]; for(int i = 0;i&lt;T.length;i++){ while(!stack.empty()&amp;&amp;T[i]>stack.peek().value){ Node node = stack.pop(); ans[node.pos] = i - node.pos; } stack.push(new Node(T[i],i)); } while(!stack.empty()){ Node node = stack.pop(); ans[node.pos] = 0; } return ans; } } 逆序跳跃（作者：pulsaryu） public int[] dailyTemperatures(int[] T) { int length = T.length; int[] result = new int[length]; //从右向左遍历 for (int i = length - 2; i >= 0; i--) { // j+= result[j]是利用已经有的结果进行跳跃 for (int j = i + 1; j &lt; length; j+= result[j]) { if (T[j] > T[i]) { result[i] = j - i; break; } else if (result[j] == 0) { //遇到0表示后面不会有更大的值，那当然当前值就应该也为0 result[i] = 0; break; } } } return result; }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"用hexo的live2d插件做了一个可以聊天的小宠物","slug":"用hexo的live2d插件做了一个可以聊天的小宠物","date":"2019-12-10T10:05:23.000Z","updated":"2019-12-19T08:20:11.867Z","comments":true,"path":"article/用hexo的live2d插件做了一个可以聊天的小宠物/","link":"","permalink":"https://www.codetool.top/article/%E7%94%A8hexo%E7%9A%84live2d%E6%8F%92%E4%BB%B6%E5%81%9A%E4%BA%86%E4%B8%80%E4%B8%AA%E5%8F%AF%E4%BB%A5%E8%81%8A%E5%A4%A9%E7%9A%84%E5%B0%8F%E5%AE%A0%E7%89%A9/","excerpt":"","text":"今天觉得我的博客有点小小的简陋，就做了一点美化工作 主要使用hexo的live2d插件（感谢作者），搭配上机器人对话api，做了一个可以聊天的小宠物。 本来是在live2d的github主页上看到了有dialog这个配置选项，一开始以为就是可以配置一个交互式的聊天窗口。 dialog配置 然后发现使用一言api只是过个几秒钟给你弹一句话看看，也没有其他的api选项可以配置，在百度上一搜好像也没有多少人写过关于这个dialog的用法。 然后我看了下它生成的源码： 组件结构 live2d-widget是整个组件的div，里面有一个live2d-widget-dialog就是卡通形象上面的那个对话框，live2dcanvas就是画卡通形象的画布。如果要让对话框显示文字，就是修改class名为live2d-widget-dialog的div的innerHtml。 既然没有提供相关的对话api，那就手动做一个吧。 1 live2d安装你既然看到了这篇文章，我就假设你知道live2d是什么 (看板娘) 。在hexo安装live2d插件的方式很简单： npm install --save hexo-helper-live2d 然后选一个心仪的模型安装，模型的预览可以参考插件作者的博客： https://huaji8.top/post/live2d-plugin-2.0/ 模型的名称参考： https://github.com/xiazeyu/live2d-widget-models npm install --save 模型名称 然后在hexo根目录下的_config.yml中配置live2d： #live2d live2d: enable: true scriptFrom: local model: use: live2d-widget-model-wanko #模型选择 display: position: right #模型位置 width: 200 #模型宽度 height: 200 #模型高度 hOffset: 20 #水平偏移 vOffset: 100 #垂直偏移 mobile: show: false #是否在手机端显示 dialog: enable: true #启用对话框 hitokoto: false 具体的配置可以参考： https://l2dwidget.js.org/docs/class/src/index.js~L2Dwidget.html#instance-method-init 2 组件改造2.1 在模型下方增加一个input输入框因为我把模型放在了右边，并且水平偏移和垂直偏移都是已知的。要在它的下方增加一个输入框，找到hexo中/themes/你的主题/layout/layout.ejs文件，在里面body标签中末尾添加： &lt;div id=\"chat_input\"> &lt;input id=\"question\" type=\"text\" placeholder=\"陪我聊聊天吧\" onkeypress=\"return onKeyPress(event)\"/> &lt;/div> 然后在文件尾部配置它的样式： &lt;style> #chat_input{ width: 200px; height: 40px; position: fixed; bottom: 80px; right: 20px; } #question{ border: none;/*取消输入框边框*/ border-bottom: 1px #aaaaaa solid;/*设置下边框*/ background-color: transparent;/*背景透明*/ padding: 5px; } /*手机端不显示*/ @media screen and (max-width: 480px) { #chat_input{ display: none; } #live2d-widget{ display: none; } } &lt;/style> 输入框就做好了。 2.2 聊天逻辑实现要做到智能聊天需要一个聊天机器人的api，有图灵机器人、小i机器人等可以选择。 我这里用的是茉莉机器人，就不推荐大家使用了，小小吐槽一下这个开发者好像不是很懂后端api，鉴权方式有点奇怪 (人间迷惑行为大赏)。 获取了api之后就可以做输入框的事件处理：（因为我的主题不包含jQuery我也懒得引，就用的原生js） //在聊天框按下回车事件处理 function onKeyPress(e){ var keyCode = null; if(e.which) keyCode = e.which; else if(e.keyCode) keyCode = e.keyCode; //如果按下回车 if(keyCode == 13) { // 获取输入框中的问题 var question_box = document.getElementById('question') var question = question_box.value //清空输入框内容并禁用输入框 question_box.value = \"\" question_box.setAttribute(\"disabled\",\"disabled\") //不要问我为什么不隐藏这个:） var api_key = \"78c33a07808c7b9e1905c89c88b3be14\" var api_secret = \"q707tevnk00f\" // 通过XHR发送一个GET请求 var xhr = new XMLHttpRequest() xhr.open('GET','http://i.itpk.cn/api.php?question='+encodeURIComponent(question)+\"&amp;api_key=\"+api_key+\"&amp;api_secret=\"+api_secret) xhr.onload = function(){ //启用输入框 question_box.removeAttribute('disabled'); //获取对话框 var live2d_dialog = document.getElementsByClassName(\"live2d-widget-dialog\")[0] //显示对话框并把获取到的内容显示在对话框上 live2d_dialog.style.opacity=1 live2d_dialog.innerHTML = this.responseText //五秒后隐藏对话框 window.setTimeout(()=>{ live2d_dialog.style.opacity=0 }, 5000); } } 需要注意的是： 一般api都不允许js跨域，需要用自己的服务器代理一下或者做一下中间处理（把认证的东西放自己服务器上） 我这里没把认证key和secret放自己服务器的原因是。。。这个api看上去就很不安全啊，没必要多此一举。 一般api用的是POST请求并且需要解析返回的JSON数据，我这里没有大家懂的都懂: ) 20:43补充： 谁知道我最后还是用了自己的服务器代理😀，因为我发现https网站发送不了http请求。 嘻嘻，说不定哪天我就换个api用了。","categories":[{"name":"日常/随笔","slug":"日常-随笔","permalink":"https://www.codetool.top/categories/%E6%97%A5%E5%B8%B8-%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"网站日志","slug":"网站日志","permalink":"https://www.codetool.top/tags/%E7%BD%91%E7%AB%99%E6%97%A5%E5%BF%97/"},{"name":"JavaScript","slug":"JavaScript","permalink":"https://www.codetool.top/tags/JavaScript/"},{"name":"hexo","slug":"hexo","permalink":"https://www.codetool.top/tags/hexo/"}]},{"title":"leetcode752-打开转盘锁","slug":"leetcode752-打开转盘锁","date":"2019-12-09T10:05:23.000Z","updated":"2019-12-19T08:18:42.117Z","comments":true,"path":"article/leetcode752-打开转盘锁/","link":"","permalink":"https://www.codetool.top/article/leetcode752-%E6%89%93%E5%BC%80%E8%BD%AC%E7%9B%98%E9%94%81/","excerpt":"","text":"1 原题你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： &#39;0&#39;, &#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;, &#39;6&#39;, &#39;7&#39;, &#39;8&#39;, &#39;9&#39;。每个拨轮可以自由旋转：例如把&#39;9&#39; 变为 &#39;0&#39;，&#39;0&#39;变为 &#39;9&#39; 。每次旋转都只能旋转一个拨轮的一位数字。 锁的初始数字为 &#39;0000&#39; ，一个代表四个拨轮的数字的字符串。 列表 deadends 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。 字符串 target 代表可以解锁的数字，你需要给出最小的旋转次数，如果无论如何不能解锁，返回 -1。 示例 1: 输入: deadends = [“0201”,”0101”,”0102”,”1212”,”2002”], target = “0202”输出： 6解释：可能的移动序列为 “0000” -&gt; “1000” -&gt; “1100” -&gt; “1200” -&gt; “1201” -&gt; “1202” -&gt; “0202”。注意 “0000” -&gt; “0001” -&gt; “0002” -&gt; “0102” -&gt; “0202” 这样的序列是不能解锁的，因为当拨动到 “0102” 时这个锁就会被锁定。 示例 2: 输入: deadends = [“8888”], target = “0009”输出： 1解释：把最后一位反向旋转一次即可 “0000” -&gt; “0009”。 示例 3: 输入: deadends = [“8887”,”8889”,”8878”,”8898”,”8788”,”8988”,”7888”,”9888”], target = “8888”输出： -1解释：无法旋转到目标数字且不被锁定。 示例 4: 输入: deadends = [“0000”], target = “8888”输出： -1 提示： 死亡列表 deadends 的长度范围为 [1, 500]。 目标数字 target 不会在 deadends 之中。 每个 deadends 和 target 中的字符串的数字会在 10,000 个可能的情况 ‘0000’ 到 ‘9999’ 中产生。 2 解法2.1 思想其实是一个树的BFS搜索问题： 用Queue来得到每层的节点。 主要需要注意的地方有： 为了避免重复的节点进入队列，可以使用数组记录是否出现过，或是用HashSet记录出现过的节点。 当遇到死亡数字数组中的元素时也不能将该元素添加至队列中。 当搜索到题目要求的元素时，为了得到当前层数，有两种方法： 用一个数据结构表示节点，记录节点的值和层数。 每层元素入队列之后再加入一个null元素，每次遍历到null元素即可知道遍历完了了一层。 2.2 代码我一开始是这样写的： //节点的数据结构，需要记录层数 class Node{ public String value; public int count; public Node(String value,int count){ this.value = value; this.count = count; } } class Solution { public int openLock(String[] deadends, String target) { //如果死亡数组中存在0000直接返回-1 if(arrayContains(deadends,\"0000\")) return -1; //标记数组用于记录哪些数字出现过 int[] mark = new int[10000]; //0000出现过 mark[0] = 1; Queue&lt;Node> queue = new LinkedList&lt;Node>(); queue.offer(new Node(\"0000\",0)); while(!queue.isEmpty()){ //获取队列头 Node node = queue.poll(); if(node.value.equals(target)) return node.count; else { char[] charArray = node.value.toCharArray(); for(int i = 0;i&lt;4;i++) { //位于第i位的数字+1，如果是9变成0 char[] plusOneCharArray = Arrays.copyOf(charArray,charArray.length); plusOneCharArray[i] = (char) (charArray[i]=='9'?'0':charArray[i]+1); String plusOne = String.valueOf(plusOneCharArray); if(plusOne.equals(target)) return node.count+1; //没有出现过且不在死亡数字中才添加至队列中 if((!arrayContains(deadends, plusOne))&amp;&amp;mark[Integer.valueOf(plusOne)]==0) { queue.offer(new Node(plusOne,node.count+1)); mark[Integer.valueOf(plusOne)] = 1; } //位于第i位的数字-1，如果是0变成9 char[] minusOneCharArray = Arrays.copyOf(charArray,charArray.length); minusOneCharArray[i] = (char) (charArray[i]=='0'?'9':charArray[i]-1); String minusOne = String.valueOf(minusOneCharArray); if(minusOne.equals(target)) return node.count+1; //没有出现过且不在死亡数字中才添加至队列中 if((!arrayContains(deadends, minusOne))&amp;&amp;mark[Integer.valueOf(minusOne)]==0) { queue.offer(new Node(minusOne,node.count+1)); mark[Integer.valueOf(minusOne)] = 1; } } } } return -1; } //遍历数组，用于检测死亡数字中是否存在指定的数字 public boolean arrayContains(String[] stringArray,String toFind) { for(String i:stringArray) { if(i.equals(toFind)) return true; } return false; } } 然后发现上面这种方法需要的时间贼久，最后强行理解了一下发现问题主要出在检测死亡数组中是否存在指定数字的时候，时间开销太高了。 最后还是换成了用HashSet检测死亡数组中是否存在指定的数字： class Node{ public String value; public int count; public Node(String value,int count){ this.value = value; this.count = count; } } class Solution { public int openLock(String[] deadends, String target) { //将死亡数字全部加进一个HashSet中 Set&lt;String> set = new HashSet&lt;String>(); for(String i:deadends) { if(i.equals(\"0000\")) return -1; set.add(i); } int[] mark = new int[10000]; mark[0] = 1; Queue&lt;Node> queue = new LinkedList&lt;Node>(); queue.offer(new Node(\"0000\",0)); while(!queue.isEmpty()){ Node node = queue.poll(); if(node.value.equals(target)) return node.count; else { char[] charArray = node.value.toCharArray(); for(int i = 0;i&lt;4;i++) { char[] plusOneCharArray = Arrays.copyOf(charArray,charArray.length); plusOneCharArray[i] = (char) (charArray[i]=='9'?'0':charArray[i]+1); String plusOne = String.valueOf(plusOneCharArray); if(plusOne.equals(target)) return node.count+1; if((!set.contains(plusOne))&amp;&amp;mark[Integer.valueOf(plusOne)]==0) { queue.offer(new Node(plusOne,node.count+1)); mark[Integer.valueOf(plusOne)] = 1; } char[] minusOneCharArray = Arrays.copyOf(charArray,charArray.length); minusOneCharArray[i] = (char) (charArray[i]=='0'?'9':charArray[i]-1); String minusOne = String.valueOf(minusOneCharArray); if(minusOne.equals(target)) return node.count+1; if((!set.contains(minusOne))&amp;&amp;mark[Integer.valueOf(minusOne)]==0) { queue.offer(new Node(minusOne,node.count+1)); mark[Integer.valueOf(minusOne)] = 1; } } } } return -1; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"BFS","slug":"BFS","permalink":"https://www.codetool.top/tags/BFS/"}]},{"title":"谈谈java中的Iterator","slug":"谈谈Iterator和前辈Enumeration","date":"2019-12-06T10:05:23.000Z","updated":"2020-02-20T14:55:21.057Z","comments":true,"path":"article/谈谈Iterator和前辈Enumeration/","link":"","permalink":"https://www.codetool.top/article/%E8%B0%88%E8%B0%88Iterator%E5%92%8C%E5%89%8D%E8%BE%88Enumeration/","excerpt":"","text":"1 摘要 Iterator的作用？ Iterator和Enumeration的区别？ Iterator和ListIterator的区别？ Iterator和foreach的关联？ 2 Iterator的作用Iterator，中文译作迭代器，是一种检查容器内元素并遍历元素的数据类型。它能使使用者不必关心遍历元素的过程，统一了对元素的访问方式。 在JDK1.8中，Iterator接口包含下面这些方法： //是否有下个元素 boolean hasNext(); //获取下个元素 E next(); //移除迭代器当前指向的元素，这个功能不强制实现，可以抛出UnsupportedOperationException异常 void remove(); //每个元素作为参数传递给Consumer接口的accept void forEachRemaining(Consumer&lt;? super E> action); 3 Iterator和Enumeration的区别Iterator是JDK1.2后才出现的接口，目的是为了取代Enumeration。 Enumeration的作用和Iterator相似，它包含下面的方法： //是否存在更多元素 boolean hasMoreElements(); //获取下一个元素 E nextElement(); Iterator： 简化了方法名称 增加了移除元素的操作 4 Iterator和ListIterator的区别List接口中有一个方法listIterator()用于返回一个List迭代器，ArrayList在内部类中实现了这个迭代器，调用listIterator()时通过构造方法构造出一个ListIterator对象并返回。 那么Iterator和ListIterator有什么区别呢？ ListIterator是Iterator的扩充 ListIterator接口中除了继承自Iterator中的方法，还有： //是否有上一个元素 boolean hasPrevious(); //获取上一个元素 E previous(); //下一个元素的index int nextIndex(); //上一个元素的index int previousIndex(); //用一个元素替换当前指向的元素 void set(E e); //在当前位置插入一个元素 void add(E e); 5 Iterator和foreach的关联？foreach只支持数组或实现了Iterable接口的类。 Iterable接口强制要求实现iterator()方法，也就是说，foreach语句底层还是通过iterator的遍历实现的。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"基础知识","slug":"基础知识","permalink":"https://www.codetool.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}]},{"title":"Java自动装箱缓存机制","slug":"Java自动装箱缓存机制","date":"2019-12-05T10:05:23.000Z","updated":"2020-02-13T05:27:57.984Z","comments":true,"path":"article/Java自动装箱缓存机制/","link":"","permalink":"https://www.codetool.top/article/Java%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/","excerpt":"","text":"尝试运行这段代码： 相似的两段代码，得到的结果却完全不相同。 首先要知道在java中==比较的是对象的引用，从直觉出发，无论是integer1、integer2还是integer3、integer4都是不同的引用，结果都应该是不等的。 造成这个结果的原因是JDK1.5引入的包装类自动装箱时的缓存机制 自动装箱的概念： Integer a = 10; //自动装箱，相当于下面这句 Integer a = Integer.valueOf(10); 而看看Integer中valueOf(int)的源码： public static Integer valueOf(int i) { if (i >= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high) return IntegerCache.cache[i + (-IntegerCache.low)];//这句就是我们要研究的重点 return new Integer(i); } IntegerCache是一个缓存类，它的内部有一个静态的Integer cache[]数组，在这个类第一次被加载时，会用整数值在-128~127之间的Integer实例对象填充这个数组，如果调用valueOf方法的时候参数值在这个范围内，就会从IntegerCache中的cache数组去取出这样一个共享对象。 这样就能回答一开始的程序integer1、integer2为什么相等了，因为他们都是从cache数组中取出来的同一个引用。 而300这个数是不在-128~127之间的，缓存数组中不存在这样的对象，最终是调用了构造方法创建了两个不同的Integer对象。 拓展：IntegerCache的静态代码块 static { // 缓存的数据范围可以由用户设置，这里从配置中获取了用户设置的缓存范围 int h = 127; String integerCacheHighPropValue = sun.misc.VM.getSavedProperty(\"java.lang.Integer.IntegerCache.high\"); if (integerCacheHighPropValue != null) { try { int i = parseInt(integerCacheHighPropValue); i = Math.max(i, 127); // Maximum array size is Integer.MAX_VALUE h = Math.min(i, Integer.MAX_VALUE - (-low) -1); } catch( NumberFormatException nfe) { // If the property cannot be parsed into an int, ignore it. } } high = h; cache = new Integer[(high - low) + 1]; int j = low; // 这里循环构造Integer对象填充cache数组 for(int k = 0; k &lt; cache.length; k++) cache[k] = new Integer(j++); // range [-128, 127] must be interned (JLS7 5.1.7) assert IntegerCache.high >= 127; }","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"基础知识","slug":"基础知识","permalink":"https://www.codetool.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}]},{"title":"WinForm截图OCR小项目的开发-瞥见知识的融会贯通","slug":"winform截图OCR小项目的开发-瞥见知识的融会贯通","date":"2019-12-04T10:05:23.000Z","updated":"2020-02-20T14:46:51.400Z","comments":true,"path":"article/winform截图OCR小项目的开发-瞥见知识的融会贯通/","link":"","permalink":"https://www.codetool.top/article/winform%E6%88%AA%E5%9B%BEOCR%E5%B0%8F%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%BC%80%E5%8F%91-%E7%9E%A5%E8%A7%81%E7%9F%A5%E8%AF%86%E7%9A%84%E8%9E%8D%E4%BC%9A%E8%B4%AF%E9%80%9A/","excerpt":"","text":"最近因为有个需要截图OCR的需求，再加上需要交一个C#大作业，就做了一个WinForm截图OCR小项目出来。（不过后来发现QQ截图好像已经有这功能了🌚） 运行截图： 谈一谈挺有意思的一些知识点： 1 Http请求1.1 Delegate委托回调我封装了一个POST请求的函数：需要下载一个Newtonsoft.Json用于处理响应的JSON数据这种方式是使用了一个委托回调，类似于JavaScript中的回调函数，C#中叫Delegate回调 delegate void AfterRequest(JObject data); class HttpUtil { /// &lt;summary> /// 发出POST请求 /// &lt;/summary> /// &lt;param name=\"url\">请求的url&lt;/param> /// &lt;param name=\"requestBody\">url参数格式的字符串，如\"key1=value1&amp;key2=value2\",需要经过urlencode处理&lt;/param> /// &lt;param name=\"function\">回调函数,data是一个json转换为的一个JObject对象&lt;/param> public static void PostAsync(String url, string requestBody, AfterRequest function) { try { string responseBody = null; HttpClient httpClient = new HttpClient(); //StringContent content = new StringContent(requestBody,System.Text.Encoding.UTF8, \"application/x-www-form-urlencoded\"); StringContent content = new StringContent(requestBody); content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(\"application/x-www-form-urlencoded\"); HttpResponseMessage response = null; response = httpClient.PostAsync(url, content).Result; response.EnsureSuccessStatusCode(); if (response.IsSuccessStatusCode) { responseBody = response.Content.ReadAsStringAsync().Result; } JObject data = JObject.Parse(responseBody); function(data); } catch (Exception e) { Console.WriteLine(\"\\nException Caught!\"); Console.WriteLine(\"Message :{0} \", e.Message); } } } 1.2 Async/Await实际上还有一种能使代码更清晰、简洁的方法，并且这种方法更受C#推荐：Async/Await class HttpUtil { /// &lt;summary> /// 发出POST请求 /// &lt;/summary> /// &lt;param name=\"url\">请求的url&lt;/param> /// &lt;param name=\"requestBody\">url参数格式的字符串，如\"key1=value1&amp;key2=value2\",需要经过urlencode处理&lt;/param> public static async Task&lt;JObject> PostAsync(String url, string requestBody) { try { string responseBody = null; HttpClient httpClient = new HttpClient(); //StringContent content = new StringContent(requestBody,System.Text.Encoding.UTF8, \"application/x-www-form-urlencoded\"); StringContent content = new StringContent(requestBody); content.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(\"application/x-www-form-urlencoded\"); HttpResponseMessage response = null; response = await httpClient.PostAsync(url, content); response.EnsureSuccessStatusCode(); if (response.IsSuccessStatusCode) { responseBody = await response.Content.ReadAsStringAsync(); } JObject data = JObject.Parse(responseBody); return data; } catch (Exception e) { Console.WriteLine(\"\\nException Caught!\"); Console.WriteLine(\"Message :{0} \", e.Message); } return null; } } 使用这种方法，能避免回调地狱，让调用时代码不会多层嵌套。甚至ES7也支持了这种方法，语法和C#类似。 原理： 函数执行时，一旦遇到await就会返回。等到触发的异步操作完成（并且调用栈清空），再接着执行函数体内后面的语句 实际上async/await只是个语法糖，内部执行顺序和回调函数并无区别。 2 API鉴权因为做这个应用去调用了百度云和腾讯云提供的OCR api，恰巧发现两家的api鉴权机制正是目前主流验证方式之中具有代表性的两种。 2.1 百度云：Token看看百度云的Token获取方法： 向授权服务地址https://aip.baidubce.com/oauth/2.0/token发送请求（推荐使用POST），并在URL中带上以下参数： grant_type： 必须参数，固定为client_credentials； client_id： 必须参数，应用的API Key； client_secret： 必须参数，应用的Secret Key； token验证方式就是给每个用户分配一套账号和密码（这里是client_id和client_secret），服务器能通过这套认证信息获取用户的权限，生成一个token字符串，保存在本地并返回给用户，用户请求api的时候就要带上这个token（可以是放在请求体或请求头中），服务器就能通过token验证用户的身份。 安全隐患： Token被劫持，伪造请求和篡改参数。 2.2 腾讯云：签名验证可以看看腾讯云提供的计算签名的步骤： 将&lt;key, value&gt;请求参数对按key进行字典升序排序，得到有序的参数对列表N 将列表N中的参数对按URL键值对的格式拼接成字符串，得到字符串T（如：key1=value1&amp;key2=value2），URL键值拼接过程value部分需要URL编码，URL编码算法用大写字母，例如%E8，而不是小写%e8 将应用密钥以app_key为键名，组成URL键值拼接到字符串T末尾，得到字符串S（如：key1=value1&amp;key2=value2&amp;app_key=密钥) 对字符串S进行MD5运算，将得到的MD5值所有字符转换成大写，得到接口请求签名 可以看出腾讯云的验证机制更为复杂，在计算签名的时候需要用到当前时间戳、一个随机字符串和用户的app_key，这样得到的签名每次请求的时候都是不同的，即使中间者劫持了签名也无法利用签名进行第二次重复请求，如果请求参数被篡改也能识别出。 Token和签名验证并不冲突，签名验证是在身份认证的基础上防止请求重放、参数篡改等攻击。百度云这种加密机制也可以使用某种密钥将带有token的参数字符串生成签名进行验证。 3 总结要看到知识的融会贯通之处，学习JS相关的异步思想，后端的验证机制。要善于思考，以行促学。","categories":[{"name":"项目总结","slug":"项目总结","permalink":"https://www.codetool.top/categories/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"项目","slug":"项目","permalink":"https://www.codetool.top/tags/%E9%A1%B9%E7%9B%AE/"},{"name":"C#","slug":"C","permalink":"https://www.codetool.top/tags/C/"}]},{"title":"HashSet源码分析","slug":"HashSet源码分析","date":"2019-12-02T10:05:23.000Z","updated":"2019-12-19T08:16:26.319Z","comments":true,"path":"article/HashSet源码分析/","link":"","permalink":"https://www.codetool.top/article/HashSet%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","excerpt":"","text":"Set家族一览： 1 HashSet简介Set是Collection三大接口其中之一，意为集合，且元素不能重复。Set接口中的方法和Collection中的方法完全一致，只是起到一个标记名的作用。 HashSet是哈希集的意思，就是通过hashcode来实现set不能出现重复元素的一个实现类。 内部其实是通过哈希表HashMap来实现的，实际上set中存放的元素是内部hashmap中的键： private transient HashMap&lt;E,Object> map; private static final Object PRESENT = new Object();//所有的键对应的值都是一个冗余的Object对象 在构造方法中初始化哈希表： public HashSet() { map = new HashMap&lt;>(); } 浪费时间警告：这是一个纯HashMap实现的类 2 重载的构造方法2.1 public HashSet(Collection&lt;? extends E&gt; c)通过一个集合来构造HashSet，默认哈希表的容量是集合的容量*4/3 + 1和16中的最大值 public HashSet(Collection&lt;? extends E> c) { map = new HashMap&lt;>(Math.max((int) (c.size()/.75f) + 1, 16)); addAll(c); } 2.2 public HashSet(int initialCapacity, float loadFactor)这个实际上就是提供两个构造HashMap的参数，一个是初始大小，一个是负载因子。 public HashSet(int initialCapacity, float loadFactor) { map = new HashMap&lt;>(initialCapacity, loadFactor); } 2.3 public HashSet(int initialCapacity)这个就是提供HashMap的初始大小。 public HashSet(int initialCapacity) { map = new HashMap&lt;>(initialCapacity); } 3 重要方法3.1 public int size()HashMap的size public int size() { return map.size(); } 3.2 public boolean contains(Object o)HashMap中是否有对应的键。 public boolean contains(Object o) { return map.containsKey(o); } 3.3 public boolean add(E e)将一个记录插入HashMap public boolean add(E e) { return map.put(e, PRESENT)==null; } 3.4 public boolean remove(Object o)public boolean remove(Object o) { return map.remove(o)==PRESENT; } 4 总结这是一个纯使用HashMap实现的数据结构。仔细看了一下TreeSet也是用TreeMap实现的，那我就不搞TreeSet了。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://www.codetool.top/tags/jdk/"},{"name":"集合","slug":"集合","permalink":"https://www.codetool.top/tags/%E9%9B%86%E5%90%88/"},{"name":"源码研究","slug":"源码研究","permalink":"https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"}]},{"title":"LinkedList源码分析","slug":"LinkedList源码分析","date":"2019-12-02T10:05:23.000Z","updated":"2019-12-19T08:19:32.626Z","comments":true,"path":"article/LinkedList源码分析/","link":"","permalink":"https://www.codetool.top/article/LinkedList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","excerpt":"","text":"相关文章：ArrayList源码分析 List家族一览： 1 LinkedList简介 LinkedList的超类有List、Queue，说明它既有List的性质也有Queue的性质，它直接实现于Deque，说明它体现更多的是双向链表的性质。不过通常将它当作普通的Queue使用： Queue queue = new LinkedList&lt;>(); 它的内部字段： transient int size = 0; transient Node&lt;E> first;//代表头节点 transient Node&lt;E> last;//代表尾节点 2 重要的内部类2.1 Node这是一个静态内部类，代表着LinkedList中存放数据的节点。 private static class Node&lt;E> { E item; Node&lt;E> next; Node&lt;E> prev; Node(Node&lt;E> prev, E element, Node&lt;E> next) { this.item = element; this.next = next; this.prev = prev; } } 3 重要的内部方法3.1 void linkLast(E e)offer依赖的方法 void linkLast(E e) { final Node&lt;E> l = last; final Node&lt;E> newNode = new Node&lt;>(l, e, null); last = newNode; if (l == null) first = newNode; else l.next = newNode; size++; modCount++; } 3.2 private E unlinkFirst(Node f)poll和remove依赖的方法 private E unlinkFirst(Node&lt;E> f) { // assert f == first &amp;&amp; f != null; final E element = f.item; final Node&lt;E> next = f.next; f.item = null; f.next = null; // help GC first = next; if (next == null) last = null; else next.prev = null; size--; modCount++; return element; } 3.3 Node node(int index)获取处于index上的节点，这个方法用于支持随机访问，特别是List中定义的get，set等方法。可见，该方法会根据index所处位置的不同分为从头查找或是从尾查找。 Node&lt;E> node(int index) { // assert isElementIndex(index); if (index &lt; (size >> 1)) { Node&lt;E> x = first; for (int i = 0; i &lt; index; i++) x = x.next; return x; } else { Node&lt;E> x = last; for (int i = size - 1; i > index; i--) x = x.prev; return x; } } 4 总结可以说，LinkedList的实现还是挺简单的，由于是链表实现不需要考虑那么多关于空间的问题。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://www.codetool.top/tags/jdk/"},{"name":"集合","slug":"集合","permalink":"https://www.codetool.top/tags/%E9%9B%86%E5%90%88/"},{"name":"源码研究","slug":"源码研究","permalink":"https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"}]},{"title":"tomcat整体架构","slug":"tomcat整体架构","date":"2019-11-29T10:05:23.000Z","updated":"2020-02-21T14:38:07.517Z","comments":true,"path":"article/tomcat整体架构/","link":"","permalink":"https://www.codetool.top/article/tomcat%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84/","excerpt":"","text":"1 tomcat整体架构Tomcat Http服务器不直接调用业务类，而是将请求转发给Servlet容器，Servlet加载业务类处理请求。 核心组件： 连接器 Connector 容器 Container 连接器处理Socket请求，容器进行servlet的调用。 2 连接器 CoyoteCoyote 是 Tomcat的连接器框架的名称，是Tomcat服务器提供的供客户端访问的外部接口。客户端通过Coyote与服务器建立连接、发送请求并接受相应。 Coyote封装了底层的网络通信（Socket请求及相应处理），为Catalina容器提供了统一的接口，使Catalina容器与具体的请求协议及IO操作方式完全解耦。Coyote将Socket输入转换封装为Request对象，交由Catalina容器进行处理，处理请求完成后，Catalina通过Coyote提供的Response对象将结果写入输出流。 Coyote作为独立的模块，只负责具体协议和IO的相关操作，与Servlet规范实现没有直接关系，因此即使是Request和Response对象也并未实现Servlet规范对应的接口，而是在Catalina中将他们进一步封装为ServletRequest和ServletResponse。 2.1 IO模型与协议在Coyote中，Tomcat支持的多种I/O模型和应用层协议： Tomcat支持的IO模型（8.0前默认是BIO，自8.5/9.0版本起，tomcat移除了对BIO的支持）： IO模型 描述 NIO 非阻塞I/O，采用Java NIO类库实现。 NIO2 异步I/O，采用JDK7最新的NIO2类库实现。 APR 采用Apache可移植运行库实现，是C/C++编写的本地库。如果选择该方案，需要单独安装APR库。 Tomcat支持的应用层协议： 应用层协议 描述 HTTP/1.1 这是大部分Web应用采用的访问协议。 AJP 用于和Web服务器集成（如Apache），以实现对静态资源的优化以及集群部署，当前支持AJP/1.3。 HTTP/2 HTTP2.0大幅度地提升了Web性能。下一代HTTP协议，自8.5以及9.0版本之后支持。 2.2 连接器组件 EndPoint Processor Adapter ProtocolHandler 2.2.1 EndPoint Coyote通信端点，即通信监听的接口，是具体Socket接收和发送处理器，是对传输层的抽象，因此EndPoint用来实现TCP/IP协议的。 Tomcat并没有EndPoint接口，而是提供了一个抽象类AbstractEndPoint，里面定义了两个内部类：Acceptor和SocketProcessor。Acceptor用于监听Socket连接请求。SocketProcessor用于处理接收到的Socket请求，它实现Runnable接口，在Run方法里调用协议处理组件Processor进行处理。为了提高处理能力，SocketProcessor被提交到线程池来执行。而这个线程池叫执行器（Executor）。 2.2.2 ProcessorCoyote协议处理接口，如果说EndPoint是用来实现TCP/IP协议的，那么Processor用来实现HTTP协议，Processor接收来自EndPoint的Socket，读取字节流解析成Tomcat Recuest和Response对象,并通过Adapter将其提交到容器处理, Processor是对应用层协议的抽象。 2.2.3 ProtocolHandlerCoyote 协议接口，通过Endpoint和Processor，实现针对具体协议的处理能力。Tomcat按照协议和I/O提供了6个实现类：AjpNioProtocol，AjpAprProtocol,AjpNio2Protocol,Http11NioProtocol,Http11Nio2Protocol,Http11AprProtocol。我们在配置tomcat/conf/server.xml时，至少要指定具体的ProtocolHandler,当然也可以指定协议名称，如：HTTP/1.1，如果安装了APR，那么将使用Http11AprProtocol，否则使用 Http11NioProtocol。 2.2.4 Adapter由于协议不同，客户端发过来的请求信息也不尽相同，Tomcat定义了自己的Request类来“存放”这些请求信息。ProtocolHandler接口负责解析请求并生成Tomcat Request类。但是这个Request对象不是标准的ServletRequest，也就意味着，不能用Tomcat Request作为参数来调用容器。Tomcat设计者的解决方案是引入CoyoteAdapter，这是适配器模式的经典运用，连接器调用CoyoteAdapter的Sevice方法，传入的是Tomcat Request对象，CoyoteAdapter负责将Tomcat Request转成ServletRequest，再调用容器的Service方法。 3 容器 Catalina3.1 Tomcat的模块分层图 和org.apache包下的包一一对应 3.2 容器组件 如上图所示，Catalina负责管理Server，而Server表示着整个服务器。Server下面有多个服务Service，每个服务都包含着多个连接器组件Connector（Coyote 实现）和一个容器组件Container。在Tomcat启动的时候，会初始化一个Catalina的实例。 Catalina各个组件的职责： 组件 职责 Catalina 负责解析Tomcat的配置文件，以此来创建服务器Server组件，并根据命令来对其进行管理。 Server 服务器表示整个Catalina Servlet容器以及其它组件，负责组装并启动Servlet引擎，Tomcat连接器。Server通过实现Lifecycle接口，提供了一种优雅的启动和关闭整个系统的方式。 Service 服务是Server内部的组件，一个Server包含多个Service。它将若干个Connector组件绑定到一个Container(Engine)上 Connector 连接器，处理与客户端的通信，它负责接收客户请求，然后转给相关的容器处理，最后向客户返回响应结果 Container 容器，负责处理用户的servlet请求，并返回对象给web用户的模块。 3.3 Container结构Tomcat设计了4种容器，分别是Engine、Host、Context和Wrapper。这4种容器不是平行关系，而是父子关系，Tomcat通过一种分层的架构，使得Servlet容器具有很好的灵活性。 组件 职责 Engine 表示整个Catalina的Servlet引擎,用来管理多个虚拟站点，一个Service最多只能有一个Engine ,但是一个引擎可包含多个Host。 Host 代表一个虚拟主机， 或者说一个站点，可以给Tomcat配置多个虚拟主机地址，而一个虚拟主机下可包含多个Context。 Context 表示一个web应用程序，一个Web应用可包含多个Wrapper。 Wrapper 表示一个Servlet，Wrapper作为容器中的最底层。 不能包含子容器。 我们也可以再通过Tomcat的server.xml配置文件来加深对Tomcat容器的理解。Tomcat采用了组件化的设计，它的构成组件都是可配置的，其中最外层的是Server，其他组件按照一定的格式要求配置在这个顶层容器中。 &lt;Server> &lt;Service> &lt;Connector/> &lt;Connector/> &lt;Engine> &lt;Host> &lt;Context>&lt;/Context> &lt;/Host> &lt;/Engine> &lt;/Service> &lt;/Server> 那么，Tomcat是怎么管理这些容器的呢？你会发现这些容器具有父子关系，形成一个树形结构，你可能马上就想到了设计模式中的组合模式。没错，Tomcat就是用组合模式来管理这些容器的。具体实现方法是，所有容器组件都实现了Container接口，因此组合模式可以使得用户对单容器对象和组合容器对象的使用具有一致性。这里单容器对象指的是最底层的Wrapper，组合容器对象指的是上面的Context、Host或者Engine。 LifeCycle接口用于统一管理各组件的生命周期。","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"tomcat","slug":"tomcat","permalink":"https://www.codetool.top/tags/tomcat/"}]},{"title":"使用maven方式编译tomcat源码","slug":"使用maven方式编译tomcat源码","date":"2019-11-28T14:09:23.000Z","updated":"2020-02-21T14:38:07.517Z","comments":true,"path":"article/使用maven方式编译tomcat源码/","link":"","permalink":"https://www.codetool.top/article/%E4%BD%BF%E7%94%A8maven%E6%96%B9%E5%BC%8F%E7%BC%96%E8%AF%91tomcat%E6%BA%90%E7%A0%81/","excerpt":"","text":"1 Tomcat源码下载官网下载： https://tomcat.apache.org/download-80.cgi 页面下方的Source Code Distribution，下载zip文件。 2 Idea用maven方式编译源码在源码文件夹内创建一个home/目录，将webapp/和conf/移到这个文件夹下。 在根目录添加pom.xml： &lt;?xml version=\"1.0\" encoding=\"utf-8\"?> &lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"> &lt;modelVersion>4.0.0&lt;/modelVersion> &lt;groupId>org.apache.tomcat&lt;/groupId> &lt;artifactId>Tomcat8.5&lt;/artifactId> &lt;name>Tomcat8.5&lt;/name> &lt;version>8.5&lt;/version> &lt;build> &lt;finalName>Tomcat8.5&lt;/finalName> &lt;!-- 指定源文件为java 、test --> &lt;sourceDirectory>java&lt;/sourceDirectory> &lt;!-- &lt;testSourceDirectory>test&lt;/testSourceDirectory>--> &lt;resources> &lt;resource> &lt;directory>java&lt;/directory> &lt;/resource> &lt;/resources> &lt;testResources> &lt;testResource> &lt;directory>test&lt;/directory> &lt;/testResource> &lt;/testResources> &lt;plugins> &lt;plugin> &lt;groupId>org.apache.maven.plugins&lt;/groupId> &lt;artifactId>maven-compiler-plugin&lt;/artifactId> &lt;version>2.3&lt;/version> &lt;configuration> &lt;encoding>UTF-8&lt;/encoding> &lt;!-- 指定jdk 编译 版本 ，没装jdk 1.7的可以变更为1.6 --> &lt;source>1.8&lt;/source> &lt;target>1.8&lt;/target> &lt;/configuration> &lt;/plugin> &lt;/plugins> &lt;/build> &lt;!-- 添加tomcat8 所需jar包依赖 --> &lt;dependencies> &lt;dependency> &lt;groupId>junit&lt;/groupId> &lt;artifactId>junit&lt;/artifactId> &lt;version>4.12&lt;/version> &lt;scope>test&lt;/scope> &lt;/dependency> &lt;dependency> &lt;groupId>ant&lt;/groupId> &lt;artifactId>ant&lt;/artifactId> &lt;version>1.7.0&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>wsdl4j&lt;/groupId> &lt;artifactId>wsdl4j&lt;/artifactId> &lt;version>1.6.2&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>javax.xml&lt;/groupId> &lt;artifactId>jaxrpc&lt;/artifactId> &lt;version>1.1&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>org.easymock&lt;/groupId> &lt;artifactId>easymock&lt;/artifactId> &lt;version>3.3&lt;/version> &lt;/dependency> &lt;dependency> &lt;groupId>org.eclipse.jdt.core.compiler&lt;/groupId> &lt;artifactId>ecj&lt;/artifactId> &lt;version>4.6.1&lt;/version> &lt;/dependency> &lt;/dependencies> &lt;/project> 在idea中导入该maven项目，等待maven构建。 idea的项目运行配置（Edit Configurations）： Edit Configurations-&gt; + -&gt; Application -&gt; Main Class选择org.apache.catalina.startup.Bootstrap -&gt; VM Options填入： -Dcatalina.home=D:/Tomcat/apache-tomcat-8.5.49-src/home -Dcatalina.base=D:/Tomcat/apache-tomcat-8.5.49-src/home -Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager -Djava.util.logging.config.file=D:/Tomcat/apache-tomcat-8.5.49-src/home/conf/logging.propertiesD:/Tomcat/apache-tomcat-8.5.49-src/是我电脑上的源码的存放位置 然后就可以尝试编译了。还会出现一些错误，可以参考： @Version@错误 tomcat页面打不开500,jsp没有初始化错误","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"tomcat","slug":"tomcat","permalink":"https://www.codetool.top/tags/tomcat/"},{"name":"maven","slug":"maven","permalink":"https://www.codetool.top/tags/maven/"}]},{"title":"servlet4.0初识总结","slug":"servlet4-0初学总结","date":"2019-11-28T10:05:23.000Z","updated":"2020-02-20T14:42:11.238Z","comments":true,"path":"article/servlet4-0初学总结/","link":"","permalink":"https://www.codetool.top/article/servlet4-0%E5%88%9D%E5%AD%A6%E6%80%BB%E7%BB%93/","excerpt":"","text":"1 JavaEE8JavaEE8,是自2013年6月Java企业版的首次更新。JAVAEE8提供了一些新的API，提供了对HTTP/2的新支持。 2 Servlet4.0Servlet API是JAVA开发人员最熟悉的API之一。 Servlet在JAVAweb的开发中发挥着重要的作用。JAVAEE8对Servlet进行了重要的更新： 服务器推送 提供了对Servlet映射的运行时发现。 简化了Filter的开发。 其中服务器推送是最主要的更新 配置需要： jdk8+ tomcat9（支持HTTP/2） tomcat-native openssl 2.1 配置tomcat编辑server.xml，将原来的port=&quot;8080&quot; HTTP/1.1替换成: &lt;Connector port=\"8443\" protocol=\"org.apache.coyote.http11.Http11AprProtocol\" maxThreads=\"150\" SSLEnabled=\"true\" > &lt;UpgradeProtocol className=\"org.apache.coyote.http2.Http2Protocol\" /> &lt;SSLHostConfig> &lt;Certificate certificateKeyFile=\"conf/localhost-rsa-key.pem\" certificateFile=\"conf/localhost-rsa-cert.pem\" type=\"RSA\" /> &lt;/SSLHostConfig> &lt;/Connector> 2.2 生成SSL证书生成私钥和证书文件在tomcat-native目录下： OpenSSL&gt; genrsa -out localhost-rsa-key.pem 2048 OpenSSL&gt; req -new -x509 -key localhost-rsa-key.pem -out localhost-rsa-cert.pem -days 3650将localhost-rsa-key.pem和localhost-rsa-cert.pem复制到tomcat的conf/文件夹下。 将tomcat-native中bin/(x64/)下的tcnative-1.dll和tcnative-1-src.pdb复制到JAVA_HOME的/bin目录下 然后重启tomcat就能用HTTP/2来连接了。 2.3 服务器推送将用户所需的WEB资源提前推送到用户的浏览器缓存中，当用户使用浏览器访问所需WEB资源时，用户不需要再次下载所需的WEB资源，因为用户所需的WEB资源已经存在于用户的浏览器缓存中。 获取： request.newPushBuilder();方法： PushBuilder.path()设置要推送资源的路径。PushBuilder.push()推送WEB资源到用户的浏览器缓存中。 protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { PushBuilder pb = request.newPushBuilder(); pb.path(\"pic01.jpg\"); pb.push(); } 简化： PushBuilder pb = request.newPushBuilder(); pb.path(\"pic01.jpg\").push(); pb.path(\"pic02.jpg\").push(); 2.4 HttpServletMapping在运行时获取Servlet的映射信息（反射机制） 获取： request.getHttpServletMapping();方法： getMappingMatch() 请求路径的类型getMatchValue() 映射的资源名getPattern() 返回Servlet映射的路径getServletName() 返回Servlet的名称 protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { HttpServletMapping mapping = request.getHttpServletMapping(); MappingMatch match = mapping.getMappingMatch(); System.out.println(match); String value = mapping.getMatchValue(); System.out.println(value); String pattern = mapping.getPattern(); System.out.println(pattern); String name = mapping.getServletName(); System.out.println(name); } 2.5 HttpFilterFilter的实现类： GenericFilter HttpFilter，是GenericFilter的子类。 通过继承HttpFilter来实现Filter： @WebFilter(filterName = \"FilterDemo\",urlPatterns = \"/*\") public class FilterDemo extends HttpFilter { @Override protected void doFilter(HttpServletRequest request, HttpServletResponse response, FilterChain chain) throws IOException, ServletException { request.setCharacterEncoding(\"UTF-8\"); response.setContentType(\"text/html;charset=UTF-8\"); System.out.println(\"FilterDemo:放行前\"); chain.doFilter(request,response); System.out.println(\"FilterDemo:放行后\"); } }","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"javaweb","slug":"javaweb","permalink":"https://www.codetool.top/tags/javaweb/"}]},{"title":"nginx+keepalived高可用的并发解决方案","slug":"nginx-keepalived高可用的并发解决方案","date":"2019-11-27T10:05:23.000Z","updated":"2020-02-21T14:38:07.516Z","comments":true,"path":"article/nginx-keepalived高可用的并发解决方案/","link":"","permalink":"https://www.codetool.top/article/nginx-keepalived%E9%AB%98%E5%8F%AF%E7%94%A8%E7%9A%84%E5%B9%B6%E5%8F%91%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/","excerpt":"","text":"1 nginxnginx是一个高性能的HTTP和反向代理服务器，也是一个邮件服务器，支持负载均衡和高并发。 2 Keepalived Keepalived是一个基于VRRP协议来实现的服务高可用方案，可以利用其来避免IP单点故障，类似的工具还有heartbeat、corosync、pacemaker。但是它一般不会单独出现，而是与其它负载均衡技术（如lvs、haproxy、nginx）一起工作来达到集群的高可用。 3 Nginx+keepalived架构对于一台轮询的nginx服务器，如果宕机，则整个集群都不能收到请求。所以通常即使只是用作轮询的服务器，也要有后备服务器。 在这种架构中，外界用户访问的是虚拟IP，keepalived主机（master）会占用这个ip地址，其他后备服务器待命。如果master服务器宕机，backup服务器能感知到并及时接管这个虚拟IP。","categories":[{"name":"中间件/工具/框架","slug":"中间件-工具-框架","permalink":"https://www.codetool.top/categories/%E4%B8%AD%E9%97%B4%E4%BB%B6-%E5%B7%A5%E5%85%B7-%E6%A1%86%E6%9E%B6/"}],"tags":[{"name":"nginx","slug":"nginx","permalink":"https://www.codetool.top/tags/nginx/"},{"name":"高并发","slug":"高并发","permalink":"https://www.codetool.top/tags/%E9%AB%98%E5%B9%B6%E5%8F%91/"}]},{"title":"java基础查缺补漏01","slug":"java基础查缺补漏01","date":"2019-11-26T10:05:23.000Z","updated":"2020-02-14T18:02:52.309Z","comments":true,"path":"article/java基础查缺补漏01/","link":"","permalink":"https://www.codetool.top/article/java%E5%9F%BA%E7%A1%80%E6%9F%A5%E7%BC%BA%E8%A1%A5%E6%BC%8F01/","excerpt":"","text":"某些点会在不远的将来深挖。 &gt;&gt;是逻辑右移，&gt;&gt;&gt;是算术右移 JDK6 可以使用Console.readPassword从控制台中读取密码，用户输入的过程中密码是不可见的。 public static void main(String[] args) { Console cs = System.console(); String username = cs.readLine(\"User name: \"); char[] passwd = cs.readPassword(\"Password: \"); } printf格式化输出中的%s转换符能格式化任意的对象，对于实现了Formattable接口的对象将调用formatTo方法，否则将调用ToString方法。 Java的文件读取：通过File构造一个Scanner对象；写入文件：构造一个PrintWriter对象 Scanner in = new Scanner(Paths.get(\"myfile.txt\",\"UTF-8\"); PrintWriter out = new PrintWriter(\"myfile.txt\",\"UTF-8\"); Math中的BigInteger和BigDecimal可以满足高精度的运算需要。 匿名数组的写法：new int[]{17,19,23,29,31,37} finalize方法：相当于析构方法，在垃圾回收器清除对象之前调用。但不推荐使用这个方法，因为很难确定这个方法在什么时候才能被调用。 import static是静态导入，可以导入某个类中的静态方法和静态字段。 可变参数列表：function(Object... values)，在函数内部可以把values看成一个参数数组。 java8方法引用： 对象的方法引用 object::instanceMethod 类的静态方法引用 Class::staticMethod 任意类的任意对象的方法引用：Class::instanceMethod，它只能被该类的实例对象调用。 类的构造器调用 Class::new 内部类为什么要使用内部类 内部类方法可以访问该类定义所在的作用域中的数据，包括私有的数据。 内部类可以对同一个包种的其他类隐藏起来。 当想要定义一个回调函数且不想编写大量代码时，使用匿名内部类比较便捷。 内部类类型 普通内部类 局部内部类（在方法中定义的内部类，不能有访问修饰符，不能是static）局部内部类可以访问当前代码块的常量，和此外围类的所有成员。 静态内部类（声明为static，不依赖于外部类的对象存在，实际上成为了一个顶级类） 匿名内部类（立刻使用，代码短小，只用到一个实例）语法：new SuperType(construction parameter){inner class methods and data} 内部类底层实现（普通内部类）： 编译器自动为内部类添加一个成员变量，该成员变量的类型和外部类的类型相同，这个成员变量就是指向外部类对象引用。 编译器自动为内部类的构造方法添加一个参数，参数的类型是外部类的类型，在构造方法内部使用这个参数为1中添加的成员变量赋值。 在调用内部类的构造函数初始化内部类对象时，会默认传入外部类的引用。 Java动态代理：https://www.jianshu.com/p/95970b089360 Throwable分层：Error类层次结构描述了Java运行时系统的内部错误和资源耗尽错误。应用程序不应该抛出这种类型的对象。Java语言规范将派生于Error类或RuntimeException类的所有异常称为非受查异常(非受查异常在运行之前不会知道有错误)，所有其他的异常称为受查异常（受查异常在编译之前就能知道，必须用try/catch捕获）。 断言： assert 条件; assert 条件:表达式;如果结果是false，抛出一个AssertionError异常，第二种形式使用表达式构造AssertionError，转换成消息字符串。 可以在普通类里面定义泛型方法：T function(T... param)代表T是BoundingType的子类。代表T是BoundingType的超类。BoundingType可以是用”&amp;”分隔的多个类java泛型-类型擦除：https://www.cnblogs.com/joeblackzqq/p/10813143.html java关键字volatile：确保本条指令不会因编译器的优化而省略，且要求每次直接读值 java关键字transient: 标记的成员变量不参与序列化过程","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"基础知识","slug":"基础知识","permalink":"https://www.codetool.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}]},{"title":"今日ipv4地址正式耗尽","slug":"今日ipv4地址正式耗尽","date":"2019-11-26T10:05:23.000Z","updated":"2019-12-19T08:16:26.318Z","comments":true,"path":"article/今日ipv4地址正式耗尽/","link":"","permalink":"https://www.codetool.top/article/%E4%BB%8A%E6%97%A5ipv4%E5%9C%B0%E5%9D%80%E6%AD%A3%E5%BC%8F%E8%80%97%E5%B0%BD/","excerpt":"","text":"插播一条科技快讯： 北京时间11月26日下午消息，据国外媒体报道，负责英国、欧洲、中东和部分中亚地区互联网资源分配的欧洲网络协调中心（RIPE NCC）今日宣布： 全球所有43亿个IPv4地址已全部分配完毕，这意味着没有更多的IPv4地址可以分配给ISP（网络服务提供商）和其他大型网络基础设施提供商。 一想想我手上两台服务器有两个独立的ipv4地址还有点小激动呢。 珍惜IPv4地址,吉祥号码，全球唯一，错过今日，毁一生。","categories":[{"name":"日常/随笔","slug":"日常-随笔","permalink":"https://www.codetool.top/categories/%E6%97%A5%E5%B8%B8-%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"日常","slug":"日常","permalink":"https://www.codetool.top/tags/%E6%97%A5%E5%B8%B8/"}]},{"title":"AVL树-自平衡的二叉搜索树","slug":"AVL树-自平衡的二叉搜索树","date":"2019-11-25T10:05:23.000Z","updated":"2020-02-09T11:21:27.797Z","comments":true,"path":"article/AVL树-自平衡的二叉搜索树/","link":"","permalink":"https://www.codetool.top/article/AVL%E6%A0%91-%E8%87%AA%E5%B9%B3%E8%A1%A1%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/","excerpt":"","text":"本文图片来源：手把手教，手写AVL树 - 不止是编程 - 博客园 1 AVL树的概念1.1 自平衡当二叉搜索树处于平衡状态的时候，其操作时间复杂度为O(logN)，但当二叉搜索树是单支树的时候，其搜索效率则为O(N)。可见，二叉搜索树的平衡性是影响其操作效率的关键。由此出发，学者们设计了第一个平衡二叉搜索树，即AVL树。AVL树作为第一个平衡的二叉搜索树，其影响非常深远，后来的很多平衡结构都借鉴了AVL树的设计思想。 1.2 AVL树的定义一棵AVL树或者是空树，或者是具有下列性质的二叉搜索树： 它的左子树和右子树都是AVL树。 左子树和右子树的高度之差的绝对值不超过1。 要注意，AVL的平衡性是一种相对的平衡，并非一种绝对的平衡。它不要求左子树和右子树的高度绝对相等，而仅仅是左子树和右子树的高度之差的绝对值不超过1即可。因为绝对的平衡难以实现。 如果给AVL树中的每一个节点都附加一个数字，该数字指示该节点右子树的高度减去左子树的高度所得的高度差，那么这个数字即为该节点的平衡因子。根据AVL树的定义，任一节点的平衡因子只能取-1、0或1。 1.3 AVL树的旋转在一个平衡的二叉搜索树中插入一个新节点，就会造成其失衡，需要从插入位置沿通向根的路径回溯，检查各节点的平衡因子，在某一节点发现高度不平衡，则停止回溯。然后从发生不平衡的节点起，往下取三层，可以归纳为四种情况： 向某节点的左子树中插入一个左孩子。 向某节点的右子树中插入一个右孩子。 向某节点的左子树中插入一个右孩子。 向某节点的右子树中插入一个左孩子。 对应的处理方式： 1.3.1 单旋 右旋操作 以中间节点为轴，进行顺时针旋转，该中间节点的原父节点将变成该节点的右子节点，该中间节点的右子树则变成其原父节点的左子树。 左旋操作 对应的，左旋的方法是以三个呈直线排列的节点的中间节点为轴，进行逆时针旋转。该中间节点的原父节点将变成该节点的左子节点，该中间节点的左子树则变成其原父节点的右子树 1.3.2 双旋 先左后右双旋转 以3个成折线排列的节点中的末节点为轴，进行逆时针旋转。使末节点代替中间节点的位置，也就是让末节点成为原中间节点的父节点，这时，三个节点将成一直线排列，再以新的中间节点为旋转轴做右旋操作，即可完成平衡化操作。 基本情况 复杂情况 先右后左双旋转 以3个成折线排列的节点中的中间节点为轴，进行顺时针旋转。使末节点代替中间节点的位置，也就是让末节点成为原中间节点的父节点，这时，三个节点将成一直线排列，再以新的中间节点为旋转轴做左旋操作，即可完成平衡化操作。","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"搜索树","slug":"搜索树","permalink":"https://www.codetool.top/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"}]},{"title":"详解java中的unicode编码（码点）","slug":"unicode知识","date":"2019-11-25T10:05:23.000Z","updated":"2020-02-21T14:37:49.790Z","comments":true,"path":"article/unicode知识/","link":"","permalink":"https://www.codetool.top/article/unicode%E7%9F%A5%E8%AF%86/","excerpt":"","text":"致谢： 本文参考网页：Unicode字符集以及UTF-8，UTF-16编码的总结 - vcj1009784814的博客 - CSDN博客 1 Unicodeunicode的码点从U+0000到U+10FFFF，即共有2^20+2^16-1=1114111个码点。通常来说，常见字符可以用2个字节（16位）来表示。但还有很多其他表意字符、辅助字符需要表示。 Unicode将所有码点分成了17个代码级别，又称平面。 其中第一个平面称为基本的多语言级别（basic multilingual plane, BMP），其他的统称为辅助平面 1.1 utf-8由于unicode会有1个字节-4个字节不等，如果定长存储每个字符都需要占用四个字节，十分浪费空间，utf-8是一种变长存储方式，具体编码方式如下： 第一个字节提示了这个unicode编码由几个字节组成 首字节以0开头，表示单字节编码 首字节以110开头，表示双字节编码，后续字节以10开头 首字节以1110开头，表示三字节编码，后续字节以10开头 首字节以11110开头，表示四字节编码，后续字节以10开头 有效位对应的字节数 1.2 utf-16UTF-16源于UCS-2，UCS-2将字符码点直接映射为字符编码，中间无特别的编码算法。 UCS-2编码方式固定2字节编码，只覆盖了BMP的码点，对于SMP的码点，2字节的16位二进制数是不足以表示的。 而UTF-16扩展了原来的UCS-2编码，解决了辅助平面码点的字符无法表示的问题： BMP中的有效码点，用固定2字节16位来为其编码，数值等于对应的码点，同UCS-2 辅助平面中的有效码点，使用代理对进行编码。在BMP中，有一个范围的码点是未定义的，被称为代理区，其码点范围是0xD800~0xDFFF，共211个码点，代理区又被分为高代理码点和低代理码点，其中高代理码点范围是0xD800~0XDBFF，低代理码点范围是0xDC00~0XDFFF，高代理码点和低代理码点结合在一起，就表示一个辅助平面中的字符。由于辅助平面中的字符共有220个（0x10000~0x10FFFF），高代理码点和低代理码点皆有210个取值，两者结合，恰好有220种不同的组合。 也就是说，UTF-16可以表示完unicode中的字符，BMP中的字符需要一个字节，其他的需要两个字节。 2 java中的unicode这里使用到一个工具：Unicode编码转换，UTF编码转换（UTF-8、UTF-16、UTF-32） 2.1 charjava中的char是定长以16位（两个字节存储的），并且内部编码为utf-16。也就是说，一个char只能表示BMP中的字符，若要表示一个辅助平面内的字符，需要两个char。 来看一个BMP中的字符：”我” Unicode编码：U+6211UTF8编码：E68891UTF16BE编码：FEFF6211UTF16LE编码：FFFE1162 UTF16BE、UTF16LE分别指的是机器中的大端表示和小端表示，前面的FEFF或FFFE编译器会帮我们过滤掉，我们这里只看大端表示。 对于UTF-8表示，先将6211转换为二进制编码110 001000 010001，是15个有效位。对照utf-8编码表，可知需要用三个字节(1110xxxx 10xxxxxxxx 10xxxxxxxx)来表示，将有效位填入，得utf-8编码：11100110 10001000 10010001，转换为16进制，就是E68891。 对于UTF-16表示，6211是可以用两个字节表示完的，所以UTF-16的编码就是6621。 验证： 2.2 String对于辅助平面内的字符，一个char可不够用了，需要由两个char来存储，或是用String来表示。 来看一个emoji字符：”👉” Unicode编码：U+1F449UTF8编码：F09F9189UTF16BE编码：FEFFD83DDC49UTF16LE编码：FFFE3DD849DC 对于UTF-8表示，先将1F449转换为二进制编码11111 010001 001001，是17个有效位。对照utf-8编码表，可知需要用四个字节(11110xxx 10xxxxxxxx 10xxxxxxxx 10xxxxxx)来表示，将有效位填入，得utf-8编码：11110000 10011111 10010001 10001001，转换为16进制，就是F09F9189。 对于UTF-16表示，需要用到代理对进行编码：首先用1F449-10000得到F449，将F449转换为20位二进制0000111101 0001001001，高10位转成十六进制得3D,加上D800得D83D，后10位转成十六进制得49，加上DC00得DC49,所以它的utf-16编码为D83D DC49。 验证： 问题：String.length()会将一个非bmp中的字符算为1还是算为2呢？测试↓ 可见，如果String中存在非bmp中的字符，String会将它算成两个字符长度。看String.length()的源码也可知道这点： public int length() { return value.length; } value是String内部的一个字符数组。 2.3 java对码点计算的支持其实String中也提供了计算码点的方法：String.codePointCount(int beginIndex, int endIndex) 利用的是Character类能判断一个码点是否为代理码点：Character.isHighSurrogate：是否为高位代理码点 public static boolean isHighSurrogate(char ch) { // Help VM constant-fold; MAX_HIGH_SURROGATE + 1 == MIN_LOW_SURROGATE return ch >= MIN_HIGH_SURROGATE &amp;&amp; ch &lt; (MAX_HIGH_SURROGATE + 1); } 其中MIN_HIGH_SURROGATE=\\uD800和MAX_HIGH_SURROGATE=\\uDBFF，注明了高位代理码点的值边界。 Character.isLowSurrogate：是否为低位代理码点 public static boolean isLowSurrogate(char ch) { return ch >= MIN_LOW_SURROGATE &amp;&amp; ch &lt; (MAX_LOW_SURROGATE + 1); } 其中MIN_HIGH_SURROGATE=\\uDC00和MAX_HIGH_SURROGATE=\\uDFFF，注明了高位代理码点的值边界。 要判断字符串内有没有代理码点，只需确定连续的两个码点一个是高位代理码点一个是低位代理码点就行了。 String.codePointCount依赖的方法Character.codePointCountImpl源码： static int codePointCountImpl(char[] a, int offset, int count) { int endIndex = offset + count; int n = count; for (int i = offset; i &lt; endIndex; ) { if (isHighSurrogate(a[i++]) &amp;&amp; i &lt; endIndex &amp;&amp; isLowSurrogate(a[i])) { n--; i++; } } return n; } 如果要遍历一个字符串中的字符，可能需要考虑是否有非kmp中的字符的情况。那么就需要用码点为单位来处理： 反例： 正确处理方式： String.codePoints()得到一个int类型的流，代表这个码点的unicode编码，用System.out.printf()中的%c格式化输出它，就可以看到这个字符。","categories":[{"name":"计算机相关","slug":"计算机相关","permalink":"https://www.codetool.top/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9B%B8%E5%85%B3/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"基础知识","slug":"基础知识","permalink":"https://www.codetool.top/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"}]},{"title":"leetcode200-岛屿数量","slug":"leetcode200-岛屿数量","date":"2019-11-24T10:05:23.000Z","updated":"2019-12-19T08:15:15.880Z","comments":true,"path":"article/leetcode200-岛屿数量/","link":"","permalink":"https://www.codetool.top/article/leetcode200-%E5%B2%9B%E5%B1%BF%E6%95%B0%E9%87%8F/","excerpt":"","text":"1 原题给定一个由 &#39;1&#39;（陆地）和 &#39;0&#39;（水）组成的的二维网格，计算岛屿的数量。一个岛被水包围，并且它是通过水平方向或垂直方向上相邻的陆地连接而成的。你可以假设网格的四个边均被水包围。 示例1: 输入:11110110101100000000 输出: 1 示例2: 输入:11000110000010000011 输出: 3 2 解法2.1 思想线性扫描整个二维网格，如果一个结点包含 1，则以其为根结点启动广度优先搜索，或深度优先搜索。搜索到的值设为 0 以标记访问过该结点，每经历过一次搜索说明岛的数量+1。直到整个二维数组都变成0。 2.2 代码不嫌麻烦的可以建一个存储二维数组x、y位置的数据结构类。不然只能存储元素的偏移地址手动算x和y。 class Solution { public int numIslands(char[][] grid) { int count = 0; int height = grid.length; if(height==0) return 0; int width = grid[0].length; Queue&lt;Integer> queue = new LinkedList&lt;Integer>(); for(int i = 0;i&lt;height;i++){ for(int j = 0;j&lt;width;j++){ if(grid[i][j]=='1'){ grid[i][j] = '0'; queue.offer(i*width+j); while(!queue.isEmpty()){ int index = queue.poll(); int index_x = index/width; int index_y = index%width; if(index_x!=height-1 &amp;&amp; grid[index_x+1][index_y]=='1'){ queue.offer((index_x+1)*width+index_y); grid[index_x+1][index_y] = '0'; } if(index_x!=0 &amp;&amp; grid[index_x-1][index_y]=='1'){ queue.offer((index_x-1)*width+index_y); grid[index_x-1][index_y] = '0'; } if(index_y!=0 &amp;&amp; grid[index_x][index_y-1]=='1'){ queue.offer(index_x*width+index_y-1); grid[index_x][index_y-1] = '0'; } if(index_y!=width-1 &amp;&amp; grid[index_x][index_y+1]=='1'){ queue.offer(index_x*width+index_y+1); grid[index_x][index_y+1] = '0'; } } count++; } } } return count; } } 在BFS的基础上改一下就成了DFS： class Solution { public int numIslands(char[][] grid) { int count = 0; int height = grid.length; if(height==0) return 0; int width = grid[0].length; Stack&lt;Integer> stack = new Stack&lt;>(); for(int i = 0;i&lt;height;i++){ for(int j = 0;j&lt;width;j++){ if(grid[i][j]=='1'){ grid[i][j] = '0'; stack.push(i*width+j); while(!stack.empty()){ int index = stack.peek(); int index_x = index/width; int index_y = index%width; if(index_x!=height-1 &amp;&amp; grid[index_x+1][index_y]=='1'){ stack.push((index_x+1)*width+index_y); grid[index_x+1][index_y] = '0'; continue; } if(index_x!=0 &amp;&amp; grid[index_x-1][index_y]=='1'){ stack.push((index_x-1)*width+index_y); grid[index_x-1][index_y] = '0'; continue; } if(index_y!=0 &amp;&amp; grid[index_x][index_y-1]=='1'){ stack.push(index_x*width+index_y-1); grid[index_x][index_y-1] = '0'; continue; } if(index_y!=width-1 &amp;&amp; grid[index_x][index_y+1]=='1'){ stack.push(index_x*width+index_y+1); grid[index_x][index_y+1] = '0'; continue; }else{ stack.pop(); } } count++; } } } return count; } } 当然DFS还可以用递归的系统调用栈：（作者：LeetCode） class Solution { void dfs(char[][] grid, int r, int c) { int nr = grid.length; int nc = grid[0].length; if (r &lt; 0 || c &lt; 0 || r >= nr || c >= nc || grid[r][c] == '0') { return; } grid[r][c] = '0'; dfs(grid, r - 1, c); dfs(grid, r + 1, c); dfs(grid, r, c - 1); dfs(grid, r, c + 1); } public int numIslands(char[][] grid) { if (grid == null || grid.length == 0) { return 0; } int nr = grid.length; int nc = grid[0].length; int num_islands = 0; for (int r = 0; r &lt; nr; ++r) { for (int c = 0; c &lt; nc; ++c) { if (grid[r][c] == '1') { ++num_islands; dfs(grid, r, c); } } } return num_islands; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"BFS","slug":"BFS","permalink":"https://www.codetool.top/tags/BFS/"},{"name":"DFS","slug":"DFS","permalink":"https://www.codetool.top/tags/DFS/"}]},{"title":"leetcode622-设计循环队列","slug":"leetcode622-设计循环队列","date":"2019-11-24T10:05:23.000Z","updated":"2020-02-20T14:42:31.679Z","comments":true,"path":"article/leetcode622-设计循环队列/","link":"","permalink":"https://www.codetool.top/article/leetcode622-%E8%AE%BE%E8%AE%A1%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97/","excerpt":"","text":"设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为“环形缓冲器”。 循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。 你的实现应该支持如下操作： MyCircularQueue(k): 构造器，设置队列长度为 k 。 Front: 从队首获取元素。如果队列为空，返回 -1 。 Rear: 获取队尾元素。如果队列为空，返回 -1 。 enQueue(value): 向循环队列插入一个元素。如果成功插入则返回真。 deQueue(): 从循环队列中删除一个元素。如果成功删除则返回真。 isEmpty(): 检查循环队列是否为空。 isFull(): 检查循环队列是否已满。 示例: MyCircularQueue circularQueue = new MycircularQueue(3); // 设置长度为 3 circularQueue.enQueue(1); // 返回 true circularQueue.enQueue(2); // 返回 true circularQueue.enQueue(3); // 返回 true circularQueue.enQueue(4); // 返回 false，队列已满 circularQueue.Rear(); // 返回 3 circularQueue.isFull(); // 返回 true circularQueue.deQueue(); // 返回 true circularQueue.enQueue(4); // 返回 true circularQueue.Rear(); // 返回 4 提示: 所有的值都在 0 至 1000 的范围内； 操作数将在 1 至 1000 的范围内； 请不要使用内置的队列库。 1 解法1.1 思想根据循环队列的定义来实现，理解head指针和tail指针指向的位置。通常情况下：添加元素，tail++。删除元素，head++。当tail或head处于数组的最末端的时候：操作之后应该指向下标0。当数组为空：不能移除元素。当数组满了：不能添加元素。 1.2 代码class MyCircularQueue { int[] queue; int head; int tail; int size; /** Initialize your data structure here. Set the size of the queue to be k. */ public MyCircularQueue(int k) { queue = new int[k]; size = 0; head = -1; tail = -1; } /** Insert an element into the circular queue. Return true if the operation is successful. */ public boolean enQueue(int value) { if(isFull()) return false; if(tail == queue.length-1) { tail = 0; queue[0] = value; } else queue[++tail] = value; size++; if(head==-1) head = 0; return true; } /** Delete an element from the circular queue. Return true if the operation is successful. */ public boolean deQueue() { if(isEmpty()) return false; if(size==1){ tail = -1; head = -1; }else if(head == queue.length-1){ head = 0; }else{ head++; } size--; return true; } /** Get the front item from the queue. */ public int Front() { if(head==-1) return -1; return queue[head]; } /** Get the last item from the queue. */ public int Rear() { if(tail==-1) return -1; return queue[tail]; } /** Checks whether the circular queue is empty or not. */ public boolean isEmpty() { return size == 0; } /** Checks whether the circular queue is full or not. */ public boolean isFull() { return size == queue.length; } } /** * Your MyCircularQueue object will be instantiated and called as such: * MyCircularQueue obj = new MyCircularQueue(k); * boolean param_1 = obj.enQueue(value); * boolean param_2 = obj.deQueue(); * int param_3 = obj.Front(); * int param_4 = obj.Rear(); * boolean param_5 = obj.isEmpty(); * boolean param_6 = obj.isFull(); */","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"https://www.codetool.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"}]},{"title":"leetcode26-删除排序数组中的重复项","slug":"leetcode26-删除排序数组中的重复项","date":"2019-11-23T10:05:23.000Z","updated":"2019-12-19T08:15:15.881Z","comments":true,"path":"article/leetcode26-删除排序数组中的重复项/","link":"","permalink":"https://www.codetool.top/article/leetcode26-%E5%88%A0%E9%99%A4%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/","excerpt":"","text":"1 原题给定一个排序数组，你需要在原地删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。 示例 1: 给定数组 nums = [1,1,2],函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。你不需要考虑数组中超出新长度后面的元素。 示例 2: 给定 nums = [0,0,1,1,1,2,2,3,3,4],函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。你不需要考虑数组中超出新长度后面的元素。 说明: 为什么返回数值是整数，但输出的答案是数组呢? 请注意，输入数组是以“引用”方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。 你可以想象内部操作如下: // nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝int len = removeDuplicates(nums); // 在函数里修改输入数组对于调用者是可见的。// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。for (int i = 0; i &lt; len; i++) {print(nums[i]);} 2 解法2.1 思想双指针解法，i始终停留在第一个出现的重复元素上，j一旦遇到不重复的元素，i++，然后将不重复的元素赋给nums[i]。 2.2 代码class Solution { public int removeDuplicates(int[] nums) { int i = 0; int j = 0; int count = 0; while(j&lt;nums.length-1){ j++; if(nums[j]!=nums[i]) nums[++i] = nums[j]; } return i+1; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode283-移动零","slug":"leetcode283-移动零","date":"2019-11-23T10:05:23.000Z","updated":"2019-12-19T08:15:15.883Z","comments":true,"path":"article/leetcode283-移动零/","link":"","permalink":"https://www.codetool.top/article/leetcode283-%E7%A7%BB%E5%8A%A8%E9%9B%B6/","excerpt":"","text":"1 原题给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。 示例: 输入: [0,1,0,3,12]输出: [1,3,12,0,0] 说明: 必须在原数组上操作，不能拷贝额外的数组。 尽量减少操作次数。 2 解法2.1 思想双指针解法，i始终不经过0，如果j遍历到了非0元素，i++，并把非0元素赋值给i。 2.2 代码class Solution { public void moveZeroes(int[] nums) { int i=0; for(int j=0;j&lt;nums.length;j++){ if (nums[j]!=0) { nums[i++]=nums[j]; } } for (int j=i;j&lt;nums.length;j++){ nums[j]=0; } } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode557-反转字符串中的单词III","slug":"leetcode557-反转字符串中的单词III","date":"2019-11-23T10:05:23.000Z","updated":"2020-02-20T14:42:31.679Z","comments":true,"path":"article/leetcode557-反转字符串中的单词III/","link":"","permalink":"https://www.codetool.top/article/leetcode557-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8DIII/","excerpt":"","text":"1 原题给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。 示例1: 输入: “Let’s take LeetCode contest”输出: “s’teL ekat edoCteeL tsetnoc” 注意： 在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。 2 解法2.1 思想翻转字符串可以用StringBuffer的reverse方法。 2.2 代码class Solution { public String reverseWords(String s) { String[] words = s.split(\" \"); StringBuilder sb = new StringBuilder(); for(String word:words){ sb.append(new StringBuffer(word).reverse().toString()); sb.append(\" \"); } return sb.toString().trim(); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"ArrayList源码分析","slug":"ArrayList源码分析","date":"2019-11-22T10:05:23.000Z","updated":"2020-02-09T19:43:59.980Z","comments":true,"path":"article/ArrayList源码分析/","link":"","permalink":"https://www.codetool.top/article/ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","excerpt":"","text":"1 总结总结放前面防止太长不看： ArrayList内部是用数组实现的。 如果使用无参构造函数建立ArrayList，在添加第一个元素的时候会分配10个元素的空间。 ArrayList的扩容是以1.5倍为基准的。 ArrayList是线程不安全的，有fail-fast机制作改动保障。 2 层次图ArrayList的Hierarchy： 先来看看List接口： 3 List接口List代表有序集合，元素可以重复。 List家族一览： 默认实现方法： 3.1 default void replaceAll(UnaryOperator operator);以指定的方法替换List中的所有元素，UnaryOperator是一个函数式接口，输入一个类型对象，返回一个同类型对象。 default void replaceAll(UnaryOperator&lt;E> operator) { Objects.requireNonNull(operator); final ListIterator&lt;E> li = this.listIterator(); while (li.hasNext()) { li.set(operator.apply(li.next())); } } 示例： List&lt;Integer> list = new ArrayList&lt;Integer>(); list.add(1); list.add(3); list.add(5); list.replaceAll(a->a+1); //list = [2,4,6] 3.2 default void sort(Comparator&lt;? super E&gt; c);根据排序方法排序。还是先转为了Array再使用Arrays的sort方法进行排序。 default void sort(Comparator&lt;? super E> c) { Object[] a = this.toArray(); Arrays.sort(a, (Comparator) c); ListIterator&lt;E> i = this.listIterator(); for (Object e : a) { i.next(); i.set((E) e); } } 4 AbstractList接口AbstractList接口继承自AbstractCollection，为什么要提它呢，因为里面有个重要的字段modCount，用于迭代器遍历元素时检查列表中的元素是否发生结构性变化。 参考下面“重要的内部类”中迭代器里next方法的实现。 5 重要的字段transient Object[] elementData;ArrayList的元素存储在这个数组中。 private int size;记录空间大小。 6 重要的内部类Itr实现了迭代器Iterator，ListItr实现了集合迭代器ListIterator 两者的介绍： 谈谈java中的Iterator next的实现： public E next() { checkForComodification(); int i = cursor; if (i >= size) throw new NoSuchElementException(); Object[] elementData = ArrayList.this.elementData; if (i >= elementData.length) throw new ConcurrentModificationException(); cursor = i + 1; return (E) elementData[lastRet = i]; }jav 其中的checkForComodification()： final void checkForComodification() { if (modCount != expectedModCount) throw new ConcurrentModificationException(); } modCount在ArrayList每次add或者remove它的值都会加1。在初始化迭代器的时候，令expectedModCount = modCount，在迭代器迭代的过程中，如果modCount被改变了，就会造成expectedModCount不等于modCount，抛出ConcurrentModificationException警告。 比如下面这段程序就会抛出警告： 为什么在迭代器循环的时候不让使用list.remove修改元素呢？ 有多线程下被影响的考虑，更重要的是，强制了在迭代器迭代的时候只能使用iterator.remove移除元素. 比如上面这段程序应该改成： 7 构造方法已知ArrayList的元素是存放于一个数组中，那么在初始化一个ArrayList对象的时候会分配一个多大的数组？ 先看两个构造方法： public ArrayList() { this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;} 其中常量DEFAULTCAPACITY_EMPTY_ELEMENTDATA是一个空数组： private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {}; public ArrayList(int initialCapacity) { if (initialCapacity > 0) { this.elementData = new Object[initialCapacity]; } else if (initialCapacity == 0) { this.elementData = EMPTY_ELEMENTDATA; } else { throw new IllegalArgumentException(\"Illegal Capacity: \"+ initialCapacity); } } 使用一个初始容量初始化ArrayList。如果传入的参数大于0，则分配一个这么大的数组。注意到如果这里的initialCapacity等于0，令其等于常量EMPTY_ELEMENTDATA也是一个空数组。 那为什么要区分EMPTY_ELEMENTDATA和DEFAULTCAPACITY_EMPTY_ELEMENTDATA呢？ 因为他们是两个不同对象的引用，ArrayList通过这个区分当前对象是用无参构造方法创建的还是由ArrayList(0)这样一个构造方法创建的 在后文“重要的内部方法”中的calculateCapacity方法，当第一个元素被加进来的时候就能知道应该扩容多少。 8 重要的内部方法8.1 空间分配相关8.1.1 private static int calculateCapacity(Object[] elementData, int minCapacity);private static int calculateCapacity(Object[] elementData, int minCapacity) { if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) { return Math.max(DEFAULT_CAPACITY, minCapacity); } return minCapacity; } 这个方法用于计算： 当原来数组为空，第一次插入元素的时候，数组应该分配多少空间，DEFAULTCAPACITY_EMPTY_ELEMENTDATA呼应了上面构造方法中的无参构造方法，常量DEFAULT_CAPACITY=10。 这说明：如果ArrayList是以无参构造方法建立的，在添加第一个元素时会直接分配10个元素的空间。 8.1.2 private void grow(int minCapacity);private void grow(int minCapacity) { // overflow-conscious code int oldCapacity = elementData.length; //即newCapacity = 1.5*oldCapacity int newCapacity = oldCapacity + (oldCapacity >> 1); if (newCapacity - minCapacity &lt; 0) newCapacity = minCapacity; if (newCapacity - MAX_ARRAY_SIZE > 0) newCapacity = hugeCapacity(minCapacity); // minCapacity is usually close to size, so this is a win: elementData = Arrays.copyOf(elementData, newCapacity); } 可以看出数组是以1.5倍为基准扩容的，如果1.5倍后大于MAX_ARRAY_SIZE (Integer.MAX_VALUE - 8)，则使用hugeCapacity(minCapacity)确认（size是int类型，不能超过int范围的最大值）。 8.2 元素获取、增改相关8.2.1 E elementData(int index);E elementData(int index) { return (E) elementData[index]; } 取元素,就是从数组中获取元素，是get等方法的依赖。 8.2.2 private void rangeCheck(int index);private void rangeCheck(int index) { if (index >= size) throw new IndexOutOfBoundsException(outOfBoundsMsg(index)); } 边界检查。 rangeCheck方法是提供给get,remove，set之类的方法检查的,是给已经存在元素的集合操作的，范围0至size-1,这个方法把检查负责的职责交给了数组的访问,像get(-1)时会报异常ArrayIndexOutOfBoundsException。 8.2.3 private void rangeCheckForAdd(int index);private void rangeCheckForAdd(int index) { if (index > size || index &lt; 0) throw new IndexOutOfBoundsException(outOfBoundsMsg(index)); } 这个方法是提供给add和addAll的，会检查负数。因为如果扩容了数组再抛出异常就白扩容了。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://www.codetool.top/tags/jdk/"},{"name":"集合","slug":"集合","permalink":"https://www.codetool.top/tags/%E9%9B%86%E5%90%88/"},{"name":"源码研究","slug":"源码研究","permalink":"https://www.codetool.top/tags/%E6%BA%90%E7%A0%81%E7%A0%94%E7%A9%B6/"}]},{"title":"leetcode151-翻转字符串里的单词","slug":"leetcode151-翻转字符串里的单词","date":"2019-11-22T10:05:23.000Z","updated":"2020-02-20T14:42:31.680Z","comments":true,"path":"article/leetcode151-翻转字符串里的单词/","link":"","permalink":"https://www.codetool.top/article/leetcode151-%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8C%E7%9A%84%E5%8D%95%E8%AF%8D/","excerpt":"","text":"1 原题给定一个字符串，逐个翻转字符串中的每个单词。 示例 1: 输入: “the sky is blue”输出: “blue is sky the” 示例 2: 输入: “ hello world! ”输出: “world! hello”解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。 示例 3: 输入: “a good example”输出: “example good a”解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。 说明: 无空格字符构成一个单词。 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。 2 解法2.1 思想直接使用jdk中String的trim()和split()方法得到单词的数组，或者遍历字符串字符，记录单词数组。再反向遍历输出。 2.2 代码class Solution { public String reverseWords(String s) { //\"\\\\s+\"代表正则表达式1个或多个空白字符 String[] words = s.trim().split(\"\\\\s+\"); int size = words.length; StringBuilder str = new StringBuilder(); for(int i = 0;i&lt;size;i++){ str.append(words[size-1-i]); if(i!=size-1) str.append(\" \"); } return str.toString(); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode189-旋转数组","slug":"leetcode189-旋转数组","date":"2019-11-22T10:05:23.000Z","updated":"2020-02-20T14:42:31.679Z","comments":true,"path":"article/leetcode189-旋转数组/","link":"","permalink":"https://www.codetool.top/article/leetcode189-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84/","excerpt":"","text":"1 原题给定一个数组，将数组中的元素向右移动 k 个位置，其中 k 是非负数。 示例1: 输入: [1,2,3,4,5,6,7] 和 k = 3输出: [5,6,7,1,2,3,4]解释:向右旋转 1 步: [7,1,2,3,4,5,6]向右旋转 2 步: [6,7,1,2,3,4,5]向右旋转 3 步: [5,6,7,1,2,3,4] 示例2: 输入: [-1,-100,3,99] 和 k = 2输出: [3,99,-1,-100]解释:向右旋转 1 步: [99,-1,-100,3]向右旋转 2 步: [3,99,-1,-100] 说明: 尽可能想出更多的解决方案，至少有三种不同的方法可以解决这个问题。 要求使用空间复杂度为 O(1) 的 原地 算法。 2 解法2.1 思想将旋转点前后的部分交换。注意当k大于数组大小size的情况相当于k=k%size的情况 2.2 代码class Solution { public void rotate(int[] nums, int k) { int size = nums.length; if(k==size) return; //k大于size的情况 if(k>size) k = k%size; //用另一个数组暂时存放结果 int[] rotate = new int[size]; //将旋转点后面的部分移到新数组前面来 for(int i = 0;i&lt;k;i++){ rotate[i] = nums[size-k+i]; } //将旋转点前面的部分移到新数组后面去 for(int i = k;i&lt;size;i++){ rotate[i] = nums[i-k]; } //将新数组中的值赋值回原数组 for(int i = 0;i&lt;size;i++){ nums[i] = rotate[i]; } } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode119-杨辉三角II","slug":"leetcode119-杨辉三角II","date":"2019-11-22T10:05:23.000Z","updated":"2020-02-20T14:42:31.679Z","comments":true,"path":"article/leetcode119-杨辉三角II/","link":"","permalink":"https://www.codetool.top/article/leetcode119-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92II/","excerpt":"","text":"1 原题给定一个非负索引 k，其中 k ≤ 33，返回杨辉三角的第 k 行。在杨辉三角中，每个数是它左上方和右上方的数的和。 示例: 输入: 3输出: [1,3,3,1] 进阶： 你可以优化你的算法到 O(k) 空间复杂度吗？ 2 解法2.1 思想可以利用leetcode118-杨辉三角中的函数来解决。 2.2 代码class Solution { public List&lt;Integer> getRow(int rowIndex) { List&lt;Integer> list = new ArrayList(); list.add(1); if(rowIndex == 0) return list; return getRowByPrev(rowIndex,getRow(rowIndex-1)); } //通过上一行计算第n行 public List&lt;Integer> getRowByPrev(int n,List&lt;Integer> nums){ List&lt;Integer> ret = new ArrayList(); ret.add(1); for(int i=1;i&lt;(n+2)/2;i++){ ret.add(nums.get(i-1)+nums.get(i)); } int size = (n+1)/2; for(int i=0;i&lt;size;i++){ ret.add(ret.get(size-i-1)); } return ret; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode167-两数之和II-输入有序数组","slug":"leetcode167-两数之和II-输入有序数组","date":"2019-11-20T10:05:23.000Z","updated":"2019-12-19T08:15:15.879Z","comments":true,"path":"article/leetcode167-两数之和II-输入有序数组/","link":"","permalink":"https://www.codetool.top/article/leetcode167-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8CII-%E8%BE%93%E5%85%A5%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/","excerpt":"","text":"1 原题给定一个已按照 升序排列 的有序数组，找到两个数使得它们相加之和等于目标数。 函数应该返回这两个下标值index1和index2，其中index1必须小于index2。 说明: 返回的下标值（index1 和 index2）不是从零开始的。 你可以假设每个输入只对应唯一的答案，而且你不可以重复使用相同的元素。 示例: 输入: numbers = [2, 7, 11, 15], target = 9输出: [1,2]解释 2 与 7 之和等于目标数 9 。因此 index1 = 1, index2 = 2 。 2 解法2.1 思想因为给的数组是有序的，可以使用双指针逼近目标数。 2.2 代码class Solution { public int[] twoSum(int[] numbers, int target) { int[] index = new int[2]; int index1 = 0; int index2 = numbers.length - 1; while (index1 &lt; index2) { if (numbers[index1] + numbers[index2] > target) index2--; else if (numbers[index1] + numbers[index2] &lt; target) index1++; //找到了 else { index[0] = index1 + 1; index[1] = index2 + 1; break; } } return index; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode27-移除元素","slug":"leetcode27-移除元素","date":"2019-11-20T10:05:23.000Z","updated":"2019-12-19T08:15:15.882Z","comments":true,"path":"article/leetcode27-移除元素/","link":"","permalink":"https://www.codetool.top/article/leetcode27-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/","excerpt":"","text":"1 原题给定一个数组 nums 和一个值 val*，你需要原地移除所有数值等于 *val 的元素，返回移除后数组的新长度。 不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。 元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。 示例 1: 给定 nums = [3,2,2,3], val = 3,函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。 示例 2: 给定 nums = [0,1,2,2,3,0,4,2], val = 2,函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。注意这五个元素可为任意顺序。你不需要考虑数组中超出新长度后面的元素。 说明: 为什么返回数值是整数，但输出的答案是数组呢? 请注意，输入数组是以 “引用” 方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。 你可以想象内部操作如下: // nums 是以“引用”方式传递的。也就是说，不对实参作任何拷贝int len = removeElement(nums, val); // 在函数里修改输入数组对于调用者是可见的。// 根据你的函数返回的长度, 它会打印出数组中该长度范围内的所有元素。for (int i = 0; i &lt; len; i++) {print(nums[i]);} 2 解法2.1 思想我们继续使用两个指针：一个仍然用于迭代，而第二个指针总是指向下一次添加的位置。 2.2 代码class Solution { public int removeElement(int[] nums, int val) { int k = 0; for(int i = 0;i&lt;nums.length;i++){ if(nums[i]!=val){ nums[k] = nums[i]; k++; } } return k; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode209-长度最小的子数组","slug":"leetcode209-长度最小的子数组","date":"2019-11-20T10:05:23.000Z","updated":"2019-12-19T08:15:15.880Z","comments":true,"path":"article/leetcode209-长度最小的子数组/","link":"","permalink":"https://www.codetool.top/article/leetcode209-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/","excerpt":"","text":"1 原题给定一个含有 n 个正整数的数组和一个正整数 s ，找出该数组中满足其和 ≥ s 的长度最小的连续子数组。如果不存在符合条件的连续子数组，返回 0。 示例: 输入: s = 7, nums = [2,3,1,2,4,3]输出: 2解释: 子数组 [4,3] 是该条件下的长度最小的连续子数组。 进阶: 如果你已经完成了O(n) 时间复杂度的解法, 请尝试 O(n log n) 时间复杂度的解法。 2 解法2.1 思想使用两个指针i、j从下标为0处开始遍历。如果i-j内的总数小于s，将j向后移动，如果i-j内的总数大于s，将i向后移动，直到获取所有子数组的长度，并比较出最短长度。 2.2 代码class Solution { public int minSubArrayLen(int s, int[] nums) { int i = 0; int j = -1; int size = nums.length; int sum = 0; int min = 0; while(i&lt;size&amp;&amp;j&lt;size){ if(sum>=s){ if(min==0) min = j-i+1; else min = j-i+1&lt;min?j-i+1:min; sum -= nums[i++]; }else{ if(j==size-1) return min; sum += nums[++j]; } } return min; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode28-实现strStr()","slug":"leetcode28-实现strStr","date":"2019-11-20T10:05:23.000Z","updated":"2020-02-20T14:42:31.680Z","comments":true,"path":"article/leetcode28-实现strStr/","link":"","permalink":"https://www.codetool.top/article/leetcode28-%E5%AE%9E%E7%8E%B0strStr/","excerpt":"","text":"1 原题实现 strStr() 函数。 给定一个 haystack 字符串和一个 needle 字符串，在 haystack 字符串中找出 needle 字符串出现的第一个位置 (从0开始)。如果不存在，则返回 -1。 示例 1: 输入: haystack = “hello”, needle = “ll”输出: 2 示例 2: 输入: haystack = “aaaaa”, needle = “bba”输出: -1 说明: 当 needle 是空字符串时，我们应当返回什么值呢？这是一个在面试中很好的问题。 对于本题而言，当 needle 是空字符串时我们应当返回 0 。这与C语言的 strstr() 以及 Java的 indexOf() 定义相符。 2 解法2.1 JDK API在leetcode上，当然可以投机取巧地使用String.indexof()方法，不用重复造轮子： class Solution { public int strStr(String haystack, String needle) { return haystack.indexOf(needle); } } 但这是一个经典的字符串精准模式匹配问题，历史上出现过很多解决这个问题的算法，掌握它们的思想还是有必要的： 2.2 BF算法（朴素算法）2.2.1 思想这是最直观、最简单的算法。从主串的第start个字符起和模式的第1个字符比较，如果相等继续逐个比较后续字符。比较过程中一旦发现不相等的情况，则回溯至主串中的第start+1个字符位置处，重新与模式P的字符进行比较。该算法效率较低。 2.2.2 代码class Solution { public int strStr(String haystack, String needle) { int mainLen = haystack.length(); int subLen = needle.length(); if(needle.equals(\"\")) return 0;//注意模式字符串为空的情况 for(int i=0;i&lt;mainLen;i++){ for(int j =0;j&lt;subLen;j++){ if(!(i+j&lt;mainLen)) return -1;//主串下标超出 if(!(haystack.charAt(i+j)==needle.charAt(j))) break; else if(j == subLen-1) return i;//完全匹配，返回主串下标 } } return -1; } } 算法的复杂度为O[(i-j)j] 2.3 MP算法2.3.1 思路 指针不回溯，利用已得到的“部分匹配”结果，将模式向右“滑动”若干位置后继续比较。 参考下面给出的示例：haystack ：&quot;cdnidnidsm&quot;needle：&quot;nidsm&quot;按照BF算法的思想，在比较haystack[2]和needle[0]时，两个字符相等，然而比较到haystack[5]和needle[3]的时候两个字符不等，于是回溯继续向后比较haystack[3]和needle[0]。可是既然能确定haystack[2]-haystack[4]与needle[0]-needle[2]是完全对应的。那么比较haystack[3]和needle[0]实际上相当于比较needle[1]和needle[0]。并且我们知道needle中前三个字符都是不同的。所以只需要从haystack[5]处继续跟needle[0]比较就行了。并且needle中字符的这些关系完全是一开始就可以确定的。 我们称记录模式字符串中各个字符之间关系的函数为失效函数。失效函数的定义域是模式字符串在“失配”前匹配的字符串个数。取值j属于0~Len(P)-1 获取失效函数的方法： 失效函数的取值k满足P0P1…Pk = Pj-kPj-k+1…Pj。如果不存在这个k值，取-1。 直观的看k就是模式字符串前j个字符是否存在前k+1位等于后k+1位。 nidsm的失效函数为： j 0 1 2 3 4 p(j) n i d s m k -1 -1 -1 -1 -1 再举一个例子，caatcat的失效函数为： j 0 1 2 3 4 5 6 p(j) c a a t c a t k -1 -1 -1 -1 0 1 -1 得到了失效函数后，即可使用MP算法进行匹配。假设在某一轮比较中，失配的情况发生在模式P的第j位，如果j=0，进行下一轮比较时，目标指针向后移动一位，模式的起始比较地址回到P0，其他情况进行下一轮比较时，目标指针不发生回溯，而模式P的起始比较地址为j-1对应的失效函数的值+1。 当然也可以把这个值提前算出来便成为了Next()函数： j 0 1 2 3 4 5 6 7 p(j) c a a t c a t Next(j) -1 0 0 0 0 1 2 0 Next(7)可以用于继续匹配（可能要求找出所有匹配的子字符串）。 2.3.2 代码class Solution { //获取next函数 public int[] next(String needle){ int len = needle.length(); int i = 0; int j = -1; int[] next = new int[len+1]; next[0] = -1; while(i &lt; len){ while( j > -1 &amp;&amp; needle.charAt(i)!=needle.charAt(j)) j = next[j];//j会有一个传递的效果，必须前一个i对应的j是1，下一个i对应的j才能是2。如果遇到不同的字符则j清零 next[++i] = ++j; } return next; } public int strStr(String haystack, String needle) { int mainLen = haystack.length(); int subLen = needle.length(); if(needle.equals(\"\")) return 0;//注意模式字符串为空的情况 if(mainLen&lt;subLen) return -1; int[] next = next(needle); int i = 0; int j = 0; while(j &lt; mainLen){ while(i>-1 &amp;&amp; needle.charAt(i) != haystack.charAt(j)) i = next[i]; i++; j++; if(i >= subLen){ return j-i; } } return -1; } } 2.4 KMP算法2.4.1 思路在MP算法的基础上，还要避免最长前缀之后的那个字符不等于原来失配的那个字符。下面在已知mpNext表的情况下，给出建立kmpNext表的规则。这个规则分为四种情况： 如果mpNext[j] = 0且Pj = P0，则令kmpNext[j] = -1。 如果mpNext[j] = 0且Pj ≠ P0，则令kmpNext[j] = 0。 如果mpNext[j] ≠ 0且Pj ≠ PmpNext[j]，则令kmpNext[j] = mpNext[j]。 如果mpNext[j] ≠ 0且Pj = PmpNext[j]，则用mpNext[j]的值替换原来mpNext[j]中的j值，直到情况转换为前3种情况的一种，进而递归地求解kmpNext[j]。 j 0 1 2 3 4 5 6 7 p(j) c a a t c a t mpNext(j) -1 0 0 0 0 1 2 0 kmpNext(j) -1 0 0 0 -1 0 2 0 2.4.2 代码class Solution { //获取kmpNext数组 public int[] next(String needle){ int len = needle.length(); int i = 0; int j = -1; int[] next = new int[len+1]; next[0] = -1; while(i &lt; len-1){ while( j > -1 &amp;&amp; needle.charAt(i)!=needle.charAt(j)) j = next[j]; i++; j++; if(needle.charAt(i) == needle.charAt(j)) next[i] = next[j]; else next[i] = j; } return next; } public int strStr(String haystack, String needle) { int mainLen = haystack.length(); int subLen = needle.length(); if(needle.equals(\"\")) return 0;//注意模式字符串为空的情况 if(mainLen&lt;subLen) return -1; int[] next = next(needle); int i = 0; int j = 0; while(j &lt; mainLen){ while(i>-1 &amp;&amp; needle.charAt(i) != haystack.charAt(j)) i = next[i]; i++; j++; if(i >= subLen){ return j-i; } } return -1; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode485-最大连续1的个数","slug":"leetcode485-最大连续1的个数","date":"2019-11-20T10:05:23.000Z","updated":"2019-12-19T08:15:15.884Z","comments":true,"path":"article/leetcode485-最大连续1的个数/","link":"","permalink":"https://www.codetool.top/article/leetcode485-%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/","excerpt":"","text":"1 原题给定一个二进制数组， 计算其中最大连续1的个数。 示例 1: 输入： [1,1,0,1,1,1]输出： 3解释： 开头的两位和最后的三位都是连续1，所以最大连续1的个数是 3. 注意： 输入的数组只包含0和1。 输入数组的长度是正整数，且不超过 10,000。 2 解法2.1 思想使用一个数遍历数组，另一个数记录遇到的连续的1的个数，记录最大值。 2.2 代码class Solution { public int findMaxConsecutiveOnes(int[] nums) { int j=0; int max=0; for(int i:nums){ if(i==1){ j++; }else{ if(j>max) max=j; j=0; } } if(j>max) max=j; return max; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"AbstractCollection默认集合类","slug":"AbstractCollection源码分析","date":"2019-11-18T14:39:59.000Z","updated":"2020-02-09T18:42:25.012Z","comments":true,"path":"article/AbstractCollection源码分析/","link":"","permalink":"https://www.codetool.top/article/AbstractCollection%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/","excerpt":"","text":"AbstractCollection用于实现基本的Collection结构，提供给普通用户继承使用。也是JDK集合类的父类，部分方法是没有被重载的。 相比Collection接口并没有新增公开方法，但它提供了许多方法的默认实现。 0.1 public boolean contains(Object o);提供了一个默认实现： public boolean contains(Object o) { Iterator&lt;E> it = iterator(); if (o==null) { while (it.hasNext()) if (it.next()==null) return true; } else { while (it.hasNext()) if (o.equals(it.next())) return true; } return false; } 很容易理解，也很依赖于iterator()和equals()方法的实现 0.2 public boolean isEmpty();public boolean isEmpty() { return size() == 0; } 依赖于size()方法的实现 0.3 public Object[] toArray();public Object[] toArray() { // Estimate size of array; be prepared to see more or fewer elements Object[] r = new Object[size()]; Iterator&lt;E> it = iterator(); for (int i = 0; i &lt; r.length; i++) { if (! it.hasNext()) // fewer elements than expected return Arrays.copyOf(r, i); r[i] = it.next(); } return it.hasNext() ? finishToArray(r, it) : r; } 注意该实现判断了iterator遍历的元素个数可能跟size()的结果不同的情况。并且以iterator遍历的所有元素为准。 0.3.1 private static T[] finishToArray(T[] r, Iterator&lt;?&gt; it);是toArray()函数调用的一个私密静态方法，它将it迭代器遍历的所有元素存入一个数组，并且不依赖size()的实现，可以给传入的数组扩容。 private static &lt;T> T[] finishToArray(T[] r, Iterator&lt;?> it) { int i = r.length; while (it.hasNext()) { int cap = r.length;//容量capacity的概念 if (i == cap) { int newCap = cap + (cap >> 1) + 1;// n+n/2+1扩容 // overflow-conscious code if (newCap - MAX_ARRAY_SIZE > 0) newCap = hugeCapacity(cap + 1); //新容量等于Integer.MAX_VALUE或MAX_ARRAY_SIZE r = Arrays.copyOf(r, newCap); } r[i++] = (T)it.next(); } // trim if overallocated return (i == r.length) ? r : Arrays.copyOf(r, i); } 0.3.2 private static int hugeCapacity(int minCapacity);是finishToArray()函数调用的用于容量逼近Integer.MAX_VALUE给数组扩容的方法 private static int hugeCapacity(int minCapacity) { //超出int范围 if (minCapacity &lt; 0) // overflow throw new OutOfMemoryError (\"Required array size too large\"); return (minCapacity > MAX_ARRAY_SIZE) ? Integer.MAX_VALUE : MAX_ARRAY_SIZE; } 0.4 public boolean add(E e);public boolean add(E e) { throw new UnsupportedOperationException(); } 不允许单个添加元素。 0.5 public boolean remove(Object o);public boolean remove(Object o) { Iterator&lt;E> it = iterator(); if (o==null) { while (it.hasNext()) { if (it.next()==null) { it.remove(); return true; } } } else { while (it.hasNext()) { if (o.equals(it.next())) { it.remove(); return true; } } } return false; } 注意null要分开来判断，因为null不能被equals()调用删除的方式是通过迭代器的remove()方法 0.6 public boolean containsAll(Collection&lt;?&gt; c);public boolean containsAll(Collection&lt;?> c) { for (Object e : c) if (!contains(e)) return false; return true; } 循环调用contains()方法判断 0.7 public boolean addAll(Collection&lt;? extends E&gt; c)public boolean addAll(Collection&lt;? extends E> c) { boolean modified = false; for (E e : c) if (add(e)) modified = true; return modified; } 这个操作不能保证所有元素都被添加成功了，这依赖于add()方法的实现，但只要有一个元素被添加成功了，就返回true。 0.8 public boolean removeAll(Collection&lt;?&gt; c)public boolean removeAll(Collection&lt;?&gt; c) { Objects.requireNonNull(c); boolean modified = false; Iterator&lt;?&gt; it = iterator(); while (it.hasNext()) { if (c.contains(it.next())) { it.remove(); modified = true; } } return modified; }同理，该操作也不能保证所有元素都被移除成功了，但只要有一个元素被移除成功了，就返回true。 0.9 public boolean retainAll(Collection&lt;?&gt; c)public boolean retainAll(Collection&lt;?> c) { Objects.requireNonNull(c); boolean modified = false; Iterator&lt;E> it = iterator(); while (it.hasNext()) { if (!c.contains(it.next())) { it.remove(); modified = true; } } return modified; } 和removeAll()的实现相反，将c中含有的元素保留了下来。 0.10 public void clear();public void clear() { Iterator&lt;E> it = iterator(); while (it.hasNext()) { it.next(); it.remove(); } } 移除所有元素。 0.11 public String toString()public String toString() { Iterator&lt;E> it = iterator(); if (! it.hasNext()) return \"[]\"; StringBuilder sb = new StringBuilder();//sb sb.append('['); for (;;) { E e = it.next(); sb.append(e == this ? \"(this Collection)\" : e); if (! it.hasNext()) return sb.append(']').toString(); sb.append(',').append(' '); } } 以[*,*,*...]的形式输出字符串，还考虑到了元素可能是它本身的情况","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://www.codetool.top/tags/jdk/"},{"name":"集合","slug":"集合","permalink":"https://www.codetool.top/tags/%E9%9B%86%E5%90%88/"}]},{"title":"leetcode14-最长公共前缀","slug":"leetcode14-最长公共前缀","date":"2019-11-18T10:05:23.000Z","updated":"2020-02-20T14:42:31.680Z","comments":true,"path":"article/leetcode14-最长公共前缀/","link":"","permalink":"https://www.codetool.top/article/leetcode14-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/","excerpt":"","text":"1 原题编写一个函数来查找字符串数组中的最长公共前缀。 如果不存在公共前缀，返回空字符串 “”。 示例 1: 输入: [“flower”,”flow”,”flight”]输出: “fl” 示例 2: 输入: [“dog”,”racecar”,”car”]输出: “”解释: 输入不存在公共前缀。 说明: 所有输入只包含小写字母 a-z 。 2 解法2.1 思想以第一个字符串的每一个位置上的字符为基准，依次比对其余字符串对应位置上的字符，如果每个字符串对应的位置上都是这个字符，则将其append到结果上，一旦遇到一个字符不是公有的立刻将结果返回。 2.2 代码class Solution { public String longestCommonPrefix(String[] strs) { int size = strs.length; if(size==0) return \"\"; if(size==1) return strs[0];//一个字符串直接返回本身 StringBuilder str = new StringBuilder();//为了避免java连接字符串的低效率使用StringBuilder for(int i = 0;i &lt; strs[0].length();i++){ char letter = strs[0].charAt(i); for(int j = 1;j &lt; size;j++){ //依次检查其余字符串各个字符是否对应第一个字符串中的字符 //为了避免其他字符串的长度小于第一个字符串，使用try捕获异常 try{ if(strs[j].charAt(i)!=letter) return str.toString(); }catch(Exception e){ return str.toString();} } str.append(letter); } return str.toString(); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode344-反转字符串","slug":"leetcode344-反转字符串","date":"2019-11-18T10:05:23.000Z","updated":"2020-02-20T14:42:31.679Z","comments":true,"path":"article/leetcode344-反转字符串/","link":"","permalink":"https://www.codetool.top/article/leetcode344-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/","excerpt":"","text":"1 原题编写一个函数，其作用是将输入的字符串反转过来。输入字符串以字符数组char[]的形式给出。 不要给另外的数组分配额外的空间，你必须原地修改输入数组、使用 O(1) 的额外空间解决这一问题。 你可以假设数组中的所有字符都是 ASCII 码表中的可打印字符。 示例 1: 输入：[“h”,”e”,”l”,”l”,”o”]输出：[“o”,”l”,”l”,”e”,”h”] 示例 2: 输入：[“H”,”a”,”n”,”n”,”a”,”h”]输出：[“h”,”a”,”n”,”n”,”a”,”H”] 2 解法2.1 思想将第一个元素与末尾进行交换，再向前移动到下一个元素，并不断地交换，直到它到达中间位置。 我们可以同时使用两个指针来完成迭代：一个从第一个元素开始，另一个从最后一个元素开始。持续交换它们所指向的元素，直到这两个指针相遇。 2.2 代码class Solution { public void reverseString(char[] s) { char temp; int i = 0; int j = s.length-1; while(i&lt;=j){ temp = s[i]; s[i] = s[j]; s[j] = temp; i++; j--; } } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"双指针技巧","slug":"双指针技巧","permalink":"https://www.codetool.top/tags/%E5%8F%8C%E6%8C%87%E9%92%88%E6%8A%80%E5%B7%A7/"}]},{"title":"leetcode561-数组拆分I","slug":"leetcode561-数组拆分I","date":"2019-11-18T10:05:23.000Z","updated":"2020-02-20T14:42:31.679Z","comments":true,"path":"article/leetcode561-数组拆分I/","link":"","permalink":"https://www.codetool.top/article/leetcode561-%E6%95%B0%E7%BB%84%E6%8B%86%E5%88%86I/","excerpt":"","text":"1 原题给定长度为 2n 的数组, 你的任务是将这些数分成 n 对, 例如 (a1, b1), (a2, b2), …, (an, bn) ，使得从1 到 n 的 min(ai, bi) 总和最大。 示例 1: 输入：[1,4,3,2]输出： 4解释: n 等于 2, 最大总和为 4 = min(1, 2) + min(3, 4). 提示: n 是正整数,范围在 [1, 10000]. 数组中的元素范围在 [-10000, 10000]. 2 解法2.1 思想通过观察发现，最后总和应该是所有数排完序后偶数下标的元素的值的总和。 2.2 代码class Solution { public int arrayPairSum(int[] nums) { Arrays.sort(nums); int i = 0; int sum = 0; while(i&lt;nums.length){ sum+=nums[i]; i+=2; } return sum; } } 还有一种排序方法：因为已知数的范围都是在[-10000, 10000]中，可以利用额外的空间排序。这种方法由于排序更快，时间复杂度较低，但只适用于数值范围已知且对空间复杂度要求不高的情况。 public class Solution { public int arrayPairSum(int[] nums) { int[] arr = new int[20001]; int lim = 10000; for (int num: nums) arr[num + lim]++; int d = 0, sum = 0; for (int i = -10000; i &lt;= 10000; i++) { sum += (arr[i + lim] + 1 - d) / 2 * i; d = (2 + arr[i + lim] - d) % 2; } return sum; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode118-杨辉三角","slug":"leetcode118-杨辉三角","date":"2019-11-15T10:05:23.000Z","updated":"2020-02-20T14:42:31.679Z","comments":true,"path":"article/leetcode118-杨辉三角/","link":"","permalink":"https://www.codetool.top/article/leetcode118-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/","excerpt":"","text":"1 原题给定一个非负整数 numRows，生成杨辉三角的前 numRows 行。在杨辉三角中，每个数是它左上方和右上方的数的和。 示例: 输入: 5输出:[ [1], [1,1], [1,2,1], [1,3,3,1],[1,4,6,4,1]] 2 解法2.1 思想根据上一行生成下一行，避免重复计算 2.2 代码class Solution { public List&lt;List&lt;Integer>> generate(int numRows) { List&lt;Integer> row = new ArrayList(); List&lt;List&lt;Integer>> ret = new ArrayList&lt;List&lt;Integer>>(); for(int n = 0;n&lt;numRows;n++){ row = getRow(n+1,row); ret.add(row); } return ret; } //n:第n行，nums：上一行（n-1行）的列表 public List&lt;Integer> getRow(int n,List&lt;Integer> nums){ List&lt;Integer> ret = new ArrayList(); ret.add(1);//第一个1不需要计算 if(n==1){//第一行直接返回 return ret; } for(int i=1;i&lt;(n+1)/2;i++){//由上一行的数相加得到结果 ret.add(nums.get(i-1)+nums.get(i)); } int size = n/2; for(int i=0;i&lt;size;i++){//镜像处理 ret.add(ret.get(size-i-1)); } return ret; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode54-螺旋矩阵","slug":"leetcode54-螺旋矩阵","date":"2019-11-15T10:05:23.000Z","updated":"2020-02-20T14:42:31.679Z","comments":true,"path":"article/leetcode54-螺旋矩阵/","link":"","permalink":"https://www.codetool.top/article/leetcode54-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/","excerpt":"","text":"1 原题给定一个包含 m x n 个元素的矩阵（m 行, n 列），请按照顺时针螺旋顺序，返回矩阵中的所有元素。 示例 1: 输入:[[ 1, 2, 3 ],[ 4, 5, 6 ],[ 7, 8, 9 ]]输出: [1,2,3,6,9,8,7,4,5] 示例 2: 输入:[[1, 2, 3, 4],[5, 6, 7, 8],[9,10,11,12]]输出: [1,2,3,6,9,8,7,4,5] 2 解法2.1 思想找拐点规律和移动规律： 当横坐标x等于纵坐标y+1时，且之前是向上移动的，拐点向右。 当横坐标x加纵坐标y等于列数减一，且之前是向右移动的，拐点向下。 当行数和横坐标x之差等于列数与纵坐标y之差时，且之前是向下移动的，拐点向左。 当横坐标x加纵坐标y等于行数减一，且之前是向左移动的，拐点向上。 当不满足上述拐点情况时，坐标会随着之前的运动方向继续运动。可以设置代表四个方向运动状态的布尔值来记录运动状态。 2.2 代码class Solution { public List&lt;Integer> spiralOrder(int[][] matrix) { if(matrix==null) return null; int x = matrix.length; List&lt;Integer> ret = new ArrayList&lt;Integer>(); if(x==0) return ret; int y = matrix[0].length;//获取二维数组的行数和列数，排除null和空情况。 int x_now=0,y_now=0; int size = x*y; //代表向各个方向移动的布尔值。 boolean toRight=true,toLeft=false,toTop=false,toBottom=false; for(int i=0;i&lt;size;i++) { ret.add(matrix[x_now][y_now]); if(x_now==y_now+1&amp;&amp;toTop) {//拐向右 toRight=true; toTop=false; }else if(y_now==y-x_now-1&amp;&amp;toRight) {//拐向下 toBottom=true; toRight=false; }else if(x-x_now==y-y_now&amp;&amp;toBottom){//拐向左 toLeft=true; toBottom=false; }else if(x_now==x-y_now-1&amp;&amp;toLeft) {//拐向上 toTop=true; toLeft=false; } //移动坐标 if(toRight) y_now++; if(toLeft) y_now--; if(toTop) x_now--; if(toBottom) x_now++; } return ret; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode67-二进制求和","slug":"leetcode67-二进制求和","date":"2019-11-15T10:05:23.000Z","updated":"2020-02-20T14:42:31.680Z","comments":true,"path":"article/leetcode67-二进制求和/","link":"","permalink":"https://www.codetool.top/article/leetcode67-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C/","excerpt":"","text":"1 原题给定两个二进制字符串，返回他们的和（用二进制表示）。 输入为非空字符串且只包含数字 1 和 0。 示例 1: 输入: a = “11”, b = “1”输出: “100” 示例 2: 输入: a = “1010”, b = “1011”输出: “10101” 2 解法2.1 思想通过加法规则实现，应注意进位的处理和字符的处理。不确定最后的结果是否会多出一位进位，所以会有 2 种处理方式： 第一种，在进行计算时直接拼接字符串，会得到一个反向字符，需要最后再进行翻转 第二种，按照位置给结果字符赋值，最后如果有进位，则在前方进行字符串拼接添加进位 2.2 代码 copy了@灵魂画师牧码（guanpengchn）的思路： class Solution { public String addBinary(String a, String b) { StringBuilder ans = new StringBuilder(); int ca = 0;//进位值 for(int i = a.length() - 1, j = b.length() - 1;i >= 0 || j >= 0; i--, j--) { int sum = ca; //将数组长度不够的情况一般化，负数下标对应的值用0计算。 sum += i >= 0 ? a.charAt(i) - '0' : 0; sum += j >= 0 ? b.charAt(j) - '0' : 0; ans.append(sum % 2); ca = sum / 2;//得到进位 } ans.append(ca == 1 ? ca : \"\");//如果最后进位值还为1则添加一位 return ans.reverse().toString();//反转字符串 } } 自己做的凌乱的思路： class Solution { public String addBinary(String a, String b) { //获取两个字符串的长度和最大值最小值 int len_a = a.length(); int len_b = b.length(); int max,min; boolean carry = false;//进位标志 if( len_a &lt;= len_b ){ max = len_b; min = len_a; }else{ max = len_a; min = len_b; } char[] ret = new char[max]; for( int i = 0 ; i &lt; max ; i++ ){ char a_now = i&lt;len_a?a.charAt(len_a-1-i):'0'; char b_now = i&lt;len_b?b.charAt(len_b-1-i):'0'; //列举所有情况手动计算 if(a_now=='1'&amp;&amp;b_now=='1'){ ret[max-i-1] = carry?'1':'0'; carry = true; if(i==max-1){ return \"1\"+ String.valueOf(ret);//如果当前为首位则在前面连接一个1 } }else if(a_now=='1'&amp;&amp;b_now=='0'||b_now=='1'&amp;&amp;a_now=='0'){ if(carry){ ret[max-i-1] = '0'; if(i==max-1){ return \"1\"+ String.valueOf(ret); } }else{ ret[max-i-1] = '1'; } }else if(a_now=='0'&amp;&amp;b_now=='0'){ ret[max-i-1] = carry?'1':'0'; carry = false; } } return String.valueOf(ret); } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode498-对角线遍历","slug":"leetcode498-对角线遍历","date":"2019-11-14T10:05:23.000Z","updated":"2020-02-20T14:42:31.679Z","comments":true,"path":"article/leetcode498-对角线遍历/","link":"","permalink":"https://www.codetool.top/article/leetcode498-%E5%AF%B9%E8%A7%92%E7%BA%BF%E9%81%8D%E5%8E%86/","excerpt":"","text":"这是一个Z字形编排问题，JEPG的编码过程中也会用到。 1 原题给定一个含有 M x N 个元素的矩阵（M 行，N 列），请以对角线遍历的顺序返回这个矩阵中的所有元素，对角线遍历如下图所示。 示例: 输入:[[ 1, 2, 3 ],[ 4, 5, 6 ],[ 7, 8, 9 ]]输出: [1,2,4,7,5,3,6,8,9]解释: 说明: 给定矩阵中的元素总数不会超过 100000 。 2 解法2.1 思想找拐点的规律： 当横坐标x为0，纵坐标y是偶数，且y不是最后一列的时候，拐点向右。 当横坐标x为最后一行，若行数为偶数且纵坐标y为奇数或行数为奇数但纵坐标y为偶数时，拐点向右。 当纵坐标y为0，横坐标x是奇数，且x不是最后一行的时候，拐点向下。 当纵坐标y为最后一列，若列数为偶数且横坐标x为偶数或列数为奇数但横坐标x为奇数时，拐点向右。 其他情况，当横坐标x为偶数且纵坐标y为奇数或x为奇数且y为偶数的时候，拐点向左下 当横坐标x为偶数且纵坐标y为偶数或x为奇数且y为奇数的时候，拐点向右上 2.2 代码class Solution { public int[] findDiagonalOrder(int[][] matrix) { //获取二维数组的长宽、大小 int x = matrix.length; if(x == 0) return new int[0]; int y = matrix[0].length; int size = x*y; int x_now=0,y_now=0;//落点位置 int[] ret = new int[size];//用于存储并返回的一维数组 int i = 0; while( x_now &lt; x &amp;&amp; y_now &lt; y ){ ret[i] = matrix[x_now][y_now]; //存入元素 i++; if((x_now==0&amp;&amp;y_now%2==0&amp;&amp;y_now!=y-1)||(x_now == x-1&amp;&amp;(y_now+x)%2==0)){//向右 y_now += 1; }else if((y_now==0&amp;&amp;x_now%2==1&amp;&amp;x_now!=x-1)||(y_now == y-1&amp;&amp;(x_now+y)%2==1)){//向下 x_now += 1; } else if((x_now+y_now)%2==0){//向右上 y_now +=1; x_now -=1; }else if((x_now+y_now)%2==1){//向左下 y_now -=1; x_now +=1; } } return ret; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"leetcode66-加一","slug":"leetcode66-加一","date":"2019-11-14T10:05:23.000Z","updated":"2020-02-20T14:42:31.679Z","comments":true,"path":"article/leetcode66-加一/","link":"","permalink":"https://www.codetool.top/article/leetcode66-%E5%8A%A0%E4%B8%80/","excerpt":"","text":"1 原题给定一个由整数组成的非空数组所表示的非负整数，在该数的基础上加一。 最高位数字存放在数组的首位， 数组中每个元素只存储单个数字。 你可以假设除了整数 0 之外，这个整数不会以零开头。 示例 1: 输入: [1,2,3]输出: [1,2,4]解释: 输入数组表示数字123。 示例 2: 输入: [4,3,2,1]输出: [4,3,2,2]解释: 输入数组表示数字4321。 2 解法2.1 思想根据加法规则进行计算，应注意进位的处理和全是9的特殊情况 2.2 代码 迭代 class Solution { public int[] plusOne(int[] digits) { for(int i = digits.length-1;i>=0;i--){ if(digits[i]!=9) {//不需进位 digits[i] += 1; break;//什么时候不需进位即可退出 }else { if (i == 0) {//首位需进位的特殊情况，需分配一个大一位的数组 int[] ret = new int[digits.length+1]; ret[0] = 1; return ret; } digits[i] = 0;//不是首位，需进位 } } return digits; } } 递归 class Solution { public int[] plusOne(int[] digits) { return addOneAtPos(digits, digits.length-1); } private int[] addOneAtPos(int[] num, int pos){//在pos位上加一 if(num[pos]!=9){//不需进位 num[pos]+=1; return num;//什么时候不需进位即可返回 } else if(pos>0){//不是首位，需进位 num[pos]=0; return addOneAtPos(num, pos-1); } else {//首位需进位的特殊情况，需分配一个大一位的数组 int length = num.length; int[] newNum = new int[length+1]; newNum[0]=1; return newNum; } } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"},{"name":"递归","slug":"递归","permalink":"https://www.codetool.top/tags/%E9%80%92%E5%BD%92/"}]},{"title":"Collection接口研究","slug":"Collection接口研究","date":"2019-11-13T10:05:23.000Z","updated":"2020-02-09T18:43:03.123Z","comments":true,"path":"article/Collection接口研究/","link":"","permalink":"https://www.codetool.top/article/Collection%E6%8E%A5%E5%8F%A3%E7%A0%94%E7%A9%B6/","excerpt":"","text":"以下内容基于jdk1.8 1 接口Collection分析 img 该接口实现了接口Iterable 方法： 1.1 int size();返回元素的个数 1.2 boolean isEmpty();返回是否为空 1.3 boolean contains(Object o);返回是否包含某个对象抛出异常： @throws ClassCastException 参数不兼容 @throws NullPointerException 参数是null，并且容器不允许包含null元素 1.4 Object[] toArray();返回所有元素组成的一个数组数组是重新分配空间并创建的，它的元素不会由该容器维护，原文： The returned array will be “safe” in that no references to it are maintained by this collection. (In other words, this method must allocate a new array even if this collection is backed by an array). The caller is thus free to modify the returned array. 1.5 T[] toArray(T[] a);如果给定的数组大小能容纳该容器所有元素，则返回到给定数组中，否则会新分配一个可以容纳所有元素的数组并返回。 List&lt;Integer> list = new ArrayList&lt;Integer>(); Integer[] a = new Integer[2]; list.add(3); list.add(5); list.toArray(a); // a = {3,5} 抛出异常： @throws ArrayStoreException 给定的数组运行类型不是该容器运行类型的超类 @throws NullPointerException 给定的数组是null 1.6 boolean add(E e);确保该容器包含该指定的元素，如果因为这个操作改变了容器内的元素返回true，如果该容器已经有了该元素且不允许包含重复的元素则返回false 抛出异常： @throws UnsupportedOperationException 该容器不支持这个操作 @throws ClassCastException 给定的元素不能添加进容器中 @throws NullPointerException 参数是null，并且容器不允许包含null元素 @throws IllegalArgumentException 给定的元素的某些属性决定了它不能被添加进该容器中 @throws IllegalStateException 由于某些限制该时间不能添加该元素 1.7 boolean remove(Object o);移除某个元素抛出异常： @throws ClassCastException @throws NullPointerException @throws UnsupportedOperationException 1.8 boolean containsAll(Collection&lt;?&gt; c)如果该容器包含给定的容器中的所有元素，返回true抛出异常： @throws ClassCastException @throws NullPointerException 1.9 boolean addAll(Collection&lt;? extends E&gt; c)将给定容器中的所有元素插入到该容器中抛出异常： @throws UnsupportedOperationException @throws ClassCastException @throws NullPointerException @throws IllegalArgumentException @throws IllegalStateException 1.10 boolean removeAll(Collection&lt;?&gt; c)将该容器和给定容器中共有的元素从该容器中删除抛出异常： @throws UnsupportedOperationException @throws ClassCastException @throws NullPointerException 1.11 default boolean removeIf(Predicate&lt;? super E&gt; filter)Predicate是JAVA8新增的一个函数式接口（指如果填写lambda表达式则默认实现Predicate的test方法），这个方法删除所有符合条件的元素，如果成功返回true? super E指的是E或E的父类默认实现： default boolean removeIf(Predicate&lt;? super E> filter) { Objects.requireNonNull(filter); boolean removed = false; final Iterator&lt;E> each = iterator(); while (each.hasNext()) { if (filter.test(each.next())) { each.remove(); removed = true; } } return removed; } 调用实例： Integer[] nums = {1,2,3,4,5,6}; ArrayList&lt;Integer> list = new ArrayList&lt;Integer>(Arrays.asList(nums)); list.removeIf(num->num>3?true:false);//删除list中大于3的元素 //这里的lambda表达式是简化的写法，将lambda表达式完整的写法是list.removeIf((Integer num)->{return num>3?true:false;}); 抛出异常： @throws NullPointerException @throws UnsupportedOperationException 这个元素不能被删除 1.12 boolean retainAll(Collection&lt;?&gt; c);仅保留给定集合中的元素，删除其他元素。 抛出异常： @throws UnsupportedOperationException @throws ClassCastException @throws NullPointerException 1.13 void clear();移除所有元素。 抛出异常： @throws UnsupportedOperationException 1.14 default Stream stream();返回一个序列流。默认实现： default Stream&lt;E> stream() { return StreamSupport.stream(spliterator(), false); } 1.15 default Stream parallelStream();返回一个并行流。默认实现： default Stream&lt;E> parallelStream() { return StreamSupport.stream(spliterator(), true); }","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"java","slug":"java","permalink":"https://www.codetool.top/tags/java/"},{"name":"jdk","slug":"jdk","permalink":"https://www.codetool.top/tags/jdk/"},{"name":"集合","slug":"集合","permalink":"https://www.codetool.top/tags/%E9%9B%86%E5%90%88/"}]},{"title":"leetcode724-寻找数组的中心索引","slug":"leetcode724-寻找数组的中心索引","date":"2019-11-13T10:05:23.000Z","updated":"2020-02-20T14:42:31.679Z","comments":true,"path":"article/leetcode724-寻找数组的中心索引/","link":"","permalink":"https://www.codetool.top/article/leetcode724-%E5%AF%BB%E6%89%BE%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E5%BF%83%E7%B4%A2%E5%BC%95/","excerpt":"","text":"1 原题给定一个整数类型的数组nums，请编写一个能够返回数组“中心索引”的方法。 我们是这样定义数组中心索引的：数组中心索引的左侧所有元素相加的和等于右侧所有元素相加的和。 如果数组不存在中心索引，那么我们应该返回 -1。如果数组有多个中心索引，那么我们应该返回最靠近左边的那一个。 示例 1: 输入:nums = [1, 7, 3, 6, 5, 6]输出: 3解释:索引3 (nums[3] = 6) 的左侧数之和(1 + 7 + 3 = 11)，与右侧数之和(5 + 6 = 11)相等。同时, 3 也是第一个符合要求的中心索引。 示例 2: 输入:nums = [1, 2, 3]输出: -1解释:数组中不存在满足此条件的中心索引。 说明: nums的长度范围为 [0, 10000]。 任何一个 nums[i] 将会是一个范围在 [-1000, 1000]的整数。 2 解法2.1 思想避免重复计算，先计算完数组所有元素之和，再划分为两数之和的问题。 2.2 代码class Solution { public int pivotIndex(int[] nums) { int i; int frontRet = 0, endRet = 0; //计算所有元素总和 for (int k = 0; k &lt; nums.length; k++) { endRet += nums[k]; } //从左向右试探，计算两部分的值 for (i = 0; i &lt; nums.length; i++) { endRet -= nums[i]; if (frontRet == endRet) { break; } frontRet += nums[i]; } if ((i &lt; 0) || (i >= nums.length)) { i = -1; } return i; } }","categories":[{"name":"算法/数据结构","slug":"算法-数据结构","permalink":"https://www.codetool.top/categories/%E7%AE%97%E6%B3%95-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"leetcode","slug":"leetcode","permalink":"https://www.codetool.top/tags/leetcode/"},{"name":"算法","slug":"算法","permalink":"https://www.codetool.top/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"我的博客搬家啦","slug":"hello-world","date":"2019-11-08T10:05:23.000Z","updated":"2019-12-19T08:15:15.875Z","comments":true,"path":"article/hello-world/","link":"","permalink":"https://www.codetool.top/article/hello-world/","excerpt":"","text":"今天弃了wordpress的坑搬来hexo啦。和gitbook差不多的用法，很快就上手了呢。再也不用忍受wordpress一堆不仅没用还加载龟速的资源了奥里给！！！","categories":[{"name":"日常/随笔","slug":"日常-随笔","permalink":"https://www.codetool.top/categories/%E6%97%A5%E5%B8%B8-%E9%9A%8F%E7%AC%94/"}],"tags":[{"name":"网站日志","slug":"网站日志","permalink":"https://www.codetool.top/tags/%E7%BD%91%E7%AB%99%E6%97%A5%E5%BF%97/"}]},{"title":"23种设计模式归纳","slug":"23种设计模式归纳","date":"2019-11-08T10:05:23.000Z","updated":"2020-02-21T14:38:05.956Z","comments":true,"path":"article/23种设计模式归纳/","link":"","permalink":"https://www.codetool.top/article/23%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%BD%92%E7%BA%B3/","excerpt":"","text":"1 参考文档 23种设计模式全解析 - codeTao - 博客园 设计模式（创建型） - 八一鱼 - 博客园 设计模式（结构型） - 八一鱼 - 博客园 代理模式和装饰者模式的区别 - 夜的第八章 - 博客园 简说设计模式——享元模式 - JAdam - 博客园 2 设计模式的分类 类模式处理类与子类的关系，通过处理这些关系来建立继承，属于静态关系，在编译时候确定下来；对象模式处理对象之间的关系，运行时发生变化，属于动态关系。 2.1 创建型模式 工厂方法模式 抽象工厂模式 单例模式 建造者模式 原型模式 2.2 结构型模式 适配器模式 装饰器模式 代理模式 外观模式 桥接模式 组合模式 享元模式 2.3 行为型模式 策略模式 模板方法模式 观察者模式 迭代器模式 责任链模式 命令模式 备忘录模式 状态模式 访问者模式 中介者模式 解释器模式 3 设计模式遵守的设计原则也是类的设计遵守的原则 3.1 单一职责原则SRP每个类只做一件事，但该原则也不适用于聚合类。 聚合类需要优先使用对象组合，而不是类继承 3.2 里氏替换原则LSP 子类的对象提供了父类的所有行为，且加上子类额外的一些东西（可以是功能，也可以是属性） 当程序基于父类实现时，如果将子类替换父类而程序不需要修改，则说明符合LSP原则 子类必须能替换成它们的父类 3.3 依赖倒置原则DIP也叫依赖反转原则。 高层模块不应该直接依赖低层模块，两者都应该依赖抽象层。 抽象不能依赖细节，细节必须依赖抽象。 3.4 接口隔离原则ISP 客户端不应该被强迫去依赖它们并不需要的接口 不满足ISP的类应该拆分成多个接口， 通过一个抽象类去实现它们，再去继承这个抽象父类。 3.5 开闭原则 对拓展开放，对修改封闭 对使用者修改关闭，对提供者拓展开放 4 创建型模式解析 在软件工程中，创建型模式是处理对象创建的设计模式，试图根据实际情况使用合适的方式创建对象。基本的对象创建方式可能会导致设计上的问题，或增加设计的复杂度。创建型模式通过以某种方式控制对象的创建来解决问题。 4.1 工厂方法模式（类） 创建一个工厂接口和创建多个工厂实现类 4.2 抽象工厂模式（对象） 区别： 工厂方法模式只有一个抽象产品类，而抽象工厂模式有多个。工厂方法模式的具体工厂类只能创建一个具体产品类的实例，而抽象工厂模式可以创建多个。工厂方法创建 “一种” 产品，他的着重点在于”怎么创建”，也就是说如果你开发，你的大量代码很可能围绕着这种产品的构造，初始化这些细节上面。也因为如此，类似的产品之间有很多可以复用的特征，所以会和模版方法相随。 抽象工厂需要创建一些列产品，着重点在于”创建哪些”产品上，也就是说，如果你开发，你的主要任务是划分不同差异的产品线，并且尽量保持每条产品线接口一致，从而可以从同一个抽象工厂继承。 抽象工厂模式包含如下角色： AbstractFactory：抽象工厂 ConcreteFactory：具体工厂 AbstractProduct：抽象产品 Product：具体产品 4.3 单例模式（对象） 在一个JVM中，该类只有一个对象实例存在。 public class Singleton { /* 持有私有静态实例，防止被引用，此处赋值为null，目的是实现延迟加载 */ private static Singleton instance = null; /* 私有构造方法，防止被实例化 */ private Singleton() { } /* 静态工程方法，创建实例 */ public static Singleton getInstance() { if (instance == null) { instance = new Singleton(); } return instance; } /* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 */ public Object readResolve() { return instance; } } 多线程下的优化： public class Singleton { /* 私有构造方法，防止被实例化 */ private Singleton() { } /* 此处使用一个内部类来维护单例 */ private static class SingletonFactory { private static Singleton instance = new Singleton(); } /* 获取实例 */ public static Singleton getInstance() { return SingletonFactory.instance; } /* 如果该对象被用于序列化，可以保证对象在序列化前后保持一致 */ public Object readResolve() { return getInstance(); } } 原理： JVM内部的机制能够保证当一个类被加载的时候，这个类的加载过程是线程互斥的。这样当我们第一次调用getInstance的时候，JVM能够帮我们保证instance只被创建一次，并且会保证把赋值给instance的内存初始化完毕 4.4 建造者模式（对象） 在软件开发中，也存在大量类似汽车一样的复杂对象，它们拥有一系列成员属性，这些成员属性中有些是引用类型的成员对象。而且在这些复杂对象中，还可能存在一些限制条件，如某些属性没有赋值则复杂对象不能作为一个完整的产品使用；有些属性的赋值必须按照某个顺序，一个属性没有赋值之前，另一个属性可能无法赋值等。 建造者模式包含如下角色： Builder：抽象建造者 ConcreteBuilder：具体建造者 Director：指挥者 Product：产品角色 Director的作用： 隔离客户与生产过程。 负责控制产品的生成过程。 public class Meal { private String food; private String drink; public String getFood() { return food; } public void setFood(String food) { this.food = food; } public String getDrink() { return drink; } public void setDrink(String drink) { this.drink = drink; } } public abstract class MealBuilder { Meal meal = new Meal(); public abstract void buildFood(); public abstract void buildDrink(); public Meal getMeal(){ return meal; } } public class MealA extends MealBuilder{ public void buildDrink() { meal.setDrink(\"可乐\"); } public void buildFood() { meal.setFood(\"薯条\"); } } public class KFCWaiter { private MealBuilder mealBuilder; public KFCWaiter(MealBuilder mealBuilder) { this.mealBuilder = mealBuilder; } public Meal construct(){ //准备食物 mealBuilder.buildFood(); //准备饮料 mealBuilder.buildDrink(); //准备完毕，返回一个完整的套餐给客户 return mealBuilder.getMeal(); } } 4.5 原型模式（对象） 有些对象是需要频繁创建的，用原型实例指定创建对象的类型，并且通过拷贝这个原型来创建新的同类型的对象，分为浅克隆和深克隆，浅克隆只复制拷贝的对象，不复制引用的对象，即成员对象不复制；深克隆，引用也同样复制。 public class Prototype implements Cloneable, Serializable { private static final long serialVersionUID = 1L; private String string; private SerializableObject obj; /* 浅复制 */ public Object clone() throws CloneNotSupportedException { Prototype proto = (Prototype) super.clone(); /* super.clone()是浅复制 */ return proto; } /* 深复制 */ public Object deepClone() throws IOException, ClassNotFoundException { /* 写入当前对象的二进制流 */ ByteArrayOutputStream bos = new ByteArrayOutputStream(); ObjectOutputStream oos = new ObjectOutputStream(bos); oos.writeObject(this); /* 读出二进制流产生的新对象 */ ByteArrayInputStream bis = new ByteArrayInputStream(bos.toByteArray()); ObjectInputStream ois = new ObjectInputStream(bis); return ois.readObject(); } public String getString() { return string; } public void setString(String string) { this.string = string; } public SerializableObject getObj() { return obj; } public void setObj(SerializableObject obj) { this.obj = obj; } } class SerializableObject implements Serializable { private static final long serialVersionUID = 1L; } 5 结构型模式解析结构型模式主要用于处理类和对象的组合 5.1 适配器模式（类和对象） 将一个接口转换成客户希望的另一个接口，从而使接口不兼容的那些类可以在一起工作。 5.1.1 类的适配器模式 通过一个具体的类，将适配者适配到目标接口当中 public class Source { public void method1() { System.out.println(\"this is original method!\"); } } public interface Targetable { /* 与原类中的方法相同 */ public void method1(); /* 新类的方法 */ public void method2(); } public class Adapter extends Source implements Targetable { @Override public void method2() { System.out.println(\"this is the targetable method!\"); } } public class AdapterTest { public static void main(String[] args) { Targetable target = new Adapter(); target.method1(); target.method2(); } } 5.1.2 对象的适配器模式 一个适配器可以将多个不同的适配者适配到同一目标 public class Wrapper implements Targetable { private Source source; public Wrapper(Source source){ super(); this.source = source; } @Override public void method2() { System.out.println(\"this is the targetable method!\"); } @Override public void method1() { source.method1(); } } 5.2 装饰者模式（对象） 给一个对象增加一些新的功能，而且是动态的，要求装饰对象和被装饰对象实现同一个接口，装饰对象持有被装饰对象的实例 //Sourceable public interface Sourceable { public void method(); } //Source public class Source implements Sourceable { @Override public void method() { System.out.println(\"the original method!\"); } } //Decorator public class Decorator implements Sourceable { private Sourceable source; public Decorator(Sourceable source){ super(); this.source = source; } @Override public void method() { System.out.println(\"before decorator!\"); source.method(); System.out.println(\"after decorator!\"); } } 我寻思有点像servlet的过滤器 5.3 代理模式（对象） 多一个代理类出来，替原对象进行一些操作 public interface Sourceable { public void method(); } public class Source implements Sourceable { @Override public void method() { System.out.println(\"the original method!\"); } } public class Proxy implements Sourceable { private Source source; public Proxy(){ super(); this.source = new Source(); } @Override public void method() { before(); source.method(); atfer(); } private void atfer() { System.out.println(\"after proxy!\"); } private void before() { System.out.println(\"before proxy!\"); } } 装饰者模式和代理模式的区别： 装饰器模式关注于在一个对象上动态的添加方法，然而代理模式关注于控制对对象的访问。换句话说，用代理模式，代理类（proxy class）可以对它的客户隐藏一个对象的具体信息。因此，当使用代理模式的时候，我们常常在一个代理类中创建一个对象的实例。并且，当我们使用装饰器模式的时候，我们通常的做法是将原始对象作为一个参数传给装饰者的构造器。 5.4 外观模式（对象） 定义一个高层接口，为子系统中的一组接口提供一个一致的外观，从而简化了该子系统的使用 外观模式包含如下角色： Facade: 外观角色 SubSystem:子系统角色 //CPU public class CPU { public void startup(){ System.out.println(\"cpu startup!\"); } public void shutdown(){ System.out.println(\"cpu shutdown!\"); } } //Memory public class Memory { public void startup(){ System.out.println(\"memory startup!\"); } public void shutdown(){ System.out.println(\"memory shutdown!\"); } } //Disk public class Disk { public void startup(){ System.out.println(\"disk startup!\"); } public void shutdown(){ System.out.println(\"disk shutdown!\"); } } //Facade public class Computer { private CPU cpu; private Memory memory; private Disk disk; public Computer(){ cpu = new CPU(); memory = new Memory(); disk = new Disk(); } public void startup(){ System.out.println(\"start the computer!\"); cpu.startup(); memory.startup(); disk.startup(); System.out.println(\"start computer finished!\"); } public void shutdown(){ System.out.println(\"begin to close the computer!\"); cpu.shutdown(); memory.shutdown(); disk.shutdown(); System.out.println(\"computer closed!\"); } } 5.5 桥接模式（对象） 把事物和其具体实现分开，使他们可以各自独立的变化。 将抽象化与实现化解耦，使得二者可以独立变化 public interface Sourceable { public void method(); } public class SourceSub1 implements Sourceable { @Override public void method() { System.out.println(\"this is the first sub!\"); } } public class SourceSub2 implements Sourceable { @Override public void method() { System.out.println(\"this is the second sub!\"); } } public abstract class Bridge { private Sourceable source; public void method(){ source.method(); } public Sourceable getSource() { return source; } public void setSource(Sourceable source) { this.source = source; } } public class MyBridge extends Bridge { public void method(){ getSource().method(); } } 5.6 组合模式（对象） 将多个对象组合在一起进行操作，常用于表示树形结构中，例如二叉树，树等。 public class TreeNode { private String name; private TreeNode parent; private Vector&lt;TreeNode> children = new Vector&lt;TreeNode>(); public TreeNode(String name){ this.name = name; } public String getName() { return name; } public void setName(String name) { this.name = name; } public TreeNode getParent() { return parent; } public void setParent(TreeNode parent) { this.parent = parent; } //添加孩子节点 public void add(TreeNode node){ children.add(node); } //删除孩子节点 public void remove(TreeNode node){ children.remove(node); } //取得孩子节点 public Enumeration&lt;TreeNode> getChildren(){ return children.elements(); } } public class Tree { TreeNode root = null; public Tree(String name) { root = new TreeNode(name); } public static void main(String[] args) { Tree tree = new Tree(\"A\"); TreeNode nodeB = new TreeNode(\"B\"); TreeNode nodeC = new TreeNode(\"C\"); nodeB.add(nodeC); tree.root.add(nodeB); System.out.println(\"build the tree finished!\"); } } 5.7 享元模式（对象） 实现对象的共享，即共享池，当系统中对象多的时候可以减少内存的开销，通常与工厂模式一起使用。 其中，Flyweight是抽象享元角色。它是产品的抽象类，同时定义出对象的外部状态和内部状态的接口或实现；ConcreteFlyweight是具体享元角色，是具体的产品类，实现抽象角色定义的业务；UnsharedConcreteFlyweight是不可共享的享元角色，一般不会出现在享元工厂中；FlyweightFactory是享元工厂，它用于构造一个池容器，同时提供从池中获得对象的方法。 public abstract class Flyweight { //内部状态 public String intrinsic; //外部状态 protected final String extrinsic; //要求享元角色必须接受外部状态 public Flyweight(String extrinsic) { this.extrinsic = extrinsic; } //定义业务操作 public abstract void operate(int extrinsic); public String getIntrinsic() { return intrinsic; } public void setIntrinsic(String intrinsic) { this.intrinsic = intrinsic; } } public class ConcreteFlyweight extends Flyweight { //接受外部状态 public ConcreteFlyweight(String extrinsic) { super(extrinsic); } //根据外部状态进行逻辑处理 @Override public void operate(int extrinsic) { System.out.println(\"具体Flyweight:\" + extrinsic); } } public class UnsharedConcreteFlyweight extends Flyweight { public UnsharedConcreteFlyweight(String extrinsic) { super(extrinsic); } @Override public void operate(int extrinsic) { System.out.println(\"不共享的具体Flyweight:\" + extrinsic); } } public class FlyweightFactory { //定义一个池容器 private static HashMap&lt;String, Flyweight> pool = new HashMap&lt;>(); //享元工厂 public static Flyweight getFlyweight(String extrinsic) { Flyweight flyweight = null; if(pool.containsKey(extrinsic)) { //池中有该对象 flyweight = pool.get(extrinsic); System.out.print(\"已有 \" + extrinsic + \" 直接从池中取---->\"); } else { //根据外部状态创建享元对象 flyweight = new ConcreteFlyweight(extrinsic); //放入池中 pool.put(extrinsic, flyweight); System.out.print(\"创建 \" + extrinsic + \" 并从池中取出---->\"); } return flyweight; } } 6 行为型模式解析行为型模式主要用于描述类或对象的交互以及职责分配 6.1 解释器模式（类） 主要应用在OOP开发中的编译器的开发中 给定一种语言，定义它的文法表示，并定义一个解释器，该解释器用来根据文法表示来解释语言中的句子 ​ 6.2 模板方法模式（类） 定义一个操作中的算法骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重新定义算法中某些特定步骤 6.3 策略模式（对象） 定义一系列算法，把它们一个个封装起来，并且使它们之间可相互替换，从而让算法可以独立于使用它的用户而变化 6.4 观察者模式（对象） 定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并自动更新 public interface Observer { public void update(); } public class Observer1 implements Observer { @Override public void update() { System.out.println(\"observer1 has received!\"); } } public class Observer2 implements Observer { @Override public void update() { System.out.println(\"observer2 has received!\"); } } public interface Subject { /*增加观察者*/ public void add(Observer observer); /*删除观察者*/ public void del(Observer observer); /*通知所有的观察者*/ public void notifyObservers(); /*自身的操作*/ public void operation(); } public abstract class AbstractSubject implements Subject { private Vector&lt;Observer> vector = new Vector&lt;Observer>(); @Override public void add(Observer observer) { vector.add(observer); } @Override public void del(Observer observer) { vector.remove(observer); } //提醒应当在抽象类中就实现 @Override public void notifyObservers() { Enumeration&lt;Observer> enumo = vector.elements(); while(enumo.hasMoreElements()){ enumo.nextElement().update(); } } } public class MySubject extends AbstractSubject { @Override public void operation() { System.out.println(\"update self!\"); notifyObservers(); } } 6.5 迭代器模式（对象） 提供一种方法来顺序访问一个聚合对象中的各个元素，而不需要暴露该对象的内部表示。 6.6 责任链模式（对象） 有多个对象，每个对象持有对下一个对象的引用，这样就会形成一条链，请求在这条链上传递，直到某一对象决定处理该请求。但是发出者并不清楚到底最终那个对象会处理该请求 public interface Handler { public void operator(); } public abstract class AbstractHandler { private Handler handler; public Handler getHandler() { return handler; } public void setHandler(Handler handler) { this.handler = handler; } } public class MyHandler extends AbstractHandler implements Handler { private String name; public MyHandler(String name) { this.name = name; } @Override public void operator() { System.out.println(name+\"deal!\"); if(getHandler()!=null){ getHandler().operator(); } } } 6.7 命令模式（对象） 将一个请求封装为一个对象，从而可用不同的请求对客户进行参数化，将请求排队或记录请求日志，支持可撤销的操作 public interface Command { public void exe(); } public class MyCommand implements Command { private Receiver receiver; public MyCommand(Receiver receiver) { this.receiver = receiver; } @Override public void exe() { receiver.action(); } } public class Receiver { public void action(){ System.out.println(\"command received!\"); } } public class Invoker { private Command command; public Invoker(Command command) { this.command = command; } public void action(){ command.exe(); } } 6.8 备忘录模式（对象） 在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，从而可以在以后将该对象恢复到原先保存的状态 public class Original { private String value; public String getValue() { return value; } public void setValue(String value) { this.value = value; } public Original(String value) { this.value = value; } public Memento createMemento(){ return new Memento(value); } public void restoreMemento(Memento memento){ this.value = memento.getValue(); } } public class Memento { private String value; public Memento(String value) { this.value = value; } public String getValue() { return value; } public void setValue(String value) { this.value = value; } } public class Storage { private Memento memento; public Storage(Memento memento) { this.memento = memento; } public Memento getMemento() { return memento; } public void setMemento(Memento memento) { this.memento = memento; } } 6.9 状态模式（对象） 允许一个对象在其内部状态改变时能够改变它的行为 public class State { private String value; public String getValue() { return value; } public void setValue(String value) { this.value = value; } public void method1(){ System.out.println(\"execute the first opt!\"); } public void method2(){ System.out.println(\"execute the second opt!\"); } } public class Context { private State state; public Context(State state) { this.state = state; } public State getState() { return state; } public void setState(State state) { this.state = state; } public void method() { if (state.getValue().equals(\"state1\")) { state.method1(); } else if (state.getValue().equals(\"state2\")) { state.method2(); } } } 6.10 访问者模式（对象） 表示一个作用于某对象结构中的各元素的操作，使得在不改变各元素的类的前提下定义作用于这些元素的新操作 适用于：给一个类添加新功能，但为了兼容性考虑或其他原因不想破坏这个类 public interface Visitor { public void visit(Subject sub); } public class MyVisitor implements Visitor { @Override public void visit(Subject sub) { System.out.println(\"visit the subject：\"+sub.getSubject()); } } public interface Subject { public void accept(Visitor visitor); public String getSubject(); } public class MySubject implements Subject { @Override public void accept(Visitor visitor) { visitor.visit(this); } @Override public String getSubject() { return \"love\"; } } 6.11 中介者模式（对象） 用一个中介对象来封装一系列的对象交互。它使各对象不需要显示地相互调用，从而达到低耦合，还可以独立地改变对象间的交互 public interface Mediator { public void createMediator(); public void workAll(); } public class MyMediator implements Mediator { private User user1; private User user2; public User getUser1() { return user1; } public User getUser2() { return user2; } @Override public void createMediator() { user1 = new User1(this); user2 = new User2(this); } @Override public void workAll() { user1.work(); user2.work(); } } public abstract class User { private Mediator mediator; public Mediator getMediator(){ return mediator; } public User(Mediator mediator) { this.mediator = mediator; } public abstract void work(); } public class User1 extends User { public User1(Mediator mediator){ super(mediator); } @Override public void work() { System.out.println(\"user1 exe!\"); } } public class User2 extends User { public User2(Mediator mediator){ super(mediator); } @Override public void work() { System.out.println(\"user2 exe!\"); } } public class Test { public static void main(String[] args) { Mediator mediator = new MyMediator(); mediator.createMediator(); mediator.workAll(); } }","categories":[{"name":"编程语言","slug":"编程语言","permalink":"https://www.codetool.top/categories/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/"}],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"https://www.codetool.top/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}]},{"title":"在线运行C++、java、python代码的小项目实现","slug":"在线运行C++、java、python代码的小项目实现","date":"2019-08-13T12:06:57.000Z","updated":"2020-02-21T14:38:44.146Z","comments":true,"path":"article/在线运行C++、java、python代码的小项目实现/","link":"","permalink":"https://www.codetool.top/article/%E5%9C%A8%E7%BA%BF%E8%BF%90%E8%A1%8CC++%E3%80%81java%E3%80%81python%E4%BB%A3%E7%A0%81%E7%9A%84%E5%B0%8F%E9%A1%B9%E7%9B%AE%E5%AE%9E%E7%8E%B0/","excerpt":"","text":"本网站在2019年8月12日之前用的代码演示功能是借用了 https://tool.lu/coderunner/ 的在线运行代码工具，在此致谢。 有一段时间这个工具突然失效了，我就在想能不能自己模仿着做一个类似的出来，简单分析了一下就想挑战一下自己，然后就开始动手了。 做出来的成果链接：点击此处 做的过程中查阅了很多网络资料，现整理如下： 需求分析：前端为一个实用的代码编辑器，通过ajax请求将写好的代码提交给服务器，服务器编译运行后把输出结果送回客户端显示。 其中使用的代码编辑器：CodeMirror，现在类似的工具使用的应该都是这款功能强大，可以自定样式的代码编辑器，官网： https://codemirror.net/ 0.1 CodeMirror搭建前端界面先从官网下载下来CodeMirror的压缩包，解压之后得到下图目录 要在html中创建一个CodeMirror编辑器，必须添加的css和js文件是 &lt;link href=./codemirror-5.48.2/lib/codemirror.css rel=stylesheet/> &lt;script src=./codemirror-5.48.2/lib/codemirror.js>&lt;/script> (5.48.2为版本号，因人而异) 然后需要添加需要编辑的语言相关的js文件，可以在mode目录下找到，这里我用了两个文件： 实现JAVA和C++代码高亮（这个文件可以实现C，C++，JAVA，C#等语言）： &lt;script src=./codemirror-5.48.2/mode/clike/clike.js>&lt;/script> 实现python的代码高亮： &lt;script src=./codemirror-5.48.2/mode/python/python.js>&lt;/script> 需要更改编辑器主题样式的可以在theme目录下找到对应的主题css文件添加进去，我觉得默认主题就很好看了就没用其他主题。 为了实现括号匹配和代码折叠功能，还要添加的文件有： &lt;link rel=stylesheet href=./codemirror-5.48.2/addon/fold/foldgutter.css/> &lt;script src=./codemirror-5.48.2/addon/fold/foldcode.js>&lt;/script> &lt;script src=./codemirror-5.48.2/addon/fold/foldgutter.js>&lt;/script> &lt;script src=./codemirror-5.48.2/addon/fold/brace-fold.js>&lt;/script> &lt;script src=./codemirror-5.48.2/addon/fold/comment-fold.js>&lt;/script> 创建编辑器的过程： 在html中使用一个textarea占位，配置好id： &lt;textarea id=code name=code>&lt;/textarea> 通过对应的js代码创建编辑器： var editor = CodeMirror.fromTextArea(document.getElementById(code), { mode: text/x-java, //实现Java代码高亮 //mode: text/x-c++src, //实现C++代码高亮 //mode: text/x-python, //实现Python代码高亮 indentUnit:4,//以四个空格的长度缩进 indentWithTabs: true,//以tab代替空格缩进 lineNumbers: true, //显示行号 lineWrapping: true, foldGutter: true, //代码折叠 gutters: [CodeMirror-linenumbers, CodeMirror-foldgutter], matchBrackets: true //括号匹配 }); 这里需要什么语言高亮需要在官网找到对应语言的 MIME types ，写在mode参数中 其他相关js函数： 编辑器的大小通过 editor.setSize(width, height) 方法设置 获取编辑器内的代码：editor.getValue() 设置编辑器内的代码：editor.setValue() 设置编辑器的配置选项: editor.setOption() 最终搭配上bootstrap样式做出来的效果是这样的： 0.2 js实现前端逻辑使用JQuery简化js的写法 关键代码： 切换语言事件 //选择语言事件 $(\"#lang\").on('change', () => { lang = $(\"#lang\").val() if (lang == 'java') { editor.setOption(\"mode\", \"text/x-java\") editor.setValue(javacode) } else if (lang == \"cpp\") { editor.setOption(\"mode\", \"text/x-c++src\") editor.setValue(cppcode) } else if (lang == \"python\") { editor.setOption(\"mode\", \"text/x-python\") editor.setValue(pythoncode) } }) 发送POST请求 $(function(){ //点击运行按钮后的事件 $(\"#run\").on(\"click\",()=>{ var codesrc = editor.getValue(); //给源代码编码 var codeEncoded = encodeURIComponent(codesrc); $(\"output\").html = 'console>>' + '正在努力执行中...'; //发出post请求 $.post( \"/runcode.php\", { lang:lang,codesrc:codeEncoded }, (data)=>{ var outputs = data.output; var status1 = data.status1; var output = ''; //拼接输出结果 if(status1 !== 1){ for(var i in outputs) { output = output + outputs[i] + '&lt;br/>'; }data }else{ var outputs1 = data.output1; for(var i in outputs1) { output = output + outputs1[i] + '&lt;br/>'; } } $(\"output\").html = 'console>>' + output; }, \"json\"); }) }); 注： 由于代码中可能出现 + 或 &amp; 等符号，其在post的请求中经过urlencode会分别被解析为空格和参数连接符，需先将代码源码用js的encodeURIComponent()函数编码，传递到php后端后再用rawurldecode()函数进行解码操作。 0.3 php实现后端php的任务是在服务器上运行代码，核心的思想是将接收到的代码写入文件，使用各种环境去执行，并返回结果 其中用到了exec函数 具体参阅 【php】php使用exec总结 做的时候遇到了个问题：php在调用exec执行gcc命令时，会出现各种毛病，例如ld链接器找不到，后来发现原因是php不会使用系统设置的环境变量，在php文件开头添加这样一句话就能解决问题： putenv(PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin);//设置环境变量","categories":[{"name":"项目总结","slug":"项目总结","permalink":"https://www.codetool.top/categories/%E9%A1%B9%E7%9B%AE%E6%80%BB%E7%BB%93/"}],"tags":[{"name":"php","slug":"php","permalink":"https://www.codetool.top/tags/php/"},{"name":"CodeMirror","slug":"CodeMirror","permalink":"https://www.codetool.top/tags/CodeMirror/"},{"name":"项目","slug":"项目","permalink":"https://www.codetool.top/tags/%E9%A1%B9%E7%9B%AE/"}]}]}